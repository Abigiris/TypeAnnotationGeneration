{
    "concent-master/generate_version.py": {
        "generate_version": {
            "name": "generate_version",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/api-e2e-additional-verification-test.py": {
        "get_subtask_results_verify": {
            "name": "get_subtask_results_verify",
            "location": 35,
            "return": [],
            "arguments": {
                "current_time": [],
                "reason": [],
                "report_computed_task_size": [],
                "report_computed_task_package_hash": [],
                "task_to_compute_size": [],
                "task_to_compute_package_hash": [],
                "provider_public_key": [],
                "provider_private_key": [],
                "requestor_public_key": [],
                "requestor_private_key": [],
                "price": [],
                "is_verification_deadline_before_current_time": [],
                "additional_verification_call_time": [],
                "minimum_upload_rate": [],
                "render_parameters": []
            }
        },
        "calculate_verification_deadline": {
            "name": "calculate_verification_deadline",
            "location": 106,
            "return": [],
            "arguments": {
                "subtask_results_rejected_timestamp": [],
                "additional_verification_call_time": [],
                "report_computed_task_size": [],
                "minimum_upload_rate": []
            }
        },
        "get_render_params": {
            "name": "get_render_params",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_case_1_test_for_positive_case": {
            "name": "test_case_1_test_for_positive_case",
            "location": 133,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2_test_for_resources_failure_reason": {
            "name": "test_case_2_test_for_resources_failure_reason",
            "location": 246,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_3_test_for_invalid_time": {
            "name": "test_case_3_test_for_invalid_time",
            "location": 278,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_4_test_for_duplicated_request": {
            "name": "test_case_4_test_for_duplicated_request",
            "location": 314,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_5_test_requestor_status_account_negative": {
            "name": "test_case_5_test_requestor_status_account_negative",
            "location": 366,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_6_test_with_invalid_blender_script_parameters": {
            "name": "test_case_6_test_with_invalid_blender_script_parameters",
            "location": 407,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-cluster-multiple-golem-messages-routing.py": {
        "test_case_ping_message_send_to_concent_with_supported_golem_messages_should_get_http400_response_with_message_unknown_error": {
            "name": "test_case_ping_message_send_to_concent_with_supported_golem_messages_should_get_http400_response_with_message_unknown_error",
            "location": 20,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "cluster_consts": [],
                "concent_1_golem_messages_version": [],
                "concent_2_golem_messages_version": []
            }
        },
        "test_case_ping_message_send_to_concent_with_unsupported_golem_messages_should_get_http404_response_with_not_found_error": {
            "name": "test_case_ping_message_send_to_concent_with_unsupported_golem_messages_should_get_http404_response_with_not_found_error",
            "location": 52,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "cluster_consts": [],
                "concent_1_golem_messages_version": [],
                "concent_2_golem_messages_version": []
            }
        },
        "test_case_ping_message_send_to_concent_with_malformed_golem_messages_should_get_http400_response_with_bad_request_error": {
            "name": "test_case_ping_message_send_to_concent_with_malformed_golem_messages_should_get_http400_response_with_bad_request_error",
            "location": 76,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "cluster_consts": [],
                "concent_1_golem_messages_version": [],
                "concent_2_golem_messages_version": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-force-accept-or-reject-results-test.py": {
        "create_force_subtask_results_response": {
            "name": "create_force_subtask_results_response",
            "location": 34,
            "return": [],
            "arguments": {
                "timestamp": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": []
            }
        },
        "create_subtask_results_rejected": {
            "name": "create_subtask_results_rejected",
            "location": 46,
            "return": [],
            "arguments": {
                "requestor_private_key": [],
                "timestamp": [],
                "reason": [],
                "report_computed_task": []
            }
        },
        "test_case_2d_requestor_rejects_subtask_results": {
            "name": "test_case_2d_requestor_rejects_subtask_results",
            "location": 64,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_4b_requestor_accepts_subtaks_results": {
            "name": "test_case_4b_requestor_accepts_subtaks_results",
            "location": 142,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2c_wrong_timestamps": {
            "name": "test_case_2c_wrong_timestamps",
            "location": 221,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2b_not_enough_funds": {
            "name": "test_case_2b_not_enough_funds",
            "location": 268,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2a_send_duplicated_force_subtask_results": {
            "name": "test_case_2a_send_duplicated_force_subtask_results",
            "location": 309,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-force-get-task-result-test.py": {
        "get_force_get_task_result": {
            "name": "get_force_get_task_result",
            "location": 35,
            "return": [],
            "arguments": {
                "current_time": [],
                "size": [],
                "package_hash": []
            }
        },
        "test_case_1_test_for_existing_file": {
            "name": "test_case_1_test_for_existing_file",
            "location": 62,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2_test_for_non_existing_file": {
            "name": "test_case_2_test_for_non_existing_file",
            "location": 134,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-force-payment.py": {
        "force_payment": {
            "name": "force_payment",
            "location": 40,
            "return": [],
            "arguments": {
                "timestamp": [],
                "subtask_results_accepted_list": []
            }
        },
        "test_case_2d_send_correct_force_payment": {
            "name": "test_case_2d_send_correct_force_payment",
            "location": 51,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2c_send_force_payment_with_no_value_to_be_paid": {
            "name": "test_case_2c_send_force_payment_with_no_value_to_be_paid",
            "location": 130,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2b_send_force_payment_beyond_payment_time": {
            "name": "test_case_2b_send_force_payment_beyond_payment_time",
            "location": 192,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_2_a_force_payment_with_subtask_result_accepted_where_ethereum_accounts_are_different": {
            "name": "test_case_2_a_force_payment_with_subtask_result_accepted_where_ethereum_accounts_are_different",
            "location": 255,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-force-report-computed-task-test.py": {
        "force_report_computed_task": {
            "name": "force_report_computed_task",
            "location": 31,
            "return": [],
            "arguments": {
                "task_to_compute": []
            }
        },
        "ack_report_computed_task": {
            "name": "ack_report_computed_task",
            "location": 41,
            "return": [],
            "arguments": {
                "task_to_compute": []
            }
        },
        "test_case_1_provider_forces_report_computed_task_and_gets_accepted": {
            "name": "test_case_1_provider_forces_report_computed_task_and_gets_accepted",
            "location": 50,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api-e2e-multi-threads-test.py": {
        "clear_responses": {
            "name": "clear_responses",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "get_ack_report_computed_task": {
            "name": "get_ack_report_computed_task",
            "location": 49,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "get_force_get_task_result": {
            "name": "get_force_get_task_result",
            "location": 53,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "get_force_report_computed_task": {
            "name": "get_force_report_computed_task",
            "location": 57,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "create_report_computed_task": {
            "name": "create_report_computed_task",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "send_correct_force_report_computed_task": {
            "name": "send_correct_force_report_computed_task",
            "location": 77,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "report_computed_task": [],
                "expected_status": []
            }
        },
        "send_correct_ack_report_computed_task": {
            "name": "send_correct_ack_report_computed_task",
            "location": 95,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "report_computed_task": [],
                "expected_status": []
            }
        },
        "send_correct_force_get_task_result": {
            "name": "send_correct_force_get_task_result",
            "location": 112,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "report_computed_task": [],
                "expected_status": []
            }
        },
        "send_correct_force_subtask_results": {
            "name": "send_correct_force_subtask_results",
            "location": 130,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "report_computed_task": [],
                "current_time": [],
                "provider_private_key": [],
                "requestor_private_key": [],
                "expected_status": []
            }
        },
        "test_case_multiple_requests_concerning_one_subtask_will_be_processed_one_by_one_if_subtask_exists_in_database": {
            "name": "test_case_multiple_requests_concerning_one_subtask_will_be_processed_one_by_one_if_subtask_exists_in_database",
            "location": 157,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_multiple_force_get_task_result_concerning_one_subtask_will_be_processed_one_by_one_if_subtask_does_not_exists_in_database": {
            "name": "test_case_multiple_force_get_task_result_concerning_one_subtask_will_be_processed_one_by_one_if_subtask_does_not_exists_in_database",
            "location": 200,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        },
        "test_case_multiple_force_subtask_results_does_not_cause_integrity_errors": {
            "name": "test_case_multiple_force_subtask_results_does_not_cause_integrity_errors",
            "location": 230,
            "return": [],
            "arguments": {
                "cluster_consts": [],
                "cluster_url": []
            }
        }
    },
    "concent-master/concent_api/api_testing_common.py": {
        "assert_condition": {
            "name": "assert_condition",
            "location": 94,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": [],
                "error_message": []
            }
        },
        "assert_content_equal": {
            "name": "assert_content_equal",
            "location": 100,
            "return": [],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "print_golem_message": {
            "name": "print_golem_message",
            "location": 105,
            "return": [],
            "arguments": {
                "message": [],
                "indent": []
            }
        },
        "validate_response_status": {
            "name": "validate_response_status",
            "location": 124,
            "return": [],
            "arguments": {
                "actual_status_code": [],
                "expected_status": []
            }
        },
        "validate_response_message": {
            "name": "validate_response_message",
            "location": 133,
            "return": [],
            "arguments": {
                "encoded_message": [],
                "expected_message_type": [],
                "private_key": [],
                "public_key": []
            }
        },
        "validate_content_type": {
            "name": "validate_content_type",
            "location": 148,
            "return": [],
            "arguments": {
                "actual_content_type": [],
                "expected_content_type": []
            }
        },
        "validate_golem_version": {
            "name": "validate_golem_version",
            "location": 157,
            "return": [],
            "arguments": {
                "actual_golem_version": [],
                "expected_golem_version": []
            }
        },
        "validate_error_code": {
            "name": "validate_error_code",
            "location": 166,
            "return": [],
            "arguments": {
                "actual_error_code": [],
                "expected_error_code": []
            }
        },
        "api_request": {
            "name": "api_request",
            "location": 174,
            "return": [],
            "arguments": {
                "host": [],
                "endpoint": [],
                "private_key": [],
                "public_key": [],
                "data": [],
                "headers": [],
                "expected_status": [],
                "expected_message_type": [],
                "expected_content_type": [],
                "expected_golem_version": [],
                "expected_error_code": []
            }
        },
        "_print_response": {
            "name": "_print_response",
            "location": 231,
            "return": [],
            "arguments": {
                "private_key": [],
                "public_key": [],
                "response": []
            }
        },
        "_print_message_from_json": {
            "name": "_print_message_from_json",
            "location": 246,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "_print_message_from_stream": {
            "name": "_print_message_from_stream",
            "location": 253,
            "return": [],
            "arguments": {
                "private_key": [],
                "public_key": [],
                "content": [],
                "headers": []
            }
        },
        "try_to_decode_golem_message": {
            "name": "try_to_decode_golem_message",
            "location": 268,
            "return": [],
            "arguments": {
                "private_key": [],
                "public_key": [],
                "content": []
            }
        },
        "timestamp_to_isoformat": {
            "name": "timestamp_to_isoformat",
            "location": 282,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "create_client_auth_message": {
            "name": "create_client_auth_message",
            "location": 286,
            "return": [],
            "arguments": {
                "client_priv_key": [],
                "client_public_key": [],
                "concent_public_key": []
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "get_tests_list": {
            "name": "get_tests_list",
            "location": 322,
            "return": [],
            "arguments": {
                "patterns": [],
                "all_objects": []
            }
        },
        "execute_tests": {
            "name": "execute_tests",
            "location": 333,
            "return": [],
            "arguments": {
                "tests_to_execute": [],
                "objects": []
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 340,
            "return": [],
            "arguments": {
                "objects": [],
                "additional_arguments": []
            }
        },
        "_get_provider_hex_public_key": {
            "name": "_get_provider_hex_public_key",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "_get_requestor_hex_public_key": {
            "name": "_get_requestor_hex_public_key",
            "location": 377,
            "return": [],
            "arguments": {}
        },
        "create_signed_task_to_compute": {
            "name": "create_signed_task_to_compute",
            "location": 381,
            "return": [],
            "arguments": {
                "deadline": [],
                "timestamp": [],
                "provider_public_key": [],
                "provider_private_key": [],
                "requestor_public_key": [],
                "requestor_private_key": [],
                "price": [],
                "size": [],
                "package_hash": [],
                "render_parameters": []
            }
        },
        "call_function_in_threads": {
            "name": "call_function_in_threads",
            "location": 450,
            "return": [],
            "arguments": {
                "func": [],
                "number_of_threads": []
            }
        },
        "create_signed_subtask_results_accepted": {
            "name": "create_signed_subtask_results_accepted",
            "location": 461,
            "return": [],
            "arguments": {
                "requestor_private_key": [],
                "payment_ts": [],
                "report_computed_task": [],
                "timestamp": []
            }
        },
        "create_signed_report_computed_task": {
            "name": "create_signed_report_computed_task",
            "location": 478,
            "return": [],
            "arguments": {
                "provider_private_key": [],
                "task_to_compute": [],
                "timestamp": []
            }
        },
        "receive_all_left_pending_responses": {
            "name": "receive_all_left_pending_responses",
            "location": 494,
            "return": [],
            "arguments": {
                "host": [],
                "endpoint": [],
                "client_private_key": [],
                "client_public_key": [],
                "concent_public_key": [],
                "client_name": []
            }
        },
        "receive_pending_messages_for_requestor_and_provider": {
            "name": "receive_pending_messages_for_requestor_and_provider",
            "location": 518,
            "return": [],
            "arguments": {
                "cluster_url": [],
                "sci_base": [],
                "concent_public_key": []
            }
        },
        "calculate_timestamp": {
            "name": "calculate_timestamp",
            "location": 541,
            "return": [],
            "arguments": {
                "current_time": [],
                "concent_messaging_time": [],
                "minimum_upload_rate": []
            }
        },
        "calculate_deadline": {
            "name": "calculate_deadline",
            "location": 547,
            "return": [],
            "arguments": {
                "current_time": [],
                "concent_messaging_time": [],
                "minimum_upload_rate": []
            }
        },
        "create_force_subtask_results": {
            "name": "create_force_subtask_results",
            "location": 551,
            "return": [],
            "arguments": {
                "timestamp": [],
                "ack_report_computed_task": []
            }
        },
        "create_ack_report_computed_task": {
            "name": "create_ack_report_computed_task",
            "location": 561,
            "return": [],
            "arguments": {
                "requestor_private_key": [],
                "timestamp": [],
                "report_computed_task": []
            }
        },
        "calculate_deadline_too_far_in_the_future": {
            "name": "calculate_deadline_too_far_in_the_future",
            "location": 576,
            "return": [],
            "arguments": {
                "current_time": [],
                "minimum_upload_rate": [],
                "concent_messaging_time": []
            }
        },
        "_precalculate_subtask_verification_time": {
            "name": "_precalculate_subtask_verification_time",
            "location": 580,
            "return": [],
            "arguments": {
                "minimum_upload_rate": [],
                "concent_messaging_time": []
            }
        },
        "count_fails.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "count_fails.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "count_fails.get_fails": {
            "name": "get_fails",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "count_fails.print_fails": {
            "name": "print_fails",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "api_request._prepare_data": {
            "name": "_prepare_data",
            "location": 187,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "api_request._print_data": {
            "name": "_print_data",
            "location": 196,
            "return": [],
            "arguments": {
                "data": [],
                "url": []
            }
        },
        "get_tests_list._is_a_test": {
            "name": "_is_a_test",
            "location": 323,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "concent-master/concent_api/manage.py": {},
    "concent-master/concent_api/protocol_constants.py": {
        "get_protocol_constants": {
            "name": "get_protocol_constants",
            "location": 18,
            "return": [],
            "arguments": {
                "cluster_url": []
            }
        },
        "print_protocol_constants": {
            "name": "print_protocol_constants",
            "location": 25,
            "return": [],
            "arguments": {
                "constants": []
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/sci_testing_common.py": {
        "SCIBaseTest._generate_keys": {
            "name": "_generate_keys",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "SCIBaseTest.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_address": [],
                "init_new_users_accounts": []
            }
        },
        "SCIBaseTest.setUp": {
            "name": "setUp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "gnt_deposit_address": [],
                "init_new_users_accounts": []
            }
        },
        "SCIBaseTest._test_eth_faucet_donate": {
            "name": "_test_eth_faucet_donate",
            "location": 102,
            "return": [],
            "arguments": {
                "eth_account_address": []
            }
        },
        "SCIBaseTest._test_gnt_faucet": {
            "name": "_test_gnt_faucet",
            "location": 112,
            "return": [],
            "arguments": {
                "sci": []
            }
        },
        "SCIBaseTest._test_gnt_to_gntb_transfer": {
            "name": "_test_gnt_to_gntb_transfer",
            "location": 117,
            "return": [],
            "arguments": {
                "sci": []
            }
        },
        "SCIBaseTest._wait_unitl_timeout": {
            "name": "_wait_unitl_timeout",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "timeout_message": [],
                "sleep_message": []
            }
        },
        "SCIBaseTest.request_for_gntb": {
            "name": "request_for_gntb",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.request_for_deposit": {
            "name": "request_for_deposit",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SCIBaseTest._get_gntb_balance": {
            "name": "_get_gntb_balance",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "sci": []
            }
        },
        "SCIBaseTest.get_provider_gntb_balance": {
            "name": "get_provider_gntb_balance",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.get_requestor_deposit_value": {
            "name": "get_requestor_deposit_value",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.get_provider_deposit_value": {
            "name": "get_provider_deposit_value",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.ensure_that_provider_has_specific_gntb_balance": {
            "name": "ensure_that_provider_has_specific_gntb_balance",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SCIBaseTest.ensure_that_requestor_has_specific_deposit_balance": {
            "name": "ensure_that_requestor_has_specific_deposit_balance",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SCIBaseTest.get_gnt_deposit_address_from_cluster_address": {
            "name": "get_gnt_deposit_address_from_cluster_address",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "SCIBaseTest.provider_public_key": {
            "name": "provider_public_key",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.provider_private_key": {
            "name": "provider_private_key",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.provider_eth_address": {
            "name": "provider_eth_address",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_public_key": {
            "name": "requestor_public_key",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_private_key": {
            "name": "requestor_private_key",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_eth_address": {
            "name": "requestor_eth_address",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.provider_empty_account_public_key": {
            "name": "provider_empty_account_public_key",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.provider_empty_account_private_key": {
            "name": "provider_empty_account_private_key",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.provider_empty_account_eth_address": {
            "name": "provider_empty_account_eth_address",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_empty_account_public_key": {
            "name": "requestor_empty_account_public_key",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_empty_account_private_key": {
            "name": "requestor_empty_account_private_key",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBaseTest.requestor_empty_account_eth_address": {
            "name": "requestor_empty_account_eth_address",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/signing_service_integration_test_concent_api.py": {
        "test_case_": {
            "name": "test_case_",
            "location": 19,
            "return": [],
            "arguments": {
                "test_id": [],
                "config": []
            }
        }
    },
    "concent-master/concent_api/signing_service_integration_test_middleman.py": {
        "send_golem_message_frame_with_correct_transaction_signing_request": {
            "name": "send_golem_message_frame_with_correct_transaction_signing_request",
            "location": 33,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "send_golem_message_frame_with_incorrect_transaction_signing_request": {
            "name": "send_golem_message_frame_with_incorrect_transaction_signing_request",
            "location": 67,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_1_send_golem_message_frame_with_correct_transaction_signing_request": {
            "name": "test_case_1_send_golem_message_frame_with_correct_transaction_signing_request",
            "location": 82,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_2_send_golem_message_frame_with_incorrect_then_correct_transaction_signing_request": {
            "name": "test_case_2_send_golem_message_frame_with_incorrect_then_correct_transaction_signing_request",
            "location": 115,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_3_send_golem_message_frame_with_correct_transaction_signing_request_by_several_concents": {
            "name": "test_case_3_send_golem_message_frame_with_correct_transaction_signing_request_by_several_concents",
            "location": 161,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_4_mayhem": {
            "name": "test_case_4_mayhem",
            "location": 175,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_4_mayhem.send_golem_message_frames": {
            "name": "send_golem_message_frames",
            "location": 182,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "concent-master/concent_api/signing_service_integration_test_recovery.py": {
        "run_middleman": {
            "name": "run_middleman",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "run_signing_service": {
            "name": "run_signing_service",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_case_0_prove_of_concept": {
            "name": "test_case_0_prove_of_concept",
            "location": 63,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_1_middleman_recovery": {
            "name": "test_case_1_middleman_recovery",
            "location": 113,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "test_case_2_signing_service_recovery": {
            "name": "test_case_2_signing_service_recovery",
            "location": 201,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "concent-master/concent_api/signing_service_testing_common.py": {
        "read_config": {
            "name": "read_config",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "read_command_line": {
            "name": "read_command_line",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "update_config": {
            "name": "update_config",
            "location": 100,
            "return": [],
            "arguments": {
                "config": [],
                "arguments": []
            }
        },
        "are_required_settings_in_config": {
            "name": "are_required_settings_in_config",
            "location": 118,
            "return": [],
            "arguments": {
                "components": [],
                "config": []
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 125,
            "return": [],
            "arguments": {
                "objects": []
            }
        },
        "check_if_required_components_are_running": {
            "name": "check_if_required_components_are_running",
            "location": 159,
            "return": [],
            "arguments": {
                "components": [],
                "config": []
            }
        },
        "is_concent_api_running": {
            "name": "is_concent_api_running",
            "location": 178,
            "return": [],
            "arguments": {
                "api_url": []
            }
        },
        "is_middleman_running": {
            "name": "is_middleman_running",
            "location": 197,
            "return": [],
            "arguments": {
                "host": [],
                "port": []
            }
        },
        "is_ethereum_blockchain_running": {
            "name": "is_ethereum_blockchain_running",
            "location": 211,
            "return": [],
            "arguments": {
                "geth_address": [],
                "concent_ethereum_address": []
            }
        },
        "send_message_to_middleman_and_receive_response": {
            "name": "send_message_to_middleman_and_receive_response",
            "location": 223,
            "return": [],
            "arguments": {
                "message": [],
                "config": [],
                "concent_private_key": [],
                "concent_public_key": []
            }
        },
        "send_message_to_middleman_without_response": {
            "name": "send_message_to_middleman_without_response",
            "location": 255,
            "return": [],
            "arguments": {
                "message": [],
                "config": [],
                "concent_private_key": []
            }
        },
        "create_golem_message_frame": {
            "name": "create_golem_message_frame",
            "location": 280,
            "return": [],
            "arguments": {
                "payload": [],
                "request_id": []
            }
        },
        "correct_transaction_signing_request": {
            "name": "correct_transaction_signing_request",
            "location": 287,
            "return": [],
            "arguments": {
                "request_id": []
            }
        },
        "incorrect_transaction_signing_request": {
            "name": "incorrect_transaction_signing_request",
            "location": 299,
            "return": [],
            "arguments": {}
        },
        "create_golem_message_frame_with_correct_transaction_signing_request": {
            "name": "create_golem_message_frame_with_correct_transaction_signing_request",
            "location": 303,
            "return": [],
            "arguments": {
                "request_id": []
            }
        },
        "create_golem_message_frame_with_incorrect_transaction_signing_request": {
            "name": "create_golem_message_frame_with_incorrect_transaction_signing_request",
            "location": 310,
            "return": [],
            "arguments": {
                "request_id": []
            }
        }
    },
    "concent-master/concent_api/command_line_tool/concent_request.py": {
        "get_json_data": {
            "name": "get_json_data",
            "location": 8,
            "return": [],
            "arguments": {
                "message_file": [],
                "message_str": []
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "print_keys": {
            "name": "print_keys",
            "location": 53,
            "return": [],
            "arguments": {
                "req_pub_key": [],
                "req_priv_key": [],
                "prov_pub_key": [],
                "prov_priv_key": [],
                "conc_pub_key": []
            }
        }
    },
    "concent-master/concent_api/command_line_tool/key_manager.py": {
        "are_keys_predifined": {
            "name": "are_keys_predifined",
            "location": 36,
            "return": [],
            "arguments": {
                "party": []
            }
        },
        "_get_predefined_keys": {
            "name": "_get_predefined_keys",
            "location": 45,
            "return": [],
            "arguments": {
                "party": []
            }
        },
        "WrongConfigurationException.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "error_message": []
            }
        },
        "KeyManager.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyManager._get_or_generate_keys": {
            "name": "_get_or_generate_keys",
            "location": 58,
            "return": [],
            "arguments": {
                "party": []
            }
        },
        "KeyManager.get_requestor_keys": {
            "name": "get_requestor_keys",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyManager.get_provider_keys": {
            "name": "get_provider_keys",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyManager.get_concent_public_key": {
            "name": "get_concent_public_key",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/command_line_tool/message_extractor.py": {
        "make_random_string": {
            "name": "make_random_string",
            "location": 25,
            "return": [],
            "arguments": {
                "length": [],
                "chars": []
            }
        },
        "split_uppercase": {
            "name": "split_uppercase",
            "location": 31,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "find_modules": {
            "name": "find_modules",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "get_field_names": {
            "name": "get_field_names",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "create_message": {
            "name": "create_message",
            "location": 58,
            "return": [],
            "arguments": {
                "message_name": [],
                "message_params": []
            }
        },
        "substitute_message": {
            "name": "substitute_message",
            "location": 65,
            "return": [],
            "arguments": {
                "json": [],
                "message_name": [],
                "message": []
            }
        },
        "convert_message_name": {
            "name": "convert_message_name",
            "location": 71,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "_get_valid_message_name": {
            "name": "_get_valid_message_name",
            "location": 78,
            "return": [],
            "arguments": {
                "messages": [],
                "json": []
            }
        },
        "MessageExtractor.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_public_key": [],
                "provider_public_key": []
            }
        },
        "MessageExtractor.extract_message": {
            "name": "extract_message",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "name": []
            }
        },
        "MessageExtractor._process_top_level": {
            "name": "_process_top_level",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "MessageExtractor._process_body": {
            "name": "_process_body",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "name": []
            }
        },
        "MessageExtractor._process_body.supplement_data": {
            "name": "supplement_data",
            "location": 129,
            "return": [],
            "arguments": {
                "params": [],
                "supplement": [],
                "keys": []
            }
        }
    },
    "concent-master/concent_api/command_line_tool/message_handler.py": {
        "print_message": {
            "name": "print_message",
            "location": 25,
            "return": [],
            "arguments": {
                "message": [],
                "cluster_url": [],
                "endpoint": []
            }
        },
        "_print_message_info": {
            "name": "_print_message_info",
            "location": 43,
            "return": [],
            "arguments": {
                "message_info": []
            }
        },
        "MessageHandler.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_private_key": [],
                "requestor_public_key": [],
                "provider_public_key": [],
                "provider_private_key": [],
                "concent_pub_key": []
            }
        },
        "MessageHandler._exchange_message": {
            "name": "_exchange_message",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "priv_key": [],
                "cluster_url": [],
                "data": []
            }
        },
        "MessageHandler.select_keys": {
            "name": "select_keys",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "party": []
            }
        },
        "MessageHandler.send": {
            "name": "send",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_url": [],
                "message": []
            }
        },
        "MessageHandler.receive": {
            "name": "receive",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_url": [],
                "party": [],
                "endpoint": []
            }
        }
    },
    "concent-master/concent_api/command_line_tool/pathmagic.py": {},
    "concent-master/concent_api/command_line_tool/__init__.py": {},
    "concent-master/concent_api/command_line_tool/tests/test_key_manager.py": {
        "TestKeyManager.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_new_instance_generates_new_keys_for_requestor_when_globals_not_set": {
            "name": "test_that_new_instance_generates_new_keys_for_requestor_when_globals_not_set",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_new_instance_generates_new_keys_for_provider_when_globals_not_set": {
            "name": "test_that_new_instance_generates_new_keys_for_provider_when_globals_not_set",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_key_pairs_are_distinct_for_provider_and_requestor": {
            "name": "test_that_key_pairs_are_distinct_for_provider_and_requestor",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_requestor_predefined_keys_are_returned_when_set": {
            "name": "test_that_requestor_predefined_keys_are_returned_when_set",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_provider_predefined_keys_are_returned_when_set": {
            "name": "test_that_provider_predefined_keys_are_returned_when_set",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_concent_public_key_is_returned_when_defined": {
            "name": "test_that_concent_public_key_is_returned_when_defined",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_wrong_configuration_exception_is_raised_when_concent_public_key_is_not_defined": {
            "name": "test_that_wrong_configuration_exception_is_raised_when_concent_public_key_is_not_defined",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_wrong_configuration_exception_is_raised_when_concent_public_key_type_is_not_bytes": {
            "name": "test_that_wrong_configuration_exception_is_raised_when_concent_public_key_type_is_not_bytes",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager.test_that_wrong_configuration_exception_is_raised_when_concent_public_key_type_is_of_wrong_length": {
            "name": "test_that_wrong_configuration_exception_is_raised_when_concent_public_key_type_is_of_wrong_length",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKeyManager._assert_keys_are_not_equal": {
            "name": "_assert_keys_are_not_equal",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "first_key": [],
                "second_key": [],
                "key_type": []
            }
        },
        "TestKeyManager._assert_is_valid_public_key": {
            "name": "_assert_is_valid_public_key",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "key_to_check": []
            }
        },
        "TestKeyManager._assert_is_valid_private_key": {
            "name": "_assert_is_valid_private_key",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "key_to_check": []
            }
        }
    },
    "concent-master/concent_api/command_line_tool/tests/test_message_extractor.py": {
        "TestSplitUppercase.test_that_message_is_reconverted_when_source_format_is_given": {
            "name": "test_that_message_is_reconverted_when_source_format_is_given",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "TestMessageExtractor.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor.test_that_exception_is_raised_when_wrong_dict_is_given": {
            "name": "test_that_exception_is_raised_when_wrong_dict_is_given",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor.test_that_force_get_task_result_message_is_created_when_appropriate_dict_is_given": {
            "name": "test_that_force_get_task_result_message_is_created_when_appropriate_dict_is_given",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor.test_that_report_computed_task_message_is_created_when_appropriate_dict_is_given": {
            "name": "test_that_report_computed_task_message_is_created_when_appropriate_dict_is_given",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor.test_that_task_to_compute_message_is_created_when_appropriate_dict_is_given": {
            "name": "test_that_task_to_compute_message_is_created_when_appropriate_dict_is_given",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor.test_that_compute_task_def_is_created_when_appropriate_dict_is_given": {
            "name": "test_that_compute_task_def_is_created_when_appropriate_dict_is_given",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageExtractor._assert_correct_report_computed_task": {
            "name": "_assert_correct_report_computed_task",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "report_computed_task": []
            }
        },
        "TestMessageExtractor._assert_correct_task_to_compute": {
            "name": "_assert_correct_task_to_compute",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": []
            }
        },
        "TestMessageExtractor._assert_correct_compute_task_def": {
            "name": "_assert_correct_compute_task_def",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "compute_task_def": []
            }
        },
        "TestMessageConverter.test_that_message_is_converted_when_source_format_is_given": {
            "name": "test_that_message_is_converted_when_source_format_is_given",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "TestMessageConverter.test_that_message_is_converted_when_source_format_is_given_and_one_letter_is_uppercase": {
            "name": "test_that_message_is_converted_when_source_format_is_given_and_one_letter_is_uppercase",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "TestMessageConverter.test_that_message_is_not_converted_when_target_format_is_given": {
            "name": "test_that_message_is_not_converted_when_target_format_is_given",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "TestMessageConverter.test_that_empty_string_is_returned_when_empty_message_is_given": {
            "name": "test_that_empty_string_is_returned_when_empty_message_is_given",
            "location": 210,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/command_line_tool/tests/__init__.py": {},
    "concent-master/concent_api/common/admin.py": {
        "ModelAdminReadOnlyMixin.get_actions": {
            "name": "get_actions",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ModelAdminReadOnlyMixin.has_add_permission": {
            "name": "has_add_permission",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "_request": [],
                "_obj": []
            }
        },
        "ModelAdminReadOnlyMixin.has_change_permission": {
            "name": "has_change_permission",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "_obj": []
            }
        },
        "ModelAdminReadOnlyMixin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "_request": [],
                "_obj": []
            }
        },
        "ModelAdminReadOnlyMixin.save_model": {
            "name": "save_model",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": [],
                "form": [],
                "change": []
            }
        },
        "ModelAdminReadOnlyMixin.delete_model": {
            "name": "delete_model",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "ModelAdminReadOnlyMixin.save_related": {
            "name": "save_related",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "form": [],
                "formsets": [],
                "change": []
            }
        }
    },
    "concent-master/concent_api/common/constants.py": {},
    "concent-master/concent_api/common/decorators.py": {
        "provides_concent_feature": {
            "name": "provides_concent_feature",
            "location": 22,
            "return": [],
            "arguments": {
                "concent_feature": []
            }
        },
        "log_task_errors": {
            "name": "log_task_errors",
            "location": 41,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "provides_concent_feature.decorator": {
            "name": "decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "_function": []
            }
        },
        "log_task_errors.wrapper": {
            "name": "wrapper",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "non_nesting_atomic.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "using": [],
                "savepoint": []
            }
        },
        "non_nesting_atomic.__enter__": {
            "name": "__enter__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "non_nesting_atomic.__exit__": {
            "name": "__exit__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "non_nesting_atomic.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "provides_concent_feature.decorator.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "non_nesting_atomic.__call__.decorated": {
            "name": "decorated",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/common/exceptions.py": {
        "ConcentBaseException.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "error_message": [],
                "error_code": []
            }
        }
    },
    "concent-master/concent_api/common/fields.py": {
        "Base64Field.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Base64Field.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "name": [],
                "private_only": [],
                "virtual_only": []
            }
        },
        "Base64Field.get_data": {
            "name": "get_data",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Base64Field.set_data": {
            "name": "set_data",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "data": []
            }
        },
        "Base64Field.validate": {
            "name": "validate",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "model_instance": []
            }
        },
        "ChoiceEnum.choices": {
            "name": "choices",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "concent-master/concent_api/common/helpers.py": {
        "is_base64": {
            "name": "is_base64",
            "location": 36,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "get_current_utc_timestamp": {
            "name": "get_current_utc_timestamp",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "parse_datetime_to_timestamp": {
            "name": "parse_datetime_to_timestamp",
            "location": 60,
            "return": [],
            "arguments": {
                "date_time": []
            }
        },
        "parse_timestamp_to_utc_datetime": {
            "name": "parse_timestamp_to_utc_datetime",
            "location": 73,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "get_field_from_message": {
            "name": "get_field_from_message",
            "location": 80,
            "return": [],
            "arguments": {
                "golem_message": [],
                "field_name": []
            }
        },
        "deserialize_message": {
            "name": "deserialize_message",
            "location": 110,
            "return": [],
            "arguments": {
                "raw_message_data": []
            }
        },
        "sign_message": {
            "name": "sign_message",
            "location": 126,
            "return": [],
            "arguments": {
                "golem_message": [],
                "priv_key": []
            }
        },
        "get_storage_file_path": {
            "name": "get_storage_file_path",
            "location": 136,
            "return": [],
            "arguments": {
                "category": [],
                "subtask_id": [],
                "task_id": []
            }
        },
        "get_storage_result_file_path": {
            "name": "get_storage_result_file_path",
            "location": 141,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "task_id": []
            }
        },
        "get_storage_scene_file_path": {
            "name": "get_storage_scene_file_path",
            "location": 145,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "task_id": []
            }
        },
        "get_storage_source_file_path": {
            "name": "get_storage_source_file_path",
            "location": 149,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "task_id": []
            }
        },
        "join_messages": {
            "name": "join_messages",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "upload_file_to_storage_cluster": {
            "name": "upload_file_to_storage_cluster",
            "location": 159,
            "return": [],
            "arguments": {
                "file_content": [],
                "file_path": [],
                "upload_token": [],
                "client_private_key": [],
                "client_public_key": [],
                "content_public_key": [],
                "storage_cluster_address": []
            }
        },
        "generate_ethereum_address_from_ethereum_public_key_bytes": {
            "name": "generate_ethereum_address_from_ethereum_public_key_bytes",
            "location": 195,
            "return": [],
            "arguments": {
                "ethereum_public_key": []
            }
        },
        "generate_ethereum_address_from_ethereum_public_key": {
            "name": "generate_ethereum_address_from_ethereum_public_key",
            "location": 202,
            "return": [],
            "arguments": {
                "ethereum_public_key": []
            }
        },
        "ethereum_public_key_to_address": {
            "name": "ethereum_public_key_to_address",
            "location": 209,
            "return": [],
            "arguments": {
                "ethereum_public_key": []
            }
        },
        "RequestIDGenerator.generate_request_id": {
            "name": "generate_request_id",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "get_field_from_message.check_task_id": {
            "name": "check_task_id",
            "location": 91,
            "return": [],
            "arguments": {
                "golem_message": []
            }
        }
    },
    "concent-master/concent_api/common/logging.py": {
        "replace_element_to_unavailable_instead_of_none": {
            "name": "replace_element_to_unavailable_instead_of_none",
            "location": 34,
            "return": [],
            "arguments": {
                "log_function": []
            }
        },
        "log_message_received": {
            "name": "log_message_received",
            "location": 43,
            "return": [],
            "arguments": {
                "logger": [],
                "message": [],
                "client_public_key": []
            }
        },
        "log_message_returned": {
            "name": "log_message_returned",
            "location": 55,
            "return": [],
            "arguments": {
                "logger": [],
                "response_message": [],
                "client_public_key": [],
                "endpoint": []
            }
        },
        "log_message_accepted": {
            "name": "log_message_accepted",
            "location": 79,
            "return": [],
            "arguments": {
                "logger": [],
                "message": [],
                "client_public_key": []
            }
        },
        "log_message_added_to_queue": {
            "name": "log_message_added_to_queue",
            "location": 91,
            "return": [],
            "arguments": {
                "logger": [],
                "message": [],
                "client_public_key": []
            }
        },
        "log_timeout": {
            "name": "log_timeout",
            "location": 103,
            "return": [],
            "arguments": {
                "logger": [],
                "message": [],
                "client_public_key": [],
                "deadline": []
            }
        },
        "log_400_error": {
            "name": "log_400_error",
            "location": 121,
            "return": [],
            "arguments": {
                "logger": [],
                "endpoint": [],
                "client_public_key": [],
                "message": [],
                "error_code": [],
                "error_message": []
            }
        },
        "log_subtask_stored": {
            "name": "log_subtask_stored",
            "location": 141,
            "return": [],
            "arguments": {
                "logger": [],
                "task_id": [],
                "subtask_id": [],
                "state": [],
                "provider_public_key": [],
                "requestor_public_key": [],
                "computation_deadline": [],
                "result_package_size": [],
                "next_deadline": []
            }
        },
        "log_subtask_updated": {
            "name": "log_subtask_updated",
            "location": 166,
            "return": [],
            "arguments": {
                "logger": [],
                "task_id": [],
                "subtask_id": [],
                "state": [],
                "provider_public_key": [],
                "requestor_public_key": [],
                "next_deadline": []
            }
        },
        "log_stored_message_added_to_subtask": {
            "name": "log_stored_message_added_to_subtask",
            "location": 187,
            "return": [],
            "arguments": {
                "logger": [],
                "task_id": [],
                "subtask_id": [],
                "state": [],
                "stored_message": [],
                "provider_id": [],
                "requestor_id": []
            }
        },
        "log_new_pending_response": {
            "name": "log_new_pending_response",
            "location": 207,
            "return": [],
            "arguments": {
                "logger": [],
                "response_type": [],
                "queue_name": [],
                "subtask": []
            }
        },
        "log_receive_message_from_database": {
            "name": "log_receive_message_from_database",
            "location": 228,
            "return": [],
            "arguments": {
                "logger": [],
                "message": [],
                "client_public_key": [],
                "response_type": [],
                "queue_name": []
            }
        },
        "log_request_received": {
            "name": "log_request_received",
            "location": 247,
            "return": [],
            "arguments": {
                "logger": [],
                "path_to_file": [],
                "operation": []
            }
        },
        "log": {
            "name": "log",
            "location": 251,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "log_received_force_payment": {
            "name": "log_received_force_payment",
            "location": 272,
            "return": [],
            "arguments": {
                "logger": [],
                "force_payment_message": []
            }
        },
        "log_different_keys_addresses_and_wrong_requestor_signature": {
            "name": "log_different_keys_addresses_and_wrong_requestor_signature",
            "location": 286,
            "return": [],
            "arguments": {
                "logger": [],
                "subtask_results_accepted_list": []
            }
        },
        "log_duplicate_subtask_results_accepted": {
            "name": "log_duplicate_subtask_results_accepted",
            "location": 298,
            "return": [],
            "arguments": {
                "logger": [],
                "duplicated_subtask_ids": []
            }
        },
        "log_lack_of_unsettled_task": {
            "name": "log_lack_of_unsettled_task",
            "location": 305,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "_get_field_value_from_messages_for_logging": {
            "name": "_get_field_value_from_messages_for_logging",
            "location": 311,
            "return": [],
            "arguments": {
                "field_name": [],
                "message": []
            }
        },
        "_get_message_type": {
            "name": "_get_message_type",
            "location": 316,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "get_json_from_message_without_redundant_fields_for_logging": {
            "name": "get_json_from_message_without_redundant_fields_for_logging",
            "location": 320,
            "return": [],
            "arguments": {
                "golem_message": []
            }
        },
        "serialize_message_to_dictionary": {
            "name": "serialize_message_to_dictionary",
            "location": 325,
            "return": [],
            "arguments": {
                "golem_message": []
            }
        },
        "_get_field_value_and_encode_if_bytes_from_message": {
            "name": "_get_field_value_and_encode_if_bytes_from_message",
            "location": 345,
            "return": [],
            "arguments": {
                "field_name": [],
                "golem_message": []
            }
        },
        "convert_public_key_to_hex": {
            "name": "convert_public_key_to_hex",
            "location": 352,
            "return": [],
            "arguments": {
                "client_key": []
            }
        },
        "log_payment_time_exceeded": {
            "name": "log_payment_time_exceeded",
            "location": 373,
            "return": [],
            "arguments": {
                "logger": [],
                "subtask_results_accepted_list": []
            }
        },
        "replace_element_to_unavailable_instead_of_none.wrap": {
            "name": "wrap",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/common/shortcuts.py": {
        "load_without_public_key": {
            "name": "load_without_public_key",
            "location": 9,
            "return": [],
            "arguments": {
                "data": [],
                "client_public_key": [],
                "check_time": []
            }
        },
        "load_without_public_key.decrypt": {
            "name": "decrypt",
            "location": 12,
            "return": [],
            "arguments": {
                "payload": []
            }
        }
    },
    "concent-master/concent_api/common/testing_helpers.py": {
        "generate_ecc_key_pair": {
            "name": "generate_ecc_key_pair",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "generate_priv_and_pub_eth_account_key": {
            "name": "generate_priv_and_pub_eth_account_key",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "generate_random_string": {
            "name": "generate_random_string",
            "location": 19,
            "return": [],
            "arguments": {
                "length": []
            }
        }
    },
    "concent-master/concent_api/common/validations.py": {
        "validate_file_transfer_token": {
            "name": "validate_file_transfer_token",
            "location": 15,
            "return": [],
            "arguments": {
                "file_transfer_token": []
            }
        },
        "validate_secure_hash_algorithm": {
            "name": "validate_secure_hash_algorithm",
            "location": 82,
            "return": [],
            "arguments": {
                "checksum": []
            }
        }
    },
    "concent-master/concent_api/common/__init__.py": {},
    "concent-master/concent_api/common/tests/test_api_view.py": {
        "_create_client_and_raise_http400_error_mock": {
            "name": "_create_client_and_raise_http400_error_mock",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "_create_client_and_raise_http500_exception_mock": {
            "name": "_create_client_and_raise_http500_exception_mock",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "_create_client_mock_and_return_none": {
            "name": "_create_client_mock_and_return_none",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "gatekeeper_access_denied_response_200_mock": {
            "name": "gatekeeper_access_denied_response_200_mock",
            "location": 189,
            "return": [],
            "arguments": {
                "_message": [],
                "_path": [],
                "_subtask_id": [],
                "_client_key": []
            }
        },
        "message_to_dict": {
            "name": "message_to_dict",
            "location": 420,
            "return": [],
            "arguments": {
                "message_from_view": []
            }
        },
        "ApiViewTestCase.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_golem_message_as_octet_stream": {
            "name": "test_api_view_should_return_golem_message_as_octet_stream",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_http_415_when_request_content_type_is_not_supported": {
            "name": "test_api_view_should_return_http_415_when_request_content_type_is_not_supported",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_http_415_when_request_content_type_is_appplication_json": {
            "name": "test_api_view_should_return_http_415_when_request_content_type_is_appplication_json",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTestCase.test_request_with_not_allowed_http_method_should_return_405_error": {
            "name": "test_request_with_not_allowed_http_method_should_return_405_error",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.setUp": {
            "name": "setUp",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_that_api_view_should_not_rollback_changes_from_first_transaction_when_second_raises_exception": {
            "name": "test_that_api_view_should_not_rollback_changes_from_first_transaction_when_second_raises_exception",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_api_view_should_rollback_changes_on_500_error": {
            "name": "test_api_view_should_rollback_changes_on_500_error",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_api_view_should_rollback_changes_on_400_error": {
            "name": "test_api_view_should_rollback_changes_on_400_error",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_api_view_should_not_rollback_changes_on_correct_response": {
            "name": "test_api_view_should_not_rollback_changes_on_correct_response",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_non_api_view_should_rollback_changes_on_500_error": {
            "name": "test_non_api_view_should_rollback_changes_on_500_error",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_non_api_view_should_rollback_changes_on_400_error": {
            "name": "test_non_api_view_should_rollback_changes_on_400_error",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTransactionTestCase.test_non_api_view_should_not_rollback_changes_on_200_response": {
            "name": "test_non_api_view_should_not_rollback_changes_on_200_response",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_golem_message_as_octet_stream.dummy_view": {
            "name": "dummy_view",
            "location": 97,
            "return": [],
            "arguments": {
                "request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_http_415_when_request_content_type_is_not_supported.dummy_view": {
            "name": "dummy_view",
            "location": 117,
            "return": [],
            "arguments": {
                "request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "ApiViewTestCase.test_api_view_should_return_http_415_when_request_content_type_is_appplication_json.dummy_view": {
            "name": "dummy_view",
            "location": 133,
            "return": [],
            "arguments": {
                "request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "ApiViewTestCase.test_request_with_not_allowed_http_method_should_return_405_error.dummy_view": {
            "name": "dummy_view",
            "location": 157,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        }
    },
    "concent-master/concent_api/common/tests/test_decorators.py": {
        "dummy_view_require_golem_auth_message": {
            "name": "dummy_view_require_golem_auth_message",
            "location": 32,
            "return": [],
            "arguments": {
                "_request": [],
                "message": [],
                "_client_public_key": []
            }
        },
        "dummy_view_handle_errors_and_responses": {
            "name": "dummy_view_handle_errors_and_responses",
            "location": 37,
            "return": [],
            "arguments": {
                "_request": [],
                "message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_decorator_should_return_http_400_when_auth_message_not_send": {
            "name": "test_require_golem_auth_message_decorator_should_return_http_400_when_auth_message_not_send",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_200_when_message_included": {
            "name": "test_require_golem_auth_message_should_return_http_200_when_message_included",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_400_when_message_created_too_far_in_the_future": {
            "name": "test_require_golem_auth_message_should_return_http_400_when_message_created_too_far_in_the_future",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_400_when_message_is_too_old": {
            "name": "test_require_golem_auth_message_should_return_http_400_when_message_is_too_old",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_415_when_content_type_missing": {
            "name": "test_require_golem_auth_message_should_return_http_415_when_content_type_missing",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_400_when_client_public_key_is_empty": {
            "name": "test_require_golem_auth_message_should_return_http_400_when_client_public_key_is_empty",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_http_400_if_content_type_is_empty": {
            "name": "test_require_golem_auth_message_should_return_http_400_if_content_type_is_empty",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_require_golem_auth_message_should_return_json_response_http_400_when_auth_message_is_signed_with_wrong_key": {
            "name": "test_require_golem_auth_message_should_return_json_response_http_400_when_auth_message_is_signed_with_wrong_key",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_with_serialized_message": {
            "name": "test_handle_errors_and_responses_should_return_http_response_with_serialized_message",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_serialized_message_if_gets_deserialized": {
            "name": "test_handle_errors_and_responses_should_return_serialized_message_if_gets_deserialized",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_if_it_has_been_passed_to_decorator": {
            "name": "test_handle_errors_and_responses_should_return_http_response_if_it_has_been_passed_to_decorator",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_empty_http_response_if_view_passed_none": {
            "name": "test_handle_errors_and_responses_should_return_empty_http_response_if_view_passed_none",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_json_response_if_view_passed_dict": {
            "name": "test_handle_errors_and_responses_should_return_json_response_if_view_passed_dict",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_if_view_raised_http_400_exception": {
            "name": "test_handle_errors_and_responses_should_return_http_response_if_view_raised_http_400_exception",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_not_allowed_if_view_passed_it": {
            "name": "test_handle_errors_and_responses_should_return_http_response_not_allowed_if_view_passed_it",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_json_response_if_sci_not_synchronize": {
            "name": "test_handle_errors_and_responses_should_return_json_response_if_sci_not_synchronize",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_log_task_errors": {
            "name": "test_log_task_errors",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonNestingAtomicDecoratorTestCase.test_that_non_nesting_atomic_decorator_will_raise_exception_if_transaction_is_nested_using_same_database": {
            "name": "test_that_non_nesting_atomic_decorator_will_raise_exception_if_transaction_is_nested_using_same_database",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonNestingAtomicDecoratorTestCase.test_that_non_nesting_atomic_decorator_will_not_raise_exception_if_transaction_is_nested_using_different_databases": {
            "name": "test_that_non_nesting_atomic_decorator_will_not_raise_exception_if_transaction_is_nested_using_different_databases",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonNestingAtomicDecoratorTestCase.test_that_non_nesting_atomic_decorator_will_not_raise_exception_if_transaction_is_nested_using_same_databases_and_detect_nested_transaction_setting_is_false": {
            "name": "test_that_non_nesting_atomic_decorator_will_not_raise_exception_if_transaction_is_nested_using_same_databases_and_detect_nested_transaction_setting_is_false",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonNestingAtomicDecoratorTestCase.test_that_non_nesting_atomic_decorator_wraps_in_transaction_when_used_as_decorator": {
            "name": "test_that_non_nesting_atomic_decorator_wraps_in_transaction_when_used_as_decorator",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonNestingAtomicDecoratorTestCase.test_that_decorated_function_called_in_transaction_should_rasie_exception": {
            "name": "test_that_decorated_function_called_in_transaction_should_rasie_exception",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_if_it_has_been_passed_to_decorator.dummy_view_handle_http_response": {
            "name": "dummy_view_handle_http_response",
            "location": 200,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_empty_http_response_if_view_passed_none.dummy_view_handle_none_response": {
            "name": "dummy_view_handle_none_response",
            "location": 217,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_json_response_if_view_passed_dict.dummy_view_handle_dict": {
            "name": "dummy_view_handle_dict",
            "location": 233,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_if_view_raised_http_400_exception.dummy_view_handle_http_400_exception": {
            "name": "dummy_view_handle_http_400_exception",
            "location": 250,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_http_response_not_allowed_if_view_passed_it.dummy_view_handle_http_response_not_allowed": {
            "name": "dummy_view_handle_http_response_not_allowed",
            "location": 266,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_handle_errors_and_responses_should_return_json_response_if_sci_not_synchronize.dummy_view_handle_sci_not_synchronize": {
            "name": "dummy_view_handle_sci_not_synchronize",
            "location": 282,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "DecoratorsTestCase.test_log_task_errors.task": {
            "name": "task",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "NonNestingAtomicDecoratorTestCase.test_that_non_nesting_atomic_decorator_wraps_in_transaction_when_used_as_decorator.wrapped_function": {
            "name": "wrapped_function",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "NonNestingAtomicDecoratorTestCase.test_that_decorated_function_called_in_transaction_should_rasie_exception.wrapped_function": {
            "name": "wrapped_function",
            "location": 339,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/common/tests/test_helpers.py": {
        "HelpersTestCase.test_parse_datetime_to_timestamp_should_return_correct_utc_timestamp": {
            "name": "test_parse_datetime_to_timestamp_should_return_correct_utc_timestamp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_parse_timestamp_to_utc_datetime_should_return_utc_datetime": {
            "name": "test_parse_timestamp_to_utc_datetime_should_return_utc_datetime",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_add_signature_with_correct_keys_pair": {
            "name": "test_add_signature_with_correct_keys_pair",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_join_messages_should_return_joined_string_separeted_with_whitespace": {
            "name": "test_join_messages_should_return_joined_string_separeted_with_whitespace",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_join_messages_with_single_argument_should_return_single_string": {
            "name": "test_join_messages_with_single_argument_should_return_single_string",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_that_generate_ethereum_address_from_ethereum_public_key_should_generate_correct_ethereum_address": {
            "name": "test_that_generate_ethereum_address_from_ethereum_public_key_should_generate_correct_ethereum_address",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_that_generate_ethereum_address_from_ethereum_public_key_should_generate_correct_ethereum_address_bytes": {
            "name": "test_that_generate_ethereum_address_from_ethereum_public_key_should_generate_correct_ethereum_address_bytes",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpersTestCase.test_that_ethereum_public_key_to_address_should_generate_correct_ethereum_address": {
            "name": "test_that_ethereum_public_key_to_address_should_generate_correct_ethereum_address",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/common/tests/test_integration_api_view.py": {
        "ApiViewsIntegrationTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiViewsIntegrationTest.test_any_message_to_concent_report_empty_content_type_returns_400_error": {
            "name": "test_any_message_to_concent_report_empty_content_type_returns_400_error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/common/tests/test_logging.py": {
        "ReplaceElementToUnavailableInsteadOfNoneTestCase.test_that_all_none_should_be_changed_to_unavailable_when_only_args_given": {
            "name": "test_that_all_none_should_be_changed_to_unavailable_when_only_args_given",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplaceElementToUnavailableInsteadOfNoneTestCase.test_that_all_none_should_be_changed_to_unavailable_when_only_kwargs_given": {
            "name": "test_that_all_none_should_be_changed_to_unavailable_when_only_kwargs_given",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReplaceElementToUnavailableInsteadOfNoneTestCase.test_that_all_none_should_be_changed_to_unavailable_when_args_and_kwargs_given": {
            "name": "test_that_all_none_should_be_changed_to_unavailable_when_args_and_kwargs_given",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializeMessageToDictionaryTestCase.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializeMessageToDictionaryTestCase.test_that_fields_uppercase_should_not_be_logged": {
            "name": "test_that_fields_uppercase_should_not_be_logged",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializeMessageToDictionaryTestCase.test_that_callable_fields_should_not_be_logged": {
            "name": "test_that_callable_fields_should_not_be_logged",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializeMessageToDictionaryTestCase.test_that_golem_messages_fields_should_be_logged": {
            "name": "test_that_golem_messages_fields_should_be_logged",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/common/tests/__init__.py": {},
    "concent-master/concent_api/concent_api/apps.py": {
        "ConcentApiConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/celery.py": {},
    "concent-master/concent_api/concent_api/constants.py": {},
    "concent-master/concent_api/concent_api/database_router.py": {
        "DatabaseRouter.db_for_read": {
            "name": "db_for_read",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DatabaseRouter.db_for_write": {
            "name": "db_for_write",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DatabaseRouter.allow_relation": {
            "name": "allow_relation",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "obj1": [],
                "obj2": []
            }
        },
        "DatabaseRouter.allow_migrate": {
            "name": "allow_migrate",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "db": [],
                "app_label": [],
                "model_name": []
            }
        }
    },
    "concent-master/concent_api/concent_api/middleware.py": {
        "determine_return_type": {
            "name": "determine_return_type",
            "location": 56,
            "return": [],
            "arguments": {
                "request_meta": []
            }
        },
        "GolemMessagesVersionMiddleware.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "GolemMessagesVersionMiddleware.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ConcentVersionMiddleware.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "ConcentVersionMiddleware.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "HandleServerErrorMiddleware.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "HandleServerErrorMiddleware.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "HandleServerErrorMiddleware.process_exception": {
            "name": "process_exception",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "exception": []
            }
        },
        "HandleServerErrorMiddleware._build_html_response": {
            "name": "_build_html_response",
            "location": 103,
            "return": [],
            "arguments": {
                "request": [],
                "debug_info_enabled": []
            }
        },
        "HandleServerErrorMiddleware._build_json_response": {
            "name": "_build_json_response",
            "location": 109,
            "return": [],
            "arguments": {
                "exception": [],
                "debug_info_enabled": []
            }
        }
    },
    "concent-master/concent_api/concent_api/system_check.py": {
        "create_error_1_concent_features_is_not_a_list": {
            "name": "create_error_1_concent_features_is_not_a_list",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "create_error_2_unknown_features_specifed_in_concent_features": {
            "name": "create_error_2_unknown_features_specifed_in_concent_features",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "create_error_3_features_are_not_enabled_in_installed_apps": {
            "name": "create_error_3_features_are_not_enabled_in_installed_apps",
            "location": 37,
            "return": [],
            "arguments": {
                "feature": []
            }
        },
        "create_error_4_if_geth_container_address_has_wrong_value": {
            "name": "create_error_4_if_geth_container_address_has_wrong_value",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "create_error_5_invalid_setting_type": {
            "name": "create_error_5_invalid_setting_type",
            "location": 53,
            "return": [],
            "arguments": {
                "setting": [],
                "value": []
            }
        },
        "create_error_6_if_minimum_upload_rate_is_not_set": {
            "name": "create_error_6_if_minimum_upload_rate_is_not_set",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "create_error_7_if_minimum_upload_rate_has_wrong_value": {
            "name": "create_error_7_if_minimum_upload_rate_has_wrong_value",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "create_error_8_if_download_leadin_time_is_not_set": {
            "name": "create_error_8_if_download_leadin_time_is_not_set",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "create_error_9_if_download_leadin_time_has_wrong_value": {
            "name": "create_error_9_if_download_leadin_time_has_wrong_value",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "create_error_10_if_concent_time_settings_is_not_defined": {
            "name": "create_error_10_if_concent_time_settings_is_not_defined",
            "location": 93,
            "return": [],
            "arguments": {
                "concent_setting_name": []
            }
        },
        "create_error_11_if_concent_time_settings_have_wrong_value": {
            "name": "create_error_11_if_concent_time_settings_have_wrong_value",
            "location": 101,
            "return": [],
            "arguments": {
                "concent_setting_name": []
            }
        },
        "create_error_12_atomic_requests_not_set_for_database": {
            "name": "create_error_12_atomic_requests_not_set_for_database",
            "location": 109,
            "return": [],
            "arguments": {
                "database_name": []
            }
        },
        "create_error_13_storage_server_internal_address_is_not_set": {
            "name": "create_error_13_storage_server_internal_address_is_not_set",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "create_error_14_storage_server_internal_address_is_not_valid_url": {
            "name": "create_error_14_storage_server_internal_address_is_not_valid_url",
            "location": 126,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_error_15_verifier_storage_path_is_not_set": {
            "name": "create_error_15_verifier_storage_path_is_not_set",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "create_error_16_verifier_storage_path_is_does_not_exists": {
            "name": "create_error_16_verifier_storage_path_is_does_not_exists",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "create_error_17_verifier_storage_path_is_not_accessible": {
            "name": "create_error_17_verifier_storage_path_is_not_accessible",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "create_error_18_custom_protocol_times_is_not_set": {
            "name": "create_error_18_custom_protocol_times_is_not_set",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "create_error_19_custom_protocol_times_has_wrong_value": {
            "name": "create_error_19_custom_protocol_times_has_wrong_value",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "create_error_20_custom_protocol_times_is_false_and_settings_does_not_match_golem_messages_constants": {
            "name": "create_error_20_custom_protocol_times_is_false_and_settings_does_not_match_golem_messages_constants",
            "location": 174,
            "return": [],
            "arguments": {
                "concent_setting_name": []
            }
        },
        "create_error_21_verifier_min_ssim_has_wrong_type": {
            "name": "create_error_21_verifier_min_ssim_has_wrong_type",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "create_error_22_verifier_min_ssim_has_wrong_value": {
            "name": "create_error_22_verifier_min_ssim_has_wrong_value",
            "location": 193,
            "return": [],
            "arguments": {
                "verifier_min_ssim": []
            }
        },
        "create_error_23_additional_verification_time_multiplier_is_not_defined": {
            "name": "create_error_23_additional_verification_time_multiplier_is_not_defined",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "create_error_24_additional_verification_time_multiplier_has_wrong_type": {
            "name": "create_error_24_additional_verification_time_multiplier_has_wrong_type",
            "location": 209,
            "return": [],
            "arguments": {
                "additional_verification_time_multiplier_type": []
            }
        },
        "create_error_25_storage_cluster_address_does_not_end_with_slash": {
            "name": "create_error_25_storage_cluster_address_does_not_end_with_slash",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "create_error_26_storage_server_internal_address_does_not_end_with_slash": {
            "name": "create_error_26_storage_server_internal_address_does_not_end_with_slash",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "create_error_27_storage_cluster_address_is_not_valid_url": {
            "name": "create_error_27_storage_cluster_address_is_not_valid_url",
            "location": 235,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_error_28_storage_cluster_address_is_not_set": {
            "name": "create_error_28_storage_cluster_address_is_not_set",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "create_error_29_verifier_download_chunk_size_is_not_defined": {
            "name": "create_error_29_verifier_download_chunk_size_is_not_defined",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "create_error_30_verifier_download_chunk_size_has_wrong_type": {
            "name": "create_error_30_verifier_download_chunk_size_has_wrong_type",
            "location": 259,
            "return": [],
            "arguments": {
                "verifier_download_chunk_size_type": []
            }
        },
        "create_error_31_verifier_download_chunk_size_has_wrong_value": {
            "name": "create_error_31_verifier_download_chunk_size_has_wrong_value",
            "location": 267,
            "return": [],
            "arguments": {
                "verifier_download_chunk_size_value": []
            }
        },
        "create_error_32_signing_service_public_key_is_missing": {
            "name": "create_error_32_signing_service_public_key_is_missing",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "create_error_33_signing_service_public_key_is_invalid": {
            "name": "create_error_33_signing_service_public_key_is_invalid",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "create_error_34_concent_ethereum_public_key_is_not_set": {
            "name": "create_error_34_concent_ethereum_public_key_is_not_set",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "create_error_35_concent_ethereum_public_key_has_wrong_type": {
            "name": "create_error_35_concent_ethereum_public_key_has_wrong_type",
            "location": 299,
            "return": [],
            "arguments": {
                "concent_ethereum_public_key": []
            }
        },
        "create_error_36_concent_ethereum_public_key_has_wrong_length": {
            "name": "create_error_36_concent_ethereum_public_key_has_wrong_length",
            "location": 307,
            "return": [],
            "arguments": {
                "concent_ethereum_public_key": []
            }
        },
        "create_error_37_middleman_address_has_wrong_type": {
            "name": "create_error_37_middleman_address_has_wrong_type",
            "location": 315,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_38_middleman_address_is_not_set": {
            "name": "create_error_38_middleman_address_is_not_set",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "create_error_39_middleman_port_is_not_set": {
            "name": "create_error_39_middleman_port_is_not_set",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "create_error_40_middleman_port_has_wrong_type": {
            "name": "create_error_40_middleman_port_has_wrong_type",
            "location": 339,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_41_middleman_port_has_wrong_value": {
            "name": "create_error_41_middleman_port_has_wrong_value",
            "location": 347,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_42_use_signing_service_not_set": {
            "name": "create_error_42_use_signing_service_not_set",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "create_error_43_use_signing_service_has_wrong_type": {
            "name": "create_error_43_use_signing_service_has_wrong_type",
            "location": 363,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_44_use_signing_service_is_true_but_middleman_is_missing": {
            "name": "create_error_44_use_signing_service_is_true_but_middleman_is_missing",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "create_error_45_gntdeposit_not_set": {
            "name": "create_error_45_gntdeposit_not_set",
            "location": 379,
            "return": [],
            "arguments": {}
        },
        "create_error_46_gntdeposit_has_wrong_type": {
            "name": "create_error_46_gntdeposit_has_wrong_type",
            "location": 387,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_47_gntdeposit_wrong_value": {
            "name": "create_error_47_gntdeposit_wrong_value",
            "location": 395,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "create_error_48_additional_verification_cost_is_not_defined": {
            "name": "create_error_48_additional_verification_cost_is_not_defined",
            "location": 403,
            "return": [],
            "arguments": {}
        },
        "create_error_49_additional_verification_cost_is_not_non_negative_integer": {
            "name": "create_error_49_additional_verification_cost_is_not_non_negative_integer",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "create_error_50_additional_verification_call_time_is_not_set": {
            "name": "create_error_50_additional_verification_call_time_is_not_set",
            "location": 419,
            "return": [],
            "arguments": {}
        },
        "create_error_51_additional_verification_call_time_has_wrong_value": {
            "name": "create_error_51_additional_verification_call_time_has_wrong_value",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "create_error_52_sci_callback_retries_is_not_set": {
            "name": "create_error_52_sci_callback_retries_is_not_set",
            "location": 435,
            "return": [],
            "arguments": {}
        },
        "create_error_53_sci_callback_retries_has_wrong_value": {
            "name": "create_error_53_sci_callback_retries_has_wrong_value",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "create_error_54_ssl_cert_path_is_none": {
            "name": "create_error_54_ssl_cert_path_is_none",
            "location": 451,
            "return": [],
            "arguments": {}
        },
        "create_error_55_cert_path_does_not_exist": {
            "name": "create_error_55_cert_path_does_not_exist",
            "location": 459,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "create_error_56_ssl_cert_path_is_not_a_file": {
            "name": "create_error_56_ssl_cert_path_is_not_a_file",
            "location": 466,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "create_error_57_payment_backend_is_not_set": {
            "name": "create_error_57_payment_backend_is_not_set",
            "location": 474,
            "return": [],
            "arguments": {}
        },
        "create_error_58_payment_backend_is_not_a_valid_python_module": {
            "name": "create_error_58_payment_backend_is_not_a_valid_python_module",
            "location": 482,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_warning_1_multiple_features_in_concent_feature": {
            "name": "create_warning_1_multiple_features_in_concent_feature",
            "location": 490,
            "return": [],
            "arguments": {}
        },
        "create_error_59_ethereum_chain_is_not_set": {
            "name": "create_error_59_ethereum_chain_is_not_set",
            "location": 498,
            "return": [],
            "arguments": {}
        },
        "create_error_60_ethereum_chain_is_not_a_string": {
            "name": "create_error_60_ethereum_chain_is_not_a_string",
            "location": 506,
            "return": [],
            "arguments": {}
        },
        "create_error_61_ethereum_chain_is_invalid": {
            "name": "create_error_61_ethereum_chain_is_invalid",
            "location": 514,
            "return": [],
            "arguments": {}
        },
        "check_settings_concent_features": {
            "name": "check_settings_concent_features",
            "location": 523,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_settings_storage_cluster_address": {
            "name": "check_settings_storage_cluster_address",
            "location": 544,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_settings_storage_server_internal_address": {
            "name": "check_settings_storage_server_internal_address",
            "location": 561,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_settings_verifier_storage_path": {
            "name": "check_settings_verifier_storage_path",
            "location": 578,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_payment_backend": {
            "name": "check_payment_backend",
            "location": 592,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "storage_cluster_certificate_path_check": {
            "name": "storage_cluster_certificate_path_check",
            "location": 608,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "geth_container_address_check": {
            "name": "geth_container_address_check",
            "location": 622,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_atomic_requests": {
            "name": "check_atomic_requests",
            "location": 639,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_minimum_upload_rate": {
            "name": "check_minimum_upload_rate",
            "location": 659,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_download_leadin_time": {
            "name": "check_download_leadin_time",
            "location": 669,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_concents_time_settings": {
            "name": "check_concents_time_settings",
            "location": 679,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_custom_protocol_times": {
            "name": "check_custom_protocol_times",
            "location": 697,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_verifier_min_ssim": {
            "name": "check_verifier_min_ssim",
            "location": 721,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_additional_verification_time_multiplier": {
            "name": "check_additional_verification_time_multiplier",
            "location": 732,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_verifier_download_chunk_size": {
            "name": "check_verifier_download_chunk_size",
            "location": 744,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_signing_service_key_availability_for_middleman": {
            "name": "check_signing_service_key_availability_for_middleman",
            "location": 761,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_concent_ethereum_public_key": {
            "name": "check_concent_ethereum_public_key",
            "location": 775,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_middleman_address": {
            "name": "check_middleman_address",
            "location": 789,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_middleman_port": {
            "name": "check_middleman_port",
            "location": 800,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_use_signing_service": {
            "name": "check_use_signing_service",
            "location": 813,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_gntdeposit_adress": {
            "name": "check_gntdeposit_adress",
            "location": 831,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_additional_verification_cost": {
            "name": "check_additional_verification_cost",
            "location": 849,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_additional_verification_call_time": {
            "name": "check_additional_verification_call_time",
            "location": 859,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_sci_callback_retries": {
            "name": "check_sci_callback_retries",
            "location": 869,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        },
        "check_ethereum_chain": {
            "name": "check_ethereum_chain",
            "location": 883,
            "return": [],
            "arguments": {
                "app_configs": []
            }
        }
    },
    "concent-master/concent_api/concent_api/urls.py": {},
    "concent-master/concent_api/concent_api/wsgi.py": {},
    "concent-master/concent_api/concent_api/__init__.py": {},
    "concent-master/concent_api/concent_api/settings/base.py": {},
    "concent-master/concent_api/concent_api/settings/development.py": {},
    "concent-master/concent_api/concent_api/settings/production.py": {},
    "concent-master/concent_api/concent_api/settings/testing.py": {},
    "concent-master/concent_api/concent_api/settings/__init__.py": {},
    "concent-master/concent_api/concent_api/tests/test_check_additional_verification_call_time.py": {
        "TestAdditionalVerificationCallTimeCheck.test_that_proper_configuration_of_additional_verification_call_time_setting_value_should_not_produce_any_errors": {
            "name": "test_that_proper_configuration_of_additional_verification_call_time_setting_value_should_not_produce_any_errors",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationCallTimeCheck.test_not_set_additional_verification_call_time_setting_value_should_produce_error": {
            "name": "test_not_set_additional_verification_call_time_setting_value_should_produce_error",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationCallTimeCheck.test_non_int_additional_verification_call_time_setting_type_should_produce_error": {
            "name": "test_non_int_additional_verification_call_time_setting_type_should_produce_error",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationCallTimeCheck.test_negative_additional_verification_call_time_setting_value_should_produce_error": {
            "name": "test_negative_additional_verification_call_time_setting_value_should_produce_error",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_additional_verification_cost.py": {
        "TestAdditionalVerificationCostCheck.test_that_check_additional_verification_cost_not_produce_error_when_additional_verification_cost_is_set_to_int": {
            "name": "test_that_check_additional_verification_cost_not_produce_error_when_additional_verification_cost_is_set_to_int",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationCostCheck.test_that_additional_verification_cost_not_set_will_produce_error": {
            "name": "test_that_additional_verification_cost_not_set_will_produce_error",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationCostCheck.test_that_additional_verification_cost_set_to_non_int_will_produce_error": {
            "name": "test_that_additional_verification_cost_set_to_non_int_will_produce_error",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "additional_verification_cost": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_additional_verification_time_multiplier.py": {
        "TestAdditionalVerificationTimeMultiplierCheck.test_that_check_additional_verification_time_multiplier_not_produce_error_when_additional_verification_time_multiplier_is_set_to_float": {
            "name": "test_that_check_additional_verification_time_multiplier_not_produce_error_when_additional_verification_time_multiplier_is_set_to_float",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationTimeMultiplierCheck.test_that_additional_verification_time_multiplier_not_set_will_produce_error": {
            "name": "test_that_additional_verification_time_multiplier_not_set_will_produce_error",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdditionalVerificationTimeMultiplierCheck.test_that_additional_verification_time_multiplier_set_to_non_float_will_produce_error": {
            "name": "test_that_additional_verification_time_multiplier_set_to_non_float_will_produce_error",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_atomic_requests.py": {
        "TestAtomicRequestsCheck.test_non_dict_database_setting_value_should_not_produce_any_errors": {
            "name": "test_non_dict_database_setting_value_should_not_produce_any_errors",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAtomicRequestsCheck.test_missing_atomic_request_setting_should_produce_error": {
            "name": "test_missing_atomic_request_setting_should_produce_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAtomicRequestsCheck.test_atomic_request_setting_set_to_false_should_produce_error": {
            "name": "test_atomic_request_setting_set_to_false_should_produce_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAtomicRequestsCheck.test_atomic_request_setting_set_to_non_bool_type_should_produce_error": {
            "name": "test_atomic_request_setting_set_to_non_bool_type_should_produce_error",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAtomicRequestsCheck.test_atomic_request_setting_set_to_true_should_not_produce_any_errors": {
            "name": "test_atomic_request_setting_set_to_true_should_not_produce_any_errors",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_concents_time_settings.py": {
        "TestConcentsTimeSettingsCheck.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_are_unset": {
            "name": "test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_are_unset",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_return_list_of_2_errors_when_cmt_pdt_are_unset": {
            "name": "test_that_function_return_list_of_2_errors_when_cmt_pdt_are_unset",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_have_negative_integers": {
            "name": "test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_have_negative_integers",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_are_strings": {
            "name": "test_that_function_returns_list_of_3_errors_when_cmt_fat_pdt_are_strings",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_2_errors_when_cmt_pdt_have_wrong_values": {
            "name": "test_that_function_returns_list_of_2_errors_when_cmt_pdt_have_wrong_values",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_2_errors_when_fat_pdt_have_wrong_values": {
            "name": "test_that_function_returns_list_of_2_errors_when_fat_pdt_have_wrong_values",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_2_errors_when_cmt_fat_have_wrong_values": {
            "name": "test_that_function_returns_list_of_2_errors_when_cmt_fat_have_wrong_values",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_list_of_2_errors_when_cmt_is_string_pdt_is_negative_integer": {
            "name": "test_that_function_returns_list_of_2_errors_when_cmt_is_string_pdt_is_negative_integer",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConcentsTimeSettingsCheck.test_that_function_returns_empty_error_list_when_cmt_fat_pdt_have_correct_values": {
            "name": "test_that_function_returns_empty_error_list_when_cmt_fat_pdt_have_correct_values",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_concent_ethereum_public_key.py": {
        "CheckConcentEthereumPublicKeyTestCase.test_that_missing_concent_ethereum_public_key_should_not_produce_error_when_core_is_not_in_available_concent_features": {
            "name": "test_that_missing_concent_ethereum_public_key_should_not_produce_error_when_core_is_not_in_available_concent_features",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckConcentEthereumPublicKeyTestCase.test_that_missing_concent_ethereum_public_key_should_produce_error_when_core_is_not_in_available_concent_features": {
            "name": "test_that_missing_concent_ethereum_public_key_should_produce_error_when_core_is_not_in_available_concent_features",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckConcentEthereumPublicKeyTestCase.test_that_wrong_type_of_concent_ethereum_public_key_should_produce_error": {
            "name": "test_that_wrong_type_of_concent_ethereum_public_key_should_produce_error",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckConcentEthereumPublicKeyTestCase.test_that_wrong_length_of_concent_ethereum_public_key_should_produce_error": {
            "name": "test_that_wrong_length_of_concent_ethereum_public_key_should_produce_error",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckConcentEthereumPublicKeyTestCase.test_that_corrent_concent_ethereum_public_key_should_not_produce_error": {
            "name": "test_that_corrent_concent_ethereum_public_key_should_not_produce_error",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_custom_protocol_times.py": {
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_not_return_error_if_settings_match_golem_messages_constants": {
            "name": "test_that_check_custom_protocol_times_should_not_return_error_if_settings_match_golem_messages_constants",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_is_missing": {
            "name": "test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_is_missing",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_is_not_bool_value": {
            "name": "test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_is_not_bool_value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_does_not_match_golem_messages_constant": {
            "name": "test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_does_not_match_golem_messages_constant",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_does_not_match_golem_messages_constant.CMT.total_seconds": {
            "name": "total_seconds",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomProtocolTimesCheck.test_that_check_custom_protocol_times_should_return_error_if_custom_protocol_times_setting_does_not_match_golem_messages_constant.FAT.total_seconds": {
            "name": "total_seconds",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_download_leadin_time.py": {
        "TestDownloadLeadinTimeCheck.test_that_proper_configuration_of__download_leadin_time_setting_value_should_not_produce_any_errors": {
            "name": "test_that_proper_configuration_of__download_leadin_time_setting_value_should_not_produce_any_errors",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadLeadinTimeCheck.test_not_set_download_leadin_time_setting_value_should_produce_error": {
            "name": "test_not_set_download_leadin_time_setting_value_should_produce_error",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadLeadinTimeCheck.test_non_int_download_leadin_time_setting_type_should_produce_error": {
            "name": "test_non_int_download_leadin_time_setting_type_should_produce_error",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadLeadinTimeCheck.test_negative_download_leadin_time_setting_value_should_produce_error": {
            "name": "test_negative_download_leadin_time_setting_value_should_produce_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_ethereum_chain.py": {
        "TestPaymentInterfaceChainCheck.test_that_ethereum_chain_check_will_produce_error_when_payment_backend_is_not_set": {
            "name": "test_that_ethereum_chain_check_will_produce_error_when_payment_backend_is_not_set",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPaymentInterfaceChainCheck.test_that_ethereum_chain_from_golem_sci_will_not_produce_error": {
            "name": "test_that_ethereum_chain_from_golem_sci_will_not_produce_error",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "chain": []
            }
        },
        "TestPaymentInterfaceChainCheck.test_that_ethereum_chain_check_will_produce_error_when_setting_is_not_a_string": {
            "name": "test_that_ethereum_chain_check_will_produce_error_when_setting_is_not_a_string",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPaymentInterfaceChainCheck.test_that_ethereum_chain_check_will_produce_error_when_setting_has_invalid_value": {
            "name": "test_that_ethereum_chain_check_will_produce_error_when_setting_has_invalid_value",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_gntdeposit_adress.py": {
        "TestGNTDepositCheck.test_that_gntdeposit_check_will_not_produce_error_when_payment_backend_is_not_set": {
            "name": "test_that_gntdeposit_check_will_not_produce_error_when_payment_backend_is_not_set",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGNTDepositCheck.test_that_no_gntdeposit_will_produce_error": {
            "name": "test_that_no_gntdeposit_will_produce_error",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGNTDepositCheck.test_that_gntdeposit_set_to_wrong_type_will_produce_error": {
            "name": "test_that_gntdeposit_set_to_wrong_type_will_produce_error",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGNTDepositCheck.test_that_gntdeposit_set_to_wrong_value_will_produce_error": {
            "name": "test_that_gntdeposit_set_to_wrong_value_will_produce_error",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_middleman_address.py": {
        "TestMiddlemanAddressCheck.test_that_middleman_address_not_set_will_produce_error_when_middleman_is_in_concent_features": {
            "name": "test_that_middleman_address_not_set_will_produce_error_when_middleman_is_in_concent_features",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddlemanAddressCheck.test_that_middleman_address_not_set_will_not_produce_error_when_middleman_is_not_in_concent_features": {
            "name": "test_that_middleman_address_not_set_will_not_produce_error_when_middleman_is_not_in_concent_features",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddlemanAddressCheck.test_that_non_str_middleman_address_setting_type_should_produce_error": {
            "name": "test_that_non_str_middleman_address_setting_type_should_produce_error",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddlemanAddressCheck.test_that_middleman_address_as_string_will_not_produce_error": {
            "name": "test_that_middleman_address_as_string_will_not_produce_error",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_middleman_port.py": {
        "MiddlemanPortCheckTestCase.test_that_middleman_port_not_set_will_produce_error_when_middleman_is_in_concent_features": {
            "name": "test_that_middleman_port_not_set_will_produce_error_when_middleman_is_in_concent_features",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddlemanPortCheckTestCase.test_that_middleman_port_not_set_will_not_produce_error_when_middleman_is_not_in_concent_features": {
            "name": "test_that_middleman_port_not_set_will_not_produce_error_when_middleman_is_not_in_concent_features",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddlemanPortCheckTestCase.test_that_non_int_middleman_port_rate_setting_type_should_produce_error": {
            "name": "test_that_non_int_middleman_port_rate_setting_type_should_produce_error",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddlemanPortCheck.test_that_checking_middleman_port_setting_in_allowed_range_should_not_produce_error": {
            "name": "test_that_checking_middleman_port_setting_in_allowed_range_should_not_produce_error",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_port_value": []
            }
        },
        "TestMiddlemanPortCheck.test_that_checking_middleman_port_setting_not_in_allowed_range_should_produce_error": {
            "name": "test_that_checking_middleman_port_setting_not_in_allowed_range_should_produce_error",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_port_value": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_minimum_upload_rate.py": {
        "TestMinimumUploadRateCheck.test_that_correct_minimum_upload_rate_setting_value_should_not_produce_any_errors": {
            "name": "test_that_correct_minimum_upload_rate_setting_value_should_not_produce_any_errors",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMinimumUploadRateCheck.test_not_set_minimum_upload_rate_setting_value_should_produce_error": {
            "name": "test_not_set_minimum_upload_rate_setting_value_should_produce_error",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMinimumUploadRateCheck.test_non_int_minimum_upload_rate_setting_type_should_produce_error": {
            "name": "test_non_int_minimum_upload_rate_setting_type_should_produce_error",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMinimumUploadRateCheck.test_negative_minimum_upload_rate_setting_value_should_produce_error": {
            "name": "test_negative_minimum_upload_rate_setting_value_should_produce_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_sci_callback_retries.py": {
        "TestSciCallbackRetriesCheck.test_that_proper_configuration_of_sci_callback_retries_setting_value_should_not_produce_any_errors": {
            "name": "test_that_proper_configuration_of_sci_callback_retries_setting_value_should_not_produce_any_errors",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSciCallbackRetriesCheck.test_not_set_sci_callback_retries_setting_value_should_produce_error": {
            "name": "test_not_set_sci_callback_retries_setting_value_should_produce_error",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSciCallbackRetriesCheck.test_sci_callback_retries_setting_equal_to_sci_callback_timeout_should_produce_error": {
            "name": "test_sci_callback_retries_setting_equal_to_sci_callback_timeout_should_produce_error",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSciCallbackRetriesCheck.test_non_int_sci_callback_retries_setting_type_should_produce_error": {
            "name": "test_non_int_sci_callback_retries_setting_type_should_produce_error",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSciCallbackRetriesCheck.test_negative_sci_callback_retries_value_should_produce_error": {
            "name": "test_negative_sci_callback_retries_value_should_produce_error",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_siginig_service_key_availability_for_middleman.py": {
        "TestCheckSigningServiceKeyAvailabilityForMiddleMan.test_that_if_middleman_is_disabled_signing_service_public_key_does_not_have_to_be_defined_in_settings": {
            "name": "test_that_if_middleman_is_disabled_signing_service_public_key_does_not_have_to_be_defined_in_settings",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCheckSigningServiceKeyAvailabilityForMiddleMan.test_that_if_middleman_is_enabled_and_signing_service_public_key_is_not_defined_error_is_returned": {
            "name": "test_that_if_middleman_is_enabled_and_signing_service_public_key_is_not_defined_error_is_returned",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCheckSigningServiceKeyAvailabilityForMiddleMan.test_that_if_middleman_is_enabled_and_valid_signing_service_public_key_is_defined_no_errors_are_returned": {
            "name": "test_that_if_middleman_is_enabled_and_valid_signing_service_public_key_is_defined_no_errors_are_returned",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCheckSigningServiceKeyAvailabilityForMiddleMan.test_that_if_middleman_is_enabled_and_invalid_signing_service_public_key_is_invalid_error_is_returned": {
            "name": "test_that_if_middleman_is_enabled_and_invalid_signing_service_public_key_is_invalid_error_is_returned",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_use_signing_service.py": {
        "CheckUseSigningServiceTestCase.test_that_missing_use_signing_service_should_not_produce_error_when_payments_backend_is_not_sci_backend": {
            "name": "test_that_missing_use_signing_service_should_not_produce_error_when_payments_backend_is_not_sci_backend",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckUseSigningServiceTestCase.test_that_missing_use_signing_service_should_produce_error_when_payments_backend_is_sci_backend": {
            "name": "test_that_missing_use_signing_service_should_produce_error_when_payments_backend_is_sci_backend",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckUseSigningServiceTestCase.test_that_wrong_type_of_use_signing_service_should_produce_error": {
            "name": "test_that_wrong_type_of_use_signing_service_should_produce_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckUseSigningServiceTestCase.test_that_use_signing_service_set_to_true_should_produce_error_when_middleman_is_not_available": {
            "name": "test_that_use_signing_service_set_to_true_should_produce_error_when_middleman_is_not_available",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckUseSigningServiceTestCase.test_that_use_signing_service_set_to_false_should_not_produce_error_when_middleman_is_not_available": {
            "name": "test_that_use_signing_service_set_to_false_should_not_produce_error_when_middleman_is_not_available",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckUseSigningServiceTestCase.test_that_use_signing_service_set_to_true_should_not_produce_error_when_middleman_is_available": {
            "name": "test_that_use_signing_service_set_to_true_should_not_produce_error_when_middleman_is_available",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_verifier_download_chunk_size.py": {
        "TestVerifierDownloadChunkSize.test_verifier_download_chunk_size_system_check": {
            "name": "test_verifier_download_chunk_size_system_check",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "verifier_download_chunk_size": [],
                "verifier_feature": [],
                "expected": []
            }
        },
        "TestVerifierDownloadChunkSize.test_that_verifier_download_chunk_size_is_not_set_when_verifier_is_in_concent_features": {
            "name": "test_that_verifier_download_chunk_size_is_not_set_when_verifier_is_in_concent_features",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_check_verifier_min_ssim.py": {
        "TestVerifierMinSSIMCheck.test_that_verifier_min_ssim_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features": {
            "name": "test_that_verifier_min_ssim_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierMinSSIMCheck.test_that_verifier_min_ssim_set_to_non_float_will_produce_error": {
            "name": "test_that_verifier_min_ssim_set_to_non_float_will_produce_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierMinSSIMCheck.test_that_verifier_min_ssim_set_to_wrong_value_will_produce_error": {
            "name": "test_that_verifier_min_ssim_set_to_wrong_value_will_produce_error",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_middleware.py": {
        "CustomExceptionWithStringRepr.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "error_message": [],
                "error_code": []
            }
        },
        "CustomExceptionWithStringRepr.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomExceptionWithStringRepr.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GolemMessagesVersionMiddlewareTest.test_golem_messages_version_middleware_should_attach_http_header_to_response": {
            "name": "test_golem_messages_version_middleware_should_attach_http_header_to_response",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentVersionMiddlewareTest.test_golem_messages_version_middleware_should_attach_http_header_to_response": {
            "name": "test_golem_messages_version_middleware_should_attach_http_header_to_response",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_middlware_does_not_intercept_2xx_http_responses": {
            "name": "test_that_middlware_does_not_intercept_2xx_http_responses",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_middleware_does_not_intercept_bad_requests": {
            "name": "test_that_middleware_does_not_intercept_bad_requests",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_uncaught_errors_without_string_representation_are_returned_as_json_response_with_status_500_and_default_error_message": {
            "name": "test_that_uncaught_errors_without_string_representation_are_returned_as_json_response_with_status_500_and_default_error_message",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_uncaught_errors_with_string_representation_are_returned_as_json_response_with_status_500": {
            "name": "test_that_uncaught_errors_with_string_representation_are_returned_as_json_response_with_status_500",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_with_debug_enabled_uncaught_errors_are_returned_as_json_response_with_status_500_and_stack_trace": {
            "name": "test_that_with_debug_enabled_uncaught_errors_are_returned_as_json_response_with_status_500_and_stack_trace",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_with_debug_info_enabled_uncaught_errors_are_returned_as_json_response_with_status_500_and_stack_trace": {
            "name": "test_that_with_debug_info_enabled_uncaught_errors_are_returned_as_json_response_with_status_500_and_stack_trace",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_uncought_errors_are_returned_as_html_when_client_wants_html": {
            "name": "test_that_uncought_errors_are_returned_as_html_when_client_wants_html",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_broken_accept_header_causes_http_406_in_case_of_unhandled_internal_server_error": {
            "name": "test_that_broken_accept_header_causes_http_406_in_case_of_unhandled_internal_server_error",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest.test_that_with_debug_info_enabled_uncaught_errors_are_returned_as_returned_as_html_with_stack_trace_when_client_wants_html": {
            "name": "test_that_with_debug_info_enabled_uncaught_errors_are_returned_as_returned_as_html_with_stack_trace_when_client_wants_html",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandleServerErrorMiddlewareTest._assert_proper_internal_server_error_received": {
            "name": "_assert_proper_internal_server_error_received",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "loaded_json": [],
                "error_message": [],
                "error_code": []
            }
        },
        "TestDetermineReturnType.test_that_with_no_information_in_request_json_is_used": {
            "name": "test_that_with_no_information_in_request_json_is_used",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDetermineReturnType.test_that_with_acceptance_of_html_html_is_used": {
            "name": "test_that_with_acceptance_of_html_html_is_used",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDetermineReturnType.test_that_order_doest_not_matter_when_no_weight_is_given": {
            "name": "test_that_order_doest_not_matter_when_no_weight_is_given",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDetermineReturnType.test_that_weight_determines_return_type": {
            "name": "test_that_weight_determines_return_type",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDetermineReturnType.test_that_empty_string_is_returned_when_accept_header_is_malformed": {
            "name": "test_that_empty_string_is_returned_when_accept_header_is_malformed",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDetermineReturnType.test_that_with_wildcard_accept_header_value_in_request_json_is_used": {
            "name": "test_that_with_wildcard_accept_header_value_in_request_json_is_used",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_shutdown_mode.py": {
        "SoftShutdownModeTest.test_in_soft_shutdown_mode_concent_should_not_accept_messages_that_would_cause_transition_to_active_state": {
            "name": "test_in_soft_shutdown_mode_concent_should_not_accept_messages_that_would_cause_transition_to_active_state",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftShutdownModeTest.test_in_soft_shutdown_mode_concent_should_accept_messages_that_would_cause_transition_to_passive_state": {
            "name": "test_in_soft_shutdown_mode_concent_should_accept_messages_that_would_cause_transition_to_passive_state",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftShutdownModeTest.test_in_soft_shutdown_mode_concent_should_not_accept_payment_requests": {
            "name": "test_in_soft_shutdown_mode_concent_should_not_accept_payment_requests",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_storage_cluster_address_check.py": {
        "TestStorageClusterAddressCheck.test_that_storage_cluster_address_not_set_will_produce_error_when_verifier_is_in_available_concent_features": {
            "name": "test_that_storage_cluster_address_not_set_will_produce_error_when_verifier_is_in_available_concent_features",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterAddressCheck.test_that_storage_cluster_address_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features": {
            "name": "test_that_storage_cluster_address_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterAddressCheck.test_that_storage_cluster_address_as_invalid_url_will_produce_error": {
            "name": "test_that_storage_cluster_address_as_invalid_url_will_produce_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterAddressCheck.test_that_storage_cluster_address_non_ending_with_slash_will_produce_error": {
            "name": "test_that_storage_cluster_address_non_ending_with_slash_will_produce_error",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterAddressCheck.test_that_storage_cluster_address_as_valid_url_will_not_produce_error": {
            "name": "test_that_storage_cluster_address_as_valid_url_will_not_produce_error",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_storage_cluster_certificate_path_check.py": {
        "TestStorageClusterCertificatePathCheck.test_that_empty_string_does_not_produce_any_errors": {
            "name": "test_that_empty_string_does_not_produce_any_errors",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterCertificatePathCheck.test_that_non_existing_path_produces_an_error": {
            "name": "test_that_non_existing_path_produces_an_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterCertificatePathCheck.test_that_none_produces_an_error": {
            "name": "test_that_none_produces_an_error",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageClusterCertificatePathCheck.test_that_wrong_type_produces_an_error": {
            "name": "test_that_wrong_type_produces_an_error",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "_isfile_mock": [],
                "_exists_mock": []
            }
        },
        "TestStorageClusterCertificatePathCheck.test_that_correct_file_path_does_not_produce_any_error": {
            "name": "test_that_correct_file_path_does_not_produce_any_error",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "_isfile_mock": [],
                "_exists_mock": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_storage_server_internal_address_check.py": {
        "TestStorageServerInternalAddressCheck.test_that_storage_server_internal_address_not_set_will_produce_error_when_verifier_is_in_available_concent_features": {
            "name": "test_that_storage_server_internal_address_not_set_will_produce_error_when_verifier_is_in_available_concent_features",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageServerInternalAddressCheck.test_that_storage_server_internal_address_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features": {
            "name": "test_that_storage_server_internal_address_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageServerInternalAddressCheck.test_that_storage_server_internal_address_as_invalid_url_will_produce_error": {
            "name": "test_that_storage_server_internal_address_as_invalid_url_will_produce_error",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageServerInternalAddressCheck.test_that_storage_server_internal_address_non_ending_with_slash_will_produce_error": {
            "name": "test_that_storage_server_internal_address_non_ending_with_slash_will_produce_error",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStorageServerInternalAddressCheck.test_that_storage_server_internal_address_as_valid_url_will_not_produce_error": {
            "name": "test_that_storage_server_internal_address_as_valid_url_will_not_produce_error",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_system_check.py": {
        "SystemCheckTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemCheckTest.test_geth_container_address_check_correct_value": {
            "name": "test_geth_container_address_check_correct_value",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemCheckTest.test_geth_container_address_check_should_return_error_because_of_missing_colon": {
            "name": "test_geth_container_address_check_should_return_error_because_of_missing_colon",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemCheckTest.test_geth_container_address_check_should_return_error_if_in_setting_is_missing_http_at_the_beginning": {
            "name": "test_geth_container_address_check_should_return_error_if_in_setting_is_missing_http_at_the_beginning",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemCheckTest.test_geth_container_address_check_should_return_error_if_slash_is_missing": {
            "name": "test_geth_container_address_check_should_return_error_if_slash_is_missing",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemCheckTest.test_geth_container_address_check_should_return_error_if_http_is_in_the_end": {
            "name": "test_geth_container_address_check_should_return_error_if_http_is_in_the_end",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/test_verifier_storage_path_check.py": {
        "TestVerifierStoragePathCheck.test_that_verifier_storage_path_not_set_will_produce_error_when_verifier_is_in_available_concent_features": {
            "name": "test_that_verifier_storage_path_not_set_will_produce_error_when_verifier_is_in_available_concent_features",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierStoragePathCheck.test_that_verifier_storage_path_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features": {
            "name": "test_that_verifier_storage_path_not_set_will_not_produce_error_when_verifier_is_not_in_available_concent_features",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierStoragePathCheck.test_that_verifier_storage_path_as_non_existing_path_will_produce_error": {
            "name": "test_that_verifier_storage_path_as_non_existing_path_will_produce_error",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierStoragePathCheck.test_that_verifier_storage_path_as_existing_non_accessible_path_will_produce_error": {
            "name": "test_that_verifier_storage_path_as_existing_non_accessible_path_will_produce_error",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVerifierStoragePathCheck.test_that_verifier_storage_path_as_existing_accessible_path_will_not_produce_error": {
            "name": "test_that_verifier_storage_path_as_existing_accessible_path_will_not_produce_error",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/concent_api/tests/__init__.py": {},
    "concent-master/concent_api/conductor/apps.py": {},
    "concent-master/concent_api/conductor/constants.py": {},
    "concent-master/concent_api/conductor/exceptions.py": {},
    "concent-master/concent_api/conductor/models.py": {
        "VerificationRequest.clean": {
            "name": "clean",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/conductor/service.py": {
        "update_upload_report": {
            "name": "update_upload_report",
            "location": 26,
            "return": [],
            "arguments": {
                "file_path": [],
                "result_transfer_request": []
            }
        },
        "store_verification_request_and_blender_subtask_definition": {
            "name": "store_verification_request_and_blender_subtask_definition",
            "location": 73,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "source_package_path": [],
                "result_package_path": [],
                "output_format": [],
                "scene_file": [],
                "verification_deadline": [],
                "blender_parameters": []
            }
        },
        "store_frames": {
            "name": "store_frames",
            "location": 105,
            "return": [],
            "arguments": {
                "blender_subtask_definition": [],
                "frame_list": []
            }
        },
        "filter_frames_by_blender_subtask_definition": {
            "name": "filter_frames_by_blender_subtask_definition",
            "location": 118,
            "return": [],
            "arguments": {
                "blender_subtask_definition": []
            }
        },
        "_store_blender_crop_script_parameters": {
            "name": "_store_blender_crop_script_parameters",
            "location": 122,
            "return": [],
            "arguments": {
                "blender_parameters": []
            }
        },
        "update_upload_report.call_result_upload_finished": {
            "name": "call_result_upload_finished",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/conductor/tasks.py": {
        "blender_verification_request": {
            "name": "blender_verification_request",
            "location": 36,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "source_package_path": [],
                "result_package_path": [],
                "output_format": [],
                "scene_file": [],
                "verification_deadline": [],
                "frames": [],
                "blender_crop_script_parameters": []
            }
        },
        "upload_acknowledged": {
            "name": "upload_acknowledged",
            "location": 121,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "source_file_size": [],
                "source_package_hash": [],
                "result_file_size": [],
                "result_package_hash": []
            }
        },
        "result_transfer_request": {
            "name": "result_transfer_request",
            "location": 205,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "result_package_path": []
            }
        },
        "upload_acknowledged.call_blender_verification_order": {
            "name": "call_blender_verification_order",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "blender_verification_request.call_upload_finished": {
            "name": "call_upload_finished",
            "location": 109,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/conductor/urls.py": {},
    "concent-master/concent_api/conductor/utils.py": {
        "parse_blender_crop_script_parameters_to_dict_from_query": {
            "name": "parse_blender_crop_script_parameters_to_dict_from_query",
            "location": 8,
            "return": [],
            "arguments": {
                "blender_crop_script_parameters": []
            }
        }
    },
    "concent-master/concent_api/conductor/views.py": {
        "report_upload": {
            "name": "report_upload",
            "location": 29,
            "return": [],
            "arguments": {
                "_request": [],
                "file_path": []
            }
        },
        "report_upload.call_upload_finished": {
            "name": "call_upload_finished",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/conductor/__init__.py": {},
    "concent-master/concent_api/conductor/migrations/0001_initial.py": {},
    "concent-master/concent_api/conductor/migrations/0002_auto_20180627_1335.py": {},
    "concent-master/concent_api/conductor/migrations/0003_verificationrequest_verification_deadline.py": {},
    "concent-master/concent_api/conductor/migrations/0004_auto_20180704_0733.py": {},
    "concent-master/concent_api/conductor/migrations/0005_blendersubtaskdefinition_blender_crop_script.py": {},
    "concent-master/concent_api/conductor/migrations/0006_auto_20180704_1421.py": {},
    "concent-master/concent_api/conductor/migrations/0007_auto_20180709_1526.py": {},
    "concent-master/concent_api/conductor/migrations/0008_auto_20180717_0908.py": {
        "transfer_created_at_field_from_blender_subtask_definition_to_verification_request": {
            "name": "transfer_created_at_field_from_blender_subtask_definition_to_verification_request",
            "location": 8,
            "return": [],
            "arguments": {
                "apps": [],
                "_schema_editor": []
            }
        }
    },
    "concent-master/concent_api/conductor/migrations/0009_auto_20180829_1224.py": {},
    "concent-master/concent_api/conductor/migrations/0010_auto_20180919_2153.py": {},
    "concent-master/concent_api/conductor/migrations/0011_auto_20181107_1226.py": {},
    "concent-master/concent_api/conductor/migrations/0012_auto_20181222_1926.py": {},
    "concent-master/concent_api/conductor/migrations/0013_auto_20190328_0813.py": {},
    "concent-master/concent_api/conductor/migrations/__init__.py": {},
    "concent-master/concent_api/conductor/tests/test_integration_conductor.py": {
        "ConductorVerificationIntegrationTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest._prepare_verification_request_with_blender_subtask_definition": {
            "name": "_prepare_verification_request_with_blender_subtask_definition",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_return_404_when_file_path_parameter_not_matching_url_pattern_is_used": {
            "name": "test_conductor_should_return_404_when_file_path_parameter_not_matching_url_pattern_is_used",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_create_upload_report": {
            "name": "test_conductor_should_create_upload_report",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_create_upload_report_and_link_to_related_verification_request": {
            "name": "test_conductor_should_create_upload_report_and_link_to_related_verification_request",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_create_upload_report_and_do_not_link_to_unrelated_verification_request": {
            "name": "test_conductor_should_create_upload_report_and_do_not_link_to_unrelated_verification_request",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_schedule_verification_order_task_if_all_related_upload_requests_have_reports": {
            "name": "test_conductor_should_schedule_verification_order_task_if_all_related_upload_requests_have_reports",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_conductor_should_not_schedule_verification_order_task_if_it_was_already_scheduled_for_given_verification": {
            "name": "test_conductor_should_not_schedule_verification_order_task_if_it_was_already_scheduled_for_given_verification",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_that_conductor_should_schedule_verification_order_task_if_uploaded_file_path_was_not_existing_before_and_other_requirements_are_met": {
            "name": "test_that_conductor_should_schedule_verification_order_task_if_uploaded_file_path_was_not_existing_before_and_other_requirements_are_met",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_that_conductor_should_not_schedule_verification_order_task_if_same_file_was_uploaded_again": {
            "name": "test_that_conductor_should_not_schedule_verification_order_task_if_same_file_was_uploaded_again",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_that_conductor_should_call_update_upload_report_task_if_related_result_transfer_request_exists": {
            "name": "test_that_conductor_should_call_update_upload_report_task_if_related_result_transfer_request_exists",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_blender_verification_request_task_should_create_verification_request_and_blender_subtask_definition": {
            "name": "test_blender_verification_request_task_should_create_verification_request_and_blender_subtask_definition",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_blender_verification_request_task_should_not_link_upload_requests_to_unrelated_upload_reports": {
            "name": "test_blender_verification_request_task_should_not_link_upload_requests_to_unrelated_upload_reports",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorVerificationIntegrationTest.test_blender_verification_request_task_should_schedule_upload_finished_task_if_all_related_upload_requests_have_reports": {
            "name": "test_blender_verification_request_task_should_schedule_upload_finished_task_if_all_related_upload_requests_have_reports",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/conductor/tests/test_service.py": {
        "ConductorReportFinishedUploadTestCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorReportFinishedUploadTestCase.test_that_update_upload_report_should_update_related_upload_reports": {
            "name": "test_that_update_upload_report_should_update_related_upload_reports",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorReportFinishedUploadTestCase.test_that_update_upload_report_should_schedule_result_upload_finished_if_result_transfer_request_upload_finished_is_false": {
            "name": "test_that_update_upload_report_should_schedule_result_upload_finished_if_result_transfer_request_upload_finished_is_false",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorReportFinishedUploadTestCase.test_that_update_upload_report_should_raise_exception_when_related_verification_request_exist": {
            "name": "test_that_update_upload_report_should_raise_exception_when_related_verification_request_exist",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlenderCropScriptParameters.setup": {
            "name": "setup",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlenderCropScriptParameters.test_store_blender_crop_script_parameters": {
            "name": "test_store_blender_crop_script_parameters",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "borders_x": [],
                "borders_y": []
            }
        }
    },
    "concent-master/concent_api/conductor/tests/test_task_result_transfer_request.py": {
        "ConductorResultTransferRequestTaskTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorResultTransferRequestTaskTestCase.test_that_result_transfer_request_create_result_transfer_request": {
            "name": "test_that_result_transfer_request_create_result_transfer_request",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorResultTransferRequestTaskTestCase.test_that_result_transfer_request_create_result_transfer_request_and_call_update_upload_report_if_related_upload_report_exists": {
            "name": "test_that_result_transfer_request_create_result_transfer_request_and_call_update_upload_report_if_related_upload_report_exists",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/conductor/tests/test_task_upload_acknowledged.py": {
        "ConductorUploadAcknowledgedTaskTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorUploadAcknowledgedTaskTestCase.test_that_upload_acknowledged_task_should_change_upload_finished_on_existing_related_verification_request_to_true_and_call_blender_verification_order_task": {
            "name": "test_that_upload_acknowledged_task_should_change_upload_finished_on_existing_related_verification_request_to_true_and_call_blender_verification_order_task",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConductorUploadAcknowledgedTaskTestCase.test_that_upload_acknowledged_task_should_log_error_when_verification_request_with_given_subtask_id_does_not_exist": {
            "name": "test_that_upload_acknowledged_task_should_log_error_when_verification_request_with_given_subtask_id_does_not_exist",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "mock_logging_error": []
            }
        },
        "ConductorUploadAcknowledgedTaskTestCase.test_that_upload_acknowledged_task_should_raise_exception_when_verification_request_is_already_acknowledged": {
            "name": "test_that_upload_acknowledged_task_should_raise_exception_when_verification_request_is_already_acknowledged",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/conductor/tests/__init__.py": {},
    "concent-master/concent_api/core/admin.py": {
        "ActivePassiveDownloadsStateFilter.lookups": {
            "name": "lookups",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "model_admin": []
            }
        },
        "ActivePassiveDownloadsStateFilter.queryset": {
            "name": "queryset",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": []
            }
        },
        "SubtaskAdmin.get_provider_public_key": {
            "name": "get_provider_public_key",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "subtask": []
            }
        },
        "SubtaskAdmin.get_requestor_public_key": {
            "name": "get_requestor_public_key",
            "location": 84,
            "return": [],
            "arguments": {
                "cls": [],
                "subtask": []
            }
        },
        "SubtaskAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": [],
                "request": []
            }
        },
        "SubtaskAdmin.download_deadline": {
            "name": "download_deadline",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "subtask": []
            }
        },
        "PendingResponseAdmin.get_subtask_subtask_id": {
            "name": "get_subtask_subtask_id",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [],
                "pending_response": []
            }
        },
        "PendingResponseAdmin.get_client_public_key": {
            "name": "get_client_public_key",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [],
                "pending_response": []
            }
        },
        "DepositAccountAdmin.client_public_key": {
            "name": "client_public_key",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "deposit_account": []
            }
        },
        "DepositAccountAdmin.get_sum_of_claims": {
            "name": "get_sum_of_claims",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "deposit_account": []
            }
        },
        "DepositAccountAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DepositClaimAdmin.payer_deposit_account_ethereum_address": {
            "name": "payer_deposit_account_ethereum_address",
            "location": 199,
            "return": [],
            "arguments": {
                "cls": [],
                "deposit_claim": []
            }
        }
    },
    "concent-master/concent_api/core/apps.py": {},
    "concent-master/concent_api/core/constants.py": {},
    "concent-master/concent_api/core/decorators.py": {
        "validate_protocol_version_in_core": {
            "name": "validate_protocol_version_in_core",
            "location": 47,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "require_golem_auth_message": {
            "name": "require_golem_auth_message",
            "location": 64,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "require_golem_message": {
            "name": "require_golem_message",
            "location": 129,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "handle_errors_and_responses": {
            "name": "handle_errors_and_responses",
            "location": 187,
            "return": [],
            "arguments": {
                "database_name": []
            }
        },
        "log_communication": {
            "name": "log_communication",
            "location": 325,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "retry_middleman_connection_if_not_pass_timeout": {
            "name": "retry_middleman_connection_if_not_pass_timeout",
            "location": 336,
            "return": [],
            "arguments": {
                "send_request_to_middleman": []
            }
        },
        "validate_protocol_version_in_core.wrapper": {
            "name": "wrapper",
            "location": 49,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "require_golem_auth_message.wrapper": {
            "name": "wrapper",
            "location": 71,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "require_golem_message.wrapper": {
            "name": "wrapper",
            "location": 136,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "handle_errors_and_responses.decorator": {
            "name": "decorator",
            "location": 192,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "log_communication.wrapper": {
            "name": "wrapper",
            "location": 328,
            "return": [],
            "arguments": {
                "request": [],
                "golem_message": [],
                "client_public_key": []
            }
        },
        "retry_middleman_connection_if_not_pass_timeout.wrapper": {
            "name": "wrapper",
            "location": 339,
            "return": [],
            "arguments": {
                "middleman_message": []
            }
        },
        "handle_errors_and_responses.decorator.wrapper": {
            "name": "wrapper",
            "location": 194,
            "return": [],
            "arguments": {
                "request": [],
                "client_message": [],
                "client_public_key": []
            }
        }
    },
    "concent-master/concent_api/core/enums.py": {
        "HashingAlgorithm.values": {
            "name": "values",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/exceptions.py": {},
    "concent-master/concent_api/core/message_handlers.py": {
        "handle_send_force_report_computed_task": {
            "name": "handle_send_force_report_computed_task",
            "location": 90,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_send_ack_report_computed_task": {
            "name": "handle_send_ack_report_computed_task",
            "location": 153,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_send_reject_report_computed_task": {
            "name": "handle_send_reject_report_computed_task",
            "location": 248,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_send_force_get_task_result": {
            "name": "handle_send_force_get_task_result",
            "location": 402,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_send_force_subtask_results": {
            "name": "handle_send_force_subtask_results",
            "location": 509,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_send_force_subtask_results_response": {
            "name": "handle_send_force_subtask_results_response",
            "location": 640,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "get_clients_eth_accounts": {
            "name": "get_clients_eth_accounts",
            "location": 754,
            "return": [],
            "arguments": {
                "task_to_compute": []
            }
        },
        "handle_send_force_payment": {
            "name": "handle_send_force_payment",
            "location": 762,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "handle_unsupported_golem_messages_type": {
            "name": "handle_unsupported_golem_messages_type",
            "location": 865,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "store_subtask": {
            "name": "store_subtask",
            "location": 878,
            "return": [],
            "arguments": {
                "task_id": [],
                "subtask_id": [],
                "provider_public_key": [],
                "requestor_public_key": [],
                "state": [],
                "next_deadline": [],
                "task_to_compute": [],
                "report_computed_task": [],
                "ack_report_computed_task": [],
                "reject_report_computed_task": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": [],
                "force_get_task_result": [],
                "subtask_results_verify": []
            }
        },
        "handle_messages_from_database": {
            "name": "handle_messages_from_database",
            "location": 964,
            "return": [],
            "arguments": {
                "client_public_key": []
            }
        },
        "mark_message_as_delivered_and_log": {
            "name": "mark_message_as_delivered_and_log",
            "location": 1165,
            "return": [],
            "arguments": {
                "undelivered_message": [],
                "log_message": []
            }
        },
        "update_and_return_updated_subtask": {
            "name": "update_and_return_updated_subtask",
            "location": 1179,
            "return": [],
            "arguments": {
                "subtask": [],
                "state": [],
                "next_deadline": [],
                "set_next_deadline": [],
                "task_to_compute": [],
                "report_computed_task": [],
                "ack_report_computed_task": [],
                "reject_report_computed_task": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": [],
                "force_get_task_result": [],
                "subtask_results_verify": []
            }
        },
        "set_subtask_messages": {
            "name": "set_subtask_messages",
            "location": 1248,
            "return": [],
            "arguments": {
                "subtask": [],
                "task_to_compute": [],
                "report_computed_task": [],
                "ack_report_computed_task": [],
                "reject_report_computed_task": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": [],
                "force_get_task_result": [],
                "subtask_results_verify": []
            }
        },
        "store_message": {
            "name": "store_message",
            "location": 1304,
            "return": [],
            "arguments": {
                "golem_message": [],
                "task_id": [],
                "subtask_id": []
            }
        },
        "handle_send_subtask_results_verify": {
            "name": "handle_send_subtask_results_verify",
            "location": 1326,
            "return": [],
            "arguments": {
                "subtask_results_verify": []
            }
        },
        "handle_message": {
            "name": "handle_message",
            "location": 1464,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "are_items_unique": {
            "name": "are_items_unique",
            "location": 1501,
            "return": [],
            "arguments": {
                "items": []
            }
        }
    },
    "concent-master/concent_api/core/models.py": {
        "SubtaskWithTimingColumnsManager.with_maximum_download_time": {
            "name": "with_maximum_download_time",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "query_set": []
            }
        },
        "SubtaskWithTimingColumnsManager.with_subtask_verification_time": {
            "name": "with_subtask_verification_time",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [],
                "query_set": []
            }
        },
        "SubtaskWithTimingColumnsManager.with_download_deadline": {
            "name": "with_download_deadline",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "query_set": []
            }
        },
        "SubtaskWithTimingColumnsManager.with_timing_columns": {
            "name": "with_timing_columns",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [],
                "query_set": []
            }
        },
        "SubtaskWithTimingColumnsManager.get_queryset": {
            "name": "get_queryset",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StoredMessage.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientManager.get_or_create_full_clean": {
            "name": "get_or_create_full_clean",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "public_key": []
            }
        },
        "Subtask.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subtask.__repr__": {
            "name": "__repr__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subtask.from_db": {
            "name": "from_db",
            "location": 426,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [],
                "field_names": [],
                "values": []
            }
        },
        "Subtask._deserialize_database_message": {
            "name": "_deserialize_database_message",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "serialized_message": []
            }
        },
        "Subtask.clean": {
            "name": "clean",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subtask.state_enum": {
            "name": "state_enum",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subtask._current_state_enum": {
            "name": "_current_state_enum",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PendingResponse.response_type_enum": {
            "name": "response_type_enum",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PendingResponse.clean": {
            "name": "clean",
            "location": 580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentInfo.amount_paid_as_int": {
            "name": "amount_paid_as_int",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentInfo.amount_pending_as_int": {
            "name": "amount_pending_as_int",
            "location": 631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentInfo.clean": {
            "name": "clean",
            "location": 634,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalTransactionState.save": {
            "name": "save",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepositAccountManager.get_or_create_full_clean": {
            "name": "get_or_create_full_clean",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "ethereum_address": []
            }
        },
        "DepositClaim.amount_as_int": {
            "name": "amount_as_int",
            "location": 733,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepositClaim.clean": {
            "name": "clean",
            "location": 739,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/model_helpers.py": {
        "get_one_or_none": {
            "name": "get_one_or_none",
            "location": 15,
            "return": [],
            "arguments": {
                "model_or_query_set": []
            }
        },
        "get_or_create_with_retry": {
            "name": "get_or_create_with_retry",
            "location": 29,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "concent-master/concent_api/core/queue_operations.py": {
        "send_blender_verification_request": {
            "name": "send_blender_verification_request",
            "location": 11,
            "return": [],
            "arguments": {
                "compute_task_def": [],
                "verification_deadline": []
            }
        }
    },
    "concent-master/concent_api/core/subtask_helpers.py": {
        "_update_timed_out_subtask": {
            "name": "_update_timed_out_subtask",
            "location": 36,
            "return": [],
            "arguments": {
                "subtask": []
            }
        },
        "check_compatibility": {
            "name": "check_compatibility",
            "location": 161,
            "return": [],
            "arguments": {
                "subtask": [],
                "client_public_key": []
            }
        },
        "update_subtasks_states": {
            "name": "update_subtasks_states",
            "location": 177,
            "return": [],
            "arguments": {
                "subtask": [],
                "client_public_key": []
            }
        },
        "pre_process_message_related_subtasks": {
            "name": "pre_process_message_related_subtasks",
            "location": 186,
            "return": [],
            "arguments": {
                "client_message": [],
                "client_public_key": []
            }
        },
        "update_all_timed_out_subtasks_of_a_client": {
            "name": "update_all_timed_out_subtasks_of_a_client",
            "location": 215,
            "return": [],
            "arguments": {
                "client_public_key": []
            }
        },
        "update_subtask_state": {
            "name": "update_subtask_state",
            "location": 241,
            "return": [],
            "arguments": {
                "subtask": [],
                "state": [],
                "next_deadline": []
            }
        },
        "are_keys_and_addresses_unique_in_message_subtask_results_accepted": {
            "name": "are_keys_and_addresses_unique_in_message_subtask_results_accepted",
            "location": 255,
            "return": [],
            "arguments": {
                "subtask_results_accepted_list": []
            }
        },
        "are_subtask_results_accepted_messages_signed_by_the_same_requestor": {
            "name": "are_subtask_results_accepted_messages_signed_by_the_same_requestor",
            "location": 282,
            "return": [],
            "arguments": {
                "subtask_results_accepted_list": []
            }
        },
        "finalize_deposit_claim": {
            "name": "finalize_deposit_claim",
            "location": 295,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "concent_use_case": [],
                "ethereum_address": []
            }
        },
        "delete_deposit_claim": {
            "name": "delete_deposit_claim",
            "location": 311,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "concent_use_case": [],
                "ethereum_address": []
            }
        },
        "is_state_transition_possible": {
            "name": "is_state_transition_possible",
            "location": 327,
            "return": [],
            "arguments": {
                "to_": [],
                "from_": []
            }
        },
        "_update_timed_out_subtask.finalize_claim_for_acceptance_case": {
            "name": "finalize_claim_for_acceptance_case",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "_update_timed_out_subtask.finalize_claim_for_additional_verification_case": {
            "name": "finalize_claim_for_additional_verification_case",
            "location": 136,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/tasks.py": {
        "upload_finished": {
            "name": "upload_finished",
            "location": 41,
            "return": [],
            "arguments": {
                "subtask_id": []
            }
        },
        "verification_result": {
            "name": "verification_result",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "result": [],
                "error_message": [],
                "error_code": []
            }
        },
        "result_upload_finished": {
            "name": "result_upload_finished",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": []
            }
        },
        "upload_finished.call_upload_acknowledged": {
            "name": "call_upload_acknowledged",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "verification_result.finalize_claims": {
            "name": "finalize_claims",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "upload_finished.finalize_claims": {
            "name": "finalize_claims",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/transfer_operations.py": {
        "verify_file_status": {
            "name": "verify_file_status",
            "location": 30,
            "return": [],
            "arguments": {
                "subtask": [],
                "client_public_key": []
            }
        },
        "store_pending_message": {
            "name": "store_pending_message",
            "location": 60,
            "return": [],
            "arguments": {
                "response_type": [],
                "client_public_key": [],
                "queue": [],
                "subtask": [],
                "payment_message": []
            }
        },
        "_create_payment_info_if_necessary": {
            "name": "_create_payment_info_if_necessary",
            "location": 89,
            "return": [],
            "arguments": {
                "payment_message": []
            }
        },
        "create_file_transfer_token_for_concent": {
            "name": "create_file_transfer_token_for_concent",
            "location": 108,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "result_package_path": [],
                "result_size": [],
                "result_package_hash": [],
                "operation": [],
                "source_package_path": [],
                "source_size": [],
                "source_package_hash": []
            }
        },
        "create_file_transfer_token_for_golem_client": {
            "name": "create_file_transfer_token_for_golem_client",
            "location": 132,
            "return": [],
            "arguments": {
                "report_computed_task": [],
                "authorized_client_public_key": [],
                "operation": []
            }
        },
        "create_file_transfer_token_for_verification_use_case": {
            "name": "create_file_transfer_token_for_verification_use_case",
            "location": 159,
            "return": [],
            "arguments": {
                "subtask_results_verify": [],
                "authorized_client_public_key": []
            }
        },
        "calculate_token_expiration_deadline_for_verification_case": {
            "name": "calculate_token_expiration_deadline_for_verification_case",
            "location": 189,
            "return": [],
            "arguments": {
                "subtask_results_verify": []
            }
        },
        "_create_file_transfer_token": {
            "name": "_create_file_transfer_token",
            "location": 203,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "result_package_path": [],
                "result_size": [],
                "result_package_hash": [],
                "authorized_client_public_key": [],
                "operation": [],
                "source_package_path": [],
                "source_size": [],
                "source_package_hash": [],
                "token_expiration_deadline": []
            }
        },
        "create_file_info": {
            "name": "create_file_info",
            "location": 257,
            "return": [],
            "arguments": {
                "file_path": [],
                "package_hash": [],
                "size": [],
                "category": []
            }
        },
        "send_request_to_storage_cluster": {
            "name": "send_request_to_storage_cluster",
            "location": 272,
            "return": [],
            "arguments": {
                "headers": [],
                "request_http_address": [],
                "method": []
            }
        },
        "calculate_token_expiration_deadline": {
            "name": "calculate_token_expiration_deadline",
            "location": 292,
            "return": [],
            "arguments": {
                "operation": [],
                "report_computed_task": []
            }
        }
    },
    "concent-master/concent_api/core/urls.py": {},
    "concent-master/concent_api/core/utils.py": {
        "calculate_maximum_download_time": {
            "name": "calculate_maximum_download_time",
            "location": 33,
            "return": [],
            "arguments": {
                "size": [],
                "rate": []
            }
        },
        "calculate_subtask_verification_time": {
            "name": "calculate_subtask_verification_time",
            "location": 59,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "calculate_concent_verification_time": {
            "name": "calculate_concent_verification_time",
            "location": 90,
            "return": [],
            "arguments": {
                "task_to_compute": []
            }
        },
        "hex_to_bytes_convert": {
            "name": "hex_to_bytes_convert",
            "location": 101,
            "return": [],
            "arguments": {
                "client_public_key": []
            }
        },
        "extract_name_from_scene_file_path": {
            "name": "extract_name_from_scene_file_path",
            "location": 117,
            "return": [],
            "arguments": {
                "absoulte_scene_file_path_in_docker": []
            }
        },
        "get_major_and_minor_golem_messages_version": {
            "name": "get_major_and_minor_golem_messages_version",
            "location": 130,
            "return": [],
            "arguments": {
                "protocol_version": []
            }
        },
        "is_protocol_version_compatible": {
            "name": "is_protocol_version_compatible",
            "location": 135,
            "return": [],
            "arguments": {
                "protocol_version": []
            }
        },
        "is_given_golem_messages_version_supported_by_concent": {
            "name": "is_given_golem_messages_version_supported_by_concent",
            "location": 145,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 160,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "adjust_transaction_hash": {
            "name": "adjust_transaction_hash",
            "location": 171,
            "return": [],
            "arguments": {
                "tx_hash": []
            }
        },
        "adjust_format_name": {
            "name": "adjust_format_name",
            "location": 177,
            "return": [],
            "arguments": {
                "output_format": []
            }
        },
        "extract_blender_parameters_from_compute_task_def": {
            "name": "extract_blender_parameters_from_compute_task_def",
            "location": 209,
            "return": [],
            "arguments": {
                "extra_data": []
            }
        },
        "BlocksHelper.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "sci": []
            }
        },
        "BlocksHelper.get_latest_existing_block_at": {
            "name": "get_latest_existing_block_at",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        }
    },
    "concent-master/concent_api/core/validation.py": {
        "validate_value_is_int_convertible_and_non_negative": {
            "name": "validate_value_is_int_convertible_and_non_negative",
            "location": 45,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_value_is_int_convertible_and_positive": {
            "name": "validate_value_is_int_convertible_and_positive",
            "location": 55,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_hex_public_key": {
            "name": "validate_hex_public_key",
            "location": 65,
            "return": [],
            "arguments": {
                "value": [],
                "field_name": []
            }
        },
        "validate_bytes_public_key": {
            "name": "validate_bytes_public_key",
            "location": 69,
            "return": [],
            "arguments": {
                "value": [],
                "field_name": []
            }
        },
        "validate_key_with_desired_parameters": {
            "name": "validate_key_with_desired_parameters",
            "location": 73,
            "return": [],
            "arguments": {
                "key_name": [],
                "key_value": [],
                "expected_type": [],
                "expected_length": []
            }
        },
        "validate_task_to_compute": {
            "name": "validate_task_to_compute",
            "location": 88,
            "return": [],
            "arguments": {
                "task_to_compute": []
            }
        },
        "validate_subtask_results_verify": {
            "name": "validate_subtask_results_verify",
            "location": 117,
            "return": [],
            "arguments": {
                "msg": [],
                "deposit_contract_address": []
            }
        },
        "validate_report_computed_task_time_window": {
            "name": "validate_report_computed_task_time_window",
            "location": 125,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "validate_all_messages_identical": {
            "name": "validate_all_messages_identical",
            "location": 135,
            "return": [],
            "arguments": {
                "golem_messages_list": []
            }
        },
        "is_golem_message_signed_with_key": {
            "name": "is_golem_message_signed_with_key",
            "location": 151,
            "return": [],
            "arguments": {
                "public_key": [],
                "golem_message": []
            }
        },
        "validate_golem_message_subtask_results_rejected": {
            "name": "validate_golem_message_subtask_results_rejected",
            "location": 181,
            "return": [],
            "arguments": {
                "subtask_results_rejected": []
            }
        },
        "validate_ethereum_addresses": {
            "name": "validate_ethereum_addresses",
            "location": 192,
            "return": [],
            "arguments": {
                "requestor_ethereum_address": [],
                "provider_ethereum_address": []
            }
        },
        "get_validated_client_public_key_from_client_message": {
            "name": "get_validated_client_public_key_from_client_message",
            "location": 207,
            "return": [],
            "arguments": {
                "golem_message": []
            }
        },
        "validate_frames": {
            "name": "validate_frames",
            "location": 261,
            "return": [],
            "arguments": {
                "frames_list": []
            }
        },
        "validate_expected_value_type": {
            "name": "validate_expected_value_type",
            "location": 282,
            "return": [],
            "arguments": {
                "value": [],
                "value_name": [],
                "expected_type": []
            }
        },
        "validate_positive_integer_value": {
            "name": "validate_positive_integer_value",
            "location": 294,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_non_negative_integer_value": {
            "name": "validate_non_negative_integer_value",
            "location": 304,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_value_is_int_convertible": {
            "name": "validate_value_is_int_convertible",
            "location": 314,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_scene_file": {
            "name": "validate_scene_file",
            "location": 324,
            "return": [],
            "arguments": {
                "scene_file": []
            }
        },
        "validate_resolution": {
            "name": "validate_resolution",
            "location": 338,
            "return": [],
            "arguments": {
                "resolution": []
            }
        },
        "validate_use_compositing": {
            "name": "validate_use_compositing",
            "location": 362,
            "return": [],
            "arguments": {
                "use_compositing": []
            }
        },
        "validate_samples": {
            "name": "validate_samples",
            "location": 370,
            "return": [],
            "arguments": {
                "samples": []
            }
        },
        "validate_crops": {
            "name": "validate_crops",
            "location": 383,
            "return": [],
            "arguments": {
                "crops": []
            }
        },
        "validate_blender_script_parameters": {
            "name": "validate_blender_script_parameters",
            "location": 430,
            "return": [],
            "arguments": {
                "extra_data": []
            }
        },
        "validate_compute_task_def": {
            "name": "validate_compute_task_def",
            "location": 445,
            "return": [],
            "arguments": {
                "compute_task_def": []
            }
        },
        "validate_that_golem_messages_are_signed_with_key": {
            "name": "validate_that_golem_messages_are_signed_with_key",
            "location": 480,
            "return": [],
            "arguments": {
                "public_key": []
            }
        },
        "validate_reject_report_computed_task": {
            "name": "validate_reject_report_computed_task",
            "location": 493,
            "return": [],
            "arguments": {
                "client_message": []
            }
        },
        "validate_uuid": {
            "name": "validate_uuid",
            "location": 523,
            "return": [],
            "arguments": {
                "id_": []
            }
        },
        "substitute_new_report_computed_task_if_needed": {
            "name": "substitute_new_report_computed_task_if_needed",
            "location": 538,
            "return": [],
            "arguments": {
                "report_computed_task_from_acknowledgement": [],
                "stored_report_computed_task": []
            }
        },
        "validate_list_of_transaction_timestamp": {
            "name": "validate_list_of_transaction_timestamp",
            "location": 559,
            "return": [],
            "arguments": {
                "acceptances": []
            }
        },
        "validate_positive_task_price": {
            "name": "validate_positive_task_price",
            "location": 574,
            "return": [],
            "arguments": {
                "price": []
            }
        },
        "validate_blender_output_format": {
            "name": "validate_blender_output_format",
            "location": 584,
            "return": [],
            "arguments": {
                "output_format": []
            }
        },
        "validate_subtask_results_rejected_reason": {
            "name": "validate_subtask_results_rejected_reason",
            "location": 592,
            "return": [],
            "arguments": {
                "client_message": []
            }
        }
    },
    "concent-master/concent_api/core/views.py": {
        "send": {
            "name": "send",
            "location": 37,
            "return": [],
            "arguments": {
                "_request": [],
                "client_message": [],
                "client_public_key": []
            }
        },
        "receive": {
            "name": "receive",
            "location": 57,
            "return": [],
            "arguments": {
                "_request": [],
                "_message": [],
                "_client_public_key": []
            }
        },
        "protocol_constants": {
            "name": "protocol_constants",
            "location": 66,
            "return": [],
            "arguments": {
                "_request": []
            }
        }
    },
    "concent-master/concent_api/core/__init__.py": {},
    "concent-master/concent_api/core/management/__init__.py": {},
    "concent-master/concent_api/core/management/commands/concent_migrate_ids_to_uuid.py": {
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/management/commands/__init__.py": {},
    "concent-master/concent_api/core/migrations/0001_initial.py": {},
    "concent-master/concent_api/core/migrations/0002_subtask_force_get_task_result.py": {},
    "concent-master/concent_api/core/migrations/0003_force_get_task_result_fix.py": {
        "insert_force_get_task_result_if_empty": {
            "name": "insert_force_get_task_result_if_empty",
            "location": 11,
            "return": [],
            "arguments": {
                "apps": [],
                "_schema_editor": []
            }
        }
    },
    "concent-master/concent_api/core/migrations/0004_globaltransactionstate_pendingethereumtransaction.py": {},
    "concent-master/concent_api/core/migrations/0005_auto_20180717_0908.py": {},
    "concent-master/concent_api/core/migrations/0006_auto_20180719_1213.py": {
        "populate_subtask_size_field": {
            "name": "populate_subtask_size_field",
            "location": 10,
            "return": [],
            "arguments": {
                "apps": [],
                "_schema_editor": []
            }
        },
        "populate_subtask_deadline_field": {
            "name": "populate_subtask_deadline_field",
            "location": 18,
            "return": [],
            "arguments": {
                "apps": [],
                "_schema_editor": []
            }
        }
    },
    "concent-master/concent_api/core/migrations/0007_auto_20180719_1241.py": {},
    "concent-master/concent_api/core/migrations/0008_store_message_timestamp_fix.py": {
        "switch_stored_message_timestamp_to_message_creation_time": {
            "name": "switch_stored_message_timestamp_to_message_creation_time",
            "location": 10,
            "return": [],
            "arguments": {
                "apps": [],
                "_schema_editor": []
            }
        }
    },
    "concent-master/concent_api/core/migrations/0009_auto_20180829_1224.py": {},
    "concent-master/concent_api/core/migrations/0010_auto_20180918_1036.py": {},
    "concent-master/concent_api/core/migrations/0011_subtask_want_to_compute_task.py": {},
    "concent-master/concent_api/core/migrations/0012_subtask_result_upload_finished.py": {},
    "concent-master/concent_api/core/migrations/0013_depositaccount_depositclaim.py": {},
    "concent-master/concent_api/core/migrations/0014_storedmessage_protocol_version.py": {},
    "concent-master/concent_api/core/migrations/0015_remove_depositclaim_subtask.py": {},
    "concent-master/concent_api/core/migrations/0016_auto_20181108_1245.py": {},
    "concent-master/concent_api/core/migrations/0017_auto_20181115_1219.py": {},
    "concent-master/concent_api/core/migrations/0018_depositclaim_closure_time.py": {},
    "concent-master/concent_api/core/migrations/0019_auto_20181217_1255.py": {},
    "concent-master/concent_api/core/migrations/0020_auto_20181221_1154.py": {},
    "concent-master/concent_api/core/migrations/0021_auto_20190128_1857.py": {},
    "concent-master/concent_api/core/migrations/0022_auto_20190129_1317.py": {},
    "concent-master/concent_api/core/migrations/0023_subtask_protocol_version.py": {},
    "concent-master/concent_api/core/migrations/0024_subtask_subtask_results_verify.py": {},
    "concent-master/concent_api/core/migrations/__init__.py": {},
    "concent-master/concent_api/core/payments/bankster.py": {
        "claim_deposit": {
            "name": "claim_deposit",
            "location": 45,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "concent_use_case": [],
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "subtask_cost": [],
                "requestor_public_key": [],
                "provider_public_key": []
            }
        },
        "finalize_payment": {
            "name": "finalize_payment",
            "location": 174,
            "return": [],
            "arguments": {
                "deposit_claim": []
            }
        },
        "settle_overdue_acceptances": {
            "name": "settle_overdue_acceptances",
            "location": 286,
            "return": [],
            "arguments": {
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "acceptances": [],
                "requestor_public_key": []
            }
        },
        "sum_payments": {
            "name": "sum_payments",
            "location": 429,
            "return": [],
            "arguments": {
                "payments": []
            }
        },
        "sum_subtask_price": {
            "name": "sum_subtask_price",
            "location": 435,
            "return": [],
            "arguments": {
                "subtask_results_accepted_list": []
            }
        },
        "get_provider_payment_info": {
            "name": "get_provider_payment_info",
            "location": 443,
            "return": [],
            "arguments": {
                "list_of_settlement_payments": [],
                "list_of_transactions": [],
                "settlement_payment_claims": [],
                "subtask_results_accepted_list": []
            }
        },
        "find_unconfirmed_settlement_payments": {
            "name": "find_unconfirmed_settlement_payments",
            "location": 467,
            "return": [],
            "arguments": {
                "list_of_settlement_payments": [],
                "requestor_deposit_account": [],
                "provider_ethereum_address": [],
                "oldest_payments_ts": []
            }
        },
        "get_already_satisfied_claims": {
            "name": "get_already_satisfied_claims",
            "location": 506,
            "return": [],
            "arguments": {
                "requestor_deposit_account": [],
                "provider_ethereum_address": [],
                "payments_ts": []
            }
        },
        "discard_claim": {
            "name": "discard_claim",
            "location": 525,
            "return": [],
            "arguments": {
                "deposit_claim": []
            }
        }
    },
    "concent-master/concent_api/core/payments/payment_interface.py": {
        "PaymentInterface.__new__": {
            "name": "__new__",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "concent-master/concent_api/core/payments/sci_callback.py": {
        "sci_callback": {
            "name": "sci_callback",
            "location": 35,
            "return": [],
            "arguments": {
                "transaction": []
            }
        },
        "create_transaction_signing_request": {
            "name": "create_transaction_signing_request",
            "location": 72,
            "return": [],
            "arguments": {
                "transaction": []
            }
        },
        "send_request_to_middleman": {
            "name": "send_request_to_middleman",
            "location": 91,
            "return": [],
            "arguments": {
                "middleman_message": []
            }
        },
        "deserialize_response_and_handle_errors": {
            "name": "deserialize_response_and_handle_errors",
            "location": 120,
            "return": [],
            "arguments": {
                "raw_response": [],
                "request_id": []
            }
        },
        "verify_data_and_signature": {
            "name": "verify_data_and_signature",
            "location": 167,
            "return": [],
            "arguments": {
                "signed_transaction": [],
                "transaction": []
            }
        },
        "is_signed_transaction_data_equal_to_transaction_data": {
            "name": "is_signed_transaction_data_equal_to_transaction_data",
            "location": 199,
            "return": [],
            "arguments": {
                "signed_transaction": [],
                "transaction": []
            }
        },
        "copy_transaction_signature": {
            "name": "copy_transaction_signature",
            "location": 218,
            "return": [],
            "arguments": {
                "signed_transaction": [],
                "transaction": []
            }
        }
    },
    "concent-master/concent_api/core/payments/service.py": {
        "_add_backend": {
            "name": "_add_backend",
            "location": 12,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_list_of_payments": {
            "name": "get_list_of_payments",
            "location": 26,
            "return": [],
            "arguments": {
                "backend": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "min_block_timestamp": [],
                "transaction_type": []
            }
        },
        "make_settlement_payment": {
            "name": "make_settlement_payment",
            "location": 42,
            "return": [],
            "arguments": {
                "backend": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_ids": [],
                "closure_time": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "get_transaction_count": {
            "name": "get_transaction_count",
            "location": 68,
            "return": [],
            "arguments": {
                "backend": []
            }
        },
        "get_deposit_value": {
            "name": "get_deposit_value",
            "location": 73,
            "return": [],
            "arguments": {
                "backend": [],
                "client_eth_address": []
            }
        },
        "force_subtask_payment": {
            "name": "force_subtask_payment",
            "location": 78,
            "return": [],
            "arguments": {
                "backend": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "cover_additional_verification_cost": {
            "name": "cover_additional_verification_cost",
            "location": 102,
            "return": [],
            "arguments": {
                "backend": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "register_confirmed_transaction_handler": {
            "name": "register_confirmed_transaction_handler",
            "location": 124,
            "return": [],
            "arguments": {
                "backend": [],
                "tx_hash": [],
                "callback": []
            }
        },
        "get_covered_additional_verification_costs": {
            "name": "get_covered_additional_verification_costs",
            "location": 133,
            "return": [],
            "arguments": {
                "backend": [],
                "client_eth_address": [],
                "payment_ts": []
            }
        },
        "_add_backend.wrapper": {
            "name": "wrapper",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/payments/storage.py": {
        "DatabaseTransactionsStorage.init": {
            "name": "init",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "network_nonce": []
            }
        },
        "DatabaseTransactionsStorage._is_storage_initialized": {
            "name": "_is_storage_initialized",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorage._init_with_nonce": {
            "name": "_init_with_nonce",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": []
            }
        },
        "DatabaseTransactionsStorage._get_nonce": {
            "name": "_get_nonce",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorage.get_all_tx": {
            "name": "get_all_tx",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorage.set_nonce_sign_and_save_tx": {
            "name": "set_nonce_sign_and_save_tx",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "sign_tx": [],
                "tx": []
            }
        },
        "DatabaseTransactionsStorage.remove_tx": {
            "name": "remove_tx",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": []
            }
        },
        "DatabaseTransactionsStorage.revert_last_tx": {
            "name": "revert_last_tx",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorage._get_locked_global_transaction_state": {
            "name": "_get_locked_global_transaction_state",
            "location": 170,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/payments/__init__.py": {},
    "concent-master/concent_api/core/payments/backends/mock.py": {
        "get_list_of_payments": {
            "name": "get_list_of_payments",
            "location": 9,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "min_block_timestamp": [],
                "transaction_type": []
            }
        },
        "make_settlement_payment": {
            "name": "make_settlement_payment",
            "location": 18,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_ids": [],
                "closure_time": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "get_transaction_count": {
            "name": "get_transaction_count",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "get_deposit_value": {
            "name": "get_deposit_value",
            "location": 36,
            "return": [],
            "arguments": {
                "client_eth_address": []
            }
        },
        "force_subtask_payment": {
            "name": "force_subtask_payment",
            "location": 43,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "cover_additional_verification_cost": {
            "name": "cover_additional_verification_cost",
            "location": 56,
            "return": [],
            "arguments": {
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "register_confirmed_transaction_handler": {
            "name": "register_confirmed_transaction_handler",
            "location": 68,
            "return": [],
            "arguments": {
                "_tx_hash": [],
                "_callback": []
            }
        },
        "get_covered_additional_verification_costs": {
            "name": "get_covered_additional_verification_costs",
            "location": 75,
            "return": [],
            "arguments": {
                "client_eth_address": [],
                "payment_ts": []
            }
        }
    },
    "concent-master/concent_api/core/payments/backends/sci_backend.py": {
        "handle_sci_synchronization": {
            "name": "handle_sci_synchronization",
            "location": 30,
            "return": [],
            "arguments": {
                "sci_function": []
            }
        },
        "get_list_of_payments": {
            "name": "get_list_of_payments",
            "location": 51,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "min_block_timestamp": [],
                "transaction_type": []
            }
        },
        "make_settlement_payment": {
            "name": "make_settlement_payment",
            "location": 101,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_ids": [],
                "closure_time": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "get_transaction_count": {
            "name": "get_transaction_count",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "get_deposit_value": {
            "name": "get_deposit_value",
            "location": 144,
            "return": [],
            "arguments": {
                "client_eth_address": []
            }
        },
        "force_subtask_payment": {
            "name": "force_subtask_payment",
            "location": 150,
            "return": [],
            "arguments": {
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "cover_additional_verification_cost": {
            "name": "cover_additional_verification_cost",
            "location": 178,
            "return": [],
            "arguments": {
                "provider_eth_address": [],
                "value": [],
                "subtask_id": [],
                "v": [],
                "r": [],
                "s": [],
                "reimburse_amount": []
            }
        },
        "register_confirmed_transaction_handler": {
            "name": "register_confirmed_transaction_handler",
            "location": 203,
            "return": [],
            "arguments": {
                "tx_hash": [],
                "callback": []
            }
        },
        "get_covered_additional_verification_costs": {
            "name": "get_covered_additional_verification_costs",
            "location": 213,
            "return": [],
            "arguments": {
                "client_eth_address": [],
                "payment_ts": []
            }
        },
        "_hexencode_uuid": {
            "name": "_hexencode_uuid",
            "location": 230,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "handle_sci_synchronization.wrapper": {
            "name": "wrapper",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/payments/backends/__init__.py": {},
    "concent-master/concent_api/core/templatetags/admin_tags.py": {
        "get_active_subtasks": {
            "name": "get_active_subtasks",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "get_passive_with_downloads_subtasks": {
            "name": "get_passive_with_downloads_subtasks",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "get_longest_lasting_subtask_timestamp": {
            "name": "get_longest_lasting_subtask_timestamp",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "get_time_until_concent_can_be_shut_down": {
            "name": "get_time_until_concent_can_be_shut_down",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "get_shutdown_mode_state": {
            "name": "get_shutdown_mode_state",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "get_active_subtasks_count": {
            "name": "get_active_subtasks_count",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "are_active_subtasks_present": {
            "name": "are_active_subtasks_present",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "get_subtasks_with_downloads_count": {
            "name": "get_subtasks_with_downloads_count",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "are_downloads_subtasks_present": {
            "name": "are_downloads_subtasks_present",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "are_only_with_downloads_subtasks_present": {
            "name": "are_only_with_downloads_subtasks_present",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/templatetags/__init__.py": {},
    "concent-master/concent_api/core/tests/test_auth_accept_or_reject_results.py": {
        "AuthAcceptOrRejectIntegrationTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_provider_forces_subtask_results_for_task_which_was_already_submitted_concent_should_refuse_with_correct_keys": {
            "name": "test_provider_forces_subtask_results_for_task_which_was_already_submitted_concent_should_refuse_with_correct_keys",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_requestor_should_receive_subtask_results_from_concent_with_correct_keys": {
            "name": "test_requestor_should_receive_subtask_results_from_concent_with_correct_keys",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_accepted_and_concent_should_return_it_to_provider_with_correct_keys": {
            "name": "test_requestor_sends_subtask_results_accepted_and_concent_should_return_it_to_provider_with_correct_keys",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_rejected_and_concent_should_return_it_to_provider_with_correct_keys": {
            "name": "test_requestor_sends_subtask_results_rejected_and_concent_should_return_it_to_provider_with_correct_keys",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_with_correct_keys": {
            "name": "test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_with_correct_keys",
            "location": 821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthAcceptOrRejectIntegrationTest.test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_different_configuration_with_correct_keys": {
            "name": "test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_different_configuration_with_correct_keys",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_auth_force_payment.py": {
        "AuthForcePaymentIntegrationTest.test_provider_send_force_payment_and_concent_should_return_it_to_requestor_with_correct_keys": {
            "name": "test_provider_send_force_payment_and_concent_should_return_it_to_requestor_with_correct_keys",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_auth_get_task_result.py": {
        "AuthGetTaskResultIntegrationTest.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthGetTaskResultIntegrationTest.test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_already_sent_message_should_work_only_with_correct_keys": {
            "name": "test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_already_sent_message_should_work_only_with_correct_keys",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthGetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_submit_should_work_only_with_correct_keys": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_submit_should_work_only_with_correct_keys",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthGetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_finish_upload_should_work_only_with_correct_keys": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_finish_upload_should_work_only_with_correct_keys",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthGetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_uploads_bad_files_should_work_only_with_correct_keys": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_uploads_bad_files_should_work_only_with_correct_keys",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthGetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_task_result_should_work_only_with_correct_keys": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_task_result_should_work_only_with_correct_keys",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_auth_report_computed_task.py": {
        "AuthReportComputedTaskIntegrationTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_acknowledgement_should_work_only_with_correct_keys": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_acknowledgement_should_work_only_with_correct_keys",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_failed_computation_should_work_only_with_correct_keys": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_failed_computation_should_work_only_with_correct_keys",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_exceeded_deadline_should_work_only_with_correct_keys": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_exceeded_deadline_should_work_only_with_correct_keys",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_does_not_respond_should_work_only_with_correct_keys": {
            "name": "test_provider_forces_computed_task_report_and_requestor_does_not_respond_should_work_only_with_correct_keys",
            "location": 948,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_core_views.py": {
        "CoreViewSendTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_accept_valid_message": {
            "name": "test_send_should_accept_valid_message",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_200_if_message_timeout": {
            "name": "test_send_should_return_http_200_if_message_timeout",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_accept_valid_message_with_non_numeric_task_id": {
            "name": "test_send_should_accept_valid_message_with_non_numeric_task_id",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_data_is_incorrect": {
            "name": "test_send_should_return_http_400_if_data_is_incorrect",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_subtask_id_already_use": {
            "name": "test_send_should_return_http_400_if_subtask_id_already_use",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_202_if_task_id_already_in_use_but_subtask_id_differs_for_the_same_requestor": {
            "name": "test_send_should_return_http_202_if_task_id_already_in_use_but_subtask_id_differs_for_the_same_requestor",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_get_invalid_type_of_message": {
            "name": "test_send_should_return_http_400_if_get_invalid_type_of_message",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_task_to_compute_deadline_exceeded": {
            "name": "test_send_should_return_http_400_if_task_to_compute_deadline_exceeded",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_reject_message_save_as_receive_out_of_band_status": {
            "name": "test_send_reject_message_save_as_receive_out_of_band_status",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_reject_message_when_timestamp_too_old": {
            "name": "test_send_should_reject_message_when_timestamp_too_old",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_reject_message_when_timestamp_too_far_in_future": {
            "name": "test_send_should_reject_message_when_timestamp_too_far_in_future",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_task_to_compute_deadline_is_not_an_integer": {
            "name": "test_send_should_return_http_400_if_task_to_compute_deadline_is_not_an_integer",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_202_if_task_to_compute_deadline_is_correct": {
            "name": "test_send_should_return_http_202_if_task_to_compute_deadline_is_correct",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_task_to_compute_without_public_key_should_return_http_400": {
            "name": "test_send_task_to_compute_without_public_key_should_return_http_400",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_task_to_compute_with_public_key_with_wrong_length_should_return_http_400": {
            "name": "test_send_task_to_compute_with_public_key_with_wrong_length_should_return_http_400",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_error_in_golem_messages_should_be_logged_and_return_http_400_with_the_same_uuid": {
            "name": "test_error_in_golem_messages_should_be_logged_and_return_http_400_with_the_same_uuid",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_with_empty_data_should_return_http_400_error": {
            "name": "test_send_with_empty_data_should_return_http_400_error",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewSendTest.test_send_should_return_http_400_if_task_to_compute_younger_than_report_computed": {
            "name": "test_send_should_return_http_400_if_task_to_compute_younger_than_report_computed",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveTest.setUp": {
            "name": "setUp",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveTest.test_receive_should_accept_valid_message": {
            "name": "test_receive_should_accept_valid_message",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveTest.test_receive_return_http_204_if_no_messages_in_database": {
            "name": "test_receive_return_http_204_if_no_messages_in_database",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveTest.test_receive_should_return_first_messages_in_order_they_were_added_to_queue_if_the_receive_queue_contains_only_force_report_and_its_past_deadline": {
            "name": "test_receive_should_return_first_messages_in_order_they_were_added_to_queue_if_the_receive_queue_contains_only_force_report_and_its_past_deadline",
            "location": 713,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveOutOfBandTest.setUp": {
            "name": "setUp",
            "location": 859,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveOutOfBandTest.test_view_receive_out_of_band_should_accept_valid_message": {
            "name": "test_view_receive_out_of_band_should_accept_valid_message",
            "location": 974,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreViewReceiveOutOfBandTest.test_view_receive_out_of_band_return_http_204_if_no_messages_in_database": {
            "name": "test_view_receive_out_of_band_return_http_204_if_no_messages_in_database",
            "location": 982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentProtocolVersionTest.setUp": {
            "name": "setUp",
            "location": 999,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentProtocolVersionTest.test_that_concent_should_refuse_request_with_incompatible_protocol_version": {
            "name": "test_that_concent_should_refuse_request_with_incompatible_protocol_version",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentProtocolVersionTest.test_that_concent_should_accept_request_without_protocol_version": {
            "name": "test_that_concent_should_accept_request_without_protocol_version",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentProtocolVersionTest.test_that_send_should_response_http404_if_all_stored_messages_have_incompatible_protocol_version": {
            "name": "test_that_send_should_response_http404_if_all_stored_messages_have_incompatible_protocol_version",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentProtocolVersionTest.test_that_receive_should_return_http_204_if_stored_messages_in_database_have_incompatible_protocol_version": {
            "name": "test_that_receive_should_return_http_204_if_stored_messages_in_database_have_incompatible_protocol_version",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_endpoint_protocol_constants.py": {
        "ProtocolConstantsTest.test_protocol_constants_should_return_values_from_settings": {
            "name": "test_protocol_constants_should_return_values_from_settings",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_accept_or_reject_results.py": {
        "AcceptOrRejectIntegrationTest.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_provider_forces_subtask_results_for_task_which_was_already_submitted_concent_should_refuse": {
            "name": "test_provider_forces_subtask_results_for_task_which_was_already_submitted_concent_should_refuse",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_provider_forces_subtask_results_with_not_enough_funds_on_this_account_concent_should_refuse": {
            "name": "test_provider_forces_subtask_results_with_not_enough_funds_on_this_account_concent_should_refuse",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_provider_forces_subtask_results_but_it_was_sent_to_too_late_or_too_soon_concent_should_reject": {
            "name": "test_provider_forces_subtask_results_but_it_was_sent_to_too_late_or_too_soon_concent_should_reject",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_should_receive_subtask_results_from_concent": {
            "name": "test_requestor_should_receive_subtask_results_from_concent",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_should_not_receive_correct_subtask_results_from_concent_if_asked_concent_after_deadline": {
            "name": "test_requestor_should_not_receive_correct_subtask_results_from_concent_if_asked_concent_after_deadline",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_accepted_and_concent_should_return_it_to_provider": {
            "name": "test_requestor_sends_subtask_results_accepted_and_concent_should_return_it_to_provider",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_rejected_and_concent_should_return_it_to_provider": {
            "name": "test_requestor_sends_subtask_results_rejected_and_concent_should_return_it_to_provider",
            "location": 722,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_acceptance_but_provider_does_not_submitted_force_subtask_results_concent_should_reject_it": {
            "name": "test_requestor_sends_subtask_results_acceptance_but_provider_does_not_submitted_force_subtask_results_concent_should_reject_it",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_sends_subtask_results_rejection_but_provider_does_not_submitted_force_subtask_results_concent_should_reject_it": {
            "name": "test_requestor_sends_subtask_results_rejection_but_provider_does_not_submitted_force_subtask_results_concent_should_reject_it",
            "location": 963,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_provider_sends_messages_with_wrong_timestamps_concent_should_reject_them": {
            "name": "test_provider_sends_messages_with_wrong_timestamps_concent_should_reject_them",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_sends_messages_with_wrong_timestamps_concent_should_return_http_400": {
            "name": "test_requestor_sends_messages_with_wrong_timestamps_concent_should_return_http_400",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent": {
            "name": "test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent",
            "location": 1259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_different_configuration": {
            "name": "test_requestor_doesnt_provide_response_should_end_with_subtask_results_settled_received_from_concent_different_configuration",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_send_again_subtask_results_accepted_or_rejected_when_message_already_accepted_concent_should_return_http_400": {
            "name": "test_requestor_send_again_subtask_results_accepted_or_rejected_when_message_already_accepted_concent_should_return_http_400",
            "location": 1596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_send_again_subtask_results_accepted_or_rejected_when_message_already_rejected_concent_should_return_http_400": {
            "name": "test_requestor_send_again_subtask_results_accepted_or_rejected_when_message_already_rejected_concent_should_return_http_400",
            "location": 1691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_requestor_send_force_subtask_results_response_without_accepted_or_rejected_should_return_http_400": {
            "name": "test_requestor_send_force_subtask_results_response_without_accepted_or_rejected_should_return_http_400",
            "location": 1784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_that_force_subtask_results_response_with_no_subtask_results_rejected_or_accepted_should_return_http400": {
            "name": "test_that_force_subtask_results_response_with_no_subtask_results_rejected_or_accepted_should_return_http400",
            "location": 1812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptOrRejectIntegrationTest.test_that_force_subtask_results_response_with_both_subtask_results_rejected_and_accepted_should_return_http400": {
            "name": "test_that_force_subtask_results_response_with_both_subtask_results_rejected_and_accepted_should_return_http400",
            "location": 1817,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_force_payment.py": {
        "ForcePaymentIntegrationTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_subtask_results_accepted_signed_by_different_requestors_concent_should_refuse": {
            "name": "test_provider_send_force_payment_with_subtask_results_accepted_signed_by_different_requestors_concent_should_refuse",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_subtask_results_accepted_not_signed": {
            "name": "test_provider_send_force_payment_with_subtask_results_accepted_not_signed",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_subtask_results_accepted_where_ethereum_accounts_are_different_concent_should_refuse": {
            "name": "test_provider_send_force_payment_with_subtask_results_accepted_where_ethereum_accounts_are_different_concent_should_refuse",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_that_if_provider_sends_force_payment_with_two_different_provider_ethereum_accounts_concent_should_refuse": {
            "name": "test_that_if_provider_sends_force_payment_with_two_different_provider_ethereum_accounts_concent_should_refuse",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_no_value_to_be_paid_concent_should_reject": {
            "name": "test_provider_send_force_payment_with_no_value_to_be_paid_concent_should_reject",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_that_if_requestor_does_not_have_funds_concent_responds_with_service_refused": {
            "name": "test_that_if_requestor_does_not_have_funds_concent_responds_with_service_refused",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_correct_force_payment_concent_should_accept": {
            "name": "test_provider_send_correct_force_payment_concent_should_accept",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_that_when_provider_sends_force_payment_too_early_concent_responds_with_force_payment_rejected": {
            "name": "test_that_when_provider_sends_force_payment_too_early_concent_responds_with_force_payment_rejected",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_subtask_results_accepted_list_as_single_message_concent_should_return_http_400": {
            "name": "test_provider_send_force_payment_with_subtask_results_accepted_list_as_single_message_concent_should_return_http_400",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_empty_subtask_results_accepted_list_concent_should_return_http_400": {
            "name": "test_provider_send_force_payment_with_empty_subtask_results_accepted_list_concent_should_return_http_400",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_provider_send_force_payment_with_same_subtasks_id_concent_should_refuse": {
            "name": "test_provider_send_force_payment_with_same_subtasks_id_concent_should_refuse",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForcePaymentIntegrationTest.test_sum_of_payments_when_lists_of_transactions_from_payment_api_are_empty": {
            "name": "test_sum_of_payments_when_lists_of_transactions_from_payment_api_are_empty",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_get_task_result.py": {
        "GetTaskResultIntegrationTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_exceeded_time_for_download": {
            "name": "test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_exceeded_time_for_download",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_that_requestor_forces_get_task_result_and_concent_should_immediately_sends_rejection_because_message_is_sent_too_late": {
            "name": "test_that_requestor_forces_get_task_result_and_concent_should_immediately_sends_rejection_because_message_is_sent_too_late",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_that_requestor_forces_get_task_result_and_concent_should_answer_ack_force_get_task_result_if_all_timestamps_are_equal": {
            "name": "test_that_requestor_forces_get_task_result_and_concent_should_answer_ack_force_get_task_result_if_all_timestamps_are_equal",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_already_sent_message": {
            "name": "test_requestor_forces_get_task_result_and_concent_immediately_sends_rejection_due_to_already_sent_message",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_requestor_forces_get_task_result_and_concent_immediately_sends_acknowledgement": {
            "name": "test_requestor_forces_get_task_result_and_concent_immediately_sends_acknowledgement",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_submit": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_submit",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_finish_upload": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_does_not_finish_upload",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_force_get_task_upload_because_file_already_uploaded": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_force_get_task_upload_because_file_already_uploaded",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_uploads_bad_files": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_failure_because_provider_uploads_bad_files",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetTaskResultIntegrationTest.test_concent_requests_task_result_from_provider_and_requestor_receives_task_result": {
            "name": "test_concent_requests_task_result_from_provider_and_requestor_receives_task_result",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_report_computed_task.py": {
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_concent_immediately_sends_rejection_due_to_exceeded_deadline": {
            "name": "test_provider_forces_computed_task_report_and_concent_immediately_sends_rejection_due_to_exceeded_deadline",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_with_dealine_as_float_and_it_is_accepted": {
            "name": "test_provider_forces_computed_task_report_with_dealine_as_float_and_it_is_accepted",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_acknowledgement": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_acknowledgement",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_failed_computation": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_failed_computation",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_exceeded_deadline": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_exceeded_deadline",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_does_not_respond": {
            "name": "test_provider_forces_computed_task_report_and_requestor_does_not_respond",
            "location": 659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_twice_and_concent_returns_400_error": {
            "name": "test_provider_forces_computed_task_report_twice_and_concent_returns_400_error",
            "location": 813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_ack_report_computed_task_but_provider_did_not_ask_for_it": {
            "name": "test_requestor_sends_ack_report_computed_task_but_provider_did_not_ask_for_it",
            "location": 894,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_reject_report_computed_task_but_provider_did_not_ask_for_it": {
            "name": "test_requestor_sends_reject_report_computed_task_but_provider_did_not_ask_for_it",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_ack_report_computed_task_and_then_sends_reject_report_computed_task": {
            "name": "test_requestor_sends_ack_report_computed_task_and_then_sends_reject_report_computed_task",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_reject_report_computed_task_and_then_sends_ack_report_computed_task": {
            "name": "test_requestor_sends_reject_report_computed_task_and_then_sends_ack_report_computed_task",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_ack_report_computed_task_after_deadline_passed": {
            "name": "test_requestor_sends_ack_report_computed_task_after_deadline_passed",
            "location": 1301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_wrong_reject_report_computed_task_multiple_time": {
            "name": "test_requestor_sends_wrong_reject_report_computed_task_multiple_time",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_missing_key_returns_400_error": {
            "name": "test_provider_forces_computed_task_report_missing_key_returns_400_error",
            "location": 1615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_bad_key_returns_400_error": {
            "name": "test_provider_forces_computed_task_report_bad_key_returns_400_error",
            "location": 1662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_truncated_key_returns_400_error": {
            "name": "test_provider_forces_computed_task_report_truncated_key_returns_400_error",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_empty_key_returns_400_error": {
            "name": "test_provider_forces_computed_task_report_empty_key_returns_400_error",
            "location": 1759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_requestor_sends_reject_report_computed_task_with_message_task_to_compute": {
            "name": "test_requestor_sends_reject_report_computed_task_with_message_task_to_compute",
            "location": 1806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_sends_force_report_computed_task_with_a_cut_message": {
            "name": "test_provider_sends_force_report_computed_task_with_a_cut_message",
            "location": 1847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_sends_force_report_computed_task_with_malformed_message": {
            "name": "test_provider_sends_force_report_computed_task_with_malformed_message",
            "location": 1890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_tries_to_receive_after_deadline": {
            "name": "test_provider_forces_computed_task_report_and_tries_to_receive_after_deadline",
            "location": 1935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_tries_to_receive_twice": {
            "name": "test_provider_forces_computed_task_report_and_tries_to_receive_twice",
            "location": 2096,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_tries_to_receive_ack_before_requestor_have_a_chance_to_respond_concent_should_return_http_204": {
            "name": "test_provider_forces_computed_task_report_and_tries_to_receive_ack_before_requestor_have_a_chance_to_respond_concent_should_return_http_204",
            "location": 2270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_task_failure": {
            "name": "test_provider_forces_computed_task_report_and_requestor_sends_rejection_due_to_task_failure",
            "location": 2378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_that_message_report_computed_task_in_database_is_replaced_when_requestor_send_diffrent_report_computed_task": {
            "name": "test_that_message_report_computed_task_in_database_is_replaced_when_requestor_send_diffrent_report_computed_task",
            "location": 2543,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportComputedTaskIntegrationTest.test_provider_forces_computed_task_with_non_positive_price_concnet_returns_service_refused": {
            "name": "test_provider_forces_computed_task_with_non_positive_price_concnet_returns_service_refused",
            "location": 2705,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_subtask_results_verify.py": {
        "SubtaskResultsVerifyIntegrationTest.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_verification_for_this_subtask_is_duplicated": {
            "name": "test_that_concent_responds_with_service_refused_when_verification_for_this_subtask_is_duplicated",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_verification_received_in_accepted_state": {
            "name": "test_that_concent_responds_with_service_refused_when_verification_received_in_accepted_state",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_verification_received_in_failed_state": {
            "name": "test_that_concent_responds_with_service_refused_when_verification_received_in_failed_state",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_request_arrives_too_late": {
            "name": "test_that_concent_responds_with_service_refused_when_request_arrives_too_late",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_too_small_requestor_deposit_when_requestor_does_not_have_funds": {
            "name": "test_that_concent_responds_with_too_small_requestor_deposit_when_requestor_does_not_have_funds",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_too_small_provider_deposit_when_provider_does_not_have_funds": {
            "name": "test_that_concent_responds_with_too_small_provider_deposit_when_provider_does_not_have_funds",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_requestor_does_not_complain_about_verification": {
            "name": "test_that_concent_responds_with_service_refused_when_requestor_does_not_complain_about_verification",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_service_refused_when_subtask_results_rejected_not_issued_by_requestor": {
            "name": "test_that_concent_responds_with_service_refused_when_subtask_results_rejected_not_issued_by_requestor",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_responds_with_http400_when_unsupported_blender_output_format_is_given": {
            "name": "test_that_concent_responds_with_http400_when_unsupported_blender_output_format_is_given",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concet_responds_with_http400_when_request_has_invalid_concent_promissary_note": {
            "name": "test_that_concet_responds_with_http400_when_request_has_invalid_concent_promissary_note",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_accepts_valid_request_and_sends_verification_order_to_work_queue": {
            "name": "test_that_concent_accepts_valid_request_and_sends_verification_order_to_work_queue",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_should_change_subtask_state_if_verification_is_after_deadline": {
            "name": "test_that_concent_should_change_subtask_state_if_verification_is_after_deadline",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest.test_that_concent_should_change_subtask_state_to_failed_if_files_were_not_uploaded_on_time": {
            "name": "test_that_concent_should_change_subtask_state_to_failed_if_files_were_not_uploaded_on_time",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest._prepare_subtask_results_verify": {
            "name": "_prepare_subtask_results_verify",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "serialized_subtask_results_verify": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest._prepare_file_transfer_token": {
            "name": "_prepare_file_transfer_token",
            "location": 670,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_verify": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest._create_serialized_subtask_results_verify": {
            "name": "_create_serialized_subtask_results_verify",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "reason_of_rejection": [],
                "time_offset": [],
                "key": [],
                "key_for_promissary_note": []
            }
        },
        "SubtaskResultsVerifyIntegrationTest._create_report_computed_task": {
            "name": "_create_report_computed_task",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "blender_output_format": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_integration_version_compatibility.py": {
        "_get_pending_messages_query": {
            "name": "_get_pending_messages_query",
            "location": 12,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "client_public_key": [],
                "golem_message_version": []
            }
        },
        "VersionCompatibilityIntegrationTest.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionCompatibilityIntegrationTest.test_that_client_with_undelivered_messages_from_older_golem_messages_version_will_receive_messages_from_version_which_is_supported": {
            "name": "test_that_client_with_undelivered_messages_from_older_golem_messages_version_will_receive_messages_from_version_which_is_supported",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_payments_bankster.py": {
        "ClaimDepositBanksterTest.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimDepositBanksterTest.test_that_claim_deposit_return_deposit_claims_if_both_requestor_and_provider_have_enough_funds": {
            "name": "test_that_claim_deposit_return_deposit_claims_if_both_requestor_and_provider_have_enough_funds",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimDepositBanksterTest.test_that_claim_deposit_return_only_requestors_deposit_claim_if_requestor_has_enough_funds_and_it_is_not_additional_verification": {
            "name": "test_that_claim_deposit_return_only_requestors_deposit_claim_if_requestor_has_enough_funds_and_it_is_not_additional_verification",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimDepositBanksterTest.test_that_claim_deposit_return_nones_if_requestor_has_zero_funds": {
            "name": "test_that_claim_deposit_return_nones_if_requestor_has_zero_funds",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimDepositBanksterTest.test_that_claim_deposit_return_none_for_provider_if_additional_verification_cost_is_zero": {
            "name": "test_that_claim_deposit_return_none_for_provider_if_additional_verification_cost_is_zero",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimDepositBanksterTest.test_that_claim_deposit_return_none_for_provider_if_provider_has_less_funds_than_needed": {
            "name": "test_that_claim_deposit_return_none_for_provider_if_provider_has_less_funds_than_needed",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.setUp": {
            "name": "setUp",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.test_that_when_available_funds_are_zero_finalize_payment_should_delete_deposit_claim_and_return_none": {
            "name": "test_that_when_available_funds_are_zero_finalize_payment_should_delete_deposit_claim_and_return_none",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.test_that_when_deposit_claim_is_for_forced_acceptance_use_case_finalize_payment_should_call_force_subtask_payment": {
            "name": "test_that_when_deposit_claim_is_for_forced_acceptance_use_case_finalize_payment_should_call_force_subtask_payment",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.test_that_when_deposit_claim_is_for_additional_verification_use_case_finalize_payment_should_call_cover_additional_verification_cost": {
            "name": "test_that_when_deposit_claim_is_for_additional_verification_use_case_finalize_payment_should_call_cover_additional_verification_cost",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.test_that_when_there_are_other_deposit_claims_finalize_payment_substract_them_from_currently_processed_claim": {
            "name": "test_that_when_there_are_other_deposit_claims_finalize_payment_substract_them_from_currently_processed_claim",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinalizePaymentBanksterTest.create_n_deposits_with_subtasks": {
            "name": "create_n_deposits_with_subtasks",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "amount": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.setUp": {
            "name": "setUp",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.create_subtask_results_accepted_list": {
            "name": "create_subtask_results_accepted_list",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "price": [],
                "number_of_items": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.create_client_and_related_deposit_account": {
            "name": "create_client_and_related_deposit_account",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.create_deposit_claim": {
            "name": "create_deposit_claim",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "tx_hash": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.call_settle_overdue_acceptances_with_mocked_sci_functions": {
            "name": "call_settle_overdue_acceptances_with_mocked_sci_functions",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "get_deposit_value_return_value": [],
                "get_list_of_payments_return_value": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.assert_mocked_sci_functions_were_called": {
            "name": "assert_mocked_sci_functions_were_called",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "get_list_of_payments_call_count": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_raise_no_unsettled_tasks_exception_when_all_tasks_are_paid_off": {
            "name": "test_that_settle_overdue_acceptances_should_raise_no_unsettled_tasks_exception_when_all_tasks_are_paid_off",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_raise_too_small_requestor_deposit_exception_when_requestor_has_insufficient_funds": {
            "name": "test_that_settle_overdue_acceptances_should_raise_too_small_requestor_deposit_exception_when_requestor_has_insufficient_funds",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_if_there_was_no_previous_settlement_transactions": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_if_there_was_no_previous_settlement_transactions",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_requesting_payment_for_multiple_subtasks": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_requesting_payment_for_multiple_subtasks",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_available_on_requestor_deposit_if_it_is_greater_then_left_amount": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_available_on_requestor_deposit_if_it_is_greater_then_left_amount",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_existing_claims": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_existing_claims",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_both_existing_claims_and_payments": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_both_existing_claims_and_payments",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_both_existing_claims_and_payments_with_the_same_transaction_hash": {
            "name": "test_that_settle_overdue_acceptances_should_return_claim_deposit_with_amount_paid_when_there_are_both_existing_claims_and_payments_with_the_same_transaction_hash",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettleOverdueAcceptancesBanksterTest.test_that_settle_overdue_acceptances_should_raise_exception_if_transaction_from_blockchain_will_not_match_database_claim": {
            "name": "test_that_settle_overdue_acceptances_should_raise_exception_if_transaction_from_blockchain_will_not_match_database_claim",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscardClaimBanksterTest.setUp": {
            "name": "setUp",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscardClaimBanksterTest.test_that_discard_claim_should_return_false_and_not_remove_deposit_claim_if_tx_hash_is_none": {
            "name": "test_that_discard_claim_should_return_false_and_not_remove_deposit_claim_if_tx_hash_is_none",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscardClaimBanksterTest.test_that_discard_claim_should_return_true_and_remove_deposit_claim_if_tx_hash_is_set": {
            "name": "test_that_discard_claim_should_return_true_and_remove_deposit_claim_if_tx_hash_is_set",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_payments_database_transaction_storage.py": {
        "_sign": {
            "name": "_sign",
            "location": 11,
            "return": [],
            "arguments": {
                "tx": []
            }
        },
        "DatabaseTransactionsStorageTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest._create_pending_ethereum_transaction": {
            "name": "_create_pending_ethereum_transaction",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest._create_transaction": {
            "name": "_create_transaction",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_initial_nonce_should_be_retreived_from_rpc": {
            "name": "test_that_initial_nonce_should_be_retreived_from_rpc",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_if_global_transaction_state_exists_nonce_should_be_retreived_from_it": {
            "name": "test_that_if_global_transaction_state_exists_nonce_should_be_retreived_from_it",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_get_all_tx_should_return_list_of_all_transactions": {
            "name": "test_that_get_all_tx_should_return_list_of_all_transactions",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_set_nonce_sign_and_save_tx_should_accept_transaction_and_increase_nonce": {
            "name": "test_that_set_nonce_sign_and_save_tx_should_accept_transaction_and_increase_nonce",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_set_nonce_sign_and_save_tx_should_fail_if_global_transaction_state_does_not_exist": {
            "name": "test_that_set_nonce_sign_and_save_tx_should_fail_if_global_transaction_state_does_not_exist",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_set_nonce_sign_and_save_tx_should_create_new_transaction_with_correct_nonce_if_nonce_does_not_match": {
            "name": "test_that_set_nonce_sign_and_save_tx_should_create_new_transaction_with_correct_nonce_if_nonce_does_not_match",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_put_tx_first_and_then_get_all_tx_returns_exactly_same_transaction_object": {
            "name": "test_that_put_tx_first_and_then_get_all_tx_returns_exactly_same_transaction_object",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_remove_tx_should_remove_transaction_with_given_nonce": {
            "name": "test_that_remove_tx_should_remove_transaction_with_given_nonce",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_remove_tx_should_not_fail_when_removing_transaction_with_nonce_that_does_not_exist": {
            "name": "test_that_remove_tx_should_not_fail_when_removing_transaction_with_nonce_that_does_not_exist",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_revert_last_tx_should_remove_last_transaction": {
            "name": "test_that_revert_last_tx_should_remove_last_transaction",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_revert_last_tx_should_not_fail_when_reverting_transaction_with_nonce_that_does_not_exist": {
            "name": "test_that_revert_last_tx_should_not_fail_when_reverting_transaction_with_nonce_that_does_not_exist",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_revert_last_tx_should_fail_if_global_transaction_state_does_not_exist": {
            "name": "test_that_revert_last_tx_should_fail_if_global_transaction_state_does_not_exist",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_maximum_values_works_correctly_with_pending_ethereum_transaction_database_model": {
            "name": "test_that_maximum_values_works_correctly_with_pending_ethereum_transaction_database_model",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_function_is_storage_initialized_return_true_if_storage_is_initialized": {
            "name": "test_that_function_is_storage_initialized_return_true_if_storage_is_initialized",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_function_is_storage_initialized_return_false_if_storage_is_not_initialized": {
            "name": "test_that_function_is_storage_initialized_return_false_if_storage_is_not_initialized",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_init_with_nonce_function_works_properly": {
            "name": "test_that_init_with_nonce_function_works_properly",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTransactionsStorageTest.test_that_storage_init_function_increase_nonce_if_is_lower_than_network_nonce": {
            "name": "test_that_storage_init_function_increase_nonce_if_is_lower_than_network_nonce",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_payments_sci_backend.py": {
        "SCIBackendTest.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_if_number_of_blocks_from_timestamp_is_smaller_than_required_confs_empty_list_is_returned": {
            "name": "test_that_if_number_of_blocks_from_timestamp_is_smaller_than_required_confs_empty_list_is_returned",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_list_of_payments_should_return_list_of_settlement_payments": {
            "name": "test_that_sci_backend_get_list_of_payments_should_return_list_of_settlement_payments",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_list_of_payments_should_return_list_of_batch_transfers": {
            "name": "test_that_sci_backend_get_list_of_payments_should_return_list_of_batch_transfers",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_list_of_payments_should_return_list_of_forced_subtask_payments": {
            "name": "test_that_sci_backend_get_list_of_payments_should_return_list_of_forced_subtask_payments",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_make_settlement_payment_to_provider_should_return_transaction_hash": {
            "name": "test_that_sci_backend_make_settlement_payment_to_provider_should_return_transaction_hash",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_make_settlement_payment_to_provider_should_pay_at_least_requestor_account_balance": {
            "name": "test_that_sci_backend_make_settlement_payment_to_provider_should_pay_at_least_requestor_account_balance",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_transaction_count_should_return_transaction_count": {
            "name": "test_that_sci_backend_get_transaction_count_should_return_transaction_count",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_deposit_value_should_return_deposit_value": {
            "name": "test_that_sci_backend_get_deposit_value_should_return_deposit_value",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_force_subtask_payment_should_return_transaction_hash": {
            "name": "test_that_sci_backend_force_subtask_payment_should_return_transaction_hash",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_cover_additional_verification_cost_should_return_transaction_hash": {
            "name": "test_that_sci_backend_cover_additional_verification_cost_should_return_transaction_hash",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_handle_sci_synchronization_raise_custom_exception_if_not_sync": {
            "name": "test_handle_sci_synchronization_raise_custom_exception_if_not_sync",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_handle_sci_synchronization_returns_empty_list_on_specific_value_error": {
            "name": "test_handle_sci_synchronization_returns_empty_list_on_specific_value_error",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_handle_sci_synchronization_raises_not_specific_value_error": {
            "name": "test_that_handle_sci_synchronization_raises_not_specific_value_error",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_handle_sci_synchronization_does_not_catch_other_exceptions": {
            "name": "test_that_handle_sci_synchronization_does_not_catch_other_exceptions",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_that_sci_backend_get_covered_additional_verification_costs_should_return_list_of_payments": {
            "name": "test_that_sci_backend_get_covered_additional_verification_costs_should_return_list_of_payments",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCIBackendTest.test_handle_sci_synchronization_raise_custom_exception_if_not_sync.dummy_handle_exception_if_sci_not_synchronized": {
            "name": "dummy_handle_exception_if_sci_not_synchronized",
            "location": 391,
            "return": [],
            "arguments": {}
        },
        "SCIBackendTest.test_handle_sci_synchronization_returns_empty_list_on_specific_value_error.dummy_handle_exception_if_sci_not_synchronized": {
            "name": "dummy_handle_exception_if_sci_not_synchronized",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "SCIBackendTest.test_that_handle_sci_synchronization_raises_not_specific_value_error.dummy_handle_exception_if_sci_not_synchronized": {
            "name": "dummy_handle_exception_if_sci_not_synchronized",
            "location": 424,
            "return": [],
            "arguments": {}
        },
        "SCIBackendTest.test_that_handle_sci_synchronization_does_not_catch_other_exceptions.dummy_handle_exception_if_sci_not_synchronized": {
            "name": "dummy_handle_exception_if_sci_not_synchronized",
            "location": 441,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/core/tests/test_payments_sci_callback.py": {
        "SCICallbackTest.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest._create_transaction_signing_request": {
            "name": "_create_transaction_signing_request",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest._create_signed_transaction": {
            "name": "_create_signed_transaction",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest._create_unsigned_transaction": {
            "name": "_create_unsigned_transaction",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_sign_transaction": {
            "name": "test_that_sci_callback_should_sign_transaction",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_sign_transaction_after_two_retries": {
            "name": "test_that_sci_callback_should_sign_transaction_after_two_retries",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_on_timeout": {
            "name": "test_that_sci_callback_should_raise_exception_on_timeout",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_on_receiving_invalid_middleman_protocol_message": {
            "name": "test_that_sci_callback_should_raise_exception_on_receiving_invalid_middleman_protocol_message",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_on_receiving_invalid_golem_message": {
            "name": "test_that_sci_callback_should_raise_exception_on_receiving_invalid_golem_message",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_golem_message_is_not_signed_by_signing_service": {
            "name": "test_that_sci_callback_should_raise_exception_when_golem_message_is_not_signed_by_signing_service",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_messages_request_ids_do_not_match": {
            "name": "test_that_sci_callback_should_raise_exception_when_messages_request_ids_do_not_match",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_response_is_error_frame": {
            "name": "test_that_sci_callback_should_raise_exception_when_response_is_error_frame",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_response_is_transaction_rejected": {
            "name": "test_that_sci_callback_should_raise_exception_when_response_is_transaction_rejected",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_response_is_not_signed_transaction_golem_message": {
            "name": "test_that_sci_callback_should_raise_exception_when_response_is_not_signed_transaction_golem_message",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_that_sci_callback_should_raise_exception_when_response_signature_is_not_correct": {
            "name": "test_that_sci_callback_should_raise_exception_when_response_signature_is_not_correct",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_retry_middleman_connection_returns_correct_value": {
            "name": "test_retry_middleman_connection_returns_correct_value",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.test_retry_middleman_connection_returns_error_after_timout": {
            "name": "test_retry_middleman_connection_returns_error_after_timout",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SCICallbackTest.setUp.iterator": {
            "name": "iterator",
            "location": 62,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "SCICallbackTest.test_retry_middleman_connection_returns_correct_value.dummy_send_request_to_middleman_returns_none_value": {
            "name": "dummy_send_request_to_middleman_returns_none_value",
            "location": 224,
            "return": [],
            "arguments": {
                "_middleman_message": []
            }
        },
        "SCICallbackTest.test_retry_middleman_connection_returns_error_after_timout.dummy_send_request_to_middleman_raise_timeout_errors": {
            "name": "dummy_send_request_to_middleman_raise_timeout_errors",
            "location": 232,
            "return": [],
            "arguments": {
                "_middleman_message": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_task_result_upload_finished.py": {
        "VerifierVerificationResultTaskTest.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_result_upload_finished_should_change_result_upload_finished_field_on_subtask": {
            "name": "test_that_result_upload_finished_should_change_result_upload_finished_field_on_subtask",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_result_upload_finished_should_raise_exception_for_non_existing_subtask": {
            "name": "test_that_result_upload_finished_should_raise_exception_for_non_existing_subtask",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_result_upload_finished_should_raise_exception_for_subtask_with_reported_state": {
            "name": "test_that_result_upload_finished_should_raise_exception_for_subtask_with_reported_state",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_result_upload_finished_should_raise_exception_for_subtask_with_failed_state": {
            "name": "test_that_result_upload_finished_should_raise_exception_for_subtask_with_failed_state",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_result_upload_finished_should_raise_exception_for_subtask_with_other_than_forcing_result_transfer_state": {
            "name": "test_that_result_upload_finished_should_raise_exception_for_subtask_with_other_than_forcing_result_transfer_state",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreResultUploadFinishedTaskTransactionTest.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoreResultUploadFinishedTaskTransactionTest.test_that_result_upload_finished_querying_locked_row_should_reschedule_task": {
            "name": "test_that_result_upload_finished_querying_locked_row_should_reschedule_task",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_task_verification_result.py": {
        "VerifierVerificationResultTaskTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_quering_for_subtask_with_accepted_state_should_log_warning_and_finish_task": {
            "name": "test_that_quering_for_subtask_with_accepted_state_should_log_warning_and_finish_task",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_quering_for_subtask_with_failed_state_should_log_error_and_finish_task": {
            "name": "test_that_quering_for_subtask_with_failed_state_should_log_error_and_finish_task",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_quering_for_subtask_with_other_than_additional_verification_state_should_log_error_and_finish_task": {
            "name": "test_that_quering_for_subtask_with_other_than_additional_verification_state_should_log_error_and_finish_task",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_verification_result_mismatch_should_add_pending_messages_subtask_results_rejected": {
            "name": "test_that_verification_result_mismatch_should_add_pending_messages_subtask_results_rejected",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_verification_result_error_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted": {
            "name": "test_that_verification_result_error_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_verification_result_match_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted": {
            "name": "test_that_verification_result_match_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTest.test_that_verification_result_after_deadline_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted": {
            "name": "test_that_verification_result_after_deadline_should_add_pending_messages_subtask_results_settled_and_change_subtask_state_to_accepted",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTransactionTest.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationResultTaskTransactionTest.test_that_verification_result_querying_locked_row_should_reschedule_task": {
            "name": "test_that_verification_result_querying_locked_row_should_reschedule_task",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerificationResultAssertionTest.setUp": {
            "name": "setUp",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerificationResultAssertionTest.test_that_assertion_in_verification_result_method_doesnt_rise_exception_when_empty_string_is_passed_in_error_message": {
            "name": "test_that_assertion_in_verification_result_method_doesnt_rise_exception_when_empty_string_is_passed_in_error_message",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerificationResultAssertionTest.test_that_assertion_in_verification_result_method_doesnt_rise_exception_when_empty_string_is_passed_in_error_code": {
            "name": "test_that_assertion_in_verification_result_method_doesnt_rise_exception_when_empty_string_is_passed_in_error_code",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_admin_tags.py": {
        "TestAdminTagsQuerySet.store_report_computed_task_as_subtask": {
            "name": "store_report_computed_task_as_subtask",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "current_time": [],
                "task_id": [],
                "deadline": [],
                "next_deadline": [],
                "subtask_state": []
            }
        },
        "TestAdminTagsQuerySet.test_that_longest_lasting_subtask_timestamp_is_qiven_when_subtasks_with_download_deadline_or_next_deadline_exists_in_database": {
            "name": "test_that_longest_lasting_subtask_timestamp_is_qiven_when_subtasks_with_download_deadline_or_next_deadline_exists_in_database",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdminTagsQuerySet.test_that_longest_lasting_subtask_timestamp_method_returns_none_when_empty_database_is_given": {
            "name": "test_that_longest_lasting_subtask_timestamp_method_returns_none_when_empty_database_is_given",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdminTagsQuerySet.test_that_get_time_until_concent_can_be_shut_down_method_returns_zero_when_empty_database_is_given": {
            "name": "test_that_get_time_until_concent_can_be_shut_down_method_returns_zero_when_empty_database_is_given",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdminTagsQuerySet.test_that_get_time_until_concent_can_be_shut_down_method_returns_time_when_not_outdated_tasks_are_in_database": {
            "name": "test_that_get_time_until_concent_can_be_shut_down_method_returns_time_when_not_outdated_tasks_are_in_database",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAdminTagsQuerySet.test_that_get_time_until_concent_can_be_shut_down_method_returns_zero_when_only_outdated_tasks_are_in_database": {
            "name": "test_that_get_time_until_concent_can_be_shut_down_method_returns_zero_when_only_outdated_tasks_are_in_database",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_authentication_utilities.py": {
        "LoadWithoutPublicKeyUnitTest.test_load_without_public_key_should_load_message": {
            "name": "test_load_without_public_key_should_load_message",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateGolemMessageSignedWithKeyUnitTest.test_validate_that_golem_messages_are_signed_with_key_should_not_raise_error_if_correct_message_and_key_is_used": {
            "name": "test_validate_that_golem_messages_are_signed_with_key_should_not_raise_error_if_correct_message_and_key_is_used",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateGolemMessageSignedWithKeyUnitTest.test_validate_that_golem_messages_are_signed_with_key_should_raise_error_if_incorrect_message_and_key_is_used": {
            "name": "test_validate_that_golem_messages_are_signed_with_key_should_raise_error_if_incorrect_message_and_key_is_used",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_validate_all_messages_identical_should_raise_error_when_not_list_is_used": {
            "name": "test_that_validate_all_messages_identical_should_raise_error_when_not_list_is_used",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_validate_all_messages_identical_should_raise_error_when_not_all_list_items_are_instances_of_task_to_compute": {
            "name": "test_that_validate_all_messages_identical_should_raise_error_when_not_all_list_items_are_instances_of_task_to_compute",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_function_raises_assertion_error_when_list_has_0_elements": {
            "name": "test_that_function_raises_assertion_error_when_list_has_0_elements",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_function_passes_when_list_has_1_elemt": {
            "name": "test_that_function_passes_when_list_has_1_elemt",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_validate_all_messages_identical_should_raise_http400_when_not_all_task_to_compute_are_identical": {
            "name": "test_that_validate_all_messages_identical_should_raise_http400_when_not_all_task_to_compute_are_identical",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidateListOfIdenticalTaskToComputeUnitTest.test_that_validate_all_messages_identical_should_not_raise_http400_when_all_task_to_compute_are_identical": {
            "name": "test_that_validate_all_messages_identical_should_not_raise_http400_when_all_task_to_compute_are_identical",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_custom_manager_queryset.py": {
        "store_report_computed_task_as_subtask": {
            "name": "store_report_computed_task_as_subtask",
            "location": 18,
            "return": [],
            "arguments": {
                "report_computed_task": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_subtask_verification_time_query_gives_correct_value": {
            "name": "test_that_subtask_verification_time_query_gives_correct_value",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "minimum_upload_rate": [],
                "download_leadin_time": [],
                "concent_messaging_time": [],
                "custom_protocol_times": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_subtask_verification_time_query_gives_correct_value_without_custom_protocol_times": {
            "name": "test_that_subtask_verification_time_query_gives_correct_value_without_custom_protocol_times",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_maximum_download_time_query_gives_correct_value": {
            "name": "test_that_maximum_download_time_query_gives_correct_value",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "minimum_upload_rate": [],
                "download_leadin_time": [],
                "concent_messaging_time": [],
                "custom_protocol_times": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_maximum_download_time_query_gives_correct_value_without_custom_protocol_times": {
            "name": "test_that_maximum_download_time_query_gives_correct_value_without_custom_protocol_times",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_download_deadline_query_gives_correct_value": {
            "name": "test_that_download_deadline_query_gives_correct_value",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "minimum_upload_rate": [],
                "download_leadin_time": [],
                "concent_messaging_time": [],
                "custom_protocol_times": []
            }
        },
        "TestSubtaskWithTimingColumnsManagerQuerySet.test_that_download_deadline_query_gives_correct_value_without_protocol_custom_times": {
            "name": "test_that_download_deadline_query_gives_correct_value_without_protocol_custom_times",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_message_handlers.py": {
        "TestMessageHandlers.test_that_function_returns_true_when_ids_are_diffrent": {
            "name": "test_that_function_returns_true_when_ids_are_diffrent",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageHandlers.test_that_function_returns_false_when_ids_are_the_same": {
            "name": "test_that_function_returns_false_when_ids_are_the_same",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskStoreAndUpdate.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskStoreAndUpdate.test_that_messages_are_stored_with_correct_timestamps": {
            "name": "test_that_messages_are_stored_with_correct_timestamps",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskStoreAndUpdate.test_that_update_subtask_passes_validations_from_passive_to_active_state": {
            "name": "test_that_update_subtask_passes_validations_from_passive_to_active_state",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskStoreAndUpdate.test_that_update_subtask_passes_validations_from_active_to_passive_state": {
            "name": "test_that_update_subtask_passes_validations_from_active_to_passive_state",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRejectReportComputedTask.test_that_validation_passes_if_correct_message_given": {
            "name": "test_that_validation_passes_if_correct_message_given",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRejectReportComputedTask.test_that_validation_raises_error_if_invalid_reason_instance_given": {
            "name": "test_that_validation_raises_error_if_invalid_reason_instance_given",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRejectReportComputedTask.test_that_validation_raises_error_if_reason_is_none": {
            "name": "test_that_validation_raises_error_if_reason_is_none",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCorrectMessageToForcePaymentHandler.test_that_force_payment_with_malformed_subtask_results_accepted_list_raises_assertion": {
            "name": "test_that_force_payment_with_malformed_subtask_results_accepted_list_raises_assertion",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_accepted_list": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_model.py": {
        "_get_data_list": {
            "name": "_get_data_list",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "store_report_computed_task_as_subtask": {
            "name": "store_report_computed_task_as_subtask",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "TestSubtaskModelValidation.test_that_storing_subtask_with_task_to_compute_nested_in_another_messages_will_not_raise_exception_when_messages_are_equal_or_not": {
            "name": "test_that_storing_subtask_with_task_to_compute_nested_in_another_messages_will_not_raise_exception_when_messages_are_equal_or_not",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": [],
                "report_computed_task": [],
                "ack_report_computed_task": [],
                "reject_report_computed_task": [],
                "force_get_task_result": [],
                "subtask_results_rejected": []
            }
        },
        "TestDepositAccountValidation.setUp": {
            "name": "setUp",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositAccountValidation.test_that_exception_is_not_raised_when_ethereum_address_has_valid_length": {
            "name": "test_that_exception_is_not_raised_when_ethereum_address_has_valid_length",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.setUp": {
            "name": "setUp",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_subtask_is_null_and_concent_use_case_is_not_forced_payment": {
            "name": "test_that_exception_is_raised_when_subtask_is_null_and_concent_use_case_is_not_forced_payment",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_not_raised_when_subtask_is_null_and_concent_use_case_is_forced_payment": {
            "name": "test_that_exception_is_not_raised_when_subtask_is_null_and_concent_use_case_is_forced_payment",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_payee_ethereum_address_is_the_same_as_payer_deposit_account_ethereum_address": {
            "name": "test_that_exception_is_raised_when_payee_ethereum_address_is_the_same_as_payer_deposit_account_ethereum_address",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_amount_is_equal_to_zero": {
            "name": "test_that_exception_is_raised_when_amount_is_equal_to_zero",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_amount_is_less_then_zero": {
            "name": "test_that_exception_is_raised_when_amount_is_less_then_zero",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_not_raised_when_amount_is_at_max_length": {
            "name": "test_that_exception_is_not_raised_when_amount_is_at_max_length",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_tx_hash_is_not_none_and_not_string": {
            "name": "test_that_exception_is_raised_when_tx_hash_is_not_none_and_not_string",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_closure_time_is_none_in_use_case_forced_payment": {
            "name": "test_that_exception_is_raised_when_closure_time_is_none_in_use_case_forced_payment",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_exception_is_raised_when_closure_time_is_set_in_use_case_other_than_forced_payment": {
            "name": "test_that_exception_is_raised_when_closure_time_is_set_in_use_case_other_than_forced_payment",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_no_exception_is_raised_when_tx_hash_is_none": {
            "name": "test_that_no_exception_is_raised_when_tx_hash_is_none",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_deposit_account_is_not_removed_when_deposit_claim_is_deleted": {
            "name": "test_that_deposit_account_is_not_removed_when_deposit_claim_is_deleted",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepositClaimValidation.test_that_no_exception_is_raised_when_deposit_claim_is_valid": {
            "name": "test_that_no_exception_is_raised_when_deposit_claim_is_valid",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolVersionValidationTest.setUp": {
            "name": "setUp",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolVersionValidationTest.store_message_with_custom_protocol_version": {
            "name": "store_message_with_custom_protocol_version",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "golem_message": [],
                "task_id": [],
                "subtask_id": []
            }
        },
        "ProtocolVersionValidationTest.test_that_incorrect_version_of_golem_messages_in_stored_message_should_raise_validation_error": {
            "name": "test_that_incorrect_version_of_golem_messages_in_stored_message_should_raise_validation_error",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_regex.py": {
        "TestRegexForValidUUID.test_that_regex_matches_uuid": {
            "name": "test_that_regex_matches_uuid",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_subtask_helpers.py": {
        "TestGetOneOrNoneSubtaskFromDatabase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_only_object_id_given_and_object_exist_function_returns_expected_object": {
            "name": "test_that_if_only_object_id_given_and_object_exist_function_returns_expected_object",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_more_conditions_given_and_object_exist_function_returns_expected_object": {
            "name": "test_that_if_more_conditions_given_and_object_exist_function_returns_expected_object",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_more_conditions_given_and_object_does_not_exist_function_returns_none": {
            "name": "test_that_if_more_conditions_given_and_object_does_not_exist_function_returns_none",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_only_object_id_given_and_queryset_exist_function_returns_expected_object": {
            "name": "test_that_if_only_object_id_given_and_queryset_exist_function_returns_expected_object",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_more_conditions_given_and_queryset_exist_function_returns_expected_object": {
            "name": "test_that_if_more_conditions_given_and_queryset_exist_function_returns_expected_object",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetOneOrNoneSubtaskFromDatabase.test_that_if_more_conditions_given_and_queryset_does_not_exist_function_returns_none": {
            "name": "test_that_if_more_conditions_given_and_queryset_does_not_exist_function_returns_none",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreAllStoredMessagesCompatibleWithProtocolVersion.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreAllStoredMessagesCompatibleWithProtocolVersion.test_that_if_stored_messages_are_compatible_with_protocol_version_function_should_return_true": {
            "name": "test_that_if_stored_messages_are_compatible_with_protocol_version_function_should_return_true",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreAllStoredMessagesCompatibleWithProtocolVersion.test_that_if_stored_messages_have_incompatible_protocol_version_function_should_return_false": {
            "name": "test_that_if_stored_messages_have_incompatible_protocol_version_function_should_return_false",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskStatesTransition.test_that_is_state_transition_possible_return_correct_values": {
            "name": "test_that_is_state_transition_possible_return_correct_values",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "from_": [],
                "to_": [],
                "expected": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_transfer_operation.py": {
        "FileTransferTokenCreationTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_file_transfer_token_for_concent_is_never_out_of_date": {
            "name": "test_that_file_transfer_token_for_concent_is_never_out_of_date",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_download_file_transfer_token_for_golem_client_is_can_be_out_of_date": {
            "name": "test_that_download_file_transfer_token_for_golem_client_is_can_be_out_of_date",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_upload_file_transfer_token_for_golem_client_is_can_be_out_of_date": {
            "name": "test_that_upload_file_transfer_token_for_golem_client_is_can_be_out_of_date",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_download_file_transfer_token_for_golem_client_is_created_with_deadline_as_float": {
            "name": "test_that_download_file_transfer_token_for_golem_client_is_created_with_deadline_as_float",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_upload_file_transfer_token_for_golem_client_is_created_with_deadline_as_string": {
            "name": "test_that_upload_file_transfer_token_for_golem_client_is_created_with_deadline_as_string",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest.test_that_unsupported_operation_type_causes_file_transfer_token_error_": {
            "name": "test_that_unsupported_operation_type_causes_file_transfer_token_error_",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest._get_deadline_exceeded_time_for_upload_token": {
            "name": "_get_deadline_exceeded_time_for_upload_token",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTransferTokenCreationTest._get_deadline_exceeded_time_for_download_token": {
            "name": "_get_deadline_exceeded_time_for_download_token",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_unit_validation.py": {
        "TestValidateGolemMessageSubtaskResultsRejected.test_that_exception_is_raised_when_subtask_results_rejected_is_of_wrong_type": {
            "name": "test_that_exception_is_raised_when_subtask_results_rejected_is_of_wrong_type",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateGolemMessageSubtaskResultsRejected.test_that_exception_is_raised_when_subtask_results_rejected_contains_invalid_task_to_compute": {
            "name": "test_that_exception_is_raised_when_subtask_results_rejected_contains_invalid_task_to_compute",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidatorsTest.test_that_function_raises_exception_when_ethereum_addres_has_wrong_type": {
            "name": "test_that_function_raises_exception_when_ethereum_addres_has_wrong_type",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidatorsTest.test_that_function_raises_exception_when_ethereum_addres_has_wrong_length": {
            "name": "test_that_function_raises_exception_when_ethereum_addres_has_wrong_length",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegerValidations.test_that_validate_positive_integer_function_raise_exception_when_wrong_value_given": {
            "name": "test_that_validate_positive_integer_function_raise_exception_when_wrong_value_given",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "error_code": []
            }
        },
        "TestIntegerValidations.test_that_validate_non_negative_integer_function_raise_exception_when_wrong_value_given": {
            "name": "test_that_validate_non_negative_integer_function_raise_exception_when_wrong_value_given",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "error_code": []
            }
        },
        "TestIntegerValidations.test_that_validate_positive_price_value_causes_non_positive_price_error": {
            "name": "test_that_validate_positive_price_value_causes_non_positive_price_error",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateAllMessagesIdentical.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateAllMessagesIdentical.test_that_function_pass_when_in_list_is_one_item": {
            "name": "test_that_function_pass_when_in_list_is_one_item",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateAllMessagesIdentical.test_that_function_pass_when_in_list_are_two_same_report_computed_task": {
            "name": "test_that_function_pass_when_in_list_are_two_same_report_computed_task",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateAllMessagesIdentical.test_that_function_raise_http400_when_any_slot_will_be_different_in_messages": {
            "name": "test_that_function_raise_http400_when_any_slot_will_be_different_in_messages",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateIdValue.test_that_function_should_pass_when_value_is_allowed": {
            "name": "test_that_function_should_pass_when_value_is_allowed",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "TestValidateIdValue.test_that_function_should_raise_exception_when_value_is_not_allowed": {
            "name": "test_that_function_should_raise_exception_when_value_is_not_allowed",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "TestValidateIdValue.test_that_function_should_raise_exception_when_type_is_not_allowed": {
            "name": "test_that_function_should_raise_exception_when_type_is_not_allowed",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "TestInvalidHashAlgorithms.test_that_validation_should_raise_exception_when_checksum_is_invalid": {
            "name": "test_that_validation_should_raise_exception_when_checksum_is_invalid",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.create_subtask_results_accepted_list": {
            "name": "create_subtask_results_accepted_list",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute_1": [],
                "task_to_compute_2": [],
                "subtask_1_signed_by": [],
                "subtask_2_signed_by": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_the_same_values_given_method_should_return_true": {
            "name": "test_that_if_the_same_values_given_method_should_return_true",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_different_requestor_ethereum_public_keys_are_given_method_should_return_false": {
            "name": "test_that_if_different_requestor_ethereum_public_keys_are_given_method_should_return_false",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_different_requestor_public_keys_are_given_method_should_return_false": {
            "name": "test_that_if_different_requestor_public_keys_are_given_method_should_return_false",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_different_provider_ethereum_addresses_are_given_method_should_return_false": {
            "name": "test_that_if_different_provider_ethereum_addresses_are_given_method_should_return_false",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_different_provider_public_keys_are_given_method_should_return_false": {
            "name": "test_that_if_different_provider_public_keys_are_given_method_should_return_false",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAreEthereumAddressesAndKeysUnique.test_that_if_messages_are_signed_by_different_requestors_method_should_return_false": {
            "name": "test_that_if_messages_are_signed_by_different_requestors_method_should_return_false",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFramesListValidation.test_that_list_of_ints_is_valid": {
            "name": "test_that_list_of_ints_is_valid",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFramesListValidation.test_that_if_frames_is_not_a_list_of_ints_method_should_raise_exception": {
            "name": "test_that_if_frames_is_not_a_list_of_ints_method_should_raise_exception",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFramesListValidation.test_that_if_frames_are_not_grater_than_0_method_should_raise_exception": {
            "name": "test_that_if_frames_are_not_grater_than_0_method_should_raise_exception",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFramesListValidation.test_that_if_frames_are_not_one_after_the_other_method_should_pass": {
            "name": "test_that_if_frames_are_not_one_after_the_other_method_should_pass",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFramesListValidation.test_that_if_frames_are_not_integers_method_should_raise_exception": {
            "name": "test_that_if_frames_are_not_integers_method_should_raise_exception",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateComputeTaskDef.setup": {
            "name": "setup",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateComputeTaskDef.test_that_valid_compute_task_def_doesnt_raise_any_exception": {
            "name": "test_that_valid_compute_task_def_doesnt_raise_any_exception",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateComputeTaskDef.test_that_mising_extra_data_causes_message_validation_error": {
            "name": "test_that_mising_extra_data_causes_message_validation_error",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateComputeTaskDef.test_that_missing_entries_in_extra_data_causes_message_validation_error": {
            "name": "test_that_missing_entries_in_extra_data_causes_message_validation_error",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "missing_data": []
            }
        },
        "TestValidateComputeTaskDef.test_that_wrong_field_types_causes_message_validation_error": {
            "name": "test_that_wrong_field_types_causes_message_validation_error",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "value_with_wrong_type": []
            }
        },
        "TestValidateSceneFile.test_that_wrong_scene_file_name_causes_validation_error": {
            "name": "test_that_wrong_scene_file_name_causes_validation_error",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "scene_file": []
            }
        },
        "TestValidateSceneFile.test_that_valid_scene_file_name_doesnt_raise_any_error": {
            "name": "test_that_valid_scene_file_name_doesnt_raise_any_error",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "scene_file": []
            }
        },
        "TestValidateTaskToCompute.setUp": {
            "name": "setUp",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateTaskToCompute.test_that_valid_task_to_compute_doesnt_raise_any_exception": {
            "name": "test_that_valid_task_to_compute_doesnt_raise_any_exception",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateTaskToCompute.test_that_other_messages_than_task_to_compute_causes_message_validation_error": {
            "name": "test_that_other_messages_than_task_to_compute_causes_message_validation_error",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateOutputFormat.test_that_valid_output_formats_dont_raise_any_exception": {
            "name": "test_that_valid_output_formats_dont_raise_any_exception",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "output_format": []
            }
        },
        "TestValidateOutputFormat.test_that_unsupported_format_raises_concent_validation_error": {
            "name": "test_that_unsupported_format_raises_concent_validation_error",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSceneResolution.test_that_invalid_resolution_value_raise_exception": {
            "name": "test_that_invalid_resolution_value_raise_exception",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "resolution": []
            }
        },
        "TestValidateSceneResolution.test_that_valid_resolution_value_doesnt_raise_exception": {
            "name": "test_that_valid_resolution_value_doesnt_raise_exception",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "resolution": []
            }
        },
        "TestValidateSceneUseCompositing.test_that_invalid_use_compositing_value_raise_exception": {
            "name": "test_that_invalid_use_compositing_value_raise_exception",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "use_compositing": []
            }
        },
        "TestValidateSceneUseCompositing.test_that_valid_use_compositing_value_doesnt_raise_exception": {
            "name": "test_that_valid_use_compositing_value_doesnt_raise_exception",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "use_compositing": []
            }
        },
        "TestValidateSceneSamples.test_that_invalid_samples_value_raise_exception": {
            "name": "test_that_invalid_samples_value_raise_exception",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "TestValidateSceneSamples.test_that_valid_samples_value_doesnt_raise_exception": {
            "name": "test_that_valid_samples_value_doesnt_raise_exception",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "TestValidateSceneCrop.create_crop_dict": {
            "name": "create_crop_dict",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "borders_x": [],
                "borders_y": []
            }
        },
        "TestValidateSceneCrop.test_that_valid_crops_value_doesnt_raise_exception": {
            "name": "test_that_valid_crops_value_doesnt_raise_exception",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "borders_x": [],
                "borders_y": []
            }
        },
        "TestValidateSceneCrop.test_that_invalid_borders_values_in_crops_dict_raise_exception": {
            "name": "test_that_invalid_borders_values_in_crops_dict_raise_exception",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "borders_x": [],
                "borders_y": []
            }
        },
        "TestValidateSceneCrop.test_that_invalid_crops_list_raise_exception": {
            "name": "test_that_invalid_crops_list_raise_exception",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "crops": []
            }
        },
        "TestValidateBlenderScriptParameters._create_blender_script_parameters": {
            "name": "_create_blender_script_parameters",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "resolution": [],
                "use_compositing": [],
                "samples": [],
                "crops": []
            }
        },
        "TestValidateBlenderScriptParameters.test_that_valid_extra_data_doesnt_raise_exception": {
            "name": "test_that_valid_extra_data_doesnt_raise_exception",
            "location": 659,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_use_compositing_validator": [],
                "mocked_samples_validator": [],
                "mocked_crops_validator": [],
                "mocked_resolution_validator": []
            }
        },
        "TestValidateBlenderScriptParameters.test_that_invalid_extra_data_raise_exception": {
            "name": "test_that_invalid_extra_data_raise_exception",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_use_compositing_validator": [],
                "mocked_samples_validator": [],
                "mocked_crops_validator": [],
                "mocked_resolution_validator": [],
                "field_to_delete": []
            }
        },
        "TestValidateSubtaskResultsVerify.setUp": {
            "name": "setUp",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSubtaskResultsVerify.test_that_correct_signature_doesnt_raise_any_exception": {
            "name": "test_that_correct_signature_doesnt_raise_any_exception",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSubtaskResultsVerify.test_that_incorrect_signature_raises_concent_validation_error": {
            "name": "test_that_incorrect_signature_raises_concent_validation_error",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSubtaskResultsVerify.test_that_wrong_deposit_address_raises_concent_validation_error": {
            "name": "test_that_wrong_deposit_address_raises_concent_validation_error",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskResultsRejectedValidator.test_that_no_reason_raise_validation_error": {
            "name": "test_that_no_reason_raise_validation_error",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskResultsRejectedValidator.test_that_message_with_verification_negative_reason_will_not_raise_exception": {
            "name": "test_that_message_with_verification_negative_reason_will_not_raise_exception",
            "location": 747,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskResultsRejectedValidator.test_that_message_with_force_resources_failure_and_force_get_task_result_failed_will_not_raise_exception": {
            "name": "test_that_message_with_force_resources_failure_and_force_get_task_result_failed_will_not_raise_exception",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubtaskResultsRejectedValidator.test_that_message_with_force_resources_failure_and_without_force_get_task_result_failed_will_raise_exception": {
            "name": "test_that_message_with_force_resources_failure_and_without_force_get_task_result_failed_will_raise_exception",
            "location": 757,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_upload_finished_task.py": {
        "UploadFinishedTaskTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFinishedTaskTest.test_that_scheduling_task_for_subtask_with_accepted_or_failed_or_additional_verification_state_should_log_warning_and_finish_task": {
            "name": "test_that_scheduling_task_for_subtask_with_accepted_or_failed_or_additional_verification_state_should_log_warning_and_finish_task",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFinishedTaskTest.test_that_scheduling_task_for_subtask_with_unexpected_state_should_log_error_and_finish_task": {
            "name": "test_that_scheduling_task_for_subtask_with_unexpected_state_should_log_error_and_finish_task",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFinishedTaskTest.test_that_scheduling_task_for_subtask_before_deadline_should_change_subtask_state_and_schedule_upload_acknowledged_task": {
            "name": "test_that_scheduling_task_for_subtask_before_deadline_should_change_subtask_state_and_schedule_upload_acknowledged_task",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFinishedTaskTest.test_that_scheduling_task_for_subtask_after_deadline_should_process_timeout": {
            "name": "test_that_scheduling_task_for_subtask_after_deadline_should_process_timeout",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/core/tests/test_utils.py": {
        "test_that_method_returns_correct_format_name": {
            "name": "test_that_method_returns_correct_format_name",
            "location": 216,
            "return": [],
            "arguments": {
                "output_format": [],
                "expected": []
            }
        },
        "CalculateMaximumDownloadTimeTestCase.test_that_calculate_maximum_download_time_will_call_maximum_download_time_when_custom_protocol_times_is_off": {
            "name": "test_that_calculate_maximum_download_time_will_call_maximum_download_time_when_custom_protocol_times_is_off",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateMaximumDownloadTimeTestCase.test_that_calculate_maximum_download_time_will_not_call_maximum_download_time_when_custom_protocol_times_is_on": {
            "name": "test_that_calculate_maximum_download_time_will_not_call_maximum_download_time_when_custom_protocol_times_is_on",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateMaximumDownloadTimeTestCase.test_that_both_maximum_download_time_implementation_should_return_same_result_when_golem_messages_constants_match_concent_settings": {
            "name": "test_that_both_maximum_download_time_implementation_should_return_same_result_when_golem_messages_constants_match_concent_settings",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateSubtaskVerificationTimeTestCase.setUp": {
            "name": "setUp",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateSubtaskVerificationTimeTestCase.test_that_calculate_subtask_verification_time_will_call_subtask_verification_time_when_custom_protocol_times_is_off": {
            "name": "test_that_calculate_subtask_verification_time_will_call_subtask_verification_time_when_custom_protocol_times_is_off",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateSubtaskVerificationTimeTestCase.test_that_calculate_subtask_verification_time_will_not_call_subtask_verification_time_when_custom_protocol_times_is_on": {
            "name": "test_that_calculate_subtask_verification_time_will_not_call_subtask_verification_time_when_custom_protocol_times_is_on",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateSubtaskVerificationTimeTestCase.test_that_both_subtask_verification_time_implementation_should_return_same_result_when_golem_messages_constants_match_concent_settings": {
            "name": "test_that_both_subtask_verification_time_implementation_should_return_same_result_when_golem_messages_constants_match_concent_settings",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExtractNameFromSceneFilePath.test_that_function_correctly_cut_off_golems_resource_path": {
            "name": "test_that_function_correctly_cut_off_golems_resource_path",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "scene_file_path": [],
                "expected_result": []
            }
        },
        "TestExtractNameFromSceneFilePath.test_that_function_should_raise_exception_when_could_not_find_golems_resource_path_to_cut_off": {
            "name": "test_that_function_should_raise_exception_when_could_not_find_golems_resource_path_to_cut_off",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "scene_file_path": []
            }
        },
        "TestValidateCompatibilityGolemMessages.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateCompatibilityGolemMessages.test_that_compatible_version_of_golem_message_should_return_true": {
            "name": "test_that_compatible_version_of_golem_message_should_return_true",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "protocol_version": []
            }
        },
        "TestValidateCompatibilityGolemMessages.test_that_not_compatible_version_of_golem_message_should_return_false": {
            "name": "test_that_not_compatible_version_of_golem_message_should_return_false",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "protocol_version": []
            }
        },
        "TestValidateCompatibilityGolemMessages.test_that_lack_of_version_of_golem_message_should_return_true": {
            "name": "test_that_lack_of_version_of_golem_message_should_return_true",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionHashMethods.test_that_adjust_transaction_hash_cut_0x_prefix_correctly": {
            "name": "test_that_adjust_transaction_hash_cut_0x_prefix_correctly",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_hash": [],
                "expected_result": []
            }
        },
        "TestBlocksHelper.setUp": {
            "name": "setUp",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlocksHelper.mocked_get_block_by_number": {
            "name": "mocked_get_block_by_number",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "TestBlocksHelper.test_get_latest_existing_block_at": {
            "name": "test_get_latest_existing_block_at",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "block_number": []
            }
        }
    },
    "concent-master/concent_api/core/tests/utils.py": {
        "get_timestamp_string": {
            "name": "get_timestamp_string",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "parse_iso_date_to_timestamp": {
            "name": "parse_iso_date_to_timestamp",
            "location": 73,
            "return": [],
            "arguments": {
                "date_string": []
            }
        },
        "add_time_offset_to_date": {
            "name": "add_time_offset_to_date",
            "location": 77,
            "return": [],
            "arguments": {
                "base_time": [],
                "offset": []
            }
        },
        "generate_uuid_for_tests": {
            "name": "generate_uuid_for_tests",
            "location": 83,
            "return": [],
            "arguments": {
                "last_char": []
            }
        },
        "ConcentIntegrationTestCase.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_encoded_key": {
            "name": "_get_encoded_key",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ConcentIntegrationTestCase._get_encoded_provider_public_key": {
            "name": "_get_encoded_provider_public_key",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_encoded_requestor_public_key": {
            "name": "_get_encoded_requestor_public_key",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_encoded_requestor_different_public_key": {
            "name": "_get_encoded_requestor_different_public_key",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_requestor_ethereum_private_key": {
            "name": "_get_requestor_ethereum_private_key",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_requestor_ethereum_hex_public_key": {
            "name": "_get_requestor_ethereum_hex_public_key",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_requestor_ethereum_hex_public_key_different": {
            "name": "_get_requestor_ethereum_hex_public_key_different",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_provider_ethereum_private_key": {
            "name": "_get_provider_ethereum_private_key",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_provider_ethereum_hex_public_key": {
            "name": "_get_provider_ethereum_hex_public_key",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_provider_ethereum_hex_public_key_different": {
            "name": "_get_provider_ethereum_hex_public_key_different",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_provider_hex_public_key": {
            "name": "_get_provider_hex_public_key",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_requestor_hex_public_key": {
            "name": "_get_requestor_hex_public_key",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_diffrent_provider_hex_public_key": {
            "name": "_get_diffrent_provider_hex_public_key",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._get_diffrent_requestor_hex_public_key": {
            "name": "_get_diffrent_requestor_hex_public_key",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._sign_message": {
            "name": "_sign_message",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "golem_message": [],
                "client_private_key": []
            }
        },
        "ConcentIntegrationTestCase._generate_ethereum_signature": {
            "name": "_generate_ethereum_signature",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": [],
                "requestor_ethereum_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_force_get_task_result": {
            "name": "_get_serialized_force_get_task_result",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "report_computed_task": [],
                "timestamp": [],
                "requestor_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_report_computed_task": {
            "name": "_get_deserialized_report_computed_task",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "task_id": [],
                "task_to_compute": [],
                "size": [],
                "package_hash": [],
                "timestamp": [],
                "signer_private_key": [],
                "frames": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_task_to_compute": {
            "name": "_get_deserialized_task_to_compute",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "deadline": [],
                "task_id": [],
                "subtask_id": [],
                "compute_task_def": [],
                "want_to_compute_task": [],
                "requestor_id": [],
                "requestor_public_key": [],
                "requestor_ethereum_public_key": [],
                "requestor_ethereum_private_key": [],
                "provider_id": [],
                "provider_public_key": [],
                "price": [],
                "package_hash": [],
                "signer_private_key": [],
                "size": [],
                "frames": [],
                "render_parameters": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_want_to_compute_task": {
            "name": "_get_deserialized_want_to_compute_task",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_ack_report_computed_task": {
            "name": "_get_deserialized_ack_report_computed_task",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": [],
                "timestamp": [],
                "deadline": [],
                "subtask_id": [],
                "report_computed_task": [],
                "signer_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_ack_report_computed_task": {
            "name": "_get_serialized_ack_report_computed_task",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "ack_report_computed_task": [],
                "timestamp": [],
                "requestor_private_key": []
            }
        },
        "ConcentIntegrationTestCase._test_204_response": {
            "name": "_test_204_response",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "ConcentIntegrationTestCase._test_400_response": {
            "name": "_test_400_response",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "error_message": [],
                "error_code": []
            }
        },
        "ConcentIntegrationTestCase._test_response": {
            "name": "_test_response",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "status": [],
                "key": [],
                "message_type": [],
                "fields": [],
                "nested_message_verifiable_by": []
            }
        },
        "ConcentIntegrationTestCase._test_subtask_state": {
            "name": "_test_subtask_state",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": [],
                "subtask_id": [],
                "subtask_state": [],
                "provider_key": [],
                "requestor_key": [],
                "expected_nested_messages": [],
                "next_deadline": []
            }
        },
        "ConcentIntegrationTestCase._test_subtask_nested_messages": {
            "name": "_test_subtask_nested_messages",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "subtask": [],
                "expected_nested_messages": []
            }
        },
        "ConcentIntegrationTestCase._test_last_stored_messages": {
            "name": "_test_last_stored_messages",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "expected_messages": [],
                "task_id": [],
                "subtask_id": []
            }
        },
        "ConcentIntegrationTestCase._test_undelivered_pending_responses": {
            "name": "_test_undelivered_pending_responses",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "client_public_key": [],
                "subtask_id": [],
                "client_public_key_out_of_band": [],
                "expected_pending_responses_receive": [],
                "expected_pending_responses_receive_out_of_band": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_force_subtask_results": {
            "name": "_get_deserialized_force_subtask_results",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "ack_report_computed_task": [],
                "task_to_compute": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_force_subtask_results": {
            "name": "_get_serialized_force_subtask_results",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "ack_report_computed_task": [],
                "provider_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_subtask_results_accepted": {
            "name": "_get_deserialized_subtask_results_accepted",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "report_computed_task": [],
                "payment_ts": [],
                "timestamp": [],
                "signer_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_subtask_results_rejected": {
            "name": "_get_deserialized_subtask_results_rejected",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "reason": [],
                "timestamp": [],
                "report_computed_task": [],
                "signer_private_key": [],
                "force_get_task_result_failed": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_subtask_results_rejected": {
            "name": "_get_serialized_subtask_results_rejected",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_rejected": [],
                "timestamp": [],
                "requestor_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_compute_task_def": {
            "name": "_get_deserialized_compute_task_def",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_force_subtask_results_response": {
            "name": "_get_deserialized_force_subtask_results_response",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_force_subtask_results_response": {
            "name": "_get_serialized_force_subtask_results_response",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "subtask_results_accepted": [],
                "subtask_results_rejected": [],
                "requestor_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_force_report_computed_task": {
            "name": "_get_deserialized_force_report_computed_task",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "report_computed_task": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_force_report_computed_task": {
            "name": "_get_serialized_force_report_computed_task",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "force_report_computed_task": [],
                "timestamp": [],
                "provider_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_cannot_compute_task": {
            "name": "_get_deserialized_cannot_compute_task",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": [],
                "reason": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_task_failure": {
            "name": "_get_deserialized_task_failure",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "err": [],
                "task_to_compute": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_reject_report_computed_task": {
            "name": "_get_deserialized_reject_report_computed_task",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "reason": [],
                "task_to_compute": [],
                "timestamp": [],
                "cannot_compute_task": [],
                "task_failure": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_reject_report_computed_task": {
            "name": "_get_serialized_reject_report_computed_task",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "reject_report_computed_task": [],
                "timestamp": [],
                "requestor_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_force_payment": {
            "name": "_get_deserialized_force_payment",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_accepted_list": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_force_payment": {
            "name": "_get_serialized_force_payment",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_accepted_list": [],
                "timestamp": [],
                "provider_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_subtask_results_verify": {
            "name": "_get_deserialized_subtask_results_verify",
            "location": 778,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_rejected": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._get_serialized_subtask_results_verify": {
            "name": "_get_serialized_subtask_results_verify",
            "location": 789,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_verify": [],
                "subtask_results_rejected": [],
                "timestamp": [],
                "provider_private_key": []
            }
        },
        "ConcentIntegrationTestCase._get_deserialized_force_get_task_result_failed": {
            "name": "_get_deserialized_force_get_task_result_failed",
            "location": 803,
            "return": [],
            "arguments": {
                "self": [],
                "task_to_compute": [],
                "timestamp": []
            }
        },
        "ConcentIntegrationTestCase._send_force_report_computed_task": {
            "name": "_send_force_report_computed_task",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "serialized_force_report_computed_task": []
            }
        },
        "ConcentIntegrationTestCase._assert_stored_message_counter_increased": {
            "name": "_assert_stored_message_counter_increased",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "increased_by": []
            }
        },
        "ConcentIntegrationTestCase._assert_stored_message_counter_not_increased": {
            "name": "_assert_stored_message_counter_not_increased",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._assert_client_count_is_equal": {
            "name": "_assert_client_count_is_equal",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "ConcentIntegrationTestCase._add_signature_to_message": {
            "name": "_add_signature_to_message",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "golem_message": [],
                "priv_key": []
            }
        },
        "ConcentIntegrationTestCase._create_client_auth_message": {
            "name": "_create_client_auth_message",
            "location": 845,
            "return": [],
            "arguments": {
                "self": [],
                "client_priv_key": [],
                "client_public_key": []
            }
        },
        "ConcentIntegrationTestCase._create_client_auth_message_as_header": {
            "name": "_create_client_auth_message_as_header",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "client_priv_key": [],
                "client_public_key": []
            }
        },
        "ConcentIntegrationTestCase._create_provider_auth_message": {
            "name": "_create_provider_auth_message",
            "location": 858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._create_diff_provider_auth_message": {
            "name": "_create_diff_provider_auth_message",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._create_requestor_auth_message": {
            "name": "_create_requestor_auth_message",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._create_diff_requestor_auth_message": {
            "name": "_create_diff_requestor_auth_message",
            "location": 867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._create_test_ping_message": {
            "name": "_create_test_ping_message",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._create_batch_payment_object": {
            "name": "_create_batch_payment_object",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "closure_time": []
            }
        },
        "ConcentIntegrationTestCase._create_settlement_payment_object": {
            "name": "_create_settlement_payment_object",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "ConcentIntegrationTestCase._create_forced_subtask_payment_object": {
            "name": "_create_forced_subtask_payment_object",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "subtask_id": []
            }
        },
        "ConcentIntegrationTestCase._create_cover_additional_verification_costs_object": {
            "name": "_create_cover_additional_verification_costs_object",
            "location": 895,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "subtask_id": []
            }
        },
        "ConcentIntegrationTestCase._get_list_of_batch_transactions": {
            "name": "_get_list_of_batch_transactions",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "payment_ts": [],
                "current_time": [],
                "transaction_type": []
            }
        },
        "ConcentIntegrationTestCase._get_list_of_settlement_transactions": {
            "name": "_get_list_of_settlement_transactions",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "payment_ts": [],
                "current_time": [],
                "transaction_type": []
            }
        },
        "ConcentIntegrationTestCase._get_list_of_forced_subtask_transactions": {
            "name": "_get_list_of_forced_subtask_transactions",
            "location": 913,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "payment_ts": [],
                "current_time": [],
                "transaction_type": []
            }
        },
        "ConcentIntegrationTestCase._get_list_of_covered_additional_verification_costs": {
            "name": "_get_list_of_covered_additional_verification_costs",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "payment_ts": [],
                "current_time": [],
                "transaction_type": []
            }
        },
        "ConcentIntegrationTestCase._get_empty_list_of_transactions": {
            "name": "_get_empty_list_of_transactions",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "payment_ts": [],
                "current_time": [],
                "transaction_type": []
            }
        },
        "ConcentIntegrationTestCase._make_settlement_payment_to_provider": {
            "name": "_make_settlement_payment_to_provider",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_eth_address": [],
                "provider_eth_address": [],
                "value": [],
                "closure_time": []
            }
        },
        "ConcentIntegrationTestCase._get_number_of_eth_block": {
            "name": "_get_number_of_eth_block",
            "location": 929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcentIntegrationTestCase._pass_rpc_synchronization": {
            "name": "_pass_rpc_synchronization",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "_rpc": [],
                "_address": [],
                "_tx_sign": []
            }
        },
        "ConcentIntegrationTestCase.claim_deposit_true_mock": {
            "name": "claim_deposit_true_mock",
            "location": 935,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "concent_use_case": [],
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "subtask_cost": [],
                "requestor_public_key": [],
                "provider_public_key": []
            }
        },
        "ConcentIntegrationTestCase.claim_deposit_requestor_ok_provider_none_mock": {
            "name": "claim_deposit_requestor_ok_provider_none_mock",
            "location": 992,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "concent_use_case": [],
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "subtask_cost": [],
                "requestor_public_key": [],
                "provider_public_key": []
            }
        },
        "ConcentIntegrationTestCase.claim_deposit_false_mock": {
            "name": "claim_deposit_false_mock",
            "location": 1025,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "concent_use_case": [],
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "subtask_cost": [],
                "requestor_public_key": [],
                "provider_public_key": []
            }
        },
        "ConcentIntegrationTestCase.settle_overdue_acceptances_mock": {
            "name": "settle_overdue_acceptances_mock",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": [],
                "requestor_ethereum_address": [],
                "provider_ethereum_address": [],
                "acceptances": [],
                "requestor_public_key": []
            }
        },
        "ConcentIntegrationTestCase._test_report_computed_task_in_database": {
            "name": "_test_report_computed_task_in_database",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "report_computed_task": []
            }
        },
        "ConcentIntegrationTestCase._create_datetime_from_string": {
            "name": "_create_datetime_from_string",
            "location": 1066,
            "return": [],
            "arguments": {
                "date_time_str": []
            }
        },
        "ConcentIntegrationTestCase._create_timestamp_from_string": {
            "name": "_create_timestamp_from_string",
            "location": 1074,
            "return": [],
            "arguments": {
                "date_time_str": []
            }
        },
        "ConcentIntegrationTestCase._prepare_cv2_mock": {
            "name": "_prepare_cv2_mock",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": [],
                "desired_behaviour": []
            }
        },
        "ConcentIntegrationTestCase._get_verification_deadline_as_datetime": {
            "name": "_get_verification_deadline_as_datetime",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_rejected_timestamp": [],
                "report_computed_task_size": []
            }
        },
        "ConcentIntegrationTestCase._get_verification_deadline_as_timestamp": {
            "name": "_get_verification_deadline_as_timestamp",
            "location": 1101,
            "return": [],
            "arguments": {
                "subtask_results_rejected_timestamp": [],
                "report_computed_task_size": []
            }
        },
        "ConcentIntegrationTestCase._get_blender_rendering_deadline_as_timestamp": {
            "name": "_get_blender_rendering_deadline_as_timestamp",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_results_rejected_timestamp": [],
                "report_computed_task_size": [],
                "task_to_compute": []
            }
        },
        "ConcentIntegrationTestCase._get_uuid": {
            "name": "_get_uuid",
            "location": 1129,
            "return": [],
            "arguments": {
                "last_char": []
            }
        },
        "ConcentIntegrationTestCase.send_request": {
            "name": "send_request",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "data": [],
                "golem_messages_version": []
            }
        }
    },
    "concent-master/concent_api/core/tests/__init__.py": {},
    "concent-master/concent_api/gatekeeper/constants.py": {},
    "concent-master/concent_api/gatekeeper/decorators.py": {
        "validate_protocol_version_in_gatekeeper": {
            "name": "validate_protocol_version_in_gatekeeper",
            "location": 14,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "validate_protocol_version_in_gatekeeper.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "concent-master/concent_api/gatekeeper/urls.py": {},
    "concent-master/concent_api/gatekeeper/utils.py": {
        "gatekeeper_access_denied_response": {
            "name": "gatekeeper_access_denied_response",
            "location": 12,
            "return": [],
            "arguments": {
                "message": [],
                "operation": [],
                "error_code": [],
                "path": [],
                "subtask_id": [],
                "client_key": []
            }
        }
    },
    "concent-master/concent_api/gatekeeper/views.py": {
        "upload": {
            "name": "upload",
            "location": 36,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "download": {
            "name": "download",
            "location": 69,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "parse_headers": {
            "name": "parse_headers",
            "location": 95,
            "return": [],
            "arguments": {
                "request": [],
                "path_to_file": [],
                "operation": []
            }
        }
    },
    "concent-master/concent_api/gatekeeper/__init__.py": {},
    "concent-master/concent_api/gatekeeper/tests/test_gatekeeper_views.py": {
        "GatekeeperViewUploadTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_accept_valid_message": {
            "name": "test_upload_should_accept_valid_message",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_wrong_request_content_type": {
            "name": "test_upload_should_return_401_if_wrong_request_content_type",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_message_token_deadline_pass": {
            "name": "test_upload_should_return_401_if_message_token_deadline_pass",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_file_paths_are_not_unique": {
            "name": "test_upload_should_return_401_if_file_paths_are_not_unique",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_checksum_is_wrong": {
            "name": "test_upload_should_return_401_if_checksum_is_wrong",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_size_of_file_is_wrong": {
            "name": "test_upload_should_return_401_if_size_of_file_is_wrong",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_newlines_in_message_checksum": {
            "name": "test_upload_should_return_401_if_newlines_in_message_checksum",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_newlines_in_message_path": {
            "name": "test_upload_should_return_401_if_newlines_in_message_path",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_previously_causing_500_error_authorization_header_is_used": {
            "name": "test_upload_should_return_401_if_previously_causing_500_error_authorization_header_is_used",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_specific_file_info_data": {
            "name": "test_upload_should_return_401_if_specific_file_info_data",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_file_categories_are_not_unique_across_file_info_list": {
            "name": "test_upload_should_return_401_if_file_categories_are_not_unique_across_file_info_list",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewUploadTest.test_upload_should_return_401_if_invalid_protocol_version": {
            "name": "test_upload_should_return_401_if_invalid_protocol_version",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.setUp": {
            "name": "setUp",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_accept_valid_message": {
            "name": "test_download_should_accept_valid_message",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_wrong_authorization_header": {
            "name": "test_download_should_return_401_if_wrong_authorization_header",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_wrong_token_cluster_address": {
            "name": "test_download_should_return_401_if_wrong_token_cluster_address",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_file_paths_are_not_unique": {
            "name": "test_download_should_return_401_if_file_paths_are_not_unique",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_checksum_is_wrong": {
            "name": "test_download_should_return_401_if_checksum_is_wrong",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_size_of_file_is_wrong": {
            "name": "test_download_should_return_401_if_size_of_file_is_wrong",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_400_if_newlines_in_message_checksum": {
            "name": "test_download_should_return_400_if_newlines_in_message_checksum",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_400_if_newlines_in_message_path": {
            "name": "test_download_should_return_400_if_newlines_in_message_path",
            "location": 686,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_concent_auth_header_is_missing": {
            "name": "test_download_should_return_401_concent_auth_header_is_missing",
            "location": 722,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_concent_auth_header_is_not_loadable": {
            "name": "test_download_should_return_401_concent_auth_header_is_not_loadable",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_file_categories_are_not_unique_across_file_info_list": {
            "name": "test_download_should_return_401_if_file_categories_are_not_unique_across_file_info_list",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperViewDownloadTest.test_download_should_return_401_if_invalid_protocol_version": {
            "name": "test_download_should_return_401_if_invalid_protocol_version",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/gatekeeper/tests/test_utils.py": {
        "GatekeeperAccessDeniedResponseTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatekeeperAccessDeniedResponseTest.test_gatekeeper_access_denied_response_should_return_appropriate_body_and_headers": {
            "name": "test_gatekeeper_access_denied_response_should_return_appropriate_body_and_headers",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/gatekeeper/tests/__init__.py": {},
    "concent-master/concent_api/middleman/apps.py": {},
    "concent-master/concent_api/middleman/asynchronous_operations.py": {
        "create_random_challenge": {
            "name": "create_random_challenge",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "discard_entries_for_lost_messages": {
            "name": "discard_entries_for_lost_messages",
            "location": 219,
            "return": [],
            "arguments": {
                "current_request_id": [],
                "message_tracker": [],
                "logger_": []
            }
        },
        "create_error_frame": {
            "name": "create_error_frame",
            "location": 244,
            "return": [],
            "arguments": {
                "exception": []
            }
        }
    },
    "concent-master/concent_api/middleman/constants.py": {},
    "concent-master/concent_api/middleman/middleman_server.py": {
        "MiddleMan.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "bind_address": [],
                "internal_port": [],
                "external_port": [],
                "loop": []
            }
        },
        "MiddleMan.run": {
            "name": "run",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._run": {
            "name": "_run",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._run_forever": {
            "name": "_run_forever",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._start_middleman": {
            "name": "_start_middleman",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._close_middleman": {
            "name": "_close_middleman",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._terminate_connections": {
            "name": "_terminate_connections",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiddleMan._cancel_pending_tasks": {
            "name": "_cancel_pending_tasks",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "tasks": [],
                "await_cancellation": []
            }
        },
        "MiddleMan._abort_ongoing_authentication": {
            "name": "_abort_ongoing_authentication",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/middleman/utils.py": {
        "validate_connection_to_queue_mapping": {
            "name": "validate_connection_to_queue_mapping",
            "location": 76,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "QueuePool.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "initial_data": [],
                "loop": [],
                "logger": []
            }
        },
        "QueuePool.__setitem__": {
            "name": "__setitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "QueuePool._ensure_key_uniqueness": {
            "name": "_ensure_key_uniqueness",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueuePool.update": {
            "name": "update",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "QueuePool.pop": {
            "name": "pop",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QueuePool.popitem": {
            "name": "popitem",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuePool.__delitem__": {
            "name": "__delitem__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "concent-master/concent_api/middleman/__init__.py": {},
    "concent-master/concent_api/middleman/management/__init__.py": {},
    "concent-master/concent_api/middleman/management/commands/middleman.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/concent_api/middleman/management/commands/__init__.py": {},
    "concent-master/concent_api/middleman/migrations/__init__.py": {},
    "concent-master/concent_api/middleman/tests/test_asynchronous_operations.py": {
        "_get_mocked_reader": {
            "name": "_get_mocked_reader",
            "location": 75,
            "return": [],
            "arguments": {
                "message": [],
                "request_id": [],
                "sign_as": []
            }
        },
        "test_that_error_frame_is_created_correctly": {
            "name": "test_that_error_frame_is_created_correctly",
            "location": 301,
            "return": [],
            "arguments": {
                "exception": [],
                "error_code": []
            }
        },
        "test_heartbeat_producer_sends_heartbeat_in_time_intervals": {
            "name": "test_heartbeat_producer_sends_heartbeat_in_time_intervals",
            "location": 622,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "TestRequestProducer.setUp": {
            "name": "setUp",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestRequestConsumer.setUp": {
            "name": "setUp",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestDiscardEntriesForLostMessages.setUp": {
            "name": "setUp",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDiscardEntriesForLostMessages.test_that_if_request_id_matches_first_entry_no_messages_are_discarded": {
            "name": "test_that_if_request_id_matches_first_entry_no_messages_are_discarded",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDiscardEntriesForLostMessages.test_that_if_request_id_matches_third_entry_two_messages_are_discarded": {
            "name": "test_that_if_request_id_matches_third_entry_two_messages_are_discarded",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDiscardEntriesForLostMessages.test_that_if_request_id_matches_last_entry_all_but_one_messages_are_discarded": {
            "name": "test_that_if_request_id_matches_last_entry_all_but_one_messages_are_discarded",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDiscardEntriesForLostMessages.test_that_if_request_id_matches_no_entry_no_messages_are_discarded_and_warning_is_logged": {
            "name": "test_that_if_request_id_matches_no_entry_no_messages_are_discarded_and_warning_is_logged",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResponseProducer.setUp": {
            "name": "setUp",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestIsAuthenticated.setUp": {
            "name": "setUp",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsAuthenticated._prepare_mocked_reader": {
            "name": "_prepare_mocked_reader",
            "location": 616,
            "return": [],
            "arguments": {
                "frame": [],
                "private_key": []
            }
        }
    },
    "concent-master/concent_api/middleman/tests/test_middleman.py": {
        "send_data": {
            "name": "send_data",
            "location": 32,
            "return": [],
            "arguments": {
                "fake_client": [],
                "data_to_send": [],
                "port": [],
                "delay": []
            }
        },
        "trigger_signal": {
            "name": "trigger_signal",
            "location": 39,
            "return": [],
            "arguments": {
                "pid": [],
                "delay": []
            }
        },
        "schedule_sigterm": {
            "name": "schedule_sigterm",
            "location": 44,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "get_client_thread": {
            "name": "get_client_thread",
            "location": 50,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "TestMiddleManInitialization.test_that_middleman_is_created_with_given_params": {
            "name": "test_that_middleman_is_created_with_given_params",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": [],
                "event_loop": []
            }
        },
        "TestMiddleManInitialization.test_that_middleman_is_created_with_default_params": {
            "name": "test_that_middleman_is_created_with_default_params",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": [],
                "event_loop": []
            }
        },
        "TestMiddleManServer.test_that_if_keyboard_interrupt_is_raised_application_will_exit_without_errors": {
            "name": "test_that_if_keyboard_interrupt_is_raised_application_will_exit_without_errors",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_if_chosen_port_is_already_used_application_will_exit_with_error_status": {
            "name": "test_that_if_chosen_port_is_already_used_application_will_exit_with_error_status",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "_start_server_mock": []
            }
        },
        "TestMiddleManServer.test_that_if_sigterm_is_sent_application_will_exit_without_errors": {
            "name": "test_that_if_sigterm_is_sent_application_will_exit_without_errors",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_crash_of_the_server_is_reported_to_sentry": {
            "name": "test_that_crash_of_the_server_is_reported_to_sentry",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_broken_connection_from_concent_is_reported_to_sentry": {
            "name": "test_that_broken_connection_from_concent_is_reported_to_sentry",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_broken_connection_from_signing_service_is_reported_to_sentry": {
            "name": "test_that_broken_connection_from_signing_service_is_reported_to_sentry",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_cancelled_error_is_not_reported_to_sentry": {
            "name": "test_that_cancelled_error_is_not_reported_to_sentry",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleManServer.test_that_when_signing_service_connection_is_active_subsequent_attempts_will_fail": {
            "name": "test_that_when_signing_service_connection_is_active_subsequent_attempts_will_fail",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestMiddleManServer.test_that_when_authentication_is_unsuccessful_then_connection_ends": {
            "name": "test_that_when_authentication_is_unsuccessful_then_connection_ends",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestMiddleManServer.test_that_when_authentication_is_successful_connection_lasts_until_its_end": {
            "name": "test_that_when_authentication_is_successful_connection_lasts_until_its_end",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestMiddleManServer.test_that_when_one_authentication_task_is_successful_remaining_ones_are_cancelled": {
            "name": "test_that_when_one_authentication_task_is_successful_remaining_ones_are_cancelled",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        }
    },
    "concent-master/concent_api/middleman/tests/test_utils.py": {
        "test_validate_connection_to_queue_mapping": {
            "name": "test_validate_connection_to_queue_mapping",
            "location": 126,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "TestQueuePoolInitialization.test_that_queue_pool_is_created_with_given_params": {
            "name": "test_that_queue_pool_is_created_with_given_params",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestQueuePoolInitialization.test_that_queue_pool_is_created_with_default_params": {
            "name": "test_that_queue_pool_is_created_with_default_params",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "_mocked_get_logger": [],
                "mocked_asyncio": []
            }
        },
        "TestQueuePoolOperations.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestQueuePoolOperations.test_that_when_already_existing_connection_is_added_exception_is_thrown": {
            "name": "test_that_when_already_existing_connection_is_added_exception_is_thrown",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueuePoolOperations.test_that_when_already_existing_connection_is_added_during_update_exception_is_thrown": {
            "name": "test_that_when_already_existing_connection_is_added_during_update_exception_is_thrown",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQueuePoolOperations.test_that_deleting_mapping_with_non_empty_queue_logs_untretrived_queue_items": {
            "name": "test_that_deleting_mapping_with_non_empty_queue_logs_untretrived_queue_items",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestQueuePoolOperations.test_that_popping_mapping_with_non_empty_queue_logs_unretrieved_queue_items": {
            "name": "test_that_popping_mapping_with_non_empty_queue_logs_unretrieved_queue_items",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestQueuePoolOperations.test_that_using_popitem_on_mapping_with_non_empty_queue_logs_unretrieved_queue_items": {
            "name": "test_that_using_popitem_on_mapping_with_non_empty_queue_logs_unretrieved_queue_items",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        }
    },
    "concent-master/concent_api/middleman/tests/__init__.py": {},
    "concent-master/concent_api/verifier/apps.py": {},
    "concent-master/concent_api/verifier/constants.py": {},
    "concent-master/concent_api/verifier/decorators.py": {
        "handle_verification_results": {
            "name": "handle_verification_results",
            "location": 14,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "handle_verification_results.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/verifier/exceptions.py": {
        "VerificationError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "error_message": [],
                "error_code": [],
                "subtask_id": []
            }
        },
        "VerificationMismatch.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": []
            }
        }
    },
    "concent-master/concent_api/verifier/tasks.py": {
        "blender_verification_order": {
            "name": "blender_verification_order",
            "location": 38,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "source_package_path": [],
                "source_size": [],
                "source_package_hash": [],
                "result_package_path": [],
                "result_size": [],
                "result_package_hash": [],
                "output_format": [],
                "scene_file": [],
                "verification_deadline": [],
                "frames": [],
                "blender_crop_script_parameters": []
            }
        }
    },
    "concent-master/concent_api/verifier/urls.py": {},
    "concent-master/concent_api/verifier/utils.py": {
        "clean_directory": {
            "name": "clean_directory",
            "location": 42,
            "return": [],
            "arguments": {
                "directory_path": [],
                "subtask_id": []
            }
        },
        "prepare_storage_request_headers": {
            "name": "prepare_storage_request_headers",
            "location": 58,
            "return": [],
            "arguments": {
                "file_transfer_token": []
            }
        },
        "store_file_from_response_in_chunks": {
            "name": "store_file_from_response_in_chunks",
            "location": 80,
            "return": [],
            "arguments": {
                "response": [],
                "file_path": []
            }
        },
        "run_blender": {
            "name": "run_blender",
            "location": 86,
            "return": [],
            "arguments": {
                "scene_file": [],
                "output_format": [],
                "frame_number": [],
                "verification_deadline": [],
                "blender_crop_script_parameters": [],
                "subtask_id": []
            }
        },
        "unpack_archive": {
            "name": "unpack_archive",
            "location": 114,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "get_files_list_from_archive": {
            "name": "get_files_list_from_archive",
            "location": 123,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "delete_file": {
            "name": "delete_file",
            "location": 128,
            "return": [],
            "arguments": {
                "file_path": [],
                "subtask_id": []
            }
        },
        "generate_full_blender_output_file_name": {
            "name": "generate_full_blender_output_file_name",
            "location": 142,
            "return": [],
            "arguments": {
                "scene_file": [],
                "frame_number": [],
                "output_format": []
            }
        },
        "generate_base_blender_output_file_name": {
            "name": "generate_base_blender_output_file_name",
            "location": 147,
            "return": [],
            "arguments": {
                "scene_file": []
            }
        },
        "generate_upload_file_path": {
            "name": "generate_upload_file_path",
            "location": 151,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "extension": [],
                "frame_number": []
            }
        },
        "generate_verifier_storage_file_path": {
            "name": "generate_verifier_storage_file_path",
            "location": 155,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "are_image_sizes_and_color_channels_equal": {
            "name": "are_image_sizes_and_color_channels_equal",
            "location": 159,
            "return": [],
            "arguments": {
                "image1": [],
                "image2": []
            }
        },
        "import_cv2": {
            "name": "import_cv2",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "compare_images": {
            "name": "compare_images",
            "location": 168,
            "return": [],
            "arguments": {
                "image_1": [],
                "image_2": [],
                "subtask_id": []
            }
        },
        "compare_minimum_ssim_with_results": {
            "name": "compare_minimum_ssim_with_results",
            "location": 187,
            "return": [],
            "arguments": {
                "ssim_list": [],
                "subtask_id": []
            }
        },
        "load_images": {
            "name": "load_images",
            "location": 199,
            "return": [],
            "arguments": {
                "blender_output_file_name": [],
                "result_file": [],
                "subtask_id": []
            }
        },
        "try_to_upload_blender_output_file": {
            "name": "try_to_upload_blender_output_file",
            "location": 236,
            "return": [],
            "arguments": {
                "blender_output_file_name": [],
                "output_format": [],
                "subtask_id": [],
                "frame_number": []
            }
        },
        "delete_source_files": {
            "name": "delete_source_files",
            "location": 274,
            "return": [],
            "arguments": {
                "source_archive_name": [],
                "subtask_id": []
            }
        },
        "render_image": {
            "name": "render_image",
            "location": 286,
            "return": [],
            "arguments": {
                "frame_number": [],
                "output_format": [],
                "scene_file": [],
                "subtask_id": [],
                "verification_deadline": [],
                "blender_crop_script_parameters": []
            }
        },
        "unpack_archives": {
            "name": "unpack_archives",
            "location": 330,
            "return": [],
            "arguments": {
                "file_paths": [],
                "subtask_id": []
            }
        },
        "validate_downloaded_archives": {
            "name": "validate_downloaded_archives",
            "location": 351,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "archives_list": [],
                "scene_file": []
            }
        },
        "download_archives_from_storage": {
            "name": "download_archives_from_storage",
            "location": 379,
            "return": [],
            "arguments": {
                "file_transfer_token": [],
                "subtask_id": [],
                "package_paths_to_downloaded_file_names": []
            }
        },
        "parse_result_files_with_frames": {
            "name": "parse_result_files_with_frames",
            "location": 414,
            "return": [],
            "arguments": {
                "frames": [],
                "result_files_list": [],
                "output_format": []
            }
        },
        "render_images_by_frames": {
            "name": "render_images_by_frames",
            "location": 426,
            "return": [],
            "arguments": {
                "parsed_files_to_compare": [],
                "frames": [],
                "output_format": [],
                "scene_file": [],
                "subtask_id": [],
                "verification_deadline": [],
                "blender_crop_script_parameters": []
            }
        },
        "upload_blender_output_file": {
            "name": "upload_blender_output_file",
            "location": 444,
            "return": [],
            "arguments": {
                "frames": [],
                "blender_output_file_name_list": [],
                "output_format": [],
                "subtask_id": []
            }
        },
        "ensure_enough_result_files_provided": {
            "name": "ensure_enough_result_files_provided",
            "location": 449,
            "return": [],
            "arguments": {
                "frames": [],
                "result_files_list": [],
                "subtask_id": []
            }
        },
        "ensure_frames_have_related_files_to_compare": {
            "name": "ensure_frames_have_related_files_to_compare",
            "location": 462,
            "return": [],
            "arguments": {
                "frames": [],
                "parsed_files_to_compare": [],
                "subtask_id": []
            }
        },
        "compare_all_rendered_images_with_user_results_files": {
            "name": "compare_all_rendered_images_with_user_results_files",
            "location": 467,
            "return": [],
            "arguments": {
                "parsed_files_to_compare": [],
                "subtask_id": []
            }
        },
        "generate_blender_script": {
            "name": "generate_blender_script",
            "location": 488,
            "return": [],
            "arguments": {
                "subtask_id": [],
                "blender_crop_script_parameters": []
            }
        },
        "import_generate_blender_crop_file": {
            "name": "import_generate_blender_crop_file",
            "location": 502,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/concent_api/verifier/__init__.py": {},
    "concent-master/concent_api/verifier/migrations/__init__.py": {},
    "concent-master/concent_api/verifier/tests/test_integration_verification.py": {
        "mock_run_blender": {
            "name": "mock_run_blender",
            "location": 22,
            "return": [],
            "arguments": {
                "_scene_file": [],
                "_output_format": [],
                "script_file": []
            }
        },
        "mock_run_blender_with_error": {
            "name": "mock_run_blender_with_error",
            "location": 31,
            "return": [],
            "arguments": {
                "_scene_file": [],
                "_output_format": [],
                "script_file": []
            }
        },
        "VerifierVerificationIntegrationTest.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.mocked_parse_result_files_with_frames": {
            "name": "mocked_parse_result_files_with_frames",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_that_blender_verification_order_should_perform_full_verification_with_match_result": {
            "name": "test_that_blender_verification_order_should_perform_full_verification_with_match_result",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_that_blender_verification_order_should_perform_full_verification_with_mismatch_result": {
            "name": "test_that_blender_verification_order_should_perform_full_verification_with_mismatch_result",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_that_blender_verification_order_should_call_verification_result_with_result_error_if_download_fails": {
            "name": "test_that_blender_verification_order_should_call_verification_result_with_result_error_if_download_fails",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_that_blender_verification_order_should_call_verification_result_with_result_error_if_validation_of_downloaded_archives_fails": {
            "name": "test_that_blender_verification_order_should_call_verification_result_with_result_error_if_validation_of_downloaded_archives_fails",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_blender_verification_order_should_call_verification_result_with_result_error_if_unpacking_archive_fails": {
            "name": "test_blender_verification_order_should_call_verification_result_with_result_error_if_unpacking_archive_fails",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_blender_verification_order_should_call_verification_result_with_result_error_if_render_image_raises_exception": {
            "name": "test_blender_verification_order_should_call_verification_result_with_result_error_if_render_image_raises_exception",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_blender_verification_order_should_call_verification_result_with_result_error_if_load_images_fails": {
            "name": "test_blender_verification_order_should_call_verification_result_with_result_error_if_load_images_fails",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_blender_verification_order_should_call_verification_result_with_result_error_if_compare_ssim_raise_value_error": {
            "name": "test_blender_verification_order_should_call_verification_result_with_result_error_if_compare_ssim_raise_value_error",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest.test_that_blender_verification_order_should_work_properly_when_there_is_more_than_one_frame_to_render": {
            "name": "test_that_blender_verification_order_should_work_properly_when_there_is_more_than_one_frame_to_render",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierVerificationIntegrationTest._verification_results_match": {
            "name": "_verification_results_match",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": []
            }
        },
        "VerifierVerificationIntegrationTest._verification_results_mismatch": {
            "name": "_verification_results_mismatch",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": []
            }
        },
        "VerifierVerificationIntegrationTest._compare_images_positive": {
            "name": "_compare_images_positive",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "_image_1": [],
                "_image_2": [],
                "subtask_id": []
            }
        },
        "VerifierVerificationIntegrationTest._compare_images_negative": {
            "name": "_compare_images_negative",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "_image_1": [],
                "_image_2": [],
                "subtask_id": []
            }
        },
        "VerifierVerificationIntegrationTest._send_blender_verification_order": {
            "name": "_send_blender_verification_order",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "current_time": [],
                "frames": []
            }
        }
    },
    "concent-master/concent_api/verifier/tests/test_utils.py": {
        "test_that_method_returns_correct_archives_list": {
            "name": "test_that_method_returns_correct_archives_list",
            "location": 324,
            "return": [],
            "arguments": {
                "expected_list": []
            }
        },
        "mocked_generate_blender_crop_file": {
            "name": "mocked_generate_blender_crop_file",
            "location": 333,
            "return": [],
            "arguments": {
                "script_file_out": [],
                "resolution": [],
                "borders_x": [],
                "borders_y": [],
                "use_compositing": [],
                "samples": [],
                "mounted_paths": []
            }
        },
        "VerifierUtilsTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_are_image_sizes_and_color_channels_equal_should_return_false_if_sizes_in_pixels_are_not_equal": {
            "name": "test_that_are_image_sizes_and_color_channels_equal_should_return_false_if_sizes_in_pixels_are_not_equal",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_are_image_sizes_and_color_channels_equal_should_return_false_if_color_channels_are_not_equal": {
            "name": "test_that_are_image_sizes_and_color_channels_equal_should_return_false_if_color_channels_are_not_equal",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_are_image_sizes_and_color_channels_equal_should_return_true_if_sizes_in_pixels_are_equal": {
            "name": "test_that_are_image_sizes_and_color_channels_equal_should_return_true_if_sizes_in_pixels_are_equal",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_parse_result_files_with_frames_function_should_return_correct_dict": {
            "name": "test_that_parse_result_files_with_frames_function_should_return_correct_dict",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_parse_results_files_with_frames_function_should_return_empty_dict_because_of_wrong_output_format": {
            "name": "test_that_parse_results_files_with_frames_function_should_return_empty_dict_because_of_wrong_output_format",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_render_images_by_frames_function_should_return_correct_output_files_names": {
            "name": "test_that_render_images_by_frames_function_should_return_correct_output_files_names",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_upload_blender_output_file_should_correctly_upload_files": {
            "name": "test_that_upload_blender_output_file_should_correctly_upload_files",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_raise_verification_mismatch_when_any_result_file_missing": {
            "name": "test_that_method_should_raise_verification_mismatch_when_any_result_file_missing",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_accept_frames_and_result_files_when_correct_variable_is_passed": {
            "name": "test_that_method_should_accept_frames_and_result_files_when_correct_variable_is_passed",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_log_warning_if_there_is_more_result_files_than_frames": {
            "name": "test_that_method_should_log_warning_if_there_is_more_result_files_than_frames",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_raise_verification_mismatch_when_frames_and_parsed_files_are_not_the_same": {
            "name": "test_that_method_should_raise_verification_mismatch_when_frames_and_parsed_files_are_not_the_same",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_accept_correct_frames_list_and_parsed_result_files": {
            "name": "test_that_method_should_accept_correct_frames_list_and_parsed_result_files",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_add_ssim_to_list": {
            "name": "test_that_method_should_add_ssim_to_list",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_raise_verification_mismatch_if_any_of_ssim_from_list_is_lower_than_verifier_min_ssim": {
            "name": "test_that_method_should_raise_verification_mismatch_if_any_of_ssim_from_list_is_lower_than_verifier_min_ssim",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_should_accept_ssim_list_and_delay_verification_result_with_match": {
            "name": "test_that_method_should_accept_ssim_list_and_delay_verification_result_with_match",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_for_the_same_images_metod_produces_ssim_equal_one": {
            "name": "test_that_for_the_same_images_metod_produces_ssim_equal_one",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_for_different_images_calculated_ssim_is_below_min": {
            "name": "test_that_for_different_images_calculated_ssim_is_below_min",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifierUtilsTest.test_that_method_raise_verification_error_when_images_have_diffrent_sizes": {
            "name": "test_that_method_raise_verification_error_when_images_have_diffrent_sizes",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateFilePathMethods.test_that_method_returns_correct_verifier_storage_file_path": {
            "name": "test_that_method_returns_correct_verifier_storage_file_path",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "storage_path": [],
                "file_name": [],
                "expected": []
            }
        },
        "TestGenerateFilePathMethods.test_that_method_returns_correct_upload_file_path": {
            "name": "test_that_method_returns_correct_upload_file_path",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [],
                "extension": [],
                "frame_number": [],
                "expected": []
            }
        },
        "TestGenerateFilePathMethods.test_that_method_returns_correct_base_blender_output_file_name": {
            "name": "test_that_method_returns_correct_base_blender_output_file_name",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "storage_path": [],
                "scene_file": [],
                "expected": []
            }
        },
        "TestGenerateFilePathMethods.test_that_method_returns_correct_full_blender_output_file_name": {
            "name": "test_that_method_returns_correct_full_blender_output_file_name",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "scene_file": [],
                "frame_number": [],
                "output_format": [],
                "expected": []
            }
        },
        "TestValidateDownloadedArchives.setUp": {
            "name": "setUp",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateDownloadedArchives.test_that_if_archive_is_not_a_zip_file_verification_mismatch_is_raised": {
            "name": "test_that_if_archive_is_not_a_zip_file_verification_mismatch_is_raised",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateDownloadedArchives.test_that_if_scene_file_is_missing_in_archived_files_verification_mismatch_is_raised": {
            "name": "test_that_if_scene_file_is_missing_in_archived_files_verification_mismatch_is_raised",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestValidateDownloadedArchives.test_that_if_one_of_the_files_to_be_unpacked_already_exists_verification_error_is_raised": {
            "name": "test_that_if_one_of_the_files_to_be_unpacked_already_exists_verification_error_is_raised",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateBlenderScript.test_that_function_is_called_with_right_parameters": {
            "name": "test_that_function_is_called_with_right_parameters",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_import_generate_blender_crop_file": []
            }
        }
    },
    "concent-master/concent_api/verifier/tests/__init__.py": {},
    "concent-master/docs/source/conf.py": {},
    "concent-master/middleman_protocol/setup.py": {
        "generate_version": {
            "name": "generate_version",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/constants.py": {},
    "concent-master/middleman_protocol/middleman_protocol/exceptions.py": {},
    "concent-master/middleman_protocol/middleman_protocol/message.py": {
        "AbstractFrame.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [],
                "request_id": []
            }
        },
        "AbstractFrame.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "AbstractFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AbstractFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AbstractFrame.get_frame_format": {
            "name": "get_frame_format",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AbstractFrame.deserialize": {
            "name": "deserialize",
            "location": 111,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_message": [],
                "public_key": []
            }
        },
        "AbstractFrame._validate_payload_type": {
            "name": "_validate_payload_type",
            "location": 153,
            "return": [],
            "arguments": {
                "cls": [],
                "payload_type": []
            }
        },
        "AbstractFrame._validate_request_id": {
            "name": "_validate_request_id",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "request_id": []
            }
        },
        "AbstractFrame._validate_signature": {
            "name": "_validate_signature",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": [],
                "raw_signed_part_of_the_frame": [],
                "signature": [],
                "public_key": []
            }
        },
        "AbstractFrame.serialize": {
            "name": "serialize",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "private_key": []
            }
        },
        "GolemMessageFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 220,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "GolemMessageFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "GolemMessageFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "ErrorFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 241,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "ErrorFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "ErrorFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "ErrorFrame.get_error_payload_format": {
            "name": "get_error_payload_format",
            "location": 278,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AuthenticationChallengeFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 292,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "AuthenticationChallengeFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AuthenticationChallengeFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AuthenticationResponseFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 309,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "AuthenticationResponseFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AuthenticationResponseFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "HeartbeatFrame._serialize_payload": {
            "name": "_serialize_payload",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "HeartbeatFrame._validate_payload": {
            "name": "_validate_payload",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "HeartbeatFrame._deserialize_payload": {
            "name": "_deserialize_payload",
            "location": 335,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/registry.py": {
        "register": {
            "name": "register",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "create_middleman_protocol_message": {
            "name": "create_middleman_protocol_message",
            "location": 25,
            "return": [],
            "arguments": {
                "payload_type": [],
                "payload": [],
                "request_id": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/stream.py": {
        "append_frame_separator": {
            "name": "append_frame_separator",
            "location": 15,
            "return": [],
            "arguments": {
                "raw_frame": []
            }
        },
        "remove_frame_separator": {
            "name": "remove_frame_separator",
            "location": 22,
            "return": [],
            "arguments": {
                "raw_message": []
            }
        },
        "escape_encode_raw_message": {
            "name": "escape_encode_raw_message",
            "location": 30,
            "return": [],
            "arguments": {
                "raw_message": []
            }
        },
        "escape_decode_raw_message": {
            "name": "escape_decode_raw_message",
            "location": 39,
            "return": [],
            "arguments": {
                "raw_message": []
            }
        },
        "split_stream": {
            "name": "split_stream",
            "location": 60,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "unescape_stream": {
            "name": "unescape_stream",
            "location": 90,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "send_over_stream": {
            "name": "send_over_stream",
            "location": 109,
            "return": [],
            "arguments": {
                "connection": [],
                "raw_message": [],
                "private_key": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/stream_async.py": {
        "map_exception_to_error_code": {
            "name": "map_exception_to_error_code",
            "location": 21,
            "return": [],
            "arguments": {
                "exception": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/__init__.py": {},
    "concent-master/middleman_protocol/middleman_protocol/concent_golem_messages/message.py": {
        "NonceAbstractMessage.slots": {
            "name": "slots",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonceAbstractMessage.deserialize_slot": {
            "name": "deserialize_slot",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TransactionAbstractMessage.slots": {
            "name": "slots",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionAbstractMessage.deserialize_slot": {
            "name": "deserialize_slot",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TransactionSigningRequest.deserialize_slot": {
            "name": "deserialize_slot",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "SignedTransaction.slots": {
            "name": "slots",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedTransaction.deserialize_slot": {
            "name": "deserialize_slot",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/concent_golem_messages/validators.py": {
        "validate_bytes": {
            "name": "validate_bytes",
            "location": 6,
            "return": [],
            "arguments": {
                "field_name": [],
                "value": [],
                "maximum_allowed_length": []
            }
        },
        "validate_maximum_int_length": {
            "name": "validate_maximum_int_length",
            "location": 25,
            "return": [],
            "arguments": {
                "field_name": [],
                "value": [],
                "maximum_allowed_length": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/concent_golem_messages/__init__.py": {},
    "concent-master/middleman_protocol/middleman_protocol/tests/factories.py": {
        "TransactionAbstractMessage.set_to": {
            "name": "set_to",
            "location": 40,
            "return": [],
            "arguments": {
                "msg": [],
                "_create": [],
                "_extracted": []
            }
        },
        "TransactionSigningRequestFactory.set_from": {
            "name": "set_from",
            "location": 53,
            "return": [],
            "arguments": {
                "msg": [],
                "_create": [],
                "_extracted": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/test_concent_golem_messages.py": {
        "SerializationMixin.get_instance": {
            "name": "get_instance",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializationMixin.test_serialization": {
            "name": "test_serialization",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSigningRequestTest.test_factory": {
            "name": "test_factory",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionSigningRequestTest.test_validation": {
            "name": "test_validation",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedTransactionTest.test_factory": {
            "name": "test_factory",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedTransactionTest.test_validation": {
            "name": "test_validation",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionRejectedTest.test_factory": {
            "name": "test_factory",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/test_message.py": {
        "TestMessageMiddlemanProtocol.test_that_create_middleman_protocol_message_with_various_payload_types_should_create_proper_middleman_message": {
            "name": "test_that_create_middleman_protocol_message_with_various_payload_types_should_create_proper_middleman_message",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "expected_middleman_message_type": [],
                "payload_type": [],
                "payload": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_abstract_middleman_message_instantiation_should_raise_exception": {
            "name": "test_that_abstract_middleman_message_instantiation_should_raise_exception",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_serializing_and_deserializing_message_should_preserve_original_data": {
            "name": "test_that_serializing_and_deserializing_message_should_preserve_original_data",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_sending_message_over_tcp_socket_should_preserve_original_data": {
            "name": "test_that_sending_message_over_tcp_socket_should_preserve_original_data",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": [],
                "unused_tcp_port": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_serializing_different_golem_message_middleman_messages_should_keep_part_of_header_the_same": {
            "name": "test_that_serializing_different_golem_message_middleman_messages_should_keep_part_of_header_the_same",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_serializing_and_deserializing_message_with_wrong_signature_should_raise_exception": {
            "name": "test_that_serializing_and_deserializing_message_with_wrong_signature_should_raise_exception",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_serializing_and_deserializing_message_with_wrong_payload_type_should_raise_exception": {
            "name": "test_that_serializing_and_deserializing_message_with_wrong_payload_type_should_raise_exception",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMessageMiddlemanProtocol.test_that_serializing_and_deserializing_message_too_short_should_raise_exception": {
            "name": "test_that_serializing_and_deserializing_message_too_short_should_raise_exception",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/test_registry.py": {
        "TestRegistryMiddlemanProtocol.test_that_decorating_class_should_add_it_to_registry": {
            "name": "test_that_decorating_class_should_add_it_to_registry",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistryMiddlemanProtocol.test_that_decorating_class_without_payload_type_should_raise_exception": {
            "name": "test_that_decorating_class_without_payload_type_should_raise_exception",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistryMiddlemanProtocol.test_that_decorating_class_with_unknown_payload_type_should_raise_exception": {
            "name": "test_that_decorating_class_with_unknown_payload_type_should_raise_exception",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRegistryMiddlemanProtocol.test_that_decorating_classes_same_payload_type_should_raise_exception": {
            "name": "test_that_decorating_classes_same_payload_type_should_raise_exception",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/test_stream.py": {
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_append_frame_separator_should_add_frame_separator_to_given_bytes": {
            "name": "test_that_append_frame_separator_should_add_frame_separator_to_given_bytes",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_remove_frame_separator_should_remove_frame_separator_from_given_bytes": {
            "name": "test_that_remove_frame_separator_should_remove_frame_separator_from_given_bytes",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_remove_frame_separator_should_remove_frame_separator_from_given_bytes_only_at_the_end": {
            "name": "test_that_remove_frame_separator_should_remove_frame_separator_from_given_bytes_only_at_the_end",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_remove_frame_separator_should_raise_exception_if_separator_is_not_at_the_end": {
            "name": "test_that_remove_frame_separator_should_raise_exception_if_separator_is_not_at_the_end",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_escape_encode_raw_message_should_replace_occurrences_of_frame_separator_and_escape_character": {
            "name": "test_that_escape_encode_raw_message_should_replace_occurrences_of_frame_separator_and_escape_character",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_escape_decode_raw_message_should_replace_occurrences_of_escape_sequences": {
            "name": "test_that_escape_decode_raw_message_should_replace_occurrences_of_escape_sequences",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_escape_decode_raw_message_with_broken_escaping_should_raise_exception": {
            "name": "test_that_escape_decode_raw_message_with_broken_escaping_should_raise_exception",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_escape_character_followed_by_related_escape_sequence_should_be_encoded_and_decoded_correctly": {
            "name": "test_that_escape_character_followed_by_related_escape_sequence_should_be_encoded_and_decoded_correctly",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEscapingAndHandlingSeparatorMiddlemanProtocol.test_that_frame_separator_followed_by_related_escape_sequence_should_be_encoded_and_decoded_correctly": {
            "name": "test_that_frame_separator_followed_by_related_escape_sequence_should_be_encoded_and_decoded_correctly",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnescapeStreamHelperMiddlemanProtocol.test_that_receiving_any_message_should_be_handled_correctly": {
            "name": "test_that_receiving_any_message_should_be_handled_correctly",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": [],
                "unused_tcp_port": []
            }
        },
        "TestUnescapeStreamHelperMiddlemanProtocol.test_that_receiving_a_series_of_messages_should_be_handled_correctly": {
            "name": "test_that_receiving_a_series_of_messages_should_be_handled_correctly",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestUnescapeStreamHelperMiddlemanProtocol.test_that_receiving_encoded_message_should_decode_on_the_fly": {
            "name": "test_that_receiving_encoded_message_should_decode_on_the_fly",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestUnescapeStreamHelperMiddlemanProtocol.test_that_receiving_wrongly_encoded_message_should_return_none": {
            "name": "test_that_receiving_wrongly_encoded_message_should_return_none",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestUnescapeStreamHelperMiddlemanProtocol.test_that_exceeding_maximum_frame_length_should_treat_exceeded_frame_as_invalid": {
            "name": "test_that_exceeding_maximum_frame_length_should_treat_exceeded_frame_as_invalid",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestSplitStreamHelperMiddlemanProtocol.test_that_receiving_any_message_should_be_handled_correctly": {
            "name": "test_that_receiving_any_message_should_be_handled_correctly",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "middleman_message_type": [],
                "payload": [],
                "unused_tcp_port": []
            }
        },
        "TestSplitStreamHelperMiddlemanProtocol.test_that_receiving_a_series_of_messages_should_be_handled_correctly": {
            "name": "test_that_receiving_a_series_of_messages_should_be_handled_correctly",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestSplitStreamHelperMiddlemanProtocol.test_that_raising_error_in_generator_should_call_close_on_socket": {
            "name": "test_that_raising_error_in_generator_should_call_close_on_socket",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        },
        "TestSplitStreamHelperMiddlemanProtocol.test_that_when_socket_receives_no_bytes_socket_error_is_raised": {
            "name": "test_that_when_socket_receives_no_bytes_socket_error_is_raised",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/test_stream_async.py": {
        "_run_test_in_event_loop": {
            "name": "_run_test_in_event_loop",
            "location": 24,
            "return": [],
            "arguments": {
                "event_loop": [],
                "coroutine": []
            }
        },
        "test_that_when_frame_with_escaped_sequence_and_separator_is_received_unescaped_frame_is_returned": {
            "name": "test_that_when_frame_with_escaped_sequence_and_separator_is_received_unescaped_frame_is_returned",
            "location": 30,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        },
        "test_that_middleman_protocol_exceptions_are_correctly_mapped_to_error_codes": {
            "name": "test_that_middleman_protocol_exceptions_are_correctly_mapped_to_error_codes",
            "location": 53,
            "return": [],
            "arguments": {
                "exception": [],
                "expected_error_code": []
            }
        },
        "test_that_sent_data_is_escaped_and_contains_frame_separator": {
            "name": "test_that_sent_data_is_escaped_and_contains_frame_separator",
            "location": 57,
            "return": [],
            "arguments": {
                "event_loop": []
            }
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/utils.py": {
        "assertpy_bytes_starts_with": {
            "name": "assertpy_bytes_starts_with",
            "location": 11,
            "return": [],
            "arguments": {
                "data": [],
                "starting_data": []
            }
        },
        "async_stream_actor_mock": {
            "name": "async_stream_actor_mock",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "prepare_mocked_reader": {
            "name": "prepare_mocked_reader",
            "location": 37,
            "return": [],
            "arguments": {
                "return_sequence": []
            }
        },
        "prepare_mocked_writer": {
            "name": "prepare_mocked_writer",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "generate_ecc_key_pair": {
            "name": "generate_ecc_key_pair",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/middleman_protocol/middleman_protocol/tests/__init__.py": {},
    "concent-master/signing_service/setup.py": {
        "generate_version": {
            "name": "generate_version",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/signing_service/signing_service/constants.py": {},
    "concent-master/signing_service/signing_service/exceptions.py": {},
    "concent-master/signing_service/signing_service/main.py": {},
    "concent-master/signing_service/signing_service/signing_service.py": {
        "_parse_arguments": {
            "name": "_parse_arguments",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "SigningService.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "initial_reconnect_delay": [],
                "concent_public_key": [],
                "signing_service_private_key": [],
                "ethereum_private_key": [],
                "maximum_reconnect_attempts": [],
                "notifier": []
            }
        },
        "SigningService.run": {
            "name": "run",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._attempt_reconnection": {
            "name": "_attempt_reconnection",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._connect": {
            "name": "_connect",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "tcp_socket": []
            }
        },
        "SigningService._authenticate": {
            "name": "_authenticate",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "receive_frame_generator": [],
                "tcp_socket": []
            }
        },
        "SigningService._handle_connection": {
            "name": "_handle_connection",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "receive_frame_generator": [],
                "tcp_socket": []
            }
        },
        "SigningService._prepare_error_response": {
            "name": "_prepare_error_response",
            "location": 321,
            "return": [],
            "arguments": {
                "error_code": [],
                "exception_object": []
            }
        },
        "SigningService._increase_delay": {
            "name": "_increase_delay",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._was_sigterm_caught": {
            "name": "_was_sigterm_caught",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._set_was_sigterm_caught_true": {
            "name": "_set_was_sigterm_caught_true",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "signum": [],
                "frame": []
            }
        },
        "SigningService._validate_arguments": {
            "name": "_validate_arguments",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._get_signed_transaction": {
            "name": "_get_signed_transaction",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_signing_request": []
            }
        },
        "SigningService._get_authentication_challenge_signature": {
            "name": "_get_authentication_challenge_signature",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "authentication_challenge": []
            }
        },
        "SigningService._get_daily_transaction_threshold_file_path": {
            "name": "_get_daily_transaction_threshold_file_path",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "SigningService._get_signing_service_daily_transaction_sum_so_far": {
            "name": "_get_signing_service_daily_transaction_sum_so_far",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningService._add_payload_value_to_daily_transactions_sum": {
            "name": "_add_payload_value_to_daily_transactions_sum",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "transactions_sum": []
            }
        },
        "SigningService._update_daily_transactions_limit_file_name": {
            "name": "_update_daily_transactions_limit_file_name",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/signing_service/signing_service/utils.py": {
        "is_public_key_valid": {
            "name": "is_public_key_valid",
            "location": 28,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "is_private_key_valid": {
            "name": "is_private_key_valid",
            "location": 40,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "make_secret_provider_factory": {
            "name": "make_secret_provider_factory",
            "location": 53,
            "return": [],
            "arguments": {
                "read_command_line": [],
                "env_variable_name": [],
                "use_file": [],
                "base64_convert": [],
                "decode_to_string": []
            }
        },
        "get_notifier": {
            "name": "get_notifier",
            "location": 204,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "make_secret_provider_factory.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "SecretProvider.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "read_command_line": [],
                "env_variable_name": [],
                "use_file": [],
                "base64_convert": [],
                "decode_to_string": [],
                "option_strings": [],
                "dest": [],
                "required": [],
                "help": []
            }
        },
        "SecretProvider.__call__": {
            "name": "__call__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "value": [],
                "option_string": []
            }
        },
        "Notifier.send": {
            "name": "send",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ConsoleNotifier.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "logger_": []
            }
        },
        "ConsoleNotifier.send": {
            "name": "send",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "EmailNotifier.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "from_email_address": [],
                "from_email_password": [],
                "to_email_addresses": []
            }
        },
        "EmailNotifier.send": {
            "name": "send",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "EmailNotifier.__send_email": {
            "name": "__send_email",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "EmailNotifier.__connect_to_gmail_smtp_server": {
            "name": "__connect_to_gmail_smtp_server",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailNotifier.__end_smtp_server_connection": {
            "name": "__end_smtp_server_connection",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/signing_service/signing_service/__init__.py": {},
    "concent-master/signing_service/signing_service/tests/test_authenticate.py": {
        "TestSigningServiceAuthenticate.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": []
            }
        },
        "TestSigningServiceAuthenticate.test_that_authenticate_should_send_authentication_response_if_authentication_challenge_is_correct": {
            "name": "test_that_authenticate_should_send_authentication_response_if_authentication_challenge_is_correct",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceAuthenticate.test_that_authenticate_should_raise_socket_error_if_received_frame_is_not_authentication_challenge": {
            "name": "test_that_authenticate_should_raise_socket_error_if_received_frame_is_not_authentication_challenge",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceAuthenticate.test_that_authenticate_should_raise_socket_error_if_received_frame_is_invalid": {
            "name": "test_that_authenticate_should_raise_socket_error_if_received_frame_is_invalid",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceAuthenticate.test_that_authenticate_should_raise_socket_error_if_receiving_frame_is_timeouted": {
            "name": "test_that_authenticate_should_raise_socket_error_if_receiving_frame_is_timeouted",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceAuthenticate.test_that_authenticate_should_raise_socket_error_if_socket_error_is_raised_after_sending_authentication_response": {
            "name": "test_that_authenticate_should_raise_socket_error_if_socket_error_is_raised_after_sending_authentication_response",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceAuthenticate._prepare_and_execute_handle_connection": {
            "name": "_prepare_and_execute_handle_connection",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "raw_message": []
            }
        },
        "TestSigningServiceAuthenticate._prepare_and_execute_handle_connection.mocked_generator": {
            "name": "mocked_generator",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/signing_service/signing_service/tests/test_handle_connection.py": {
        "TestSigningServiceHandleConnection.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_signed_transaction_if_frame_is_correct": {
            "name": "test_that__handle_connection_should_send_golem_message_signed_transaction_if_frame_is_correct",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_signed_transaction_if_warning_daily_threshold_exceeded": {
            "name": "test_that__handle_connection_should_send_golem_message_signed_transaction_if_warning_daily_threshold_exceeded",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_reject_if_max_daily_threshold_exceeded": {
            "name": "test_that__handle_connection_should_send_golem_message_reject_if_max_daily_threshold_exceeded",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_error_frame_if_frame_signature_is_wrong": {
            "name": "test_that__handle_connection_should_send_error_frame_if_frame_signature_is_wrong",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_error_frame_if_payload_type_is_invalid": {
            "name": "test_that__handle_connection_should_send_error_frame_if_payload_type_is_invalid",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_error_frame_if_payload_is_invalid": {
            "name": "test_that__handle_connection_should_send_error_frame_if_payload_is_invalid",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_error_frame_if_payload_golem_message_type_cannot_be_deserialized": {
            "name": "test_that__handle_connection_should_send_error_frame_if_payload_golem_message_type_cannot_be_deserialized",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_error_frame_if_payload_golem_message_type_is_unexpected": {
            "name": "test_that__handle_connection_should_send_error_frame_if_payload_golem_message_type_is_unexpected",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_continue_loop_when_heartbeat_frame_is_received": {
            "name": "test_that__handle_connection_should_continue_loop_when_heartbeat_frame_is_received",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceHandleConnection._prepare_and_execute_handle_connection": {
            "name": "_prepare_and_execute_handle_connection",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "raw_message": [],
                "handle_connection_wrapper": [],
                "expect_response_from_scoket": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_signed_transaction_if_frame_is_correct.handle_connection_wrapper": {
            "name": "handle_connection_wrapper",
            "location": 59,
            "return": [],
            "arguments": {
                "signing_service": [],
                "connection": [],
                "receive_frame_generator": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_signed_transaction_if_warning_daily_threshold_exceeded.handle_connection_wrapper": {
            "name": "handle_connection_wrapper",
            "location": 89,
            "return": [],
            "arguments": {
                "signing_service": [],
                "connection": [],
                "receive_frame_generator": []
            }
        },
        "TestSigningServiceHandleConnection.test_that__handle_connection_should_send_golem_message_reject_if_max_daily_threshold_exceeded.handle_connection_wrapper": {
            "name": "handle_connection_wrapper",
            "location": 119,
            "return": [],
            "arguments": {
                "signing_service": [],
                "connection": [],
                "receive_frame_generator": []
            }
        },
        "TestSigningServiceHandleConnection._prepare_and_execute_handle_connection.mocked_generator": {
            "name": "mocked_generator",
            "location": 284,
            "return": [],
            "arguments": {}
        }
    },
    "concent-master/signing_service/signing_service/tests/test_run.py": {
        "TestSigningServiceRun.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_should_be_instantiated_correctly_with_all_parameters": {
            "name": "test_that_signing_service_should_be_instantiated_correctly_with_all_parameters",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_should_run_full_loop_when_instantiated_with_all_parameters": {
            "name": "test_that_signing_service_should_run_full_loop_when_instantiated_with_all_parameters",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_should_exit_gracefully_on_keyboard_interrupt": {
            "name": "test_that_signing_service_should_exit_gracefully_on_keyboard_interrupt",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_should_reraise_unrecognized_exception": {
            "name": "test_that_signing_service_should_reraise_unrecognized_exception",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_should_reconnect_when_expected_socket_error_was_caught": {
            "name": "test_that_signing_service_should_reconnect_when_expected_socket_error_was_caught",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_will_reconnect_on_socket_errors_and_exit_gracefully_when_exceeds_maximum_number_of_reconnection_attempts": {
            "name": "test_that_signing_service_will_reconnect_on_socket_errors_and_exit_gracefully_when_exceeds_maximum_number_of_reconnection_attempts",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceRun.test_that_signing_service_will_reconnect_after_authentication_fails": {
            "name": "test_that_signing_service_will_reconnect_after_authentication_fails",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/signing_service/signing_service/tests/test_signing_service_methods.py": {
        "SigningServiceGetSignedTransactionTestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceGetSignedTransactionTestCase.test_that_get_signed_transaction_should_return_transaction_signed_if_transaction_was_signed_correctly": {
            "name": "test_that_get_signed_transaction_should_return_transaction_signed_if_transaction_was_signed_correctly",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceGetSignedTransactionTestCase.test_that_get_signed_transaction_should_return_transaction_rejected_if_transaction_cannot_be_recreated_from_received_transaction_signing_request": {
            "name": "test_that_get_signed_transaction_should_return_transaction_rejected_if_transaction_cannot_be_recreated_from_received_transaction_signing_request",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceGetSignedTransactionTestCase.test_that_get_signed_transaction_should_return_transaction_rejected_if_transaction_cannot_be_signed": {
            "name": "test_that_get_signed_transaction_should_return_transaction_rejected_if_transaction_cannot_be_signed",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceGetAuthenticationChallengeSignatureTestCase.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceGetAuthenticationChallengeSignatureTestCase.test_that_get_authentication_challenge_signature_should_return_signature_of_passed_bytes": {
            "name": "test_that_get_authentication_challenge_signature_should_return_signature_of_passed_bytes",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceIncreaseDelay.setUp": {
            "name": "setUp",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "unused_tcp_port_factory": []
            }
        },
        "TestSigningServiceIncreaseDelay.test_that_initial_reconnect_delay_should_be_set_to_passed_value": {
            "name": "test_that_initial_reconnect_delay_should_be_set_to_passed_value",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceIncreaseDelay.test_that_current_reconnect_delay_should_be_set_to_reconnect_delay_after_first_call_to__increase_delay": {
            "name": "test_that_current_reconnect_delay_should_be_set_to_reconnect_delay_after_first_call_to__increase_delay",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceIncreaseDelay.test_that_current_reconnect_delay_should_be_doubled_after_next_call_to__increase_delay": {
            "name": "test_that_current_reconnect_delay_should_be_doubled_after_next_call_to__increase_delay",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigningServiceIncreaseDelay.test_that_current_reconnect_delay_should_be_set_to_allowed_maximum_after_it_extends_it": {
            "name": "test_that_current_reconnect_delay_should_be_set_to_allowed_maximum_after_it_extends_it",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_parse_correct_input": {
            "name": "test_that_argument_parser_should_parse_correct_input",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_parse_correct_input_and_use_default_values": {
            "name": "test_that_argument_parser_should_parse_correct_input_and_use_default_values",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_fail_if_port_cannot_be_casted_to_int": {
            "name": "test_that_argument_parser_should_fail_if_port_cannot_be_casted_to_int",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_raise_exception_if_ethereum_key_cannot_be_decoded_to_string": {
            "name": "test_that_argument_parser_should_raise_exception_if_ethereum_key_cannot_be_decoded_to_string",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_parse_correct_secrets_from_env_variables": {
            "name": "test_that_argument_parser_should_parse_correct_secrets_from_env_variables",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parses_should_fail_if_file_with_secrets_is_missing": {
            "name": "test_that_argument_parses_should_fail_if_file_with_secrets_is_missing",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parser_should_parse_parameters_if_passed_files_exist": {
            "name": "test_that_argument_parser_should_parse_parameters_if_passed_files_exist",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_argument_parses_should_fail_gracefully_when_unable_to_decode_base64_value": {
            "name": "test_that_argument_parses_should_fail_gracefully_when_unable_to_decode_base64_value",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_email_notifier_is_created_when_proper_arguments_are_provided_via_command_line": {
            "name": "test_that_email_notifier_is_created_when_proper_arguments_are_provided_via_command_line",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceParseArgumentsTestCase.test_that_console_notifier_is_created_by_default": {
            "name": "test_that_console_notifier_is_created_by_default",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.setUp": {
            "name": "setUp",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.test_that_signing_service__validate_arguments_should_raise_exception_on_port_number_below_or_above_range": {
            "name": "test_that_signing_service__validate_arguments_should_raise_exception_on_port_number_below_or_above_range",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.test_that_signing_service__validate_arguments_should_raise_exception_on_initial_reconnect_delay_lower_than_zero": {
            "name": "test_that_signing_service__validate_arguments_should_raise_exception_on_initial_reconnect_delay_lower_than_zero",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_length_of_concent_public_key": {
            "name": "test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_length_of_concent_public_key",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_length_of_ethereum_private_key": {
            "name": "test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_length_of_ethereum_private_key",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceValidateArgumentsTestCase.test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_characters_in_ethereum_private_key": {
            "name": "test_that_signing_service__validate_arguments_should_raise_exception_on_wrong_characters_in_ethereum_private_key",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceDailyThresholdTestCase.setUp": {
            "name": "setUp",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceDailyThresholdTestCase.test_that_signing_service_get_daily_transaction_threshold_file_directory_should_return_existing_file": {
            "name": "test_that_signing_service_get_daily_transaction_threshold_file_directory_should_return_existing_file",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceDailyThresholdTestCase.test_that_add_payload_value_to_daily_transactions_sum_write_int_and_get_signing_service_daily_transaction_sum_so_far_returns_correct_value": {
            "name": "test_that_add_payload_value_to_daily_transactions_sum_write_int_and_get_signing_service_daily_transaction_sum_so_far_returns_correct_value",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceDailyThresholdTestCase.test_that_signing_service_get_signing_service_daily_transaction_sum_so_far_returns_zero_in_case_of_value_error": {
            "name": "test_that_signing_service_get_signing_service_daily_transaction_sum_so_far_returns_zero_in_case_of_value_error",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceDailyThresholdTestCase.test_that_signing_service_update_daily_transactions_limit_file_name_overwrite_old_value": {
            "name": "test_that_signing_service_update_daily_transactions_limit_file_name_overwrite_old_value",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceSetSigtermTestCase.setUp": {
            "name": "setUp",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceSetSigtermTestCase.test_that_calling_set_was_sigterm_caught_sets_was_sigterm_caught_to_true": {
            "name": "test_that_calling_set_was_sigterm_caught_sets_was_sigterm_caught_to_true",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/signing_service/signing_service/tests/test_utils.py": {
        "SigningServiceIsPublicKeyValidTestCase.test_that_is_public_key_valid_should_return_true_for_correct_public_key_length": {
            "name": "test_that_is_public_key_valid_should_return_true_for_correct_public_key_length",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPublicKeyValidTestCase.test_that_is_public_key_valid_public_should_return_false_for_too_short_public_key_length": {
            "name": "test_that_is_public_key_valid_public_should_return_false_for_too_short_public_key_length",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPublicKeyValidTestCase.test_that_is_public_key_valid_should_return_false_for_too_long_public_key_length": {
            "name": "test_that_is_public_key_valid_should_return_false_for_too_long_public_key_length",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPrivateKeyValidTestCase.test_that_is_private_key_valid_should_return_true_for_correct_private_key_length": {
            "name": "test_that_is_private_key_valid_should_return_true_for_correct_private_key_length",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPrivateKeyValidTestCase.test_that_is_private_key_valid_should_return_false_for_too_short_private_key_length": {
            "name": "test_that_is_private_key_valid_should_return_false_for_too_short_private_key_length",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPrivateKeyValidTestCase.test_that_is_private_key_valid_return_false_for_too_long_private_key_length": {
            "name": "test_that_is_private_key_valid_return_false_for_too_long_private_key_length",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SigningServiceIsPrivateKeyValidTestCase.test_that_is_private_key_valid_return_false_for_invalid_characters": {
            "name": "test_that_is_private_key_valid_return_false_for_invalid_characters",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "concent-master/signing_service/signing_service/tests/utils.py": {
        "get_timestamp_string": {
            "name": "get_timestamp_string",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "SigningServiceIntegrationTestCase._get_deserialized_transaction_signing_request": {
            "name": "_get_deserialized_transaction_signing_request",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "nonce": []
            }
        },
        "SigningServiceIntegrationTestCase._get_serialized_transaction_signing_request": {
            "name": "_get_serialized_transaction_signing_request",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "signed_transaction": [],
                "concent_private_key": [],
                "public_key": [],
                "timestamp": []
            }
        },
        "SigningServiceIntegrationTestCase._get_deserialized_signed_transaction": {
            "name": "_get_deserialized_signed_transaction",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "SigningServiceIntegrationTestCase._get_serialized_signed_transaction": {
            "name": "_get_serialized_signed_transaction",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_signing_request": [],
                "concent_private_key": [],
                "public_key": [],
                "timestamp": []
            }
        },
        "SigningServiceIntegrationTestCase._get_deserialized_transaction_rejected": {
            "name": "_get_deserialized_transaction_rejected",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "SigningServiceIntegrationTestCase._get_serialized_transaction_rejected": {
            "name": "_get_serialized_transaction_rejected",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_rejected": [],
                "concent_private_key": [],
                "public_key": [],
                "timestamp": []
            }
        }
    },
    "concent-master/signing_service/signing_service/tests/__init__.py": {}
}
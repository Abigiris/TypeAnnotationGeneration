{
    "configureme-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 62,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configureme-master/configureme/core.py": {
        "ConfigVar.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "alias": [],
                "default": [],
                "use_env": []
            }
        },
        "ConfigVar.value": {
            "name": "value",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ConfigVar.is_renamed": {
            "name": "is_renamed",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigVars.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigVars.add": {
            "name": "add",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ConfigVars.get": {
            "name": "get",
            "location": 49,
            "return": [
                "Optional[ConfigVar]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ConfigVars.exists": {
            "name": "exists",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ConfigVars.to_dict": {
            "name": "to_dict",
            "location": 60,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__contains__": {
            "name": "__contains__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Config.__setitem__": {
            "name": "__setitem__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Config.__getitem__": {
            "name": "__getitem__",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Config.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.from_object": {
            "name": "from_object",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        },
        "Config.from_dotenv": {
            "name": "from_dotenv",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Config.from_envar": {
            "name": "from_envar",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "rename": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        }
    },
    "configureme-master/configureme/helpers.py": {
        "is_boolean_state": {
            "name": "is_boolean_state",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_integer": {
            "name": "is_integer",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_float": {
            "name": "is_float",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_integer": {
            "name": "get_integer",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_float": {
            "name": "get_float",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_boolean": {
            "name": "get_boolean",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "str_to_py": {
            "name": "str_to_py",
            "location": 57,
            "return": [
                "Union[(float, int, str)]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "dotenv_to_dict": {
            "name": "dotenv_to_dict",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_envar": {
            "name": "get_envar",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "envar_exists": {
            "name": "envar_exists",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "configureme-master/configureme/__init__.py": {},
    "configureme-master/configureme/__version__.py": {},
    "configureme-master/examples/__init__.py": {},
    "configureme-master/examples/basic/app.py": {},
    "configureme-master/examples/basic/config.py": {},
    "configureme-master/examples/basic/__init__.py": {},
    "configureme-master/tests/config.py": {},
    "configureme-master/tests/conftest.py": {
        "env_path": {
            "name": "env_path",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "configureme-master/tests/test_core.py": {
        "TestConfig.test_from_object": {
            "name": "test_from_object",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_dotenv": {
            "name": "test_from_dotenv",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_path": []
            }
        },
        "TestConfig.test_from_obj_and_then_dotenv": {
            "name": "test_from_obj_and_then_dotenv",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_path": []
            }
        },
        "TestConfig.test_from_envar_that_doesnt_exist_raises_warning": {
            "name": "test_from_envar_that_doesnt_exist_raises_warning",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_envar_that_doesnt_exist_but_exists_in_config_object": {
            "name": "test_from_envar_that_doesnt_exist_but_exists_in_config_object",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_envar_and_change_after_setting_value": {
            "name": "test_from_envar_and_change_after_setting_value",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_env_var_is_set_then_gets_removed_without_default_raises_exception": {
            "name": "test_env_var_is_set_then_gets_removed_without_default_raises_exception",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_env_var_is_set_then_gets_removed_with_config_value_set": {
            "name": "test_env_var_is_set_then_gets_removed_with_config_value_set",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_user_can_change_value_manually": {
            "name": "test_user_can_change_value_manually",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_user_can_change_value_manually_but_env_value_takes_precedence": {
            "name": "test_user_can_change_value_manually_but_env_value_takes_precedence",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_user_can_use_number_types_with_dotenv": {
            "name": "test_user_can_use_number_types_with_dotenv",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_path": []
            }
        },
        "TestConfig.test_dunder_str": {
            "name": "test_dunder_str",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_env_var_can_be_renamed": {
            "name": "test_env_var_can_be_renamed",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_env_var_that_equals_not_found": {
            "name": "test_from_env_var_that_equals_not_found",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_env_var_with_default_value": {
            "name": "test_from_env_var_with_default_value",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_from_env_var_with_default_value_and_alias": {
            "name": "test_from_env_var_with_default_value_and_alias",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "configureme-master/tests/test_examples.py": {
        "test_basic_example": {
            "name": "test_basic_example",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "configureme-master/tests/test_helpers.py": {
        "test_is_boolean_state": {
            "name": "test_is_boolean_state",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_integer": {
            "name": "test_is_integer",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_float": {
            "name": "test_is_float",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_integer": {
            "name": "test_get_integer",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_float": {
            "name": "test_get_float",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_boolean": {
            "name": "test_get_boolean",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_py": {
            "name": "test_str_to_py",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dotenv_to_dict": {
            "name": "test_dotenv_to_dict",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "env_path": []
            }
        },
        "test_get_envar_that_doesnt_exist": {
            "name": "test_get_envar_that_doesnt_exist",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_envar_that_does_exist": {
            "name": "test_get_envar_that_does_exist",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_envar_exists_is_false_when_no_var_exists": {
            "name": "test_envar_exists_is_false_when_no_var_exists",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_envar_exists_is_true_when_env_var_exists": {
            "name": "test_envar_exists_is_true_when_env_var_exists",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "configureme-master/tests/__init__.py": {}
}
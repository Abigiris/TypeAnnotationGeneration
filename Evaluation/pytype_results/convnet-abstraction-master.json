{
    "convnet-abstraction-master/python/aug2conv.py": {
        "shiftY": {
            "name": "shiftY",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "offset": [
                    "int"
                ]
            }
        },
        "shiftX": {
            "name": "shiftX",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "offset": [
                    "int"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "size": [
                    "int"
                ]
            }
        },
        "getData": {
            "name": "getData",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Augmenter.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Augmenter.aug1": {
            "name": "aug1",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "Augmenter.augBatch": {
            "name": "augBatch",
            "location": 80,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "imgs": [],
                "labels": []
            }
        },
        "Augmenter.augTuples": {
            "name": "augTuples",
            "location": 106,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "tt": []
            }
        },
        "Augmenter.augFirstTuple": {
            "name": "augFirstTuple",
            "location": 109,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "tt": []
            }
        },
        "Augmenter.augBatch._batchItr": {
            "name": "_batchItr",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "convnet-abstraction-master/python/aug2conv_test.py": {
        "testInPlace": {
            "name": "testInPlace",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testIter": {
            "name": "testIter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testAugBatch": {
            "name": "testAugBatch",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testGetData": {
            "name": "testGetData",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "convnet-abstraction-master/python/const.py": {},
    "convnet-abstraction-master/python/graphPlot.py": {
        "setCanvas": {
            "name": "setCanvas",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "drawEdgesAndLabels": {
            "name": "drawEdgesAndLabels",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [],
                "g": [],
                "edgeFactory": []
            }
        },
        "drawGraph": {
            "name": "drawGraph",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "g": [],
                "layoutG": []
            }
        }
    },
    "convnet-abstraction-master/python/udacity-mxnet.py": {
        "activaton": {
            "name": "activaton",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "convnet-abstraction-master/python/fc2convnet/main.py": {
        "pad": {
            "name": "pad",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "convnet-abstraction-master/python/gan/GAN.py": {
        "transform": {
            "name": "transform",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "target_wd": [],
                "target_ht": []
            }
        },
        "getImageList": {
            "name": "getImageList",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "base_path": [],
                "training_folder": []
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "img_arr": []
            }
        }
    },
    "convnet-abstraction-master/python/harmonicNet/draft.py": {},
    "convnet-abstraction-master/python/harmonicNet/mnist.py": {
        "HConv_SO2.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/RNN-gluon.py": {
        "rnn_batch": {
            "name": "rnn_batch",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "batch_size": []
            }
        },
        "get_batch": {
            "name": "get_batch",
            "location": 122,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "source": [],
                "i": [],
                "seq": []
            }
        },
        "detach": {
            "name": "detach",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "hidden": []
            }
        },
        "trainGluonRNN": {
            "name": "trainGluonRNN",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "epochs": [],
                "train_data": [],
                "seq": []
            }
        },
        "evaluate_seq2seq": {
            "name": "evaluate_seq2seq",
            "location": 183,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "model": [],
                "input_string": [],
                "seq_length": [],
                "batch_size": []
            }
        },
        "mapInput": {
            "name": "mapInput",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "input_str": [],
                "output_str": []
            }
        },
        "generate_random_text": {
            "name": "generate_random_text",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "input_string": [],
                "seq_length": [],
                "batch_size": [],
                "sentence_length": []
            }
        },
        "GluonRNNModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "vocab_size": [],
                "num_embed": [],
                "num_hidden": [],
                "num_layers": [],
                "dropout": []
            }
        },
        "GluonRNNModel.forward": {
            "name": "forward",
            "location": 59,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "hidden": []
            }
        },
        "GluonRNNModel.begin_state": {
            "name": "begin_state",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/RNN.py": {
        "UnRolledRNNtrain": {
            "name": "UnRolledRNNtrain",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "train_data": [],
                "label_data": [],
                "batch_size": [],
                "epochs": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_string": []
            }
        },
        "UnRolledRNN_Model.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [],
                "num_embed": [],
                "num_hidden": []
            }
        },
        "UnRolledRNN_Model.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/shared.py": {
        "get_batch": {
            "name": "get_batch",
            "location": 91,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "source": [],
                "label_data": [],
                "i": [],
                "batch_size": []
            }
        }
    },
    "convnet-abstraction-master/python/rnn/__init__.py": {},
    "convnet-abstraction-master/python/spikes/simple-mxnet.py": {},
    "convnet-abstraction-master/python/spikes/spike-networkx.py": {},
    "convnet-abstraction-master/python/spikes/spike-pygraphviz.py": {},
    "convnet-abstraction-master/python/utils/helper.py": {
        "imshow": {
            "name": "imshow",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "ax": [],
                "title": []
            }
        },
        "view_recon": {
            "name": "view_recon",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [],
                "recon": []
            }
        },
        "view_classify": {
            "name": "view_classify",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [],
                "ps": [],
                "version": []
            }
        },
        "viewFCWeights": {
            "name": "viewFCWeights",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "fc": [],
                "inShape": []
            }
        },
        "viewWeights": {
            "name": "viewWeights",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "w": [],
                "inShape": []
            }
        }
    },
    "convnet-abstraction-master/python/utils/__init__.py": {
        "expand": {
            "name": "expand",
            "location": 5,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "debugSeq": {
            "name": "debugSeq",
            "location": 20,
            "return": [],
            "arguments": {
                "v": [],
                "shape": []
            }
        }
    },
    "convnet-abstraction-master/slide/A-overview.py": {},
    "convnet-abstraction-master/slide/B-experiment.py": {
        "newModel": {
            "name": "newModel",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "loader": [],
                "lossTarget": [],
                "maxEpochs": [],
                "aug": []
            }
        },
        "HWY.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "tuple"
                ]
            }
        },
        "HWY.getLayers": {
            "name": "getLayers",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HWY.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "F": [],
                "x": []
            }
        },
        "HWY.__hash__": {
            "name": "__hash__",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "convnet-abstraction-master/slide/C-aug.py": {},
    "convnet-abstraction-master/slide/D-g-conv.py": {
        "regularize": {
            "name": "regularize",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "repr": {
            "name": "repr",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        }
    },
    "convnet-abstraction-master/slide/E-spectral.py": {
        "repr": {
            "name": "repr",
            "location": 397,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "int"
                ]
            }
        },
        "getNode": {
            "name": "getNode",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "sub": [],
                "i": []
            }
        },
        "getExp": {
            "name": "getExp",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "i": []
            }
        }
    },
    "convnet-abstraction-master/slide/_backup.py": {},
    "convnet-abstraction-master/slide/__init__.py": {}
}
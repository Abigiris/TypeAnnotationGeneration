{
    "core-service-master/wait_for_postgres.py": {
        "pg_is_ready": {
            "name": "pg_is_ready",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [],
                "password": [],
                "host": [],
                "port": [],
                "dbname": []
            }
        }
    },
    "core-service-master/core/manage.py": {},
    "core-service-master/core/core/test.py": {
        "TestStatusApi.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusApi.test_api": {
            "name": "test_api",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/core/urls.py": {},
    "core-service-master/core/core/views.py": {
        "StatusView.__calculate_up_time": {
            "name": "__calculate_up_time",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "StatusView.get": {
            "name": "get",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "core-service-master/core/core/wsgi.py": {},
    "core-service-master/core/core/__init__.py": {},
    "core-service-master/core/core/management/__init__.py": {},
    "core-service-master/core/core/management/commands/generate_fake_data.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.print_error": {
            "name": "print_error",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Command.print_warning": {
            "name": "print_warning",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Command.print_success": {
            "name": "print_success",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Command.get_heroes": {
            "name": "get_heroes",
            "location": 71,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "hero_ids": []
            }
        },
        "Command.generate_profiles": {
            "name": "generate_profiles",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Command._generate_one_f_invitation": {
            "name": "_generate_one_f_invitation",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hero": [],
                "invited": [],
                "retries": []
            }
        },
        "Command.generate_invited_f": {
            "name": "generate_invited_f",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "heroes": []
            }
        },
        "Command.generate_inviting_f": {
            "name": "generate_inviting_f",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "heroes": []
            }
        },
        "Command.generate_fake_data": {
            "name": "generate_fake_data",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.print_input": {
            "name": "print_input",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/core/management/commands/__init__.py": {},
    "core-service-master/core/core/settings/base.py": {},
    "core-service-master/core/core/settings/local.py": {},
    "core-service-master/core/core/settings/production.py": {},
    "core-service-master/core/core/settings/test.py": {
        "TestLocalSettings.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalSettings.test_settings": {
            "name": "test_settings",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProductionSettings.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductionSettings.test_settings": {
            "name": "test_settings",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/core/settings/__init__.py": {},
    "core-service-master/core/friendships/models.py": {
        "FriendshipInvitation.accept": {
            "name": "accept",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Friendship.save": {
            "name": "save",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/friendships/serializers.py": {
        "CreatedFriendshipInvitationSerializer.validate": {
            "name": "validate",
            "location": 22,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CreatedFriendshipInvitationSerializer.create": {
            "name": "create",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "core-service-master/core/friendships/test.py": {
        "TestFriendshipInvitations.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipInvitations.test_ordering": {
            "name": "test_ordering",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipInvitations.test_unique_together": {
            "name": "test_unique_together",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipInvitations.test_invite_to_self": {
            "name": "test_invite_to_self",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipInvitations.test_delete_cascaded": {
            "name": "test_delete_cascaded",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipInvitations.test_accept_get_create_friends": {
            "name": "test_accept_get_create_friends",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendship.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFriendship.test_ordering": {
            "name": "test_ordering",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendship.test_unique_together": {
            "name": "test_unique_together",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendship.test_delete_cascaded": {
            "name": "test_delete_cascaded",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendship.test_friends_with_self": {
            "name": "test_friends_with_self",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.instance_url": {
            "name": "instance_url",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.accept_url": {
            "name": "accept_url",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_options_200": {
            "name": "test_options_200",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_list_200": {
            "name": "test_list_200",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_list_200_search": {
            "name": "test_list_200_search",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_list_200_ordering": {
            "name": "test_list_200_ordering",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_retrieve_404": {
            "name": "test_retrieve_404",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_retrieve_404_inviting": {
            "name": "test_retrieve_404_inviting",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_retrieve_200_invited": {
            "name": "test_retrieve_200_invited",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_create_405": {
            "name": "test_create_405",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_update_405": {
            "name": "test_update_405",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_destroy_404": {
            "name": "test_destroy_404",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_destroy_404_inviting": {
            "name": "test_destroy_404_inviting",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_destroy_204_invited": {
            "name": "test_destroy_204_invited",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_accept_404": {
            "name": "test_accept_404",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_accept_404_inviting": {
            "name": "test_accept_404_inviting",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReceivedFriendshipInvitationsApi.test_accept_204": {
            "name": "test_accept_204",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.instance_url": {
            "name": "instance_url",
            "location": 246,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.accept_url": {
            "name": "accept_url",
            "location": 250,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.setUp": {
            "name": "setUp",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_options_200": {
            "name": "test_options_200",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_list_200": {
            "name": "test_list_200",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_list_200_ordering": {
            "name": "test_list_200_ordering",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_list_200_search": {
            "name": "test_list_200_search",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_retrieve_404": {
            "name": "test_retrieve_404",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_retrieve_404_invited": {
            "name": "test_retrieve_404_invited",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_retrieve_200_inviting": {
            "name": "test_retrieve_200_inviting",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_create_40_required": {
            "name": "test_create_40_required",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_create_400_invalid": {
            "name": "test_create_400_invalid",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_create_400_no_profile": {
            "name": "test_create_400_no_profile",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_create_400_already_friends": {
            "name": "test_create_400_already_friends",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_create_201": {
            "name": "test_create_201",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_update_405": {
            "name": "test_update_405",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_destroy_404": {
            "name": "test_destroy_404",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_destroy_404_invited": {
            "name": "test_destroy_404_invited",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_destroy_204_inviting": {
            "name": "test_destroy_204_inviting",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCreatedFriendshipInvitationsApi.test_accept_404": {
            "name": "test_accept_404",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.instance_url": {
            "name": "instance_url",
            "location": 418,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestFriendshipsApi.accept_url": {
            "name": "accept_url",
            "location": 422,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestFriendshipsApi.setUp": {
            "name": "setUp",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_create_405": {
            "name": "test_create_405",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_update_405": {
            "name": "test_update_405",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_retrieve_404": {
            "name": "test_retrieve_404",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_destroy_404": {
            "name": "test_destroy_404",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_options_200": {
            "name": "test_options_200",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_list_200": {
            "name": "test_list_200",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_list_200_ordering": {
            "name": "test_list_200_ordering",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_list_200_search": {
            "name": "test_list_200_search",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_retrieve_200": {
            "name": "test_retrieve_200",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_destroy_204": {
            "name": "test_destroy_204",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFriendshipsApi.test_destroy_204_partial": {
            "name": "test_destroy_204_partial",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/friendships/urls.py": {},
    "core-service-master/core/friendships/views.py": {
        "ReceivedFriendshipInvitationViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReceivedFriendshipInvitationViewSet.accept": {
            "name": "accept",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CreatedFriendshipInvitationViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FriendshipViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FriendshipViewSet.perform_destroy": {
            "name": "perform_destroy",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "core-service-master/core/friendships/__init__.py": {},
    "core-service-master/core/friendships/migrations/0001_initial.py": {},
    "core-service-master/core/friendships/migrations/0002_auto_20181207_2215.py": {},
    "core-service-master/core/friendships/migrations/__init__.py": {},
    "core-service-master/core/friend_profiles/serializers.py": {
        "ProfileIsFriendSerializer.get_has_friend_invitation": {
            "name": "get_has_friend_invitation",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "profile": []
            }
        },
        "ProfileIsFriendSerializer.get_is_friend": {
            "name": "get_is_friend",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "profile": []
            }
        }
    },
    "core-service-master/core/friend_profiles/test.py": {
        "TestProfileIsFriendSerializer.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendSerializer.test_has_friend_invitation": {
            "name": "test_has_friend_invitation",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendSerializer.test_is_friend_no_context": {
            "name": "test_is_friend_no_context",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendApi.instance_url": {
            "name": "instance_url",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "TestProfileIsFriendApi.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendApi.test_options_200": {
            "name": "test_options_200",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendApi.test_list_401": {
            "name": "test_list_401",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendApi.test_list_200": {
            "name": "test_list_200",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfileIsFriendApi.test_list_200_search": {
            "name": "test_list_200_search",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/friend_profiles/urls.py": {},
    "core-service-master/core/friend_profiles/views.py": {
        "FriendProfilesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/friend_profiles/__init__.py": {},
    "core-service-master/core/friend_profiles/migrations/0001_initial.py": {},
    "core-service-master/core/friend_profiles/migrations/0002_auto_20181207_2215.py": {},
    "core-service-master/core/friend_profiles/migrations/__init__.py": {},
    "core-service-master/core/generics/models.py": {
        "Invitation.save": {
            "name": "save",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invitation.accept": {
            "name": "accept",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/generics/permissions.py": {
        "IsAuthenticated.has_permission": {
            "name": "has_permission",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        }
    },
    "core-service-master/core/generics/__init__.py": {},
    "core-service-master/core/jwt_utils/handlers.py": {
        "jwt_get_uuid_from_payload_handler": {
            "name": "jwt_get_uuid_from_payload_handler",
            "location": 1,
            "return": [
                "Any"
            ],
            "arguments": {
                "payload": []
            }
        }
    },
    "core-service-master/core/jwt_utils/__init__.py": {},
    "core-service-master/core/profiles/managers.py": {
        "ProfileManager.get_by_natural_key": {
            "name": "get_by_natural_key",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        }
    },
    "core-service-master/core/profiles/models.py": {
        "Profile.uuid": {
            "name": "uuid",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/profiles/permissions.py": {
        "ProfilePermissions.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "ProfilePermissions.has_object_permission": {
            "name": "has_object_permission",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        }
    },
    "core-service-master/core/profiles/serializers.py": {
        "CreateProfileSerializer.validate": {
            "name": "validate",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CreateProfileSerializer.create": {
            "name": "create",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "core-service-master/core/profiles/test.py": {
        "TestProfilesApi.instance_url": {
            "name": "instance_url",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "profile": []
            }
        },
        "TestProfilesApi.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_options_401": {
            "name": "test_options_401",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_options_200": {
            "name": "test_options_200",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_list_401": {
            "name": "test_list_401",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_list_200": {
            "name": "test_list_200",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_list_200_search": {
            "name": "test_list_200_search",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_list_200_paginated": {
            "name": "test_list_200_paginated",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_retrieve_401": {
            "name": "test_retrieve_401",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_retrieve_200": {
            "name": "test_retrieve_200",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_400_no_token": {
            "name": "test_create_400_no_token",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_400_bad_token": {
            "name": "test_create_400_bad_token",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_400_no_uuid": {
            "name": "test_create_400_no_uuid",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_400_bad_uuid": {
            "name": "test_create_400_bad_uuid",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_400_existing_uuid": {
            "name": "test_create_400_existing_uuid",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_create_201": {
            "name": "test_create_201",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_update_401": {
            "name": "test_update_401",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_update_403": {
            "name": "test_update_403",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_update_200": {
            "name": "test_update_200",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_delete_405": {
            "name": "test_delete_405",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_me_401": {
            "name": "test_me_401",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProfilesApi.test_me_200": {
            "name": "test_me_200",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/profiles/urls.py": {},
    "core-service-master/core/profiles/views.py": {
        "ProfileViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileViewSet.me": {
            "name": "me",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "core-service-master/core/profiles/__init__.py": {},
    "core-service-master/core/profiles/migrations/0001_initial.py": {},
    "core-service-master/core/profiles/migrations/__init__.py": {},
    "core-service-master/core/t_helpers/mixin401.py": {
        "TMixin401.test_options_401": {
            "name": "test_options_401",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMixin401.test_list_401": {
            "name": "test_list_401",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMixin401.test_retrieve_401": {
            "name": "test_retrieve_401",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMixin401.test_create_401": {
            "name": "test_create_401",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMixin401.test_update_401": {
            "name": "test_update_401",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TMixin401.test_delete_401": {
            "name": "test_delete_401",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "core-service-master/core/t_helpers/profiles.py": {
        "set_up": {
            "name": "set_up",
            "location": 29,
            "return": [
                "ProfilesSetUp"
            ],
            "arguments": {}
        }
    },
    "core-service-master/core/t_helpers/__init__.py": {}
}
{
    "cracking-the-coding-interview-master/main.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch01/hash_map.py": {
        "HashMap.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashMap.get": {
            "name": "get",
            "location": 16,
            "return": [
                "Optional[V]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ]
            }
        },
        "HashMap.put": {
            "name": "put",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "K"
                ],
                "value": [
                    "V"
                ]
            }
        },
        "HashMap._rebalance": {
            "name": "_rebalance",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch01/matrix.py": {
        "rotate_matrix": {
            "name": "rotate_matrix",
            "location": 8,
            "return": [
                "List[List[T]]"
            ],
            "arguments": {
                "matrix": [
                    "List[List[T]]"
                ]
            }
        },
        "zero_matrix": {
            "name": "zero_matrix",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "matrix": [
                    "List[List[T]]"
                ]
            }
        }
    },
    "cracking-the-coding-interview-master/ch01/string.py": {
        "all_unique_chars": {
            "name": "all_unique_chars",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_permutation": {
            "name": "is_permutation",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ]
            }
        },
        "url_encode_spaces": {
            "name": "url_encode_spaces",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_palindrome_permutation": {
            "name": "is_palindrome_permutation",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "within_one_edit": {
            "name": "within_one_edit",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ]
            }
        },
        "_at_most_one_replaced_char": {
            "name": "_at_most_one_replaced_char",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ]
            }
        },
        "_left_str_has_one_removed_char": {
            "name": "_left_str_has_one_removed_char",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ]
            }
        },
        "is_rotation": {
            "name": "is_rotation",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "s1": [
                    "str"
                ],
                "s2": [
                    "str"
                ]
            }
        },
        "CompressedString.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "CompressedString.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch01/test_hash_map.py": {
        "test_get": {
            "name": "test_get",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_missing_key": {
            "name": "test_get_missing_key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_hash_map": {
            "name": "test_empty_hash_map",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_put": {
            "name": "test_put",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch01/test_matrix.py": {
        "test_rotate_matrix": {
            "name": "test_rotate_matrix",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rotate_matrix_edge_cases": {
            "name": "test_rotate_matrix_edge_cases",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_matrix": {
            "name": "test_zero_matrix",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_matrix_edge_cases": {
            "name": "test_zero_matrix_edge_cases",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch01/test_string.py": {
        "test_all_unique_chars": {
            "name": "test_all_unique_chars",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_permutation": {
            "name": "test_is_permutation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_encode_spaces": {
            "name": "test_url_encode_spaces",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_palindrome_permutation": {
            "name": "test_is_palindrome_permutation",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_within_one_edit": {
            "name": "test_within_one_edit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compressed_string": {
            "name": "test_compressed_string",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_rotation": {
            "name": "test_is_rotation",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch01/__init__.py": {},
    "cracking-the-coding-interview-master/ch02/linked_list.py": {
        "LinkedListIterator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[ch02.node.Node[T]]"
                ]
            }
        },
        "LinkedListIterator.__iter__": {
            "name": "__iter__",
            "location": 12,
            "return": [
                "LinkedListIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedListIterator.__next__": {
            "name": "__next__",
            "location": 15,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.for_each": {
            "name": "for_each",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[([T], None)]"
                ]
            }
        },
        "LinkedList.is_empty": {
            "name": "is_empty",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.head": {
            "name": "head",
            "location": 42,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.tail": {
            "name": "tail",
            "location": 45,
            "return": [
                "Optional[LinkedList[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.prepend": {
            "name": "prepend",
            "location": 53,
            "return": [
                "LinkedList[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "LinkedList.append": {
            "name": "append",
            "location": 63,
            "return": [
                "LinkedList[T]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "LinkedList.delete": {
            "name": "delete",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "LinkedList._get_node": {
            "name": "_get_node",
            "location": 91,
            "return": [
                "Optional[ch02.node.Node[T]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "LinkedList.get": {
            "name": "get",
            "location": 101,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "LinkedList.distinct": {
            "name": "distinct",
            "location": 106,
            "return": [
                "LinkedList[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get_kth_to_last": {
            "name": "get_kth_to_last",
            "location": 116,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "LinkedList.partition": {
            "name": "partition",
            "location": 123,
            "return": [
                "LinkedList[T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "LinkedList.is_palindrome": {
            "name": "is_palindrome",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.intersects_with": {
            "name": "intersects_with",
            "location": 150,
            "return": [
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "LinkedList[T]"
                ]
            }
        },
        "LinkedList.has_loop": {
            "name": "has_loop",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__str__": {
            "name": "__str__",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.__eq__": {
            "name": "__eq__",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "LinkedList.__iter__": {
            "name": "__iter__",
            "location": 190,
            "return": [
                "LinkedListIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch02/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T"
                ]
            }
        },
        "Node.value": {
            "name": "value",
            "location": 11,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.next": {
            "name": "next",
            "location": 14,
            "return": [
                "Optional[Node[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_next": {
            "name": "set_next",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "next_node": [
                    "Optional[Node[T]]"
                ]
            }
        }
    },
    "cracking-the-coding-interview-master/ch02/test_linked_list.py": {
        "test_iter": {
            "name": "test_iter",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_str": {
            "name": "test_to_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_head": {
            "name": "test_head",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tail": {
            "name": "test_tail",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepend": {
            "name": "test_prepend",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_kth_to_last": {
            "name": "test_get_kth_to_last",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete": {
            "name": "test_delete",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete_out_of_bounds": {
            "name": "test_delete_out_of_bounds",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distinct": {
            "name": "test_distinct",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partition": {
            "name": "test_partition",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_palindrome": {
            "name": "test_is_palindrome",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intersects_with": {
            "name": "test_intersects_with",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_loop": {
            "name": "test_has_loop",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch02/__init__.py": {},
    "cracking-the-coding-interview-master/ch03/queue.py": {
        "QueueIterator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[ch02.node.Node[T]]"
                ]
            }
        },
        "QueueIterator.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [
                "QueueIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueIterator.__next__": {
            "name": "__next__",
            "location": 14,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.add": {
            "name": "add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "Queue.remove": {
            "name": "remove",
            "location": 48,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.peek": {
            "name": "peek",
            "location": 57,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.is_empty": {
            "name": "is_empty",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__len__": {
            "name": "__len__",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Queue.__iter__": {
            "name": "__iter__",
            "location": 78,
            "return": [
                "QueueIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch03/set_of_stacks.py": {
        "SetOfStacksIterator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stacks": [
                    "SetOfStacks[T]"
                ]
            }
        },
        "SetOfStacksIterator.__iter__": {
            "name": "__iter__",
            "location": 12,
            "return": [
                "SetOfStacksIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacksIterator.__next__": {
            "name": "__next__",
            "location": 15,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_stack_size": [
                    "int"
                ],
                "items": [
                    "List[T]"
                ]
            }
        },
        "SetOfStacks.pop": {
            "name": "pop",
            "location": 40,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.peek": {
            "name": "peek",
            "location": 51,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.push": {
            "name": "push",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "SetOfStacks.is_empty": {
            "name": "is_empty",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.__len__": {
            "name": "__len__",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetOfStacks.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SetOfStacks.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "SetOfStacksIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch03/stack.py": {
        "StackIterator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[ch02.node.Node[T]]"
                ]
            }
        },
        "StackIterator.__iter__": {
            "name": "__iter__",
            "location": 13,
            "return": [
                "StackIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackIterator.__next__": {
            "name": "__next__",
            "location": 16,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 36,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 44,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T"
                ]
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.sorted": {
            "name": "sorted",
            "location": 59,
            "return": [
                "Stack[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Stack.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "StackIterator[T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cracking-the-coding-interview-master/ch03/test_queue.py": {
        "test_iter": {
            "name": "test_iter",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_str": {
            "name": "test_to_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove": {
            "name": "test_remove",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch03/test_set_of_stacks.py": {
        "test_iter": {
            "name": "test_iter",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_str": {
            "name": "test_to_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_push": {
            "name": "test_push",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch03/test_stack.py": {
        "test_iter": {
            "name": "test_iter",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_str": {
            "name": "test_to_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_empty": {
            "name": "test_is_empty",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_push": {
            "name": "test_push",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sorted": {
            "name": "test_sorted",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sorted_does_not_mutate": {
            "name": "test_sorted_does_not_mutate",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cracking-the-coding-interview-master/ch03/__init__.py": {},
    "cracking-the-coding-interview-master/util/comparable.py": {
        "Comparable.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__gt__": {
            "name": "__gt__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__le__": {
            "name": "__le__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "T"
                ],
                "other": [
                    "T"
                ]
            }
        }
    },
    "cracking-the-coding-interview-master/util/__init__.py": {}
}
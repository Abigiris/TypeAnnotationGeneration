{
    "crazerace-py-master/setup.py": {},
    "crazerace-py-master/crazerace/_log.py": {
        "info": {
            "name": "info",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "warning": {
            "name": "warning",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "log": {
            "name": "log",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [],
                "message": []
            }
        }
    },
    "crazerace-py-master/crazerace/__init__.py": {},
    "crazerace-py-master/crazerace/http/error.py": {
        "RequestError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "RequestError.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.asdict": {
            "name": "asdict",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.status": {
            "name": "status",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadRequestError.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BadRequestError.status": {
            "name": "status",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "UnauthorizedError.status": {
            "name": "status",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForbiddenError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ForbiddenError.status": {
            "name": "status",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFoundError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "NotFoundError.status": {
            "name": "status",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodNotAllowedError.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "MethodNotAllowedError.status": {
            "name": "status",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConflictError.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ConflictError.status": {
            "name": "status",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreconditionRequiredError.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PreconditionRequiredError.status": {
            "name": "status",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BadGatewayError.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BadGatewayError.status": {
            "name": "status",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceUnavilableError.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ServiceUnavilableError.status": {
            "name": "status",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotImplementedError.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotImplementedError.status": {
            "name": "status",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseError.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cause_message": []
            }
        },
        "DatabaseError.full_message": {
            "name": "full_message",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crazerace-py-master/crazerace/http/instrumentation.py": {
        "add_request_id": {
            "name": "add_request_id",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_request_id_to_response": {
            "name": "add_request_id_to_response",
            "location": 66,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "response": [
                    "_T0@@"
                ]
            }
        },
        "get_request_id": {
            "name": "get_request_id",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "fail_if_missing": [],
                "default": []
            }
        },
        "trace": {
            "name": "trace",
            "location": 86,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "start_timer": {
            "name": "start_timer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop_timer": {
            "name": "stop_timer",
            "location": 104,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "response": [
                    "_T0@@"
                ]
            }
        },
        "record_request_data": {
            "name": "record_request_data",
            "location": 111,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "response": [
                    "_T0@@"
                ]
            }
        },
        "calculate_latency": {
            "name": "calculate_latency",
            "location": 128,
            "return": [
                "float"
            ],
            "arguments": {
                "start_time": []
            }
        },
        "_parse_endpoint": {
            "name": "_parse_endpoint",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "setup_instrumentation": {
            "name": "setup_instrumentation",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "name": [],
                "version": []
            }
        },
        "trace.trace_with_namespace": {
            "name": "trace_with_namespace",
            "location": 87,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 124,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "setup_instrumentation.metrics": {
            "name": "metrics",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "trace.trace_with_namespace.decorated": {
            "name": "decorated",
            "location": 89,
            "return": [],
            "arguments": {}
        }
    },
    "crazerace-py-master/crazerace/http/rpc.py": {
        "default_json": {
            "name": "default_json",
            "location": 40,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 81,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": []
            }
        },
        "put": {
            "name": "put",
            "location": 92,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": [],
                "body": []
            }
        },
        "post": {
            "name": "post",
            "location": 104,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": [],
                "body": []
            }
        },
        "patch": {
            "name": "patch",
            "location": 116,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": [],
                "body": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 128,
            "return": [],
            "arguments": {
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": []
            }
        },
        "request": {
            "name": "request",
            "location": 138,
            "return": [
                "RPCResponse"
            ],
            "arguments": {
                "method": [],
                "url": [],
                "user_id": [],
                "role": [],
                "headers": [],
                "timeout": [],
                "body": []
            }
        },
        "_perform_request": {
            "name": "_perform_request",
            "location": 164,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "method": [],
                "url": [],
                "headers": [],
                "timeout": [],
                "body": []
            }
        },
        "_create_headers": {
            "name": "_create_headers",
            "location": 178,
            "return": [
                "_T3@@"
            ],
            "arguments": {
                "user_id": [],
                "role": [],
                "body": [],
                "headers": [
                    "_T3@@"
                ],
                "request_id": []
            }
        },
        "_should_add_content_type": {
            "name": "_should_add_content_type",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "headers": [],
                "body": []
            }
        },
        "_create_content_type": {
            "name": "_create_content_type",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "body": []
            }
        },
        "_record_rpc": {
            "name": "_record_rpc",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "method": [],
                "url": [],
                "request_id": [],
                "status": [],
                "timer": []
            }
        },
        "_log_request_start": {
            "name": "_log_request_start",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [],
                "url": [],
                "user_id": [],
                "request_id": []
            }
        },
        "_sanitize_endpoint": {
            "name": "_sanitize_endpoint",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "url": []
            }
        },
        "_extract_status_code": {
            "name": "_extract_status_code",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "e": []
            }
        },
        "RPCResponse.from_response": {
            "name": "from_response",
            "location": 51,
            "return": [
                "_TRPCResponse@@RPCResponse@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRPCResponse]"
                ],
                "res": [],
                "request_id": [],
                "latency": []
            }
        },
        "RPCError.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "message": [],
                "status": []
            }
        },
        "RPCError.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "crazerace-py-master/crazerace/http/security.py": {
        "secured": {
            "name": "secured",
            "location": 14,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "secret": [],
                "roles": []
            }
        },
        "_authorize": {
            "name": "_authorize",
            "location": 28,
            "return": [
                "jwt.TokenBody"
            ],
            "arguments": {
                "secret": [],
                "roles": []
            }
        },
        "_get_token_header": {
            "name": "_get_token_header",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "secured.secured_with_roles": {
            "name": "secured_with_roles",
            "location": 15,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "secured.secured_with_roles.decorated": {
            "name": "decorated",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "crazerace-py-master/crazerace/http/status.py": {},
    "crazerace-py-master/crazerace/http/__init__.py": {
        "get_request_body": {
            "name": "get_request_body",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_param": {
            "name": "get_param",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "default": []
            }
        },
        "get_header": {
            "name": "get_header",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "default": []
            }
        },
        "create_response": {
            "name": "create_response",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "result": [],
                "status": []
            }
        },
        "create_ok_response": {
            "name": "create_ok_response",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "new_id": {
            "name": "new_id",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "crazerace-py-master/crazerace/jwt/__init__.py": {
        "create_token": {
            "name": "create_token",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "sub": [],
                "role": [],
                "secret": [],
                "expiry": [],
                "algorithm": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 42,
            "return": [
                "TokenBody"
            ],
            "arguments": {
                "token": [],
                "secret": [],
                "algorithm": []
            }
        }
    }
}
{
    "cse291g-sv2p-master/experiments/cdna/main.py": {
        "make_parser": {
            "name": "make_parser",
            "location": 5,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "cse291g-sv2p-master/src/sv2p/cdna.py": {
        "shifted_relu": {
            "name": "shifted_relu",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "eps": [
                    "float"
                ]
            }
        },
        "depthwise_conv2d": {
            "name": "depthwise_conv2d",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "kernel": [],
                "stride": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "padding": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "dilation": [
                    "Union[(int, Tuple[(int, int)])]"
                ]
            }
        },
        "ConditionalUNetLSTM.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "cond_channels": [
                    "int"
                ]
            }
        },
        "ConditionalUNetLSTM.forward": {
            "name": "forward",
            "location": 84,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "conditions": [],
                "hidden_states": [
                    "list"
                ]
            }
        },
        "ConditionalUNetLSTM.init_hidden": {
            "name": "init_hidden",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "ConditionalUNetLSTM.conv_lstm": {
            "name": "conv_lstm",
            "location": 144,
            "return": [
                "sv2p.convlstm.ConvLSTMCell2d"
            ],
            "arguments": {
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        },
        "ConditionalUNetLSTM.downsample2x": {
            "name": "downsample2x",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        },
        "ConditionalUNetLSTM.upsample2x": {
            "name": "upsample2x",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        },
        "ConditionalUNetLSTM.reduce_dim": {
            "name": "reduce_dim",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ]
            }
        },
        "CDNA.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "cond_channels": [
                    "int"
                ],
                "n_masks": [
                    "int"
                ],
                "with_generator": [
                    "bool"
                ]
            }
        },
        "CDNA.forward": {
            "name": "forward",
            "location": 245,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "conditions": [],
                "hidden_states": [
                    "list"
                ]
            }
        },
        "CDNA.transform_inputs": {
            "name": "transform_inputs",
            "location": 279,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "cdna_inputs": [],
                "n_masks": [
                    "int"
                ]
            }
        }
    },
    "cse291g-sv2p-master/src/sv2p/convlstm.py": {
        "ConvLSTMCell2d.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "out_channels": [
                    "int"
                ],
                "kernel_size": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "stride": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "padding": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "dilation": [
                    "Union[(int, Tuple[(int, int)])]"
                ],
                "groups": [
                    "int"
                ],
                "bias": [
                    "bool"
                ],
                "gate_cell_state": [
                    "bool"
                ],
                "forget_bias": [
                    "float"
                ]
            }
        },
        "ConvLSTMCell2d.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "hidden_states": []
            }
        },
        "ConvLSTMCell2d.init_hidden": {
            "name": "init_hidden",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "cse291g-sv2p-master/src/sv2p/criteria.py": {
        "rot90": {
            "name": "rot90",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "RotationInvarianceLoss.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationInvarianceLoss.forward": {
            "name": "forward",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "kerns": []
            }
        }
    },
    "cse291g-sv2p-master/src/sv2p/model.py": {
        "Squeeze.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int"
                ]
            }
        },
        "Squeeze.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "PosteriorInferenceNet.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tbatch": [
                    "int"
                ]
            }
        },
        "PosteriorInferenceNet.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "LatentVariableSampler.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentVariableSampler.sample": {
            "name": "sample",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mu_sigma": [],
                "n": [
                    "int"
                ]
            }
        }
    },
    "cse291g-sv2p-master/src/sv2p/ssim.py": {
        "make_gaussian_filter": {
            "name": "make_gaussian_filter",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "window_size": [],
                "sigma": []
            }
        },
        "Gaussian2d.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "window_size": [
                    "int"
                ],
                "sigma": [
                    "float"
                ]
            }
        },
        "Gaussian2d.forward": {
            "name": "forward",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "SSIM.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "window_size": [
                    "int"
                ],
                "sigma": [
                    "float"
                ],
                "reduction": [
                    "str"
                ]
            }
        },
        "SSIM.forward": {
            "name": "forward",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img1": [],
                "img2": []
            }
        },
        "DSSIM.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DSSIM.forward": {
            "name": "forward",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img1": [],
                "img2": []
            }
        }
    },
    "cse291g-sv2p-master/src/sv2p/__init__.py": {},
    "cse291g-sv2p-master/src/train/loaddata.py": {
        "extract_gz": {
            "name": "extract_gz",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "tofile": []
            }
        },
        "MovingMNIST.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "Callable"
                ]
            }
        },
        "MovingMNIST.__len__": {
            "name": "__len__",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovingMNIST.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "KTH.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transform": [],
                "wd": []
            }
        },
        "KTH.__len__": {
            "name": "__len__",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KTH.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "KTH.__enter__": {
            "name": "__enter__",
            "location": 91,
            "return": [
                "_TKTH"
            ],
            "arguments": {
                "self": [
                    "_TKTH"
                ]
            }
        },
        "KTH.__exit__": {
            "name": "__exit__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_a": [
                    "Optional[Type[BaseException]]"
                ],
                "_b": [
                    "Optional[BaseException]"
                ],
                "_c": []
            }
        },
        "KTH.teardown": {
            "name": "teardown",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/more_sampler.py": {
        "broadcast_value2list": {
            "name": "broadcast_value2list",
            "location": 18,
            "return": [
                "Iterator[Tuple[(T1, T2)]]"
            ],
            "arguments": {
                "value": [
                    "T1"
                ],
                "iterable": [
                    "Iterable[T2]"
                ]
            }
        },
        "ListSampler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Sequence[int]"
                ]
            }
        },
        "ListSampler.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSampler.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "Iterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlidingWindowBatchSampler.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [],
                "window_width": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "drop_last": [
                    "bool"
                ]
            }
        },
        "SlidingWindowBatchSampler.__len__": {
            "name": "__len__",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlidingWindowBatchSampler.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlidingWindowBatchSampler._calc_sliding_distance": {
            "name": "_calc_sliding_distance",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "SlidingWindowBatchSampler._sample_batch_once": {
            "name": "_sample_batch_once",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "segid_startind": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/more_trans.py": {
        "rearrange_temporal_batch": {
            "name": "rearrange_temporal_batch",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "data_batch": [],
                "T": [
                    "int"
                ]
            }
        },
        "identitymap": {
            "name": "identitymap",
            "location": 56,
            "return": [
                "_T0"
            ],
            "arguments": {
                "x": [
                    "_T0"
                ]
            }
        },
        "DeNormalize.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [],
                "std": []
            }
        },
        "DeNormalize.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "_T0"
                ]
            }
        },
        "VideoTransform.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "VideoTransform.__call__": {
            "name": "__call__",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "Iterable"
                ]
            }
        },
        "VideoTransform.__bool__": {
            "name": "__bool__",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/schesample.py": {
        "calc_tfprob_linear": {
            "name": "calc_tfprob_linear",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "n_batch": [
                    "int"
                ]
            }
        },
        "calc_tfprob_exponential": {
            "name": "calc_tfprob_exponential",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "n_batch": [
                    "int"
                ]
            }
        },
        "calc_tfprob_inverse_sigmoid": {
            "name": "calc_tfprob_inverse_sigmoid",
            "location": 33,
            "return": [
                "float"
            ],
            "arguments": {
                "n_batch": [
                    "int"
                ]
            }
        },
        "calc_tfprob": {
            "name": "calc_tfprob",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "algorithm": [
                    "ScheduleAlgorithm"
                ],
                "n_batch": [
                    "int"
                ]
            }
        },
        "batch_sample": {
            "name": "batch_sample",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ],
                "seqlen": [
                    "int"
                ],
                "p": [
                    "float"
                ],
                "warm_start": [
                    "int"
                ],
                "soft": [
                    "bool"
                ]
            }
        },
        "sample_targets": {
            "name": "sample_targets",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "targets": [],
                "decider": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/trainlib.py": {
        "loggername": {
            "name": "loggername",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "module_name": []
            }
        },
        "_l": {
            "name": "_l",
            "location": 45,
            "return": [
                "logging.Logger"
            ],
            "arguments": {}
        },
        "action_fired": {
            "name": "action_fired",
            "location": 53,
            "return": [
                "Callable[([Any], bool)]"
            ],
            "arguments": {
                "fired": [
                    "Union[(Callable[([Any], bool)], int)]"
                ]
            }
        },
        "fired_always": {
            "name": "fired_always",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "_": []
            }
        },
        "fired_batch": {
            "name": "fired_batch",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "batch": [
                    "int"
                ],
                "progress": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "load_checkpoint": {
            "name": "load_checkpoint",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [],
                "savedir": [
                    "str"
                ],
                "checkpoint_tmpl": [
                    "str"
                ],
                "progress": [
                    "tuple"
                ],
                "map_location": [
                    "str"
                ]
            }
        },
        "load_stat": {
            "name": "load_stat",
            "location": 288,
            "return": [
                "Union[(np.ndarray, Dict[(str, np.ndarray)])]"
            ],
            "arguments": {
                "statdir": [
                    "str"
                ],
                "statname_tmpl": [
                    "str"
                ],
                "progress": [
                    "tuple"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "freeze_model": {
            "name": "freeze_model",
            "location": 314,
            "return": [
                "Dict[(str, bool)]"
            ],
            "arguments": {
                "model": []
            }
        },
        "melt_model": {
            "name": "melt_model",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "origrg": [
                    "Dict[(str, bool)]"
                ],
                "empty_after_melting": []
            }
        },
        "CheckpointSaver.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "savedir": [
                    "str"
                ],
                "checkpoint_tmpl": [
                    "str"
                ],
                "fired": [
                    "Union[(Callable[([Any], bool)], int)]"
                ]
            }
        },
        "CheckpointSaver.__call__": {
            "name": "__call__",
            "location": 123,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "StatSaver.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statdir": [
                    "str"
                ],
                "statname_tmpl": [],
                "fired": [
                    "Union[(Callable[([Any], bool)], int)]"
                ]
            }
        },
        "StatSaver.__call__": {
            "name": "__call__",
            "location": 189,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "FieldChangedError.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "Sequence[str]"
                ],
                "now": [
                    "Sequence[str]"
                ]
            }
        },
        "CsvStatSaver.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statdir": [
                    "str"
                ],
                "statname_tmpl": [
                    "str"
                ],
                "fired": [
                    "Union[(Callable[([Any], bool)], int)]"
                ]
            }
        },
        "CsvStatSaver.__call__": {
            "name": "__call__",
            "location": 248,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "BasicTrainer.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "max_epoch": [
                    "int"
                ],
                "device": [
                    "str"
                ],
                "progress": [
                    "Tuple[(int, int)]"
                ],
                "freeze_net_when_necessary": []
            }
        },
        "BasicTrainer.default_basedir": {
            "name": "default_basedir",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.init_monitors": {
            "name": "init_monitors",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.prepare_net": {
            "name": "prepare_net",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_savedir": [
                    "str"
                ]
            }
        },
        "BasicTrainer.freeze_net": {
            "name": "freeze_net",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.melt_net": {
            "name": "melt_net",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.__statsaver": {
            "name": "__statsaver",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "stage": []
            }
        },
        "BasicTrainer.__checkpointsaver": {
            "name": "__checkpointsaver",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.__before_batch": {
            "name": "__before_batch",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "stage": []
            }
        },
        "BasicTrainer.__after_batch": {
            "name": "__after_batch",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "stage": []
            }
        },
        "BasicTrainer.__get_loader": {
            "name": "__get_loader",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "stage": []
            }
        },
        "BasicTrainer.__once": {
            "name": "__once",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "stage": [],
                "inputs": [],
                "targets": []
            }
        },
        "BasicTrainer.before_epoch": {
            "name": "before_epoch",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.after_epoch": {
            "name": "after_epoch",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.setup": {
            "name": "setup",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer.teardown": {
            "name": "teardown",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "BaseException"
                ]
            }
        },
        "BasicTrainer.run": {
            "name": "run",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTrainer._organize_stats": {
            "name": "_organize_stats",
            "location": 709,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "tuple"
                ]
            }
        },
        "BasicEvaluator.__init__": {
            "name": "__init__",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "progress": [
                    "Tuple[(int, int)]"
                ],
                "basedir": [
                    "str"
                ],
                "freeze_net_when_necessary": [
                    "bool"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "BasicEvaluator.default_basedir": {
            "name": "default_basedir",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicEvaluator.default_eval_basedir": {
            "name": "default_eval_basedir",
            "location": 821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicEvaluator.init_monitors": {
            "name": "init_monitors",
            "location": 824,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicEvaluator.prepare_net": {
            "name": "prepare_net",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext_savedir": [
                    "str"
                ]
            }
        },
        "IniFunctionCaller.__init__": {
            "name": "__init__",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "configparser.ConfigParser"
                ],
                "varparam_policy": []
            }
        },
        "IniFunctionCaller.call": {
            "name": "call",
            "location": 874,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Any], T)]"
                ]
            }
        },
        "action_fired._fired": {
            "name": "_fired",
            "location": 69,
            "return": [],
            "arguments": {
                "progress": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/train_cdna.py": {
        "chw2hwc": {
            "name": "chw2hwc",
            "location": 26,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "img": [
                    "np.ndarray"
                ]
            }
        },
        "make_grid": {
            "name": "make_grid",
            "location": 35,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "col": [
                    "int"
                ]
            }
        },
        "CDNATrainer.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "cond_channels": [
                    "int"
                ],
                "n_masks": [
                    "int"
                ],
                "dataset_name": [
                    "str"
                ],
                "indices": [
                    "Sequence[Sequence[int]]"
                ],
                "batch_size": [
                    "int"
                ],
                "lr": [
                    "float"
                ],
                "max_epoch": [
                    "int"
                ],
                "seqlen": [
                    "int"
                ],
                "criterion_name": [
                    "str"
                ],
                "krireg": [
                    "float"
                ],
                "mfreg": [
                    "float"
                ],
                "scheduled_sampling_k": [
                    "float"
                ],
                "warm_start": [
                    "int"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "CDNATrainer.fired": {
            "name": "fired",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "progress": []
            }
        },
        "CDNATrainer.before_epoch": {
            "name": "before_epoch",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.before_batch_train": {
            "name": "before_batch_train",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.before_batch_infer": {
            "name": "before_batch_infer",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.__get_loader": {
            "name": "__get_loader",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "dataloader": []
            }
        },
        "CDNATrainer.get_trainloader": {
            "name": "get_trainloader",
            "location": 183,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.get_validloader": {
            "name": "get_validloader",
            "location": 191,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.get_inferloader": {
            "name": "get_inferloader",
            "location": 199,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNATrainer.__compute_loss": {
            "name": "__compute_loss",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "predictions_t": [],
                "cdna_kerns_t": [],
                "masks_t": [],
                "targets_t": []
            }
        },
        "CDNATrainer.train_once": {
            "name": "train_once",
            "location": 215,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": []
            }
        },
        "CDNATrainer.valid_once": {
            "name": "valid_once",
            "location": 274,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": []
            }
        },
        "CDNATrainer.infer_once": {
            "name": "infer_once",
            "location": 301,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": []
            }
        },
        "CDNATrainer.__save_visualization": {
            "name": "__save_visualization",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "predictions": [],
                "targets": [],
                "kerns": [],
                "masks": [],
                "tofile": []
            }
        },
        "CDNATrainer.__organize_tensor_to_imgs": {
            "name": "__organize_tensor_to_imgs",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "CDNAInference.__init__": {
            "name": "__init__",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int"
                ],
                "cond_channels": [
                    "int"
                ],
                "n_masks": [
                    "int"
                ],
                "dataset_name": [
                    "str"
                ],
                "indices": [
                    "Sequence[int]"
                ],
                "batch_size": [
                    "int"
                ],
                "seqlen": [
                    "int"
                ],
                "criterion_name": [
                    "str"
                ],
                "basedir": [
                    "str"
                ],
                "progress": [
                    "Tuple[(int, int)]"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "CDNAInference.__get_loader": {
            "name": "__get_loader",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "dataloader": []
            }
        },
        "CDNAInference.get_inferloader": {
            "name": "get_inferloader",
            "location": 461,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDNAInference.infer_once": {
            "name": "infer_once",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": []
            }
        }
    },
    "cse291g-sv2p-master/src/train/__init__.py": {},
    "cse291g-sv2p-master/test/sv2p/test_cdna.py": {
        "test_depthwise_conv2d": {
            "name": "test_depthwise_conv2d",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestConditionalUNetLSTM.test_shape_no_condition": {
            "name": "test_shape_no_condition",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalUNetLSTM.test_shape_with_condition": {
            "name": "test_shape_with_condition",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalUNetLSTM.init_inputs": {
            "name": "init_inputs",
            "location": 45,
            "return": [
                "Union[(list, Tuple[(list, list)])]"
            ],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "TestCDNA.test_shape_no_condition": {
            "name": "test_shape_no_condition",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCDNA.test_shape_with_condition": {
            "name": "test_shape_with_condition",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cse291g-sv2p-master/test/sv2p/test_criteria.py": {
        "test_rot90": {
            "name": "test_rot90",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rot90_batch": {
            "name": "test_rot90_batch",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cse291g-sv2p-master/test/train/test_loaddata.py": {
        "_test_sample_dataset": {
            "name": "_test_sample_dataset",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": [],
                "assertion": [
                    "Callable"
                ]
            }
        },
        "test_sample_movingmnist": {
            "name": "test_sample_movingmnist",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample_kth": {
            "name": "test_sample_kth",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_sample_movingmnist._assertion": {
            "name": "_assertion",
            "location": 22,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_sample_kth._assertion": {
            "name": "_assertion",
            "location": 32,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "cse291g-sv2p-master/test/train/test_schesample.py": {
        "test_sample_targets": {
            "name": "test_sample_targets",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cse291g-sv2p-master/test/train/test_train_cdna.py": {
        "TestCDNATrainer.test_basic_run": {
            "name": "test_basic_run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestCDNATrainer.test_basic_run_ss": {
            "name": "test_basic_run_ss",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        }
    }
}
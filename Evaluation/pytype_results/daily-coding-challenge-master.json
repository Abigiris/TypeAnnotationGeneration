{
    "daily-coding-challenge-master/algorithms/__init__.py": {},
    "daily-coding-challenge-master/algorithms/backtracking/knight_tour.py": {
        "is_valid_move": {
            "name": "is_valid_move",
            "location": 7,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "block_size": [],
                "traversed": []
            }
        },
        "print_tour": {
            "name": "print_tour",
            "location": 11,
            "return": [],
            "arguments": {
                "traversed": [],
                "block_size": []
            }
        },
        "knight_tour": {
            "name": "knight_tour",
            "location": 16,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "num_moves": [],
                "traversed": [],
                "x_moves": [],
                "y_moves": [],
                "block_size": []
            }
        },
        "solve_knight_tour": {
            "name": "solve_knight_tour",
            "location": 46,
            "return": [],
            "arguments": {
                "block_size": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/backtracking/string_permutation.py": {
        "permutate": {
            "name": "permutate",
            "location": 6,
            "return": [],
            "arguments": {
                "str_list": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/backtracking/__init__.py": {},
    "daily-coding-challenge-master/algorithms/divide_and_conquer/median_of_sorted_arrays.py": {
        "median": {
            "name": "median",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": [],
                "n": []
            }
        },
        "median_arrays": {
            "name": "median_arrays",
            "location": 15,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/divide_and_conquer/power_of_number.py": {
        "power": {
            "name": "power",
            "location": 8,
            "return": [],
            "arguments": {
                "x": [],
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/divide_and_conquer/__init__.py": {},
    "daily-coding-challenge-master/algorithms/greedy/activity_selection.py": {
        "max_activities": {
            "name": "max_activities",
            "location": 8,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/greedy/__init__.py": {},
    "daily-coding-challenge-master/algorithms/miscellaneous/hash_table.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HashTable.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashTable.__make_hash": {
            "name": "__make_hash",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HashTable.__setitem__": {
            "name": "__setitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HashTable.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HashTable.__delitem__": {
            "name": "__delitem__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HashTable.items": {
            "name": "items",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashTable.keys": {
            "name": "keys",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashTable.values": {
            "name": "values",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/miscellaneous/__init__.py": {},
    "daily-coding-challenge-master/algorithms/pattern_matching/kmp.py": {
        "compute_lps": {
            "name": "compute_lps",
            "location": 13,
            "return": [],
            "arguments": {
                "pattern": [],
                "m": []
            }
        },
        "kmp": {
            "name": "kmp",
            "location": 36,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/pattern_matching/naive.py": {
        "match": {
            "name": "match",
            "location": 9,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/pattern_matching/rabin_karp.py": {
        "calculate_hash": {
            "name": "calculate_hash",
            "location": 22,
            "return": [],
            "arguments": {
                "string": [],
                "prev_hash": [],
                "start": [],
                "end": [],
                "h": []
            }
        },
        "rabin_karp": {
            "name": "rabin_karp",
            "location": 39,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/pattern_matching/__init__.py": {},
    "daily-coding-challenge-master/algorithms/searching/binary_search.py": {
        "bin_search_recursive": {
            "name": "bin_search_recursive",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "element": [],
                "start": [],
                "end": []
            }
        },
        "bin_search_iterative": {
            "name": "bin_search_iterative",
            "location": 24,
            "return": [],
            "arguments": {
                "arr": [],
                "element": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/searching/exponential_search.py": {
        "exponential_search": {
            "name": "exponential_search",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": [],
                "element": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/searching/interpolation_search.py": {
        "interpolation_search": {
            "name": "interpolation_search",
            "location": 12,
            "return": [],
            "arguments": {
                "arr": [],
                "element": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/searching/jump_search.py": {
        "linear_search": {
            "name": "linear_search",
            "location": 16,
            "return": [],
            "arguments": {
                "arr": [],
                "element": [],
                "start": [],
                "end": []
            }
        },
        "jump_search": {
            "name": "jump_search",
            "location": 26,
            "return": [],
            "arguments": {
                "arr": [],
                "element": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/searching/__init__.py": {},
    "daily-coding-challenge-master/algorithms/sorting/bubble_sort.py": {
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/bucket_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "bucket_sort": {
            "name": "bucket_sort",
            "location": 26,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/counting_sort.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/heap_sort.py": {
        "heapify": {
            "name": "heapify",
            "location": 16,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        },
        "parent": {
            "name": "parent",
            "location": 38,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "left_child": {
            "name": "left_child",
            "location": 44,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "right_child": {
            "name": "right_child",
            "location": 48,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "heap_sort": {
            "name": "heap_sort",
            "location": 52,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/insertion_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 12,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/merge_sort.py": {
        "merge": {
            "name": "merge",
            "location": 17,
            "return": [],
            "arguments": {
                "first_arr": [],
                "second_arr": []
            }
        },
        "merge_sort_recursive": {
            "name": "merge_sort_recursive",
            "location": 41,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/quicksort.py": {
        "partition": {
            "name": "partition",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        },
        "quicksort_recursive": {
            "name": "quicksort_recursive",
            "location": 30,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        },
        "quicksort_iterative": {
            "name": "quicksort_iterative",
            "location": 37,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/radix_sort.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 11,
            "return": [],
            "arguments": {
                "arr": [],
                "exp": [],
                "base": []
            }
        },
        "radix_sort": {
            "name": "radix_sort",
            "location": 34,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/selection_sort.py": {
        "selection_sort": {
            "name": "selection_sort",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/algorithms/sorting/__init__.py": {},
    "daily-coding-challenge-master/ctci/__init__.py": {},
    "daily-coding-challenge-master/ctci/ch1/check_string_permutation.py": {
        "check_permutation": {
            "name": "check_permutation",
            "location": 9,
            "return": [],
            "arguments": {
                "str1": [],
                "str2": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch1/palindrome_permutation.py": {
        "is_permutation_palindrome": {
            "name": "is_permutation_palindrome",
            "location": 10,
            "return": [],
            "arguments": {
                "str_in": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch1/string_compression.py": {
        "compress": {
            "name": "compress",
            "location": 11,
            "return": [],
            "arguments": {
                "str_in": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch1/unique_characters.py": {
        "using_hash_table": {
            "name": "using_hash_table",
            "location": 8,
            "return": [],
            "arguments": {
                "str_in": []
            }
        },
        "without_using_additional_data_structures": {
            "name": "without_using_additional_data_structures",
            "location": 21,
            "return": [],
            "arguments": {
                "str_in": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch1/urlify.py": {
        "urlify": {
            "name": "urlify",
            "location": 11,
            "return": [],
            "arguments": {
                "str_in": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch1/__init__.py": {},
    "daily-coding-challenge-master/ctci/ch2/delete_middle_element.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.push": {
            "name": "push",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.delete_middle": {
            "name": "delete_middle",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "middle": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/intersection.py": {
        "intersect": {
            "name": "intersect",
            "location": 13,
            "return": [],
            "arguments": {
                "ll1": [],
                "ll2": []
            }
        },
        "get_loop": {
            "name": "get_loop",
            "location": 40,
            "return": [],
            "arguments": {
                "ll": []
            }
        },
        "intersect_without_extra_space": {
            "name": "intersect_without_extra_space",
            "location": 71,
            "return": [],
            "arguments": {
                "ll1": [],
                "ll2": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/list_structure.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LinkedList.push": {
            "name": "push",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.__len__": {
            "name": "__len__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/palindrome.py": {
        "palindrome": {
            "name": "palindrome",
            "location": 7,
            "return": [],
            "arguments": {
                "ll": []
            }
        },
        "palindrome.palindrome_recursive": {
            "name": "palindrome_recursive",
            "location": 12,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/partition.py": {
        "partition": {
            "name": "partition",
            "location": 17,
            "return": [],
            "arguments": {
                "ll": [],
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/remove_duplicates.py": {
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 7,
            "return": [],
            "arguments": {
                "llist": []
            }
        },
        "remove_duplicates_without_buffer": {
            "name": "remove_duplicates_without_buffer",
            "location": 26,
            "return": [],
            "arguments": {
                "llist": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/return_kth_to_last.py": {
        "kth_to_last_element": {
            "name": "kth_to_last_element",
            "location": 6,
            "return": [],
            "arguments": {
                "llist": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/sum_lists.py": {
        "sum_reverse": {
            "name": "sum_reverse",
            "location": 20,
            "return": [],
            "arguments": {
                "ll1": [],
                "ll2": []
            }
        },
        "sum_forward": {
            "name": "sum_forward",
            "location": 55,
            "return": [],
            "arguments": {
                "ll1": [],
                "ll2": []
            }
        },
        "sum_forward.get_recursive_sum": {
            "name": "get_recursive_sum",
            "location": 61,
            "return": [],
            "arguments": {
                "h1": [],
                "h2": [],
                "carry": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch2/__init__.py": {},
    "daily-coding-challenge-master/ctci/ch3/animal_shelter.py": {
        "Animal.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "order": []
            }
        },
        "Animal.is_older": {
            "name": "is_older",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AnimalShelterQueue.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnimalShelterQueue.enqueue": {
            "name": "enqueue",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": []
            }
        },
        "AnimalShelterQueue.dequeue_any": {
            "name": "dequeue_any",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnimalShelterQueue.dequeue_cat": {
            "name": "dequeue_cat",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnimalShelterQueue.dequeue_dog": {
            "name": "dequeue_dog",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/min_operation_stack.py": {
        "MinOperationStack.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "MinOperationStack.push": {
            "name": "push",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MinOperationStack.pop": {
            "name": "pop",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinOperationStack.min": {
            "name": "min",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/queue.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "Queue.push": {
            "name": "push",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/queue_using_stack.py": {
        "MyQueue.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyQueue.push": {
            "name": "push",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MyQueue.pop": {
            "name": "pop",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/sort_stack.py": {
        "SortStack.sort": {
            "name": "sort",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/stack.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/stack_of_stacks.py": {
        "SetOfStacks.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "number_of_stacks": [],
                "stack_size": []
            }
        },
        "SetOfStacks.push": {
            "name": "push",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SetOfStacks.pop": {
            "name": "pop",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/three_stack_in_one_array.py": {
        "MultiStackArray.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "number_of_stacks": [],
                "size": []
            }
        },
        "MultiStackArray.push": {
            "name": "push",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "stack_num": [],
                "data": []
            }
        },
        "MultiStackArray.pop": {
            "name": "pop",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "stack_num": []
            }
        }
    },
    "daily-coding-challenge-master/ctci/ch3/__init__.py": {},
    "daily-coding-challenge-master/daily_problems/binary_tree_node.py": {
        "inorder_traversal": {
            "name": "inorder_traversal",
            "location": 18,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "level_order_traversal": {
            "name": "level_order_traversal",
            "location": 25,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/flight_itinerary.py": {
        "flight_itinerary": {
            "name": "flight_itinerary",
            "location": 19,
            "return": [],
            "arguments": {
                "flights": [],
                "itinerary": [],
                "num_flights": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/graph.py": {
        "verify_vertices": {
            "name": "verify_vertices",
            "location": 4,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "verify_vertices.wrapper": {
            "name": "wrapper",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "GraphM.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "num_vertices": [],
                "type_of_graph": []
            }
        },
        "GraphM.add_edge": {
            "name": "add_edge",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": [],
                "weight": []
            }
        },
        "GraphM.remove_edge": {
            "name": "remove_edge",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "GraphM.contains_edge": {
            "name": "contains_edge",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/graph_coloring.py": {
        "legal_graph_coloring": {
            "name": "legal_graph_coloring",
            "location": 38,
            "return": [],
            "arguments": {
                "graph": [],
                "num_vertices": [],
                "max_degree": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/linked_list.py": {
        "print_ll": {
            "name": "print_ll",
            "location": 10,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "get_node_count": {
            "name": "get_node_count",
            "location": 21,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "create_ll_from_list": {
            "name": "create_ll_from_list",
            "location": 32,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/longest_substr_with_atmost_k_char.py": {
        "longest_substr": {
            "name": "longest_substr",
            "location": 7,
            "return": [],
            "arguments": {
                "text": [],
                "max_unique": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/n_queen_problem.py": {
        "is_legal_move": {
            "name": "is_legal_move",
            "location": 8,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "dim": [],
                "board": []
            }
        },
        "n_queen": {
            "name": "n_queen",
            "location": 28,
            "return": [],
            "arguments": {
                "dim": []
            }
        },
        "n_queen.solution": {
            "name": "solution",
            "location": 36,
            "return": [],
            "arguments": {
                "q_placed": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/rectangular_love.py": {
        "find_range_overlap": {
            "name": "find_range_overlap",
            "location": 18,
            "return": [],
            "arguments": {
                "point1": [],
                "length1": [],
                "point2": [],
                "length2": []
            }
        },
        "find_rectangular_overlap": {
            "name": "find_rectangular_overlap",
            "location": 36,
            "return": [],
            "arguments": {
                "rect1": [],
                "rect2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/reverse_words.py": {
        "reverse_words": {
            "name": "reverse_words",
            "location": 12,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/__init__.py": {},
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_0.py": {
        "merge_sorted_lists": {
            "name": "merge_sorted_lists",
            "location": 11,
            "return": [],
            "arguments": {
                "arrays": []
            }
        },
        "merge_sorted_lists_min_heap": {
            "name": "merge_sorted_lists_min_heap",
            "location": 28,
            "return": [],
            "arguments": {
                "arrays": []
            }
        },
        "merge_sorted_merge_sort_algorithm": {
            "name": "merge_sorted_merge_sort_algorithm",
            "location": 47,
            "return": [],
            "arguments": {
                "arrays": []
            }
        },
        "merge_sorted_merge_sort_algorithm.merge": {
            "name": "merge",
            "location": 61,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_1.py": {
        "verify_sum": {
            "name": "verify_sum",
            "location": 9,
            "return": [],
            "arguments": {
                "ar": [],
                "value": []
            }
        },
        "verify_sum_2": {
            "name": "verify_sum_2",
            "location": 19,
            "return": [],
            "arguments": {
                "ar": [],
                "value": []
            }
        },
        "verify_sum_3": {
            "name": "verify_sum_3",
            "location": 38,
            "return": [],
            "arguments": {
                "ar": [],
                "value": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_100.py": {
        "min_steps_grid": {
            "name": "min_steps_grid",
            "location": 26,
            "return": [],
            "arguments": {
                "seq": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_11.py": {
        "complete_me": {
            "name": "complete_me",
            "location": 113,
            "return": [],
            "arguments": {
                "prefix": [],
                "word_list": []
            }
        },
        "complete_me_trie": {
            "name": "complete_me_trie",
            "location": 154,
            "return": [],
            "arguments": {
                "prefix": [],
                "trie": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "char": []
            }
        },
        "Trie.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trie.insert": {
            "name": "insert",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_12.py": {
        "staircase_1_2": {
            "name": "staircase_1_2",
            "location": 20,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "staircase": {
            "name": "staircase",
            "location": 35,
            "return": [],
            "arguments": {
                "n": [],
                "choices": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_13.py": {
        "longest_substring": {
            "name": "longest_substring",
            "location": 10,
            "return": [],
            "arguments": {
                "string": [],
                "k": []
            }
        },
        "longest_substring_alt": {
            "name": "longest_substring_alt",
            "location": 46,
            "return": [],
            "arguments": {
                "string": [],
                "k": []
            }
        },
        "longest_substring_3": {
            "name": "longest_substring_3",
            "location": 79,
            "return": [],
            "arguments": {
                "string": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_14.py": {
        "monte_carlo_pi": {
            "name": "monte_carlo_pi",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_15.py": {
        "reservoir_sampling": {
            "name": "reservoir_sampling",
            "location": 8,
            "return": [],
            "arguments": {
                "item": [],
                "count": [],
                "res": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_16.py": {
        "OrderDeque.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "OrderDeque.record": {
            "name": "record",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "order_id": []
            }
        },
        "OrderDeque.get_last": {
            "name": "get_last",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "OrderCircularBuffer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "OrderCircularBuffer.get_next_index": {
            "name": "get_next_index",
            "location": 44,
            "return": [],
            "arguments": {
                "current_index": [],
                "buffer_size": []
            }
        },
        "OrderCircularBuffer.record": {
            "name": "record",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "order_id": []
            }
        },
        "OrderCircularBuffer.get_last": {
            "name": "get_last",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_17.py": {
        "longest_path": {
            "name": "longest_path",
            "location": 41,
            "return": [],
            "arguments": {
                "dir_str": []
            }
        },
        "longest_path.util": {
            "name": "util",
            "location": 50,
            "return": [],
            "arguments": {
                "dirs": [],
                "prefix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_18.py": {
        "max_subarray": {
            "name": "max_subarray",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_19.py": {
        "color_houses_backtrack": {
            "name": "color_houses_backtrack",
            "location": 12,
            "return": [],
            "arguments": {
                "house_colors": [],
                "n": [],
                "k": []
            }
        },
        "color_houses_dp": {
            "name": "color_houses_dp",
            "location": 39,
            "return": [],
            "arguments": {
                "house_colors": [],
                "n": [],
                "k": []
            }
        },
        "color_houses_dp_alt": {
            "name": "color_houses_dp_alt",
            "location": 75,
            "return": [],
            "arguments": {
                "house_colors": [],
                "n": [],
                "k": []
            }
        },
        "color_houses_backtrack.util_backtrack": {
            "name": "util_backtrack",
            "location": 17,
            "return": [],
            "arguments": {
                "house": [],
                "previous_color": []
            }
        },
        "color_houses_dp_alt.get_min": {
            "name": "get_min",
            "location": 82,
            "return": [],
            "arguments": {
                "cur_color": [],
                "previous_house": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_2.py": {
        "get_product_array": {
            "name": "get_product_array",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "get_product_array_without_division": {
            "name": "get_product_array_without_division",
            "location": 25,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "get_product_array_without_div_and_constant_extra_space": {
            "name": "get_product_array_without_div_and_constant_extra_space",
            "location": 43,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_20.py": {
        "get_count": {
            "name": "get_count",
            "location": 16,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "intersecting_point": {
            "name": "intersecting_point",
            "location": 26,
            "return": [],
            "arguments": {
                "linked_list_1": [],
                "linked_list_2": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "_next": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_21.py": {
        "min_rooms": {
            "name": "min_rooms",
            "location": 9,
            "return": [],
            "arguments": {
                "intervals": []
            }
        },
        "min_rooms_alt": {
            "name": "min_rooms_alt",
            "location": 26,
            "return": [],
            "arguments": {
                "intervals": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_22.py": {
        "get_word_list": {
            "name": "get_word_list",
            "location": 19,
            "return": [],
            "arguments": {
                "word_list": [],
                "string": [],
                "current_list": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_23.py": {
        "is_legal": {
            "name": "is_legal",
            "location": 28,
            "return": [],
            "arguments": {
                "board": [],
                "board_rows": [],
                "board_cols": [],
                "new_x": [],
                "new_y": []
            }
        },
        "shortest_path": {
            "name": "shortest_path",
            "location": 41,
            "return": [],
            "arguments": {
                "board": [],
                "board_rows": [],
                "board_cols": [],
                "start_x": [],
                "start_y": [],
                "end_x": [],
                "end_y": [],
                "steps": []
            }
        },
        "is_legal_bfs": {
            "name": "is_legal_bfs",
            "location": 77,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "len_x": [],
                "len_y": [],
                "matrix": [],
                "distance_bfs": []
            }
        },
        "shortest_path_bfs": {
            "name": "shortest_path_bfs",
            "location": 86,
            "return": [],
            "arguments": {
                "matrix": [],
                "len_x": [],
                "len_y": [],
                "start_x": [],
                "start_y": [],
                "end_x": [],
                "end_y": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_24.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LockingBinaryTree.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "LockingBinaryTree._is_subtree_locked": {
            "name": "_is_subtree_locked",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree._is_parent_tree_locked": {
            "name": "_is_parent_tree_locked",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree.incr_parent_lock_count": {
            "name": "incr_parent_lock_count",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree.decr_parent_lock_count": {
            "name": "decr_parent_lock_count",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree.lock": {
            "name": "lock",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree.unlock": {
            "name": "unlock",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LockingBinaryTree.is_locked": {
            "name": "is_locked",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_25.py": {
        "regex_match_naive": {
            "name": "regex_match_naive",
            "location": 16,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        },
        "regex_match_dp": {
            "name": "regex_match_dp",
            "location": 32,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_26.py": {
        "kth_last_element": {
            "name": "kth_last_element",
            "location": 16,
            "return": [],
            "arguments": {
                "linked_list": [],
                "k": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_27.py": {
        "balanced_parenthesis": {
            "name": "balanced_parenthesis",
            "location": 13,
            "return": [],
            "arguments": {
                "parenthesis": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_28.py": {
        "get_spaced_string": {
            "name": "get_spaced_string",
            "location": 24,
            "return": [],
            "arguments": {
                "string_list": [],
                "string_len": [],
                "line_length": []
            }
        },
        "word_wrap": {
            "name": "word_wrap",
            "location": 50,
            "return": [],
            "arguments": {
                "words": [],
                "line_length": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_29.py": {
        "encode": {
            "name": "encode",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 34,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_3.py": {
        "serialize": {
            "name": "serialize",
            "location": 30,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "deserialize": {
            "name": "deserialize",
            "location": 37,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "left": [],
                "right": []
            }
        },
        "deserialize.deserializer": {
            "name": "deserializer",
            "location": 40,
            "return": [],
            "arguments": {
                "str_arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_30.py": {
        "trapped_water": {
            "name": "trapped_water",
            "location": 16,
            "return": [],
            "arguments": {
                "elevations": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_31.py": {
        "edit_distance_naive": {
            "name": "edit_distance_naive",
            "location": 13,
            "return": [],
            "arguments": {
                "first": [],
                "i": [],
                "f_len": [],
                "second": [],
                "j": [],
                "s_len": []
            }
        },
        "edit_distance_dp": {
            "name": "edit_distance_dp",
            "location": 35,
            "return": [],
            "arguments": {
                "first": [],
                "f_len": [],
                "second": [],
                "s_len": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_32.py": {
        "arbitrage": {
            "name": "arbitrage",
            "location": 51,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_33.py": {
        "running_median_fast": {
            "name": "running_median_fast",
            "location": 12,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "running_median": {
            "name": "running_median",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_34.py": {
        "lexicographic_palindrome": {
            "name": "lexicographic_palindrome",
            "location": 15,
            "return": [],
            "arguments": {
                "text": [],
                "start": [],
                "end": []
            }
        },
        "find_min_insertions_palindrome": {
            "name": "find_min_insertions_palindrome",
            "location": 38,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_35.py": {
        "segregate_rgb": {
            "name": "segregate_rgb",
            "location": 12,
            "return": [],
            "arguments": {
                "input_arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_36.py": {
        "get_second_largest": {
            "name": "get_second_largest",
            "location": 9,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "get_second_largest_alt": {
            "name": "get_second_largest_alt",
            "location": 35,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "get_second_largest_alt.get_largest_child": {
            "name": "get_largest_child",
            "location": 36,
            "return": [],
            "arguments": {
                "node": [],
                "parent_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_37.py": {
        "power_set": {
            "name": "power_set",
            "location": 10,
            "return": [],
            "arguments": {
                "original_set": []
            }
        },
        "power_set2": {
            "name": "power_set2",
            "location": 22,
            "return": [],
            "arguments": {
                "original": [],
                "index": [],
                "size": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_38.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 9,
            "return": [],
            "arguments": {
                "board": [],
                "n": [],
                "x": [],
                "y": []
            }
        },
        "n_queen": {
            "name": "n_queen",
            "location": 31,
            "return": [],
            "arguments": {
                "board": [],
                "n": [],
                "next_x": []
            }
        },
        "n_queen_count": {
            "name": "n_queen_count",
            "location": 50,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_39.py": {
        "update_range": {
            "name": "update_range",
            "location": 21,
            "return": [],
            "arguments": {
                "board": [],
                "board_size": [],
                "first": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 97,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "get_neighbour_count": {
            "name": "get_neighbour_count",
            "location": 107,
            "return": [],
            "arguments": {
                "board": [],
                "x": [],
                "y": [],
                "board_size": []
            }
        },
        "fill_neighbors_array": {
            "name": "fill_neighbors_array",
            "location": 118,
            "return": [],
            "arguments": {
                "board": [],
                "neighbours": [],
                "cell": [],
                "board_size": []
            }
        },
        "get_new_state": {
            "name": "get_new_state",
            "location": 128,
            "return": [],
            "arguments": {
                "board": [],
                "neighbours": [],
                "living_cells": [],
                "board_size": []
            }
        },
        "conway_game_of_life": {
            "name": "conway_game_of_life",
            "location": 153,
            "return": [],
            "arguments": {
                "living_cells": [],
                "board_size": [],
                "steps": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_4.py": {
        "first_missing_positive_integer_using_constant_space": {
            "name": "first_missing_positive_integer_using_constant_space",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "first_missing_positive_integer": {
            "name": "first_missing_positive_integer",
            "location": 41,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "first_missing_positive_integer_using_extra_space": {
            "name": "first_missing_positive_integer_using_extra_space",
            "location": 49,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_40.py": {
        "find_unique": {
            "name": "find_unique",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "find_unique_opt": {
            "name": "find_unique_opt",
            "location": 32,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_41.py": {
        "backtrack_fi": {
            "name": "backtrack_fi",
            "location": 24,
            "return": [],
            "arguments": {
                "itineraries": [],
                "start": []
            }
        },
        "flight_itinerary": {
            "name": "flight_itinerary",
            "location": 40,
            "return": [],
            "arguments": {
                "itineraries": [],
                "start": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_42.py": {
        "subset_sum": {
            "name": "subset_sum",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": [],
                "k": [],
                "arr_size": [],
                "res": [],
                "index": [],
                "total": []
            }
        },
        "subset_sum_dp": {
            "name": "subset_sum_dp",
            "location": 36,
            "return": [],
            "arguments": {
                "arr": [],
                "k": [],
                "arr_size": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_43.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Stack.max": {
            "name": "max",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_44.py": {
        "merge": {
            "name": "merge",
            "location": 14,
            "return": [],
            "arguments": {
                "left_arr": [],
                "right_arr": []
            }
        },
        "count_inversions": {
            "name": "count_inversions",
            "location": 36,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_45.py": {
        "rand5": {
            "name": "rand5",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "rand25": {
            "name": "rand25",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "rand7": {
            "name": "rand7",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_46.py": {
        "longest_palindromic_substring": {
            "name": "longest_palindromic_substring",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_47.py": {
        "max_profit": {
            "name": "max_profit",
            "location": 11,
            "return": [],
            "arguments": {
                "stocks": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_48.py": {
        "reconstruct_tree": {
            "name": "reconstruct_tree",
            "location": 16,
            "return": [],
            "arguments": {
                "preorder": [],
                "inorder": []
            }
        },
        "reconstruct_tree.tree": {
            "name": "tree",
            "location": 24,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_49.py": {
        "max_sum": {
            "name": "max_sum",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_5.py": {
        "cons": {
            "name": "cons",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "car": {
            "name": "car",
            "location": 16,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "cdr": {
            "name": "cdr",
            "location": 33,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "car2": {
            "name": "car2",
            "location": 50,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "cdr2": {
            "name": "cdr2",
            "location": 54,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "cons.pair": {
            "name": "pair",
            "location": 10,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_50.py": {
        "arithmetic_bin_tree": {
            "name": "arithmetic_bin_tree",
            "location": 27,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_51.py": {
        "shuffle": {
            "name": "shuffle",
            "location": 13,
            "return": [],
            "arguments": {
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_53.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_55.py": {
        "URL.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL._get_shortened_url": {
            "name": "_get_shortened_url",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URL.shorten": {
            "name": "shorten",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "URL.restore": {
            "name": "restore",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "short_url": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_56.py": {
        "can_color_graph": {
            "name": "can_color_graph",
            "location": 13,
            "return": [],
            "arguments": {
                "graph": [],
                "num_vertices": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_57.py": {
        "word_break": {
            "name": "word_break",
            "location": 16,
            "return": [],
            "arguments": {
                "text": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_58.py": {
        "find_index": {
            "name": "find_index",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_59.py": {
        "get_files_that_are_different": {
            "name": "get_files_that_are_different",
            "location": 55,
            "return": [],
            "arguments": {
                "root_1": [],
                "root_2": [],
                "change_1": [],
                "change_2": []
            }
        },
        "MerkleTree.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "is_dir": []
            }
        },
        "MerkleTree.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MerkleTree.set_content": {
            "name": "set_content",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "MerkleTree.add_to_directory": {
            "name": "add_to_directory",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "MerkleTree.recalculate_directory_hash": {
            "name": "recalculate_directory_hash",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_60.py": {
        "split_arr": {
            "name": "split_arr",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": [],
                "arr_len": [],
                "ind": [],
                "arr1": [],
                "arr2": []
            }
        },
        "subset_sum": {
            "name": "subset_sum",
            "location": 33,
            "return": [],
            "arguments": {
                "arr": [],
                "arr_len": [],
                "total": []
            }
        },
        "can_split": {
            "name": "can_split",
            "location": 75,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_61.py": {
        "power": {
            "name": "power",
            "location": 11,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "power.calc_pow": {
            "name": "calc_pow",
            "location": 19,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_62.py": {
        "count_ways_recursive": {
            "name": "count_ways_recursive",
            "location": 16,
            "return": [],
            "arguments": {
                "n": [],
                "m": []
            }
        },
        "count_ways_dp": {
            "name": "count_ways_dp",
            "location": 27,
            "return": [],
            "arguments": {
                "n": [],
                "m": []
            }
        },
        "count_ways_print_all_paths": {
            "name": "count_ways_print_all_paths",
            "location": 47,
            "return": [],
            "arguments": {
                "n": [],
                "m": []
            }
        },
        "count_ways_combinatorics": {
            "name": "count_ways_combinatorics",
            "location": 75,
            "return": [],
            "arguments": {
                "n": [],
                "m": []
            }
        },
        "count_ways_print_all_paths.print_paths": {
            "name": "print_paths",
            "location": 48,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "ways": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_63.py": {
        "recursive_search": {
            "name": "recursive_search",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": [],
                "x": [],
                "x_max": [],
                "y": [],
                "y_max": [],
                "word": [],
                "index": [],
                "w_len": [],
                "direction": []
            }
        },
        "find_word": {
            "name": "find_word",
            "location": 46,
            "return": [],
            "arguments": {
                "arr": [],
                "word": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_65.py": {
        "print_matrix": {
            "name": "print_matrix",
            "location": 16,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_66.py": {
        "toss_biased": {
            "name": "toss_biased",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "toss_unbaised": {
            "name": "toss_unbaised",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_69.py": {
        "largest_product_naive": {
            "name": "largest_product_naive",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "largest_product": {
            "name": "largest_product",
            "location": 30,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_7.py": {
        "count_mapping": {
            "name": "count_mapping",
            "location": 11,
            "return": [],
            "arguments": {
                "str_arr": []
            }
        },
        "get_cur_val": {
            "name": "get_cur_val",
            "location": 72,
            "return": [],
            "arguments": {
                "cur_val": [],
                "next_val": [],
                "dp": [],
                "index": []
            }
        },
        "count_mapping_dp": {
            "name": "count_mapping_dp",
            "location": 87,
            "return": [],
            "arguments": {
                "input_str": []
            }
        },
        "count_mapping.join_string_sets": {
            "name": "join_string_sets",
            "location": 12,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "count_mapping.get_mappings": {
            "name": "get_mappings",
            "location": 30,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_70.py": {
        "get_sum_of_digs": {
            "name": "get_sum_of_digs",
            "location": 10,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "perfect_number_brute_force": {
            "name": "perfect_number_brute_force",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "perfect_number_faster": {
            "name": "perfect_number_faster",
            "location": 48,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_71.py": {
        "rand7": {
            "name": "rand7",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "rand5": {
            "name": "rand5",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_73.py": {
        "reverse_ll": {
            "name": "reverse_ll",
            "location": 9,
            "return": [],
            "arguments": {
                "head_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_74.py": {
        "multi_count": {
            "name": "multi_count",
            "location": 10,
            "return": [],
            "arguments": {
                "n": [],
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_75.py": {
        "longest_increasing_sub": {
            "name": "longest_increasing_sub",
            "location": 12,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_76.py": {
        "make_lexicographic": {
            "name": "make_lexicographic",
            "location": 22,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_77.py": {
        "overlapping_intervals": {
            "name": "overlapping_intervals",
            "location": 12,
            "return": [],
            "arguments": {
                "intervals": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_78.py": {
        "merge_linked_list": {
            "name": "merge_linked_list",
            "location": 11,
            "return": [],
            "arguments": {
                "sorted_ll": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_79.py": {
        "verify_non_decreasing": {
            "name": "verify_non_decreasing",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_8.py": {
        "count_unival": {
            "name": "count_unival",
            "location": 20,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_80.py": {
        "get_deepest_node": {
            "name": "get_deepest_node",
            "location": 15,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "get_deepest_node.get_deepest": {
            "name": "get_deepest",
            "location": 16,
            "return": [],
            "arguments": {
                "node": [],
                "level": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_81.py": {
        "get_phone_mapping": {
            "name": "get_phone_mapping",
            "location": 19,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_82.py": {
        "FileReader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "FileReader.read7": {
            "name": "read7",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReader.read_n": {
            "name": "read_n",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_83.py": {
        "invert_tree": {
            "name": "invert_tree",
            "location": 22,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_84.py": {
        "mark_neighbors": {
            "name": "mark_neighbors",
            "location": 17,
            "return": [],
            "arguments": {
                "matrix": [],
                "h": [],
                "w": [],
                "height": [],
                "width": []
            }
        },
        "num_islands": {
            "name": "num_islands",
            "location": 36,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_85.py": {
        "get_result": {
            "name": "get_result",
            "location": 7,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_86.py": {
        "count_remove_parenthesis": {
            "name": "count_remove_parenthesis",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_87.py": {
        "default_dir_map": {
            "name": "default_dir_map",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "add_rules_to_dict": {
            "name": "add_rules_to_dict",
            "location": 38,
            "return": [],
            "arguments": {
                "rules": [],
                "dir_map": []
            }
        },
        "is_valid_direction": {
            "name": "is_valid_direction",
            "location": 54,
            "return": [],
            "arguments": {
                "direction": [],
                "cur_node": [],
                "dir_map": [],
                "visited": []
            }
        },
        "validate_directions": {
            "name": "validate_directions",
            "location": 75,
            "return": [],
            "arguments": {
                "rules": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_88.py": {
        "custom_division": {
            "name": "custom_division",
            "location": 8,
            "return": [],
            "arguments": {
                "numerator": [],
                "denominator": []
            }
        },
        "custom_division_all_int": {
            "name": "custom_division_all_int",
            "location": 18,
            "return": [],
            "arguments": {
                "numerator": [],
                "denominator": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_89.py": {
        "_is_bst": {
            "name": "_is_bst",
            "location": 14,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": [],
                "node": []
            }
        },
        "is_bst": {
            "name": "is_bst",
            "location": 26,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_9.py": {
        "largest_non_adjacent_sum": {
            "name": "largest_non_adjacent_sum",
            "location": 13,
            "return": [],
            "arguments": {
                "input_list": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_90.py": {
        "custom_random": {
            "name": "custom_random",
            "location": 8,
            "return": [],
            "arguments": {
                "n": [],
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_91.py": {},
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_92.py": {
        "_course_order": {
            "name": "_course_order",
            "location": 14,
            "return": [],
            "arguments": {
                "independent": [],
                "final_order": [],
                "pre_reqs": []
            }
        },
        "course_order": {
            "name": "course_order",
            "location": 43,
            "return": [],
            "arguments": {
                "pre_reqs": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_93.py": {
        "_largest_bst": {
            "name": "_largest_bst",
            "location": 11,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": [],
                "root_node": []
            }
        },
        "largest_bst": {
            "name": "largest_bst",
            "location": 46,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_94.py": {
        "_max_sum_path": {
            "name": "_max_sum_path",
            "location": 10,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "max_sum_path": {
            "name": "max_sum_path",
            "location": 33,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_95.py": {
        "next_greatest_perm": {
            "name": "next_greatest_perm",
            "location": 16,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_96.py": {
        "get_permutations": {
            "name": "get_permutations",
            "location": 8,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_97.py": {
        "BSTNode.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BST.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BST._insert_node": {
            "name": "_insert_node",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "root_node": [],
                "node": []
            }
        },
        "BST.insert": {
            "name": "insert",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BST._search": {
            "name": "_search",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "cur_node": [],
                "min_time": [],
                "max_time": []
            }
        },
        "BST.search": {
            "name": "search",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "time": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.set": {
            "name": "set",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "time": []
            }
        },
        "Map.get": {
            "name": "get",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "time": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_98.py": {
        "verify_word_at_pos": {
            "name": "verify_word_at_pos",
            "location": 20,
            "return": [],
            "arguments": {
                "board": [],
                "h": [],
                "height": [],
                "w": [],
                "width": [],
                "word": [],
                "index": [],
                "word_len": [],
                "marked": []
            }
        },
        "exists": {
            "name": "exists",
            "location": 60,
            "return": [],
            "arguments": {
                "board": [],
                "word": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/problem_99.py": {
        "longest_consecutive_subsequence": {
            "name": "longest_consecutive_subsequence",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_0.py": {
        "TestMergeKSortedList.test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements": {
            "name": "test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedList.test_given_two_lists_with_two_different_elements_returns_a_sorted_list": {
            "name": "test_given_two_lists_with_two_different_elements_returns_a_sorted_list",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedList.test_given_k_lists_returns_a_sorted_list": {
            "name": "test_given_k_lists_returns_a_sorted_list",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "input_lists": [],
                "expected_output": []
            }
        },
        "TestMergeKSortedListUsingMinHeap.test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements": {
            "name": "test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedListUsingMinHeap.test_given_two_lists_with_two_different_elements_returns_a_sorted_list": {
            "name": "test_given_two_lists_with_two_different_elements_returns_a_sorted_list",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedListUsingMinHeap.test_given_k_lists_returns_a_sorted_list": {
            "name": "test_given_k_lists_returns_a_sorted_list",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "input_lists": [],
                "expected_output": []
            }
        },
        "TestMergeKSortedListUsingMergeSort.test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements": {
            "name": "test_given_two_lists_with_same_elements_each_returns_a_list_of_two_elements",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedListUsingMergeSort.test_given_two_lists_with_two_different_elements_returns_a_sorted_list": {
            "name": "test_given_two_lists_with_two_different_elements_returns_a_sorted_list",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeKSortedListUsingMergeSort.test_given_k_lists_returns_a_sorted_list": {
            "name": "test_given_k_lists_returns_a_sorted_list",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "input_lists": [],
                "expected_output": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_1.py": {
        "TestSum.test_only_two_numbers": {
            "name": "test_only_two_numbers",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSum.test_three_numbers": {
            "name": "test_three_numbers",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "arr": [],
                "k": [],
                "expected": []
            }
        },
        "TestSum2.test_only_two_numbers": {
            "name": "test_only_two_numbers",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSum2.test_three_numbers": {
            "name": "test_three_numbers",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "arr": [],
                "k": [],
                "expected": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_2.py": {
        "TestProduct.test_one_element_should_return_null_array": {
            "name": "test_one_element_should_return_null_array",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "input_arr": [],
                "expected_output": []
            }
        },
        "TestProduct.test_two_elements_should_return_array_elements_with_positions_exchanged": {
            "name": "test_two_elements_should_return_array_elements_with_positions_exchanged",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "input_arr": [],
                "expected_output": []
            }
        },
        "TestProduct.test_three_element_arrays": {
            "name": "test_three_element_arrays",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "input_arr": [],
                "expected_output": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_3.py": {
        "TestSerializeDeserializeTree.test_can_create_tree": {
            "name": "test_can_create_tree",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeDeserializeTree.test_can_attach_right_and_left_children_to_tree": {
            "name": "test_can_attach_right_and_left_children_to_tree",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeDeserializeTree.test_can_serialize_tree_with_only_root_element": {
            "name": "test_can_serialize_tree_with_only_root_element",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeDeserializeTree.test_can_serialize_tree_with_children": {
            "name": "test_can_serialize_tree_with_children",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeDeserializeTree.test_can_deserialize_a_serialized_node": {
            "name": "test_can_deserialize_a_serialized_node",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeDeserializeTree.test_can_deserialize_a_serialized_binary_tree": {
            "name": "test_can_deserialize_a_serialized_binary_tree",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_4.py": {
        "TestFindFirstMissingPositiveInteger.test_given_zero_should_return_one": {
            "name": "test_given_zero_should_return_one",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveInteger.test_given_one_should_return_two": {
            "name": "test_given_one_should_return_two",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveInteger.test_given_two_should_return_one": {
            "name": "test_given_two_should_return_one",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveInteger.test_given_array_return_first_positive_integer": {
            "name": "test_given_array_return_first_positive_integer",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "input_arr": [],
                "expected_output": []
            }
        },
        "TestFindFirstMissingPositiveIntegerWithExtraSpace.test_given_zero_should_return_one": {
            "name": "test_given_zero_should_return_one",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveIntegerWithExtraSpace.test_given_one_should_return_two": {
            "name": "test_given_one_should_return_two",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveIntegerWithExtraSpace.test_given_two_should_return_one": {
            "name": "test_given_two_should_return_one",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindFirstMissingPositiveIntegerWithExtraSpace.test_given_array_return_first_positive_integer": {
            "name": "test_given_array_return_first_positive_integer",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "input_arr": [],
                "expected_output": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_7.py": {
        "TestCountMapping.test_zero_returns_zero": {
            "name": "test_zero_returns_zero",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_single_digit_returns_one": {
            "name": "test_single_digit_returns_one",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": []
            }
        },
        "TestCountMapping.test_given_ten_twenty_returns_one": {
            "name": "test_given_ten_twenty_returns_one",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_given_valid_two_digit_between_11_and_26_should_return_two": {
            "name": "test_given_valid_two_digit_between_11_and_26_should_return_two",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "input_str": []
            }
        },
        "TestCountMapping.test_given_valid_two_digit_greater_than_26": {
            "name": "test_given_valid_two_digit_greater_than_26",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_given_100_should_return_0": {
            "name": "test_given_100_should_return_0",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_given_101_should_return_1": {
            "name": "test_given_101_should_return_1",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_111_should_return_3": {
            "name": "test_111_should_return_3",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCountMapping.test_1111_should_return_5": {
            "name": "test_1111_should_return_5",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/test_9.py": {
        "TestLargestSum.test_empty_list_should_return_null": {
            "name": "test_empty_list_should_return_null",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLargestSum.test_list_with_one_integer_should_return_the_integer": {
            "name": "test_list_with_one_integer_should_return_the_integer",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "input_list": [],
                "expected": []
            }
        },
        "TestLargestSum.test_list_with_two_integers_should_return_the_higher_value": {
            "name": "test_list_with_two_integers_should_return_the_higher_value",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "given_input": [],
                "expected": []
            }
        },
        "TestLargestSum.test_list_of_3_ints_should_return_max_non_adjacent_sum": {
            "name": "test_list_of_3_ints_should_return_max_non_adjacent_sum",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "given_input": [],
                "expected": []
            }
        },
        "TestLargestSum.test_list_of_4_ints_should_return_max_non_adjacent_sum": {
            "name": "test_list_of_4_ints_should_return_max_non_adjacent_sum",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "given_input": [],
                "expected": []
            }
        },
        "TestLargestSum.test_sample_problem": {
            "name": "test_sample_problem",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_0_to_100/__init__.py": {},
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_101.py": {
        "get_prime_numbers_till": {
            "name": "get_prime_numbers_till",
            "location": 19,
            "return": [],
            "arguments": {
                "number": [],
                "primes": []
            }
        },
        "get_prime_pair_using_primes": {
            "name": "get_prime_pair_using_primes",
            "location": 31,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_102.py": {
        "contiguous_sum": {
            "name": "contiguous_sum",
            "location": 12,
            "return": [],
            "arguments": {
                "numbers": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_103.py": {
        "shortest_substring_containing_characters": {
            "name": "shortest_substring_containing_characters",
            "location": 15,
            "return": [],
            "arguments": {
                "text": [],
                "char_set": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_104.py": {
        "is_palindrome_dll": {
            "name": "is_palindrome_dll",
            "location": 20,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "is_palindrome_ll": {
            "name": "is_palindrome_ll",
            "location": 40,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "create_ll": {
            "name": "create_ll",
            "location": 61,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "create_dll": {
            "name": "create_dll",
            "location": 76,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "LLNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DLLNode.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_105.py": {
        "debounce": {
            "name": "debounce",
            "location": 12,
            "return": [],
            "arguments": {
                "milliseconds": []
            }
        },
        "f": {
            "name": "f",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "debounce.decorator": {
            "name": "decorator",
            "location": 18,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "debounce.decorator.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_106.py": {
        "can_reach_end": {
            "name": "can_reach_end",
            "location": 10,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "min_num_steps_to_end": {
            "name": "min_num_steps_to_end",
            "location": 29,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_107.py": {
        "bfs_tree": {
            "name": "bfs_tree",
            "location": 15,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_108.py": {
        "can_shift_a_to_get_b": {
            "name": "can_shift_a_to_get_b",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_109.py": {
        "swap_bits": {
            "name": "swap_bits",
            "location": 12,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_110.py": {
        "bin_tree_path": {
            "name": "bin_tree_path",
            "location": 19,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_111.py": {
        "get_anagrams": {
            "name": "get_anagrams",
            "location": 9,
            "return": [],
            "arguments": {
                "text": [],
                "word": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_112.py": {
        "lca": {
            "name": "lca",
            "location": 15,
            "return": [],
            "arguments": {
                "first": [],
                "second": [],
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_113.py": {
        "reverse_text": {
            "name": "reverse_text",
            "location": 9,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "reverse_text_mutable": {
            "name": "reverse_text_mutable",
            "location": 13,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_114.py": {
        "reverse_words_keeping_delimiters": {
            "name": "reverse_words_keeping_delimiters",
            "location": 9,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_115.py": {
        "is_subtree_naive": {
            "name": "is_subtree_naive",
            "location": 13,
            "return": [],
            "arguments": {
                "root_1": [],
                "root_2": []
            }
        },
        "is_subtree_fast": {
            "name": "is_subtree_fast",
            "location": 32,
            "return": [],
            "arguments": {
                "root_node_1": [],
                "root_node_2": []
            }
        },
        "is_subtree_fast.inorder": {
            "name": "inorder",
            "location": 39,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "is_subtree_fast.preorder": {
            "name": "preorder",
            "location": 44,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_116.py": {
        "generate_1": {
            "name": "generate_1",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "generate_2": {
            "name": "generate_2",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "Node1.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "left": [],
                "right": []
            }
        },
        "Node2.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "left": [],
                "right": []
            }
        },
        "Node2.left": {
            "name": "left",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node2.right": {
            "name": "right",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_117.py": {
        "level_with_min_sum": {
            "name": "level_with_min_sum",
            "location": 10,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_118.py": {
        "merge_sorted_lists": {
            "name": "merge_sorted_lists",
            "location": 10,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "square_and_sort": {
            "name": "square_and_sort",
            "location": 30,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_119.py": {
        "cover_intervals": {
            "name": "cover_intervals",
            "location": 13,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_120.py": {
        "Singleton.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Singleton.instance": {
            "name": "instance",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_121.py": {
        "_make_palindrome": {
            "name": "_make_palindrome",
            "location": 7,
            "return": [],
            "arguments": {
                "text": [],
                "start": [],
                "end": [],
                "k": []
            }
        },
        "make_palindrome_naive": {
            "name": "make_palindrome_naive",
            "location": 29,
            "return": [],
            "arguments": {
                "text": [],
                "k": []
            }
        },
        "make_palindrome_dp": {
            "name": "make_palindrome_dp",
            "location": 36,
            "return": [],
            "arguments": {
                "text": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_122.py": {
        "max_sum": {
            "name": "max_sum",
            "location": 16,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_123.py": {
        "verify_beginning": {
            "name": "verify_beginning",
            "location": 17,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "verify_body": {
            "name": "verify_body",
            "location": 21,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "verify_end": {
            "name": "verify_end",
            "location": 54,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "string_is_number": {
            "name": "string_is_number",
            "location": 58,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_124.py": {
        "num_coin_flips": {
            "name": "num_coin_flips",
            "location": 13,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_125.py": {
        "get_sorted_values": {
            "name": "get_sorted_values",
            "location": 18,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "get_sum_nodes": {
            "name": "get_sum_nodes",
            "location": 32,
            "return": [],
            "arguments": {
                "root_node": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_126.py": {
        "get_rotated_list": {
            "name": "get_rotated_list",
            "location": 10,
            "return": [],
            "arguments": {
                "values": [],
                "k": []
            }
        },
        "get_rotated_list_without_extra_space": {
            "name": "get_rotated_list_without_extra_space",
            "location": 21,
            "return": [],
            "arguments": {
                "values": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_127.py": {
        "sum_ll": {
            "name": "sum_ll",
            "location": 19,
            "return": [],
            "arguments": {
                "head_1": [],
                "head_2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_128.py": {
        "tower_of_hanoi": {
            "name": "tower_of_hanoi",
            "location": 27,
            "return": [],
            "arguments": {
                "n": [],
                "first": [],
                "aux": [],
                "third": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_129.py": {
        "almost_equal": {
            "name": "almost_equal",
            "location": 6,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "my_sqrt": {
            "name": "my_sqrt",
            "location": 12,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_130.py": {
        "max_profit_with_k_buys_and_sells": {
            "name": "max_profit_with_k_buys_and_sells",
            "location": 12,
            "return": [],
            "arguments": {
                "prices": [],
                "max_sells": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_131.py": {
        "deep_clone_ll": {
            "name": "deep_clone_ll",
            "location": 15,
            "return": [],
            "arguments": {
                "ll_head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_132.py": {
        "CounterNodeNull.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CounterNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "parent": []
            }
        },
        "HitCounter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HitCounter.update_parent_count": {
            "name": "update_parent_count",
            "location": 47,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "HitCounter.create_node": {
            "name": "create_node",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "parent": [],
                "timestamp": []
            }
        },
        "HitCounter.record": {
            "name": "record",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "HitCounter.total": {
            "name": "total",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HitCounter.find_common_parent": {
            "name": "find_common_parent",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "first_node": [],
                "second_node": []
            }
        },
        "HitCounter.range": {
            "name": "range",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_133.py": {
        "inorder_successor": {
            "name": "inorder_successor",
            "location": 26,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "parent": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_134.py": {
        "SparseArray.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "SparseArray.init": {
            "name": "init",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": [],
                "size": []
            }
        },
        "SparseArray.set": {
            "name": "set",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "val": []
            }
        },
        "SparseArray.get": {
            "name": "get",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_135.py": {
        "min_sum_path_root_to_leaf": {
            "name": "min_sum_path_root_to_leaf",
            "location": 18,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_136.py": {
        "get_rectangular_area": {
            "name": "get_rectangular_area",
            "location": 15,
            "return": [],
            "arguments": {
                "matrix": [],
                "h": [],
                "w": [],
                "n": [],
                "m": []
            }
        },
        "largest_rectangle": {
            "name": "largest_rectangle",
            "location": 38,
            "return": [],
            "arguments": {
                "matrix": [],
                "n": [],
                "m": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_137.py": {
        "BitArray.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "BitArray.set": {
            "name": "set",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "val": []
            }
        },
        "BitArray.get": {
            "name": "get",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_138.py": {
        "min_coins_greedy": {
            "name": "min_coins_greedy",
            "location": 10,
            "return": [],
            "arguments": {
                "cents": [],
                "denominations": []
            }
        },
        "min_coins_dp": {
            "name": "min_coins_dp",
            "location": 30,
            "return": [],
            "arguments": {
                "cents": [],
                "denominations": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_139.py": {
        "PeekableInterface.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": []
            }
        },
        "PeekableInterface.peek": {
            "name": "peek",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeekableInterface.next": {
            "name": "next",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeekableInterface.hasNext": {
            "name": "hasNext",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_140.py": {
        "get_single_elements": {
            "name": "get_single_elements",
            "location": 15,
            "return": [],
            "arguments": {
                "elements": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_141.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "stack_number": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "stack_number": []
            }
        },
        "Stack.set_next_index": {
            "name": "set_next_index",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.print_stack": {
            "name": "print_stack",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "stack_number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_142.py": {
        "is_balanced": {
            "name": "is_balanced",
            "location": 8,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "balanced_parentheses": {
            "name": "balanced_parentheses",
            "location": 27,
            "return": [],
            "arguments": {
                "text": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_143.py": {
        "three_way_q_sort": {
            "name": "three_way_q_sort",
            "location": 11,
            "return": [],
            "arguments": {
                "numbers": [],
                "pivot": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_144.py": {
        "nearest_larger_number": {
            "name": "nearest_larger_number",
            "location": 14,
            "return": [],
            "arguments": {
                "numbers": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_145.py": {
        "swap_nodes_in_pairs": {
            "name": "swap_nodes_in_pairs",
            "location": 10,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "list_to_ll": {
            "name": "list_to_ll",
            "location": 27,
            "return": [],
            "arguments": {
                "nums": []
            }
        },
        "print_ll": {
            "name": "print_ll",
            "location": 37,
            "return": [],
            "arguments": {
                "head": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_146.py": {
        "prune": {
            "name": "prune",
            "location": 28,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_147.py": {
        "reverse": {
            "name": "reverse",
            "location": 7,
            "return": [],
            "arguments": {
                "lst": [],
                "i": [],
                "j": []
            }
        },
        "get_max_val_index": {
            "name": "get_max_val_index",
            "location": 11,
            "return": [],
            "arguments": {
                "lst": [],
                "start": [],
                "end": []
            }
        },
        "pancake_sorting": {
            "name": "pancake_sorting",
            "location": 21,
            "return": [],
            "arguments": {
                "lst": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_148.py": {
        "_flip_bit": {
            "name": "_flip_bit",
            "location": 11,
            "return": [],
            "arguments": {
                "bit": []
            }
        },
        "_generator": {
            "name": "_generator",
            "location": 15,
            "return": [],
            "arguments": {
                "n": [],
                "prev_val": [],
                "values": []
            }
        },
        "gray_codes": {
            "name": "gray_codes",
            "location": 26,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_149.py": {
        "SumList.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "lst": []
            }
        },
        "SumList._get_left_sum": {
            "name": "_get_left_sum",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumList.sum": {
            "name": "sum",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "left_index": [],
                "right_index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_150.py": {
        "distance": {
            "name": "distance",
            "location": 13,
            "return": [],
            "arguments": {
                "x1": [],
                "y1": [],
                "x2": [],
                "y2": []
            }
        },
        "k_nearest": {
            "name": "k_nearest",
            "location": 20,
            "return": [],
            "arguments": {
                "coordinates": [],
                "x": [],
                "y": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_151.py": {
        "get_neighbors": {
            "name": "get_neighbors",
            "location": 15,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "height": [],
                "width": []
            }
        },
        "_replace_colors": {
            "name": "_replace_colors",
            "location": 25,
            "return": [],
            "arguments": {
                "matrix": [],
                "start_x": [],
                "start_y": [],
                "height": [],
                "width": [],
                "color": [],
                "new_color": []
            }
        },
        "replace_colors": {
            "name": "replace_colors",
            "location": 43,
            "return": [],
            "arguments": {
                "matrix": [],
                "x": [],
                "y": [],
                "color": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_152.py": {
        "get_probability": {
            "name": "get_probability",
            "location": 12,
            "return": [],
            "arguments": {
                "numbers": [],
                "sum_arr": []
            }
        },
        "generate_probability_sum": {
            "name": "generate_probability_sum",
            "location": 22,
            "return": [],
            "arguments": {
                "probabilities": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_153.py": {
        "shortest_distance": {
            "name": "shortest_distance",
            "location": 13,
            "return": [],
            "arguments": {
                "text": [],
                "first": [],
                "second": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_154.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_155.py": {
        "majority_element": {
            "name": "majority_element",
            "location": 9,
            "return": [],
            "arguments": {
                "elements": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_156.py": {
        "min_squared_values_naive": {
            "name": "min_squared_values_naive",
            "location": 8,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "min_squared_dp": {
            "name": "min_squared_dp",
            "location": 23,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_157.py": {
        "has_palindrome": {
            "name": "has_palindrome",
            "location": 10,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_158.py": {
        "num_ways": {
            "name": "num_ways",
            "location": 19,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_159.py": {
        "first_recurring": {
            "name": "first_recurring",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_160.py": {
        "_longest_path": {
            "name": "_longest_path",
            "location": 24,
            "return": [],
            "arguments": {
                "cur_node": []
            }
        },
        "longest_path": {
            "name": "longest_path",
            "location": 52,
            "return": [],
            "arguments": {
                "cur_node": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_161.py": {
        "reverse_bits": {
            "name": "reverse_bits",
            "location": 11,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_162.py": {
        "get_shortest_unique_prefixes": {
            "name": "get_shortest_unique_prefixes",
            "location": 41,
            "return": [],
            "arguments": {
                "words": []
            }
        },
        "Trie.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trie.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trie.add_word": {
            "name": "add_word",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Trie.get_shortest_unique_prefix": {
            "name": "get_shortest_unique_prefix",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "prev": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_163.py": {
        "reverse_polish": {
            "name": "reverse_polish",
            "location": 17,
            "return": [],
            "arguments": {
                "notation": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_164.py": {
        "find_duplicate_arithmetic_series": {
            "name": "find_duplicate_arithmetic_series",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "find_duplicate_set": {
            "name": "find_duplicate_set",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "find_duplicate_sign": {
            "name": "find_duplicate_sign",
            "location": 30,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_165.py": {
        "num_smaller_to_right_naive": {
            "name": "num_smaller_to_right_naive",
            "location": 15,
            "return": [],
            "arguments": {
                "nums": []
            }
        },
        "num_smaller_to_right_bst": {
            "name": "num_smaller_to_right_bst",
            "location": 61,
            "return": [],
            "arguments": {
                "nums": []
            }
        },
        "BSTNode.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "l_count": []
            }
        },
        "BST.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "BST.insert": {
            "name": "insert",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_166.py": {
        "ArrayIterator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "arr": []
            }
        },
        "ArrayIterator._get_next": {
            "name": "_get_next",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayIterator.next": {
            "name": "next",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayIterator.has_next": {
            "name": "has_next",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_167.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 10,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "unique_indices": {
            "name": "unique_indices",
            "location": 22,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_168.py": {
        "rotate_matrix": {
            "name": "rotate_matrix",
            "location": 13,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_169.py": {
        "get_middle": {
            "name": "get_middle",
            "location": 13,
            "return": [],
            "arguments": {
                "head": [],
                "size": []
            }
        },
        "_merge": {
            "name": "_merge",
            "location": 22,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "_merge_sort": {
            "name": "_merge_sort",
            "location": 60,
            "return": [],
            "arguments": {
                "head": [],
                "size": []
            }
        },
        "merge_sort": {
            "name": "merge_sort",
            "location": 72,
            "return": [],
            "arguments": {
                "head": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_170.py": {
        "can_transform": {
            "name": "can_transform",
            "location": 20,
            "return": [],
            "arguments": {
                "word_1": [],
                "word_2": []
            }
        },
        "_transform": {
            "name": "_transform",
            "location": 31,
            "return": [],
            "arguments": {
                "cur": [],
                "end": [],
                "dictionary": [],
                "visited": []
            }
        },
        "transformation_seq": {
            "name": "transformation_seq",
            "location": 54,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "dictionary": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_171.py": {
        "busiest_period": {
            "name": "busiest_period",
            "location": 17,
            "return": [],
            "arguments": {
                "entries": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_172.py": {
        "get_indices": {
            "name": "get_indices",
            "location": 18,
            "return": [],
            "arguments": {
                "text": [],
                "words": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_173.py": {
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 25,
            "return": [],
            "arguments": {
                "original": [],
                "prefix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_175.py": {
        "MarkovChain.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "transitions": []
            }
        },
        "MarkovChain._construct_transition_dict": {
            "name": "_construct_transition_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "transitions": []
            }
        },
        "MarkovChain.run": {
            "name": "run",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "times": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_176.py": {
        "map_chars": {
            "name": "map_chars",
            "location": 14,
            "return": [],
            "arguments": {
                "text_1": [],
                "text_2": []
            }
        },
        "map_chars_one_to_one": {
            "name": "map_chars_one_to_one",
            "location": 49,
            "return": [],
            "arguments": {
                "text_1": [],
                "text_2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_177.py": {
        "right_shift_linked_list": {
            "name": "right_shift_linked_list",
            "location": 9,
            "return": [],
            "arguments": {
                "head": [],
                "positions": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_178.py": {
        "dice_throw_game": {
            "name": "dice_throw_game",
            "location": 15,
            "return": [],
            "arguments": {
                "game": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_179.py": {
        "find_index_of_smaller": {
            "name": "find_index_of_smaller",
            "location": 17,
            "return": [],
            "arguments": {
                "numbers": [],
                "start_index": [],
                "last_index": []
            }
        },
        "find_index_of_larger": {
            "name": "find_index_of_larger",
            "location": 25,
            "return": [],
            "arguments": {
                "numbers": [],
                "start_index": [],
                "last_index": []
            }
        },
        "_construct_bst": {
            "name": "_construct_bst",
            "location": 33,
            "return": [],
            "arguments": {
                "postorder": [],
                "start_index": [],
                "end_index": []
            }
        },
        "bst_from_postorder_traversal": {
            "name": "bst_from_postorder_traversal",
            "location": 52,
            "return": [],
            "arguments": {
                "postorder": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_180.py": {
        "interleave_stack": {
            "name": "interleave_stack",
            "location": 59,
            "return": [],
            "arguments": {
                "stack": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.size": {
            "name": "size",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.stack": {
            "name": "stack",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.size": {
            "name": "size",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_182.py": {
        "is_cyclic": {
            "name": "is_cyclic",
            "location": 12,
            "return": [],
            "arguments": {
                "graph": [],
                "cur_vertex": [],
                "parent": [],
                "visited": []
            }
        },
        "is_minimally_connected": {
            "name": "is_minimally_connected",
            "location": 30,
            "return": [],
            "arguments": {
                "graph": [],
                "num_vertices": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_184.py": {
        "gcd": {
            "name": "gcd",
            "location": 8,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "mul_gcd": {
            "name": "mul_gcd",
            "location": 15,
            "return": [],
            "arguments": {
                "nums": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_185.py": {
        "intersection_area": {
            "name": "intersection_area",
            "location": 23,
            "return": [],
            "arguments": {
                "rectangle_1": [],
                "rectangle_2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_187.py": {
        "overlapping_rectangles": {
            "name": "overlapping_rectangles",
            "location": 29,
            "return": [],
            "arguments": {
                "rectangles": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_188.py": {
        "make_functions": {
            "name": "make_functions",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "make_functions.print_i": {
            "name": "print_i",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "make_functions.print_i2": {
            "name": "print_i2",
            "location": 24,
            "return": [],
            "arguments": {
                "i": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_189.py": {
        "length_of_longest_subarray": {
            "name": "length_of_longest_subarray",
            "location": 12,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_190.py": {
        "kadane_sum": {
            "name": "kadane_sum",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "subarray_sum": {
            "name": "subarray_sum",
            "location": 29,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_191.py": {
        "min_intervals_to_remove": {
            "name": "min_intervals_to_remove",
            "location": 15,
            "return": [],
            "arguments": {
                "intervals": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_192.py": {
        "can_reach_end": {
            "name": "can_reach_end",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_194.py": {
        "num_intersections": {
            "name": "num_intersections",
            "location": 11,
            "return": [],
            "arguments": {
                "p": [],
                "q": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_195.py": {
        "count_less_than": {
            "name": "count_less_than",
            "location": 19,
            "return": [],
            "arguments": {
                "matrix": [],
                "height": [],
                "width": [],
                "i": [],
                "j": []
            }
        },
        "count_greater_than": {
            "name": "count_greater_than",
            "location": 48,
            "return": [],
            "arguments": {
                "matrix": [],
                "height": [],
                "width": [],
                "i": [],
                "j": []
            }
        },
        "count_elements": {
            "name": "count_elements",
            "location": 77,
            "return": [],
            "arguments": {
                "matrix": [],
                "i1": [],
                "j1": [],
                "i2": [],
                "j2": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_196.py": {
        "_subtree_sum": {
            "name": "_subtree_sum",
            "location": 17,
            "return": [],
            "arguments": {
                "root_node": [],
                "count": []
            }
        },
        "subtree_sum": {
            "name": "subtree_sum",
            "location": 31,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_197.py": {
        "rotate_arr": {
            "name": "rotate_arr",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_198.py": {
        "largest_subset": {
            "name": "largest_subset",
            "location": 13,
            "return": [],
            "arguments": {
                "numbers": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_199.py": {
        "get_balanced_parenthesis": {
            "name": "get_balanced_parenthesis",
            "location": 12,
            "return": [],
            "arguments": {
                "parenthesis": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/problem_200.py": {
        "stabbing_points": {
            "name": "stabbing_points",
            "location": 13,
            "return": [],
            "arguments": {
                "intervals": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_101_to_200/__init__.py": {},
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/201.py": {
        "max_prev_row": {
            "name": "max_prev_row",
            "location": 17,
            "return": [],
            "arguments": {
                "row": [],
                "h": [],
                "w": []
            }
        },
        "max_weight_path": {
            "name": "max_weight_path",
            "location": 26,
            "return": [],
            "arguments": {
                "rows": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/202.py": {
        "verify_palindrome": {
            "name": "verify_palindrome",
            "location": 8,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/203.py": {
        "min_element": {
            "name": "min_element",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/204.py": {
        "get_left_height": {
            "name": "get_left_height",
            "location": 11,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "get_right_height": {
            "name": "get_right_height",
            "location": 22,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "count_nodes": {
            "name": "count_nodes",
            "location": 33,
            "return": [],
            "arguments": {
                "root_node": [],
                "left_height": [],
                "right_height": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/205.py": {
        "next_permutation": {
            "name": "next_permutation",
            "location": 7,
            "return": [],
            "arguments": {
                "integer": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/206.py": {
        "get_original": {
            "name": "get_original",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": [],
                "perm": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/207.py": {
        "dfs": {
            "name": "dfs",
            "location": 10,
            "return": [],
            "arguments": {
                "graph": [],
                "vertex": [],
                "cur_color": [],
                "colors": [],
                "visited": []
            }
        },
        "is_graph_bipartite": {
            "name": "is_graph_bipartite",
            "location": 30,
            "return": [],
            "arguments": {
                "graph": [],
                "num_vertices": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/208.py": {
        "partition_list": {
            "name": "partition_list",
            "location": 11,
            "return": [],
            "arguments": {
                "head": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/209.py": {
        "lcs": {
            "name": "lcs",
            "location": 9,
            "return": [],
            "arguments": {
                "first": [],
                "second": [],
                "third": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/210.py": {
        "collatz_sequence": {
            "name": "collatz_sequence",
            "location": 14,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "get_longest_sequence": {
            "name": "get_longest_sequence",
            "location": 28,
            "return": [],
            "arguments": {
                "max_val": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/211.py": {
        "longest_proper_prefix": {
            "name": "longest_proper_prefix",
            "location": 9,
            "return": [],
            "arguments": {
                "pattern": [],
                "length": []
            }
        },
        "pattern_search": {
            "name": "pattern_search",
            "location": 27,
            "return": [],
            "arguments": {
                "text": [],
                "pat": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/212.py": {
        "column_id": {
            "name": "column_id",
            "location": 11,
            "return": [],
            "arguments": {
                "column": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/213.py": {
        "is_valid": {
            "name": "is_valid",
            "location": 10,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "_generate_addresses": {
            "name": "_generate_addresses",
            "location": 14,
            "return": [],
            "arguments": {
                "num": [],
                "index": [],
                "size": [],
                "iteration": []
            }
        },
        "generate_ip_addresses": {
            "name": "generate_ip_addresses",
            "location": 40,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/214.py": {
        "longest_consecutive_run": {
            "name": "longest_consecutive_run",
            "location": 8,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/215.py": {
        "_bottom_view": {
            "name": "_bottom_view",
            "location": 27,
            "return": [],
            "arguments": {
                "root_node": [],
                "view": [],
                "position": []
            }
        },
        "bottom_view": {
            "name": "bottom_view",
            "location": 41,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/216.py": {
        "roman_to_decimal": {
            "name": "roman_to_decimal",
            "location": 27,
            "return": [],
            "arguments": {
                "roman": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/217.py": {
        "next_sparse": {
            "name": "next_sparse",
            "location": 9,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/218.py": {
        "transpose_directed_graph": {
            "name": "transpose_directed_graph",
            "location": 8,
            "return": [],
            "arguments": {
                "graph": [],
                "num_vertices": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/219.py": {
        "Connect4.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connect4.winner": {
            "name": "winner",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connect4._check_horizontally": {
            "name": "_check_horizontally",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "column": []
            }
        },
        "Connect4._check_vertically": {
            "name": "_check_vertically",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "column": []
            }
        },
        "Connect4._check_first_diagonal": {
            "name": "_check_first_diagonal",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "column": []
            }
        },
        "Connect4._check_second_diagonal": {
            "name": "_check_second_diagonal",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "column": []
            }
        },
        "Connect4.game_ended": {
            "name": "game_ended",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "column": []
            }
        },
        "Connect4.play": {
            "name": "play",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/220.py": {
        "_max_amount_rec": {
            "name": "_max_amount_rec",
            "location": 12,
            "return": [],
            "arguments": {
                "row": [],
                "size": [],
                "row_sum": []
            }
        },
        "max_amount_recursive": {
            "name": "max_amount_recursive",
            "location": 28,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "max_amount_dp": {
            "name": "max_amount_dp",
            "location": 35,
            "return": [],
            "arguments": {
                "row": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/221.py": {
        "seven_ish_number": {
            "name": "seven_ish_number",
            "location": 8,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/222.py": {
        "standardized_path": {
            "name": "standardized_path",
            "location": 10,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/223.py": {
        "inorder": {
            "name": "inorder",
            "location": 9,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/224.py": {
        "smallest_positive_integer_not_in_array": {
            "name": "smallest_positive_integer_not_in_array",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/225.py": {
        "josephus_problem": {
            "name": "josephus_problem",
            "location": 18,
            "return": [],
            "arguments": {
                "n": [],
                "k": []
            }
        },
        "josephus_problem_2": {
            "name": "josephus_problem_2",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/226.py": {
        "get_characters": {
            "name": "get_characters",
            "location": 11,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "dfs": {
            "name": "dfs",
            "location": 21,
            "return": [],
            "arguments": {
                "graph": [],
                "src": [],
                "visited": [],
                "pool": []
            }
        },
        "topological_sorting": {
            "name": "topological_sorting",
            "location": 32,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "order_of_letters": {
            "name": "order_of_letters",
            "location": 43,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/227.py": {
        "Boggle.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "grid": [],
                "words": [],
                "size_x": [],
                "size_y": []
            }
        },
        "Boggle.get_neighbors": {
            "name": "get_neighbors",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Boggle.find_at_index": {
            "name": "find_at_index",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "index": [],
                "size": [],
                "x": [],
                "y": [],
                "visited": []
            }
        },
        "Boggle.solve": {
            "name": "solve",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/228.py": {
        "get_sorted": {
            "name": "get_sorted",
            "location": 11,
            "return": [],
            "arguments": {
                "num_1": [],
                "num_2": []
            }
        },
        "largest_integer": {
            "name": "largest_integer",
            "location": 27,
            "return": [],
            "arguments": {
                "nums": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/229.py": {
        "SnakesAndLadders.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "snakes": [],
                "ladders": [],
                "width": [],
                "height": []
            }
        },
        "SnakesAndLadders.min_turns": {
            "name": "min_turns",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/230.py": {
        "egg_drop_problem": {
            "name": "egg_drop_problem",
            "location": 14,
            "return": [],
            "arguments": {
                "num_eggs": [],
                "num_floors": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/231.py": {
        "rearrange_duplicate_char": {
            "name": "rearrange_duplicate_char",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/232.py": {
        "PrefixMapSum.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrefixMapSum.insert": {
            "name": "insert",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "PrefixMapSum.sum": {
            "name": "sum",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/233.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 7,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/234.py": {
        "gen_graph_from_adjacency_matrix": {
            "name": "gen_graph_from_adjacency_matrix",
            "location": 11,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "KruskalMST.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "vertices": []
            }
        },
        "KruskalMST.sorted_edges": {
            "name": "sorted_edges",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KruskalMST.union": {
            "name": "union",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "KruskalMST.find": {
            "name": "find",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "KruskalMST.get_mst": {
            "name": "get_mst",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/235.py": {
        "min_max": {
            "name": "min_max",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/237.py": {
        "tree_is_symmetric": {
            "name": "tree_is_symmetric",
            "location": 19,
            "return": [],
            "arguments": {
                "root_1": [],
                "root_2": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/241.py": {
        "get_h_index": {
            "name": "get_h_index",
            "location": 17,
            "return": [],
            "arguments": {
                "citations": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/242.py": {
        "Subscribers.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subscribers.update": {
            "name": "update",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "hour": [],
                "value": []
            }
        },
        "Subscribers.query": {
            "name": "query",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/243.py": {
        "_partition": {
            "name": "_partition",
            "location": 14,
            "return": [],
            "arguments": {
                "array": [],
                "index": [],
                "n": [],
                "k": []
            }
        },
        "partition_recursive": {
            "name": "partition_recursive",
            "location": 34,
            "return": [],
            "arguments": {
                "array": [],
                "n": [],
                "k": []
            }
        },
        "partition_dp": {
            "name": "partition_dp",
            "location": 40,
            "return": [],
            "arguments": {
                "array": [],
                "n": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/244.py": {
        "SieveOfEratosthenes.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SieveOfEratosthenes.next": {
            "name": "next",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/245.py": {
        "min_jumps": {
            "name": "min_jumps",
            "location": 14,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/246.py": {
        "_can_form_a_circle": {
            "name": "_can_form_a_circle",
            "location": 14,
            "return": [],
            "arguments": {
                "words": [],
                "first": [],
                "prev": []
            }
        },
        "can_form_a_circle": {
            "name": "can_form_a_circle",
            "location": 28,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/247.py": {
        "height_balanced": {
            "name": "height_balanced",
            "location": 11,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/248.py": {
        "get_max": {
            "name": "get_max",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "get_min": {
            "name": "get_min",
            "location": 18,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/249.py": {
        "max_xor": {
            "name": "max_xor",
            "location": 7,
            "return": [],
            "arguments": {
                "nums": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/252.py": {
        "egyptian_fractions": {
            "name": "egyptian_fractions",
            "location": 14,
            "return": [],
            "arguments": {
                "fraction": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/253.py": {
        "set_row_and_direction": {
            "name": "set_row_and_direction",
            "location": 15,
            "return": [],
            "arguments": {
                "row": [],
                "k": [],
                "direction": []
            }
        },
        "print_zig_zag": {
            "name": "print_zig_zag",
            "location": 24,
            "return": [],
            "arguments": {
                "text": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/254.py": {
        "binary_tree_to_full_binary_tree": {
            "name": "binary_tree_to_full_binary_tree",
            "location": 20,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/255.py": {
        "dfs": {
            "name": "dfs",
            "location": 18,
            "return": [],
            "arguments": {
                "graph": [],
                "src": [],
                "dst": [],
                "t_closure": []
            }
        },
        "transitive_closure": {
            "name": "transitive_closure",
            "location": 26,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/256.py": {
        "rearrange_ll": {
            "name": "rearrange_ll",
            "location": 11,
            "return": [],
            "arguments": {
                "head": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/257.py": {
        "smallest_window": {
            "name": "smallest_window",
            "location": 10,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "smallest_window_alt": {
            "name": "smallest_window_alt",
            "location": 30,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/258.py": {
        "boustrophedon": {
            "name": "boustrophedon",
            "location": 20,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/259.py": {
        "ghost": {
            "name": "ghost",
            "location": 20,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/260.py": {
        "reconstruct": {
            "name": "reconstruct",
            "location": 10,
            "return": [],
            "arguments": {
                "nums": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/262.py": {
        "dfs": {
            "name": "dfs",
            "location": 8,
            "return": [],
            "arguments": {
                "graph": [],
                "src": [],
                "visited": []
            }
        },
        "get_bridges": {
            "name": "get_bridges",
            "location": 18,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/263.py": {
        "SentenceChecker.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceChecker.is_valid": {
            "name": "is_valid",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/265.py": {
        "adjust_neighbors": {
            "name": "adjust_neighbors",
            "location": 15,
            "return": [],
            "arguments": {
                "loc": [],
                "res": [],
                "index": [],
                "start": []
            }
        },
        "smallest_bonus": {
            "name": "smallest_bonus",
            "location": 33,
            "return": [],
            "arguments": {
                "loc": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/266.py": {
        "can_convert": {
            "name": "can_convert",
            "location": 13,
            "return": [],
            "arguments": {
                "chars": [],
                "word": []
            }
        },
        "step_words": {
            "name": "step_words",
            "location": 31,
            "return": [],
            "arguments": {
                "words": [],
                "input_word": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/268.py": {
        "power_of_4": {
            "name": "power_of_4",
            "location": 7,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "power_of_4_alt": {
            "name": "power_of_4_alt",
            "location": 11,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/269.py": {
        "get_orientation": {
            "name": "get_orientation",
            "location": 17,
            "return": [],
            "arguments": {
                "tiles": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/270.py": {
        "construct_graph": {
            "name": "construct_graph",
            "location": 20,
            "return": [],
            "arguments": {
                "edges": []
            }
        },
        "get_next_source": {
            "name": "get_next_source",
            "location": 29,
            "return": [],
            "arguments": {
                "min_dist": [],
                "visited": []
            }
        },
        "propagation_time": {
            "name": "propagation_time",
            "location": 41,
            "return": [],
            "arguments": {
                "edges": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/271.py": {
        "is_in_list": {
            "name": "is_in_list",
            "location": 10,
            "return": [],
            "arguments": {
                "lst": [],
                "el": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/272.py": {
        "throw_dice": {
            "name": "throw_dice",
            "location": 9,
            "return": [],
            "arguments": {
                "num_dices": [],
                "num_faces": [],
                "total": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/273.py": {
        "fixed_point": {
            "name": "fixed_point",
            "location": 12,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/275.py": {
        "look_and_say": {
            "name": "look_and_say",
            "location": 19,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/276.py": {
        "longest_proper_prefix": {
            "name": "longest_proper_prefix",
            "location": 13,
            "return": [],
            "arguments": {
                "pattern": [],
                "len_pat": []
            }
        },
        "kmp": {
            "name": "kmp",
            "location": 31,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/277.py": {
        "validate_utf": {
            "name": "validate_utf",
            "location": 22,
            "return": [],
            "arguments": {
                "values": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/278.py": {
        "construct_bst": {
            "name": "construct_bst",
            "location": 9,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/279.py": {
        "dfs": {
            "name": "dfs",
            "location": 17,
            "return": [],
            "arguments": {
                "graph": [],
                "src": [],
                "visited": []
            }
        },
        "friend_groups": {
            "name": "friend_groups",
            "location": 27,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/280.py": {
        "union": {
            "name": "union",
            "location": 14,
            "return": [],
            "arguments": {
                "first": [],
                "second": [],
                "parents": []
            }
        },
        "find": {
            "name": "find",
            "location": 29,
            "return": [],
            "arguments": {
                "src": [],
                "parents": []
            }
        },
        "is_cyclic": {
            "name": "is_cyclic",
            "location": 36,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/281.py": {
        "min_brick_cuts": {
            "name": "min_brick_cuts",
            "location": 24,
            "return": [],
            "arguments": {
                "brick_lengths": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/282.py": {
        "pythagorean_triplets": {
            "name": "pythagorean_triplets",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/283.py": {
        "regular_numbers": {
            "name": "regular_numbers",
            "location": 14,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/284.py": {
        "cousin_nodes": {
            "name": "cousin_nodes",
            "location": 18,
            "return": [],
            "arguments": {
                "root_node": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/285.py": {
        "view_sun": {
            "name": "view_sun",
            "location": 17,
            "return": [],
            "arguments": {
                "buildings": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/286.py": {
        "skyline": {
            "name": "skyline",
            "location": 23,
            "return": [],
            "arguments": {
                "buildings": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/288.py": {
        "kaprekar_constant_count": {
            "name": "kaprekar_constant_count",
            "location": 19,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/290.py": {
        "transformation": {
            "name": "transformation",
            "location": 26,
            "return": [],
            "arguments": {
                "colors": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/291.py": {
        "min_boats": {
            "name": "min_boats",
            "location": 13,
            "return": [],
            "arguments": {
                "weights": [],
                "max_weight": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/292.py": {
        "dfs": {
            "name": "dfs",
            "location": 17,
            "return": [],
            "arguments": {
                "src": [],
                "students": [],
                "first_team": [],
                "second_team": []
            }
        },
        "partition": {
            "name": "partition",
            "location": 42,
            "return": [],
            "arguments": {
                "students": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/295.py": {
        "pascal_triangle": {
            "name": "pascal_triangle",
            "location": 20,
            "return": [],
            "arguments": {
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/296.py": {
        "sorted_array_to_height_balanced_bst": {
            "name": "sorted_array_to_height_balanced_bst",
            "location": 9,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/298.py": {
        "max_apples": {
            "name": "max_apples",
            "location": 16,
            "return": [],
            "arguments": {
                "apples": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/300.py": {
        "VotingMachine.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VotingMachine.count_votes": {
            "name": "count_votes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "VotingMachine.top_candidates": {
            "name": "top_candidates",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/daily_problems/problem_201_to_300/__init__.py": {},
    "daily-coding-challenge-master/fcc/100_doors.py": {
        "count_factors": {
            "name": "count_factors",
            "location": 15,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "is_open": {
            "name": "is_open",
            "location": 30,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "get_state": {
            "name": "get_state",
            "location": 35,
            "return": [],
            "arguments": {
                "numDoors": []
            }
        },
        "is_perfect_square": {
            "name": "is_perfect_square",
            "location": 39,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "get_state_efficient": {
            "name": "get_state_efficient",
            "location": 47,
            "return": [],
            "arguments": {
                "numDoors": []
            }
        }
    },
    "daily-coding-challenge-master/fcc/24_game.py": {
        "div": {
            "name": "div",
            "location": 21,
            "return": [],
            "arguments": {
                "n": [],
                "d": []
            }
        },
        "game": {
            "name": "game",
            "location": 30,
            "return": [],
            "arguments": {
                "num_str": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/__init__.py": {},
    "daily-coding-challenge-master/gfg/arrays/double_the_first.py": {
        "rearrange": {
            "name": "rearrange",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/equal_sum_subarrays_in_two_arrays.py": {
        "subarray": {
            "name": "subarray",
            "location": 8,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/interchange_arr_i_and_j.py": {
        "rearrange": {
            "name": "rearrange",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/kth_largest_sum_contiguous_subarray.py": {
        "largest_sum": {
            "name": "largest_sum",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/kth_smallest_element.py": {
        "parent_index": {
            "name": "parent_index",
            "location": 9,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "left_child_index": {
            "name": "left_child_index",
            "location": 13,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "right_child_index": {
            "name": "right_child_index",
            "location": 17,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "KthSmallestMinHeap.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "arr": []
            }
        },
        "KthSmallestMinHeap.heapify": {
            "name": "heapify",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "end": []
            }
        },
        "KthSmallestMinHeap.extract_min": {
            "name": "extract_min",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "end": []
            }
        },
        "KthSmallestMinHeap.get_kth_smallest_element": {
            "name": "get_kth_smallest_element",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "KthSmallestMaxHeap.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "arr": []
            }
        },
        "KthSmallestMaxHeap.heapify": {
            "name": "heapify",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "end": []
            }
        },
        "KthSmallestMaxHeap.add_element": {
            "name": "add_element",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "end": []
            }
        },
        "KthSmallestMaxHeap.kth_element_max_heap": {
            "name": "kth_element_max_heap",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/kth_smallest_element_in_2d_array.py": {
        "parent_index": {
            "name": "parent_index",
            "location": 16,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "left_child_index": {
            "name": "left_child_index",
            "location": 20,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "right_child_index": {
            "name": "right_child_index",
            "location": 24,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "KthSmallestMinHeap.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "arr": []
            }
        },
        "KthSmallestMinHeap._heapify": {
            "name": "_heapify",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "KthSmallestMinHeap._extract_replace_element": {
            "name": "_extract_replace_element",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KthSmallestMinHeap.kth_element": {
            "name": "kth_element",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/kth_smallest_element_linear_time.py": {
        "quick_select": {
            "name": "quick_select",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/k_max_sum_combinations.py": {
        "k_max_sum": {
            "name": "k_max_sum",
            "location": 17,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "n": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/largest_subarray_equal_0_1.py": {
        "largest_subarray": {
            "name": "largest_subarray",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/largest_sum_contiguous_subarray.py": {
        "max_sum_kadane": {
            "name": "max_sum_kadane",
            "location": 5,
            "return": [],
            "arguments": {
                "nums": []
            }
        },
        "max_sum_print_subarray": {
            "name": "max_sum_print_subarray",
            "location": 18,
            "return": [],
            "arguments": {
                "nums": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_continuous_sum_of_int.py": {
        "continuous_sum": {
            "name": "continuous_sum",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_profit_k_transactions.py": {
        "max_profit": {
            "name": "max_profit",
            "location": 7,
            "return": [],
            "arguments": {
                "prices": [],
                "k": []
            }
        },
        "max_profit_fast": {
            "name": "max_profit_fast",
            "location": 46,
            "return": [],
            "arguments": {
                "prices": [],
                "k": []
            }
        },
        "max_profit.including_current": {
            "name": "including_current",
            "location": 25,
            "return": [],
            "arguments": {
                "mat": [],
                "row": [],
                "col": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_profit_two_transactions.py": {
        "max_profit_rohit": {
            "name": "max_profit_rohit",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "max_profit_optimized": {
            "name": "max_profit_optimized",
            "location": 50,
            "return": [],
            "arguments": {
                "price_arr": []
            }
        },
        "max_profit_rohit.transaction": {
            "name": "transaction",
            "location": 15,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_sum_not_adjacent.py": {
        "max_sum": {
            "name": "max_sum",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_sum_subarray.py": {
        "max_sum_subarray": {
            "name": "max_sum_subarray",
            "location": 6,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/max_value_sum_arr.py": {
        "naive_max_sum": {
            "name": "naive_max_sum",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "max_sum": {
            "name": "max_sum",
            "location": 28,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/median_of_running_stream.py": {
        "RunningMedian.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningMedian.min_heapify_top_down": {
            "name": "min_heapify_top_down",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RunningMedian.min_heapify_bottom_up": {
            "name": "min_heapify_bottom_up",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RunningMedian._add_to_min_heap": {
            "name": "_add_to_min_heap",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "RunningMedian.max_heapify_top_down": {
            "name": "max_heapify_top_down",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RunningMedian.max_heapify_bottom_up": {
            "name": "max_heapify_bottom_up",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RunningMedian._add_to_max_heap": {
            "name": "_add_to_max_heap",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "RunningMedian._set_median": {
            "name": "_set_median",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningMedian.get_median": {
            "name": "get_median",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "new_element": []
            }
        },
        "RunningMedianUsingInbuiltHeapq.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningMedianUsingInbuiltHeapq.add_num": {
            "name": "add_num",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "RunningMedianUsingInbuiltHeapq.find_median": {
            "name": "find_median",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/minimize_maximum_height_diff.py": {
        "minimize_range": {
            "name": "minimize_range",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        },
        "minimize_range.get_min_max": {
            "name": "get_min_max",
            "location": 26,
            "return": [],
            "arguments": {
                "elements": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/min_array_operations.py": {
        "construct_array": {
            "name": "construct_array",
            "location": 12,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/min_distance_in_array.py": {
        "min_distance": {
            "name": "min_distance",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "x": [],
                "y": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/min_jumps_to_end.py": {
        "print_jump": {
            "name": "print_jump",
            "location": 11,
            "return": [],
            "arguments": {
                "jump_list": []
            }
        },
        "min_jumps": {
            "name": "min_jumps",
            "location": 15,
            "return": [],
            "arguments": {
                "arr": [],
                "index": [],
                "length": []
            }
        },
        "min_jumps_dp": {
            "name": "min_jumps_dp",
            "location": 41,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "min_jumps_linear": {
            "name": "min_jumps_linear",
            "location": 63,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "min_jumps_dp.solution": {
            "name": "solution",
            "location": 47,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/min_k_product.py": {
        "min_product": {
            "name": "min_product",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/min_swaps_required.py": {
        "min_swaps": {
            "name": "min_swaps",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/multiple_left_rotations.py": {
        "get_rotation": {
            "name": "get_rotation",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/palindrome_array.py": {
        "count_to_palindrome": {
            "name": "count_to_palindrome",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/positive_negative_nums.py": {
        "alternate_numbers": {
            "name": "alternate_numbers",
            "location": 14,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "alternate_numbers_2": {
            "name": "alternate_numbers_2",
            "location": 52,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "alternate_numbers_2.validate_condition": {
            "name": "validate_condition",
            "location": 53,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "alternate_numbers_2.have_same_sign": {
            "name": "have_same_sign",
            "location": 58,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/queries_on_shifted_array.py": {
        "Queries.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "arr": []
            }
        },
        "Queries.queries": {
            "name": "queries",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "q_type": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/rearrange_array.py": {
        "rearrange": {
            "name": "rearrange",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/rearrange_for_even_greater_than_odd.py": {
        "rearrange": {
            "name": "rearrange",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/replace_value_with_multiplication_of_neighbors.py": {
        "replace": {
            "name": "replace",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/rotate_array.py": {
        "gcd": {
            "name": "gcd",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": [],
                "n": [],
                "d": []
            }
        },
        "reverse_array": {
            "name": "reverse_array",
            "location": 43,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        },
        "rotate_using_reversal_algorithm": {
            "name": "rotate_using_reversal_algorithm",
            "location": 52,
            "return": [],
            "arguments": {
                "arr": [],
                "n": [],
                "d": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/rotation_max_hamming_distance.py": {
        "max_hamming_distance": {
            "name": "max_hamming_distance",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/search_in_rotated_array.py": {
        "get_mid_index": {
            "name": "get_mid_index",
            "location": 6,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        },
        "get_first_position": {
            "name": "get_first_position",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": []
            }
        },
        "bin_search": {
            "name": "bin_search",
            "location": 29,
            "return": [],
            "arguments": {
                "arr": [],
                "start": [],
                "end": [],
                "k": []
            }
        },
        "rotated_bin_search": {
            "name": "rotated_bin_search",
            "location": 43,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        },
        "rotated_bin_search_optimised": {
            "name": "rotated_bin_search_optimised",
            "location": 60,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/smallest_integer_not_represented_by_arr.py": {
        "smallest_integer": {
            "name": "smallest_integer",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/smallest_missing_number.py": {
        "smallest_missing": {
            "name": "smallest_missing",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/smallest_subarray_sum.py": {
        "smallest_subarray": {
            "name": "smallest_subarray",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/subarray_with_equal_number_of_0_and_1.py": {
        "subarray": {
            "name": "subarray",
            "location": 7,
            "return": [],
            "arguments": {
                "orig_arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/subarray_with_least_average.py": {
        "min_avg": {
            "name": "min_avg",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/arrays/__init__.py": {},
    "daily-coding-challenge-master/gfg/backtrack/string_permutation.py": {
        "permute": {
            "name": "permute",
            "location": 6,
            "return": [],
            "arguments": {
                "string_arr": [],
                "left": [],
                "right": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/backtrack/tug_of_war.py": {
        "tow": {
            "name": "tow",
            "location": 11,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "tow.solution": {
            "name": "solution",
            "location": 18,
            "return": [],
            "arguments": {
                "index": [],
                "cur_list1": [],
                "cur_list2": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/backtrack/__init__.py": {},
    "daily-coding-challenge-master/gfg/bin_heap/min_heap.py": {
        "MinHeap.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinHeap.parent_index": {
            "name": "parent_index",
            "location": 19,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "MinHeap.right_child_index": {
            "name": "right_child_index",
            "location": 23,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "MinHeap.left_child_index": {
            "name": "left_child_index",
            "location": 27,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "MinHeap.exchange_nodes": {
            "name": "exchange_nodes",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "index_1": [],
                "index_2": []
            }
        },
        "MinHeap.move_up": {
            "name": "move_up",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MinHeap.min_heapify": {
            "name": "min_heapify",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MinHeap.get_min": {
            "name": "get_min",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinHeap.insert": {
            "name": "insert",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MinHeap.extract_min": {
            "name": "extract_min",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinHeap.update_value": {
            "name": "update_value",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "new_value": []
            }
        },
        "MinHeap.delete": {
            "name": "delete",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bin_heap/__init__.py": {},
    "daily-coding-challenge-master/gfg/bst/bst_and_node.py": {
        "inorder": {
            "name": "inorder",
            "location": 105,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BST.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BST.insert": {
            "name": "insert",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BST.search": {
            "name": "search",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BST.min_value_node": {
            "name": "min_value_node",
            "location": 75,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "BST.delete": {
            "name": "delete",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/bst_to_balanced_bst.py": {
        "bst_to_balanced_bst": {
            "name": "bst_to_balanced_bst",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "bst_to_balanced_bst.get_inorder_array": {
            "name": "get_inorder_array",
            "location": 22,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/bst_to_greater_sum.py": {
        "greater_sum_bst": {
            "name": "greater_sum_bst",
            "location": 10,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "greater_sum_bst.construct": {
            "name": "construct",
            "location": 15,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/check_arr_bst.py": {
        "is_bst": {
            "name": "is_bst",
            "location": 7,
            "return": [],
            "arguments": {
                "values": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/check_if_bin_tree_is_bst.py": {
        "is_bst": {
            "name": "is_bst",
            "location": 12,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "is_bst_using_in_order_traversal": {
            "name": "is_bst_using_in_order_traversal",
            "location": 31,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "is_bst.check_bst": {
            "name": "check_bst",
            "location": 19,
            "return": [],
            "arguments": {
                "node": [],
                "min_": [],
                "max_": []
            }
        },
        "is_bst_using_in_order_traversal.in_order": {
            "name": "in_order",
            "location": 38,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/check_if_bst_is_balanced.py": {
        "height": {
            "name": "height",
            "location": 11,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "is_balanced": {
            "name": "is_balanced",
            "location": 21,
            "return": [],
            "arguments": {
                "root_node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/construct_bst_from_preorder.py": {
        "find_greater": {
            "name": "find_greater",
            "location": 17,
            "return": [],
            "arguments": {
                "elements": [],
                "data": []
            }
        },
        "get_bst": {
            "name": "get_bst",
            "location": 25,
            "return": [],
            "arguments": {
                "preorder": []
            }
        },
        "get_bst_using_min_and_max_value": {
            "name": "get_bst_using_min_and_max_value",
            "location": 48,
            "return": [],
            "arguments": {
                "preorder": []
            }
        },
        "get_bst.construct_tree": {
            "name": "construct_tree",
            "location": 31,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "get_bst_using_min_and_max_value.construct_tree": {
            "name": "construct_tree",
            "location": 54,
            "return": [],
            "arguments": {
                "min_": [],
                "max_": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/preorder_to_bst.py": {
        "construct_bst": {
            "name": "construct_bst",
            "location": 10,
            "return": [],
            "arguments": {
                "preorder": [],
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/sorted_arr_to_bst.py": {
        "sorted_arr_to_bst": {
            "name": "sorted_arr_to_bst",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "sorted_arr_to_bst.construct_bst": {
            "name": "construct_bst",
            "location": 16,
            "return": [],
            "arguments": {
                "elements": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/sorted_ll_to_balanced_bst.py": {
        "create_balanced_bst": {
            "name": "create_balanced_bst",
            "location": 12,
            "return": [],
            "arguments": {
                "linked_list": []
            }
        },
        "create_balanced_bst.balanced_bst": {
            "name": "balanced_bst",
            "location": 19,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/bst/__init__.py": {},
    "daily-coding-challenge-master/gfg/dp/0_1_knapsack.py": {
        "zero_one_knapsack_naive": {
            "name": "zero_one_knapsack_naive",
            "location": 14,
            "return": [],
            "arguments": {
                "w": [],
                "weights": [],
                "values": [],
                "index": []
            }
        },
        "zero_one_knapsack_tabulated": {
            "name": "zero_one_knapsack_tabulated",
            "location": 31,
            "return": [],
            "arguments": {
                "w": [],
                "weights": [],
                "values": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/binomial_coefficient.py": {
        "bin_coef_dp": {
            "name": "bin_coef_dp",
            "location": 10,
            "return": [],
            "arguments": {
                "n": [],
                "k": []
            }
        },
        "bin_coef_efficient": {
            "name": "bin_coef_efficient",
            "location": 27,
            "return": [],
            "arguments": {
                "n": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/box_stacking_problem.py": {
        "get_rotations": {
            "name": "get_rotations",
            "location": 25,
            "return": [],
            "arguments": {
                "boxes": []
            }
        },
        "has_smaller_base": {
            "name": "has_smaller_base",
            "location": 43,
            "return": [],
            "arguments": {
                "box_1": [],
                "box_2": []
            }
        },
        "stack_boxes": {
            "name": "stack_boxes",
            "location": 48,
            "return": [],
            "arguments": {
                "boxes": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/catalan_numbers.py": {
        "catalan_recursive": {
            "name": "catalan_recursive",
            "location": 6,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "catalan_dp": {
            "name": "catalan_dp",
            "location": 19,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/coin_change.py": {
        "change_coin_naive": {
            "name": "change_coin_naive",
            "location": 10,
            "return": [],
            "arguments": {
                "amount": [],
                "denominations": [],
                "index": []
            }
        },
        "change_coin_tabulated": {
            "name": "change_coin_tabulated",
            "location": 29,
            "return": [],
            "arguments": {
                "amount": [],
                "denominations": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/cutting_a_rod.py": {
        "cut_naive": {
            "name": "cut_naive",
            "location": 10,
            "return": [],
            "arguments": {
                "length": [],
                "prices": []
            }
        },
        "cut_tabulated": {
            "name": "cut_tabulated",
            "location": 24,
            "return": [],
            "arguments": {
                "prices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/dice_throw.py": {
        "find_ways": {
            "name": "find_ways",
            "location": 7,
            "return": [],
            "arguments": {
                "m": [],
                "n": [],
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/edit_distance.py": {
        "edit_distance_naive": {
            "name": "edit_distance_naive",
            "location": 9,
            "return": [],
            "arguments": {
                "first": [],
                "index_f": [],
                "len_f": [],
                "second": [],
                "index_s": [],
                "len_s": []
            }
        },
        "edit_distance_dp": {
            "name": "edit_distance_dp",
            "location": 30,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/fibonacci_numbers.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 6,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "fibonacci_space_optimized": {
            "name": "fibonacci_space_optimized",
            "location": 22,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/gold_mine.py": {
        "gold_dp": {
            "name": "gold_dp",
            "location": 11,
            "return": [],
            "arguments": {
                "mine": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/largest_independent_set_tree.py": {
        "lis_size_recursive": {
            "name": "lis_size_recursive",
            "location": 26,
            "return": [],
            "arguments": {
                "node": [],
                "parent_selected": []
            }
        },
        "lis_size_dp": {
            "name": "lis_size_dp",
            "location": 50,
            "return": [],
            "arguments": {
                "node": [],
                "parent_selected": []
            }
        },
        "TabulatedNode.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/longest_common_substring.py": {
        "lcs_naive": {
            "name": "lcs_naive",
            "location": 10,
            "return": [],
            "arguments": {
                "first": [],
                "index_f": [],
                "second": [],
                "index_s": []
            }
        },
        "lcs_tabulated": {
            "name": "lcs_tabulated",
            "location": 26,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/longest_increasing_subsequence.py": {
        "lis_recursive": {
            "name": "lis_recursive",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "cur_index": [],
                "length": [],
                "last_element": []
            }
        },
        "lis_dp_tabulation": {
            "name": "lis_dp_tabulation",
            "location": 24,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/longest_palindromic_subsequence.py": {
        "lps_naive": {
            "name": "lps_naive",
            "location": 8,
            "return": [],
            "arguments": {
                "sequence": [],
                "start": [],
                "end": []
            }
        },
        "lps_tabulated": {
            "name": "lps_tabulated",
            "location": 28,
            "return": [],
            "arguments": {
                "sequence": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/max_sum_subseq.py": {
        "max_sum_naive": {
            "name": "max_sum_naive",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": [],
                "length": [],
                "index": [],
                "prev_max": []
            }
        },
        "max_sum_tabulated": {
            "name": "max_sum_tabulated",
            "location": 23,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/min_cost_to_fill_given_weight.py": {
        "min_cost": {
            "name": "min_cost",
            "location": 11,
            "return": [],
            "arguments": {
                "costs": [],
                "weight": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/min_jumps.py": {
        "min_jumps": {
            "name": "min_jumps",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "min_jumps_efficient": {
            "name": "min_jumps_efficient",
            "location": 32,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/snake_sequence.py": {
        "get_path": {
            "name": "get_path",
            "location": 12,
            "return": [],
            "arguments": {
                "matrix": [],
                "dp": [],
                "max_h": [],
                "max_w": []
            }
        },
        "snake_sequence": {
            "name": "snake_sequence",
            "location": 28,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/subset_sum.py": {
        "subset_sum": {
            "name": "subset_sum",
            "location": 16,
            "return": [],
            "arguments": {
                "values": [],
                "total": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/subset_sum_divisible_by.py": {
        "subset_sum_divisible_back_track": {
            "name": "subset_sum_divisible_back_track",
            "location": 8,
            "return": [],
            "arguments": {
                "numbers": [],
                "m": []
            }
        },
        "sub_set_sum_divisible_dp": {
            "name": "sub_set_sum_divisible_dp",
            "location": 29,
            "return": [],
            "arguments": {
                "numbers": [],
                "m": []
            }
        },
        "subset_sum_divisible_back_track.back_track": {
            "name": "back_track",
            "location": 13,
            "return": [],
            "arguments": {
                "total": [],
                "index": [],
                "size": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/super_ugly_numbers.py": {
        "super_ugly_numbers": {
            "name": "super_ugly_numbers",
            "location": 8,
            "return": [],
            "arguments": {
                "n": [],
                "primes": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/temple_offerings.py": {
        "min_offerings": {
            "name": "min_offerings",
            "location": 15,
            "return": [],
            "arguments": {
                "heights": []
            }
        },
        "min_offerings_two_pass": {
            "name": "min_offerings_two_pass",
            "location": 38,
            "return": [],
            "arguments": {
                "heights": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/ugly_numbers.py": {
        "ugly_number": {
            "name": "ugly_number",
            "location": 6,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/dp/__init__.py": {},
    "daily-coding-challenge-master/gfg/graphs/bellman_ford.py": {
        "bellman_ford_sp": {
            "name": "bellman_ford_sp",
            "location": 19,
            "return": [],
            "arguments": {
                "graph": [],
                "source": [],
                "num_vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/breadth_first_traversal.py": {
        "breadth_first_travel": {
            "name": "breadth_first_travel",
            "location": 10,
            "return": [],
            "arguments": {
                "g": [],
                "first_node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/cycle_in_directed_graph.py": {
        "print_cycle": {
            "name": "print_cycle",
            "location": 9,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "stack": []
            }
        },
        "dfs": {
            "name": "dfs",
            "location": 21,
            "return": [],
            "arguments": {
                "graph": [],
                "vertex": [],
                "cur_stack": [],
                "visited": [],
                "processed": []
            }
        },
        "detect_cycle_dfs": {
            "name": "detect_cycle_dfs",
            "location": 42,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        },
        "detect_print_cycle": {
            "name": "detect_print_cycle",
            "location": 49,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/depth_first_traversal.py": {
        "depth_first_traversal": {
            "name": "depth_first_traversal",
            "location": 9,
            "return": [],
            "arguments": {
                "graph": [],
                "first_node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/dijkstra_shortest_path.py": {
        "next_min": {
            "name": "next_min",
            "location": 14,
            "return": [],
            "arguments": {
                "sp_set": [],
                "distance": []
            }
        },
        "dijsktra_sp": {
            "name": "dijsktra_sp",
            "location": 30,
            "return": [],
            "arguments": {
                "graph": [],
                "source": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/ds.py": {
        "verify_vertices": {
            "name": "verify_vertices",
            "location": 7,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "verify_vertices.wrapper": {
            "name": "wrapper",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "GraphM.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "num_vertices": [],
                "type_of_graph": []
            }
        },
        "GraphM.add_edge": {
            "name": "add_edge",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": [],
                "weight": []
            }
        },
        "GraphM.remove_edge": {
            "name": "remove_edge",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "GraphM.contains_edge": {
            "name": "contains_edge",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GraphL.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "num_vertices": [],
                "type_of_graph": []
            }
        },
        "GraphL.add_directed_edge": {
            "name": "add_directed_edge",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": [],
                "weight": []
            }
        },
        "GraphL.add_edge": {
            "name": "add_edge",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": [],
                "weight": []
            }
        },
        "GraphL.remove_directed_edge": {
            "name": "remove_directed_edge",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "GraphL.remove_edge": {
            "name": "remove_edge",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/kruskal_mst.py": {
        "kruskal_mst": {
            "name": "kruskal_mst",
            "location": 15,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/maximum_new_edges.py": {
        "add_edges_safely": {
            "name": "add_edges_safely",
            "location": 15,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/mother_vertex_in_directed_graph.py": {
        "dfs": {
            "name": "dfs",
            "location": 11,
            "return": [],
            "arguments": {
                "graph": [],
                "vertex": [],
                "visited": []
            }
        },
        "get_mother_vertex": {
            "name": "get_mother_vertex",
            "location": 22,
            "return": [],
            "arguments": {
                "graph": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/path_length_greater_than_k.py": {
        "path_greater": {
            "name": "path_greater",
            "location": 11,
            "return": [],
            "arguments": {
                "graph": [],
                "source": [],
                "k": []
            }
        },
        "path_greater.backtrack": {
            "name": "backtrack",
            "location": 19,
            "return": [],
            "arguments": {
                "next_vertex": [],
                "dist": [],
                "visited": [],
                "total": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/prim_mst.py": {
        "get_min_weight_index": {
            "name": "get_min_weight_index",
            "location": 10,
            "return": [],
            "arguments": {
                "weights": [],
                "mst_set": []
            }
        },
        "update_weight": {
            "name": "update_weight",
            "location": 25,
            "return": [],
            "arguments": {
                "graph": [],
                "vertex": [],
                "mst_set": [],
                "weights": [],
                "parent": []
            }
        },
        "prim_mst": {
            "name": "prim_mst",
            "location": 35,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/reachability_matrix.py": {
        "reachability_matrix": {
            "name": "reachability_matrix",
            "location": 7,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "reachability_matrix.dfs": {
            "name": "dfs",
            "location": 14,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/sorted_dictionary_alien.py": {
        "order_of_characters": {
            "name": "order_of_characters",
            "location": 9,
            "return": [],
            "arguments": {
                "words": [],
                "num_char": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/topological_sort.py": {
        "topological_sort_using_dfs": {
            "name": "topological_sort_using_dfs",
            "location": 12,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        },
        "topological_sort_kahn_algorithm": {
            "name": "topological_sort_kahn_algorithm",
            "location": 40,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        },
        "topological_sort_using_dfs.dfs": {
            "name": "dfs",
            "location": 19,
            "return": [],
            "arguments": {
                "ind": []
            }
        },
        "topological_sort_kahn_algorithm.get_indegrees": {
            "name": "get_indegrees",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "topological_sort_kahn_algorithm.create_queue": {
            "name": "create_queue",
            "location": 65,
            "return": [],
            "arguments": {
                "indegree": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/union_find_to_detect_cycles.py": {
        "union": {
            "name": "union",
            "location": 17,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "subsets": []
            }
        },
        "find": {
            "name": "find",
            "location": 33,
            "return": [],
            "arguments": {
                "vertex": [],
                "subset": []
            }
        },
        "is_cyclic": {
            "name": "is_cyclic",
            "location": 45,
            "return": [],
            "arguments": {
                "graph": [],
                "vertices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/graphs/__init__.py": {},
    "daily-coding-challenge-master/gfg/greedy/job_sequencing.py": {
        "job_sequencing": {
            "name": "job_sequencing",
            "location": 4,
            "return": [],
            "arguments": {
                "job_ids": [],
                "deadlines": [],
                "profits": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/greedy/__init__.py": {},
    "daily-coding-challenge-master/gfg/hashing/binary_tree_node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/employees_under_manager.py": {
        "get_emp_heirarchy": {
            "name": "get_emp_heirarchy",
            "location": 25,
            "return": [],
            "arguments": {
                "manager": [],
                "return_dict": [],
                "man_emp": []
            }
        },
        "heirarchy": {
            "name": "heirarchy",
            "location": 36,
            "return": [],
            "arguments": {
                "emp_man": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/max_point_same_line.py": {
        "greatest_common_divisor": {
            "name": "greatest_common_divisor",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "max_points": {
            "name": "max_points",
            "location": 16,
            "return": [],
            "arguments": {
                "points": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/max_shortest_distance.py": {
        "max_shortest_dist": {
            "name": "max_shortest_dist",
            "location": 18,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/print_tree_vertically.py": {
        "print_vertically": {
            "name": "print_vertically",
            "location": 25,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "print_vertically.inorder": {
            "name": "inorder",
            "location": 31,
            "return": [],
            "arguments": {
                "node": [],
                "distance": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/smallest_array_max_freq.py": {
        "max_freq": {
            "name": "max_freq",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/sum_of_pair.py": {
        "sum_of_pairs": {
            "name": "sum_of_pairs",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/hashing/__init__.py": {},
    "daily-coding-challenge-master/gfg/heaps/connect_ropes.py": {
        "connect_cost": {
            "name": "connect_cost",
            "location": 10,
            "return": [],
            "arguments": {
                "ropes": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/heaps/heap.py": {
        "parent_index": {
            "name": "parent_index",
            "location": 6,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "left_index": {
            "name": "left_index",
            "location": 10,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "right_index": {
            "name": "right_index",
            "location": 14,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "MinHeap.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "max_size": []
            }
        },
        "MinHeap.get_min": {
            "name": "get_min",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinHeap._push_down": {
            "name": "_push_down",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MinHeap._bubble_up": {
            "name": "_bubble_up",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MinHeap.extract_min": {
            "name": "extract_min",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinHeap.decrease_key": {
            "name": "decrease_key",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "new_value": []
            }
        },
        "MinHeap.insert_value": {
            "name": "insert_value",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MinHeap.delete": {
            "name": "delete",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MaxHeap.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "max_size": []
            }
        },
        "MaxHeap.get_max": {
            "name": "get_max",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxHeap._push_down": {
            "name": "_push_down",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MaxHeap._bubble_up": {
            "name": "_bubble_up",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MaxHeap.extract_max": {
            "name": "extract_max",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxHeap.increase_key": {
            "name": "increase_key",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "new_value": []
            }
        },
        "MaxHeap.insert_value": {
            "name": "insert_value",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MaxHeap.delete": {
            "name": "delete",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/heaps/merge_k_sorted_arrays.py": {
        "get_next_min": {
            "name": "get_next_min",
            "location": 8,
            "return": [],
            "arguments": {
                "array_list": [],
                "index_array": [],
                "k": [],
                "length": []
            }
        },
        "merge_arrays": {
            "name": "merge_arrays",
            "location": 25,
            "return": [],
            "arguments": {
                "array_list": [],
                "k": [],
                "arr_size": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/heaps/__init__.py": {},
    "daily-coding-challenge-master/gfg/linkedlist/bin_tree_to_cir_doubly_ll.py": {
        "create_dll": {
            "name": "create_dll",
            "location": 22,
            "return": [],
            "arguments": {
                "left": [],
                "root_data": [],
                "right": []
            }
        },
        "bin_tree_to_circular_and_doubly_linked_list": {
            "name": "bin_tree_to_circular_and_doubly_linked_list",
            "location": 52,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/bin_tree_to_dll.py": {
        "inorder_conversion": {
            "name": "inorder_conversion",
            "location": 18,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "inorder_conversion2": {
            "name": "inorder_conversion2",
            "location": 41,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "inorder_conversion2.inorder": {
            "name": "inorder",
            "location": 42,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/clone_a_dll.py": {
        "clone": {
            "name": "clone",
            "location": 19,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/copy_ll_with_random_pointer.py": {
        "copy_ll": {
            "name": "copy_ll",
            "location": 8,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/delete_duplicate_from_sorted_ll.py": {
        "delete_duplicates": {
            "name": "delete_duplicates",
            "location": 52,
            "return": [],
            "arguments": {
                "ll": []
            }
        },
        "LL.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LL.append": {
            "name": "append",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LL.delete": {
            "name": "delete",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LL.Node.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/detect_and_remove_loop.py": {
        "detect_and_remove_loop": {
            "name": "detect_and_remove_loop",
            "location": 14,
            "return": [],
            "arguments": {
                "ll": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/dll_pair_with_given_sum.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "prev": [],
                "next": []
            }
        },
        "DLL.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "DLL.get_tail": {
            "name": "get_tail",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DLL.find": {
            "name": "find",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/is_ll_a_palindrome.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 14,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "is_palindrome.verify": {
            "name": "verify",
            "location": 15,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/large_number_arithmetics.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LargeNumberArithmetics.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "first_number": [],
                "second_number": []
            }
        },
        "LargeNumberArithmetics._string_to_dll": {
            "name": "_string_to_dll",
            "location": 23,
            "return": [],
            "arguments": {
                "string_number": []
            }
        },
        "LargeNumberArithmetics.prepend_to_result": {
            "name": "prepend_to_result",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LargeNumberArithmetics.add": {
            "name": "add",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LargeNumberArithmetics.subtract": {
            "name": "subtract",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/ll_swap_elements.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "next": []
            }
        },
        "LL.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "LL.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LL.swap_node": {
            "name": "swap_node",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/middle_element.py": {
        "middle_element": {
            "name": "middle_element",
            "location": 17,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/nth_node_from_end.py": {
        "nth_from_end": {
            "name": "nth_from_end",
            "location": 15,
            "return": [],
            "arguments": {
                "head": [],
                "k": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/quicksort_singly_ll.py": {
        "partition": {
            "name": "partition",
            "location": 13,
            "return": [],
            "arguments": {
                "head": [],
                "tail": []
            }
        },
        "quicksort": {
            "name": "quicksort",
            "location": 39,
            "return": [],
            "arguments": {
                "head": [],
                "tail": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/reverse_dll_in_groups.py": {
        "reverse_in_groups": {
            "name": "reverse_in_groups",
            "location": 71,
            "return": [],
            "arguments": {
                "head": [],
                "k": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DLL.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "DLL.append": {
            "name": "append",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DLL.delete": {
            "name": "delete",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DLL.reverse": {
            "name": "reverse",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/segregate_even_odd_numbers.py": {
        "last_element": {
            "name": "last_element",
            "location": 15,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "segregate": {
            "name": "segregate",
            "location": 26,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "print_ll": {
            "name": "print_ll",
            "location": 51,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/sort_biotinic_dll.py": {
        "reverse": {
            "name": "reverse",
            "location": 16,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 35,
            "return": [],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "sort_dll": {
            "name": "sort_dll",
            "location": 73,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "print_ll": {
            "name": "print_ll",
            "location": 99,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/swap_nodes.py": {
        "swap_nodes": {
            "name": "swap_nodes",
            "location": 16,
            "return": [],
            "arguments": {
                "head": [],
                "x": [],
                "y": []
            }
        },
        "print_ll": {
            "name": "print_ll",
            "location": 74,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/linkedlist/__init__.py": {},
    "daily-coding-challenge-master/gfg/matrix/print_matrix_in_spiral.py": {
        "print_matrix": {
            "name": "print_matrix",
            "location": 6,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/matrix/rotate_clockwise.py": {
        "print_matrix": {
            "name": "print_matrix",
            "location": 6,
            "return": [],
            "arguments": {
                "matrix": []
            }
        },
        "rotate_clockwise": {
            "name": "rotate_clockwise",
            "location": 11,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/matrix/__init__.py": {},
    "daily-coding-challenge-master/gfg/pattern_matching/kmp.py": {
        "generate_lps": {
            "name": "generate_lps",
            "location": 7,
            "return": [],
            "arguments": {
                "pattern": [],
                "length": []
            }
        },
        "kmp": {
            "name": "kmp",
            "location": 28,
            "return": [],
            "arguments": {
                "text": [],
                "pattern": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/pattern_matching/naive.py": {
        "find_substring": {
            "name": "find_substring",
            "location": 5,
            "return": [],
            "arguments": {
                "string": [],
                "substring": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/pattern_matching/__init__.py": {},
    "daily-coding-challenge-master/gfg/queue/k_q_in_an_array.py": {
        "Queues.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "noq": []
            }
        },
        "Queues.is_full": {
            "name": "is_full",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queues.is_empty": {
            "name": "is_empty",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        },
        "Queues.enqueue": {
            "name": "enqueue",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "element": [],
                "queue": []
            }
        },
        "Queues.dequeue": {
            "name": "dequeue",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "queue": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/queue/lru_cache.py": {
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "LRUCache.move_to_front": {
            "name": "move_to_front",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "LRUCache.push": {
            "name": "push",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "LRUCache.delete": {
            "name": "delete",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LRUCache.get_first": {
            "name": "get_first",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LRUCache.print_queue": {
            "name": "print_queue",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/queue/queue.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DNode.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PNode.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "priority": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Queue.is_full": {
            "name": "is_full",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.is_empty": {
            "name": "is_empty",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CircularQueue.enqueue": {
            "name": "enqueue",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CircularQueue.dequeue": {
            "name": "dequeue",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "PriorityQueue.is_full": {
            "name": "is_full",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.is_empty": {
            "name": "is_empty",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.enqueue": {
            "name": "enqueue",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "priority": []
            }
        },
        "PriorityQueue.dequeue": {
            "name": "dequeue",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deque.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Deque.is_full": {
            "name": "is_full",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deque.is_empty": {
            "name": "is_empty",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deque.enqueue": {
            "name": "enqueue",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Deque.dequeue": {
            "name": "dequeue",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deque.remove_last": {
            "name": "remove_last",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deque.insert_front": {
            "name": "insert_front",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/queue/stack_using_queue.py": {
        "StackUsingQueue.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackUsingQueue.push": {
            "name": "push",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StackUsingQueue.pop": {
            "name": "pop",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/queue/ugly_numbers.py": {
        "ugly_number": {
            "name": "ugly_number",
            "location": 8,
            "return": [],
            "arguments": {
                "n": [],
                "primes": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/queue/__init__.py": {},
    "daily-coding-challenge-master/gfg/sorting_searching/alternate_sorting.py": {
        "alternate_sort": {
            "name": "alternate_sort",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/counting_sort.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "counting_sort_str": {
            "name": "counting_sort_str",
            "location": 30,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/count_inversions.py": {
        "merge": {
            "name": "merge",
            "location": 7,
            "return": [],
            "arguments": {
                "left_arr": [],
                "right_arr": []
            }
        },
        "inversions": {
            "name": "inversions",
            "location": 30,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/dutch_national_flag.py": {
        "count_and_sort": {
            "name": "count_and_sort",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "dnf": {
            "name": "dnf",
            "location": 26,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/find_two_non_repeating_elements.py": {
        "non_repeating": {
            "name": "non_repeating",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/find_two_repeating_elements.py": {
        "repeating": {
            "name": "repeating",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/leaders_in_an_array.py": {
        "leaders": {
            "name": "leaders",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/max_sum_sub_arr_excluding_another_arr.py": {
        "max_sum_subarr": {
            "name": "max_sum_subarr",
            "location": 8,
            "return": [],
            "arguments": {
                "arr_a": [],
                "arr_b": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/merge_sorted_arrays_inplace.py": {
        "move_to_end": {
            "name": "move_to_end",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "m": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 23,
            "return": [],
            "arguments": {
                "arrn": [],
                "arrm": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/merge_sorted_no_extra_space.py": {
        "merge_sorted_arrays": {
            "name": "merge_sorted_arrays",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/min_length_unsorted_subarray.py": {
        "unsorted_array": {
            "name": "unsorted_array",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/running_median.py": {
        "RunningMedian.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningMedian.median": {
            "name": "median",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningMedian.running_median": {
            "name": "running_median",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/search_in_arr_with_max_diff_as_1.py": {
        "search": {
            "name": "search",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "elem": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/search_in_arr_with_max_diff_k.py": {
        "search": {
            "name": "search",
            "location": 8,
            "return": [],
            "arguments": {
                "arr": [],
                "elem": [],
                "max_diff": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/shortest_unordered_subarray.py": {
        "peak": {
            "name": "peak",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": [],
                "index": []
            }
        },
        "trough": {
            "name": "trough",
            "location": 13,
            "return": [],
            "arguments": {
                "arr": [],
                "index": []
            }
        },
        "shortest_unordered_subarr": {
            "name": "shortest_unordered_subarr",
            "location": 17,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/sort_arr_with_elements_from_1_to_n.py": {
        "sort_n": {
            "name": "sort_n",
            "location": 7,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/sort_a_k_sorted_array,.py": {
        "min_heap": {
            "name": "min_heap",
            "location": 10,
            "return": [],
            "arguments": {
                "arr": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/sort_in_wave.py": {
        "sort_in_wave": {
            "name": "sort_in_wave",
            "location": 9,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/sorting_searching/__init__.py": {},
    "daily-coding-challenge-master/gfg/stack/check_balanced_parenthesis.py": {
        "is_balanced": {
            "name": "is_balanced",
            "location": 12,
            "return": [],
            "arguments": {
                "expression": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/delete_smaller.py": {
        "delete_smaller": {
            "name": "delete_smaller",
            "location": 11,
            "return": [],
            "arguments": {
                "elements": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/expression_evaluation.py": {
        "precedence": {
            "name": "precedence",
            "location": 9,
            "return": [],
            "arguments": {
                "operator": []
            }
        },
        "evaluate_expression": {
            "name": "evaluate_expression",
            "location": 17,
            "return": [],
            "arguments": {
                "expression": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/infix_to_postfix.py": {
        "precedence": {
            "name": "precedence",
            "location": 8,
            "return": [],
            "arguments": {
                "operator": []
            }
        },
        "infix_to_postfix": {
            "name": "infix_to_postfix",
            "location": 18,
            "return": [],
            "arguments": {
                "infix": []
            }
        },
        "postfix_to_infix": {
            "name": "postfix_to_infix",
            "location": 51,
            "return": [],
            "arguments": {
                "postfix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/infix_to_prefix.py": {
        "prefix_to_infix": {
            "name": "prefix_to_infix",
            "location": 7,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "infix_to_prefix": {
            "name": "infix_to_prefix",
            "location": 27,
            "return": [],
            "arguments": {
                "infix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/k_stacks_using_one_array.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "n": []
            }
        },
        "Stack.is_full": {
            "name": "is_full",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "data": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/min_stack.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "max_size": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_full": {
            "name": "is_full",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.get_min": {
            "name": "get_min",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/next_greater_freq_element.py": {
        "next_greater_freq_element": {
            "name": "next_greater_freq_element",
            "location": 9,
            "return": [],
            "arguments": {
                "elements": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/prefix_to_postfix.py": {
        "prefix_to_postfix": {
            "name": "prefix_to_postfix",
            "location": 8,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "postfix_to_prefix": {
            "name": "postfix_to_prefix",
            "location": 22,
            "return": [],
            "arguments": {
                "postfix": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/queue_using_stack.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.push": {
            "name": "push",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/reverse_stack_recursion.py": {
        "insert_reversed_node": {
            "name": "insert_reversed_node",
            "location": 9,
            "return": [],
            "arguments": {
                "stack": [],
                "node": []
            }
        },
        "reverse_stack_recursive": {
            "name": "reverse_stack_recursive",
            "location": 25,
            "return": [],
            "arguments": {
                "stack": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/sort_stack_recursive.py": {
        "insert_sorted": {
            "name": "insert_sorted",
            "location": 9,
            "return": [],
            "arguments": {
                "stack": [],
                "node": []
            }
        },
        "sort_stack_recursion": {
            "name": "sort_stack_recursion",
            "location": 25,
            "return": [],
            "arguments": {
                "stack": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/special_stack_with_operation_on_middle.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.find_middle": {
            "name": "find_middle",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.delete_middle": {
            "name": "delete_middle",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/stack.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/stock_span_problem.py": {
        "stock_span": {
            "name": "stock_span",
            "location": 13,
            "return": [],
            "arguments": {
                "prices": []
            }
        },
        "stock_span_efficient": {
            "name": "stock_span_efficient",
            "location": 32,
            "return": [],
            "arguments": {
                "prices": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/tower_of_hanoi.py": {
        "toh_recursive": {
            "name": "toh_recursive",
            "location": 9,
            "return": [],
            "arguments": {
                "n": [],
                "source": [],
                "destination": [],
                "aux": []
            }
        },
        "toh": {
            "name": "toh",
            "location": 28,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "toh.move_between": {
            "name": "move_between",
            "location": 29,
            "return": [],
            "arguments": {
                "s": [],
                "d": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/stack/__init__.py": {},
    "daily-coding-challenge-master/gfg/trees/binary_tree_node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bin_tree_from_string_notation.py": {
        "get_subtree_string": {
            "name": "get_subtree_string",
            "location": 14,
            "return": [],
            "arguments": {
                "string": [],
                "start": [],
                "end": []
            }
        },
        "construct_bin_tree": {
            "name": "construct_bin_tree",
            "location": 27,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bin_tree_to_dll.py": {
        "inorder_dll": {
            "name": "inorder_dll",
            "location": 13,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "print_dll": {
            "name": "print_dll",
            "location": 38,
            "return": [],
            "arguments": {
                "dll": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bin_tree_to_dll_in_spiral_fashion.py": {
        "convert_to_dll": {
            "name": "convert_to_dll",
            "location": 14,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/boundary_traversal_anticlockwise.py": {
        "left_boundary": {
            "name": "left_boundary",
            "location": 7,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "right_boundary": {
            "name": "right_boundary",
            "location": 20,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "leaves": {
            "name": "leaves",
            "location": 30,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "boundary_traverse": {
            "name": "boundary_traverse",
            "location": 43,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bst.py": {
        "BST.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BST.insert": {
            "name": "insert",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value_to_insert": []
            }
        },
        "BST.search": {
            "name": "search",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value_to_search": []
            }
        },
        "BST.delete": {
            "name": "delete",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "value_to_delete": []
            }
        },
        "BST.Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BST.delete.min_value_key": {
            "name": "min_value_key",
            "location": 99,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "BST.delete.delete_node": {
            "name": "delete_node",
            "location": 108,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bst_from_preorder.py": {
        "construct_bst": {
            "name": "construct_bst",
            "location": 10,
            "return": [],
            "arguments": {
                "preorder": []
            }
        },
        "construct_bst.construct": {
            "name": "construct",
            "location": 18,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/bst_to_greater_sum.py": {
        "greater_sum": {
            "name": "greater_sum",
            "location": 11,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "greater_sum.construct": {
            "name": "construct",
            "location": 17,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/check_level_order_bst.py": {
        "check_level_order_bst": {
            "name": "check_level_order_bst",
            "location": 8,
            "return": [],
            "arguments": {
                "level_order": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/children_sum_tree.py": {
        "increment_children_data": {
            "name": "increment_children_data",
            "location": 12,
            "return": [],
            "arguments": {
                "root": [],
                "diff": []
            }
        },
        "children_sum": {
            "name": "children_sum",
            "location": 21,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/complete_binary_tree_from_level_order.py": {
        "complete_binary_tree": {
            "name": "complete_binary_tree",
            "location": 10,
            "return": [],
            "arguments": {
                "level_order": []
            }
        },
        "complete_binary_tree.tree": {
            "name": "tree",
            "location": 16,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/count_construct_possible_bst.py": {
        "fact": {
            "name": "fact",
            "location": 10,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "count_bst": {
            "name": "count_bst",
            "location": 17,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "construct_bst": {
            "name": "construct_bst",
            "location": 21,
            "return": [],
            "arguments": {
                "min_value": [],
                "max_value": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/covered_uncovered_node_sum.py": {
        "get_tree_sum": {
            "name": "get_tree_sum",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "get_uncovered_sum": {
            "name": "get_uncovered_sum",
            "location": 19,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "check_sum": {
            "name": "check_sum",
            "location": 45,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/depth_first_traversal_recursive.py": {
        "inorder": {
            "name": "inorder",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "preorder": {
            "name": "preorder",
            "location": 27,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "postorder": {
            "name": "postorder",
            "location": 42,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/determine_whether_complete_bin_tree_is_min_heap.py": {
        "is_min_heap": {
            "name": "is_min_heap",
            "location": 7,
            "return": [],
            "arguments": {
                "level_order": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/diagonal_tree_traversal.py": {
        "diagonal_traversal": {
            "name": "diagonal_traversal",
            "location": 20,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/diameter_of_bin_tree.py": {
        "height": {
            "name": "height",
            "location": 11,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "diameter_inefficient": {
            "name": "diameter_inefficient",
            "location": 18,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "diameter_efficient": {
            "name": "diameter_efficient",
            "location": 38,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "diameter_efficient.diameter": {
            "name": "diameter",
            "location": 45,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/full_bin_tree_from_pre_and_post_order.py": {
        "full_binary_tree": {
            "name": "full_binary_tree",
            "location": 11,
            "return": [],
            "arguments": {
                "preorder": [],
                "postorder": []
            }
        },
        "full_binary_tree.tree": {
            "name": "tree",
            "location": 14,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/full_bin_tree_using_preorder_and_mirror_preorder_traversal.py": {
        "full_binary_tree": {
            "name": "full_binary_tree",
            "location": 12,
            "return": [],
            "arguments": {
                "preorder": [],
                "mirror": []
            }
        },
        "full_binary_tree.tree": {
            "name": "tree",
            "location": 15,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/inorder_traversal_iterative.py": {
        "inorder_iterative": {
            "name": "inorder_iterative",
            "location": 8,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "inorder_iterative_with_constant_space": {
            "name": "inorder_iterative_with_constant_space",
            "location": 30,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/k_sum_path.py": {
        "k_sum_paths": {
            "name": "k_sum_paths",
            "location": 13,
            "return": [],
            "arguments": {
                "root": [],
                "k": [],
                "path": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/left_right_mirror.py": {
        "is_mirror_recursive": {
            "name": "is_mirror_recursive",
            "location": 10,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "is_mirror_iterative": {
            "name": "is_mirror_iterative",
            "location": 29,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "is_mirror_recursive.verify_left_right": {
            "name": "verify_left_right",
            "location": 11,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/level_order_traversal.py": {
        "level_order_using_extra_space": {
            "name": "level_order_using_extra_space",
            "location": 9,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "get_height": {
            "name": "get_height",
            "location": 28,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "get_nodes_at_height": {
            "name": "get_nodes_at_height",
            "location": 37,
            "return": [],
            "arguments": {
                "root": [],
                "height": []
            }
        },
        "level_order_recursive": {
            "name": "level_order_recursive",
            "location": 45,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/lowest_common_ancestor.py": {
        "lowest_common_ancestor": {
            "name": "lowest_common_ancestor",
            "location": 10,
            "return": [],
            "arguments": {
                "root": [],
                "n1": [],
                "n2": []
            }
        },
        "lowest_common_ancestor.ancestor": {
            "name": "ancestor",
            "location": 16,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/merge_sum_trees.py": {
        "merge_sum_tree": {
            "name": "merge_sum_tree",
            "location": 14,
            "return": [],
            "arguments": {
                "augend": [],
                "addend": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/morris_traversal_inorder.py": {
        "morris_inorder": {
            "name": "morris_inorder",
            "location": 11,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/next_pointer_inorder_succ.py": {
        "fill_inorder_successor": {
            "name": "fill_inorder_successor",
            "location": 17,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "fill_inorder_successor.reverse_inorder": {
            "name": "reverse_inorder",
            "location": 22,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/perfect_bin_tree_spec_traversal.py": {
        "specific_level_order_traversal": {
            "name": "specific_level_order_traversal",
            "location": 13,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "specific_level_order_traversal.insert": {
            "name": "insert",
            "location": 14,
            "return": [],
            "arguments": {
                "data_node": [],
                "order": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/postorder_from_preorder_bst.py": {
        "postorder": {
            "name": "postorder",
            "location": 7,
            "return": [],
            "arguments": {
                "preorder": [],
                "length": [],
                "res": []
            }
        },
        "postorder_optimised": {
            "name": "postorder_optimised",
            "location": 39,
            "return": [],
            "arguments": {
                "preorder": [],
                "length": []
            }
        },
        "postorder_optimised.postorder_helper": {
            "name": "postorder_helper",
            "location": 48,
            "return": [],
            "arguments": {
                "min_val": [],
                "max_val": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/preorder_morris_traversal.py": {
        "morris_preorder": {
            "name": "morris_preorder",
            "location": 7,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/preorder_traversal_iterative.py": {
        "iterative_preorder": {
            "name": "iterative_preorder",
            "location": 7,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/print_postorder_from_in_pre.py": {
        "print_postorder": {
            "name": "print_postorder",
            "location": 7,
            "return": [],
            "arguments": {
                "inorder": [],
                "preorder": [],
                "length": []
            }
        },
        "print_postorder_optimised": {
            "name": "print_postorder_optimised",
            "location": 32,
            "return": [],
            "arguments": {
                "inorder": [],
                "preorder": []
            }
        },
        "print_postorder_optimised.postorder": {
            "name": "postorder",
            "location": 39,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/print_root_to_leaf_path.py": {
        "print_root_to_leaf": {
            "name": "print_root_to_leaf",
            "location": 10,
            "return": [],
            "arguments": {
                "node": [],
                "stack": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/replace_node_data.py": {
        "replace_data": {
            "name": "replace_data",
            "location": 11,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "replace_data.traverse_inorder": {
            "name": "traverse_inorder",
            "location": 19,
            "return": [],
            "arguments": {
                "node": [],
                "fill_array": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/sorted_ll_to_bst.py": {
        "ll_size": {
            "name": "ll_size",
            "location": 17,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "sorted_ll_to_bst": {
            "name": "sorted_ll_to_bst",
            "location": 28,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "LLNode.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "sorted_ll_to_bst.construct": {
            "name": "construct",
            "location": 29,
            "return": [],
            "arguments": {
                "length": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/sum_of_nodes_longest_path.py": {
        "sum_of_nodes": {
            "name": "sum_of_nodes",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/sum_of_parent_nodes.py": {
        "sum_parent": {
            "name": "sum_parent",
            "location": 10,
            "return": [],
            "arguments": {
                "root": [],
                "node": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/sum_tree.py": {
        "sum_tree": {
            "name": "sum_tree",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/ternary_expression_to_binary_tree.py": {
        "create_tree": {
            "name": "create_tree",
            "location": 11,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "create_tree.construct": {
            "name": "construct",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/gfg/trees/tree_density.py": {
        "density": {
            "name": "density",
            "location": 9,
            "return": [],
            "arguments": {
                "root_node": []
            }
        },
        "density.in_order": {
            "name": "in_order",
            "location": 10,
            "return": [],
            "arguments": {
                "node": [],
                "height": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/tree_from_inorder_and_preorder.py": {
        "construct_tree": {
            "name": "construct_tree",
            "location": 10,
            "return": [],
            "arguments": {
                "inorder": [],
                "preorder": []
            }
        },
        "construct_tree.tree": {
            "name": "tree",
            "location": 18,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/tree_from_preorder.py": {
        "special_tree": {
            "name": "special_tree",
            "location": 18,
            "return": [],
            "arguments": {
                "preorder": [],
                "pre_ln": []
            }
        },
        "special_tree.tree": {
            "name": "tree",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/gfg/trees/tree_traversal.py": {
        "inorder": {
            "name": "inorder",
            "location": 12,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "preorder": {
            "name": "preorder",
            "location": 19,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "postorder": {
            "name": "postorder",
            "location": 26,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "level_order": {
            "name": "level_order",
            "location": 33,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/verify_perfect_bin_tree.py": {
        "is_perfect": {
            "name": "is_perfect",
            "location": 13,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "is_perfect.is_full_and_complete": {
            "name": "is_full_and_complete",
            "location": 14,
            "return": [],
            "arguments": {
                "root": [],
                "node_level": []
            }
        }
    },
    "daily-coding-challenge-master/gfg/trees/__init__.py": {},
    "daily-coding-challenge-master/other_problems/asteroid_collision_problem.py": {
        "asteroid_collision": {
            "name": "asteroid_collision",
            "location": 13,
            "return": [],
            "arguments": {
                "asteroids": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/generate_sub_sets_of_string.py": {
        "_get_subsets": {
            "name": "_get_subsets",
            "location": 9,
            "return": [],
            "arguments": {
                "integers": [],
                "index": [],
                "size": []
            }
        },
        "get_subsets": {
            "name": "get_subsets",
            "location": 21,
            "return": [],
            "arguments": {
                "integers": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/image_cache.py": {
        "get_next_delay": {
            "name": "get_next_delay",
            "location": 54,
            "return": [],
            "arguments": {
                "delay": []
            }
        },
        "fetch_image": {
            "name": "fetch_image",
            "location": 58,
            "return": [],
            "arguments": {
                "url": [],
                "retries": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "data": []
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "LRUCache.delete_tail": {
            "name": "delete_tail",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.move_to_beginning": {
            "name": "move_to_beginning",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LRUCache.insert": {
            "name": "insert",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "node": []
            }
        },
        "LRUCache.fetch": {
            "name": "fetch",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/kth_largest_element_in_an_unsorted_array.py": {
        "left_child_index": {
            "name": "left_child_index",
            "location": 10,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "right_child_index": {
            "name": "right_child_index",
            "location": 14,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "kth_largest_element_min_heap": {
            "name": "kth_largest_element_min_heap",
            "location": 51,
            "return": [],
            "arguments": {
                "array": [],
                "k": []
            }
        },
        "kth_largest_element_max_heap": {
            "name": "kth_largest_element_max_heap",
            "location": 94,
            "return": [],
            "arguments": {
                "array": [],
                "k": []
            }
        },
        "kth_largest_element_inbuilt_heap": {
            "name": "kth_largest_element_inbuilt_heap",
            "location": 106,
            "return": [],
            "arguments": {
                "array": [],
                "k": []
            }
        },
        "MinHeap.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "MinHeap.heapify": {
            "name": "heapify",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MinHeap.remove_element": {
            "name": "remove_element",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaxHeap.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "MaxHeap.heapify": {
            "name": "heapify",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/lambda_sort.py": {
        "index_sort": {
            "name": "index_sort",
            "location": 1,
            "return": [],
            "arguments": {
                "array": [],
                "idx": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/lru_cache.py": {
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LRUCache.put": {
            "name": "put",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/min_boats_required.py": {
        "min_boats": {
            "name": "min_boats",
            "location": 10,
            "return": [],
            "arguments": {
                "weights": [],
                "limit": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/number_of_islands.py": {
        "get_neighbors": {
            "name": "get_neighbors",
            "location": 10,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "height": [],
                "width": [],
                "visited": []
            }
        },
        "visit_neighbors": {
            "name": "visit_neighbors",
            "location": 22,
            "return": [],
            "arguments": {
                "matrix": [],
                "x": [],
                "y": [],
                "height": [],
                "width": [],
                "visited": []
            }
        },
        "num_islands": {
            "name": "num_islands",
            "location": 33,
            "return": [],
            "arguments": {
                "matrix": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/postfix_to_infix_conversion.py": {
        "convert": {
            "name": "convert",
            "location": 16,
            "return": [],
            "arguments": {
                "postfix": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/prefix_infix_postfix_conversions.py": {
        "prefix_to_infix": {
            "name": "prefix_to_infix",
            "location": 15,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "postfix_to_infix": {
            "name": "postfix_to_infix",
            "location": 31,
            "return": [],
            "arguments": {
                "postfix": []
            }
        },
        "postfix_to_prefix": {
            "name": "postfix_to_prefix",
            "location": 46,
            "return": [],
            "arguments": {
                "postfix": []
            }
        },
        "prefix_to_postfix": {
            "name": "prefix_to_postfix",
            "location": 61,
            "return": [],
            "arguments": {
                "prefix": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/smallest_number_after_removing_digits.py": {
        "get_smallest": {
            "name": "get_smallest",
            "location": 7,
            "return": [],
            "arguments": {
                "num": [],
                "k": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/social_network_problem.py": {
        "get_group_people": {
            "name": "get_group_people",
            "location": 19,
            "return": [],
            "arguments": {
                "group_sizes": []
            }
        },
        "min_groups": {
            "name": "min_groups",
            "location": 28,
            "return": [],
            "arguments": {
                "group_sizes": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/time_based_key_value_store.py": {
        "TimeMap.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeMap.set": {
            "name": "set",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "timestamp": []
            }
        },
        "TimeMap.bin_search": {
            "name": "bin_search",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "timestamp": []
            }
        },
        "TimeMap.get": {
            "name": "get",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "timestamp": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/trap_water.py": {
        "max_water": {
            "name": "max_water",
            "location": 11,
            "return": [],
            "arguments": {
                "elevation": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/word_counter.py": {
        "count_words": {
            "name": "count_words",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "daily-coding-challenge-master/other_problems/word_search.py": {
        "get_neighbors": {
            "name": "get_neighbors",
            "location": 11,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "height": [],
                "width": [],
                "visited": []
            }
        },
        "_search": {
            "name": "_search",
            "location": 21,
            "return": [],
            "arguments": {
                "grid": [],
                "x": [],
                "y": [],
                "height": [],
                "width": [],
                "word": [],
                "index": [],
                "size": [],
                "visited": []
            }
        },
        "search": {
            "name": "search",
            "location": 37,
            "return": [],
            "arguments": {
                "grid": [],
                "word": []
            }
        }
    },
    "daily-coding-challenge-master/other_problems/__init__.py": {}
}
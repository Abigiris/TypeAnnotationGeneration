{
    "daily-programmer-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 3,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 8,
            "return": [],
            "arguments": {
                "config": [],
                "items": []
            }
        }
    },
    "daily-programmer-master/__init__.py": {},
    "daily-programmer-master/algorithms/binary_tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.preorderTraversal": {
            "name": "preorderTraversal",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.inorderTraversal": {
            "name": "inorderTraversal",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.preorder_recurse": {
            "name": "preorder_recurse",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.preorder_iter": {
            "name": "preorder_iter",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.inorder_recurse": {
            "name": "inorder_recurse",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.inorder_iter": {
            "name": "inorder_iter",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "daily-programmer-master/algorithms/search.py": {
        "binary_search": {
            "name": "binary_search",
            "location": 4,
            "return": [],
            "arguments": {
                "search_data": [],
                "target": []
            }
        },
        "reference": {
            "name": "reference",
            "location": 20,
            "return": [],
            "arguments": {
                "search_data": [],
                "target": []
            }
        }
    },
    "daily-programmer-master/algorithms/sort.py": {
        "in_place_swap": {
            "name": "in_place_swap",
            "location": 6,
            "return": [],
            "arguments": {
                "elements": [],
                "i": [],
                "j": []
            }
        },
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 11,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 19,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "selection_sort": {
            "name": "selection_sort",
            "location": 27,
            "return": [],
            "arguments": {
                "elements": []
            }
        },
        "find_min_element_index": {
            "name": "find_min_element_index",
            "location": 34,
            "return": [],
            "arguments": {
                "elements": [],
                "start": []
            }
        }
    },
    "daily-programmer-master/algorithms/test_binary_tree.py": {
        "create_tree_1": {
            "name": "create_tree_1",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "create_tree_2": {
            "name": "create_tree_2",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_preorder_traversal": {
            "name": "test_preorder_traversal",
            "location": 23,
            "return": [],
            "arguments": {
                "tree_func": [],
                "algorithm_func": []
            }
        },
        "test_inorder_traversal": {
            "name": "test_inorder_traversal",
            "location": 34,
            "return": [],
            "arguments": {
                "tree_func": [],
                "algorithm_func": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/algorithms/test_search.py": {
        "test_binary_search": {
            "name": "test_binary_search",
            "location": 16,
            "return": [],
            "arguments": {
                "search_data": [],
                "target": [],
                "expected": []
            }
        },
        "reference": {
            "name": "reference",
            "location": 21,
            "return": [],
            "arguments": {
                "search_data": [],
                "target": [],
                "expected": []
            }
        },
        "leetcode_algo": {
            "name": "leetcode_algo",
            "location": 24,
            "return": [],
            "arguments": {
                "search_data": [],
                "target": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/algorithms/test_sort.py": {
        "test_bubble_sort": {
            "name": "test_bubble_sort",
            "location": 11,
            "return": [],
            "arguments": {
                "unsorted": [],
                "expected": []
            }
        },
        "test_insertion_sort": {
            "name": "test_insertion_sort",
            "location": 19,
            "return": [],
            "arguments": {
                "unsorted": [],
                "expected": []
            }
        },
        "test_selection_sort": {
            "name": "test_selection_sort",
            "location": 26,
            "return": [],
            "arguments": {
                "unsorted": [],
                "expected": []
            }
        },
        "test_find_minimum_element_index": {
            "name": "test_find_minimum_element_index",
            "location": 39,
            "return": [],
            "arguments": {
                "elements": [],
                "start": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/algorithms/__init__.py": {},
    "daily-programmer-master/aoc2017/aoc_tests.py": {
        "test_day01_part1": {
            "name": "test_day01_part1",
            "location": 7,
            "return": [],
            "arguments": {
                "sample_input": [],
                "expected": []
            }
        },
        "test_day01_part2": {
            "name": "test_day01_part2",
            "location": 13,
            "return": [],
            "arguments": {
                "sample_input": [],
                "expected": []
            }
        },
        "test_day02_part1": {
            "name": "test_day02_part1",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_day02_part2": {
            "name": "test_day02_part2",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_day03_generate_spiral_sequence": {
            "name": "test_day03_generate_spiral_sequence",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_day04_is_passphrase_valid": {
            "name": "test_day04_is_passphrase_valid",
            "location": 38,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_day04_is_passphrase_valid_with_no_anagrams": {
            "name": "test_day04_is_passphrase_valid_with_no_anagrams",
            "location": 48,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_day05_part1": {
            "name": "test_day05_part1",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_day05_part2": {
            "name": "test_day05_part2",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_day06_part1": {
            "name": "test_day06_part1",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_day06_part2": {
            "name": "test_day06_part2",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_day07_create_with_children": {
            "name": "test_day07_create_with_children",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_day07_create_without_children": {
            "name": "test_day07_create_without_children",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_day07_total_sub_weight": {
            "name": "test_day07_total_sub_weight",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_day07_total_sub_weight_one_node": {
            "name": "test_day07_total_sub_weight_one_node",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_day07_total_sub_weight_one_node_one_child": {
            "name": "test_day07_total_sub_weight_one_node_one_child",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_day07_total_sub_weight_three_levels_deep": {
            "name": "test_day07_total_sub_weight_three_levels_deep",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_day07_odd_weight_out": {
            "name": "test_day07_odd_weight_out",
            "location": 114,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/aoc2017/common.py": {
        "number_from_text_file": {
            "name": "number_from_text_file",
            "location": 6,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "rows_of_numbers_from_text_file": {
            "name": "rows_of_numbers_from_text_file",
            "location": 11,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "lines_from_text_file": {
            "name": "lines_from_text_file",
            "location": 20,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "numbers_from_text_file": {
            "name": "numbers_from_text_file",
            "location": 24,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day01.py": {
        "inverse_captcha": {
            "name": "inverse_captcha",
            "location": 27,
            "return": [],
            "arguments": {
                "offset": [],
                "input_number": []
            }
        },
        "IterableNumber.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IterableNumber.advance": {
            "name": "advance",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IterableNumber.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "IterableNumber.reset": {
            "name": "reset",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day02.py": {
        "checksum": {
            "name": "checksum",
            "location": 4,
            "return": [],
            "arguments": {
                "matrix": [],
                "checksum_function": []
            }
        },
        "diff_checksum": {
            "name": "diff_checksum",
            "location": 11,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "div_checksum": {
            "name": "div_checksum",
            "location": 16,
            "return": [],
            "arguments": {
                "row": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day03.py": {
        "generate_spiral_sequence": {
            "name": "generate_spiral_sequence",
            "location": 3,
            "return": [],
            "arguments": {
                "num_terms": []
            }
        },
        "manhattan_path": {
            "name": "manhattan_path",
            "location": 42,
            "return": [],
            "arguments": {
                "x_pos": [],
                "y_pos": []
            }
        },
        "SpiralMemory.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "SpiralMemory.create": {
            "name": "create",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpiralMemory.closest_odd_square": {
            "name": "closest_odd_square",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "n": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day04.py": {
        "valid_passphrases": {
            "name": "valid_passphrases",
            "location": 4,
            "return": [],
            "arguments": {
                "passphrases": [],
                "validate": []
            }
        },
        "basic_validation": {
            "name": "basic_validation",
            "location": 11,
            "return": [],
            "arguments": {
                "passphrase": []
            }
        },
        "anagram_validation": {
            "name": "anagram_validation",
            "location": 14,
            "return": [],
            "arguments": {
                "passphrase": []
            }
        },
        "validate_transformed_words": {
            "name": "validate_transformed_words",
            "location": 19,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day05.py": {
        "escape": {
            "name": "escape",
            "location": 4,
            "return": [],
            "arguments": {
                "jump_instructions": [],
                "jump_modify": []
            }
        },
        "part_one": {
            "name": "part_one",
            "location": 14,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "part_two": {
            "name": "part_two",
            "location": 17,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "inside_bounds": {
            "name": "inside_bounds",
            "location": 23,
            "return": [],
            "arguments": {
                "array": [],
                "index": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day06.py": {
        "memory_cycles": {
            "name": "memory_cycles",
            "location": 13,
            "return": [],
            "arguments": {
                "memory": []
            }
        },
        "balance": {
            "name": "balance",
            "location": 23,
            "return": [],
            "arguments": {
                "memory_banks": []
            }
        },
        "Cycle.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "count": [],
                "previous_dupe": []
            }
        },
        "Cycle.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/aoc2017/day07.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "weight": [],
                "children": []
            }
        },
        "Node.create": {
            "name": "create",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "text": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.child_nodes_one_level": {
            "name": "child_nodes_one_level",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "Tree.build_tree": {
            "name": "build_tree",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.nodes_with_name": {
            "name": "nodes_with_name",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Tree.find_root": {
            "name": "find_root",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "set_root_function": []
            }
        },
        "Tree.set_root_node": {
            "name": "set_root_node",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Tree.calculate_sub_weight": {
            "name": "calculate_sub_weight",
            "location": 90,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Tree.calculate_all_sub_weights": {
            "name": "calculate_all_sub_weights",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.print": {
            "name": "print",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/aoc2018/test_common.py": {
        "test_common_letters": {
            "name": "test_common_letters",
            "location": 12,
            "return": [],
            "arguments": {
                "word1": [],
                "word2": [],
                "expected": []
            }
        },
        "test_fabric_claim_from_claim_string": {
            "name": "test_fabric_claim_from_claim_string",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_point_eq": {
            "name": "test_point_eq",
            "location": 35,
            "return": [],
            "arguments": {
                "point1": [],
                "point2": [],
                "expected": []
            }
        },
        "test_point_hash": {
            "name": "test_point_hash",
            "location": 50,
            "return": [],
            "arguments": {
                "point1": [],
                "point2": [],
                "expected": []
            }
        },
        "test_fabric_claim_points": {
            "name": "test_fabric_claim_points",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_claimed_point": {
            "name": "test_claimed_point",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/aoc2018/test_days.py": {
        "test_day01_part1": {
            "name": "test_day01_part1",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_day01_part2": {
            "name": "test_day01_part2",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_day02_part1": {
            "name": "test_day02_part1",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_day03_part2": {
            "name": "test_day03_part2",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/aoc2018/xmascommon.py": {
        "puzzle_input_base": {
            "name": "puzzle_input_base",
            "location": 12,
            "return": [],
            "arguments": {
                "filename": [],
                "cast_func": []
            }
        },
        "puzzle_input_to_ints": {
            "name": "puzzle_input_to_ints",
            "location": 23,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "puzzle_input_to_strings": {
            "name": "puzzle_input_to_strings",
            "location": 27,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "dict_where": {
            "name": "dict_where",
            "location": 31,
            "return": [],
            "arguments": {
                "dictionary": [],
                "where_func": []
            }
        },
        "string_to_freq_dict": {
            "name": "string_to_freq_dict",
            "location": 41,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "common_letters": {
            "name": "common_letters",
            "location": 51,
            "return": [],
            "arguments": {
                "word_1": [],
                "word_2": []
            }
        },
        "word_diff_chars": {
            "name": "word_diff_chars",
            "location": 61,
            "return": [],
            "arguments": {
                "word_1": [],
                "word_2": [],
                "target_diff": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__hash__": {
            "name": "__hash__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimedPoint.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "claim_id": []
            }
        },
        "ClaimedPoint.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ClaimedPoint.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClaimedPoint.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FabricClaim.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "claim_id": [],
                "left_padding": [],
                "top_padding": [],
                "width": [],
                "height": []
            }
        },
        "FabricClaim.from_puzzle_input": {
            "name": "from_puzzle_input",
            "location": 118,
            "return": [],
            "arguments": {
                "claim_string": []
            }
        },
        "FabricClaim.points": {
            "name": "points",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FabricClaim.overlapping_points": {
            "name": "overlapping_points",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FabricClaim.overlapping_points_fast": {
            "name": "overlapping_points_fast",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "daily-programmer-master/aoc2018/xmasdays.py": {
        "day01_1": {
            "name": "day01_1",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "day01_2": {
            "name": "day01_2",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "day02_1": {
            "name": "day02_1",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "day02_2": {
            "name": "day02_2",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/aoc2018/__init__.py": {},
    "daily-programmer-master/aoc2021/algos.py": {
        "sliding_window": {
            "name": "sliding_window",
            "location": 85,
            "return": [],
            "arguments": {
                "nums": [],
                "start": [],
                "lookback": []
            }
        },
        "bits_to_decimal": {
            "name": "bits_to_decimal",
            "location": 92,
            "return": [],
            "arguments": {
                "bits": [],
                "endianness": []
            }
        },
        "most_common_bit": {
            "name": "most_common_bit",
            "location": 110,
            "return": [],
            "arguments": {
                "bits_list": [],
                "i": []
            }
        },
        "count_bits": {
            "name": "count_bits",
            "location": 117,
            "return": [],
            "arguments": {
                "bits_list": [],
                "i": []
            }
        },
        "diagonal_line": {
            "name": "diagonal_line",
            "location": 132,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "__o": []
            }
        },
        "Point.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinqList.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "initial_list": []
            }
        },
        "LinqList.first": {
            "name": "first",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinqList.where": {
            "name": "where",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "LinqList.single": {
            "name": "single",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Grid.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "numbers": []
            }
        },
        "Grid.get": {
            "name": "get",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Grid.get_neighbors": {
            "name": "get_neighbors",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "daily-programmer-master/aoc2021/bingo.py": {
        "puzzle_input_to_bingo": {
            "name": "puzzle_input_to_bingo",
            "location": 11,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "mark_board": {
            "name": "mark_board",
            "location": 27,
            "return": [],
            "arguments": {
                "board": [],
                "drawn_number": []
            }
        },
        "is_board_winner": {
            "name": "is_board_winner",
            "location": 33,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "first_winning_board": {
            "name": "first_winning_board",
            "location": 47,
            "return": [],
            "arguments": {
                "bingo": []
            }
        },
        "last_winning_board": {
            "name": "last_winning_board",
            "location": 57,
            "return": [],
            "arguments": {
                "bingo": []
            }
        }
    },
    "daily-programmer-master/aoc2021/input_helpers.py": {
        "puzzle_input_to_str": {
            "name": "puzzle_input_to_str",
            "location": 4,
            "return": [],
            "arguments": {
                "day": [],
                "strip": []
            }
        },
        "puzzle_input_to_ints": {
            "name": "puzzle_input_to_ints",
            "location": 15,
            "return": [],
            "arguments": {
                "day": []
            }
        }
    },
    "daily-programmer-master/aoc2021/puzzles.py": {
        "sonar_sweep": {
            "name": "sonar_sweep",
            "location": 9,
            "return": [],
            "arguments": {
                "logic_func": []
            }
        },
        "sonar_sweep_lookback": {
            "name": "sonar_sweep_lookback",
            "location": 15,
            "return": [],
            "arguments": {
                "depths": []
            }
        },
        "sonar_sweep_sliding_window": {
            "name": "sonar_sweep_sliding_window",
            "location": 23,
            "return": [],
            "arguments": {
                "depths": []
            }
        },
        "dive1": {
            "name": "dive1",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "dive2": {
            "name": "dive2",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "binary_diagnostic1": {
            "name": "binary_diagnostic1",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "binary_diagnostic2": {
            "name": "binary_diagnostic2",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "calculate_oxygen_generator_rating": {
            "name": "calculate_oxygen_generator_rating",
            "location": 86,
            "return": [],
            "arguments": {
                "bits_list": []
            }
        },
        "calculate_co2_scrubber_rating": {
            "name": "calculate_co2_scrubber_rating",
            "location": 100,
            "return": [],
            "arguments": {
                "bits_list": []
            }
        },
        "giant_squid1": {
            "name": "giant_squid1",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "giant_squid2": {
            "name": "giant_squid2",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "parse_vent_line": {
            "name": "parse_vent_line",
            "location": 126,
            "return": [],
            "arguments": {
                "vent_line": []
            }
        },
        "normalize_vents": {
            "name": "normalize_vents",
            "location": 135,
            "return": [],
            "arguments": {
                "vent_vectors": []
            }
        },
        "only_straight_lines": {
            "name": "only_straight_lines",
            "location": 146,
            "return": [],
            "arguments": {
                "vent_vectors": []
            }
        },
        "hydrothermal_venture": {
            "name": "hydrothermal_venture",
            "location": 155,
            "return": [],
            "arguments": {
                "vent_vectors": []
            }
        },
        "hydrothermal_venture1": {
            "name": "hydrothermal_venture1",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "hydrothermal_venture2": {
            "name": "hydrothermal_venture2",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "parse_lantern_fish_list": {
            "name": "parse_lantern_fish_list",
            "location": 202,
            "return": [],
            "arguments": {
                "puzzle_input": []
            }
        },
        "lantern_fish_tick": {
            "name": "lantern_fish_tick",
            "location": 213,
            "return": [],
            "arguments": {
                "fish_dict": []
            }
        },
        "lantern_fish": {
            "name": "lantern_fish",
            "location": 224,
            "return": [],
            "arguments": {
                "num_ticks": []
            }
        },
        "minimum_fuel": {
            "name": "minimum_fuel",
            "location": 233,
            "return": [],
            "arguments": {
                "crab_positions": [],
                "cost_function": []
            }
        },
        "linear_crab_fuel": {
            "name": "linear_crab_fuel",
            "location": 247,
            "return": [],
            "arguments": {
                "istart": [],
                "itarget": []
            }
        },
        "nonlinear_crab_fuel": {
            "name": "nonlinear_crab_fuel",
            "location": 254,
            "return": [],
            "arguments": {
                "istart": [],
                "itarget": []
            }
        },
        "the_treachery_of_whales": {
            "name": "the_treachery_of_whales",
            "location": 263,
            "return": [],
            "arguments": {
                "cost_function": []
            }
        },
        "seven_segment_search_1": {
            "name": "seven_segment_search_1",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "seven_segment_search_2": {
            "name": "seven_segment_search_2",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "parse_smoke_basin_string": {
            "name": "parse_smoke_basin_string",
            "location": 286,
            "return": [],
            "arguments": {
                "smoke_basin_strings": []
            }
        },
        "smoke_low_points": {
            "name": "smoke_low_points",
            "location": 294,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "any_neighbors_lt_or_eq": {
            "name": "any_neighbors_lt_or_eq",
            "location": 307,
            "return": [],
            "arguments": {
                "target": [],
                "neighbors": []
            }
        },
        "all_neighbors_gt": {
            "name": "all_neighbors_gt",
            "location": 314,
            "return": [],
            "arguments": {
                "target": [],
                "neighbors": []
            }
        },
        "smoke_low_basins": {
            "name": "smoke_low_basins",
            "location": 321,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "depth_first_search": {
            "name": "depth_first_search",
            "location": 340,
            "return": [],
            "arguments": {
                "starting_point": [],
                "grid": []
            }
        },
        "smoke_basin_1": {
            "name": "smoke_basin_1",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "smoke_basin_2": {
            "name": "smoke_basin_2",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "syntax_parser": {
            "name": "syntax_parser",
            "location": 394,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "syntax_autocomplete": {
            "name": "syntax_autocomplete",
            "location": 408,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "syntax_scoring_1": {
            "name": "syntax_scoring_1",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "score_autocomplete": {
            "name": "score_autocomplete",
            "location": 434,
            "return": [],
            "arguments": {
                "chars": []
            }
        },
        "syntax_scoring_2": {
            "name": "syntax_scoring_2",
            "location": 443,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/aoc2021/seven_segment_search.py": {
        "parse_signal_patterns": {
            "name": "parse_signal_patterns",
            "location": 13,
            "return": [],
            "arguments": {
                "raw_signal_patterns": []
            }
        },
        "output_pattern_counts": {
            "name": "output_pattern_counts",
            "location": 23,
            "return": [],
            "arguments": {
                "raw_signal_patterns": []
            }
        },
        "unscramble": {
            "name": "unscramble",
            "location": 34,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "unscramble_output_pattern": {
            "name": "unscramble_output_pattern",
            "location": 101,
            "return": [],
            "arguments": {
                "signal_pattern": []
            }
        }
    },
    "daily-programmer-master/aoc2021/test_algos.py": {
        "bits_list": {
            "name": "bits_list",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "linq_list": {
            "name": "linq_list",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_sliding_window": {
            "name": "test_sliding_window",
            "location": 34,
            "return": [],
            "arguments": {
                "start": [],
                "lookback": [],
                "expected": []
            }
        },
        "test_most_common_bit": {
            "name": "test_most_common_bit",
            "location": 40,
            "return": [],
            "arguments": {
                "bits_list": [],
                "position": [],
                "expected": []
            }
        },
        "test_bits_to_decimal": {
            "name": "test_bits_to_decimal",
            "location": 45,
            "return": [],
            "arguments": {
                "bits": [],
                "decimal": []
            }
        },
        "test_point": {
            "name": "test_point",
            "location": 50,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "expected": []
            }
        },
        "test_diagonal_line": {
            "name": "test_diagonal_line",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_linq_list_first": {
            "name": "test_linq_list_first",
            "location": 64,
            "return": [],
            "arguments": {
                "linq_list": []
            }
        },
        "test_linq_list_empty_first": {
            "name": "test_linq_list_empty_first",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_linq_list_single": {
            "name": "test_linq_list_single",
            "location": 74,
            "return": [],
            "arguments": {
                "linq_list": []
            }
        },
        "test_linq_list_single_matches_multiple": {
            "name": "test_linq_list_single_matches_multiple",
            "location": 78,
            "return": [],
            "arguments": {
                "linq_list": []
            }
        },
        "test_linq_list_where_matches": {
            "name": "test_linq_list_where_matches",
            "location": 83,
            "return": [],
            "arguments": {
                "linq_list": []
            }
        },
        "test_linq_list_where_no_matches": {
            "name": "test_linq_list_where_no_matches",
            "location": 88,
            "return": [],
            "arguments": {
                "linq_list": []
            }
        },
        "test_grid_get_none": {
            "name": "test_grid_get_none",
            "location": 94,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_grid_get": {
            "name": "test_grid_get",
            "location": 101,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/aoc2021/test_bingo.py": {
        "raw_data": {
            "name": "raw_data",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_puzzle_input_to_bingo": {
            "name": "test_puzzle_input_to_bingo",
            "location": 31,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_is_board_winner_no_marked_numbers": {
            "name": "test_is_board_winner_no_marked_numbers",
            "location": 37,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_is_board_winner_with_winning_row": {
            "name": "test_is_board_winner_with_winning_row",
            "location": 42,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_is_board_winner_with_winning_column": {
            "name": "test_is_board_winner_with_winning_column",
            "location": 49,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_first_winning_board": {
            "name": "test_first_winning_board",
            "location": 59,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "test_last_winning_board": {
            "name": "test_last_winning_board",
            "location": 64,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        }
    },
    "daily-programmer-master/aoc2021/test_puzzles.py": {
        "vents_list": {
            "name": "vents_list",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "smoke_basin_string": {
            "name": "smoke_basin_string",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_sonar_sweep_simple": {
            "name": "test_sonar_sweep_simple",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_sonar_sweep_sliding_window": {
            "name": "test_sonar_sweep_sliding_window",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_calculate_oxygen_generator_rating": {
            "name": "test_calculate_oxygen_generator_rating",
            "location": 42,
            "return": [],
            "arguments": {
                "bits_list": []
            }
        },
        "test_calculate_co2_scrubber_rating": {
            "name": "test_calculate_co2_scrubber_rating",
            "location": 46,
            "return": [],
            "arguments": {
                "bits_list": []
            }
        },
        "test_parse_vent_line": {
            "name": "test_parse_vent_line",
            "location": 50,
            "return": [],
            "arguments": {
                "vents_list": []
            }
        },
        "test_normalize_vents_only_straight_lines": {
            "name": "test_normalize_vents_only_straight_lines",
            "location": 55,
            "return": [],
            "arguments": {
                "vents_list": []
            }
        },
        "test_hydrothermal_venture": {
            "name": "test_hydrothermal_venture",
            "location": 69,
            "return": [],
            "arguments": {
                "vents_list": []
            }
        },
        "test_parse_lantern_fish_list": {
            "name": "test_parse_lantern_fish_list",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_lantern_fish_tick": {
            "name": "test_lantern_fish_tick",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_lantern_fish_tick_3": {
            "name": "test_lantern_fish_tick_3",
            "location": 92,
            "return": [],
            "arguments": {
                "num_ticks": [],
                "expected": []
            }
        },
        "dict_remove_empty_kvps": {
            "name": "dict_remove_empty_kvps",
            "location": 100,
            "return": [],
            "arguments": {
                "dictionary": [],
                "value_value": []
            }
        },
        "test_minimum_fuel_linear_cost": {
            "name": "test_minimum_fuel_linear_cost",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_minimum_fuel_nonlinear_cost": {
            "name": "test_minimum_fuel_nonlinear_cost",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_smoke_low_points": {
            "name": "test_smoke_low_points",
            "location": 118,
            "return": [],
            "arguments": {
                "smoke_basin_string": []
            }
        },
        "test_smoke_low_basins": {
            "name": "test_smoke_low_basins",
            "location": 125,
            "return": [],
            "arguments": {
                "smoke_basin_string": []
            }
        },
        "test_syntax_parser": {
            "name": "test_syntax_parser",
            "location": 143,
            "return": [],
            "arguments": {
                "line": [],
                "expected": []
            }
        },
        "test_syntax_autocomplete": {
            "name": "test_syntax_autocomplete",
            "location": 158,
            "return": [],
            "arguments": {
                "line": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/aoc2021/test_seven_segment_search.py": {
        "signal_patterns": {
            "name": "signal_patterns",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_seven_segment_search": {
            "name": "test_seven_segment_search",
            "location": 21,
            "return": [],
            "arguments": {
                "signal_patterns": []
            }
        },
        "test_unscramble": {
            "name": "test_unscramble",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_unscramble_output_pattern": {
            "name": "test_unscramble_output_pattern",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_sum_all_output_patterns": {
            "name": "test_sum_all_output_patterns",
            "location": 54,
            "return": [],
            "arguments": {
                "signal_patterns": []
            }
        },
        "test_individual_output_pattern": {
            "name": "test_individual_output_pattern",
            "location": 78,
            "return": [],
            "arguments": {
                "signal_patterns": [],
                "pattern_index": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/challenge331/calculator.py": {
        "add": {
            "name": "add",
            "location": 1,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        },
        "subtract": {
            "name": "subtract",
            "location": 4,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 14,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        },
        "absolute_value": {
            "name": "absolute_value",
            "location": 24,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "calculate_sign": {
            "name": "calculate_sign",
            "location": 30,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        },
        "divide": {
            "name": "divide",
            "location": 40,
            "return": [],
            "arguments": {
                "num1": [],
                "num2": []
            }
        },
        "exponent": {
            "name": "exponent",
            "location": 56,
            "return": [],
            "arguments": {
                "base": [],
                "power": []
            }
        },
        "WholeNumber.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "WholeNumber.__add__": {
            "name": "__add__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "other_whole_number": []
            }
        },
        "WholeNumber.__sub__": {
            "name": "__sub__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "other_whole_number": []
            }
        },
        "WholeNumber.__mul__": {
            "name": "__mul__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other_whole_number": []
            }
        },
        "WholeNumber.__div__": {
            "name": "__div__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other_whole_number": []
            }
        },
        "WholeNumber.__pow__": {
            "name": "__pow__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other_whole_number": []
            }
        },
        "CalculatorTests.test_add": {
            "name": "test_add",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatorTests.test_multiply": {
            "name": "test_multiply",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatorTests.test_abosulute_value": {
            "name": "test_abosulute_value",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatorTests.test_subtract": {
            "name": "test_subtract",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatorTests.test_divide": {
            "name": "test_divide",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatorTests.test_exponent": {
            "name": "test_exponent",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_operator_overloading": {
            "name": "test_operator_overloading",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_abs1": {
            "name": "test_abs1",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_abs2": {
            "name": "test_abs2",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_divide1": {
            "name": "test_divide1",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_divide2": {
            "name": "test_divide2",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WholeNumberTests.test_divide3": {
            "name": "test_divide3",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/challenge331/power_operations.py": {
        "PowerOperations.sum_digits": {
            "name": "sum_digits",
            "location": 6,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "PowerOperations.sum_digits_exponent": {
            "name": "sum_digits_exponent",
            "location": 13,
            "return": [],
            "arguments": {
                "base": [],
                "power": []
            }
        },
        "PowerOperationsTests.test_sum_digits": {
            "name": "test_sum_digits",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerOperationsTests.test_sum_exponent": {
            "name": "test_sum_exponent",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerOperationsTests.simple_assert_harness": {
            "name": "simple_assert_harness",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "number": [],
                "expected_total": []
            }
        },
        "PowerOperationsTests.exponent_sum_assert_harness": {
            "name": "exponent_sum_assert_harness",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "exponent": [],
                "expected_total": []
            }
        }
    },
    "daily-programmer-master/challenge332/summit.py": {
        "create_list_of_peaks_From_json": {
            "name": "create_list_of_peaks_From_json",
            "location": 5,
            "return": [],
            "arguments": {
                "path": [],
                "name": []
            }
        },
        "calculate_summit_order": {
            "name": "calculate_summit_order",
            "location": 12,
            "return": [],
            "arguments": {
                "peaks": []
            }
        },
        "calculate_summit_order_dynamic": {
            "name": "calculate_summit_order_dynamic",
            "location": 17,
            "return": [],
            "arguments": {
                "peaks": []
            }
        },
        "build_summit_order": {
            "name": "build_summit_order",
            "location": 25,
            "return": [],
            "arguments": {
                "peaks": [],
                "summits": []
            }
        },
        "find_next_biggest_number": {
            "name": "find_next_biggest_number",
            "location": 35,
            "return": [],
            "arguments": {
                "current_number": [],
                "numbers": []
            }
        },
        "find_max_diff": {
            "name": "find_max_diff",
            "location": 51,
            "return": [],
            "arguments": {
                "current_number": [],
                "numbers": []
            }
        },
        "NumberAndIndex.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "number": []
            }
        },
        "SummitTests.test_find_next_biggest_number_1": {
            "name": "test_find_next_biggest_number_1",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SummitTests.test_find_max_diff_1": {
            "name": "test_find_max_diff_1",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SummitTests.test_find_max_diff_2": {
            "name": "test_find_max_diff_2",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/challenge333/packets.py": {
        "Packet.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "packet_id": [],
                "packet_count": [],
                "text": []
            }
        },
        "Packet.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.create_from_text": {
            "name": "create_from_text",
            "location": 17,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "count": []
            }
        },
        "Message.add_packet": {
            "name": "add_packet",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "packet": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.create_list_of_size": {
            "name": "create_list_of_size",
            "location": 40,
            "return": [],
            "arguments": {
                "count": []
            }
        },
        "Messages.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "packets": []
            }
        },
        "Messages.recieve_packets": {
            "name": "recieve_packets",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "incoming_packets": []
            }
        },
        "Messages.recieve_packet": {
            "name": "recieve_packet",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "incoming_packet": []
            }
        },
        "Messages.assemble": {
            "name": "assemble",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messages.get_all_messages": {
            "name": "get_all_messages",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messages.bootstrap_from_input_file": {
            "name": "bootstrap_from_input_file",
            "location": 75,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "PacketAssemblerTests.test_regex_parse_of_packet_text_representation": {
            "name": "test_regex_parse_of_packet_text_representation",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PacketAssemblerTests.packet_assert": {
            "name": "packet_assert",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "packet": [],
                "expected_mid": [],
                "expected_pid": [],
                "expected_count": [],
                "expected_text": []
            }
        }
    },
    "daily-programmer-master/challenge335/consecutive_distance.py": {
        "create_lists_from_input": {
            "name": "create_lists_from_input",
            "location": 1,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "find_consecutive_distance": {
            "name": "find_consecutive_distance",
            "location": 9,
            "return": [],
            "arguments": {
                "row": []
            }
        }
    },
    "daily-programmer-master/challenge335/cribbage.py": {
        "Suit.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "suit": []
            }
        },
        "Rank.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "rank": []
            }
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Card.get_rank": {
            "name": "get_rank",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.get_suit": {
            "name": "get_suit",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.get_rank_number": {
            "name": "get_rank_number",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.create_card_from_chars": {
            "name": "create_card_from_chars",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "chars": []
            }
        },
        "Card.create_cards_from_json": {
            "name": "create_cards_from_json",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "input_name": []
            }
        },
        "Hand.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "cards": []
            }
        },
        "Hand.nobs": {
            "name": "nobs",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.flush": {
            "name": "flush",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.fifteen": {
            "name": "fifteen",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.get_all_combinations": {
            "name": "get_all_combinations",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.get_score": {
            "name": "get_score",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/challenge335/cribbage_tests.py": {
        "CribbageTests.hand_1_nobs": {
            "name": "hand_1_nobs",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.hand_0_nobs": {
            "name": "hand_0_nobs",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.hand_no_flush": {
            "name": "hand_no_flush",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.hand_flush_4_cards": {
            "name": "hand_flush_4_cards",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.hand_flush_5_cards": {
            "name": "hand_flush_5_cards",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.create_hand": {
            "name": "create_hand",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "input_hand": []
            }
        },
        "CribbageTests.test_nobs": {
            "name": "test_nobs",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CribbageTests.test_flush": {
            "name": "test_flush",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/challenge339/medium.py": {
        "create_rental_tuples": {
            "name": "create_rental_tuples",
            "location": 4,
            "return": [],
            "arguments": {
                "input_data_path": []
            }
        },
        "by_earliest_end_date": {
            "name": "by_earliest_end_date",
            "location": 22,
            "return": [],
            "arguments": {
                "rental_times": []
            }
        },
        "earliest_ending_time": {
            "name": "earliest_ending_time",
            "location": 30,
            "return": [],
            "arguments": {
                "times": []
            }
        },
        "remove_overlapping_times": {
            "name": "remove_overlapping_times",
            "location": 33,
            "return": [],
            "arguments": {
                "all_times": [],
                "key_time": []
            }
        },
        "pretty_print_grid": {
            "name": "pretty_print_grid",
            "location": 42,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "TimeSchedulingUnitTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeSchedulingUnitTests.test_earliest_end_1": {
            "name": "test_earliest_end_1",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeSchedulingUnitTests.test_remove_overlapping_1": {
            "name": "test_remove_overlapping_1",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/challenge340/easy.py": {
        "first_repeating_character": {
            "name": "first_repeating_character",
            "location": 4,
            "return": [],
            "arguments": {
                "characters": []
            }
        },
        "RepeatingCharacterTests.test_sample_input": {
            "name": "test_sample_input",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepeatingCharacterTests.test_challenge_input_1": {
            "name": "test_challenge_input_1",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepeatingCharacterTests.test_challenge_input_2": {
            "name": "test_challenge_input_2",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepeatingCharacterTests.test_challenge_input_3": {
            "name": "test_challenge_input_3",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepeatingCharacterTests.assert_helper": {
            "name": "assert_helper",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "expected_index": [],
                "expected_char": []
            }
        }
    },
    "daily-programmer-master/challenge340/medium.py": {
        "create_minefield": {
            "name": "create_minefield",
            "location": 10,
            "return": [],
            "arguments": {
                "user_input": []
            }
        },
        "Minefield.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "minefield_grid": []
            }
        },
        "MinefieldTests.test_creation_from_hardcoded_input": {
            "name": "test_creation_from_hardcoded_input",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/daily-coding-problem/sample.py": {
        "climb_staircase": {
            "name": "climb_staircase",
            "location": 3,
            "return": [],
            "arguments": {
                "n": [],
                "climb_set": []
            }
        },
        "test_climb_staircase_with_provider_answer": {
            "name": "test_climb_staircase_with_provider_answer",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/dynamic/fibo.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 3,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "fibonacci_dynamic": {
            "name": "fibonacci_dynamic",
            "location": 16,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "daily-programmer-master/dynamic/fibo_tests.py": {
        "FiboTests.test_with_fibonacci": {
            "name": "test_with_fibonacci",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiboTests.test_with_fibonacci_dynamic": {
            "name": "test_with_fibonacci_dynamic",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiboTests.test_with_fibonacci_dynamic_func": {
            "name": "test_with_fibonacci_dynamic_func",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiboTests.test_with_fibonacci_func": {
            "name": "test_with_fibonacci_func",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiboTests.calculate_with_func": {
            "name": "calculate_with_func",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "fibo_func": []
            }
        }
    },
    "daily-programmer-master/hackerrank/common.py": {
        "true_for_all": {
            "name": "true_for_all",
            "location": 3,
            "return": [],
            "arguments": {
                "items": [],
                "func": []
            }
        },
        "sum_desired_length": {
            "name": "sum_desired_length",
            "location": 10,
            "return": [],
            "arguments": {
                "numbers": [],
                "start": [],
                "length": []
            }
        },
        "check_all": {
            "name": "check_all",
            "location": 16,
            "return": [],
            "arguments": {
                "items": [],
                "func": [],
                "expected_func_result": []
            }
        },
        "numbers_to_counts": {
            "name": "numbers_to_counts",
            "location": 23,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "dedupe_sequence": {
            "name": "dedupe_sequence",
            "location": 32,
            "return": [],
            "arguments": {
                "sequence": []
            }
        },
        "is_even": {
            "name": "is_even",
            "location": 39,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "daily-programmer-master/hackerrank/problemsolving.py": {
        "simple_sum_array": {
            "name": "simple_sum_array",
            "location": 7,
            "return": [],
            "arguments": {
                "count": [],
                "numbers": []
            }
        },
        "compare_the_triplets": {
            "name": "compare_the_triplets",
            "location": 10,
            "return": [],
            "arguments": {
                "alice": [],
                "bob": []
            }
        },
        "diagonal_difference": {
            "name": "diagonal_difference",
            "location": 22,
            "return": [],
            "arguments": {
                "matrix": []
            }
        },
        "plus_minus": {
            "name": "plus_minus",
            "location": 31,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "staircase": {
            "name": "staircase",
            "location": 45,
            "return": [],
            "arguments": {
                "count": []
            }
        },
        "mini_max_sum": {
            "name": "mini_max_sum",
            "location": 53,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "permute": {
            "name": "permute",
            "location": 65,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "birthday_cake_candles": {
            "name": "birthday_cake_candles",
            "location": 74,
            "return": [],
            "arguments": {
                "candle_heights": []
            }
        },
        "time_conversion": {
            "name": "time_conversion",
            "location": 79,
            "return": [],
            "arguments": {
                "time_12h": []
            }
        }
    },
    "daily-programmer-master/hackerrank/test_common.py": {
        "test_true_for_all_should_be_true": {
            "name": "test_true_for_all_should_be_true",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_check_all": {
            "name": "test_check_all",
            "location": 13,
            "return": [],
            "arguments": {
                "items": [],
                "func": [],
                "expected_func_result": [],
                "expected": []
            }
        },
        "test_true_for_all_with_bad_data_should_be_false": {
            "name": "test_true_for_all_with_bad_data_should_be_false",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_sum_desired_length": {
            "name": "test_sum_desired_length",
            "location": 26,
            "return": [],
            "arguments": {
                "numbers": [],
                "start": [],
                "length": [],
                "expected": []
            }
        },
        "test_numbers_to_counts": {
            "name": "test_numbers_to_counts",
            "location": 34,
            "return": [],
            "arguments": {
                "numbers": [],
                "expected": []
            }
        },
        "test_dedupe_sequence": {
            "name": "test_dedupe_sequence",
            "location": 41,
            "return": [],
            "arguments": {
                "numbers": [],
                "expected": []
            }
        },
        "test_is_even": {
            "name": "test_is_even",
            "location": 51,
            "return": [],
            "arguments": {
                "number": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/hackerrank/test_problemsolving.py": {
        "TestProblemSolving.test_simple_sum_array": {
            "name": "test_simple_sum_array",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_compare_the_triplets": {
            "name": "test_compare_the_triplets",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_diagonal_difference": {
            "name": "test_diagonal_difference",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_plus_minus": {
            "name": "test_plus_minus",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_staircase": {
            "name": "test_staircase",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_mini_max_sum": {
            "name": "test_mini_max_sum",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_birthday_cake_candles": {
            "name": "test_birthday_cake_candles",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_time_conversion": {
            "name": "test_time_conversion",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProblemSolving.test_time_conversion_thorough": {
            "name": "test_time_conversion_thorough",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "daily-programmer-master/hackerrank/__init__.py": {},
    "daily-programmer-master/hackerrank/implementation/bonappetit.py": {
        "bon_appetit": {
            "name": "bon_appetit",
            "location": 3,
            "return": [],
            "arguments": {
                "not_eaten_index": [],
                "bill": [],
                "anna_paid": []
            }
        }
    },
    "daily-programmer-master/hackerrank/implementation/implementation.py": {
        "grading": {
            "name": "grading",
            "location": 5,
            "return": [],
            "arguments": {
                "raw_grades": []
            }
        },
        "kangaroo": {
            "name": "kangaroo",
            "location": 21,
            "return": [],
            "arguments": {
                "x1": [],
                "v1": [],
                "x2": [],
                "v2": []
            }
        },
        "apple_and_orange": {
            "name": "apple_and_orange",
            "location": 33,
            "return": [],
            "arguments": {
                "s": [],
                "t": [],
                "a": [],
                "b": [],
                "apples": [],
                "oranges": []
            }
        },
        "between_two_sets": {
            "name": "between_two_sets",
            "location": 44,
            "return": [],
            "arguments": {
                "set_1": [],
                "set_2": []
            }
        },
        "breaking_the_records": {
            "name": "breaking_the_records",
            "location": 56,
            "return": [],
            "arguments": {
                "scores": []
            }
        },
        "the_birthday_bar": {
            "name": "the_birthday_bar",
            "location": 70,
            "return": [],
            "arguments": {
                "numbers": [],
                "day": [],
                "month": []
            }
        },
        "divisible_sum_pairs": {
            "name": "divisible_sum_pairs",
            "location": 80,
            "return": [],
            "arguments": {
                "n": [],
                "k": [],
                "array": []
            }
        },
        "migratory_birds": {
            "name": "migratory_birds",
            "location": 89,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "day_of_the_programmer": {
            "name": "day_of_the_programmer",
            "location": 93,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "is_leap_year": {
            "name": "is_leap_year",
            "location": 108,
            "return": [],
            "arguments": {
                "year": []
            }
        },
        "sock_monster": {
            "name": "sock_monster",
            "location": 114,
            "return": [],
            "arguments": {
                "socks": []
            }
        },
        "drawing_book": {
            "name": "drawing_book",
            "location": 121,
            "return": [],
            "arguments": {
                "book_length": [],
                "page": []
            }
        },
        "counting_valleys": {
            "name": "counting_valleys",
            "location": 128,
            "return": [],
            "arguments": {
                "n": [],
                "s": []
            }
        },
        "electronics_shop": {
            "name": "electronics_shop",
            "location": 143,
            "return": [],
            "arguments": {
                "keyboards": [],
                "drives": [],
                "b": []
            }
        },
        "cats_and_a_mouse": {
            "name": "cats_and_a_mouse",
            "location": 151,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "picking_numbers": {
            "name": "picking_numbers",
            "location": 161,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "climbing_the_leaderboard": {
            "name": "climbing_the_leaderboard",
            "location": 174,
            "return": [],
            "arguments": {
                "scores": [],
                "alice": []
            }
        },
        "get_standing": {
            "name": "get_standing",
            "location": 183,
            "return": [],
            "arguments": {
                "highscores": [],
                "new_score": []
            }
        },
        "beautiful_days_at_the_movies": {
            "name": "beautiful_days_at_the_movies",
            "location": 203,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "divisor": []
            }
        },
        "strange_advertising": {
            "name": "strange_advertising",
            "location": 211,
            "return": [],
            "arguments": {
                "day": []
            }
        },
        "strange_advertising_recurse": {
            "name": "strange_advertising_recurse",
            "location": 214,
            "return": [],
            "arguments": {
                "day": [],
                "end_day": [],
                "new_shares": [],
                "total_shares": []
            }
        },
        "the_hurdle_race": {
            "name": "the_hurdle_race",
            "location": 222,
            "return": [],
            "arguments": {
                "jump_height": [],
                "hurdles": []
            }
        },
        "designer_pdf_viewer": {
            "name": "designer_pdf_viewer",
            "location": 230,
            "return": [],
            "arguments": {
                "letters": [],
                "word": []
            }
        },
        "utopian_tree": {
            "name": "utopian_tree",
            "location": 238,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "angry_professor": {
            "name": "angry_professor",
            "location": 247,
            "return": [],
            "arguments": {
                "k": [],
                "a": []
            }
        },
        "big_sorting": {
            "name": "big_sorting",
            "location": 257,
            "return": [],
            "arguments": {
                "number_strings": []
            }
        },
        "save_the_prisoner": {
            "name": "save_the_prisoner",
            "location": 261,
            "return": [],
            "arguments": {
                "num_prisoners": [],
                "num_sweets": [],
                "start": []
            }
        }
    },
    "daily-programmer-master/hackerrank/implementation/test_implementation.py": {
        "test_bon_appetit": {
            "name": "test_bon_appetit",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "TestImplementation.test_grading": {
            "name": "test_grading",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_kangaroo": {
            "name": "test_kangaroo",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_apple_and_orange": {
            "name": "test_apple_and_orange",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_between_two_sets": {
            "name": "test_between_two_sets",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_breaking_the_records": {
            "name": "test_breaking_the_records",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_the_birthday_bar": {
            "name": "test_the_birthday_bar",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_divisible_sum_pairs": {
            "name": "test_divisible_sum_pairs",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_migratory_birds": {
            "name": "test_migratory_birds",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_day_of_the_programmer": {
            "name": "test_day_of_the_programmer",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_is_leap_year": {
            "name": "test_is_leap_year",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_sock_monstor": {
            "name": "test_sock_monstor",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_drawing_book": {
            "name": "test_drawing_book",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "page": [],
                "expected": []
            }
        },
        "TestImplementation.test_counting_valleys": {
            "name": "test_counting_valleys",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_electronics_shop": {
            "name": "test_electronics_shop",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_cats_and_a_mouse": {
            "name": "test_cats_and_a_mouse",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_picking_numbers": {
            "name": "test_picking_numbers",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_climbing_the_leaderboard": {
            "name": "test_climbing_the_leaderboard",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_get_standing": {
            "name": "test_get_standing",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "highscores": [],
                "new_score": [],
                "expected": []
            }
        },
        "TestImplementation.test_strange_advertising": {
            "name": "test_strange_advertising",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "day": [],
                "expected": []
            }
        },
        "TestImplementation.test_the_hurdle_race": {
            "name": "test_the_hurdle_race",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_designer_pdf_viewer": {
            "name": "test_designer_pdf_viewer",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "letters": [],
                "word": [],
                "expected": []
            }
        },
        "TestImplementation.test_utopian_tree": {
            "name": "test_utopian_tree",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_angry_professor": {
            "name": "test_angry_professor",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_big_sorting": {
            "name": "test_big_sorting",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImplementation.test_save_the_prisoner": {
            "name": "test_save_the_prisoner",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "num_prisoners": [],
                "num_sweets": [],
                "start": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/hackerrank/implementation/__init__.py": {},
    "daily-programmer-master/hackerrank/implementation/circular-array-rotation/challenge.py": {
        "circular_array_rotation": {
            "name": "circular_array_rotation",
            "location": 7,
            "return": [],
            "arguments": {
                "array": [],
                "shifts": [],
                "queries": []
            }
        },
        "read_test_input": {
            "name": "read_test_input",
            "location": 15,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "read_test_output": {
            "name": "read_test_output",
            "location": 31,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_circular_array_rotation": {
            "name": "test_circular_array_rotation",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "shifts": [],
                "queries": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/hackerrank/implementation/circular-array-rotation/__init__.py": {},
    "daily-programmer-master/leetcode/problem008.py": {
        "a_to_i": {
            "name": "a_to_i",
            "location": 4,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "daily-programmer-master/leetcode/problem009.py": {
        "Solution.is_palindrome": {
            "name": "is_palindrome",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        }
    },
    "daily-programmer-master/leetcode/problem011.py": {
        "Problem011.container_most_water": {
            "name": "container_most_water",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "numbers": []
            }
        },
        "Problem011.container_most_water_linear": {
            "name": "container_most_water_linear",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "numbers": []
            }
        },
        "Problem011.calculate_area": {
            "name": "calculate_area",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "height1": [],
                "height2": [],
                "distance": []
            }
        }
    },
    "daily-programmer-master/leetcode/problem023.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ListNode.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Solution.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "lists": []
            }
        },
        "Solution.merge_lists": {
            "name": "merge_lists",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.find_min_index": {
            "name": "find_min_index",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.dequeue_min_node": {
            "name": "dequeue_min_node",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.append_to_sorted_list": {
            "name": "append_to_sorted_list",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Solution.get_last_node": {
            "name": "get_last_node",
            "location": 69,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "daily-programmer-master/leetcode/problem945.py": {
        "Solution.min_increment": {
            "name": "min_increment",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "Solution.min_increment_fast": {
            "name": "min_increment_fast",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "Solution.contains_skip_i": {
            "name": "contains_skip_i",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "i_skip": [],
                "target": []
            }
        },
        "Solution.contains_left": {
            "name": "contains_left",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "position": []
            }
        },
        "Solution.contains_right": {
            "name": "contains_right",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "position": []
            }
        }
    },
    "daily-programmer-master/leetcode/test_problem008.py": {
        "test_a_to_i": {
            "name": "test_a_to_i",
            "location": 12,
            "return": [],
            "arguments": {
                "string": [],
                "expected_number": []
            }
        }
    },
    "daily-programmer-master/leetcode/test_problem009.py": {
        "test_is_palindrome": {
            "name": "test_is_palindrome",
            "location": 10,
            "return": [],
            "arguments": {
                "test_data": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/leetcode/test_problem011.py": {
        "TestProblem.test_container_most_water": {
            "name": "test_container_most_water",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "test_data": [],
                "expected": []
            }
        },
        "TestProblem.test_container_most_water_linear": {
            "name": "test_container_most_water_linear",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "test_data": [],
                "expected": []
            }
        },
        "TestProblem.test_calculate_area": {
            "name": "test_calculate_area",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "height1": [],
                "height2": [],
                "distance": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/leetcode/test_problem023.py": {
        "test_min_of_lists_flat_3": {
            "name": "test_min_of_lists_flat_3",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_min_and_remove": {
            "name": "test_min_and_remove",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_get_last_node": {
            "name": "test_get_last_node",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_merge_lists": {
            "name": "test_merge_lists",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_merge_lists_2": {
            "name": "test_merge_lists_2",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "daily-programmer-master/leetcode/test_problem945.py": {
        "test_min_increment": {
            "name": "test_min_increment",
            "location": 11,
            "return": [],
            "arguments": {
                "array": [],
                "expected_moves": [],
                "test_method": []
            }
        }
    },
    "daily-programmer-master/leetcode/__init__.py": {},
    "daily-programmer-master/leetcode/binarysearch/binary_search.py": {
        "binary_search": {
            "name": "binary_search",
            "location": 5,
            "return": [],
            "arguments": {
                "array": [],
                "target": []
            }
        },
        "sqrt_builtin": {
            "name": "sqrt_builtin",
            "location": 19,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "close_enough": {
            "name": "close_enough",
            "location": 22,
            "return": [],
            "arguments": {
                "guess": [],
                "target": [],
                "delta": []
            }
        },
        "sqrt_scratch": {
            "name": "sqrt_scratch",
            "location": 26,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "daily-programmer-master/leetcode/binarysearch/guessing.py": {
        "guess": {
            "name": "guess",
            "location": 8,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "Solution.guessNumber": {
            "name": "guessNumber",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "daily-programmer-master/leetcode/binarysearch/test_binary_search.py": {
        "test_square_root": {
            "name": "test_square_root",
            "location": 12,
            "return": [],
            "arguments": {
                "sqrt_func": [],
                "n": [],
                "expected": []
            }
        }
    },
    "daily-programmer-master/leetcode/binarysearch/test_guessing.py": {
        "test_guessing_game": {
            "name": "test_guessing_game",
            "location": 10,
            "return": [],
            "arguments": {
                "max_number": [],
                "target": []
            }
        }
    },
    "daily-programmer-master/leetcode/binarysearch/__init__.py": {}
}
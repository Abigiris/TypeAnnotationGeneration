{
    "dalla-stats2-master/logger/dalla_logger/data_provider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "user": [
                    "str"
                ],
                "passwd": [
                    "str"
                ],
                "db": [
                    "str"
                ]
            }
        },
        "DataProvider.create_database_schema": {
            "name": "create_database_schema",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.__del__": {
            "name": "__del__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.is_connected": {
            "name": "is_connected",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.flatten_device_rows_exclude": {
            "name": "flatten_device_rows_exclude",
            "location": 121,
            "return": [
                "List[Tuple[(str, int, int, int, int)]]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.insert_into_device_table": {
            "name": "insert_into_device_table",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.convert_to_device_row": {
            "name": "convert_to_device_row",
            "location": 176,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.get_person_rows": {
            "name": "get_person_rows",
            "location": 190,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.flatten_person_rows": {
            "name": "flatten_person_rows",
            "location": 222,
            "return": [
                "List[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "self": [],
                "person_rows": [
                    "Dict[(int, Any)]"
                ]
            }
        },
        "DataProvider.update_person_table_force": {
            "name": "update_person_table_force",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.update_person_table_flat_rows": {
            "name": "update_person_table_flat_rows",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flat_persons": [
                    "List[Tuple[(int, int, int)]]"
                ]
            }
        },
        "DataProvider.update_person_table": {
            "name": "update_person_table",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.update_device_table": {
            "name": "update_device_table",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.calculate_deltas": {
            "name": "calculate_deltas",
            "location": 350,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "devices_old": [
                    "Dict[(str, Any)]"
                ],
                "devices_new": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.get_all_device_rows": {
            "name": "get_all_device_rows",
            "location": 377,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.get_device_rows": {
            "name": "get_device_rows",
            "location": 405,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.convert_to_history_rows": {
            "name": "convert_to_history_rows",
            "location": 445,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.flatten_history_rows_exclude": {
            "name": "flatten_history_rows_exclude",
            "location": 455,
            "return": [
                "List[Tuple[(int, str, int, int)]]"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.insert_into_history_table": {
            "name": "insert_into_history_table",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.update_history_table": {
            "name": "update_history_table",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DataProvider.update_database": {
            "name": "update_database",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "devices": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/logger_loop.py": {
        "print_usage": {
            "name": "print_usage",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "dalla-stats2-master/logger/dalla_logger/models.py": {
        "DeviceRow.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_id": [
                    "int"
                ],
                "mac_address": [
                    "str"
                ],
                "person_id": [
                    "int"
                ],
                "total_bytes": [
                    "int"
                ],
                "on_peak": [
                    "int"
                ],
                "off_peak": [
                    "int"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "DeviceRow.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersonRow.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person_id": [
                    "int"
                ],
                "on_peak": [
                    "int"
                ],
                "off_peak": [
                    "int"
                ]
            }
        },
        "PersonRow.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryRow.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "history_id": [
                    "int"
                ],
                "device_id": [
                    "int"
                ],
                "ip_address": [
                    "str"
                ],
                "record_time": [
                    "int"
                ],
                "total_bytes": [
                    "int"
                ]
            }
        },
        "HistoryRow.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseMap.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/router_api.py": {
        "init_session": {
            "name": "init_session",
            "location": 29,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "router_ip": [],
                "username": [],
                "password": []
            }
        },
        "logout": {
            "name": "logout",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "dec_str_to_ip_str": {
            "name": "dec_str_to_ip_str",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "dec": []
            }
        },
        "get_devices": {
            "name": "get_devices",
            "location": 108,
            "return": [
                "Dict[(str, DeviceInfo)]"
            ],
            "arguments": {
                "stats_dict_array": [],
                "time_key": [
                    "int"
                ]
            }
        },
        "get_device_records": {
            "name": "get_device_records",
            "location": 133,
            "return": [
                "Dict[(str, DeviceInfo)]"
            ],
            "arguments": {
                "session": []
            }
        },
        "DeviceInfo.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mac_address": [
                    "str"
                ],
                "ip_address": [
                    "str"
                ],
                "timestamp": [
                    "int"
                ],
                "total_bytes": [
                    "int"
                ]
            }
        },
        "DeviceInfo.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dalla-stats2-master/logger/dalla_logger/__init__.py": {},
    "dalla-stats2-master/logger/test/__init__.py": {}
}
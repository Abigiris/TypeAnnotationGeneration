{
    "decompose-master/setup.py": {},
    "decompose-master/decompose/sklearn.py": {
        "DECOMPOSE.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelDirectory": [],
                "priors": [],
                "n_components": [],
                "isFullyObserved": [],
                "dtype": [],
                "maxIterations": [],
                "cv": [],
                "noiseUniformity": [],
                "stopCriterionInit": [],
                "stopCriterionEM": [],
                "stopCriterionBCD": [],
                "device": []
            }
        },
        "DECOMPOSE.noiseUniformity": {
            "name": "noiseUniformity",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.cv": {
            "name": "cv",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.n_components": {
            "name": "n_components",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.components_": {
            "name": "components_",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.variance_ratio_": {
            "name": "variance_ratio_",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.trainMask": {
            "name": "trainMask",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.testMask": {
            "name": "testMask",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.observedMask": {
            "name": "observedMask",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.__calc_variance_ratio": {
            "name": "__calc_variance_ratio",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "U": []
            }
        },
        "DECOMPOSE.fit": {
            "name": "fit",
            "location": 112,
            "return": [
                "_TDECOMPOSE@@DECOMPOSE@@"
            ],
            "arguments": {
                "self": [
                    "_TDECOMPOSE@@DECOMPOSE@@"
                ],
                "X": []
            }
        },
        "DECOMPOSE.fit_transform": {
            "name": "fit_transform",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "DECOMPOSE.transform": {
            "name": "transform",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "transformModelDirectory": []
            }
        }
    },
    "decompose-master/decompose/version.py": {},
    "decompose-master/decompose/__init__.py": {},
    "decompose-master/decompose/cv/cv.py": {
        "CV.isLowrank": {
            "name": "isLowrank",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CV.lowrankMask": {
            "name": "lowrankMask",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "CV.mask": {
            "name": "mask",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nFolds": [],
                "foldNumber": []
            }
        },
        "Block.nFolds": {
            "name": "nFolds",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.foldNumber": {
            "name": "foldNumber",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.isLowrank": {
            "name": "isLowrank",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.lowrankMask": {
            "name": "lowrankMask",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "Block.mask": {
            "name": "mask",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "Block.testMask": {
            "name": "testMask",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Mf": [],
                "foldNumber": [],
                "nFolds": [],
                "nValues": []
            }
        }
    },
    "decompose-master/decompose/cv/__init__.py": {},
    "decompose-master/decompose/data/lowRank.py": {
        "LowRank.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [],
                "M_train": [],
                "M_test": [],
                "dtype": []
            }
        },
        "LowRank.tensorReconstruction": {
            "name": "tensorReconstruction",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "LowRank.training": {
            "name": "training",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.test": {
            "name": "test",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.training_input_fn": {
            "name": "training_input_fn",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.test_input_fn": {
            "name": "test_input_fn",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.__var_training": {
            "name": "__var_training",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.__var_test": {
            "name": "__var_test",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.residuals_training": {
            "name": "residuals_training",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "LowRank.var_expl_training": {
            "name": "var_expl_training",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "LowRank.residuals_test": {
            "name": "residuals_test",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "LowRank.var_expl_test": {
            "name": "var_expl_test",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        }
    },
    "decompose-master/decompose/data/random.py": {
        "Random.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "dtype": []
            }
        },
        "Random.input_fn": {
            "name": "input_fn",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Random.M": {
            "name": "M",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Random.input_fn.f": {
            "name": "f",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/data/__init__.py": {},
    "decompose-master/decompose/distributions/algorithms.py": {
        "Algorithms.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "Algorithms.mode": {
            "name": "mode",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "Algorithms.pdf": {
            "name": "pdf",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "Algorithms.fit": {
            "name": "fit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "Algorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "Algorithms.fitLatents": {
            "name": "fitLatents",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenDoubleLomax.py": {
        "CenDoubleLomax.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "alpha": [],
                "beta": [],
                "tau": [],
                "properties": []
            }
        },
        "CenDoubleLomax.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenDoubleLomax.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.alpha": {
            "name": "alpha",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "CenDoubleLomax.beta": {
            "name": "beta",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenDoubleLomax.tau": {
            "name": "tau",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenDoubleLomax.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "decompose.distributions.cenLaplace.CenLaplace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.shape": {
            "name": "shape",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.latentShape": {
            "name": "latentShape",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenDoubleLomaxAlgorithms.py": {
        "CenDoubleLomaxAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenDoubleLomaxAlgorithms.mode": {
            "name": "mode",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenDoubleLomaxAlgorithms.pdf": {
            "name": "pdf",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenDoubleLomaxAlgorithms.llh": {
            "name": "llh",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenDoubleLomaxAlgorithms.fit": {
            "name": "fit",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenDoubleLomaxAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenLaplace.py": {
        "CenLaplace.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "beta": [],
                "properties": []
            }
        },
        "CenLaplace.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenLaplace.mu": {
            "name": "mu",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenLaplaceAlgorithms.py": {
        "CenLaplaceAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenLaplaceAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenLaplaceAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenLaplaceAlgorithms.fit": {
            "name": "fit",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenLaplaceAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenLaplaceAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnElasticNetAlgorithms.py": {
        "CenNnElasticNetAlgorithms.mode": {
            "name": "mode",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNnElasticNetAlgorithms.fit": {
            "name": "fit",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNet.py": {
        "CenNnFullyElasticNet.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "b": [],
                "mu": [],
                "betaExponential": [],
                "tau": [],
                "alpha": [],
                "beta": [],
                "tauLomax": [],
                "properties": []
            }
        },
        "CenNnFullyElasticNet.parameterInfo": {
            "name": "parameterInfo",
            "location": 34,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenNnFullyElasticNet.b": {
            "name": "b",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "CenNnFullyElasticNet.mu": {
            "name": "mu",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "CenNnFullyElasticNet.tau": {
            "name": "tau",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnFullyElasticNet.betaExponential": {
            "name": "betaExponential",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "betaExponential": []
            }
        },
        "CenNnFullyElasticNet.muLomax": {
            "name": "muLomax",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.alpha": {
            "name": "alpha",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "CenNnFullyElasticNet.beta": {
            "name": "beta",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenNnFullyElasticNet.nonNegative": {
            "name": "nonNegative",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.homogenous": {
            "name": "homogenous",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.cond": {
            "name": "cond",
            "location": 118,
            "return": [
                "decompose.distributions.cenNnFullyElasticNetCond.CenNnFullyElasticNetCond"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.shape": {
            "name": "shape",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.latentShape": {
            "name": "latentShape",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNetAlgorithms.py": {
        "CenNnFullyElasticNetAlgorithms.getParameters": {
            "name": "getParameters",
            "location": 15,
            "return": [
                "Tuple[(Any, Dict[(str, Any)], Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.sample": {
            "name": "sample",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.mode": {
            "name": "mode",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.pdf": {
            "name": "pdf",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.fit": {
            "name": "fit",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.llh": {
            "name": "llh",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 116,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNetCond.py": {
        "CenNnFullyElasticNetCond.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "b": [],
                "mu": [],
                "tau": [],
                "betaExponential": [],
                "beta": [],
                "properties": []
            }
        },
        "CenNnFullyElasticNetCond.parameterInfo": {
            "name": "parameterInfo",
            "location": 31,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenNnFullyElasticNetCond.b": {
            "name": "b",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "CenNnFullyElasticNetCond.mu": {
            "name": "mu",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "CenNnFullyElasticNetCond.tau": {
            "name": "tau",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnFullyElasticNetCond.betaExponential": {
            "name": "betaExponential",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "betaExponential": []
            }
        },
        "CenNnFullyElasticNetCond.beta": {
            "name": "beta",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenNnFullyElasticNetCond.nonNegative": {
            "name": "nonNegative",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.homogenous": {
            "name": "homogenous",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.cond": {
            "name": "cond",
            "location": 91,
            "return": [
                "_TCenNnFullyElasticNetCond@@CenNnFullyElasticNetCond@@"
            ],
            "arguments": {
                "self": [
                    "_TCenNnFullyElasticNetCond@@CenNnFullyElasticNetCond@@"
                ]
            }
        },
        "CenNnFullyElasticNetCond.shape": {
            "name": "shape",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.latentShape": {
            "name": "latentShape",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnNormal.py": {
        "CenNnNormal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau": [],
                "properties": []
            }
        },
        "CenNnNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 24,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenNnNormal.mu": {
            "name": "mu",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnNormalAlgorithms.py": {
        "CenNnNormalAlgorithms.sample": {
            "name": "sample",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenNnNormalAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNnNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnNormalAlgorithms.fit": {
            "name": "fit",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnNormalAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnT.py": {
        "CenNnT.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "Psi": [],
                "nu": [],
                "tau": [],
                "properties": []
            }
        },
        "CenNnT.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenNnT.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.Psi": {
            "name": "Psi",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "Psi": []
            }
        },
        "CenNnT.nu": {
            "name": "nu",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "CenNnT.tau": {
            "name": "tau",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnT.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.shape": {
            "name": "shape",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.latentShape": {
            "name": "latentShape",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnTAlgorithms.py": {
        "CenNnTAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenNnTAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNnTAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnTAlgorithms.llh": {
            "name": "llh",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnTAlgorithms.fit": {
            "name": "fit",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNnTAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormal.py": {
        "CenNormal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau": [],
                "properties": []
            }
        },
        "CenNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 24,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenNormal.mu": {
            "name": "mu",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalAlgorithms.py": {
        "CenNormalAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenNormalAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalAlgorithms.fit": {
            "name": "fit",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 50,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOne.py": {
        "CenNormalRankOne.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau0": [],
                "tau1": [],
                "properties": []
            }
        },
        "CenNormalRankOne.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [],
                "latentShape": []
            }
        },
        "CenNormalRankOne.mu": {
            "name": "mu",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.tau0": {
            "name": "tau0",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "tau0": []
            }
        },
        "CenNormalRankOne.tau1": {
            "name": "tau1",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "tau1": []
            }
        },
        "CenNormalRankOne.nonNegative": {
            "name": "nonNegative",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.homogenous": {
            "name": "homogenous",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.cond": {
            "name": "cond",
            "location": 65,
            "return": [
                "_TCenNormalRankOne@@CenNormalRankOne@@"
            ],
            "arguments": {
                "self": [
                    "_TCenNormalRankOne@@CenNormalRankOne@@"
                ]
            }
        },
        "CenNormalRankOne.shape": {
            "name": "shape",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.latentShape": {
            "name": "latentShape",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOneAlgorithms.py": {
        "CenNormalRankOneAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenNormalRankOneAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenNormalRankOneAlgorithms.pdf": {
            "name": "pdf",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalRankOneAlgorithms.fitGamma": {
            "name": "fitGamma",
            "location": 38,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "tau": []
            }
        },
        "CenNormalRankOneAlgorithms.fit": {
            "name": "fit",
            "location": 56,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalRankOneAlgorithms.llh": {
            "name": "llh",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalRankOneAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 101,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOneHeuristicAlgorithms.py": {
        "CenNormalRankOneHeuristicAlgorithms.fit": {
            "name": "fit",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenT.py": {
        "CenT.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "Psi": [],
                "nu": [],
                "tau": [],
                "properties": []
            }
        },
        "CenT.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "CenT.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenTAlgorithms.py": {
        "CenTAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "CenTAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "CenTAlgorithms.pdf": {
            "name": "pdf",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenTAlgorithms.llh": {
            "name": "llh",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenTAlgorithms.fit": {
            "name": "fit",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "CenTAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/chopin2011.py": {
        "updateTensor": {
            "name": "updateTensor",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "mask": [],
                "newValues": []
            }
        },
        "randint": {
            "name": "randint",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "low": [],
                "high": []
            }
        },
        "gather": {
            "name": "gather",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "indexes": []
            }
        },
        "gather_nd": {
            "name": "gather_nd",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "indexes": []
            }
        },
        "count_nonzero": {
            "name": "count_nonzero",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "axis": [],
                "keep_dims": [],
                "dtype": []
            }
        },
        "rejectionSamplingExp": {
            "name": "rejectionSamplingExp",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "rejectionSamplingNorm": {
            "name": "rejectionSamplingNorm",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ppf": {
            "name": "ppf",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "rightTail": {
            "name": "rightTail",
            "location": 121,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "getConsts": {
            "name": "getConsts",
            "location": 132,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "dtype": []
            }
        },
        "twoRegions": {
            "name": "twoRegions",
            "location": 147,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "k": []
            }
        },
        "allOther": {
            "name": "allOther",
            "location": 203,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "k": []
            }
        },
        "chopin": {
            "name": "chopin",
            "location": 273,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "aAll": [],
                "bAll": []
            }
        },
        "rtstdnorm": {
            "name": "rtstdnorm",
            "location": 394,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "aAll": [],
                "bAll": []
            }
        },
        "rtnorm2": {
            "name": "rtnorm2",
            "location": 431,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": [],
                "size": []
            }
        },
        "rtnormFlipped": {
            "name": "rtnormFlipped",
            "location": 488,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": []
            }
        },
        "rtnorm": {
            "name": "rtnorm",
            "location": 507,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": [],
                "nSamples": []
            }
        },
        "rejectionSamplingExp.notStop": {
            "name": "notStop",
            "location": 62,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingExp.body": {
            "name": "body",
            "location": 67,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingNorm.notStop": {
            "name": "notStop",
            "location": 93,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "rejectionSamplingNorm.body": {
            "name": "body",
            "location": 98,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "chopin.notAccepted": {
            "name": "notAccepted",
            "location": 328,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        },
        "chopin.body": {
            "name": "body",
            "location": 331,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        }
    },
    "decompose-master/decompose/distributions/distribution.py": {
        "Properties.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "dtype": [],
                "drawType": [],
                "updateType": [],
                "persistent": []
            }
        },
        "Properties.name": {
            "name": "name",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.dtype": {
            "name": "dtype",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.drawType": {
            "name": "drawType",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.updateType": {
            "name": "updateType",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.persistent": {
            "name": "persistent",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "parameters": [],
                "properties": [],
                "hyperParameters": []
            }
        },
        "Distribution.__init": {
            "name": "__init",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "Distribution.get_parameters": {
            "name": "get_parameters",
            "location": 137,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.set_parameters": {
            "name": "set_parameters",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "Distribution.random": {
            "name": "random",
            "location": 149,
            "return": [
                "_TDistribution@@Distribution@@"
            ],
            "arguments": {
                "self": [
                    "_TDistribution@@Distribution@@"
                ],
                "shape": [],
                "latentShape": [],
                "name": [],
                "dtype": [],
                "drawType": [],
                "updateType": [],
                "persistent": []
            }
        },
        "Distribution.__mul__": {
            "name": "__mul__",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__rmul__": {
            "name": "__rmul__",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Distribution.__getitem__": {
            "name": "__getitem__",
            "location": 236,
            "return": [
                "_TDistribution@@Distribution@@"
            ],
            "arguments": {
                "self": [
                    "_TDistribution@@Distribution@@"
                ],
                "key": []
            }
        },
        "Distribution.parameterInfo": {
            "name": "parameterInfo",
            "location": 270,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shape": [],
                "latentShape": []
            }
        },
        "Distribution.vars": {
            "name": "vars",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parameterName": []
            }
        },
        "Distribution.persistent": {
            "name": "persistent",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.algorithms": {
            "name": "algorithms",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.parameterNames": {
            "name": "parameterNames",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.shape": {
            "name": "shape",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.latentShape": {
            "name": "latentShape",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.dtype": {
            "name": "dtype",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.name": {
            "name": "name",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.nonNegative": {
            "name": "nonNegative",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.drawType": {
            "name": "drawType",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "drawType": []
            }
        },
        "Distribution.updateType": {
            "name": "updateType",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "updateType": []
            }
        },
        "Distribution.homogenous": {
            "name": "homogenous",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.draw": {
            "name": "draw",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.update": {
            "name": "update",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Distribution.cond": {
            "name": "cond",
            "location": 433,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.sample": {
            "name": "sample",
            "location": 447,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "nSamples": []
            }
        },
        "Distribution.mode": {
            "name": "mode",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.fit": {
            "name": "fit",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Distribution.fitLatents": {
            "name": "fitLatents",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Distribution.pdf": {
            "name": "pdf",
            "location": 509,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Distribution.llh": {
            "name": "llh",
            "location": 525,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Distribution.getEstimator": {
            "name": "getEstimator",
            "location": 542,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "distType": [],
                "path": []
            }
        },
        "parameterProperty.__init__": {
            "name": "__init__",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [],
                "fset": [],
                "fdel": [],
                "doc": [],
                "name": []
            }
        },
        "parameterProperty.__set__": {
            "name": "__set__",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "value": []
            }
        },
        "parameterProperty.__get__": {
            "name": "__get__",
            "location": 627,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "objtype": []
            }
        },
        "parameterProperty.__delete__": {
            "name": "__delete__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "parameterProperty.getter": {
            "name": "getter",
            "location": 639,
            "return": [
                "_TparameterProperty@@parameterProperty@@"
            ],
            "arguments": {
                "self": [
                    "_TparameterProperty@@parameterProperty@@"
                ],
                "fget": []
            }
        },
        "parameterProperty.setter": {
            "name": "setter",
            "location": 642,
            "return": [
                "Union[(Callable[([Any], Any)], parameterProperty)]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "parameterProperty.deleter": {
            "name": "deleter",
            "location": 652,
            "return": [
                "_TparameterProperty@@parameterProperty@@"
            ],
            "arguments": {
                "self": [
                    "_TparameterProperty@@parameterProperty@@"
                ],
                "fdel": []
            }
        },
        "Distribution.getEstimator.model_fn": {
            "name": "model_fn",
            "location": 559,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        },
        "parameterProperty.setter.noop": {
            "name": "noop",
            "location": 648,
            "return": [],
            "arguments": {
                "fset": []
            }
        }
    },
    "decompose-master/decompose/distributions/exponential.py": {
        "Exponential.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "beta": [],
                "properties": []
            }
        },
        "Exponential.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "Exponential.beta": {
            "name": "beta",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Exponential.nonNegative": {
            "name": "nonNegative",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exponential.homogenous": {
            "name": "homogenous",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exponential.cond": {
            "name": "cond",
            "location": 49,
            "return": [
                "_TExponential@@Exponential@@"
            ],
            "arguments": {
                "self": [
                    "_TExponential@@Exponential@@"
                ]
            }
        },
        "Exponential.shape": {
            "name": "shape",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exponential.latentShape": {
            "name": "latentShape",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/exponentialAlgorithms.py": {
        "ExponentialAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "ExponentialAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "ExponentialAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "ExponentialAlgorithms.fit": {
            "name": "fit",
            "location": 35,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "ExponentialAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "ExponentialAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 53,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/jumpNormal.py": {
        "JumpNormal.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [],
                "tau": [],
                "nu": [],
                "beta": [],
                "properties": []
            }
        },
        "JumpNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "JumpNormal.mu": {
            "name": "mu",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "JumpNormal.tau": {
            "name": "tau",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "JumpNormal.nu": {
            "name": "nu",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "JumpNormal.beta": {
            "name": "beta",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "JumpNormal.nonNegative": {
            "name": "nonNegative",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.homogenous": {
            "name": "homogenous",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.cond": {
            "name": "cond",
            "location": 79,
            "return": [
                "_TJumpNormal@@JumpNormal@@"
            ],
            "arguments": {
                "self": [
                    "_TJumpNormal@@JumpNormal@@"
                ]
            }
        },
        "JumpNormal.shape": {
            "name": "shape",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.latentShape": {
            "name": "latentShape",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/jumpNormalAlgorithms.py": {
        "JumpNormalAlgorithms.alpha": {
            "name": "alpha",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "JumpNormalAlgorithms.mode": {
            "name": "mode",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "JumpNormalAlgorithms.sample": {
            "name": "sample",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "JumpNormalAlgorithms.logConstant": {
            "name": "logConstant",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "JumpNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "JumpNormalAlgorithms.llh": {
            "name": "llh",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "JumpNormalAlgorithms.fit": {
            "name": "fit",
            "location": 142,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "JumpNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 147,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/laplace.py": {
        "Laplace.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [],
                "beta": [],
                "properties": []
            }
        },
        "Laplace.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "Laplace.mu": {
            "name": "mu",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "Laplace.beta": {
            "name": "beta",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Laplace.nonNegative": {
            "name": "nonNegative",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Laplace.homogenous": {
            "name": "homogenous",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Laplace.cond": {
            "name": "cond",
            "location": 59,
            "return": [
                "_TLaplace@@Laplace@@"
            ],
            "arguments": {
                "self": [
                    "_TLaplace@@Laplace@@"
                ]
            }
        },
        "Laplace.shape": {
            "name": "shape",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Laplace.latentShape": {
            "name": "latentShape",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/laplaceAlgorithms.py": {
        "LaplaceAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "LaplaceAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "LaplaceAlgorithms.pdf": {
            "name": "pdf",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LaplaceAlgorithms.fit": {
            "name": "fit",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LaplaceAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LaplaceAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 48,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/lomax.py": {
        "Lomax.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "alpha": [],
                "beta": [],
                "tau": [],
                "properties": []
            }
        },
        "Lomax.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "Lomax.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lomax.alpha": {
            "name": "alpha",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "Lomax.beta": {
            "name": "beta",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Lomax.tau": {
            "name": "tau",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "Lomax.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lomax.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lomax.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "decompose.distributions.exponential.Exponential"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lomax.shape": {
            "name": "shape",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lomax.latentShape": {
            "name": "latentShape",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/lomaxAlgorithms.py": {
        "LomaxAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "LomaxAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "LomaxAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LomaxAlgorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LomaxAlgorithms.f": {
            "name": "f",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "y": [],
                "beta": [],
                "tn": []
            }
        },
        "LomaxAlgorithms.fit": {
            "name": "fit",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LomaxAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 96,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/nnNormal.py": {
        "NnNormal.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [],
                "tau": [],
                "properties": []
            }
        },
        "NnNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "NnNormal.mu": {
            "name": "mu",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "NnNormal.tau": {
            "name": "tau",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "NnNormal.nonNegative": {
            "name": "nonNegative",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.homogenous": {
            "name": "homogenous",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.cond": {
            "name": "cond",
            "location": 59,
            "return": [
                "_TNnNormal@@NnNormal@@"
            ],
            "arguments": {
                "self": [
                    "_TNnNormal@@NnNormal@@"
                ]
            }
        },
        "NnNormal.shape": {
            "name": "shape",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.latentShape": {
            "name": "latentShape",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/nnNormalAlgorithms.py": {
        "NnNormalAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "NnNormalAlgorithms.mode": {
            "name": "mode",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "NnNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnNormalAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnNormalAlgorithms.gradStep": {
            "name": "gradStep",
            "location": 57,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "mu": [],
                "tau": [],
                "v": [],
                "e": []
            }
        },
        "NnNormalAlgorithms.fit": {
            "name": "fit",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 118,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/nnUniform.py": {
        "NnUniform.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "dummy": [],
                "properties": []
            }
        },
        "NnUniform.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "NnUniform.shape": {
            "name": "shape",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.latentShape": {
            "name": "latentShape",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.dummy": {
            "name": "dummy",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "dummy": []
            }
        },
        "NnUniform.nonNegative": {
            "name": "nonNegative",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.homogenous": {
            "name": "homogenous",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.cond": {
            "name": "cond",
            "location": 57,
            "return": [
                "_TNnUniform@@NnUniform@@"
            ],
            "arguments": {
                "self": [
                    "_TNnUniform@@NnUniform@@"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/nnUniformAlgorithms.py": {
        "NnUniformAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "NnUniformAlgorithms.mode": {
            "name": "mode",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "NnUniformAlgorithms.pdf": {
            "name": "pdf",
            "location": 20,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnUniformAlgorithms.fit": {
            "name": "fit",
            "location": 24,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnUniformAlgorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NnUniformAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 37,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/normal.py": {
        "Normal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [],
                "tau": [],
                "properties": []
            }
        },
        "Normal.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "Normal.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "Normal.tau": {
            "name": "tau",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "Normal.nonNegative": {
            "name": "nonNegative",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Normal.homogenous": {
            "name": "homogenous",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Normal.cond": {
            "name": "cond",
            "location": 58,
            "return": [
                "_TNormal@@Normal@@"
            ],
            "arguments": {
                "self": [
                    "_TNormal@@Normal@@"
                ]
            }
        },
        "Normal.shape": {
            "name": "shape",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Normal.latentShape": {
            "name": "latentShape",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalAlgorithms.py": {
        "NormalAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "NormalAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "NormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NormalAlgorithms.fit": {
            "name": "fit",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NormalAlgorithms.llh": {
            "name": "llh",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "NormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 47,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalCenNnFullyElasticNetCond.py": {
        "NormalCenNnFullyElasticNetCond.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalCenNnFullyElasticNetCond.product": {
            "name": "product",
            "location": 23,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "n0": [],
                "n1": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalExponential.py": {
        "NormalExponential.fromUnordered": {
            "name": "fromUnordered",
            "location": 14,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalExponential.product": {
            "name": "product",
            "location": 23,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "e": []
            }
        },
        "NormalExponential.mu": {
            "name": "mu",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "e": []
            }
        },
        "NormalExponential.tau": {
            "name": "tau",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "e": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalLaplace.py": {
        "NormalLaplace.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [
                "decompose.distributions.jumpNormal.JumpNormal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalLaplace.product": {
            "name": "product",
            "location": 24,
            "return": [
                "decompose.distributions.jumpNormal.JumpNormal"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "l": []
            }
        },
        "NormalLaplace.mu": {
            "name": "mu",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "l": []
            }
        },
        "NormalLaplace.tau": {
            "name": "tau",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "l": []
            }
        },
        "NormalLaplace.nu": {
            "name": "nu",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "l": []
            }
        },
        "NormalLaplace.beta": {
            "name": "beta",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "l": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalNnNormal.py": {
        "NormalNnNormal.fromUnordered": {
            "name": "fromUnordered",
            "location": 12,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalNnNormal.product": {
            "name": "product",
            "location": 21,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "nnn": []
            }
        },
        "NormalNnNormal.mu": {
            "name": "mu",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "nnn": []
            }
        },
        "NormalNnNormal.tau": {
            "name": "tau",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "nnn": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalNnUniform.py": {
        "NormalNnUniform.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalNnUniform.product": {
            "name": "product",
            "location": 24,
            "return": [
                "decompose.distributions.nnNormal.NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        },
        "NormalNnUniform.mu": {
            "name": "mu",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        },
        "NormalNnUniform.tau": {
            "name": "tau",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalNormal.py": {
        "NormalNormal.fromUnordered": {
            "name": "fromUnordered",
            "location": 12,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalNormal.product": {
            "name": "product",
            "location": 20,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": [],
                "n0": [],
                "n1": []
            }
        },
        "NormalNormal.mu": {
            "name": "mu",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n0": [],
                "n1": []
            }
        },
        "NormalNormal.tau": {
            "name": "tau",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n0": [],
                "n1": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalUniform.py": {
        "NormalUniform.fromUnordered": {
            "name": "fromUnordered",
            "location": 14,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "NormalUniform.product": {
            "name": "product",
            "location": 23,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        },
        "NormalUniform.mu": {
            "name": "mu",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        },
        "NormalUniform.tau": {
            "name": "tau",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "u": []
            }
        }
    },
    "decompose-master/decompose/distributions/product.py": {
        "Product.fromUnordered": {
            "name": "fromUnordered",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "Product.productParams": {
            "name": "productParams",
            "location": 17,
            "return": [
                "Dict[(str, decompose.distributions.distribution.Properties)]"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "Product.name": {
            "name": "name",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "Product.homogenous": {
            "name": "homogenous",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "Product.drawType": {
            "name": "drawType",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        },
        "Product.updateType": {
            "name": "updateType",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        }
    },
    "decompose-master/decompose/distributions/productDistLookup.py": {
        "ProductDict.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDict.__getattr__": {
            "name": "__getattr__",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ProductDict.__ProductDict.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDict.__ProductDict.lookup": {
            "name": "lookup",
            "location": 52,
            "return": [
                "Union[(decompose.distributions.jumpNormal.JumpNormal, decompose.distributions.nnNormal.NnNormal, decompose.distributions.normal.Normal)]"
            ],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        }
    },
    "decompose-master/decompose/distributions/properties.py": {},
    "decompose-master/decompose/distributions/t.py": {
        "T.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [],
                "Psi": [],
                "nu": [],
                "tau": [],
                "properties": []
            }
        },
        "T.parameterInfo": {
            "name": "parameterInfo",
            "location": 29,
            "return": [
                "Dict[(str, Tuple[(Any, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "T.mu": {
            "name": "mu",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "T.Psi": {
            "name": "Psi",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "Psi": []
            }
        },
        "T.nu": {
            "name": "nu",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "T.tau": {
            "name": "tau",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "T.nonNegative": {
            "name": "nonNegative",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.homogenous": {
            "name": "homogenous",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.cond": {
            "name": "cond",
            "location": 80,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.shape": {
            "name": "shape",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.latentShape": {
            "name": "latentShape",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/tAlgorithms.py": {
        "TAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "TAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "TAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "TAlgorithms.llh": {
            "name": "llh",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "TAlgorithms.nuStep": {
            "name": "nuStep",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "nu": [],
                "n": [],
                "delta": [],
                "p": []
            }
        },
        "TAlgorithms.fit": {
            "name": "fit",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "TAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 84,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/tfppf.py": {
        "tfppf": {
            "name": "tfppf",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "y0": []
            }
        },
        "polevl": {
            "name": "polevl",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "coef": []
            }
        }
    },
    "decompose-master/decompose/distributions/trnorm.py": {
        "updateTensor": {
            "name": "updateTensor",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "mask": [],
                "newValues": []
            }
        },
        "randint": {
            "name": "randint",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "low": [],
                "high": []
            }
        },
        "gather": {
            "name": "gather",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "indexes": []
            }
        },
        "gather_nd": {
            "name": "gather_nd",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "indexes": []
            }
        },
        "count_nonzero": {
            "name": "count_nonzero",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "axis": [],
                "keep_dims": [],
                "dtype": []
            }
        },
        "rejectionSamplingExp": {
            "name": "rejectionSamplingExp",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "rejectionSamplingNorm": {
            "name": "rejectionSamplingNorm",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ppf": {
            "name": "ppf",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "rightTail": {
            "name": "rightTail",
            "location": 121,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "getConsts": {
            "name": "getConsts",
            "location": 132,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "dtype": []
            }
        },
        "twoRegions": {
            "name": "twoRegions",
            "location": 147,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "k": []
            }
        },
        "allOther": {
            "name": "allOther",
            "location": 203,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "k": []
            }
        },
        "chopin": {
            "name": "chopin",
            "location": 273,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "aAll": [],
                "bAll": []
            }
        },
        "rtstdnorm": {
            "name": "rtstdnorm",
            "location": 394,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "aAll": [],
                "bAll": []
            }
        },
        "rtnorm2": {
            "name": "rtnorm2",
            "location": 431,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": [],
                "size": []
            }
        },
        "rtnormFlipped": {
            "name": "rtnormFlipped",
            "location": 488,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": [],
                "size": []
            }
        },
        "rtnorm": {
            "name": "rtnorm",
            "location": 507,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "mu": [],
                "sigma": [],
                "size": []
            }
        },
        "rejectionSamplingExp.notStop": {
            "name": "notStop",
            "location": 62,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingExp.body": {
            "name": "body",
            "location": 67,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingNorm.notStop": {
            "name": "notStop",
            "location": 93,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "rejectionSamplingNorm.body": {
            "name": "body",
            "location": 98,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "chopin.notAccepted": {
            "name": "notAccepted",
            "location": 328,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        },
        "chopin.body": {
            "name": "body",
            "location": 331,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        }
    },
    "decompose-master/decompose/distributions/uniform.py": {
        "Uniform.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "dummy": [],
                "properties": []
            }
        },
        "Uniform.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "Dict[(str, Tuple[(_T0, bool)])]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "_T0@@"
                ],
                "latentShape": []
            }
        },
        "Uniform.shape": {
            "name": "shape",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Uniform.latentShape": {
            "name": "latentShape",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Uniform.dummy": {
            "name": "dummy",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "dummy": []
            }
        },
        "Uniform.nonNegative": {
            "name": "nonNegative",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Uniform.homogenous": {
            "name": "homogenous",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Uniform.cond": {
            "name": "cond",
            "location": 57,
            "return": [
                "_TUniform@@Uniform@@"
            ],
            "arguments": {
                "self": [
                    "_TUniform@@Uniform@@"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/uniformAlgorithms.py": {
        "UniformAlgorithms.sample": {
            "name": "sample",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "nSamples": []
            }
        },
        "UniformAlgorithms.mode": {
            "name": "mode",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "UniformAlgorithms.pdf": {
            "name": "pdf",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "UniformAlgorithms.fit": {
            "name": "fit",
            "location": 23,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "UniformAlgorithms.llh": {
            "name": "llh",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "UniformAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 33,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/__init__.py": {},
    "decompose-master/decompose/distributions/tests/test_cenDoubleLomaxAlgorithms.py": {
        "test_cenDoubleLomax_sample": {
            "name": "test_cenDoubleLomax_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_cenDoubleLomax_mode": {
            "name": "test_cenDoubleLomax_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_pdf": {
            "name": "test_cenDoubleLomax_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_llh": {
            "name": "test_cenDoubleLomax_llh",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_fit": {
            "name": "test_cenDoubleLomax_fit",
            "location": 151,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenLaplaceAlgorithms.py": {
        "test_cenLaplace_fit": {
            "name": "test_cenLaplace_fit",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnFullyElasticNetAlgorithms.py": {
        "test_cenNnFullyElasticNet_sample": {
            "name": "test_cenNnFullyElasticNet_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnNormalAlgorithms.py": {
        "test_cenNnNormal_fit": {
            "name": "test_cenNnNormal_fit",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnTAlgorithms.py": {
        "test_t_sample": {
            "name": "test_t_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_t_mode": {
            "name": "test_t_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_pdf": {
            "name": "test_t_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_llh": {
            "name": "test_t_llh",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 148,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNormalAlgorithms.py": {
        "test_cenNormal_fit": {
            "name": "test_cenNormal_fit",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenTAlgorithms.py": {
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_exponentialAlgorithms.py": {
        "test_exponential_sample": {
            "name": "test_exponential_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_exponential_mode": {
            "name": "test_exponential_mode",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_pdf": {
            "name": "test_exponential_pdf",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_llh": {
            "name": "test_exponential_llh",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_fit": {
            "name": "test_exponential_fit",
            "location": 90,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_laplaceAlgorithms.py": {
        "test_laplace_sample": {
            "name": "test_laplace_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_laplace_mode": {
            "name": "test_laplace_mode",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_pdf": {
            "name": "test_laplace_pdf",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_llh": {
            "name": "test_laplace_llh",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_fit": {
            "name": "test_laplace_fit",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_lomaxAlgorithms.py": {
        "test_lomax_sample": {
            "name": "test_lomax_sample",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_lomax_mode": {
            "name": "test_lomax_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_pdf": {
            "name": "test_lomax_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_llh": {
            "name": "test_lomax_llh",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_fit": {
            "name": "test_lomax_fit",
            "location": 150,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_nnNormalAlgorithms.py": {
        "test_nnNormal_fit": {
            "name": "test_nnNormal_fit",
            "location": 131,
            "return": [],
            "arguments": {
                "dtype": []
            }
        }
    },
    "decompose-master/decompose/distributions/tests/test_normalAlgorithms.py": {
        "test_normal_sample": {
            "name": "test_normal_sample",
            "location": 12,
            "return": [],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_normal_mode": {
            "name": "test_normal_mode",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_normal_pdf": {
            "name": "test_normal_pdf",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_normal_llh": {
            "name": "test_normal_llh",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_normal_fit": {
            "name": "test_normal_fit",
            "location": 109,
            "return": [],
            "arguments": {
                "device": [],
                "dtype": []
            }
        }
    },
    "decompose-master/decompose/distributions/tests/test_tAlgorithms.py": {
        "test_t_sample": {
            "name": "test_t_sample",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_t_mode": {
            "name": "test_t_mode",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_pdf": {
            "name": "test_t_pdf",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_llh": {
            "name": "test_t_llh",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 135,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/__init__.py": {},
    "decompose-master/decompose/likelihoods/allSpecificNormal2dLikelihood.py": {
        "AllSpecificNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "AllSpecificNormal2dLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AllSpecificNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllSpecificNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "AllSpecificNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "AllSpecificNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "AllSpecificNormal2dLikelihood.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "AllSpecificNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 62,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/cvNormal2dLikelihood.py": {
        "CVNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "cv": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "CVNormal2dLikelihood.init": {
            "name": "init",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CVNormal2dLikelihood.cv": {
            "name": "cv",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.observedMask": {
            "name": "observedMask",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.trainMask": {
            "name": "trainMask",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.testMask": {
            "name": "testMask",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.testResiduals": {
            "name": "testResiduals",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.trainResiduals": {
            "name": "trainResiduals",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.update": {
            "name": "update",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 106,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/cvNormalNdLikelihood.py": {
        "CVNormalNdLikelihood.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "cv": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "CVNormalNdLikelihood.init": {
            "name": "init",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CVNormalNdLikelihood.cv": {
            "name": "cv",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.observedMask": {
            "name": "observedMask",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.trainMask": {
            "name": "trainMask",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.testMask": {
            "name": "testMask",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.residuals": {
            "name": "residuals",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.testResiduals": {
            "name": "testResiduals",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.trainResiduals": {
            "name": "trainResiduals",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.llh": {
            "name": "llh",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.loss": {
            "name": "loss",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.update": {
            "name": "update",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "CVNormalNdLikelihood.outterTensorProduct": {
            "name": "outterTensorProduct",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Us": []
            }
        },
        "CVNormalNdLikelihood.calcB": {
            "name": "calcB",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mask": [],
                "UmfOutter": [],
                "f": [],
                "F": []
            }
        },
        "CVNormalNdLikelihood.prepVars": {
            "name": "prepVars",
            "location": 129,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/likelihood.py": {
        "Likelihood.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": []
            }
        },
        "Likelihood.prepVars": {
            "name": "prepVars",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        },
        "Likelihood.lhUfk": {
            "name": "lhUfk",
            "location": 22,
            "return": [
                "decompose.distributions.normal.Normal"
            ],
            "arguments": {
                "self": [],
                "Uf": [],
                "prepVars": [],
                "f": [],
                "k": []
            }
        },
        "Likelihood.update": {
            "name": "update",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Likelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.init": {
            "name": "init",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Likelihood.llh": {
            "name": "llh",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Likelihood.loss": {
            "name": "loss",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Likelihood.M": {
            "name": "M",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.F": {
            "name": "F",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.K": {
            "name": "K",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.id": {
            "name": "id",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/normal2dLikelihood.py": {
        "Normal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "Normal2dLikelihood.init": {
            "name": "init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Normal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Normal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Normal2dLikelihood.llh": {
            "name": "llh",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Normal2dLikelihood.loss": {
            "name": "loss",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Normal2dLikelihood.update": {
            "name": "update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "Normal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 60,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/normalNdLikelihood.py": {
        "NormalNdLikelihood.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "NormalNdLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "NormalNdLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalNdLikelihood.residuals": {
            "name": "residuals",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "NormalNdLikelihood.llh": {
            "name": "llh",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "NormalNdLikelihood.loss": {
            "name": "loss",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "NormalNdLikelihood.update": {
            "name": "update",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "NormalNdLikelihood.outterTensorProduct": {
            "name": "outterTensorProduct",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Us": []
            }
        },
        "NormalNdLikelihood.prepVars": {
            "name": "prepVars",
            "location": 69,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/specificNormal2dLikelihood.py": {
        "SpecificNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [],
                "tau": [],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "SpecificNormal2dLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SpecificNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "SpecificNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "SpecificNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "SpecificNormal2dLikelihood.update": {
            "name": "update",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": []
            }
        },
        "SpecificNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 60,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "U": [],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/__init__.py": {},
    "decompose-master/decompose/likelihoods/tests/test_normal2dLikelihood.py": {
        "f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "updateType": {
            "name": "updateType",
            "location": 22,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_residuals": {
            "name": "test_residuals",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_loss": {
            "name": "test_loss",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_llh": {
            "name": "test_llh",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": []
            }
        },
        "test_prepVars": {
            "name": "test_prepVars",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "f": [],
                "dtype": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "f": [],
                "updateType": [],
                "dtype": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/tests/__init__.py": {},
    "decompose-master/decompose/models/tensorFactorisation.py": {
        "parameterProperty.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [],
                "fset": [],
                "fdel": [],
                "doc": [],
                "name": []
            }
        },
        "parameterProperty.__set__": {
            "name": "__set__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "values": []
            }
        },
        "parameterProperty.__get__": {
            "name": "__get__",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "objtype": []
            }
        },
        "parameterProperty.__delete__": {
            "name": "__delete__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "parameterProperty.getter": {
            "name": "getter",
            "location": 85,
            "return": [
                "_TparameterProperty@@parameterProperty@@"
            ],
            "arguments": {
                "self": [
                    "_TparameterProperty@@parameterProperty@@"
                ],
                "fget": []
            }
        },
        "parameterProperty.setter": {
            "name": "setter",
            "location": 88,
            "return": [
                "Union[(Callable[([Any], Any)], parameterProperty)]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "parameterProperty.deleter": {
            "name": "deleter",
            "location": 98,
            "return": [
                "_TparameterProperty@@parameterProperty@@"
            ],
            "arguments": {
                "self": [
                    "_TparameterProperty@@parameterProperty@@"
                ],
                "fdel": []
            }
        },
        "TensorFactorisation.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "priorU": [],
                "likelihood": [],
                "dtype": [],
                "stopCriterion": [],
                "phase": [],
                "noiseUniformity": [],
                "transform": []
            }
        },
        "TensorFactorisation.random": {
            "name": "random",
            "location": 151,
            "return": [
                "_TTensorFactorisation@@TensorFactorisation@@"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TTensorFactorisation]"
                ],
                "priorU": [],
                "likelihood": [],
                "M": [],
                "K": [],
                "dtype": [],
                "phase": [],
                "stopCriterion": [],
                "noiseUniformity": [],
                "transform": []
            }
        },
        "TensorFactorisation.transform": {
            "name": "transform",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.noiseUniformity": {
            "name": "noiseUniformity",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.U": {
            "name": "U",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "TensorFactorisation.update": {
            "name": "update",
            "location": 203,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.updateTrain": {
            "name": "updateTrain",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.updateTransform": {
            "name": "updateTransform",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.rescale": {
            "name": "rescale",
            "location": 242,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "_T0@@"
                ],
                "fNonUnit": []
            }
        },
        "TensorFactorisation.__setEm": {
            "name": "__setEm",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.__setBcd": {
            "name": "__setBcd",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.loss": {
            "name": "loss",
            "location": 286,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.llh": {
            "name": "llh",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.llhIndividual": {
            "name": "llhIndividual",
            "location": 308,
            "return": [
                "Tuple[(Any, Any, list, list)]"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.type": {
            "name": "type",
            "location": 330,
            "return": [
                "builtins.type[TensorFactorisation]"
            ],
            "arguments": {}
        },
        "TensorFactorisation.id": {
            "name": "id",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.__model": {
            "name": "__model",
            "location": 342,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "priorTypes": [],
                "M": [],
                "K": [],
                "stopCriterion": [],
                "phase": [],
                "dtype": [],
                "reuse": [],
                "isFullyObserved": [],
                "cv": [],
                "transform": [],
                "noiseUniformity": [],
                "suffix": []
            }
        },
        "TensorFactorisation.__estimatorSpec": {
            "name": "__estimatorSpec",
            "location": 429,
            "return": [],
            "arguments": {
                "cls": [],
                "mode": [],
                "features": [],
                "device": [],
                "isFullyObserved": [],
                "priors": [],
                "K": [],
                "stopCriterionInit": [],
                "stopCriterionEM": [],
                "stopCriterionBCD": [],
                "cv": [],
                "path": [],
                "noiseUniformity": [],
                "transform": [],
                "dtype": []
            }
        },
        "TensorFactorisation.getEstimator": {
            "name": "getEstimator",
            "location": 564,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[TensorFactorisation]"
                ],
                "priors": [],
                "K": [],
                "dtype": [],
                "isFullyObserved": [],
                "noiseUniformity": [],
                "stopCriterionInit": [],
                "stopCriterionEM": [],
                "stopCriterionBCD": [],
                "path": [],
                "device": [],
                "cv": []
            }
        },
        "TensorFactorisation.getTransformEstimator": {
            "name": "getTransformEstimator",
            "location": 591,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[TensorFactorisation]"
                ],
                "priors": [],
                "K": [],
                "chptFile": [],
                "dtype": [],
                "noiseUniformity": [],
                "stopCriterionInit": [],
                "stopCriterionEM": [],
                "stopCriterionBCD": [],
                "path": [],
                "device": []
            }
        },
        "parameterProperty.setter.noop": {
            "name": "noop",
            "location": 94,
            "return": [],
            "arguments": {
                "fset": []
            }
        },
        "TensorFactorisation.getEstimator.model_fn": {
            "name": "model_fn",
            "location": 574,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        },
        "TensorFactorisation.getTransformEstimator.model_fn": {
            "name": "model_fn",
            "location": 611,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        }
    },
    "decompose-master/decompose/models/__init__.py": {},
    "decompose-master/decompose/models/tests/__init__.py": {},
    "decompose-master/decompose/postU/postU.py": {
        "PostU.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "likelihood": [],
                "prior": [],
                "f": []
            }
        },
        "PostU.f": {
            "name": "f",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostU.prior": {
            "name": "prior",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostU.updateUf": {
            "name": "updateUf",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "Uf": [],
                "Ufk": [],
                "k": []
            }
        },
        "PostU.update": {
            "name": "update",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": [],
                "transform": []
            }
        },
        "PostU.updateK": {
            "name": "updateK",
            "location": 57,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "prepVars": [],
                "U": [
                    "_T2@@"
                ]
            }
        },
        "PostU.update.cond": {
            "name": "cond",
            "location": 45,
            "return": [],
            "arguments": {
                "k": [],
                "U": []
            }
        },
        "PostU.update.body": {
            "name": "body",
            "location": 48,
            "return": [],
            "arguments": {
                "k": [],
                "U": []
            }
        }
    },
    "decompose-master/decompose/postU/__init__.py": {},
    "decompose-master/decompose/postU/tests/test_postU.py": {
        "f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "updateType": {
            "name": "updateType",
            "location": 24,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "f": [],
                "dtype": []
            }
        }
    },
    "decompose-master/decompose/postU/tests/__init__.py": {},
    "decompose-master/decompose/stopCriterions/llhImprovementThreshold.py": {
        "LlhImprovementThreshold.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhImprovementThreshold": []
            }
        },
        "LlhImprovementThreshold.init": {
            "name": "init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "LlhImprovementThreshold.update": {
            "name": "update",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        },
        "LlhImprovementThreshold.stopVar": {
            "name": "stopVar",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LlhImprovementThreshold.llhImprovementThreshold": {
            "name": "llhImprovementThreshold",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/llhStall.py": {
        "LlhStall.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nStalledIterationsThreshold": []
            }
        },
        "LlhStall.init": {
            "name": "init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "LlhStall.update": {
            "name": "update",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        },
        "LlhStall.stopVar": {
            "name": "stopVar",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/nIterations.py": {
        "NIterations.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nIterations": []
            }
        },
        "NIterations.init": {
            "name": "init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "NIterations.update": {
            "name": "update",
            "location": 23,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        },
        "NIterations.stopVar": {
            "name": "stopVar",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/stopCriterion.py": {
        "StopCriterion.init": {
            "name": "init",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "NoStop.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStop.init": {
            "name": "init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "NoStop.update": {
            "name": "update",
            "location": 25,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": []
            }
        },
        "NoStop.stopVar": {
            "name": "stopVar",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StopHook.after_run": {
            "name": "after_run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [],
                "run_values": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/__init__.py": {},
    "decompose-master/decompose/tests/fixtures.py": {
        "device": {
            "name": "device",
            "location": 7,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "dtype": {
            "name": "dtype",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "decompose-master/decompose/tests/test_all_priors.py": {
        "PriorDistribution": {
            "name": "PriorDistribution",
            "location": 34,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_all_priors": {
            "name": "test_all_priors",
            "location": 42,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "PriorDistribution": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 14,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_all_het_noise.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 16,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_cv.py": {
        "test_sklearn_cv": {
            "name": "test_sklearn_cv",
            "location": 15,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_cv_tensor.py": {
        "test_sklearn_cv": {
            "name": "test_sklearn_cv",
            "location": 15,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_het_noise.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 16,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_tensor.py": {
        "test_sklearn_tensor": {
            "name": "test_sklearn_tensor",
            "location": 14,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/__init__.py": {},
    "decompose-master/docs/source/conf.py": {}
}
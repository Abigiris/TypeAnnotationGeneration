{
    "deployment-master/ansible/plugins/filter/aws_filters.py": {
        "normalize_ec2_tags": {
            "name": "normalize_ec2_tags",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "normalize_s3_bucket_name": {
            "name": "normalize_s3_bucket_name",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "wrap_elements_in_quotes": {
            "name": "wrap_elements_in_quotes",
            "location": 12,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "list": []
            }
        },
        "FilterModule.filters": {
            "name": "filters",
            "location": 22,
            "return": [
                "Dict[(str, Callable)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deployment-master/ansible/plugins/filter/zip_with_keys.py": {
        "zip_with_keys": {
            "name": "zip_with_keys",
            "location": 1,
            "return": [
                "dict"
            ],
            "arguments": {
                "values": [],
                "keys": []
            }
        },
        "FilterModule.filters": {
            "name": "filters",
            "location": 10,
            "return": [
                "Dict[(str, Callable[([Any, Any], Any)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "deployment-master/ansible/plugins/lookup/pass.py": {
        "LookupModule.run": {
            "name": "run",
            "location": 12,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "terms": [],
                "varibles": []
            }
        }
    },
    "deployment-master/aws/lambda/python/log-anonymiser/lambda.py": {
        "handler": {
            "name": "handler",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "LogCleaner.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "LogCleaner.anonymised_ip": {
            "name": "anonymised_ip",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "LogCleaner.parse_header": {
            "name": "parse_header",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "LogCleaner.parse_line": {
            "name": "parse_line",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "LogCleaner.parse_file": {
            "name": "parse_file",
            "location": 107,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "CompressedLogCleaner.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "CompressedLogCleaner.parse_file": {
            "name": "parse_file",
            "location": 125,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        }
    },
    "deployment-master/scripts/update/cli.py": {
        "stamp_time": {
            "name": "stamp_time",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "init_command": {
            "name": "init_command",
            "location": 47,
            "return": [],
            "arguments": {
                "rsf_file": [],
                "phase": []
            }
        },
        "empty_command": {
            "name": "empty_command",
            "location": 71,
            "return": [],
            "arguments": {
                "register_id": [],
                "phase": []
            }
        },
        "data_command": {
            "name": "data_command",
            "location": 123,
            "return": [],
            "arguments": {
                "xsv_file": [],
                "rsf_file": [],
                "timestamp": [],
                "phase": []
            }
        },
        "context_command": {
            "name": "context_command",
            "location": 165,
            "return": [],
            "arguments": {
                "ctx": [],
                "key": [],
                "value": [],
                "rsf_file": [],
                "phase": []
            }
        },
        "schema_command": {
            "name": "schema_command",
            "location": 211,
            "return": [],
            "arguments": {
                "ctx": [],
                "attr_id": [],
                "value": [],
                "rsf_file": [],
                "phase": []
            }
        },
        "publish_patch": {
            "name": "publish_patch",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "patch": [],
                "register": [],
                "rsf_file": [],
                "phase": []
            }
        },
        "publish_register": {
            "name": "publish_register",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "register": [],
                "rsf_file": [],
                "phase": []
            }
        },
        "orj_url": {
            "name": "orj_url",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "uid": [],
                "phase": []
            }
        },
        "push_patch": {
            "name": "push_patch",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "patch": [],
                "url": [],
                "path": []
            }
        },
        "passwordstore": {
            "name": "passwordstore",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        },
        "pass_path": {
            "name": "pass_path",
            "location": 351,
            "return": [
                "str"
            ],
            "arguments": {
                "phase": [],
                "uid": []
            }
        },
        "apply_patch": {
            "name": "apply_patch",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "patch": [],
                "rsf_file": []
            }
        }
    },
    "deployment-master/scripts/update/__init__.py": {}
}
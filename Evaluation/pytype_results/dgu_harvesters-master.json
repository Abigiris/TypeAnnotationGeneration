{
    "dgu_harvesters-master/setup.py": {},
    "dgu_harvesters-master/dgu/__init__.py": {},
    "dgu_harvesters-master/dgu/harvesters/base.py": {
        "get_request_session": {
            "name": "get_request_session",
            "location": 6,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {}
        },
        "HarvesterBase.records": {
            "name": "records",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HarvesterBase.configure": {
            "name": "configure",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "HarvesterBase.get_session": {
            "name": "get_session",
            "location": 55,
            "return": [
                "requests.sessions.Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "HarvesterBase.get_organisation": {
            "name": "get_organisation",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HarvesterBase.get_url": {
            "name": "get_url",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HarvesterBase.get_remote_organisations": {
            "name": "get_remote_organisations",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HarvesterBase.get_user": {
            "name": "get_user",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.convert": {
            "name": "convert",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Dataset.validate": {
            "name": "validate",
            "location": 105,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgu_harvesters-master/dgu/harvesters/loader.py": {
        "known_harvester_types": {
            "name": "known_harvester_types",
            "location": 15,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {}
        },
        "get_harvester": {
            "name": "get_harvester",
            "location": 18,
            "return": [
                "Optional[Type[Union[(dgu.harvesters.ckan.CKANHarvester, dgu.harvesters.data_json.DataJsonHarvester)]]]"
            ],
            "arguments": {
                "name": []
            }
        },
        "get_configured_harvester_from_task": {
            "name": "get_configured_harvester_from_task",
            "location": 21,
            "return": [
                "Optional[Union[(dgu.harvesters.ckan.CKANHarvester, dgu.harvesters.data_json.DataJsonHarvester)]]"
            ],
            "arguments": {
                "task": []
            }
        }
    },
    "dgu_harvesters-master/dgu/harvesters/__init__.py": {},
    "dgu_harvesters-master/dgu/harvesters/ckan/__init__.py": {
        "CKANHarvester.records": {
            "name": "records",
            "location": 8,
            "return": [
                "Generator[(None, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CKANDataset.convert": {
            "name": "convert",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "dgu_harvesters-master/dgu/harvesters/data_json/__init__.py": {
        "DataJsonHarvester.records": {
            "name": "records",
            "location": 10,
            "return": [
                "Generator[(DataJsonDataset, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataJsonDataset.convert": {
            "name": "convert",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "dgu_harvesters-master/tests/test_base.py": {
        "test_configure_base": {
            "name": "test_configure_base",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgu_harvesters-master/tests/test_data.py": {},
    "dgu_harvesters-master/tests/test_dataset.py": {
        "test_dataset_init": {
            "name": "test_dataset_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_sublass_init": {
            "name": "test_dataset_sublass_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDataset.convert": {
            "name": "convert",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "dgu_harvesters-master/tests/test_data_json.py": {
        "test_harvest_camden": {
            "name": "test_harvest_camden",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgu_harvesters-master/tests/test_jobs.py": {},
    "dgu_harvesters-master/tests/test_loader.py": {
        "test_known": {
            "name": "test_known",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_ckan": {
            "name": "test_load_ckan",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_datajson": {
            "name": "test_load_datajson",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_from_task": {
            "name": "test_load_from_task",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgu_harvesters-master/tests/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uris": {
            "name": "test_uris",
            "location": 7,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {}
        }
    }
}
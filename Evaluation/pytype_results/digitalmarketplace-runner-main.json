{
    "digitalmarketplace-runner-main/main.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "digitalmarketplace-runner-main/setup.py": {},
    "digitalmarketplace-runner-main/tasks.py": {
        "brew": {
            "name": "brew",
            "location": 17,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "install": {
            "name": "install",
            "location": 44,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "config": {
            "name": "config",
            "location": 50,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 56,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "data": {
            "name": "data",
            "location": 62,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "run": {
            "name": "run",
            "location": 68,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "rebuild": {
            "name": "rebuild",
            "location": 74,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "docker_compose_env": {
            "name": "docker_compose_env",
            "location": 79,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "black": {
            "name": "black",
            "location": 85,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_black": {
            "name": "test_black",
            "location": 91,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_pyflakes": {
            "name": "test_pyflakes",
            "location": 97,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test_mypy": {
            "name": "test_mypy",
            "location": 103,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test": {
            "name": "test",
            "location": 109,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "git_get_default_branch_from_remote": {
            "name": "git_get_default_branch_from_remote",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "c": [],
                "repo": [
                    "pathlib.Path"
                ],
                "remote": []
            }
        },
        "git_get_default_branch": {
            "name": "git_get_default_branch",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "c": [],
                "repo": [
                    "pathlib.Path"
                ],
                "remote": []
            }
        },
        "git_checkout_and_pull": {
            "name": "git_checkout_and_pull",
            "location": 158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "c": [],
                "repo": [
                    "pathlib.Path"
                ],
                "branch": [],
                "remote": []
            }
        },
        "update_code": {
            "name": "update_code",
            "location": 195,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "digitalmarketplace-runner-main/dmrunner/process.py": {
        "background_services": {
            "name": "background_services",
            "location": 266,
            "return": [],
            "arguments": {
                "logger": [],
                "docker_compose_folder": [],
                "clean": []
            }
        },
        "blank_context": {
            "name": "blank_context",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "DMExecutable._get_clean_env": {
            "name": "_get_clean_env",
            "location": 29,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMExecutable._log": {
            "name": "_log",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_entry": [],
                "log_name": [],
                "attach": []
            }
        },
        "DMServices.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [],
                "docker_compose_folder": [
                    "Union[(str, os.PathLike)]"
                ],
                "docker_arg": [],
                "log_name": []
            }
        },
        "DMServices._get_docker_compose_filepaths": {
            "name": "_get_docker_compose_filepaths",
            "location": 59,
            "return": [
                "List[Union[(str, os.PathLike)]]"
            ],
            "arguments": {
                "docker_compose_folder": [
                    "Union[(str, os.PathLike)]"
                ]
            }
        },
        "DMServices._get_docker_compose_command": {
            "name": "_get_docker_compose_command",
            "location": 69,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "docker_compose_filepaths": [
                    "Sequence[Union[(str, os.PathLike)]]"
                ],
                "docker_args": [
                    "Sequence[str]"
                ]
            }
        },
        "DMServices.build_services": {
            "name": "build_services",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "docker_compose_filepaths": [
                    "Sequence[Union[(str, os.PathLike)]]"
                ]
            }
        },
        "DMServices.is_nginx_up": {
            "name": "is_nginx_up",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DMServices.is_elasticsearch_up": {
            "name": "is_elasticsearch_up",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DMServices.is_postgres_up": {
            "name": "is_postgres_up",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DMServices.is_redis_up": {
            "name": "is_redis_up",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DMServices.is_localstack_up": {
            "name": "is_localstack_up",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "DMServices.services_healthcheck": {
            "name": "services_healthcheck",
            "location": 142,
            "return": [
                "Tuple[(bool, Dict[(str, Any)])]"
            ],
            "arguments": {
                "shutdown_event": [],
                "check_once": []
            }
        },
        "DMServices._run_in_thread": {
            "name": "_run_in_thread",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMServices.blocking_healthcheck": {
            "name": "blocking_healthcheck",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shutdown_event": []
            }
        },
        "DMServices.run": {
            "name": "run",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMServices.wait": {
            "name": "wait",
            "location": 252,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "interrupt": []
            }
        },
        "DMProcess.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "logger": [],
                "app_command": []
            }
        },
        "DMProcess._get_clean_env": {
            "name": "_get_clean_env",
            "location": 304,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMProcess._get_command": {
            "name": "_get_command",
            "location": 313,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "app_command": []
            }
        },
        "DMProcess._run_in_thread": {
            "name": "_run_in_thread",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_command": []
            }
        },
        "DMProcess.run": {
            "name": "run",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_command": []
            }
        },
        "DMProcess.process_input": {
            "name": "process_input",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_input": []
            }
        },
        "DMProcess.wait": {
            "name": "wait",
            "location": 372,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "digitalmarketplace-runner-main/dmrunner/runner.py": {
        "DMRunner.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "rebuild": [
                    "bool"
                ],
                "config_path": [
                    "str"
                ],
                "nix": [
                    "bool"
                ],
                "settings_path": [
                    "str"
                ]
            }
        },
        "DMRunner._app_repositories": {
            "name": "_app_repositories",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._app_name_width": {
            "name": "_app_name_width",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._prompt_string": {
            "name": "_prompt_string",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._attached_app": {
            "name": "_attached_app",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._inject_credentials": {
            "name": "_inject_credentials",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._get_input_and_pipe_to_target": {
            "name": "_get_input_and_pipe_to_target",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._get_app_name": {
            "name": "_get_app_name",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str"
                ]
            }
        },
        "DMRunner._app_name_completer": {
            "name": "_app_name_completer",
            "location": 250,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "state": [
                    "int"
                ]
            }
        },
        "DMRunner._populate_multiprocessing_components": {
            "name": "_populate_multiprocessing_components",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._check_app_status": {
            "name": "_check_app_status",
            "location": 266,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "loop": []
            }
        },
        "DMRunner._ensure_apps_up": {
            "name": "_ensure_apps_up",
            "location": 309,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "repository_names": [],
                "quiet": []
            }
        },
        "DMRunner.logger": {
            "name": "logger",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_entry": [],
                "log_name": [],
                "log_attach": [],
                "end": []
            }
        },
        "DMRunner._find_matching_apps": {
            "name": "_find_matching_apps",
            "location": 352,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Optional[list]"
                ]
            }
        },
        "DMRunner._start_services": {
            "name": "_start_services",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner._stylize": {
            "name": "_stylize",
            "location": 377,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "DMRunner._get_cleaned_wrapped_and_styled_text": {
            "name": "_get_cleaned_wrapped_and_styled_text",
            "location": 381,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "app_name": []
            }
        },
        "DMRunner.print_out": {
            "name": "print_out",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "app_name": [],
                "end": []
            }
        },
        "DMRunner.run": {
            "name": "run",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner.cmd_switch_logs": {
            "name": "cmd_switch_logs",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "list"
                ]
            }
        },
        "DMRunner.cmd_apps_status": {
            "name": "cmd_apps_status",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner.cmd_apps_branches": {
            "name": "cmd_apps_branches",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner.cmd_restart_down_apps": {
            "name": "cmd_restart_down_apps",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "list"
                ],
                "rebuild": [
                    "bool"
                ]
            }
        },
        "DMRunner.cmd_kill_apps": {
            "name": "cmd_kill_apps",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Optional[list]"
                ],
                "silent_fail": [
                    "bool"
                ]
            }
        },
        "DMRunner.cmd_kill_services": {
            "name": "cmd_kill_services",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner.cmd_frontend_build": {
            "name": "cmd_frontend_build",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selectors": [
                    "Optional[list]"
                ]
            }
        },
        "DMRunner.cmd_environment": {
            "name": "cmd_environment",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DMRunner.shutdown": {
            "name": "shutdown",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DMRunner.process_input": {
            "name": "process_input",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_input": []
            }
        },
        "DMRunner._get_cleaned_wrapped_and_styled_text.pad_name": {
            "name": "pad_name",
            "location": 384,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "digitalmarketplace-runner-main/dmrunner/setup.py": {
        "_setup_config_modifications": {
            "name": "_setup_config_modifications",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": [],
                "config": [],
                "config_path": []
            }
        },
        "_setup_logging_directory": {
            "name": "_setup_logging_directory",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "config": []
            }
        },
        "_setup_check_git_available": {
            "name": "_setup_check_git_available",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": []
            }
        },
        "_setup_check_docker_available": {
            "name": "_setup_check_docker_available",
            "location": 122,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": []
            }
        },
        "_setup_check_node_version": {
            "name": "_setup_check_node_version",
            "location": 175,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": []
            }
        },
        "_setup_download_repos": {
            "name": "_setup_download_repos",
            "location": 203,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": [],
                "config": [],
                "settings": []
            }
        },
        "_setup_check_background_services": {
            "name": "_setup_check_background_services",
            "location": 252,
            "return": [
                "Tuple[(int, bool)]"
            ],
            "arguments": {
                "logger": []
            }
        },
        "_setup_check_postgres_data_if_required": {
            "name": "_setup_check_postgres_data_if_required",
            "location": 287,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": [],
                "settings": [],
                "use_docker_services": [],
                "prompt_delete_existing": []
            }
        },
        "_setup_bootstrap_repositories": {
            "name": "_setup_bootstrap_repositories",
            "location": 356,
            "return": [
                "Any"
            ],
            "arguments": {
                "logger": [
                    "Callable"
                ],
                "config": [
                    "dict"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "_setup_indices": {
            "name": "_setup_indices",
            "location": 387,
            "return": [
                "Any"
            ],
            "arguments": {
                "logger": [
                    "Callable"
                ],
                "config": [
                    "dict"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "_setup_buckets": {
            "name": "_setup_buckets",
            "location": 451,
            "return": [
                "int"
            ],
            "arguments": {
                "logger": [
                    "Callable"
                ],
                "config": [
                    "dict"
                ],
                "settings": [
                    "dict"
                ]
            }
        },
        "setup_and_check_requirements": {
            "name": "setup_and_check_requirements",
            "location": 476,
            "return": [
                "Tuple[(Any, bool, dict)]"
            ],
            "arguments": {
                "logger": [
                    "Callable"
                ],
                "config": [
                    "dict"
                ],
                "config_path": [
                    "str"
                ],
                "settings": [
                    "dict"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "_setup_check_postgres_data_if_required.data_available": {
            "name": "data_available",
            "location": 303,
            "return": [],
            "arguments": {}
        }
    },
    "digitalmarketplace-runner-main/dmrunner/utils.py": {
        "bold": {
            "name": "bold",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "red": {
            "name": "red",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "green": {
            "name": "green",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "get_yes_no_input": {
            "name": "get_yes_no_input",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "logger": [],
                "text": [],
                "default": []
            }
        },
        "group_by_key": {
            "name": "group_by_key",
            "location": 76,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "dictionary": [
                    "Dict[(str, Dict[(str, dict)])]"
                ],
                "key": [
                    "str"
                ],
                "include_missing": []
            }
        },
        "get_app_info": {
            "name": "get_app_info",
            "location": 91,
            "return": [
                "_T3"
            ],
            "arguments": {
                "repo_name": [],
                "config": [],
                "settings": [],
                "container": [
                    "_T3"
                ]
            }
        },
        "nologger": {
            "name": "nologger",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 110,
            "return": [
                "Tuple[(int, dict)]"
            ],
            "arguments": {
                "config_path": [],
                "must_exist": []
            }
        },
        "save_config": {
            "name": "save_config",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "config_path": []
            }
        }
    },
    "digitalmarketplace-runner-main/dmrunner/__init__.py": {}
}
{
    "discord-caravan-master/caravan_bot/caravan_channel.py": {
        "leaders_msg": {
            "name": "leaders_msg",
            "location": 558,
            "return": [
                "str"
            ],
            "arguments": {
                "leaders": [],
                "sep": []
            }
        },
        "user_notifications": {
            "name": "user_notifications",
            "location": 566,
            "return": [],
            "arguments": {
                "receipt": []
            }
        },
        "_": {
            "name": "_",
            "location": 753,
            "return": [],
            "arguments": {
                "receipt": []
            }
        },
        "gen_member_left_server_messages": {
            "name": "gen_member_left_server_messages",
            "location": 669,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "who": [],
                "guests": []
            }
        },
        "gen_next_place_message": {
            "name": "gen_next_place_message",
            "location": 761,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "next_place": [],
                "is_first": []
            }
        },
        "_.gen_sentences": {
            "name": "gen_sentences",
            "location": 574,
            "return": [],
            "arguments": {}
        },
        "CaravanChannel._help.roles": {
            "name": "roles",
            "location": 153,
            "return": [],
            "arguments": {
                "role_iter": [],
                "markdown": []
            }
        },
        "CaravanChannel._notify.get_relevant_author_role": {
            "name": "get_relevant_author_role",
            "location": 506,
            "return": [],
            "arguments": {}
        },
        "_.gen_clauses": {
            "name": "gen_clauses",
            "location": 723,
            "return": [],
            "arguments": {}
        },
        "CaravanChannel._help.gen_help_lines": {
            "name": "gen_help_lines",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "_.gen_stats_clauses": {
            "name": "gen_stats_clauses",
            "location": 697,
            "return": [],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/caravan_model.py": {
        "ensure_unique_places": {
            "name": "ensure_unique_places",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "first_unvisited_index": {
            "name": "first_unvisited_index",
            "location": 639,
            "return": [
                "int"
            ],
            "arguments": {
                "caravan_route": []
            }
        },
        "next_unvisited_place": {
            "name": "next_unvisited_place",
            "location": 647,
            "return": [
                "Any"
            ],
            "arguments": {
                "route": []
            }
        },
        "last_visited_place": {
            "name": "last_visited_place",
            "location": 651,
            "return": [
                "Any"
            ],
            "arguments": {
                "route": []
            }
        },
        "format_member": {
            "name": "format_member",
            "location": 659,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [],
                "guests": []
            }
        },
        "sorted_users": {
            "name": "sorted_users",
            "location": 663,
            "return": [
                "list"
            ],
            "arguments": {
                "users": []
            }
        },
        "format_place": {
            "name": "format_place",
            "location": 667,
            "return": [
                "str"
            ],
            "arguments": {
                "place": []
            }
        },
        "format_route": {
            "name": "format_route",
            "location": 671,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "route": []
            }
        },
        "line_diff": {
            "name": "line_diff",
            "location": 678,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "UpdateReceipt.log": {
            "name": "log",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "LeaderUpdateReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberJoinReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberLeaveReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModeUpdateReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DuplicatePlacesException.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "duplicate_places": []
            }
        },
        "MissingPlacesException.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing_places": []
            }
        },
        "RouteUpdateReceipt.is_reorder_only": {
            "name": "is_reorder_only",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteUpdateReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteAdvancedReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteReversedReceipt.__post_init__": {
            "name": "__post_init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.gen_roles": {
            "name": "gen_roles",
            "location": 225,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "CaravanModel.total_members": {
            "name": "total_members",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.set_leaders": {
            "name": "set_leaders",
            "location": 240,
            "return": [
                "LeaderUpdateReceipt"
            ],
            "arguments": {
                "self": [],
                "leaders": []
            }
        },
        "CaravanModel.set_route": {
            "name": "set_route",
            "location": 279,
            "return": [
                "RouteUpdateReceipt"
            ],
            "arguments": {
                "self": [],
                "new_route": []
            }
        },
        "CaravanModel.add_stops": {
            "name": "add_stops",
            "location": 325,
            "return": [
                "RouteUpdateReceipt"
            ],
            "arguments": {
                "self": [],
                "route_slice": [],
                "append": []
            }
        },
        "CaravanModel.remove_stops": {
            "name": "remove_stops",
            "location": 374,
            "return": [
                "RouteUpdateReceipt"
            ],
            "arguments": {
                "self": [],
                "places_iter": []
            }
        },
        "CaravanModel.start": {
            "name": "start",
            "location": 406,
            "return": [
                "ModeUpdateReceipt"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.stop": {
            "name": "stop",
            "location": 416,
            "return": [
                "ModeUpdateReceipt"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.reset": {
            "name": "reset",
            "location": 426,
            "return": [
                "ModeUpdateReceipt"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.advance": {
            "name": "advance",
            "location": 439,
            "return": [
                "RouteAdvancedReceipt"
            ],
            "arguments": {
                "self": [],
                "skip_reason": []
            }
        },
        "CaravanModel.reverse": {
            "name": "reverse",
            "location": 469,
            "return": [
                "RouteReversedReceipt"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanModel.member_join": {
            "name": "member_join",
            "location": 496,
            "return": [
                "MemberJoinReceipt"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "guests": []
            }
        },
        "CaravanModel.member_leave": {
            "name": "member_leave",
            "location": 531,
            "return": [
                "MemberLeaveReceipt"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "left_server": []
            }
        },
        "CaravanModel.__change_mode": {
            "name": "__change_mode",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "CaravanStop.reset": {
            "name": "reset",
            "location": 594,
            "return": [
                "_TCaravanStop@@CaravanStop@@"
            ],
            "arguments": {
                "self": [
                    "_TCaravanStop@@CaravanStop@@"
                ]
            }
        },
        "CaravanStop.visit": {
            "name": "visit",
            "location": 597,
            "return": [
                "_TCaravanStop@@CaravanStop@@"
            ],
            "arguments": {
                "self": [
                    "_TCaravanStop@@CaravanStop@@"
                ],
                "skip_reason": []
            }
        },
        "CaravanStatistics.from_route": {
            "name": "from_route",
            "location": 611,
            "return": [
                "_TCaravanStatistics@@CaravanStatistics@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCaravanStatistics]"
                ],
                "route": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/client.py": {
        "CaravanClient.__post_init__": {
            "name": "__post_init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanClient._get_all_channels_message": {
            "name": "_get_all_channels_message",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaravanClient._get_all_channels_message.format_server": {
            "name": "format_server",
            "location": 139,
            "return": [],
            "arguments": {
                "guild": []
            }
        },
        "CaravanClient._get_all_channels_message.format_channel": {
            "name": "format_channel",
            "location": 143,
            "return": [],
            "arguments": {
                "channel": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/commands.py": {
        "register": {
            "name": "register",
            "location": 26,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "get_command_name": {
            "name": "get_command_name",
            "location": 95,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "name": [
                    "_T0@@"
                ]
            }
        },
        "register.decorator": {
            "name": "decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "CommandMessage.from_message": {
            "name": "from_message",
            "location": 84,
            "return": [
                "_TCommandMessage@@CommandMessage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCommandMessage]"
                ],
                "message": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/iteration.py": {
        "bucket": {
            "name": "bucket",
            "location": 4,
            "return": [
                "Tuple[(tuple, ...)]"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "unique_product": {
            "name": "unique_product",
            "location": 18,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "choices_iter": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/log.py": {
        "channel_log": {
            "name": "channel_log",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [],
                "level": [],
                "msg": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/members.py": {
        "gen_members": {
            "name": "gen_members",
            "location": 21,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "channel": [],
                "content": []
            }
        },
        "gen_caravan_members": {
            "name": "gen_caravan_members",
            "location": 39,
            "return": [
                "Generator[(CaravanMember, Any, None)]"
            ],
            "arguments": {
                "channel": [],
                "content": []
            }
        },
        "get_guest_count": {
            "name": "get_guest_count",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "content": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/natural_language.py": {
        "join": {
            "name": "join",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "seq": []
            }
        },
        "pluralize": {
            "name": "pluralize",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": [],
                "collection": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/places.py": {
        "Place.maps_link": {
            "name": "maps_link",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Place.lat_long": {
            "name": "lat_long",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Places.__post_init__": {
            "name": "__post_init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Places.from_json": {
            "name": "from_json",
            "location": 48,
            "return": [
                "_TPlaces@@Places@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPlaces]"
                ],
                "path": []
            }
        },
        "Places.from_dict": {
            "name": "from_dict",
            "location": 55,
            "return": [
                "_TPlaces@@Places@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPlaces]"
                ],
                "raw_places": []
            }
        },
        "Places.get_exact": {
            "name": "get_exact",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Places.get_fuzzy": {
            "name": "get_fuzzy",
            "location": 73,
            "return": [
                "Generator[(FuzzyPlace, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "fuzzy_name": [],
                "score_cutoff": [],
                "soft_limit": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/place_graph.py": {
        "shortest_path": {
            "name": "shortest_path",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "graph": []
            }
        },
        "gen_unique_graphs": {
            "name": "gen_unique_graphs",
            "location": 90,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "graph": [],
                "limit": []
            }
        },
        "dijkstra": {
            "name": "dijkstra",
            "location": 154,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "graph": [],
                "cost_calculator": []
            }
        },
        "edge_cost": {
            "name": "edge_cost",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "shortest_path.cached_edge_cost": {
            "name": "cached_edge_cost",
            "location": 38,
            "return": [],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "GraphRow.sort_key": {
            "name": "sort_key",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRow.unique_count": {
            "name": "unique_count",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRow.place_set": {
            "name": "place_set",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRow.duplicate_choices": {
            "name": "duplicate_choices",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphRow.get": {
            "name": "get",
            "location": 82,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "extra_place": []
            }
        },
        "gen_unique_graphs.duplicate_row": {
            "name": "duplicate_row",
            "location": 106,
            "return": [],
            "arguments": {
                "index": [],
                "row_fuzzies": []
            }
        },
        "dijkstra.get_neighbor": {
            "name": "get_neighbor",
            "location": 159,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "dijkstra.gen_reversed_path": {
            "name": "gen_reversed_path",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "GraphRow.duplicate_choices.gen_result": {
            "name": "gen_result",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/roles.py": {},
    "discord-caravan-master/caravan_bot/route.py": {
        "get_caravan_route": {
            "name": "get_caravan_route",
            "location": 17,
            "return": [
                "Tuple[(caravan_model.CaravanStop, ...)]"
            ],
            "arguments": {
                "content": [],
                "all_places": [],
                "fuzzy": []
            }
        },
        "get_caravan_route.ensure_places_are_known": {
            "name": "ensure_places_are_known",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "get_caravan_route.gen_graph": {
            "name": "gen_graph",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "get_caravan_route.gen_stops": {
            "name": "gen_stops",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/sanitize.py": {
        "clean_route": {
            "name": "clean_route",
            "location": 24,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "route": []
            }
        },
        "gen_user_ids": {
            "name": "gen_user_ids",
            "location": 46,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "content": []
            }
        },
        "RouteNode.from_match": {
            "name": "from_match",
            "location": 38,
            "return": [
                "_TRouteNode@@RouteNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRouteNode]"
                ],
                "match": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/__init__.py": {},
    "discord-caravan-master/caravan_bot/__main__.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/pins/exceptions.py": {},
    "discord-caravan-master/caravan_bot/pins/migration.py": {
        "register": {
            "name": "register",
            "location": 48,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "version": []
            }
        },
        "register.decorator": {
            "name": "decorator",
            "location": 49,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/__init__.py": {
        "__import_pin_versions": {
            "name": "__import_pin_versions",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/pins/format/base_pin.py": {
        "BasePin.update_for": {
            "name": "update_for",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePin.content_and_embed": {
            "name": "content_and_embed",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/format/members_pin.py": {
        "content_and_embed": {
            "name": "content_and_embed",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "model": []
            }
        },
        "format_member": {
            "name": "format_member",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": [],
                "guests": []
            }
        },
        "MembersPin.content_and_embed": {
            "name": "content_and_embed",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/format/route_pin.py": {
        "content_and_embed": {
            "name": "content_and_embed",
            "location": 24,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "model": []
            }
        },
        "stop_string": {
            "name": "stop_string",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "stop": []
            }
        },
        "RoutePin.content_and_embed": {
            "name": "content_and_embed",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/format/__init__.py": {},
    "discord-caravan-master/caravan_bot/pins/parse/parse_receipts.py": {},
    "discord-caravan-master/caravan_bot/pins/parse/__init__.py": {},
    "discord-caravan-master/caravan_bot/pins/parse/v1/members_pin.py": {
        "populate_model": {
            "name": "populate_model",
            "location": 10,
            "return": [
                "parse_receipts.MembersParseReceipt"
            ],
            "arguments": {
                "message": [],
                "model": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/parse/v1/route_pin.py": {
        "populate_model": {
            "name": "populate_model",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "model": [],
                "all_places": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/pins/parse/v1/__init__.py": {
        "populate_model": {
            "name": "populate_model",
            "location": 12,
            "return": [
                "Optional[parse_receipts.MembersParseReceipt]"
            ],
            "arguments": {
                "model": [],
                "bot_pins": [],
                "all_places": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_caravan_model.py": {
        "test_leadership": {
            "name": "test_leadership",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route_set": {
            "name": "test_route_set",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route_add_and_remove": {
            "name": "test_route_add_and_remove",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_route_advance_and_reverse": {
            "name": "test_route_advance_and_reverse",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mode_change": {
            "name": "test_mode_change",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_membership": {
            "name": "test_membership",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_roles": {
            "name": "test_gen_roles",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_line_diff": {
            "name": "test_line_diff",
            "location": 761,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "expected_result": []
            }
        },
        "test_leadership.set_and_validate": {
            "name": "set_and_validate",
            "location": 17,
            "return": [],
            "arguments": {
                "leaders": [],
                "expected_receipt": [],
                "expected_members": []
            }
        },
        "test_route_set.p": {
            "name": "p",
            "location": 82,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_route_set.set_and_validate": {
            "name": "set_and_validate",
            "location": 85,
            "return": [],
            "arguments": {
                "new_route": [],
                "expected_receipt": [],
                "expect_reordered": []
            }
        },
        "test_route_add_and_remove.p": {
            "name": "p",
            "location": 145,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_route_add_and_remove.add_and_validate": {
            "name": "add_and_validate",
            "location": 148,
            "return": [],
            "arguments": {
                "route_slice": [],
                "append": [],
                "expected_receipt": []
            }
        },
        "test_route_add_and_remove.remove_and_validate": {
            "name": "remove_and_validate",
            "location": 156,
            "return": [],
            "arguments": {
                "places_iter": [],
                "expected_receipt": []
            }
        },
        "test_route_advance_and_reverse.p": {
            "name": "p",
            "location": 334,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_route_advance_and_reverse.advance_and_validate": {
            "name": "advance_and_validate",
            "location": 337,
            "return": [],
            "arguments": {
                "skip_reason": [],
                "expected_receipt": [],
                "expected_route": []
            }
        },
        "test_route_advance_and_reverse.reverse_and_validate": {
            "name": "reverse_and_validate",
            "location": 342,
            "return": [],
            "arguments": {
                "expected_receipt": [],
                "expected_route": []
            }
        },
        "test_mode_change.p": {
            "name": "p",
            "location": 472,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_mode_change.stop_and_validate": {
            "name": "stop_and_validate",
            "location": 568,
            "return": [],
            "arguments": {
                "expected_next": [],
                "expected_stats": []
            }
        },
        "test_membership.join_and_validate": {
            "name": "join_and_validate",
            "location": 617,
            "return": [],
            "arguments": {
                "member": [],
                "guests": [],
                "expected_receipt": [],
                "expected_members": []
            }
        },
        "test_membership.leave_and_validate": {
            "name": "leave_and_validate",
            "location": 622,
            "return": [],
            "arguments": {
                "member": [],
                "left_server": [],
                "expected_receipt": [],
                "expected_members": []
            }
        },
        "FakeUser.id": {
            "name": "id",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeUser.display_name": {
            "name": "display_name",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeUser._user": {
            "name": "_user",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeUser.permissions_in": {
            "name": "permissions_in",
            "location": 805,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "Users.__getattr__": {
            "name": "__getattr__",
            "location": 813,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_commands.py": {
        "test_valid_command_message_from_message": {
            "name": "test_valid_command_message_from_message",
            "location": 20,
            "return": [],
            "arguments": {
                "msg": [],
                "expected_cmd": [],
                "expected_args": []
            }
        },
        "valid_commands": {
            "name": "valid_commands",
            "location": 42,
            "return": [
                "mock._patch[Dict[(Any, None)]]"
            ],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_iteration.py": {
        "test_bucket": {
            "name": "test_bucket",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unique_product": {
            "name": "test_unique_product",
            "location": 86,
            "return": [],
            "arguments": {
                "choices": [],
                "expected_result": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_natural_language.py": {
        "test_join": {
            "name": "test_join",
            "location": 13,
            "return": [],
            "arguments": {
                "seq": [],
                "expected_result": []
            }
        },
        "test_pluralize": {
            "name": "test_pluralize",
            "location": 26,
            "return": [],
            "arguments": {
                "word": [],
                "collection": [],
                "expected_result": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_places.py": {
        "test_alias_matching": {
            "name": "test_alias_matching",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_score_cutoff": {
            "name": "test_score_cutoff",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exceeding_soft_limit": {
            "name": "test_exceeding_soft_limit",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_place_graph.py": {
        "p": {
            "name": "p",
            "location": 14,
            "return": [
                "places.Place"
            ],
            "arguments": {
                "name": [],
                "location": []
            }
        },
        "fp": {
            "name": "fp",
            "location": 18,
            "return": [
                "places.FuzzyPlace"
            ],
            "arguments": {
                "place": [],
                "certainty": []
            }
        },
        "test_shortest_path": {
            "name": "test_shortest_path",
            "location": 147,
            "return": [],
            "arguments": {
                "caplog": [],
                "nodes": [],
                "expected_result": []
            }
        },
        "test_no_path_through_graph": {
            "name": "test_no_path_through_graph",
            "location": 186,
            "return": [],
            "arguments": {
                "caplog": [],
                "nodes": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/test_route.py": {
        "test_simple_exact_route": {
            "name": "test_simple_exact_route",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_simple_fuzzy_route": {
            "name": "test_simple_fuzzy_route",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_location_aware_fuzzy_route": {
            "name": "test_location_aware_fuzzy_route",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        }
    },
    "discord-caravan-master/caravan_bot/tests/__init__.py": {}
}
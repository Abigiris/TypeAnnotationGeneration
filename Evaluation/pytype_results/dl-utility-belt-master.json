{
    "dl-utility-belt-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "file": []
            }
        },
        "mypy_typecheck": {
            "name": "mypy_typecheck",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy_typecheck.list_files": {
            "name": "list_files",
            "location": 43,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "mypy_typecheck.py_file": {
            "name": "py_file",
            "location": 50,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "BuildCmd.run": {
            "name": "run",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dl-utility-belt-master/utils.py": {
        "append_files_from_path": {
            "name": "append_files_from_path",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "dl-utility-belt-master/byhand/nn.py": {
        "NeuralNetwork.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_inputs": [],
                "num_hidden": [],
                "num_outputs": [],
                "hidden_layer_weights": [],
                "hidden_layer_bias": [],
                "output_layer_weights": [],
                "output_layer_bias": []
            }
        },
        "NeuralNetwork.init_weights_from_inputs_to_hidden_layer_neurons": {
            "name": "init_weights_from_inputs_to_hidden_layer_neurons",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_layer_weights": []
            }
        },
        "NeuralNetwork.init_weights_from_hidden_layer_neurons_to_output_layer_neurons": {
            "name": "init_weights_from_hidden_layer_neurons_to_output_layer_neurons",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_layer_weights": []
            }
        },
        "NeuralNetwork.inspect": {
            "name": "inspect",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.feed_forward": {
            "name": "feed_forward",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "NeuralNetwork.train": {
            "name": "train",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [],
                "training_outputs": []
            }
        },
        "NeuralNetwork.calculate_total_error": {
            "name": "calculate_total_error",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "training_sets": []
            }
        },
        "NeuronLayer.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_neurons": [],
                "bias": []
            }
        },
        "NeuronLayer.inspect": {
            "name": "inspect",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuronLayer.feed_forward": {
            "name": "feed_forward",
            "location": 138,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "NeuronLayer.get_outputs": {
            "name": "get_outputs",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bias": []
            }
        },
        "Neuron.calculate_output": {
            "name": "calculate_output",
            "location": 155,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Neuron.calculate_total_net_input": {
            "name": "calculate_total_net_input",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.squash": {
            "name": "squash",
            "location": 168,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "total_net_input": []
            }
        },
        "Neuron.calculate_pd_error_wrt_total_net_input": {
            "name": "calculate_pd_error_wrt_total_net_input",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_output": []
            }
        },
        "Neuron.calculate_error": {
            "name": "calculate_error",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_output": []
            }
        },
        "Neuron.calculate_pd_error_wrt_output": {
            "name": "calculate_pd_error_wrt_output",
            "location": 197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_output": []
            }
        },
        "Neuron.calculate_pd_total_net_input_wrt_input": {
            "name": "calculate_pd_total_net_input_wrt_input",
            "location": 206,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Neuron.calculate_pd_total_net_input_wrt_weight": {
            "name": "calculate_pd_total_net_input_wrt_weight",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "dl-utility-belt-master/image/resnet_main.py": {
        "train_model": {
            "name": "train_model",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "hyperparams": []
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "main_args": []
            }
        }
    }
}
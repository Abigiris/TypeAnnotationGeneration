{
    "dmlvis-master/dev.py": {},
    "dmlvis-master/__init__.py": {},
    "dmlvis-master/src/adjust_gamma.py": {
        "adjust_gamma": {
            "name": "adjust_gamma",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "gamma": [
                    "float"
                ]
            }
        }
    },
    "dmlvis-master/src/center_of_shape.py": {},
    "dmlvis-master/src/detect_color.py": {
        "get_image_color_all": {
            "name": "get_image_color_all",
            "location": 64,
            "return": [
                "Set[Tuple[(int, int, int)]]"
            ],
            "arguments": {
                "image": [],
                "number": [
                    "int"
                ]
            }
        },
        "get_image_color_average": {
            "name": "get_image_color_average",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UV_to_rgb": {
            "name": "UV_to_rgb",
            "location": 78,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "wavelength": []
            }
        },
        "filter_for_color": {
            "name": "filter_for_color",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "color": [
                    "Tuple[(int, int, int)]"
                ],
                "variation": [
                    "float"
                ]
            }
        }
    },
    "dmlvis-master/src/detect_shapes.py": {},
    "dmlvis-master/src/dmlutils.py": {
        "set_res": {
            "name": "set_res",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cap": [],
                "resolution": [
                    "Union[(int, str)]"
                ]
            }
        },
        "get_outlined_image": {
            "name": "get_outlined_image",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": []
            }
        },
        "get_largest_contour": {
            "name": "get_largest_contour",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": []
            }
        },
        "get_contour_lims": {
            "name": "get_contour_lims",
            "location": 74,
            "return": [
                "Tuple[(int, int, int, int)]"
            ],
            "arguments": {
                "frame": []
            }
        },
        "calc_contact_angle": {
            "name": "calc_contact_angle",
            "location": 85,
            "return": [
                "float"
            ],
            "arguments": {
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "drop_params": {
            "name": "drop_params",
            "location": 100,
            "return": [
                "float"
            ],
            "arguments": {
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "get_image_skew": {
            "name": "get_image_skew",
            "location": 109,
            "return": [
                "float"
            ],
            "arguments": {
                "frame": []
            }
        },
        "crop_outlined_image": {
            "name": "crop_outlined_image",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": []
            }
        },
        "save_image_groups": {
            "name": "save_image_groups",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "frames_list": [
                    "list"
                ],
                "save_folder": [
                    "str"
                ],
                "raw": [
                    "bool"
                ],
                "edged": [
                    "bool"
                ],
                "masked": [
                    "bool"
                ]
            }
        },
        "add_image_text": {
            "name": "add_image_text",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "text": [
                    "str"
                ],
                "underline": [
                    "bool"
                ]
            }
        },
        "annot_image": {
            "name": "annot_image",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "ang": [
                    "float"
                ],
                "txt_size": [
                    "int"
                ],
                "save_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "savitzky_golay": {
            "name": "savitzky_golay",
            "location": 240,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "y": [],
                "window_size": [
                    "int"
                ],
                "order": [
                    "int"
                ],
                "deriv": [
                    "int"
                ],
                "rate": [
                    "int"
                ]
            }
        },
        "zoom_image": {
            "name": "zoom_image",
            "location": 326,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "zoom": [
                    "float"
                ]
            }
        },
        "zoom_image_from_path": {
            "name": "zoom_image_from_path",
            "location": 359,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "zoom": [
                    "float"
                ]
            }
        },
        "zoom_and_rotate_video": {
            "name": "zoom_and_rotate_video",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "vid": [],
                "zoom": [
                    "float"
                ],
                "rotate": [
                    "float"
                ],
                "show": [
                    "bool"
                ],
                "save_name": [
                    "str"
                ]
            }
        },
        "load_video_from_path": {
            "name": "load_video_from_path",
            "location": 408,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "zoom_and_rotate_video_from_path": {
            "name": "zoom_and_rotate_video_from_path",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "zoom": [
                    "float"
                ],
                "rotate": [
                    "float"
                ],
                "save_name": [
                    "str"
                ]
            }
        },
        "zoom_and_rotate_video_from_dirs": {
            "name": "zoom_and_rotate_video_from_dirs",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "zoom": [
                    "float"
                ],
                "out_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "rotate": [
                    "float"
                ]
            }
        },
        "make_GIF": {
            "name": "make_GIF",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "image_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "split_color_channels_from_array": {
            "name": "split_color_channels_from_array",
            "location": 486,
            "return": [
                "Any"
            ],
            "arguments": {
                "img_array": [
                    "np.ndarray"
                ],
                "channel": [
                    "Literal[('blue', 'green', 'red')]"
                ]
            }
        },
        "split_color_channels_from_path": {
            "name": "split_color_channels_from_path",
            "location": 515,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "image_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "channel": [
                    "Literal['all']"
                ]
            }
        }
    },
    "dmlvis-master/src/dropgui.py": {},
    "dmlvis-master/src/dropgui2.py": {
        "on_key_press": {
            "name": "on_key_press",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "_quit": {
            "name": "_quit",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlvis-master/src/dropI.py": {
        "process_image": {
            "name": "process_image",
            "location": 13,
            "return": [
                "Tuple[(float, float, float)]"
            ],
            "arguments": {
                "img": [],
                "name": [
                    "str"
                ],
                "save_images": [
                    "bool"
                ],
                "verbosity": [
                    "int"
                ]
            }
        },
        "process_image_from_path": {
            "name": "process_image_from_path",
            "location": 36,
            "return": [
                "Optional[Tuple[(float, float, float)]]"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "display_image": {
            "name": "display_image",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "img": []
            }
        },
        "display_image_from_path": {
            "name": "display_image_from_path",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        }
    },
    "dmlvis-master/src/dropS.py": {},
    "dmlvis-master/src/dropV.py": {
        "process_video": {
            "name": "process_video",
            "location": 28,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "vid": [],
                "show": [
                    "bool"
                ],
                "manual": [
                    "bool"
                ]
            }
        },
        "process_videodata": {
            "name": "process_videodata",
            "location": 113,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "raw_data": [
                    "np.ndarray"
                ],
                "flatten": [
                    "Literal[('high', 'low', 'med')]"
                ]
            }
        },
        "print_video_data": {
            "name": "print_video_data",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "np.ndarray"
                ],
                "out_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "out_filename": [
                    "str"
                ],
                "combine": [
                    "bool"
                ],
                "dots": [
                    "Collection"
                ],
                "lines": [
                    "Collection"
                ],
                "sparse": [
                    "Tuple[(str, int)]"
                ]
            }
        },
        "print_video_data_from_csv": {
            "name": "print_video_data_from_csv",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "file_in": [
                    "Union[(str, pathlib.Path)]"
                ],
                "out_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "out_filename": [
                    "str"
                ]
            }
        },
        "process_video_from_path": {
            "name": "process_video_from_path",
            "location": 268,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "show": [
                    "bool"
                ],
                "manual": [
                    "bool"
                ]
            }
        },
        "process_videos_from_dirs": {
            "name": "process_videos_from_dirs",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "in_path": [
                    "Union[(str, pathlib.Path)]"
                ],
                "out_path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "print_video_data.plot_graph": {
            "name": "plot_graph",
            "location": 211,
            "return": [],
            "arguments": {
                "data": [],
                "file_suffix": [],
                "color": [],
                "combine": []
            }
        }
    },
    "dmlvis-master/src/dropV_0.py": {},
    "dmlvis-master/src/dropV_1.py": {},
    "dmlvis-master/src/max_filter.py": {
        "max_rgb_filter": {
            "name": "max_rgb_filter",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": []
            }
        }
    },
    "dmlvis-master/src/n.py": {},
    "dmlvis-master/src/object_size.py": {
        "midpoint": {
            "name": "midpoint",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "ptA": [],
                "ptB": []
            }
        }
    },
    "dmlvis-master/src/t.py": {
        "get_image_from_path": {
            "name": "get_image_from_path",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.Path)]"
                ]
            }
        },
        "get_image_color_list": {
            "name": "get_image_color_list",
            "location": 42,
            "return": [
                "list"
            ],
            "arguments": {
                "image": [],
                "system": [],
                "number": [
                    "int"
                ]
            }
        },
        "get_image_color_set": {
            "name": "get_image_color_set",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "system": [],
                "number": [
                    "int"
                ]
            }
        },
        "get_image_color_counts": {
            "name": "get_image_color_counts",
            "location": 94,
            "return": [
                "Counter"
            ],
            "arguments": {
                "image": [],
                "system": [],
                "number": [
                    "int"
                ]
            }
        },
        "plot_hue_histogram": {
            "name": "plot_hue_histogram",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Counter"
                ]
            }
        },
        "RGB2HEX": {
            "name": "RGB2HEX",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "color": []
            }
        },
        "get_color_cluster_count_from_image": {
            "name": "get_color_cluster_count_from_image",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "number_colors": [
                    "int"
                ]
            }
        }
    },
    "dmlvis-master/src/tkinter_test.py": {
        "select_image": {
            "name": "select_image",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_image": {
            "name": "process_image",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_image": {
            "name": "save_image",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmlvis-master/src/__init__.py": {},
    "dmlvis-master/src/mytypes/__init__.py": {},
    "dmlvis-master/src/pyimagesearch/colorlabeler.py": {
        "ColorLabeler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorLabeler.label": {
            "name": "label",
            "location": 35,
            "return": [
                "Literal[('blue', 'green', 'red')]"
            ],
            "arguments": {
                "self": [],
                "image": [],
                "c": []
            }
        }
    },
    "dmlvis-master/src/pyimagesearch/shapedetector.py": {
        "ShapeDetector.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeDetector.detect": {
            "name": "detect",
            "location": 13,
            "return": [
                "Literal[('circle', 'pentagon', 'rectangle', 'square', 'triangle')]"
            ],
            "arguments": {
                "self": [],
                "c": []
            }
        }
    },
    "dmlvis-master/src/pyimagesearch/__init__.py": {},
    "dmlvis-master/tests/__init__.py": {}
}
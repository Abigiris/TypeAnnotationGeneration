{
    "dog-master/src/parser.py": {
        "_parse_list": {
            "name": "_parse_list",
            "location": 9,
            "return": [
                "Tuple[(Union[(float, int, str, Tuple[(Expression, ...)])], int)]"
            ],
            "arguments": {
                "toks": [
                    "list"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "_parse": {
            "name": "_parse",
            "location": 27,
            "return": [
                "Tuple[(Union[(float, int, str, Tuple[(Expression, ...)])], int)]"
            ],
            "arguments": {
                "toks": [
                    "list"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "List[Union[(float, int, str, Tuple[(Expression, ...)])]]"
            ],
            "arguments": {
                "toks": [
                    "list"
                ],
                "position": [
                    "int"
                ]
            }
        }
    },
    "dog-master/src/scanner.py": {
        "is_symbol_char": {
            "name": "is_symbol_char",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "scan_predicate": {
            "name": "scan_predicate",
            "location": 13,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "predicate": [
                    "Callable[([str], bool)]"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "scan_integer": {
            "name": "scan_integer",
            "location": 30,
            "return": [
                "Tuple[(Tuple[(Any, str)], int)]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "scan_symbol": {
            "name": "scan_symbol",
            "location": 52,
            "return": [
                "Tuple[(Tuple[(Any, str)], int)]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "scan": {
            "name": "scan",
            "location": 73,
            "return": [
                "list"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "starting_position": [
                    "int"
                ]
            }
        }
    },
    "dog-master/src/tokens.py": {},
    "dog-master/test/test_parser.py": {
        "test_unclosed_brackets": {
            "name": "test_unclosed_brackets",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stray_right_bracket": {
            "name": "test_stray_right_bracket",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_token_list": {
            "name": "test_empty_token_list",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_trivial_tokens": {
            "name": "test_parse_trivial_tokens",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_nonnested_lists": {
            "name": "test_parse_nonnested_lists",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_nested_lists": {
            "name": "test_parse_nested_lists",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_empty_lists": {
            "name": "test_parse_empty_lists",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dog-master/test/test_scanner.py": {
        "test_scanner_throws_error_on_bad_integer": {
            "name": "test_scanner_throws_error_on_bad_integer",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scanner_throws_error_on_invalid_char": {
            "name": "test_scanner_throws_error_on_invalid_char",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scanner_on_special_symbol_characters": {
            "name": "test_scanner_on_special_symbol_characters",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scanner_on_single_literals": {
            "name": "test_scanner_on_single_literals",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scanner_on_compound_literals": {
            "name": "test_scanner_on_compound_literals",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scanner_on_lists": {
            "name": "test_scanner_on_lists",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
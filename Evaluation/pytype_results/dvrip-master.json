{
    "dvrip-master/setup.py": {
        "makever": {
            "name": "makever",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "pkgdir": []
            }
        },
        "mypy.initialize_options": {
            "name": "initialize_options",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mypy.finalize_options": {
            "name": "finalize_options",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mypy.run": {
            "name": "run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pytest.initialize_options": {
            "name": "initialize_options",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pytest.finalize_options": {
            "name": "finalize_options",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pytest.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pylint.initialize_options": {
            "name": "initialize_options",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pylint.finalize_options": {
            "name": "finalize_options",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "pylint.run": {
            "name": "run",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.initialize_options": {
            "name": "initialize_options",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.finalize_options": {
            "name": "finalize_options",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.run_tests": {
            "name": "run_tests",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": [],
                "files": []
            }
        },
        "egg_info.find_sources": {
            "name": "find_sources",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "manifest_maker.prune_file_list": {
            "name": "prune_file_list",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "manifest_maker.write_manifest": {
            "name": "write_manifest",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_py.run": {
            "name": "run",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvrip-master/test_dvrip.py": {
        "test_xmmd5_empty": {
            "name": "test_xmmd5_empty",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_xmmd5_tluafed": {
            "name": "test_xmmd5_tluafed",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mirrorproperty": {
            "name": "test_mirrorproperty",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_datetime_for_json": {
            "name": "test_datetime_for_json",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_to_datetime": {
            "name": "test_json_to_datetime",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ChunkReader": {
            "name": "test_ChunkReader",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Packet_encode": {
            "name": "test_Packet_encode",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Packet_decode": {
            "name": "test_Packet_decode",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Packet_decode_invalid": {
            "name": "test_Packet_decode_invalid",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Status_repr": {
            "name": "test_Status_repr",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Status_str": {
            "name": "test_Status_str",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Status_bool": {
            "name": "test_Status_bool",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Status_for_json": {
            "name": "test_Status_for_json",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Status_json_to": {
            "name": "test_Status_json_to",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Session_repr": {
            "name": "test_Session_repr",
            "location": 119,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_Session_eq": {
            "name": "test_Session_eq",
            "location": 124,
            "return": [],
            "arguments": {
                "s": [],
                "t": []
            }
        },
        "test_Session_hash": {
            "name": "test_Session_hash",
            "location": 129,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_Session_forjson": {
            "name": "test_Session_forjson",
            "location": 133,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_Session_jsonto": {
            "name": "test_Session_jsonto",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Hash_repr": {
            "name": "test_Hash_repr",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Hash_str": {
            "name": "test_Hash_str",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Hash_forjson": {
            "name": "test_Hash_forjson",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Hash_jsonto": {
            "name": "test_Hash_jsonto",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clitosrv": {
            "name": "clitosrv",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "srvtocli": {
            "name": "srvtocli",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "clifile": {
            "name": "clifile",
            "location": 183,
            "return": [],
            "arguments": {
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "srvfile": {
            "name": "srvfile",
            "location": 187,
            "return": [],
            "arguments": {
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "clisock": {
            "name": "clisock",
            "location": 191,
            "return": [],
            "arguments": {
                "clifile": []
            }
        },
        "srvsock": {
            "name": "srvsock",
            "location": 195,
            "return": [],
            "arguments": {
                "srvfile": []
            }
        },
        "cliconn": {
            "name": "cliconn",
            "location": 199,
            "return": [],
            "arguments": {
                "clisock": []
            }
        },
        "srvconn": {
            "name": "srvconn",
            "location": 203,
            "return": [],
            "arguments": {
                "srvsock": []
            }
        },
        "session": {
            "name": "session",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "clinoconn": {
            "name": "clinoconn",
            "location": 211,
            "return": [],
            "arguments": {
                "cliconn": [],
                "session": []
            }
        },
        "srvnoconn": {
            "name": "srvnoconn",
            "location": 216,
            "return": [],
            "arguments": {
                "srvconn": [],
                "session": []
            }
        },
        "test_ClientLogin_topackets": {
            "name": "test_ClientLogin_topackets",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_ClientLogin_topackets_chunked": {
            "name": "test_ClientLogin_topackets_chunked",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_ClientLogin_frompackets_invalid": {
            "name": "test_ClientLogin_frompackets_invalid",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ClientLoginReply_frompackets": {
            "name": "test_ClientLoginReply_frompackets",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ClientLoginReply_fromchunks_empty": {
            "name": "test_ClientLoginReply_fromchunks_empty",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send": {
            "name": "test_controlfilter_send",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_chunked": {
            "name": "test_controlfilter_send_chunked",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_wrong_type": {
            "name": "test_controlfilter_send_wrong_type",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_wrong_number": {
            "name": "test_controlfilter_send_wrong_number",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_invalid_fragments": {
            "name": "test_controlfilter_send_invalid_fragments",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_invalid_overrun": {
            "name": "test_controlfilter_send_invalid_overrun",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_controlfilter_send_invalid_overlap": {
            "name": "test_controlfilter_send_invalid_overlap",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_streamfilter_send": {
            "name": "test_streamfilter_send",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_Message_stream": {
            "name": "test_Message_stream",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_ClientLogout_topackets": {
            "name": "test_ClientLogout_topackets",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_ClientLogoutReply_replies": {
            "name": "test_ClientLogoutReply_replies",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Client_logout": {
            "name": "test_Client_logout",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "session": [],
                "clinoconn": [],
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "test_Client_logout_stray": {
            "name": "test_Client_logout_stray",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "session": [],
                "clinoconn": [],
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "test_Client_login": {
            "name": "test_Client_login",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "cliconn": [],
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "test_Client_login_invalid": {
            "name": "test_Client_login_invalid",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "cliconn": [],
                "clitosrv": [],
                "srvtocli": []
            }
        },
        "test_version_jsonto": {
            "name": "test_version_jsonto",
            "location": 497,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_version_forjson": {
            "name": "test_version_forjson",
            "location": 502,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Info_repr": {
            "name": "test_Info_repr",
            "location": 512,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "test_Info_str": {
            "name": "test_Info_str",
            "location": 516,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "test_Info_forjson": {
            "name": "test_Info_forjson",
            "location": 520,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "test_info_jsonto": {
            "name": "test_info_jsonto",
            "location": 524,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "test_ip_forjson": {
            "name": "test_ip_forjson",
            "location": 532,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_ip_jsonto": {
            "name": "test_ip_jsonto",
            "location": 537,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_ip_forjson_jsonto": {
            "name": "test_ip_forjson_jsonto",
            "location": 543,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_ip_jsonto_forjson": {
            "name": "test_ip_jsonto_forjson",
            "location": 548,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "d": []
            }
        },
        "test_mask_forjson": {
            "name": "test_mask_forjson",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mask_jsonto": {
            "name": "test_mask_jsonto",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "idtext": {
            "name": "idtext",
            "location": 564,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "test_ConnectionEntry_str": {
            "name": "test_ConnectionEntry_str",
            "location": 568,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_ConnectionEntry_repr": {
            "name": "test_ConnectionEntry_repr",
            "location": 575,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_ConnectionEntry_eq": {
            "name": "test_ConnectionEntry_eq",
            "location": 585,
            "return": [],
            "arguments": {
                "auser": [],
                "aservice": [],
                "ahost": [],
                "buser": [],
                "bservice": [],
                "bhost": []
            }
        },
        "test_ConnectionEntry_forjson": {
            "name": "test_ConnectionEntry_forjson",
            "location": 592,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_ConnectionEntry_jsonto": {
            "name": "test_ConnectionEntry_jsonto",
            "location": 600,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_ConnectionEntry_forjson_jsonto": {
            "name": "test_ConnectionEntry_forjson_jsonto",
            "location": 610,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_ConnectionEntry_jsonto_forjson": {
            "name": "test_ConnectionEntry_jsonto_forjson",
            "location": 615,
            "return": [],
            "arguments": {
                "user": [],
                "service": [],
                "host": []
            }
        },
        "test_RecordEntry_str": {
            "name": "test_RecordEntry_str",
            "location": 622,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_RecordEntry_repr": {
            "name": "test_RecordEntry_repr",
            "location": 627,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_RecordEntry_eq": {
            "name": "test_RecordEntry_eq",
            "location": 634,
            "return": [],
            "arguments": {
                "achannel": [],
                "atrigger": [],
                "bchannel": [],
                "btrigger": []
            }
        },
        "test_RecordEntry_forjson": {
            "name": "test_RecordEntry_forjson",
            "location": 641,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_RecordEntry_jsonto": {
            "name": "test_RecordEntry_jsonto",
            "location": 646,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_RecordEntry_forjson_jsonto": {
            "name": "test_RecordEntry_forjson_jsonto",
            "location": 657,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_RecordEntry_jsonto_forjson": {
            "name": "test_RecordEntry_jsonto_forjson",
            "location": 662,
            "return": [],
            "arguments": {
                "channel": [],
                "trigger": []
            }
        },
        "test_EntryType_repr": {
            "name": "test_EntryType_repr",
            "location": 667,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_EntryType_forjson": {
            "name": "test_EntryType_forjson",
            "location": 671,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_EntryType_jsonto": {
            "name": "test_EntryType_jsonto",
            "location": 675,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_EntryType_forjson_jsonto": {
            "name": "test_EntryType_forjson_jsonto",
            "location": 681,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_EntryType_jsonto_forjson": {
            "name": "test_EntryType_jsonto_forjson",
            "location": 685,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "PseudoSocket.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rfile": [],
                "wfile": []
            }
        },
        "PseudoSocket.readable": {
            "name": "readable",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoSocket.readinto": {
            "name": "readinto",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoSocket.writable": {
            "name": "writable",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoSocket.write": {
            "name": "write",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleRequest.for_json": {
            "name": "for_json",
            "location": 405,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleRequest.json_to": {
            "name": "json_to",
            "location": 409,
            "return": [
                "_TExampleRequest@@ExampleRequest@@"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TExampleRequest]"
                ]
            }
        }
    },
    "dvrip-master/test_typing.py": {
        "test_forjson": {
            "name": "test_forjson",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Value": {
            "name": "test_Value",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Value_subclasshook": {
            "name": "test_Value_subclasshook",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_EnumValue": {
            "name": "test_EnumValue",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_forjson": {
            "name": "test_bool_forjson",
            "location": 57,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_bool_jsonto": {
            "name": "test_bool_jsonto",
            "location": 61,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_bool_forjson_jsonto": {
            "name": "test_bool_forjson_jsonto",
            "location": 67,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_bool_jsonto_forjson": {
            "name": "test_bool_jsonto_forjson",
            "location": 71,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_int_forjson": {
            "name": "test_int_forjson",
            "location": 75,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_int_jsonto": {
            "name": "test_int_jsonto",
            "location": 79,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_int_forjson_jsonto": {
            "name": "test_int_forjson_jsonto",
            "location": 86,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_int_jsonto_forjson": {
            "name": "test_int_jsonto_forjson",
            "location": 90,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_str_forjson": {
            "name": "test_str_forjson",
            "location": 94,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_str_jsonto": {
            "name": "test_str_jsonto",
            "location": 98,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_str_forjson_jsonto": {
            "name": "test_str_forjson_jsonto",
            "location": 104,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_str_jsonto_forjson": {
            "name": "test_str_jsonto_forjson",
            "location": 108,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_optional_forjson": {
            "name": "test_optional_forjson",
            "location": 112,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "test_optional_jsonto": {
            "name": "test_optional_jsonto",
            "location": 116,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "test_optional_forjson_jsonto": {
            "name": "test_optional_forjson_jsonto",
            "location": 120,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "test_optional_jsonto_forjson": {
            "name": "test_optional_jsonto_forjson",
            "location": 124,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "test_list_forjson": {
            "name": "test_list_forjson",
            "location": 128,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "test_list_jsonto": {
            "name": "test_list_jsonto",
            "location": 132,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "test_list_forjson_jsonto": {
            "name": "test_list_forjson_jsonto",
            "location": 142,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "test_list_jsonto_forjson": {
            "name": "test_list_jsonto_forjson",
            "location": 146,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "test_dict_forjson": {
            "name": "test_dict_forjson",
            "location": 150,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_dict_jsonto": {
            "name": "test_dict_jsonto",
            "location": 154,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_dict_forjson_jsonto": {
            "name": "test_dict_forjson_jsonto",
            "location": 166,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_dict_jsonto_forjson": {
            "name": "test_dict_jsonto_forjson",
            "location": 170,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_jsontype": {
            "name": "test_jsontype",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Member": {
            "name": "test_Member",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Member_subclasshook": {
            "name": "test_Member_subclasshook",
            "location": 193,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_compose": {
            "name": "test_compose",
            "location": 201,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "fromhex": {
            "name": "fromhex",
            "location": 204,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": []
            }
        },
        "tohex": {
            "name": "tohex",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "hextext": {
            "name": "hextext",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "test_fixedmember_get": {
            "name": "test_fixedmember_get",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixedmember_set": {
            "name": "test_fixedmember_set",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixedmember_forjson": {
            "name": "test_fixedmember_forjson",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fixedmember_jsonto": {
            "name": "test_fixedmember_jsonto",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_absentmember_forjson": {
            "name": "test_absentmember_forjson",
            "location": 241,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_absentmember_jsonto": {
            "name": "test_absentmember_jsonto",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Object": {
            "name": "test_Object",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Member_nojsonto": {
            "name": "test_Member_nojsonto",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Object_get": {
            "name": "test_Object_get",
            "location": 285,
            "return": [],
            "arguments": {
                "i": [],
                "b": []
            }
        },
        "test_Object_set": {
            "name": "test_Object_set",
            "location": 290,
            "return": [],
            "arguments": {
                "i": [],
                "b": [],
                "j": [],
                "c": []
            }
        },
        "test_Object_repr": {
            "name": "test_Object_repr",
            "location": 299,
            "return": [],
            "arguments": {
                "i": [],
                "b": []
            }
        },
        "test_Object_eq": {
            "name": "test_Object_eq",
            "location": 304,
            "return": [],
            "arguments": {
                "i": [],
                "b": [],
                "j": [],
                "c": []
            }
        },
        "test_Object_forjson": {
            "name": "test_Object_forjson",
            "location": 310,
            "return": [],
            "arguments": {
                "i": [],
                "b": [],
                "j": []
            }
        },
        "test_Object_jsonto": {
            "name": "test_Object_jsonto",
            "location": 316,
            "return": [],
            "arguments": {
                "i": [],
                "h": []
            }
        },
        "test_Object_forjson_jsonto": {
            "name": "test_Object_forjson_jsonto",
            "location": 331,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "b": []
            }
        },
        "test_Object_jsonto_forjson": {
            "name": "test_Object_jsonto_forjson",
            "location": 338,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "h": []
            }
        },
        "test_optionalmember_forjson": {
            "name": "test_optionalmember_forjson",
            "location": 350,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "k": []
            }
        },
        "test_optionalmember_jsonto": {
            "name": "test_optionalmember_jsonto",
            "location": 357,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "k": []
            }
        },
        "DuckValue.for_json": {
            "name": "for_json",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DuckValue.json_to": {
            "name": "json_to",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        },
        "DuckMember.__set_name__": {
            "name": "__set_name__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [],
                "_name": []
            }
        },
        "DuckMember.push": {
            "name": "push",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "DuckMember.pop": {
            "name": "pop",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "Example.room": {
            "name": "room",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dvrip-master/dvrip/discover.py": {
        "_ip_for_json": {
            "name": "_ip_for_json",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "_json_to_ip": {
            "name": "_json_to_ip",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_mask_for_json": {
            "name": "_mask_for_json",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "_json_to_mask": {
            "name": "_json_to_mask",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "datum": []
            }
        }
    },
    "dvrip-master/dvrip/errors.py": {
        "DVRIPRequestError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "reply": []
            }
        },
        "DVRIPRequestError.status": {
            "name": "status",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DVRIPRequestError.code": {
            "name": "code",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DVRIPRequestError.signal": {
            "name": "signal",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "request": [],
                "reply": []
            }
        }
    },
    "dvrip-master/dvrip/files.py": {},
    "dvrip-master/dvrip/info.py": {
        "_json_to_version": {
            "name": "_json_to_version",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_version_for_json": {
            "name": "_version_for_json",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "dvrip-master/dvrip/io.py": {
        "DVRIPConnection.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [],
                "session": [],
                "number": []
            }
        },
        "DVRIPConnection.send": {
            "name": "send",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [],
                "message": []
            }
        },
        "DVRIPConnection.recv": {
            "name": "recv",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filter": []
            }
        },
        "DVRIPConnection.request": {
            "name": "request",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DVRIPConnection.reader": {
            "name": "reader",
            "location": 70,
            "return": [
                "DVRIPReader"
            ],
            "arguments": {
                "self": [],
                "socket": [],
                "claim": [],
                "request": []
            }
        },
        "DVRIPReader.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "filter": []
            }
        },
        "DVRIPReader.readable": {
            "name": "readable",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPReader.readinto": {
            "name": "readinto",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": []
            }
        },
        "DVRIPClient.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.discover": {
            "name": "discover",
            "location": 127,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "interface": [],
                "timeout": []
            }
        },
        "DVRIPClient.login": {
            "name": "login",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "hash": [],
                "service": []
            }
        },
        "DVRIPClient.logout": {
            "name": "logout",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.keepalive": {
            "name": "keepalive",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.connect": {
            "name": "connect",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "DVRIPClient.systeminfo": {
            "name": "systeminfo",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.storageinfo": {
            "name": "storageinfo",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.activityinfo": {
            "name": "activityinfo",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.time": {
            "name": "time",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "time": []
            }
        },
        "DVRIPClient.reboot": {
            "name": "reboot",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.log": {
            "name": "log",
            "location": 227,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVRIPClient.files": {
            "name": "files",
            "location": 238,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "DVRIPClient.button": {
            "name": "button",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "button": []
            }
        },
        "DVRIPClient.download": {
            "name": "download",
            "location": 266,
            "return": [
                "DVRIPReader"
            ],
            "arguments": {
                "self": [],
                "socket": [],
                "name": []
            }
        },
        "DVRIPClient.monitor": {
            "name": "monitor",
            "location": 275,
            "return": [
                "DVRIPReader"
            ],
            "arguments": {
                "self": [],
                "socket": [],
                "channel": [],
                "stream": []
            }
        }
    },
    "dvrip-master/dvrip/log.py": {
        "ConnectionEntry.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionEntry.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionEntry.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionEntry.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConnectionEntry.for_json": {
            "name": "for_json",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionEntry.json_to": {
            "name": "json_to",
            "location": 59,
            "return": [
                "_TConnectionEntry@@ConnectionEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConnectionEntry]"
                ],
                "datum": []
            }
        },
        "RecordEntry.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordEntry.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordEntry.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordEntry.__eq__": {
            "name": "__eq__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RecordEntry.for_json": {
            "name": "for_json",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordEntry.json_to": {
            "name": "json_to",
            "location": 108,
            "return": [
                "_TRecordEntry@@RecordEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRecordEntry]"
                ],
                "datum": []
            }
        },
        "EntryType.__new__": {
            "name": "__new__",
            "location": 123,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "data": []
            }
        },
        "EntryType.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "data": []
            }
        },
        "EntryType.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryType.for_json": {
            "name": "for_json",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryType.json_to": {
            "name": "json_to",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        },
        "Entry.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.__eq__": {
            "name": "__eq__",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Entry._end_": {
            "name": "_end_",
            "location": 179,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ],
                "datum": []
            }
        },
        "Entry.for_json": {
            "name": "for_json",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dvrip-master/dvrip/login.py": {
        "xmmd5": {
            "name": "xmmd5",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "password": []
            }
        },
        "Hash.__new__": {
            "name": "__new__",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "id": [],
                "_func": []
            }
        },
        "Hash.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "func": []
            }
        },
        "Hash.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.for_json": {
            "name": "for_json",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.json_to": {
            "name": "json_to",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        }
    },
    "dvrip-master/dvrip/message.py": {
        "_hex_for_json": {
            "name": "_hex_for_json",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "_json_to_hex": {
            "name": "_json_to_hex",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_datetime_for_json": {
            "name": "_datetime_for_json",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "_json_to_datetime": {
            "name": "_json_to_datetime",
            "location": 70,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "datum": []
            }
        },
        "controlfilter": {
            "name": "controlfilter",
            "location": 266,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [],
                "number": []
            }
        },
        "streamfilter": {
            "name": "streamfilter",
            "location": 302,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "type": []
            }
        },
        "_ChunkReader.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunks": []
            }
        },
        "_ChunkReader.readable": {
            "name": "readable",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ChunkReader.readinto": {
            "name": "readinto",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buffer": []
            }
        },
        "Choice.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.for_json": {
            "name": "for_json",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.json_to": {
            "name": "json_to",
            "location": 98,
            "return": [
                "_TChoice@@Choice@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChoice]"
                ],
                "datum": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Session.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Session.__hash__": {
            "name": "__hash__",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.for_json": {
            "name": "for_json",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.json_to": {
            "name": "json_to",
            "location": 126,
            "return": [
                "_TSession@@Session@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSession]"
                ],
                "datum": []
            }
        },
        "Status.__new__": {
            "name": "__new__",
            "location": 137,
            "return": [],
            "arguments": {
                "cls": [],
                "code": [],
                "success": [],
                "message": []
            }
        },
        "Status.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__str__": {
            "name": "__str__",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__bool__": {
            "name": "__bool__",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.for_json": {
            "name": "for_json",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.json_to": {
            "name": "json_to",
            "location": 160,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        },
        "Message.type": {
            "name": "type",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.chunks": {
            "name": "chunks",
            "location": 232,
            "return": [
                "List[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.topackets": {
            "name": "topackets",
            "location": 237,
            "return": [
                "Generator[(dvrip.packet.Packet, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "number": []
            }
        },
        "Message.fromchunks": {
            "name": "fromchunks",
            "location": 250,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "chunks": []
            }
        },
        "Message.frompackets": {
            "name": "frompackets",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "packets": []
            }
        },
        "Request.replies": {
            "name": "replies",
            "location": 319,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "Type[Request]"
                ],
                "number": []
            }
        },
        "Request.stream": {
            "name": "stream",
            "location": 323,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": [
                    "Type[Request]"
                ]
            }
        }
    },
    "dvrip-master/dvrip/monitor.py": {},
    "dvrip-master/dvrip/operation.py": {},
    "dvrip-master/dvrip/packet.py": {
        "_read": {
            "name": "_read",
            "location": 19,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "file": [],
                "length": []
            }
        },
        "_write": {
            "name": "_write",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [],
                "data": []
            }
        },
        "_mirrorproperty.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "_mirrorproperty.__get__": {
            "name": "__get__",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "type": []
            }
        },
        "_mirrorproperty.__set__": {
            "name": "__set__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "value": []
            }
        },
        "_mirrorproperty.__delete__": {
            "name": "__delete__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Packet.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "number": [],
                "type": [],
                "payload": []
            }
        },
        "Packet.length": {
            "name": "length",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.size": {
            "name": "size",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.dump": {
            "name": "dump",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Packet.encode": {
            "name": "encode",
            "location": 91,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.load": {
            "name": "load",
            "location": 97,
            "return": [
                "_TPacket@@Packet@@"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TPacket]"
                ],
                "file": []
            }
        },
        "Packet.decode": {
            "name": "decode",
            "location": 114,
            "return": [
                "_TPacket@@Packet@@"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TPacket]"
                ],
                "buffer": []
            }
        }
    },
    "dvrip-master/dvrip/playback.py": {},
    "dvrip-master/dvrip/ptz.py": {},
    "dvrip-master/dvrip/typing.py": {
        "for_json": {
            "name": "for_json",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "json_to": {
            "name": "json_to",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "type": []
            }
        },
        "_json_to_bool": {
            "name": "_json_to_bool",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_json_to_int": {
            "name": "_json_to_int",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_json_to_str": {
            "name": "_json_to_str",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "datum": []
            }
        },
        "_json_to_optional": {
            "name": "_json_to_optional",
            "location": 120,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "arg": []
            }
        },
        "_json_to_list": {
            "name": "_json_to_list",
            "location": 129,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "arg": []
            }
        },
        "_json_to_dict": {
            "name": "_json_to_dict",
            "location": 138,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "arg": []
            }
        },
        "jsontype": {
            "name": "jsontype",
            "location": 148,
            "return": [
                "Tuple[(Any, Callable[([Any], Any)])]"
            ],
            "arguments": {
                "type": []
            }
        },
        "_compose": {
            "name": "_compose",
            "location": 215,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "_isunder": {
            "name": "_isunder",
            "location": 342,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "_json_to_optional._json_tooptional": {
            "name": "_json_tooptional",
            "location": 122,
            "return": [],
            "arguments": {
                "datum": []
            }
        },
        "_json_to_list._json_tolist": {
            "name": "_json_tolist",
            "location": 131,
            "return": [],
            "arguments": {
                "datum": []
            }
        },
        "_json_to_dict._json_todict": {
            "name": "_json_todict",
            "location": 140,
            "return": [],
            "arguments": {
                "datum": []
            }
        },
        "fixedmember.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "datum": []
            }
        },
        "fixedmember.__get__": {
            "name": "__get__",
            "location": 235,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "fixedmember.__set__": {
            "name": "__set__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "value": []
            }
        },
        "fixedmember.push": {
            "name": "push",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "fixedmember.pop": {
            "name": "pop",
            "location": 250,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "AttributeMember.__get__": {
            "name": "__get__",
            "location": 259,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "_type": []
            }
        },
        "AttributeMember.__set__": {
            "name": "__set__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "value": []
            }
        },
        "absentmember.push": {
            "name": "push",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "absentmember.pop": {
            "name": "pop",
            "location": 278,
            "return": [
                "_NotImplementedType"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "member.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "conv": []
            }
        },
        "member.__set_name__": {
            "name": "__set_name__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "member.push": {
            "name": "push",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "member.pop": {
            "name": "pop",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "optionalmember.push": {
            "name": "push",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "optionalmember.pop": {
            "name": "pop",
            "location": 334,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "ObjectMeta.__new__": {
            "name": "__new__",
            "location": 352,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "ObjectMeta.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "ObjectMeta.members": {
            "name": "members",
            "location": 451,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__repr__": {
            "name": "__repr__",
            "location": 466,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__eq__": {
            "name": "__eq__",
            "location": 471,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Object.for_json": {
            "name": "for_json",
            "location": 478,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.json_to": {
            "name": "json_to",
            "location": 482,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        },
        "Object._begin_": {
            "name": "_begin_",
            "location": 486,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "datum": [
                    "Object"
                ]
            }
        },
        "Object._pusher_": {
            "name": "_pusher_",
            "location": 492,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "datum": [
                    "Object"
                ]
            }
        },
        "Object._popper_": {
            "name": "_popper_",
            "location": 501,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "datum": [
                    "Object"
                ]
            }
        },
        "Object._end_": {
            "name": "_end_",
            "location": 511,
            "return": [
                "_TObject@@Object@@"
            ],
            "arguments": {
                "value": [
                    "_TObject@@Object@@"
                ],
                "datum": []
            }
        },
        "Value.for_json": {
            "name": "for_json",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.json_to": {
            "name": "json_to",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "datum": []
            }
        },
        "Value.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "Member.__set_name__": {
            "name": "__set_name__",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "_type": [],
                "name": []
            }
        },
        "Member.push": {
            "name": "push",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "push": [],
                "value": []
            }
        },
        "Member.pop": {
            "name": "pop",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pop": []
            }
        },
        "Member.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 200,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "Object._pusher_.push": {
            "name": "push",
            "location": 493,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "Object._popper_.pop": {
            "name": "pop",
            "location": 502,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "dvrip-master/dvrip/_version.py": {
        "describe": {
            "name": "describe",
            "location": 15,
            "return": [],
            "arguments": {
                "repo": []
            }
        }
    },
    "dvrip-master/dvrip/__init__.py": {},
    "dvrip-master/dvrip/cmd/cat.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/discover.py": {
        "usage": {
            "name": "usage",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/find.py": {
        "usage": {
            "name": "usage",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/info.py": {
        "usage": {
            "name": "usage",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/log.py": {
        "usage": {
            "name": "usage",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/reboot.py": {
        "usage": {
            "name": "usage",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/time.py": {
        "usage": {
            "name": "usage",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "serv": [],
                "username": [],
                "password": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dvrip-master/dvrip/cmd/__init__.py": {
        "osexit": {
            "name": "osexit",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [],
                "code": []
            }
        },
        "guard": {
            "name": "guard",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "_func": []
            }
        },
        "host": {
            "name": "host",
            "location": 48,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "serv": {
            "name": "serv",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "username": {
            "name": "username",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "prog": {
            "name": "prog",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "prog_connect": {
            "name": "prog_connect",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "usage": {
            "name": "usage",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "prog": []
            }
        },
        "run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "prog": [],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
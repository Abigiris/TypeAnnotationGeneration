{
    "ecs-autoscale-master/lambda/lambda_function.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "load_cluster_defs": {
            "name": "load_cluster_defs",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "clusters": {
            "name": "clusters",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "run_test": {
            "name": "run_test",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/exceptions.py": {
        "ClusterARNError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        },
        "ASGGroupError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asg_group_name": []
            }
        },
        "MissingResourceValueError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "CloudWatchError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [],
                "metric_name": [],
                "dimensions": [],
                "period": [],
                "statistics": []
            }
        },
        "ThirdPartyError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [],
                "url": []
            }
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/instances.py": {
        "get_cluster_arn": {
            "name": "get_cluster_arn",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "cluster_name": [],
                "cluster_list": []
            }
        },
        "get_asg_group_data": {
            "name": "get_asg_group_data",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "asg_group_name": [],
                "asg_data": []
            }
        },
        "get_empty_instances": {
            "name": "get_empty_instances",
            "location": 32,
            "return": [
                "dict"
            ],
            "arguments": {
                "active_container_described": []
            }
        },
        "get_draining_instances": {
            "name": "get_draining_instances",
            "location": 45,
            "return": [
                "dict"
            ],
            "arguments": {
                "draining_container_described": []
            }
        },
        "retrieve_cluster_data": {
            "name": "retrieve_cluster_data",
            "location": 57,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cluster_arn": [],
                "cluster_name": []
            }
        },
        "drain_instance": {
            "name": "drain_instance",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "cluster_data": [],
                "instance": [],
                "is_test_run": []
            }
        },
        "terminate_instance": {
            "name": "terminate_instance",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "cluster_name": [],
                "asg_group_data": [],
                "ec2_instance_id": [],
                "is_test_run": []
            }
        },
        "get_cpu_avail": {
            "name": "get_cpu_avail",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "instance": []
            }
        },
        "get_mem_avail": {
            "name": "get_mem_avail",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "instance": []
            }
        },
        "get_cpu_used": {
            "name": "get_cpu_used",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "instance": []
            }
        },
        "get_mem_used": {
            "name": "get_mem_used",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "instance": []
            }
        },
        "place_task": {
            "name": "place_task",
            "location": 171,
            "return": [
                "Tuple[(_T0, bool)]"
            ],
            "arguments": {
                "instance_tuples": [
                    "_T0@@"
                ],
                "cpu": [],
                "mem": []
            }
        },
        "scale_up": {
            "name": "scale_up",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "cluster_data": [],
                "cluster_def": [],
                "asg_group_data": [],
                "services": [],
                "is_test_run": []
            }
        },
        "get_min_cpu_instance": {
            "name": "get_min_cpu_instance",
            "location": 237,
            "return": [
                "Any"
            ],
            "arguments": {
                "instances": []
            }
        },
        "get_min_mem_instance": {
            "name": "get_min_mem_instance",
            "location": 241,
            "return": [
                "Any"
            ],
            "arguments": {
                "instances": []
            }
        },
        "allocate_instances": {
            "name": "allocate_instances",
            "location": 245,
            "return": [
                "Tuple[(_T2, bool)]"
            ],
            "arguments": {
                "desired_cpu": [],
                "desired_mem": [],
                "instance_tuples": [
                    "_T2@@"
                ]
            }
        },
        "place_instance": {
            "name": "place_instance",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "instance": [],
                "instances": [],
                "services": []
            }
        },
        "scale_down": {
            "name": "scale_down",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "cluster_data": [],
                "asg_group_data": [],
                "services": [],
                "is_test_run": []
            }
        },
        "log_instances": {
            "name": "log_instances",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "cluster_name": [],
                "instances": [],
                "status": []
            }
        },
        "_scale_ec2_instances": {
            "name": "_scale_ec2_instances",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "cluster_data": [],
                "cluster_def": [],
                "asg_group_data": [],
                "services": [],
                "is_test_run": []
            }
        },
        "scale_ec2_instances": {
            "name": "scale_ec2_instances",
            "location": 434,
            "return": [
                "int"
            ],
            "arguments": {
                "cluster_name": [],
                "cluster_def": [],
                "asg_data": [],
                "cluster_list": [],
                "services": [],
                "is_test_run": []
            }
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/services.py": {
        "chunks": {
            "name": "chunks",
            "location": 196,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [],
                "n": []
            }
        },
        "get_services": {
            "name": "get_services",
            "location": 201,
            "return": [
                "Dict[(Any, Dict[(str, Any)])]"
            ],
            "arguments": {
                "cluster_name": [],
                "cluster_def": []
            }
        },
        "gather_services": {
            "name": "gather_services",
            "location": 220,
            "return": [
                "List[Service]"
            ],
            "arguments": {
                "cluster_name": [],
                "cluster_def": []
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_name": [],
                "service_name": [],
                "task_name": [],
                "task_count": [],
                "events": [],
                "metric_sources": [],
                "min_tasks": [],
                "max_tasks": [],
                "state": []
            }
        },
        "Service._get_metric": {
            "name": "_get_metric",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "metric_str": []
            }
        },
        "Service.pretend_scale": {
            "name": "pretend_scale",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.scale": {
            "name": "scale",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_test_run": []
            }
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/__init__.py": {},
    "ecs-autoscale-master/lambda/ecsautoscale/metric_sources/cloudwatch.py": {
        "_format_dimensions": {
            "name": "_format_dimensions",
            "location": 15,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "dimensions": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "metric_name": [],
                "dimensions": [],
                "statistics": [],
                "namespace": [],
                "period": []
            }
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/metric_sources/third_party.py": {
        "_get_nested_field": {
            "name": "_get_nested_field",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "field": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "url": [],
                "statistics": [],
                "method": [],
                "payload": []
            }
        }
    },
    "ecs-autoscale-master/lambda/ecsautoscale/metric_sources/__init__.py": {},
    "ecs-autoscale-master/test/conftest.py": {
        "service": {
            "name": "service",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "ecs-autoscale-master/test/test_service.py": {
        "test_metric_arithmetic1": {
            "name": "test_metric_arithmetic1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "service": []
            }
        },
        "test_pretend_scale": {
            "name": "test_pretend_scale",
            "location": 62,
            "return": [],
            "arguments": {
                "service": [],
                "events": [],
                "max_tasks": [],
                "desired_tasks_check": [],
                "task_diff_check": []
            }
        }
    },
    "ecs-autoscale-master/test/test_third_party.py": {
        "test_nested_get": {
            "name": "test_nested_get",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
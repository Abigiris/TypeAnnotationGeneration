{
    "edp-master/elite_dangerous_platform.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.injection_config": {
            "name": "injection_config",
            "location": 61,
            "return": [],
            "arguments": {
                "binder": []
            }
        }
    },
    "edp-master/tasks.py": {
        "fetch_wix": {
            "name": "fetch_wix",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "pyuic": {
            "name": "pyuic",
            "location": 69,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "pyrcc": {
            "name": "pyrcc",
            "location": 85,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "gethashsum": {
            "name": "gethashsum",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "md5": [],
                "sha1": []
            }
        },
        "fetch_upx": {
            "name": "fetch_upx",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 145,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "pylint": {
            "name": "pylint",
            "location": 151,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "unittests": {
            "name": "unittests",
            "location": 157,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "test": {
            "name": "test",
            "location": 163,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "build": {
            "name": "build",
            "location": 170,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "dist": {
            "name": "dist",
            "location": 192,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "build_msi": {
            "name": "build_msi",
            "location": 202,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "release": {
            "name": "release",
            "location": 242,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "freeze": {
            "name": "freeze",
            "location": 282,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 297,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {}
        },
        "commit_version": {
            "name": "commit_version",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "bump_major": {
            "name": "bump_major",
            "location": 313,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "bump_minor": {
            "name": "bump_minor",
            "location": 321,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "bump_patch": {
            "name": "bump_patch",
            "location": 329,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "commits_before_tag": {
            "name": "commits_before_tag",
            "location": 337,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 349,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "update_docs": {
            "name": "update_docs",
            "location": 355,
            "return": [],
            "arguments": {
                "c": []
            }
        }
    },
    "edp-master/docs/src/conf.py": {
        "linkcode_resolve": {
            "name": "linkcode_resolve",
            "location": 31,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "domain": [],
                "info": []
            }
        }
    },
    "edp-master/edp/config.py": {},
    "edp-master/edp/contracts.py": {
        "require_arg": {
            "name": "require_arg",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "arg": [],
                "description": [],
                "predicate": []
            }
        },
        "set_contracts": {
            "name": "set_contracts",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": []
            }
        },
        "require_contract": {
            "name": "require_contract",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "t": []
            }
        }
    },
    "edp-master/edp/entities.py": {
        "BaseEntity.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.__setattr__": {
            "name": "__setattr__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BaseEntity._dataclass_type_fields": {
            "name": "_dataclass_type_fields",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.is_changed": {
            "name": "is_changed",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.reset_changed": {
            "name": "reset_changed",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.clear": {
            "name": "clear",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Material.__add__": {
            "name": "__add__",
            "location": 83,
            "return": [
                "_TMaterial@@Material@@"
            ],
            "arguments": {
                "self": [
                    "_TMaterial@@Material@@"
                ],
                "other": []
            }
        },
        "Material.__sub__": {
            "name": "__sub__",
            "location": 92,
            "return": [
                "_TMaterial@@Material@@"
            ],
            "arguments": {
                "self": [
                    "_TMaterial@@Material@@"
                ],
                "other": []
            }
        },
        "MaterialStorage.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialStorage.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "category": []
            }
        },
        "MaterialStorage.add_material": {
            "name": "add_material",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "count": [],
                "category": []
            }
        },
        "MaterialStorage.remove_material": {
            "name": "remove_material",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "count": [],
                "category": []
            }
        },
        "MaterialStorage.raw": {
            "name": "raw",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaterialStorage.encoded": {
            "name": "encoded",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaterialStorage.manufactured": {
            "name": "manufactured",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/journal.py": {
        "get_file_end_pos": {
            "name": "get_file_end_pos",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": []
            }
        },
        "process_event": {
            "name": "process_event",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "event_line": []
            }
        },
        "JournalReader.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir": []
            }
        },
        "JournalReader.get_latest_file": {
            "name": "get_latest_file",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.read_all_file_events": {
            "name": "read_all_file_events",
            "location": 95,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "JournalReader.get_latest_file_events": {
            "name": "get_latest_file_events",
            "location": 111,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader._get_file_event": {
            "name": "_get_file_event",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "JournalReader._filter_file_event": {
            "name": "_filter_file_event",
            "location": 154,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "_T0@@"
                ]
            }
        },
        "JournalReader._get_file_event_filtered": {
            "name": "_get_file_event_filtered",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "JournalReader.get_status_file_event": {
            "name": "get_status_file_event",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.get_cargo_file_event": {
            "name": "get_cargo_file_event",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.get_market_file_event": {
            "name": "get_market_file_event",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.get_modules_info_file_event": {
            "name": "get_modules_info_file_event",
            "location": 197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.get_outfitting_file_event": {
            "name": "get_outfitting_file_event",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalReader.get_game_version_info": {
            "name": "get_game_version_info",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalLiveEventThread.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "journal_reader": []
            }
        },
        "JournalLiveEventThread.run": {
            "name": "run",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalLiveEventThread.read_status_files": {
            "name": "read_status_files",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalLiveEventThread.read_journal": {
            "name": "read_journal",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalLiveEventThread.read_file": {
            "name": "read_file",
            "location": 290,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "pos": []
            }
        },
        "JournalLiveEventThread.process_line": {
            "name": "process_line",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        }
    },
    "edp-master/edp/logging_tools.py": {
        "configure": {
            "name": "configure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "enable_sentry": []
            }
        }
    },
    "edp-master/edp/plugins.py": {
        "mark_function": {
            "name": "mark_function",
            "location": 36,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": []
            }
        },
        "get_marked_methods": {
            "name": "get_marked_methods",
            "location": 52,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "mark": [],
                "obj": []
            }
        },
        "get_function_marks": {
            "name": "get_function_marks",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": []
            }
        },
        "scheduled": {
            "name": "scheduled",
            "location": 70,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "interval": [],
                "plugin_enabled": [],
                "skipfirst": []
            }
        },
        "bind_signal": {
            "name": "bind_signal",
            "location": 86,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "get_module_from_path": {
            "name": "get_module_from_path",
            "location": 123,
            "return": [
                "module"
            ],
            "arguments": {
                "path": []
            }
        },
        "_get_plugin_classes_from_module": {
            "name": "_get_plugin_classes_from_module",
            "location": 136,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "module": []
            }
        },
        "get_plugins_cls_from_dir": {
            "name": "get_plugins_cls_from_dir",
            "location": 146,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "get_plugins_cls_from_path": {
            "name": "get_plugins_cls_from_path",
            "location": 160,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "is_plugin_package": {
            "name": "is_plugin_package",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "get_plugins_cls_from_file": {
            "name": "get_plugins_cls_from_file",
            "location": 183,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "get_plugins_cls_from_package": {
            "name": "get_plugins_cls_from_package",
            "location": 197,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "path": []
            }
        },
        "mark_function.decor": {
            "name": "decor",
            "location": 43,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "BasePlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 116,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugins": []
            }
        },
        "PluginManager.get_plugin": {
            "name": "get_plugin",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "plugin_cls": []
            }
        },
        "PluginManager.get_marked_methods": {
            "name": "get_marked_methods",
            "location": 226,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PluginManager.get_scheduled_methods_threads": {
            "name": "get_scheduled_methods_threads",
            "location": 236,
            "return": [
                "Generator[(edp.thread.IntervalRunnerThread, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.set_plugin_annotation_references": {
            "name": "set_plugin_annotation_references",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager._callback_wrapper": {
            "name": "_callback_wrapper",
            "location": 258,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "plugin": [],
                "plugin_enabled": []
            }
        },
        "PluginManager.register_plugin_signals": {
            "name": "register_plugin_signals",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.get_settings_widgets": {
            "name": "get_settings_widgets",
            "location": 282,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginProxy.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "PluginProxy.get_plugin": {
            "name": "get_plugin",
            "location": 305,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "plugin_cls": []
            }
        },
        "PluginLoader.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_dir": []
            }
        },
        "PluginLoader.get_plugins": {
            "name": "get_plugins",
            "location": 321,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginLoader.add_plugin": {
            "name": "add_plugin",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_cls": []
            }
        },
        "PluginLoader.load_plugins": {
            "name": "load_plugins",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginLoader._init_plugin_cls": {
            "name": "_init_plugin_cls",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "plugin_cls": []
            }
        },
        "PluginManager._callback_wrapper.callback": {
            "name": "callback",
            "location": 260,
            "return": [],
            "arguments": {}
        }
    },
    "edp-master/edp/settings.py": {
        "get_settings_path": {
            "name": "get_settings_path",
            "location": 37,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "name": []
            }
        },
        "BaseSettings.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BaseSettings.get_insance": {
            "name": "get_insance",
            "location": 75,
            "return": [
                "_TBaseSettings@@BaseSettings@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBaseSettings]"
                ],
                "name": []
            }
        },
        "BaseSettings.__setattr__": {
            "name": "__setattr__",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BaseSettings.__getattr__": {
            "name": "__getattr__",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "EDPSettings.journal_dir": {
            "name": "journal_dir",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "edp-master/edp/signals.py": {},
    "edp-master/edp/signalslib.py": {
        "check_signature": {
            "name": "check_signature",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [],
                "signature": []
            }
        },
        "get_data_signature": {
            "name": "get_data_signature",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        },
        "execute_signal_item": {
            "name": "execute_signal_item",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "signal_item": []
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Signal.bind_nonstrict": {
            "name": "bind_nonstrict",
            "location": 51,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0@@"
                ]
            }
        },
        "Signal.bind": {
            "name": "bind",
            "location": 61,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "_T0@@"
                ]
            }
        },
        "Signal.emit": {
            "name": "emit",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.emit_eager": {
            "name": "emit_eager",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.check_signature": {
            "name": "check_signature",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_or_data": []
            }
        },
        "SignalExecutorThread.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal_queue": []
            }
        },
        "SignalExecutorThread.run": {
            "name": "run",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalManager.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalManager.get_signal_executor_thread": {
            "name": "get_signal_executor_thread",
            "location": 149,
            "return": [
                "SignalExecutorThread"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalManager.emit": {
            "name": "emit",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": []
            }
        },
        "SignalManager.emit_eager": {
            "name": "emit_eager",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": []
            }
        }
    },
    "edp-master/edp/thread.py": {
        "StoppableThread.start": {
            "name": "start",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.stop": {
            "name": "stop",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                "_TStoppableThread@@StoppableThread@@"
            ],
            "arguments": {
                "self": [
                    "_TStoppableThread@@StoppableThread@@"
                ]
            }
        },
        "StoppableThread.__exit__": {
            "name": "__exit__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        },
        "StoppableThread.is_stopped": {
            "name": "is_stopped",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.sleep": {
            "name": "sleep",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": []
            }
        },
        "IntervalRunnerThread.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "interval": [],
                "skipfirst": []
            }
        },
        "IntervalRunnerThread.run": {
            "name": "run",
            "location": 76,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.add_interval_thread": {
            "name": "add_interval_thread",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "interval": []
            }
        },
        "ThreadManager.add_thread": {
            "name": "add_thread",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thread": []
            }
        },
        "ThreadManager.add_threads": {
            "name": "add_threads",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.start": {
            "name": "start",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.stop": {
            "name": "stop",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.__enter__": {
            "name": "__enter__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadManager.__exit__": {
            "name": "__exit__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "edp-master/edp/__init__.py": {},
    "edp-master/edp/contrib/capi.py": {
        "build_authorization_url": {
            "name": "build_authorization_url",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "client_id": [],
                "redirect_url": [],
                "state": [],
                "challenge": []
            }
        },
        "TokenInfo.from_data": {
            "name": "from_data",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "CapiAuthWindow.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiAuthWindow.show": {
            "name": "show",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_url": []
            }
        },
        "CapiAuthWindow.on_url_changed": {
            "name": "on_url_changed",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "CapiAuthWindow.close": {
            "name": "close",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiSettingsTabWidget.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "CapiSettingsTabWidget.update_status_label": {
            "name": "update_status_label",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiSettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 163,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiState.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiState.set_state": {
            "name": "set_state",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "CapiState.is_login_required": {
            "name": "is_login_required",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapiState.is_refresh_required": {
            "name": "is_refresh_required",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapiState.is_has_access_token": {
            "name": "is_has_access_token",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager._generate_oauth_creds": {
            "name": "_generate_oauth_creds",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager._on_redirect_url": {
            "name": "_on_redirect_url",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "CapiManager._set_token": {
            "name": "_set_token",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "CapiManager._set_has_access_token": {
            "name": "_set_has_access_token",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager._set_refresh_required": {
            "name": "_set_refresh_required",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager._set_login_required": {
            "name": "_set_login_required",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager._exchange_code": {
            "name": "_exchange_code",
            "location": 300,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "CapiManager._refresh_token": {
            "name": "_refresh_token",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "refresh_token": []
            }
        },
        "CapiManager.show_login_window": {
            "name": "show_login_window",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.do_refresh": {
            "name": "do_refresh",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.do_query": {
            "name": "do_query",
            "location": 381,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "endpoint": []
            }
        },
        "CapiManager._do_query": {
            "name": "_do_query",
            "location": 426,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "endpoint": []
            }
        },
        "CapiManager.get_profile": {
            "name": "get_profile",
            "location": 440,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.get_market": {
            "name": "get_market",
            "location": 444,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.get_shipyard": {
            "name": "get_shipyard",
            "location": 448,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiManager.get_communitygoals": {
            "name": "get_communitygoals",
            "location": 452,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 470,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 473,
            "return": [
                "CapiSettingsTabWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.do_refresh_token": {
            "name": "do_refresh_token",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.on_journal_event": {
            "name": "on_journal_event",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "CapiPlugin.on_init_complete": {
            "name": "on_init_complete",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapiPlugin.on_window_created": {
            "name": "on_window_created",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "window": []
            }
        }
    },
    "edp-master/edp/contrib/discord_rich_presence.py": {
        "DRPSettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRichPresencePlugin.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRichPresencePlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRichPresencePlugin.set_state": {
            "name": "set_state",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DiscordRichPresencePlugin.on_game_state_changed": {
            "name": "on_game_state_changed",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DiscordRichPresencePlugin.update_discord_state": {
            "name": "update_discord_state",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordRichPresencePlugin.set_activity": {
            "name": "set_activity",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DiscordRichPresencePlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 124,
            "return": [
                "DRPSettingsTabWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRichPresencePlugin.on_exit": {
            "name": "on_exit",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/contrib/eddb.py": {
        "EDDBApi.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDDBApi.search_station": {
            "name": "search_station",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "facility": [],
                "ref_system_id": []
            }
        }
    },
    "edp-master/edp/contrib/eddn.py": {
        "EDDNSchema.to_dict": {
            "name": "to_dict",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDDNSettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 142,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDDNPlugin.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDDNPlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDDNPlugin.filter_event": {
            "name": "filter_event",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EDDNPlugin.bootstrap_starpos_db": {
            "name": "bootstrap_starpos_db",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "EDDNPlugin.process_buffered_events": {
            "name": "process_buffered_events",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "EDDNPlugin.process_event": {
            "name": "process_event",
            "location": 182,
            "return": [
                "EDDNSchema"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "state": []
            }
        },
        "EDDNPlugin.send_payload": {
            "name": "send_payload",
            "location": 230,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "EDDNPlugin.on_capi_shipyard_info_outfitting": {
            "name": "on_capi_shipyard_info_outfitting",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "EDDNPlugin.on_capi_shipyard_info_shipyard": {
            "name": "on_capi_shipyard_info_shipyard",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "EDDNPlugin.on_capi_market_info_commodities": {
            "name": "on_capi_market_info_commodities",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "EDDNPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 393,
            "return": [
                "EDDNSettingsTabWidget"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/contrib/edsm.py": {
        "cache": {
            "name": "cache",
            "location": 106,
            "return": [
                "functools._lru_cache_wrapper"
            ],
            "arguments": {
                "func": []
            }
        },
        "EDSMSettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 35,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDSMApi.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [],
                "commander_name": []
            }
        },
        "EDSMApi.from_settings": {
            "name": "from_settings",
            "location": 54,
            "return": [
                "_TEDSMApi@@EDSMApi@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEDSMApi]"
                ],
                "settings": []
            }
        },
        "EDSMApi.from_edsm_settings": {
            "name": "from_edsm_settings",
            "location": 59,
            "return": [
                "_TEDSMApi@@EDSMApi@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEDSMApi]"
                ]
            }
        },
        "EDSMApi.discarded_events": {
            "name": "discarded_events",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EDSMApi.journal_event": {
            "name": "journal_event",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDSMApi.get_system": {
            "name": "get_system",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "EDSMPlugin.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDSMPlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDSMPlugin.on_game_state_set": {
            "name": "on_game_state_set",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "EDSMPlugin.api": {
            "name": "api",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EDSMPlugin.discarded_events": {
            "name": "discarded_events",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EDSMPlugin.filter_event": {
            "name": "filter_event",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EDSMPlugin.process_buffered_events": {
            "name": "process_buffered_events",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "EDSMPlugin.patch_event": {
            "name": "patch_event",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event_line": [],
                "state": []
            }
        },
        "EDSMPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 186,
            "return": [
                "EDSMSettingsTabWidget"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/contrib/gamestate.py": {
        "get_gamestate": {
            "name": "get_gamestate",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "commander_event": {
            "name": "commander_event",
            "location": 124,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "materials_event": {
            "name": "materials_event",
            "location": 137,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "load_game_event": {
            "name": "load_game_event",
            "location": 150,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "rank_event": {
            "name": "rank_event",
            "location": 175,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "progress_event": {
            "name": "progress_event",
            "location": 192,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "reputation_event": {
            "name": "reputation_event",
            "location": 209,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "engineer_progress_event": {
            "name": "engineer_progress_event",
            "location": 223,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "loadout_event": {
            "name": "loadout_event",
            "location": 243,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "location_event": {
            "name": "location_event",
            "location": 260,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "docked_event": {
            "name": "docked_event",
            "location": 287,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "undocked_event": {
            "name": "undocked_event",
            "location": 307,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "material_collected_event": {
            "name": "material_collected_event",
            "location": 318,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "supercruise_entry_event": {
            "name": "supercruise_entry_event",
            "location": 332,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "supercruise_exit_event": {
            "name": "supercruise_exit_event",
            "location": 343,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "material_discarded_event": {
            "name": "material_discarded_event",
            "location": 353,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "synthesis_event": {
            "name": "synthesis_event",
            "location": 369,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "on_mission_completed_event": {
            "name": "on_mission_completed_event",
            "location": 382,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "on_material_trade_event": {
            "name": "on_material_trade_event",
            "location": 393,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "on_engineer_craft_event": {
            "name": "on_engineer_craft_event",
            "location": 406,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "on_fileheader_event": {
            "name": "on_fileheader_event",
            "location": 419,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "on_shutdown_event": {
            "name": "on_shutdown_event",
            "location": 434,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        },
        "GameStateData.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStateData.get_clear_data": {
            "name": "get_clear_data",
            "location": 50,
            "return": [
                "_TGameStateData@@GameStateData@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGameStateData]"
                ]
            }
        },
        "GameStatePlugin.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStatePlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStatePlugin.state": {
            "name": "state",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameStatePlugin.on_journal_event": {
            "name": "on_journal_event",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "GameStatePlugin.set_initial_state": {
            "name": "set_initial_state",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameStatePlugin.update_state": {
            "name": "update_state",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/contrib/inara.py": {
        "_qbytearray_to_str": {
            "name": "_qbytearray_to_str",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "on_docked_event": {
            "name": "on_docked_event",
            "location": 237,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_fsdjump_event": {
            "name": "on_fsdjump_event",
            "location": 251,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_statistict_event": {
            "name": "on_statistict_event",
            "location": 264,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_location_event": {
            "name": "on_location_event",
            "location": 275,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_engineer_progress_event": {
            "name": "on_engineer_progress_event",
            "location": 289,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_reputation_event": {
            "name": "on_reputation_event",
            "location": 301,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_progress_event": {
            "name": "on_progress_event",
            "location": 312,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_rank_event": {
            "name": "on_rank_event",
            "location": 325,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_materials_event": {
            "name": "on_materials_event",
            "location": 338,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_loadgame_event": {
            "name": "on_loadgame_event",
            "location": 352,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_loadout_event": {
            "name": "on_loadout_event",
            "location": 377,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_material_collected_event": {
            "name": "on_material_collected_event",
            "location": 445,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_material_discarded_event": {
            "name": "on_material_discarded_event",
            "location": 458,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_engineer_craft_event": {
            "name": "on_engineer_craft_event",
            "location": 471,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_material_trade_event": {
            "name": "on_material_trade_event",
            "location": 488,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_mission_complete_event": {
            "name": "on_mission_complete_event",
            "location": 514,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "on_synthesis_event": {
            "name": "on_synthesis_event",
            "location": 531,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "InaraWebLoginWindow.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraWebLoginWindow.show": {
            "name": "show",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraWebLoginWindow.on_cookie_added": {
            "name": "on_cookie_added",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookie": []
            }
        },
        "InaraWebLoginWindow.on_url_changed": {
            "name": "on_url_changed",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "InaraSettingsTabWidget.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraSettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 100,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraSettingsTabWidget.on_login_cookies_set": {
            "name": "on_login_cookies_set",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookies": []
            }
        },
        "InaraApi.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": []
            }
        },
        "InaraApi.send": {
            "name": "send",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraWebApi.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraPlugin.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 159,
            "return": [
                "InaraSettingsTabWidget"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraPlugin.is_enalbed": {
            "name": "is_enalbed",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InaraPlugin.api": {
            "name": "api",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InaraPlugin.gamestate_data_set": {
            "name": "gamestate_data_set",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "InaraPlugin.filter_event": {
            "name": "filter_event",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InaraPlugin.process_buffered_events": {
            "name": "process_buffered_events",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "InaraPlugin.process_event": {
            "name": "process_event",
            "location": 221,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/contrib/overlay_ui.py": {
        "OverlaySettingsTabWidget.get_settings_links": {
            "name": "get_settings_links",
            "location": 19,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlayPlugin.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlayPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlayPlugin.on_app_created": {
            "name": "on_app_created",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/contrib/updater.py": {
        "UpdaterPlugin.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdaterPlugin.on_app_created": {
            "name": "on_app_created",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdaterPlugin.check_for_updates": {
            "name": "check_for_updates",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdaterPlugin.show_updater_window": {
            "name": "show_updater_window",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "release": []
            }
        },
        "UpdaterPlugin.get_settings_widget": {
            "name": "get_settings_widget",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/contrib/__init__.py": {},
    "edp-master/edp/gui/utils.py": {
        "clear_layout": {
            "name": "clear_layout",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "layout": []
            }
        }
    },
    "edp-master/edp/gui/__init__.py": {},
    "edp-master/edp/gui/compiled/edsm_unknown_systems.py": {
        "Ui_Form.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        },
        "Ui_Form.retranslateUi": {
            "name": "retranslateUi",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        }
    },
    "edp-master/edp/gui/compiled/find_nearest_station.py": {
        "Ui_Form.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        },
        "Ui_Form.retranslateUi": {
            "name": "retranslateUi",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        }
    },
    "edp-master/edp/gui/compiled/main_resources.py": {
        "qInitResources": {
            "name": "qInitResources",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "qCleanupResources": {
            "name": "qCleanupResources",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edp-master/edp/gui/compiled/main_window.py": {
        "Ui_MainWindow.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MainWindow": []
            }
        },
        "Ui_MainWindow.retranslateUi": {
            "name": "retranslateUi",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MainWindow": []
            }
        }
    },
    "edp-master/edp/gui/compiled/overlay_window.py": {
        "Ui_Form.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        },
        "Ui_Form.retranslateUi": {
            "name": "retranslateUi",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        }
    },
    "edp-master/edp/gui/compiled/updater_window.py": {
        "Ui_Form.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        },
        "Ui_Form.retranslateUi": {
            "name": "retranslateUi",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Form": []
            }
        }
    },
    "edp-master/edp/gui/compiled/__init__.py": {},
    "edp-master/edp/gui/components/base.py": {
        "JournalEventHandlerMixin.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JournalEventHandlerMixin.on_journal_event_signal": {
            "name": "on_journal_event_signal",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "JournalEventHandlerMixin.on_journal_event": {
            "name": "on_journal_event",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/gui/components/main_window_sections.py": {
        "MainWindowSectionsView.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window": []
            }
        },
        "MainWindowSectionsView.add_component": {
            "name": "add_component",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_cls": [],
                "section": [],
                "enabled": []
            }
        },
        "MainWindowSectionsView.add_horizontal_line": {
            "name": "add_horizontal_line",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindowSectionsView.add_component_on_layout": {
            "name": "add_component_on_layout",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "MainWindowSectionsView.remove_horizontal_line": {
            "name": "remove_horizontal_line",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "MainWindowSectionsView.remove_component_on_layout": {
            "name": "remove_component_on_layout",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "MainWindowSectionsView.on_section_action_toggled": {
            "name": "on_section_action_toggled",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toggled": [],
                "action": [],
                "component": []
            }
        }
    },
    "edp-master/edp/gui/components/materials_collected.py": {
        "MaterialsStorageModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialsStorageModel.add_material": {
            "name": "add_material",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "material": []
            }
        },
        "MaterialsStorageModel.modelReset": {
            "name": "modelReset",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialsStorageModel.data": {
            "name": "data",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "role": []
            }
        },
        "MaterialsStorageModel.rowCount": {
            "name": "rowCount",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialsStorageModel.columnCount": {
            "name": "columnCount",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialsStorageModel.headerData": {
            "name": "headerData",
            "location": 65,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "section": [],
                "orientation": [],
                "role": []
            }
        },
        "MaterialsCollectedComponent.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaterialsCollectedComponent.on_journal_event": {
            "name": "on_journal_event",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/gui/components/simple_events_list.py": {
        "SimpleEventsListComponent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEventsListComponent.on_journal_event": {
            "name": "on_journal_event",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/gui/components/state_overview.py": {
        "StateOverviewComponent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateOverviewComponent.on_set_game_state_signal": {
            "name": "on_set_game_state_signal",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "edp-master/edp/gui/components/__init__.py": {},
    "edp-master/edp/gui/components/overlay_widgets/base.py": {},
    "edp-master/edp/gui/components/overlay_widgets/find_nearest.py": {
        "FindNearestWidget.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindNearestWidget.result_labels": {
            "name": "result_labels",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindNearestWidget.hide_result_labels": {
            "name": "hide_result_labels",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindNearestWidget.show_result_labels": {
            "name": "show_result_labels",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindNearestWidget.search_button_clicked": {
            "name": "search_button_clicked",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/gui/components/overlay_widgets/manager.py": {
        "register": {
            "name": "register",
            "location": 14,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "widget_cls": [
                    "_T0@@"
                ]
            }
        },
        "get_registered_widgets": {
            "name": "get_registered_widgets",
            "location": 20,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {}
        },
        "get_widget_instance": {
            "name": "get_widget_instance",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "widget_cls": []
            }
        }
    },
    "edp-master/edp/gui/components/overlay_widgets/unknown_systems.py": {
        "UnknownSystemsWidget.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownSystemsWidget.on_journal_event": {
            "name": "on_journal_event",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "edp-master/edp/gui/components/overlay_widgets/__init__.py": {},
    "edp-master/edp/gui/forms/main_window.py": {
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "MainWindow.show": {
            "name": "show",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.closeEvent": {
            "name": "closeEvent",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/gui/forms/overlay_window.py": {
        "get_ed_window_handler": {
            "name": "get_ed_window_handler",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_ed_window_rect": {
            "name": "get_ed_window_rect",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "handler": []
            }
        },
        "get_ed_window_handler.callback": {
            "name": "callback",
            "location": 65,
            "return": [],
            "arguments": {
                "hwnd": [],
                "extra": []
            }
        },
        "OverlayWidgetSelector.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layouts": [],
                "widgets": []
            }
        },
        "OverlayWidgetSelector.setup": {
            "name": "setup",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlayWidgetSelector.create_widget_selectors": {
            "name": "create_widget_selectors",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OverlayWidgetSelector._create_widget_selector": {
            "name": "_create_widget_selector",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverlayWidgetSelector._on_selector_text_changed": {
            "name": "_on_selector_text_changed",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "combobox": [],
                "text": []
            }
        },
        "GameOverlayWindow.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOverlayWindow.on_setup_button_toggled": {
            "name": "on_setup_button_toggled",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "GameOverlayWindow.get_layouts": {
            "name": "get_layouts",
            "location": 215,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOverlayWindow.toggle_visibility": {
            "name": "toggle_visibility",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameOverlayWindow.show": {
            "name": "show",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOverlayWindow.on_journal_event": {
            "name": "on_journal_event",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "GameOverlayWindow.enterEvent": {
            "name": "enterEvent",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOverlayWindow.leaveEvent": {
            "name": "leaveEvent",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/gui/forms/settings_window.py": {
        "BaseTab.get_friendly_name": {
            "name": "get_friendly_name",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.link_checkbox": {
            "name": "link_checkbox",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": [],
                "field": [],
                "label": []
            }
        },
        "BaseTab.link_line_edit": {
            "name": "link_line_edit",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": [],
                "field": [],
                "label": [],
                "settype": []
            }
        },
        "BaseTab.link_directory_dialog": {
            "name": "link_directory_dialog",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": [],
                "field": [],
                "label_text": []
            }
        },
        "BaseTab.get_settings_links": {
            "name": "get_settings_links",
            "location": 76,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VLayoutTab.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabGeneral.get_settings_links": {
            "name": "get_settings_links",
            "location": 99,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsWindow.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "SettingsWindow.add_tab_widget": {
            "name": "add_tab_widget",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tab_widget": []
            }
        },
        "BaseTab.link_directory_dialog.on_button_clicked": {
            "name": "on_button_clicked",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "edp-master/edp/gui/forms/updater_window.py": {
        "get_default_installer": {
            "name": "get_default_installer",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "asset_list": []
            }
        },
        "ReleaseDownloaderThread.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_info": []
            }
        },
        "ReleaseDownloaderThread.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseDownloaderThread.install": {
            "name": "install",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "ReleaseDownloaderThread.download_to": {
            "name": "download_to",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "path": []
            }
        },
        "UpdaterWindow.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "release_info": []
            }
        },
        "UpdaterWindow.on_download_progress": {
            "name": "on_download_progress",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "UpdaterWindow.on_download_finished": {
            "name": "on_download_finished",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdaterWindow.on_install_finished": {
            "name": "on_install_finished",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdaterWindow.install_button_clicked": {
            "name": "install_button_clicked",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/edp/gui/forms/__init__.py": {},
    "edp-master/edp/utils/discord_rpc.py": {
        "DiscordRpcClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": []
            }
        },
        "DiscordRpcClient._open_discord_rpc_pipe": {
            "name": "_open_discord_rpc_pipe",
            "location": 34,
            "return": [
                "Optional[BinaryIO]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRpcClient._pipe_file": {
            "name": "_pipe_file",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordRpcClient._send": {
            "name": "_send",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "op": []
            }
        },
        "DiscordRpcClient._read_exactly": {
            "name": "_read_exactly",
            "location": 76,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "DiscordRpcClient._receive": {
            "name": "_receive",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRpcClient._handshake": {
            "name": "_handshake",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRpcClient.request": {
            "name": "request",
            "location": 110,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "op": []
            }
        },
        "DiscordRpcClient.close": {
            "name": "close",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordRpcClient.set_activity": {
            "name": "set_activity",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "activity": []
            }
        }
    },
    "edp-master/edp/utils/github.py": {
        "GithubApi.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_token": []
            }
        },
        "GithubApi.get_releases": {
            "name": "get_releases",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "repo": []
            }
        },
        "GithubApi.get_releases_latest": {
            "name": "get_releases_latest",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "repo": []
            }
        },
        "GithubApi.create_release": {
            "name": "create_release",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "repo": [],
                "tag_name": [],
                "name": [],
                "body": [],
                "draft": [],
                "prerelease": []
            }
        },
        "GithubApi.upload_asset": {
            "name": "upload_asset",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "upload_url": [],
                "filename": [],
                "content_type": [],
                "name": [],
                "label": []
            }
        }
    },
    "edp-master/edp/utils/hypothesis_strategies.py": {
        "make_event": {
            "name": "make_event",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "_name": [],
                "timestamp": []
            }
        },
        "event_strategy": {
            "name": "event_strategy",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "event_name": []
            }
        },
        "material": {
            "name": "material",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "Name": [],
                "Count": []
            }
        },
        "MaterialsEvent": {
            "name": "MaterialsEvent",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "material": [],
                "Raw": [],
                "Manufactured": [],
                "Encoded": []
            }
        },
        "Faction": {
            "name": "Faction",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "Name": [],
                "FactionState": [],
                "Government": [],
                "Influence": []
            }
        },
        "random_keys_removed": {
            "name": "random_keys_removed",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "strategy": []
            }
        },
        "hypothesis_parametrize": {
            "name": "hypothesis_parametrize",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "argspec": [],
                "strategy": [],
                "max_examples": []
            }
        },
        "event_strategy.func": {
            "name": "func",
            "location": 37,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "random_keys_removed.func": {
            "name": "func",
            "location": 147,
            "return": [],
            "arguments": {
                "draw": [],
                "drop_keys": []
            }
        }
    },
    "edp-master/edp/utils/plugins_helpers.py": {
        "BufferedEventsMixin.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedEventsMixin.filter_event": {
            "name": "filter_event",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "BufferedEventsMixin.on_journal_event": {
            "name": "on_journal_event",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "BufferedEventsMixin.buffer_flush_callback": {
            "name": "buffer_flush_callback",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferedEventsMixin.process_buffered_events": {
            "name": "process_buffered_events",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "BufferedEventsMixin.exit_callback": {
            "name": "exit_callback",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RoutingSwitchRegistry.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingSwitchRegistry.register": {
            "name": "register",
            "location": 95,
            "return": [
                "Optional[Callable[([Any], Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingSwitchRegistry.execute": {
            "name": "execute",
            "location": 119,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "routing_key": []
            }
        },
        "RoutingSwitchRegistry.execute_silently": {
            "name": "execute_silently",
            "location": 134,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "routing_key": []
            }
        },
        "RoutingSwitchRegistry.register.decor": {
            "name": "decor",
            "location": 104,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "edp-master/edp/utils/winhotkeys.py": {
        "signal_emit_action": {
            "name": "signal_emit_action",
            "location": 30,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "signal": []
            }
        },
        "signal_emit_action.wrapper": {
            "name": "wrapper",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "KeyMessageDispatchThread.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hotkey_list": []
            }
        },
        "KeyMessageDispatchThread.run": {
            "name": "run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMessageDispatchThread.run.dummy": {
            "name": "dummy",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "edp-master/edp/utils/winpaths.py": {
        "get_known_folder_path": {
            "name": "get_known_folder_path",
            "location": 139,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "known_folder_uid": [],
                "user_handle": []
            }
        },
        "GUID.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        }
    },
    "edp-master/edp/utils/__init__.py": {
        "is_dict_subset": {
            "name": "is_dict_subset",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "source": [],
                "subset": []
            }
        },
        "get_default_journal_path": {
            "name": "get_default_journal_path",
            "location": 23,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {}
        },
        "catcherr": {
            "name": "catcherr",
            "location": 35,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "dict_subset": {
            "name": "dict_subset",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "d": []
            }
        },
        "chunked": {
            "name": "chunked",
            "location": 72,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "l": [],
                "size": []
            }
        },
        "has_keys": {
            "name": "has_keys",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": []
            }
        },
        "drop_keys": {
            "name": "drop_keys",
            "location": 85,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": []
            }
        },
        "map_keys": {
            "name": "map_keys",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "d": [],
                "strict": []
            }
        },
        "to_ed_timestamp": {
            "name": "to_ed_timestamp",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": []
            }
        },
        "from_ed_timestamp": {
            "name": "from_ed_timestamp",
            "location": 114,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "space_distance": {
            "name": "space_distance",
            "location": 122,
            "return": [],
            "arguments": {
                "point1": [],
                "point2": []
            }
        },
        "version_bits": {
            "name": "version_bits",
            "location": 132,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "version": []
            }
        },
        "is_version_newer": {
            "name": "is_version_newer",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "infer_category": {
            "name": "infer_category",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "material_category": []
            }
        },
        "catcherr.decor": {
            "name": "decor",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "edp-master/tests/conftest.py": {
        "fixtures_dir": {
            "name": "fixtures_dir",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "random_journal_dir": {
            "name": "random_journal_dir",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "tempdir": {
            "name": "tempdir",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "atexit_clear": {
            "name": "atexit_clear",
            "location": 32,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "patch_settings_dir": {
            "name": "patch_settings_dir",
            "location": 38,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "clear_settings_instances": {
            "name": "clear_settings_instances",
            "location": 44,
            "return": [],
            "arguments": {
                "patch_settings_dir": [],
                "tempdir": []
            }
        },
        "qapp": {
            "name": "qapp",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "process_events": {
            "name": "process_events",
            "location": 60,
            "return": [],
            "arguments": {
                "qapp": []
            }
        }
    },
    "edp-master/tests/test_buffered_events_mixin.py": {
        "buffered_events_mixin": {
            "name": "buffered_events_mixin",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_process_buffered_events_not_called_on_empty_buffer": {
            "name": "test_process_buffered_events_not_called_on_empty_buffer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "buffered_events_mixin": []
            }
        },
        "test_on_journal_event_filtered_out": {
            "name": "test_on_journal_event_filtered_out",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "buffered_events_mixin": []
            }
        },
        "event": {
            "name": "event",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_on_journal_event_added": {
            "name": "test_on_journal_event_added",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "buffered_events_mixin": [],
                "event": []
            }
        },
        "test_buffer_flush_callback_with_events": {
            "name": "test_buffer_flush_callback_with_events",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "buffered_events_mixin": [],
                "event": []
            }
        },
        "test_exit_callback_triggers_buffer_flush": {
            "name": "test_exit_callback_triggers_buffer_flush",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "buffered_events_mixin": [],
                "event": []
            }
        }
    },
    "edp-master/tests/test_capi.py": {
        "auth_window": {
            "name": "auth_window",
            "location": 13,
            "return": [],
            "arguments": {
                "class_mock": []
            }
        },
        "test_auth_window_show": {
            "name": "test_auth_window_show",
            "location": 23,
            "return": [],
            "arguments": {
                "auth_window": [],
                "url": []
            }
        },
        "test_auth_window_on_url_changed": {
            "name": "test_auth_window_on_url_changed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_window": [],
                "process_events": []
            }
        },
        "test_auth_window_on_url_changed_is_redirect": {
            "name": "test_auth_window_on_url_changed_is_redirect",
            "location": 48,
            "return": [],
            "arguments": {
                "auth_window": [],
                "url": []
            }
        },
        "capi_plugin": {
            "name": "capi_plugin",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "settings_widget": {
            "name": "settings_widget",
            "location": 70,
            "return": [],
            "arguments": {
                "capi_plugin": []
            }
        },
        "capi_manager": {
            "name": "capi_manager",
            "location": 75,
            "return": [],
            "arguments": {
                "capi_plugin": []
            }
        },
        "test_settings_widget_settings_linked": {
            "name": "test_settings_widget_settings_linked",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "settings_widget": []
            }
        },
        "test_settings_widget_login_button_shows_login_window": {
            "name": "test_settings_widget_login_button_shows_login_window",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "capi_plugin": [],
                "settings_widget": [],
                "process_events": []
            }
        },
        "test_update_status_label": {
            "name": "test_update_status_label",
            "location": 99,
            "return": [],
            "arguments": {
                "state": [],
                "text": [],
                "settings_widget": [],
                "capi_plugin": []
            }
        },
        "test_initial_capi_state": {
            "name": "test_initial_capi_state",
            "location": 116,
            "return": [],
            "arguments": {
                "at": [],
                "rt": [],
                "expected_state": []
            }
        },
        "test_manager_access_token_expired": {
            "name": "test_manager_access_token_expired",
            "location": 132,
            "return": [],
            "arguments": {
                "ac": [],
                "exires_in": [],
                "expired": [],
                "request": []
            }
        }
    },
    "edp-master/tests/test_discord_plugin.py": {
        "client_mock": {
            "name": "client_mock",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "discord_plugin": {
            "name": "discord_plugin",
            "location": 14,
            "return": [],
            "arguments": {
                "client_mock": []
            }
        },
        "test_plugin_enabled": {
            "name": "test_plugin_enabled",
            "location": 21,
            "return": [],
            "arguments": {
                "enabled": [],
                "discord_plugin": []
            }
        },
        "test_set_state_sets_timestamp": {
            "name": "test_set_state_sets_timestamp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": []
            }
        },
        "test_on_game_state_changed_hides_location": {
            "name": "test_on_game_state_changed_hides_location",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": []
            }
        },
        "test_update_discord_state": {
            "name": "test_update_discord_state",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        },
        "test_update_discord_state_no_state": {
            "name": "test_update_discord_state_no_state",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        },
        "test_update_discord_state_assets_large_text_set": {
            "name": "test_update_discord_state_assets_large_text_set",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        },
        "test_update_discord_state_assets_large_image_set": {
            "name": "test_update_discord_state_assets_large_image_set",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        },
        "test_update_discord_state_assets_small_text_set": {
            "name": "test_update_discord_state_assets_small_text_set",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        },
        "test_update_discord_state_assets_small_image_set": {
            "name": "test_update_discord_state_assets_small_image_set",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_plugin": [],
                "client_mock": []
            }
        }
    },
    "edp-master/tests/test_eddn.py": {
        "test_eddn_schema_to_dict": {
            "name": "test_eddn_schema_to_dict",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "eddn_plugin": {
            "name": "eddn_plugin",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_plugin_enabled": {
            "name": "test_plugin_enabled",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "eddn_plugin": []
            }
        },
        "test_event_filtered": {
            "name": "test_event_filtered",
            "location": 60,
            "return": [],
            "arguments": {
                "eddn_plugin": [],
                "event_name": [],
                "filtered": []
            }
        },
        "test_process_buffered_events": {
            "name": "test_process_buffered_events",
            "location": 70,
            "return": [],
            "arguments": {
                "eddn_plugin": [],
                "event": []
            }
        },
        "test_process_event": {
            "name": "test_process_event",
            "location": 81,
            "return": [],
            "arguments": {
                "eddn_plugin": [],
                "event": [],
                "commander_name": []
            }
        }
    },
    "edp-master/tests/test_entities.py": {
        "test_entity_set_sentinel": {
            "name": "test_entity_set_sentinel",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_entity_changed": {
            "name": "test_entity_changed",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_entity_reset_changed": {
            "name": "test_entity_reset_changed",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_entity_clear": {
            "name": "test_entity_clear",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_material_sum": {
            "name": "test_material_sum",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_material_sub": {
            "name": "test_material_sub",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_material_sub_below_zero": {
            "name": "test_material_sub_below_zero",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_material_sum_different_materials": {
            "name": "test_material_sum_different_materials",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_material_storage_add_material": {
            "name": "test_material_storage_add_material",
            "location": 111,
            "return": [],
            "arguments": {
                "name": [],
                "count": [],
                "category": []
            }
        },
        "test_material_storage_add_material_failed_preconditions": {
            "name": "test_material_storage_add_material_failed_preconditions",
            "location": 119,
            "return": [],
            "arguments": {
                "name": [],
                "count": [],
                "category": []
            }
        },
        "test_material_storage_remove_material": {
            "name": "test_material_storage_remove_material",
            "location": 133,
            "return": [],
            "arguments": {
                "existing": [],
                "remove": [],
                "result": [],
                "name": [],
                "category": []
            }
        },
        "test_material_storage_shortcut_access": {
            "name": "test_material_storage_shortcut_access",
            "location": 140,
            "return": [],
            "arguments": {
                "category": []
            }
        }
    },
    "edp-master/tests/test_gamestate.py": {
        "plugin": {
            "name": "plugin",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_update_state_mutation_not_registered": {
            "name": "test_update_state_mutation_not_registered",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_update_state_mutation_run": {
            "name": "test_update_state_mutation_run",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_update_state_mutation_run_error": {
            "name": "test_update_state_mutation_run_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_set_initial_state": {
            "name": "test_set_initial_state",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_on_journal_event_changed_state": {
            "name": "test_on_journal_event_changed_state",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_on_journal_event_state_not_changed": {
            "name": "test_on_journal_event_state_not_changed",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_on_journal_event_changed_state.mutation": {
            "name": "mutation",
            "location": 72,
            "return": [],
            "arguments": {
                "event": [],
                "state": []
            }
        }
    },
    "edp-master/tests/test_gamestate_mutations.py": {
        "gamestatedata": {
            "name": "gamestatedata",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_commander_event": {
            "name": "test_commander_event",
            "location": 14,
            "return": [],
            "arguments": {
                "request": [],
                "event": []
            }
        },
        "test_materials_event": {
            "name": "test_materials_event",
            "location": 24,
            "return": [],
            "arguments": {
                "request": [],
                "event": []
            }
        }
    },
    "edp-master/tests/test_github_api.py": {
        "test_no_token": {
            "name": "test_no_token",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_with_token": {
            "name": "test_with_token",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_get_releases": {
            "name": "test_get_releases",
            "location": 31,
            "return": [],
            "arguments": {
                "owner": [],
                "repo": [],
                "api": []
            }
        },
        "test_get_releases_latest": {
            "name": "test_get_releases_latest",
            "location": 39,
            "return": [],
            "arguments": {
                "owner": [],
                "repo": [],
                "api": []
            }
        },
        "test_create_release": {
            "name": "test_create_release",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        },
        "test_upload_asset": {
            "name": "test_upload_asset",
            "location": 57,
            "return": [],
            "arguments": {
                "api": [],
                "tempdir": [],
                "label": []
            }
        }
    },
    "edp-master/tests/test_gui_utils.py": {
        "test_clear_layout": {
            "name": "test_clear_layout",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edp-master/tests/test_inara.py": {
        "inara_plugin": {
            "name": "inara_plugin",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_is_enabled": {
            "name": "test_is_enabled",
            "location": 21,
            "return": [],
            "arguments": {
                "api_key": [],
                "enabled": [],
                "result": [],
                "inara_plugin": []
            }
        },
        "mock_callback": {
            "name": "mock_callback",
            "location": 30,
            "return": [],
            "arguments": {
                "inara_plugin": []
            }
        },
        "mock_api": {
            "name": "mock_api",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "mock_gamestate": {
            "name": "mock_gamestate",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "event": {
            "name": "event",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_process_event_returns_none": {
            "name": "test_process_event_returns_none",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_callback": [],
                "event": []
            }
        },
        "test_process_event_returns_single_event": {
            "name": "test_process_event_returns_single_event",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_callback": [],
                "event": []
            }
        },
        "test_process_event_returns_multiple_evets": {
            "name": "test_process_event_returns_multiple_evets",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_callback": [],
                "event": []
            }
        },
        "test_process_buffered_events": {
            "name": "test_process_buffered_events",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_api": [],
                "mock_callback": [],
                "event": [],
                "mock_gamestate": []
            }
        },
        "test_process_buffered_events_error_while_processing": {
            "name": "test_process_buffered_events_error_while_processing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_api": [],
                "mock_callback": [],
                "event": [],
                "mock_gamestate": []
            }
        },
        "test_process_buffered_events_error_sending_api": {
            "name": "test_process_buffered_events_error_sending_api",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "inara_plugin": [],
                "mock_api": [],
                "mock_callback": [],
                "event": [],
                "mock_gamestate": []
            }
        },
        "test_old_event_not_processed": {
            "name": "test_old_event_not_processed",
            "location": 110,
            "return": [],
            "arguments": {
                "delta": [],
                "result": [],
                "inara_plugin": [],
                "event": []
            }
        }
    },
    "edp-master/tests/test_journal.py": {
        "format_dt": {
            "name": "format_dt",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "dt": []
            }
        },
        "serialize_event": {
            "name": "serialize_event",
            "location": 41,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "event": [
                    "_T0@@"
                ]
            }
        },
        "serialize_events": {
            "name": "serialize_events",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "events": []
            }
        },
        "append_line": {
            "name": "append_line",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "line": []
            }
        },
        "journal_reader": {
            "name": "journal_reader",
            "location": 57,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "journal_live_event_thread": {
            "name": "journal_live_event_thread",
            "location": 62,
            "return": [],
            "arguments": {
                "journal_reader": []
            }
        },
        "journal_event_signal_mock": {
            "name": "journal_event_signal_mock",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_get_latest_file": {
            "name": "test_get_latest_file",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_no_files": {
            "name": "test_get_latest_file_no_files",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_reader": []
            }
        },
        "test_get_latest_file_two_files": {
            "name": "test_get_latest_file_two_files",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_two_files_not_journal": {
            "name": "test_get_latest_file_two_files_not_journal",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_events": {
            "name": "test_get_latest_file_events",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_events_no_files": {
            "name": "test_get_latest_file_events_no_files",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_events_bad_event": {
            "name": "test_get_latest_file_events_bad_event",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_latest_file_events_append": {
            "name": "test_get_latest_file_events_append",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_process_event": {
            "name": "test_process_event",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_event_bad_timestamp": {
            "name": "test_process_event_bad_timestamp",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_event_no_timestamp": {
            "name": "test_process_event_no_timestamp",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_event_no_event": {
            "name": "test_process_event_no_event",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_event_malformed_line": {
            "name": "test_process_event_malformed_line",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_journal_live_event_thread_no_files": {
            "name": "test_journal_live_event_thread_no_files",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_live_event_thread": [],
                "journal_event_signal_mock": []
            }
        },
        "test_journal_live_event_thread_file_appeared": {
            "name": "test_journal_live_event_thread_file_appeared",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_live_event_thread": [],
                "tempdir": [],
                "journal_event_signal_mock": []
            }
        },
        "test_journal_live_event_skip_existing_file_content": {
            "name": "test_journal_live_event_skip_existing_file_content",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_live_event_thread": [],
                "tempdir": [],
                "journal_event_signal_mock": []
            }
        },
        "test_get_file_event_path_not_exists": {
            "name": "test_get_file_event_path_not_exists",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_file_event_bad_content": {
            "name": "test_get_file_event_bad_content",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_get_file_event_parsed": {
            "name": "test_get_file_event_parsed",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": [],
                "journal_reader": []
            }
        },
        "test_filter_file_event_first_time": {
            "name": "test_filter_file_event_first_time",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_reader": []
            }
        },
        "test_filter_file_event_second_time_same_dt": {
            "name": "test_filter_file_event_second_time_same_dt",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_reader": []
            }
        },
        "test_filter_file_event_second_time_newer": {
            "name": "test_filter_file_event_second_time_newer",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "journal_reader": []
            }
        },
        "test_get_game_version_info_no_event": {
            "name": "test_get_game_version_info_no_event",
            "location": 286,
            "return": [],
            "arguments": {
                "journal_reader": [],
                "events_list": []
            }
        },
        "test_get_game_version_info": {
            "name": "test_get_game_version_info",
            "location": 294,
            "return": [],
            "arguments": {
                "journal_reader": [],
                "fields": []
            }
        }
    },
    "edp-master/tests/test_plugins.py": {
        "test_mark_function": {
            "name": "test_mark_function",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_function_options": {
            "name": "test_mark_function_options",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_function_of_class": {
            "name": "test_mark_function_of_class",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_marked_methods": {
            "name": "test_get_marked_methods",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_module_from_path": {
            "name": "test_get_module_from_path",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugin_classes_from_module": {
            "name": "test_get_plugin_classes_from_module",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_dir": {
            "name": "test_get_plugins_cls_from_dir",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_dir_nonexistent": {
            "name": "test_get_plugins_cls_from_dir_nonexistent",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_path": {
            "name": "test_get_plugins_cls_from_path",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_path_nonexistent": {
            "name": "test_get_plugins_cls_from_path_nonexistent",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_file": {
            "name": "test_get_plugins_cls_from_file",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_get_plugins_cls_from_file_nonexistent": {
            "name": "test_get_plugins_cls_from_file_nonexistent",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_plugin_loader_load_plugins": {
            "name": "test_plugin_loader_load_plugins",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "tempdir": []
            }
        },
        "test_scheduled_decorator": {
            "name": "test_scheduled_decorator",
            "location": 139,
            "return": [],
            "arguments": {
                "plugin_enabled": [],
                "interval": []
            }
        },
        "test_scheduled_decorator_bad_interval": {
            "name": "test_scheduled_decorator_bad_interval",
            "location": 151,
            "return": [],
            "arguments": {
                "interval": []
            }
        },
        "test_bind_signal_decorator": {
            "name": "test_bind_signal_decorator",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_signal_decorator_no_signals": {
            "name": "test_bind_signal_decorator_no_signals",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_plugin_manager_get_plugin": {
            "name": "test_plugin_manager_get_plugin",
            "location": 180,
            "return": [],
            "arguments": {
                "plugin": [],
                "plugins_list": [],
                "result": []
            }
        },
        "test_plugin_manager_get_marked_methods": {
            "name": "test_plugin_manager_get_marked_methods",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_scheduled_methods_threads": {
            "name": "test_get_scheduled_methods_threads",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_plugin_annotation_references": {
            "name": "test_set_plugin_annotation_references",
            "location": 215,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_get_settings_widgets": {
            "name": "test_get_settings_widgets",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_plugin_signals": {
            "name": "test_register_plugin_signals",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback_wrapper_plugin_disabled": {
            "name": "test_callback_wrapper_plugin_disabled",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback_wrapper_plugin_enabled": {
            "name": "test_callback_wrapper_plugin_enabled",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark_function.foo": {
            "name": "foo",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_mark_function_options.foo": {
            "name": "foo",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_scheduled_decorator.foo": {
            "name": "foo",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_bind_signal_decorator.foo": {
            "name": "foo",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_mark_function_of_class.Foo.foo": {
            "name": "foo",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_get_marked_methods.Foo.foo": {
            "name": "foo",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_scheduled_decorator_bad_interval.foo": {
            "name": "foo",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_bind_signal_decorator_no_signals.foo": {
            "name": "foo",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_plugin_manager_get_marked_methods.SomePlugin.test_method": {
            "name": "test_method",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_get_scheduled_methods_threads.SomePlugin.test_method": {
            "name": "test_method",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_register_plugin_signals.Plugin1.method": {
            "name": "method",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/tests/test_plugin_edsm.py": {
        "test_edsm_settings_fields_defaults": {
            "name": "test_edsm_settings_fields_defaults",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "edsm_api": {
            "name": "edsm_api",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_api_discarded_events": {
            "name": "test_api_discarded_events",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "edsm_api": []
            }
        },
        "test_journal_event": {
            "name": "test_journal_event",
            "location": 39,
            "return": [],
            "arguments": {
                "edsm_api": [],
                "events": [],
                "status_code": []
            }
        },
        "test_get_system": {
            "name": "test_get_system",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "edsm_api": []
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 62,
            "return": [],
            "arguments": {
                "atexit_clear": [],
                "tempdir": []
            }
        },
        "test_plugin_enabled": {
            "name": "test_plugin_enabled",
            "location": 72,
            "return": [],
            "arguments": {
                "plugin": [],
                "api_key": [],
                "commander_name": [],
                "enabled": []
            }
        },
        "test_on_game_state_set_bind": {
            "name": "test_on_game_state_set_bind",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_on_game_state_set_sets_commander_name_setting": {
            "name": "test_on_game_state_set_sets_commander_name_setting",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "test_on_game_state_set_sets_commander_name_setting_already_set": {
            "name": "test_on_game_state_set_sets_commander_name_setting_already_set",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": []
            }
        },
        "mock_api": {
            "name": "mock_api",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_journal_event_discarded": {
            "name": "test_journal_event_discarded",
            "location": 116,
            "return": [],
            "arguments": {
                "discarded_events": [],
                "event_name": [],
                "is_discarded": [],
                "plugin": [],
                "mock_api": []
            }
        },
        "test_push_events_empty_buffer": {
            "name": "test_push_events_empty_buffer",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [],
                "plugin": []
            }
        },
        "test_patch_event": {
            "name": "test_patch_event",
            "location": 139,
            "return": [],
            "arguments": {
                "plugin": [],
                "event_str": []
            }
        },
        "state": {
            "name": "state",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "test_push_events_event_patched_with_state": {
            "name": "test_push_events_event_patched_with_state",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [],
                "plugin": [],
                "state": []
            }
        },
        "test_process_buffered_events_retry_on_connection_error": {
            "name": "test_process_buffered_events_retry_on_connection_error",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [],
                "plugin": [],
                "state": []
            }
        },
        "test_process_buffered_events_chunked": {
            "name": "test_process_buffered_events_chunked",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_api": [],
                "plugin": [],
                "state": []
            }
        }
    },
    "edp-master/tests/test_routing_registry.py": {
        "registry": {
            "name": "registry",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_registry_no_callback_execute": {
            "name": "test_registry_no_callback_execute",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_no_callback_execute_silent": {
            "name": "test_registry_no_callback_execute_silent",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_callback_execute": {
            "name": "test_registry_callback_execute",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_register_callback": {
            "name": "test_registry_register_callback",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_register_callback_as_decor": {
            "name": "test_registry_register_callback_as_decor",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        },
        "test_registry_register_several_callbacks": {
            "name": "test_registry_register_several_callbacks",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "registry": []
            }
        }
    },
    "edp-master/tests/test_settings.py": {
        "test_settings_singleton": {
            "name": "test_settings_singleton",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_settings_saved": {
            "name": "test_settings_saved",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_access_unknown_attr": {
            "name": "test_access_unknown_attr",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_unknown_attr": {
            "name": "test_set_unknown_attr",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_settings_none_field": {
            "name": "test_settings_none_field",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "edp-master/tests/test_signals.py": {
        "test_check_signature_no_args": {
            "name": "test_check_signature_no_args",
            "location": 13,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_check_signature_arg_no_annotation": {
            "name": "test_check_signature_arg_no_annotation",
            "location": 25,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_check_signature_some_args": {
            "name": "test_check_signature_some_args",
            "location": 39,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_signal_bind_func_no_args": {
            "name": "test_signal_bind_func_no_args",
            "location": 49,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_signal_bind_func_arg_no_annotation": {
            "name": "test_signal_bind_func_arg_no_annotation",
            "location": 71,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_signal_bind_func_some_args": {
            "name": "test_signal_bind_func_some_args",
            "location": 95,
            "return": [],
            "arguments": {
                "signature": [],
                "result": []
            }
        },
        "test_signal_bind_as_decor": {
            "name": "test_signal_bind_as_decor",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal_emit": {
            "name": "test_signal_emit",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal_emit_unmatching_data_signature": {
            "name": "test_signal_emit_unmatching_data_signature",
            "location": 136,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_execute_signal_item": {
            "name": "test_execute_signal_item",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal_execution_e2e": {
            "name": "test_signal_execution_e2e",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal_bind_nonstrict": {
            "name": "test_signal_bind_nonstrict",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signal_emit_eager": {
            "name": "test_signal_emit_eager",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_signature_no_args.foo": {
            "name": "foo",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_check_signature_arg_no_annotation.foo": {
            "name": "foo",
            "location": 26,
            "return": [],
            "arguments": {
                "bar": []
            }
        },
        "test_check_signature_some_args.foo": {
            "name": "foo",
            "location": 40,
            "return": [],
            "arguments": {
                "bar": [],
                "baz": [],
                "test": []
            }
        },
        "test_signal_bind_func_no_args.foo": {
            "name": "foo",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_signal_bind_func_arg_no_annotation.foo": {
            "name": "foo",
            "location": 72,
            "return": [],
            "arguments": {
                "bar": []
            }
        },
        "test_signal_bind_func_some_args.foo": {
            "name": "foo",
            "location": 96,
            "return": [],
            "arguments": {
                "bar": [],
                "baz": [],
                "test": []
            }
        },
        "test_signal_bind_as_decor.foo": {
            "name": "foo",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_signal_emit.foo": {
            "name": "foo",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_signal_emit_unmatching_data_signature.foo": {
            "name": "foo",
            "location": 137,
            "return": [],
            "arguments": {
                "baz": [],
                "bar": []
            }
        },
        "test_signal_execution_e2e.test_func": {
            "name": "test_func",
            "location": 162,
            "return": [],
            "arguments": {
                "foo": [],
                "bar": []
            }
        }
    },
    "edp-master/tests/test_threads.py": {
        "test_stoppable_thread_starts": {
            "name": "test_stoppable_thread_starts",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stoppable_thread_stops": {
            "name": "test_stoppable_thread_stops",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stoppable_thread_contextmanager": {
            "name": "test_stoppable_thread_contextmanager",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stoppable_thread_sleep": {
            "name": "test_stoppable_thread_sleep",
            "location": 56,
            "return": [],
            "arguments": {
                "interval": []
            }
        },
        "test_interval_runner_thread": {
            "name": "test_interval_runner_thread",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interval_runner_thread_exception": {
            "name": "test_interval_runner_thread_exception",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_start_threads": {
            "name": "test_thread_manager_start_threads",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_stop_threads": {
            "name": "test_thread_manager_stop_threads",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_start_threads_exception": {
            "name": "test_thread_manager_start_threads_exception",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_stop_threads_exception": {
            "name": "test_thread_manager_stop_threads_exception",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_contextmanager": {
            "name": "test_thread_manager_contextmanager",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interval_runner_thread_skipfirst": {
            "name": "test_interval_runner_thread_skipfirst",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_starts_threads_if_started": {
            "name": "test_thread_manager_starts_threads_if_started",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_manager_add_interval_thread": {
            "name": "test_thread_manager_add_interval_thread",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ThreadTest.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadTest.run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_stoppable_thread_sleep.MyTestThread.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "edp-master/tests/test_utils.py": {
        "test_is_dict_subset": {
            "name": "test_is_dict_subset",
            "location": 17,
            "return": [],
            "arguments": {
                "source": [],
                "subset": [],
                "result": []
            }
        },
        "test_catcherr": {
            "name": "test_catcherr",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subset": {
            "name": "test_subset",
            "location": 37,
            "return": [],
            "arguments": {
                "d": [],
                "k": [],
                "result": []
            }
        },
        "test_subset_strict": {
            "name": "test_subset_strict",
            "location": 47,
            "return": [],
            "arguments": {
                "d": [],
                "k": [],
                "result": [],
                "raises": []
            }
        },
        "test_has_keys": {
            "name": "test_has_keys",
            "location": 61,
            "return": [],
            "arguments": {
                "d": [],
                "keys": [],
                "result": []
            }
        },
        "test_map_keys": {
            "name": "test_map_keys",
            "location": 72,
            "return": [],
            "arguments": {
                "d": [],
                "keys_map": [],
                "result": []
            }
        },
        "test_map_keys_strict": {
            "name": "test_map_keys_strict",
            "location": 80,
            "return": [],
            "arguments": {
                "d": [],
                "keys_map": []
            }
        },
        "test_version_bits": {
            "name": "test_version_bits",
            "location": 93,
            "return": [],
            "arguments": {
                "version_string": [],
                "version": []
            }
        },
        "test_is_version_newer": {
            "name": "test_is_version_newer",
            "location": 105,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "newer": []
            }
        },
        "test_space_distance": {
            "name": "test_space_distance",
            "location": 112,
            "return": [],
            "arguments": {
                "p1": [],
                "p2": [],
                "result": []
            }
        },
        "test_chunked": {
            "name": "test_chunked",
            "location": 124,
            "return": [],
            "arguments": {
                "seq": [],
                "size": [],
                "result": []
            }
        },
        "test_drop_keys": {
            "name": "test_drop_keys",
            "location": 136,
            "return": [],
            "arguments": {
                "d": [],
                "keys": [],
                "result": []
            }
        },
        "test_infer_category": {
            "name": "test_infer_category",
            "location": 154,
            "return": [],
            "arguments": {
                "material_category": [],
                "category": []
            }
        }
    },
    "edp-master/tests/__init__.py": {}
}
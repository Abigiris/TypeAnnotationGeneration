{
    "eth2.0-deposit-tooling-master/deposit.py": {
        "get_args": {
            "name": "get_args",
            "location": 26,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "generate_mnemonic": {
            "name": "generate_mnemonic",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "calculate_credentials": {
            "name": "calculate_credentials",
            "location": 44,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "mnemonic": [],
                "password": [],
                "num_validators": []
            }
        },
        "save_keystores": {
            "name": "save_keystores",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [],
                "folder": [],
                "save_withdrawal_keys": []
            }
        },
        "save_deposit_data": {
            "name": "save_deposit_data",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [],
                "file": []
            }
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "save_keystores.save_credentials": {
            "name": "save_credentials",
            "location": 56,
            "return": [],
            "arguments": {
                "cred_type": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/keystores.py": {
        "to_bytes": {
            "name": "to_bytes",
            "location": 21,
            "return": [
                "Union[(bytes, _T0)]"
            ],
            "arguments": {
                "obj": [
                    "_T0@@"
                ]
            }
        },
        "BytesDataclass.__post_init__": {
            "name": "__post_init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesDataclass.as_json": {
            "name": "as_json",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreCrypto.from_json": {
            "name": "from_json",
            "location": 55,
            "return": [
                "_TKeystoreCrypto@@KeystoreCrypto@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeystoreCrypto]"
                ],
                "json_dict": []
            }
        },
        "Keystore.kdf": {
            "name": "kdf",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keystore.save": {
            "name": "save",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Keystore.open": {
            "name": "open",
            "location": 78,
            "return": [
                "_TKeystore@@Keystore@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeystore]"
                ],
                "file": []
            }
        },
        "Keystore.from_json": {
            "name": "from_json",
            "location": 83,
            "return": [
                "_TKeystore@@Keystore@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeystore]"
                ],
                "json_str": []
            }
        },
        "Keystore.encrypt": {
            "name": "encrypt",
            "location": 93,
            "return": [
                "_TKeystore@@Keystore@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeystore]"
                ]
            }
        },
        "Keystore.decrypt": {
            "name": "decrypt",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/key_derivation/mnemonic.py": {
        "get_word": {
            "name": "get_word",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "index": []
            }
        },
        "get_seed": {
            "name": "get_seed",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_mnemonic": {
            "name": "get_mnemonic",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "entropy": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/key_derivation/path.py": {
        "path_to_nodes": {
            "name": "path_to_nodes",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "path": []
            }
        },
        "mnemonic_and_path_to_key": {
            "name": "mnemonic_and_path_to_key",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "mnemonic": [],
                "password": [],
                "path": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/key_derivation/tree.py": {
        "flip_bits": {
            "name": "flip_bits",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "input": []
            }
        },
        "IKM_to_lamport_SK": {
            "name": "IKM_to_lamport_SK",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "parent_SK_to_lamport_PK": {
            "name": "parent_SK_to_lamport_PK",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "HKDF_mod_r": {
            "name": "HKDF_mod_r",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "derive_child_SK": {
            "name": "derive_child_SK",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "derive_master_SK": {
            "name": "derive_master_SK",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "seed": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/key_derivation/__init__.py": {},
    "eth2.0-deposit-tooling-master/tests/test_keystores.py": {
        "test_json_serialization": {
            "name": "test_json_serialization",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_test_vectors": {
            "name": "test_encrypt_decrypt_test_vectors",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generated_keystores": {
            "name": "test_generated_keystores",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_pbkdf2_random_iv": {
            "name": "test_encrypt_decrypt_pbkdf2_random_iv",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_scrypt_random_iv": {
            "name": "test_encrypt_decrypt_scrypt_random_iv",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eth2.0-deposit-tooling-master/tests/__init__.py": {},
    "eth2.0-deposit-tooling-master/tests/test_key_derivation/test_full_tree_kdf.py": {
        "test_flip_bits": {
            "name": "test_flip_bits",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_IKM_to_lamport_SK": {
            "name": "test_IKM_to_lamport_SK",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parent_SK_to_lamport_PK": {
            "name": "test_parent_SK_to_lamport_PK",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_HKDF_mod_r": {
            "name": "test_HKDF_mod_r",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eth2.0-deposit-tooling-master/tests/test_key_derivation/test_mnemonic.py": {
        "test_bip39": {
            "name": "test_bip39",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eth2.0-deposit-tooling-master/tests/test_key_derivation/test_tree_kdf.py": {
        "test_derive_master_SK": {
            "name": "test_derive_master_SK",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_derive_child_SK": {
            "name": "test_derive_child_SK",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eth2.0-deposit-tooling-master/tests/test_key_derivation/__init__.py": {},
    "eth2.0-deposit-tooling-master/utils/bls.py": {
        "compute_domain": {
            "name": "compute_domain",
            "location": 26,
            "return": [
                "utils.typing.Domain"
            ],
            "arguments": {
                "domain_type": [],
                "fork_version": []
            }
        },
        "compute_signing_root": {
            "name": "compute_signing_root",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "ssz_object": [],
                "domain": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/utils/constants.py": {},
    "eth2.0-deposit-tooling-master/utils/crypto.py": {
        "SHA256": {
            "name": "SHA256",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "scrypt": {
            "name": "scrypt",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "PBKDF2": {
            "name": "PBKDF2",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "HKDF": {
            "name": "HKDF",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "AES_128_CTR": {
            "name": "AES_128_CTR",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "eth2.0-deposit-tooling-master/utils/merkle_minimal.py": {
        "calc_merkle_tree_from_leaves": {
            "name": "calc_merkle_tree_from_leaves",
            "location": 11,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "values": [],
                "layer_count": []
            }
        },
        "get_merkle_root": {
            "name": "get_merkle_root",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "values": [],
                "pad_to": []
            }
        },
        "get_merkle_proof": {
            "name": "get_merkle_proof",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "tree": [],
                "item_index": []
            }
        },
        "merkleize_chunks": {
            "name": "merkleize_chunks",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "chunks": [],
                "pad_to": []
            }
        },
        "merkleize_chunks.merge": {
            "name": "merge",
            "location": 43,
            "return": [],
            "arguments": {
                "h": [],
                "i": []
            }
        }
    },
    "eth2.0-deposit-tooling-master/utils/typing.py": {},
    "eth2.0-deposit-tooling-master/utils/__init__.py": {}
}
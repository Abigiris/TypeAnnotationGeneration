{
    "falcon-http-hydra-master/cli.py": {
        "startserver": {
            "name": "startserver",
            "location": 26,
            "return": [],
            "arguments": {
                "adduser": [],
                "api": [],
                "auth": [],
                "hydradoc": [],
                "port": [],
                "serve": []
            }
        }
    },
    "falcon-http-hydra-master/doc.py": {},
    "falcon-http-hydra-master/main.py": {},
    "falcon-http-hydra-master/setup.py": {},
    "falcon-http-hydra-master/examples/drones/doc_gen.py": {
        "doc_gen": {
            "name": "doc_gen",
            "location": 6,
            "return": [
                "hydrus.hydraspec.doc_writer.HydraDoc"
            ],
            "arguments": {
                "API": [],
                "BASE_URL": []
            }
        }
    },
    "falcon-http-hydra-master/examples/subsystem/spacecraft_parsed_classes.py": {},
    "falcon-http-hydra-master/examples/subsystem/spacecraft_vocab_jsonld.py": {},
    "falcon-http-hydra-master/examples/subsystem/subsystem_parsed_classes.py": {},
    "falcon-http-hydra-master/examples/subsystem/subsystem_vocab_jsonld.py": {},
    "falcon-http-hydra-master/examples/subsystem/__init__.py": {},
    "falcon-http-hydra-master/hydrus/app.py": {
        "validObject": {
            "name": "validObject",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": []
            }
        },
        "failed_authentication": {
            "name": "failed_authentication",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": []
            }
        },
        "set_response_headers": {
            "name": "set_response_headers",
            "location": 29,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "resp": [
                    "_T0@@"
                ],
                "ct": [],
                "headers": [],
                "status_code": []
            }
        },
        "hydrafy": {
            "name": "hydrafy",
            "location": 50,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "resp": [],
                "object_": [
                    "_T1@@"
                ]
            }
        },
        "checkEndpoint": {
            "name": "checkEndpoint",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "resp": [],
                "method": [],
                "type_": []
            }
        },
        "getType": {
            "name": "getType",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": [],
                "class_type": [],
                "method": []
            }
        },
        "checkClassOp": {
            "name": "checkClassOp",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": [],
                "class_type": [],
                "method": []
            }
        },
        "app_factory": {
            "name": "app_factory",
            "location": 504,
            "return": [
                "Any"
            ],
            "arguments": {
                "API_NAME": [],
                "gsm": []
            }
        },
        "Index.on_get": {
            "name": "on_get",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "Vocab.on_get": {
            "name": "on_get",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "Entrypoint.on_get": {
            "name": "on_get",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "Item.on_get": {
            "name": "on_get",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "id_": [],
                "type_": []
            }
        },
        "Item.on_post": {
            "name": "on_post",
            "location": 149,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "id_": [],
                "type_": []
            }
        },
        "Item.on_put": {
            "name": "on_put",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "id_": [],
                "type_": []
            }
        },
        "Item.on_delete": {
            "name": "on_delete",
            "location": 246,
            "return": [
                "Optional[_T1]"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "id_": [],
                "type_": []
            }
        },
        "ItemCollection.on_get": {
            "name": "on_get",
            "location": 287,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "type_": []
            }
        },
        "ItemCollection.on_put": {
            "name": "on_put",
            "location": 327,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "type_": []
            }
        },
        "ItemCollection.on_post": {
            "name": "on_post",
            "location": 402,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "type_": []
            }
        },
        "ItemCollection.on_delete": {
            "name": "on_delete",
            "location": 446,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "type_": []
            }
        },
        "Contexts.on_get": {
            "name": "on_get",
            "location": 484,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [
                    "_T1@@"
                ],
                "category": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/utils.py": {
        "get_doc": {
            "name": "get_doc",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": []
            }
        },
        "get_authentication": {
            "name": "get_authentication",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": []
            }
        },
        "get_api_name": {
            "name": "get_api_name",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": []
            }
        },
        "get_hydrus_server_url": {
            "name": "get_hydrus_server_url",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": []
            }
        },
        "get_session": {
            "name": "get_session",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "resp": []
            }
        },
        "Getter_setter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_session": [],
                "hydrus_server_url": [],
                "api_name": [],
                "api_doc": [],
                "authentication": []
            }
        },
        "Getter_setter.process_request": {
            "name": "process_request",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/__init__.py": {},
    "falcon-http-hydra-master/hydrus/data/crud.py": {
        "get": {
            "name": "get",
            "location": 19,
            "return": [
                "dict"
            ],
            "arguments": {
                "id_": [],
                "type_": [],
                "api_name": [],
                "session": [],
                "recursive": []
            }
        },
        "insert": {
            "name": "insert",
            "location": 71,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "object_": [],
                "session": [],
                "id_": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [],
                "type_": [],
                "session": []
            }
        },
        "update": {
            "name": "update",
            "location": 184,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "id_": [
                    "_T0@@"
                ],
                "type_": [],
                "object_": [],
                "session": [],
                "api_name": []
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 204,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "API_NAME": [],
                "type_": [],
                "session": []
            }
        },
        "get_single": {
            "name": "get_single",
            "location": 232,
            "return": [
                "dict"
            ],
            "arguments": {
                "type_": [],
                "api_name": [],
                "session": []
            }
        },
        "insert_single": {
            "name": "insert_single",
            "location": 250,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "object_": [],
                "session": []
            }
        },
        "update_single": {
            "name": "update_single",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "object_": [],
                "session": [],
                "api_name": []
            }
        },
        "delete_single": {
            "name": "delete_single",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [],
                "session": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/db_models.py": {
        "RDFClass.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceProperty.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProperty.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphCAC.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIAC.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIII.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphIIT.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/doc_parse.py": {
        "get_classes": {
            "name": "get_classes",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "apidoc": []
            }
        },
        "get_all_properties": {
            "name": "get_all_properties",
            "location": 21,
            "return": [
                "set"
            ],
            "arguments": {
                "classes": []
            }
        },
        "insert_classes": {
            "name": "insert_classes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "classes": [],
                "session": []
            }
        },
        "insert_properties": {
            "name": "insert_properties",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "properties": [],
                "session": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/exceptions.py": {
        "ClassNotFound.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "ClassNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 13,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceNotFound.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "id_": []
            }
        },
        "InstanceNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 26,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyNotFound.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "PropertyNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 41,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceExists.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "id_": []
            }
        },
        "InstanceExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 54,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotInstanceProperty.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "NotInstanceProperty.get_HTTP": {
            "name": "get_HTTP",
            "location": 69,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAbstractProperty.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "NotAbstractProperty.get_HTTP": {
            "name": "get_HTTP",
            "location": 81,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserExists.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "UserExists.get_HTTP": {
            "name": "get_HTTP",
            "location": 93,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNotFound.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "UserNotFound.get_HTTP": {
            "name": "get_HTTP",
            "location": 105,
            "return": [
                "Tuple[(Any, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/user.py": {
        "add_user": {
            "name": "add_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "id_": [],
                "paraphrase": [],
                "session": []
            }
        },
        "generate_basic_digest": {
            "name": "generate_basic_digest",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "id_": [],
                "paraphrase": []
            }
        },
        "authenticate_user": {
            "name": "authenticate_user",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_": [],
                "paraphrase": [],
                "session": []
            }
        },
        "check_authorization": {
            "name": "check_authorization",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "session": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/__init__.py": {},
    "falcon-http-hydra-master/hydrus/data/legacy/generator.py": {
        "randomValue": {
            "name": "randomValue",
            "location": 106,
            "return": [
                "int"
            ],
            "arguments": {
                "interval": []
            }
        },
        "generateObject": {
            "name": "generateObject",
            "location": 113,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "name": [],
                "subsystem": []
            }
        },
        "gen_random_object": {
            "name": "gen_random_object",
            "location": 196,
            "return": [
                "Dict[(str, Optional[Union[(str, Dict[(str, Union[(int, str)])])]])]"
            ],
            "arguments": {}
        },
        "gen_cots": {
            "name": "gen_cots",
            "location": 209,
            "return": [
                "List[Dict[(str, Optional[Union[(str, Dict[(str, Union[(int, str)])])]])]]"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/legacy/insert_classes.py": {
        "filter_objects": {
            "name": "filter_objects",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "data": [],
                "key": [],
                "value": []
            }
        },
        "get_rdf_lables": {
            "name": "get_rdf_lables",
            "location": 20,
            "return": [
                "list"
            ],
            "arguments": {
                "obj_list": []
            }
        },
        "gen_classes": {
            "name": "gen_classes",
            "location": 29,
            "return": [
                "List[models.RDFClass]"
            ],
            "arguments": {
                "labels": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/data/legacy/insert_data.py": {
        "insert_data": {
            "name": "insert_data",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "objects": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_maker.py": {
        "error_mapping": {
            "name": "error_mapping",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "body": []
            }
        },
        "input_key_check": {
            "name": "input_key_check",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "body": [],
                "key": [],
                "body_type": [],
                "literal": []
            }
        },
        "create_doc": {
            "name": "create_doc",
            "location": 45,
            "return": [
                "hydrus.hydraspec.doc_writer.HydraDoc"
            ],
            "arguments": {
                "doc": [],
                "HYDRUS_SERVER_URL": [],
                "API_NAME": []
            }
        },
        "create_class": {
            "name": "create_class",
            "location": 103,
            "return": [
                "Tuple[(Optional[hydrus.hydraspec.doc_writer.HydraClass], Optional[bool])]"
            ],
            "arguments": {
                "entrypoint": [],
                "class_dict": []
            }
        },
        "get_entrypoint": {
            "name": "get_entrypoint",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "doc": []
            }
        },
        "convert_literal": {
            "name": "convert_literal",
            "location": 172,
            "return": [
                "Optional[Union[(bool, _T0)]]"
            ],
            "arguments": {
                "literal": [
                    "_T0@@"
                ]
            }
        },
        "create_property": {
            "name": "create_property",
            "location": 193,
            "return": [
                "hydrus.hydraspec.doc_writer.HydraClassProp"
            ],
            "arguments": {
                "supported_prop": []
            }
        },
        "class_in_endpoint": {
            "name": "class_in_endpoint",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [],
                "entrypoint": []
            }
        },
        "collection_in_endpoint": {
            "name": "collection_in_endpoint",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [],
                "entrypoint": []
            }
        },
        "create_operation": {
            "name": "create_operation",
            "location": 266,
            "return": [
                "hydrus.hydraspec.doc_writer.HydraClassOp"
            ],
            "arguments": {
                "supported_op": []
            }
        },
        "create_status": {
            "name": "create_status",
            "location": 285,
            "return": [
                "hydrus.hydraspec.doc_writer.HydraStatus"
            ],
            "arguments": {
                "possible_status": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer.py": {
        "HydraDoc.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "API": [],
                "title": [],
                "desc": [],
                "entrypoint": [],
                "base_url": []
            }
        },
        "HydraDoc.add_supported_class": {
            "name": "add_supported_class",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [],
                "collection": [],
                "collectionGet": [],
                "collectionPost": []
            }
        },
        "HydraDoc.add_possible_status": {
            "name": "add_possible_status",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "HydraDoc.add_baseCollection": {
            "name": "add_baseCollection",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.add_baseResource": {
            "name": "add_baseResource",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.add_to_context": {
            "name": "add_to_context",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HydraDoc.gen_EntryPoint": {
            "name": "gen_EntryPoint",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraDoc.generate": {
            "name": "generate",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClass.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [],
                "title": [],
                "desc": [],
                "endpoint": [],
                "sub_classof": []
            }
        },
        "HydraClass.add_supported_prop": {
            "name": "add_supported_prop",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "HydraClass.add_supported_op": {
            "name": "add_supported_op",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "HydraClass.generate": {
            "name": "generate",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClassProp.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [],
                "title": [],
                "read": [],
                "write": [],
                "required": [],
                "desc": []
            }
        },
        "HydraClassProp.generate": {
            "name": "generate",
            "location": 146,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraClassOp.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [],
                "method": [],
                "expects": [],
                "returns": [],
                "status": []
            }
        },
        "HydraClassOp.get_type": {
            "name": "get_type",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "HydraClassOp.generate": {
            "name": "generate",
            "location": 189,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraCollection.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": [],
                "get": [],
                "post": []
            }
        },
        "HydraCollection.generate": {
            "name": "generate",
            "location": 232,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraCollectionOp.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [],
                "type_": [],
                "method": [],
                "desc": [],
                "expects": [],
                "returns": [],
                "status": []
            }
        },
        "HydraCollectionOp.generate": {
            "name": "generate",
            "location": 267,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraEntryPoint.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [],
                "entrypoint": []
            }
        },
        "HydraEntryPoint.add_Class": {
            "name": "add_Class",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "HydraEntryPoint.add_Collection": {
            "name": "add_Collection",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": []
            }
        },
        "HydraEntryPoint.generate": {
            "name": "generate",
            "location": 308,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraEntryPoint.get": {
            "name": "get",
            "location": 312,
            "return": [
                "Dict[(Any, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointCollection.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": []
            }
        },
        "EntryPointCollection.generate": {
            "name": "generate",
            "location": 334,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointClass.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_": []
            }
        },
        "EntryPointClass.generate": {
            "name": "generate",
            "location": 368,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPointOp.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [],
                "method": [],
                "desc": [],
                "expects": [],
                "returns": [],
                "statusCodes": [],
                "type_": [],
                "label": []
            }
        },
        "EntryPointOp.get_type": {
            "name": "get_type",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "EntryPointOp.generate": {
            "name": "generate",
            "location": 426,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HydraStatus.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "title": [],
                "desc": []
            }
        },
        "HydraStatus.generate": {
            "name": "generate",
            "location": 453,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "adders": [],
                "class_": [],
                "collection": [],
                "entrypoint": []
            }
        },
        "Context.createContext": {
            "name": "createContext",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "Context.generate": {
            "name": "generate",
            "location": 560,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.add": {
            "name": "add",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer_sample.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/doc_writer_sample_output.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/__init__.py": {},
    "falcon-http-hydra-master/hydrus/hydraspec/legacy/crud_template.py": {
        "template": {
            "name": "template",
            "location": 4,
            "return": [
                "List[Dict[(str, Optional[Union[(str, List[Dict[(str, Union[(int, str)])]])]])]]"
            ],
            "arguments": {}
        }
    },
    "falcon-http-hydra-master/hydrus/hydraspec/legacy/parser.py": {
        "fix_keyword": {
            "name": "fix_keyword",
            "location": 10,
            "return": [
                "Optional[Union[(bool, _T0)]]"
            ],
            "arguments": {
                "keyword": [
                    "_T0@@"
                ]
            }
        },
        "get_all_classes": {
            "name": "get_all_classes",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "owl_data": []
            }
        },
        "hydrafy_class": {
            "name": "hydrafy_class",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "class_": [],
                "supported_props": [],
                "semantic_ref_name": []
            }
        },
        "hydrafy_classes": {
            "name": "hydrafy_classes",
            "location": 75,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "classes": [],
                "properties": [],
                "semantic_ref_name": []
            }
        },
        "get_all_properties": {
            "name": "get_all_properties",
            "location": 100,
            "return": [
                "list"
            ],
            "arguments": {
                "owl_data": []
            }
        },
        "hydrafy_property": {
            "name": "hydrafy_property",
            "location": 114,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "prop": [],
                "semantic_ref_name": []
            }
        },
        "hydrafy_properties": {
            "name": "hydrafy_properties",
            "location": 140,
            "return": [
                "List[Dict[(str, Union[(Dict[(str, Any)], List[list])])]]"
            ],
            "arguments": {
                "properties": [],
                "semantic_ref_name": []
            }
        },
        "terminal_props": {
            "name": "terminal_props",
            "location": 159,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "class_": [],
                "properties": [],
                "semantic_ref_name": []
            }
        },
        "gen_supported_classes": {
            "name": "gen_supported_classes",
            "location": 172,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "hydra_classes": [
                    "_T0@@"
                ]
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_app.py": {
        "gen_dummy_object": {
            "name": "gen_dummy_object",
            "location": 19,
            "return": [],
            "arguments": {
                "class_": [],
                "doc": []
            }
        },
        "ViewsTestCase.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Index": {
            "name": "test_Index",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_EntryPoint_context": {
            "name": "test_EntryPoint_context",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Vocab": {
            "name": "test_Vocab",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Collections_GET": {
            "name": "test_Collections_GET",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Collections_PUT": {
            "name": "test_Collections_PUT",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_POST": {
            "name": "test_object_POST",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_DELETE": {
            "name": "test_object_DELETE",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_object_PUT_at_id": {
            "name": "test_object_PUT_at_id",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_PUT": {
            "name": "test_endpointClass_PUT",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_POST": {
            "name": "test_endpointClass_POST",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_DELETE": {
            "name": "test_endpointClass_DELETE",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_endpointClass_GET": {
            "name": "test_endpointClass_GET",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_bad_objects": {
            "name": "test_bad_objects",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_bad_requests": {
            "name": "test_bad_requests",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Endpoints_Contexts": {
            "name": "test_Endpoints_Contexts",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_auth.py": {
        "AuthTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongID_GET": {
            "name": "test_wrongID_GET",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongID_POST": {
            "name": "test_wrongID_POST",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongPass_GET": {
            "name": "test_wrongPass_GET",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_wrongPass_POST": {
            "name": "test_wrongPass_POST",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_GET": {
            "name": "test_Auth_GET",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_POST": {
            "name": "test_Auth_POST",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_PUT": {
            "name": "test_Auth_PUT",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_Auth_DELETE": {
            "name": "test_Auth_DELETE",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/test_crud.py": {
        "gen_dummy_object": {
            "name": "gen_dummy_object",
            "location": 19,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "class_": [],
                "doc": []
            }
        },
        "TestCRUD.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert": {
            "name": "test_insert",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get": {
            "name": "test_get",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_update": {
            "name": "test_update",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete": {
            "name": "test_delete",
            "location": 85,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get_id": {
            "name": "test_get_id",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_get_type": {
            "name": "test_get_type",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete_type": {
            "name": "test_delete_type",
            "location": 122,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_delete_id": {
            "name": "test_delete_id",
            "location": 136,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert_type": {
            "name": "test_insert_type",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_insert_id": {
            "name": "test_insert_id",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "falcon-http-hydra-master/hydrus/tests/__init__.py": {}
}
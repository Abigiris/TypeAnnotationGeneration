{
    "fbc-master/data/url.py": {},
    "fbc-master/facebook/scrape.py": {},
    "fbc-master/facebook/scrape_all.py": {},
    "fbc-master/facebook/scrape_likes.py": {},
    "fbc-master/facebook/scrape_likes_moz.py": {},
    "fbc-master/facebook/facebook/db.py": {
        "truncate": {
            "name": "truncate",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "length": []
            }
        },
        "db.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "db.commit": {
            "name": "commit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "db.rollback": {
            "name": "rollback",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "db.get_highest_cn": {
            "name": "get_highest_cn",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "db.update_highest_cn": {
            "name": "update_highest_cn",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_highest": [],
                "kind": []
            }
        },
        "db.save_comment": {
            "name": "save_comment",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "comment_data": [],
                "supplier_id": []
            }
        },
        "db.save_like": {
            "name": "save_like",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_data": [],
                "supplier_id": []
            }
        },
        "db.save_user": {
            "name": "save_user",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "comment_data": []
            }
        },
        "db.save_comment_details": {
            "name": "save_comment_details",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "supplier_id": [],
                "comment_data": []
            }
        },
        "db.save_like_details": {
            "name": "save_like_details",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "supplier_id": []
            }
        },
        "db.save_supplier": {
            "name": "save_supplier",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "supplier_name": [],
                "page_id": []
            }
        },
        "db.get_suppliers": {
            "name": "get_suppliers",
            "location": 88,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "db.get_community_suppliers": {
            "name": "get_community_suppliers",
            "location": 92,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "db.save_meta_comment": {
            "name": "save_meta_comment",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment_id": [],
                "meta_comment": []
            }
        },
        "db.save_meta_commenter": {
            "name": "save_meta_commenter",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "comment_id": [],
                "meta_comments": []
            }
        },
        "db.save_reactions": {
            "name": "save_reactions",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment_id": [],
                "reactions": []
            }
        },
        "db.get_meta_comment_by_mcid": {
            "name": "get_meta_comment_by_mcid",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mcid": []
            }
        },
        "db.save_meta_reactions": {
            "name": "save_meta_reactions",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mcid": [],
                "reactions": []
            }
        }
    },
    "fbc-master/facebook/facebook/items.py": {},
    "fbc-master/facebook/facebook/login.py": {},
    "fbc-master/facebook/facebook/middlewares.py": {
        "FacebookSpiderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 17,
            "return": [
                "_TFacebookSpiderMiddleware@@FacebookSpiderMiddleware@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFacebookSpiderMiddleware]"
                ],
                "crawler": []
            }
        },
        "FacebookSpiderMiddleware.process_spider_input": {
            "name": "process_spider_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "spider": []
            }
        },
        "FacebookSpiderMiddleware.process_spider_output": {
            "name": "process_spider_output",
            "location": 30,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "result": [],
                "spider": []
            }
        },
        "FacebookSpiderMiddleware.process_spider_exception": {
            "name": "process_spider_exception",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "exception": [],
                "spider": []
            }
        },
        "FacebookSpiderMiddleware.process_start_requests": {
            "name": "process_start_requests",
            "location": 46,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start_requests": [],
                "spider": []
            }
        },
        "FacebookSpiderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        },
        "FacebookDownloaderMiddleware.from_crawler": {
            "name": "from_crawler",
            "location": 65,
            "return": [
                "_TFacebookDownloaderMiddleware@@FacebookDownloaderMiddleware@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFacebookDownloaderMiddleware]"
                ],
                "crawler": []
            }
        },
        "FacebookDownloaderMiddleware.process_request": {
            "name": "process_request",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "spider": []
            }
        },
        "FacebookDownloaderMiddleware.process_response": {
            "name": "process_response",
            "location": 83,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [
                    "_T1@@"
                ],
                "spider": []
            }
        },
        "FacebookDownloaderMiddleware.process_exception": {
            "name": "process_exception",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [],
                "spider": []
            }
        },
        "FacebookDownloaderMiddleware.spider_opened": {
            "name": "spider_opened",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spider": []
            }
        }
    },
    "fbc-master/facebook/facebook/pipelines.py": {
        "FacebookPipeline.process_item": {
            "name": "process_item",
            "location": 10,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "_T0@@"
                ],
                "spider": []
            }
        }
    },
    "fbc-master/facebook/facebook/settings.py": {},
    "fbc-master/facebook/facebook/__init__.py": {},
    "fbc-master/facebook/facebook/help/brain.py": {
        "brain.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "brain.set_small_step": {
            "name": "set_small_step",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.is_duplicate": {
            "name": "is_duplicate",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "brain.update_duplicates": {
            "name": "update_duplicates",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_identifier": []
            }
        },
        "brain.track_new_content": {
            "name": "track_new_content",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.calculate_next_step": {
            "name": "calculate_next_step",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.update_step": {
            "name": "update_step",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.increase_step": {
            "name": "increase_step",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.decrease_step": {
            "name": "decrease_step",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "brain.step": {
            "name": "step",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fbc-master/facebook/facebook/help/conv.py": {
        "to_str": {
            "name": "to_str",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "byte_string": []
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "response_body": []
            }
        },
        "body_html": {
            "name": "body_html",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "response_body": []
            }
        }
    },
    "fbc-master/facebook/facebook/help/cookies.py": {
        "get_facebook_cookie": {
            "name": "get_facebook_cookie",
            "location": 3,
            "return": [
                "dict"
            ],
            "arguments": {
                "user_email": [],
                "user_password": []
            }
        }
    },
    "fbc-master/facebook/facebook/help/sel.py": {
        "all_comments": {
            "name": "all_comments",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "body": []
            }
        },
        "get_if_exists": {
            "name": "get_if_exists",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "selector": [],
                "xpath": []
            }
        },
        "get_int_if_exists": {
            "name": "get_int_if_exists",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "selector": [],
                "xpath": []
            }
        },
        "get_comment_number": {
            "name": "get_comment_number",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "selector": []
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "selector": []
            }
        },
        "contains_node": {
            "name": "contains_node",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "selector": [],
                "xpath": []
            }
        },
        "get_comment_content": {
            "name": "get_comment_content",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "selector": []
            }
        },
        "comment_data": {
            "name": "comment_data",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "comment": []
            }
        },
        "first_user": {
            "name": "first_user",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "body": []
            }
        },
        "meta_comment_ids": {
            "name": "meta_comment_ids",
            "location": 65,
            "return": [
                "list"
            ],
            "arguments": {
                "json_body": []
            }
        },
        "meta_comments": {
            "name": "meta_comments",
            "location": 80,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "json_body": []
            }
        },
        "create_meta_comments": {
            "name": "create_meta_comments",
            "location": 112,
            "return": [
                "List[List[Dict[(str, Any)]]]"
            ],
            "arguments": {
                "user_ids": [],
                "comments": [],
                "authors": [],
                "comment_ids": []
            }
        },
        "reactions": {
            "name": "reactions",
            "location": 129,
            "return": [
                "List[Dict[(str, Union[(Dict[(str, Any)], _T1)])]]"
            ],
            "arguments": {
                "response": [],
                "kind": [
                    "_T1@@"
                ]
            }
        },
        "meta_comment_reacts": {
            "name": "meta_comment_reacts",
            "location": 150,
            "return": [
                "List[Dict[(str, Union[(str, Dict[(str, Any)])])]]"
            ],
            "arguments": {
                "json_body": []
            }
        }
    },
    "fbc-master/facebook/facebook/help/url.py": {
        "home_page_url": {
            "name": "home_page_url",
            "location": 15,
            "return": [],
            "arguments": {
                "page_id": [],
                "user_id": []
            }
        },
        "community_page_url": {
            "name": "community_page_url",
            "location": 25,
            "return": [],
            "arguments": {
                "page_id": [],
                "user_id": []
            }
        },
        "reaction_url": {
            "name": "reaction_url",
            "location": 37,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "meta_comment_url": {
            "name": "meta_comment_url",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "meta_comment_body": {
            "name": "meta_comment_body",
            "location": 43,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "meta_comment_react": {
            "name": "meta_comment_react",
            "location": 47,
            "return": [],
            "arguments": {
                "user_id": []
            }
        }
    },
    "fbc-master/facebook/facebook/help/__init__.py": {},
    "fbc-master/facebook/facebook/spiders/comments_spider.py": {
        "CommentsSpider.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "supplier_name": [],
                "page_id": [],
                "user_id": [],
                "cookies": [],
                "supplier_id": [],
                "kind": []
            }
        },
        "CommentsSpider.set_page_url": {
            "name": "set_page_url",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsSpider.set_max_cn": {
            "name": "set_max_cn",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsSpider.meta_commenter_request": {
            "name": "meta_commenter_request",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "comment_id": [],
                "facebook_comment_id": []
            }
        },
        "CommentsSpider.start_requests": {
            "name": "start_requests",
            "location": 64,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentsSpider.parse": {
            "name": "parse",
            "location": 72,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.save_reactions": {
            "name": "save_reactions",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.save_meta_comments": {
            "name": "save_meta_comments",
            "location": 113,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.save_meta_comment_reactions": {
            "name": "save_meta_comment_reactions",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.find_starting_cn": {
            "name": "find_starting_cn",
            "location": 134,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.check_higher_cn": {
            "name": "check_higher_cn",
            "location": 145,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CommentsSpider.has_correct_content_type": {
            "name": "has_correct_content_type",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "CommentsSpider.response_long_enough": {
            "name": "response_long_enough",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        }
    },
    "fbc-master/facebook/facebook/spiders/__init__.py": {},
    "fbc-master/facebook/likers/save.py": {
        "save_likers": {
            "name": "save_likers",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "html": [],
                "page_name": [],
                "page_id": []
            }
        }
    },
    "fbc-master/facebook/likers/setup.py": {
        "driver_chrome": {
            "name": "driver_chrome",
            "location": 3,
            "return": [
                "webdriver.chrome.webdriver.WebDriver"
            ],
            "arguments": {}
        },
        "driver_moz": {
            "name": "driver_moz",
            "location": 16,
            "return": [
                "webdriver.firefox.webdriver.WebDriver"
            ],
            "arguments": {}
        }
    },
    "fbc-master/facebook/likers/steps.py": {
        "login": {
            "name": "login",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "user_email": [],
                "user_password": []
            }
        },
        "keep_scrolling": {
            "name": "keep_scrolling",
            "location": 14,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "driver": [],
                "times": []
            }
        },
        "get_likers": {
            "name": "get_likers",
            "location": 26,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "driver": []
            }
        },
        "get_next_likers": {
            "name": "get_next_likers",
            "location": 42,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "driver": []
            }
        },
        "get_facebook_warning": {
            "name": "get_facebook_warning",
            "location": 57,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "driver": []
            }
        }
    },
    "fbc-master/facebook/likers/__init__.py": {}
}
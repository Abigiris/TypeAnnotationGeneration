{
    "flake8-adjustable-complexity-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/ast_helpers.py": {
        "get_all_funcdefs_from": {
            "name": "get_all_funcdefs_from",
            "location": 9,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "tree": []
            }
        },
        "extract_all_vars_in_node": {
            "name": "extract_all_vars_in_node",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "ast_tree": []
            }
        },
        "get_var_names_from_assignment": {
            "name": "get_var_names_from_assignment",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "assignment_node": []
            }
        },
        "get_var_names_from_funcdef": {
            "name": "get_var_names_from_funcdef",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "funcdef_node": []
            }
        },
        "get_var_names_from_for": {
            "name": "get_var_names_from_for",
            "location": 45,
            "return": [
                "list"
            ],
            "arguments": {
                "for_node": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/checker.py": {
        "CyclomaticComplexityAdjustableChecker.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "tree": [],
                "filename": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.add_options": {
            "name": "add_options",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.parse_options": {
            "name": "parse_options",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "option_manager": [],
                "options": [],
                "args": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.parse_options_to_config": {
            "name": "parse_options_to_config",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": [],
                "option_manager": [],
                "options": [],
                "args": []
            }
        },
        "CyclomaticComplexityAdjustableChecker.run": {
            "name": "run",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/complexity_helpers.py": {
        "validate_adjustable_complexity_in_tree": {
            "name": "validate_adjustable_complexity_in_tree",
            "location": 14,
            "return": [
                "List[flake8_adjustable_complexity.violations.ComplexityViolation]"
            ],
            "arguments": {
                "tree": [],
                "var_names_blacklist": [],
                "max_complexity": [],
                "bad_var_name_penalty": [],
                "allow_single_names_in_vars": [],
                "single_letter_var_whitelist": []
            }
        },
        "check_funcdef_adjustable_complexity": {
            "name": "check_funcdef_adjustable_complexity",
            "location": 37,
            "return": [
                "Optional[flake8_adjustable_complexity.violations.ComplexityViolation]"
            ],
            "arguments": {
                "funcdef": [],
                "var_names_blacklist": [],
                "default_max_complexity": [],
                "bad_var_name_penalty": [],
                "allow_single_names_in_vars": [],
                "single_letter_var_whitelist": []
            }
        },
        "get_mccabe_complexity_for": {
            "name": "get_mccabe_complexity_for",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/config.py": {},
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/list_helpers.py": {
        "flat": {
            "name": "flat",
            "location": 4,
            "return": [
                "list"
            ],
            "arguments": {
                "list_of_lists": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/violations.py": {
        "BaseViolation.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lineno": [],
                "col_offset": []
            }
        },
        "BaseViolation.format_message": {
            "name": "format_message",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseViolation.get_context": {
            "name": "get_context",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexityViolation.get_context": {
            "name": "get_context",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PenaltyTooHighViolation.get_context": {
            "name": "get_context",
            "location": 46,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flake8-adjustable-complexity-master/flake8_adjustable_complexity/__init__.py": {},
    "flake8-adjustable-complexity-master/tests/conftest.py": {
        "get_option_manager": {
            "name": "get_option_manager",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "_parse_options": {
            "name": "_parse_options",
            "location": 19,
            "return": [],
            "arguments": {
                "manager": [],
                "args": []
            }
        },
        "parse_options": {
            "name": "parse_options",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "run_validator_for_test_file": {
            "name": "run_validator_for_test_file",
            "location": 39,
            "return": [],
            "arguments": {
                "filename": [],
                "args": []
            }
        },
        "parse_options.with_args": {
            "name": "with_args",
            "location": 30,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_adjustable_complexity.py": {
        "test_checker": {
            "name": "test_checker",
            "location": 75,
            "return": [],
            "arguments": {
                "filename": [],
                "args": [],
                "expected": []
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_config.py": {
        "test_parse_max_mccabe_complexity": {
            "name": "test_parse_max_mccabe_complexity",
            "location": 15,
            "return": [],
            "arguments": {
                "parse_options": [],
                "args": [],
                "max_mccabe_complexity": []
            }
        },
        "test_parse_max_complexity_per_path": {
            "name": "test_parse_max_complexity_per_path",
            "location": 37,
            "return": [],
            "arguments": {
                "parse_options": [],
                "args": [],
                "max_complexity_per_path": []
            }
        },
        "test_parse_max_complexity_per_path_error": {
            "name": "test_parse_max_complexity_per_path_error",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "parse_options": []
            }
        },
        "test_parse_var_names_blacklist": {
            "name": "test_parse_var_names_blacklist",
            "location": 76,
            "return": [],
            "arguments": {
                "parse_options": [],
                "args": [],
                "var_names_blacklist": []
            }
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/code_CAC001.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/code_CAC002.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flake8-adjustable-complexity-master/tests/test_files/too_complex_with_blacklisted.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
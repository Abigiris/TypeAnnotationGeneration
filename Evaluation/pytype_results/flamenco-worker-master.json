{
    "flamenco-worker-master/flamenco-worker.py": {},
    "flamenco-worker-master/mkdistfile.py": {
        "create_tar": {
            "name": "create_tar",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [],
                "dist_dir": []
            }
        },
        "create_zip": {
            "name": "create_zip",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [],
                "dist_dir": []
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flamenco-worker-master/setup.py": {
        "ZipCommand.initialize_options": {
            "name": "initialize_options",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipCommand.finalize_options": {
            "name": "finalize_options",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipCommand.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipCommand.run.add_to_root": {
            "name": "add_to_root",
            "location": 48,
            "return": [],
            "arguments": {
                "fname": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/attrs_extra.py": {
        "log": {
            "name": "log",
            "location": 8,
            "return": [
                "Annotated[(Type[logging.Logger], 'pytype_metadata', {'tag': 'attr.ib', 'init': True, 'kw_only': False, 'type_source': 'DEFAULT', 'default': True})]"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/cli.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_pretask_check_config": {
            "name": "parse_pretask_check_config",
            "location": 215,
            "return": [
                "flamenco_worker.worker.PreTaskCheckParams"
            ],
            "arguments": {
                "confparser": [],
                "log": []
            }
        },
        "asyncio_report_tasks": {
            "name": "asyncio_report_tasks",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [],
                "stackframe": []
            }
        },
        "construct_asyncio_loop": {
            "name": "construct_asyncio_loop",
            "location": 286,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "log_startup": {
            "name": "log_startup",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.shutdown": {
            "name": "shutdown",
            "location": 136,
            "return": [],
            "arguments": {
                "signum": [],
                "stackframe": []
            }
        },
        "main.sleep": {
            "name": "sleep",
            "location": 145,
            "return": [],
            "arguments": {
                "signum": [],
                "stackframe": []
            }
        },
        "main.wakeup": {
            "name": "wakeup",
            "location": 149,
            "return": [],
            "arguments": {
                "signum": [],
                "stackframe": []
            }
        },
        "main.do_clean_shutdown": {
            "name": "do_clean_shutdown",
            "location": 171,
            "return": [],
            "arguments": {}
        }
    },
    "flamenco-worker-master/flamenco_worker/commands.py": {
        "signal_name": {
            "name": "signal_name",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "signum": []
            }
        },
        "command_executor": {
            "name": "command_executor",
            "location": 112,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cmdname": []
            }
        },
        "_timestamped_path": {
            "name": "_timestamped_path",
            "location": 351,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "_unique_path": {
            "name": "_unique_path",
            "location": 367,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "_numbered_path": {
            "name": "_numbered_path",
            "location": 388,
            "return": [
                "Any"
            ],
            "arguments": {
                "directory": [],
                "fname_prefix": [],
                "fname_suffix": []
            }
        },
        "_hashes_to_glob": {
            "name": "_hashes_to_glob",
            "location": 411,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "command_executor.decorator": {
            "name": "decorator",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AbstractCommand.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCommand.validate": {
            "name": "validate",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractCommand._setting": {
            "name": "_setting",
            "location": 265,
            "return": [
                "Tuple[(Any, Optional[str])]"
            ],
            "arguments": {
                "self": [],
                "settings": [],
                "key": [],
                "is_required": [],
                "valtype": [],
                "default": [
                    "_T4@@"
                ]
            }
        },
        "EchoCommand.validate": {
            "name": "validate",
            "location": 303,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "LogALotCommand.validate": {
            "name": "validate",
            "location": 318,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SleepCommand.validate": {
            "name": "validate",
            "location": 335,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MoveOutOfWayCommand.validate": {
            "name": "validate",
            "location": 422,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MoveToFinalCommand.validate": {
            "name": "validate",
            "location": 452,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "CopyFileCommand.validate": {
            "name": "validate",
            "location": 486,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "RemoveTreeCommand.validate": {
            "name": "validate",
            "location": 532,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "RemoveFileCommand.validate": {
            "name": "validate",
            "location": 559,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractSubprocessCommand.subprocess_pid_file": {
            "name": "subprocess_pid_file",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSubprocessCommand.validate": {
            "name": "validate",
            "location": 598,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "ExecCommand.validate": {
            "name": "validate",
            "location": 773,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractBlenderCommand.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBlenderCommand._format_dna_to_cli": {
            "name": "_format_dna_to_cli",
            "location": 818,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "self": [],
                "format_for_dna": [
                    "_T0@@"
                ]
            }
        },
        "AbstractBlenderCommand.validate": {
            "name": "validate",
            "location": 832,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractBlenderCommand.parse_render_line": {
            "name": "parse_render_line",
            "location": 901,
            "return": [
                "Optional[Dict[(str, Union[(float, int, str)])]]"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "BlenderRenderCommand.validate": {
            "name": "validate",
            "location": 978,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "BlenderRenderProgressiveCommand.validate": {
            "name": "validate",
            "location": 1014,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MergeProgressiveRendersCommand.validate": {
            "name": "validate",
            "location": 1056,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MergeProgressiveRendersCommand._base_blender_cli": {
            "name": "_base_blender_cli",
            "location": 1125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MergeProgressiveRenderSequenceCommand.validate": {
            "name": "validate",
            "location": 1156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "BlenderRenderAudioCommand.validate": {
            "name": "validate",
            "location": 1193,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "EXRSequenceToJPEGCommand.validate": {
            "name": "validate",
            "location": 1250,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractFFmpegCommand.validate": {
            "name": "validate",
            "location": 1294,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractFFmpegCommand._build_ffmpeg_command": {
            "name": "_build_ffmpeg_command",
            "location": 1320,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractFFmpegCommand.ffmpeg_args": {
            "name": "ffmpeg_args",
            "location": 1330,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "AbstractFFmpegCommand.create_index_file": {
            "name": "create_index_file",
            "location": 1338,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_files": []
            }
        },
        "CreateVideoCommand.validate": {
            "name": "validate",
            "location": 1378,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "CreateVideoCommand.ffmpeg_args": {
            "name": "ffmpeg_args",
            "location": 1399,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "ConcatenateVideosCommand.validate": {
            "name": "validate",
            "location": 1443,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "ConcatenateVideosCommand.ffmpeg_args": {
            "name": "ffmpeg_args",
            "location": 1460,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MuxAudioCommand.validate": {
            "name": "validate",
            "location": 1479,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MuxAudioCommand.ffmpeg_args": {
            "name": "ffmpeg_args",
            "location": 1506,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "EncodeAudioCommand.validate": {
            "name": "validate",
            "location": 1524,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "EncodeAudioCommand.ffmpeg_args": {
            "name": "ffmpeg_args",
            "location": 1550,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "MoveWithCounterCommand.validate": {
            "name": "validate",
            "location": 1569,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "CreatePythonFile.validate": {
            "name": "validate",
            "location": 1607,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/config.py": {
        "merge_with_home_config": {
            "name": "merge_with_home_config",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "new_conf": []
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 84,
            "return": [
                "ConfigParser"
            ],
            "arguments": {
                "config_file": [],
                "show_effective_config": [],
                "enable_test_mode": []
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "confparser": [],
                "enable_debug": []
            }
        },
        "check_config": {
            "name": "check_config",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "confparser": []
            }
        },
        "ConfigParser.value": {
            "name": "value",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "valtype": []
            }
        },
        "ConfigParser.setvalue": {
            "name": "setvalue",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ConfigParser.interval_secs": {
            "name": "interval_secs",
            "location": 53,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ConfigParser.erase": {
            "name": "erase",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/documents.py": {},
    "flamenco-worker-master/flamenco_worker/json_encoder.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/jwtauth.py": {
        "new_registration_token": {
            "name": "new_registration_token",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "pre_shared_secret": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/may_i_run.py": {},
    "flamenco-worker-master/flamenco_worker/patch_asyncio.py": {
        "patch_asyncio": {
            "name": "patch_asyncio",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patch_asyncio.resume_reading": {
            "name": "resume_reading",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/runner.py": {
        "TaskRunner.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskRunner.aggr_timing_info": {
            "name": "aggr_timing_info",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/ssdp_discover.py": {
        "interface_addresses": {
            "name": "interface_addresses",
            "location": 43,
            "return": [
                "Generator[(socket.AddressFamily, Any, None)]"
            ],
            "arguments": {}
        },
        "find_flamenco_manager": {
            "name": "find_flamenco_manager",
            "location": 49,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "timeout": [],
                "retries": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/timing.py": {
        "Timing.clear": {
            "name": "clear",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timing.record_duration": {
            "name": "record_duration",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Timing.checkpoint": {
            "name": "checkpoint",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Timing.last_name": {
            "name": "last_name",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timing.__add__": {
            "name": "__add__",
            "location": 60,
            "return": [
                "Union[(Timing, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Timing.__iadd__": {
            "name": "__iadd__",
            "location": 73,
            "return": [
                "Union[(Timing, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Timing.__getitem__": {
            "name": "__getitem__",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Timing.__setitem__": {
            "name": "__setitem__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Timing.to_json_compat": {
            "name": "to_json_compat",
            "location": 96,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/tz.py": {
        "tzutc.utcoffset": {
            "name": "utcoffset",
            "location": 7,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzutc.dst": {
            "name": "dst",
            "location": 10,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzutc.tzname": {
            "name": "tzname",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzutc.is_ambiguous": {
            "name": "is_ambiguous",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "tzutc.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "tzutc.__ne__": {
            "name": "__ne__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "tzutc.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/upstream.py": {
        "elide": {
            "name": "elide",
            "location": 12,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "string": [
                    "_T0@@"
                ],
                "length": []
            }
        },
        "FlamencoManager.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/upstream_update_queue.py": {
        "TaskUpdateQueue._connect_db": {
            "name": "_connect_db",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueue._disconnect_db": {
            "name": "_disconnect_db",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueue.queue": {
            "name": "queue",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "payload": []
            }
        },
        "TaskUpdateQueue._queue": {
            "name": "_queue",
            "location": 100,
            "return": [
                "Generator[(Tuple[(Any, Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueue.queue_size": {
            "name": "queue_size",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueue._unqueue": {
            "name": "_unqueue",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowid": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/worker.py": {
        "generate_secret": {
            "name": "generate_secret",
            "location": 982,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "detect_platform": {
            "name": "detect_platform",
            "location": 995,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "FlamencoWorker.active_task_id": {
            "name": "active_task_id",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.hostname": {
            "name": "hostname",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "FlamencoWorker.nickname": {
            "name": "nickname",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.identifier": {
            "name": "identifier",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.write_registration_info": {
            "name": "write_registration_info",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.mainloop": {
            "name": "mainloop",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.schedule_fetch_task": {
            "name": "schedule_fetch_task",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": []
            }
        },
        "FlamencoWorker._single_iteration_done": {
            "name": "_single_iteration_done",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "FlamencoWorker.shutdown": {
            "name": "shutdown",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.stop_fetching_tasks": {
            "name": "stop_fetching_tasks",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker._cleanup_state_for_new_task": {
            "name": "_cleanup_state_for_new_task",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.output_produced": {
            "name": "output_produced",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.change_status": {
            "name": "change_status",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_status": []
            }
        },
        "FlamencoWorker.ack_status_change": {
            "name": "ack_status_change",
            "location": 806,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "new_status": []
            }
        },
        "FlamencoWorker.go_to_state_asleep": {
            "name": "go_to_state_asleep",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.go_to_state_awake": {
            "name": "go_to_state_awake",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.go_to_state_shutdown": {
            "name": "go_to_state_shutdown",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.go_to_state_error": {
            "name": "go_to_state_error",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.stop_sleeping": {
            "name": "stop_sleeping",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker.pre_task_sanity_check": {
            "name": "pre_task_sanity_check",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker._pre_task_check_read": {
            "name": "_pre_task_check_read",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlamencoWorker._pre_task_check_write": {
            "name": "_pre_task_check_write",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/flamenco_worker/__init__.py": {},
    "flamenco-worker-master/flamenco_worker/resources/exr_sequence_to_jpeg.py": {},
    "flamenco-worker-master/tests/abstract_worker_test.py": {
        "AbstractWorkerTest.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AbstractWorkerTest.find_blender_cmd": {
            "name": "find_blender_cmd",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/mock_responses.py": {
        "CoroMock": {
            "name": "CoroMock",
            "location": 58,
            "return": [],
            "arguments": {
                "return_value": [],
                "side_effect": []
            }
        },
        "JsonResponse.json": {
            "name": "json",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyResponse.raise_for_status": {
            "name": "raise_for_status",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_blender_render.py": {
        "BlenderRenderTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_re_time": {
            "name": "test_re_time",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_parse_render_line": {
            "name": "test_parse_render_line",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_missing_files": {
            "name": "test_missing_files",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_cli_args": {
            "name": "test_cli_args",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_cli_openexr": {
            "name": "test_cli_openexr",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_python_expr": {
            "name": "test_python_expr",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderTest.test_cli_args_override_file": {
            "name": "test_cli_args_override_file",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_blender_render_audio.py": {
        "RenderAudioTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderAudioTest.test_cli_args": {
            "name": "test_cli_args",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_blender_render_progressive.py": {
        "BlenderRenderProgressiveTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderProgressiveTest.test_cli_args": {
            "name": "test_cli_args",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_concat_videos.py": {
        "ConcatVideosTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatVideosTest.test_build_ffmpeg_cmd": {
            "name": "test_build_ffmpeg_cmd",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcatVideosTest.test_run_ffmpeg": {
            "name": "test_run_ffmpeg",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_copy_file.py": {
        "CopyFileTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_validate_settings": {
            "name": "test_validate_settings",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_nonexistant_source_and_dest": {
            "name": "test_nonexistant_source_and_dest",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_existing_source__nonexisting_dest": {
            "name": "test_existing_source__nonexisting_dest",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_nonexisting_source__existing_dest": {
            "name": "test_nonexisting_source__existing_dest",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_existing_source_and_dest": {
            "name": "test_existing_source_and_dest",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyFileTest.test_dest_in_nonexisting_subdir": {
            "name": "test_dest_in_nonexisting_subdir",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_create_python_file.py": {
        "CreatePythonFileTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePythonFileTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePythonFileTest.test_validate_settings": {
            "name": "test_validate_settings",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePythonFileTest.test_nonexistant_path": {
            "name": "test_nonexistant_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreatePythonFileTest.test_existing_path": {
            "name": "test_existing_path",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_create_video.py": {
        "CreateVideoTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateVideoTest.test_validate": {
            "name": "test_validate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateVideoTest.test_validate_without_ffmpeg": {
            "name": "test_validate_without_ffmpeg",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateVideoTest.test_build_ffmpeg_cmd_windows": {
            "name": "test_build_ffmpeg_cmd_windows",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateVideoTest.test_build_ffmpeg_cmd_linux": {
            "name": "test_build_ffmpeg_cmd_linux",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateVideoTest.test_run_ffmpeg": {
            "name": "test_run_ffmpeg",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_encode_audio.py": {
        "EncodeAudioTest.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodeAudioTest.test_build_ffmpeg_cmd": {
            "name": "test_build_ffmpeg_cmd",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_exr_sequence_to_jpeg.py": {
        "BlenderRenderProgressiveTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderProgressiveTest.test_exr_glob": {
            "name": "test_exr_glob",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlenderRenderProgressiveTest.test_exr_directory": {
            "name": "test_exr_directory",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_merge_exr.py": {
        "MergeProgressiveRendersCommandTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeProgressiveRendersCommandTest.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeProgressiveRendersCommandTest.test_happy_flow": {
            "name": "test_happy_flow",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeProgressiveRenderSequenceCommandTest.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeProgressiveRenderSequenceCommandTest.tearDown": {
            "name": "tearDown",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergeProgressiveRenderSequenceCommandTest.test_happy_flow": {
            "name": "test_happy_flow",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_move_out_of_way.py": {
        "MoveOutOfWayTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOutOfWayTest.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOutOfWayTest.test_nonexistant_source": {
            "name": "test_nonexistant_source",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOutOfWayTest.test_existing_source": {
            "name": "test_existing_source",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOutOfWayTest.test_source_is_file": {
            "name": "test_source_is_file",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveOutOfWayTest.test_existing_source_and_dest": {
            "name": "test_existing_source_and_dest",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_move_to_final.py": {
        "MoveToFinalTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveToFinalTest.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveToFinalTest.test_nonexistant_source": {
            "name": "test_nonexistant_source",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveToFinalTest.test_existing_source_and_dest": {
            "name": "test_existing_source_and_dest",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveToFinalTest.test_nonexistant_dest": {
            "name": "test_nonexistant_dest",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_move_with_counter.py": {
        "MoveWithCounterTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveWithCounterTest.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveWithCounterTest.test_numbers_with_holes": {
            "name": "test_numbers_with_holes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveWithCounterTest.test_no_regexp_match": {
            "name": "test_no_regexp_match",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_mux_audio.py": {
        "MuxAudioTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuxAudioTest.test_build_ffmpeg_cmd": {
            "name": "test_build_ffmpeg_cmd",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_remove_file.py": {
        "RemoveFileTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveFileTest.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveFileTest.test_validate_settings": {
            "name": "test_validate_settings",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveFileTest.test_nonexistant_source": {
            "name": "test_nonexistant_source",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveFileTest.test_source_file": {
            "name": "test_source_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveFileTest.test_soure_dir_with_files": {
            "name": "test_soure_dir_with_files",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_remove_tree.py": {
        "RemoveTreeTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.test_validate_settings": {
            "name": "test_validate_settings",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.test_nonexistant_source": {
            "name": "test_nonexistant_source",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.test_source_file": {
            "name": "test_source_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.test_soure_dir_with_files": {
            "name": "test_soure_dir_with_files",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTreeTest.test_soure_dir_with_files_and_dirs": {
            "name": "test_soure_dir_with_files_and_dirs",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_commands_subprocess.py": {
        "PIDFileTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_alive": {
            "name": "test_alive",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_alive_newlines": {
            "name": "test_alive_newlines",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_dead": {
            "name": "test_dead",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_nonexistant": {
            "name": "test_nonexistant",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_empty": {
            "name": "test_empty",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_not_configured": {
            "name": "test_not_configured",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDFileTest.test_race_open_exclusive": {
            "name": "test_race_open_exclusive",
            "location": 101,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_coro_mock.py": {
        "CoroMockTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroMockTest.test_setting_return_value": {
            "name": "test_setting_return_value",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroMockTest.test_setting_side_effect": {
            "name": "test_setting_side_effect",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_may_i_run.py": {
        "MayIRunTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest.tearDown": {
            "name": "tearDown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest._mock_get": {
            "name": "_mock_get",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest.test_may_i_run_false": {
            "name": "test_may_i_run_false",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest.test_may_i_run_true": {
            "name": "test_may_i_run_true",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest.test_work": {
            "name": "test_work",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MayIRunTest.test_go_asleep": {
            "name": "test_go_asleep",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_mypy.py": {
        "MypyRunnerTest.test_run_mypy": {
            "name": "test_run_mypy",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_pretask_check.py": {
        "PretaskWriteCheckTest.test_not_writable_dir": {
            "name": "test_not_writable_dir",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskWriteCheckTest.test_not_writable_file": {
            "name": "test_not_writable_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskWriteCheckTest.test_write_file_exists": {
            "name": "test_write_file_exists",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskWriteCheckTest.test_happy_remove_file": {
            "name": "test_happy_remove_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskWriteCheckTest.test_happy_not_remove_file": {
            "name": "test_happy_not_remove_file",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskWriteCheckTest.write_check": {
            "name": "write_check",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "post_run": []
            }
        },
        "PretaskReadCheckTest.test_not_readable_dir": {
            "name": "test_not_readable_dir",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskReadCheckTest.test_read_file_exists": {
            "name": "test_read_file_exists",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskReadCheckTest.test_read_file_not_exists": {
            "name": "test_read_file_not_exists",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretaskReadCheckTest.read_check": {
            "name": "read_check",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "post_run": []
            }
        },
        "PretaskWriteCheckTest.test_write_file_exists.post_run": {
            "name": "post_run",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "PretaskReadCheckTest.test_not_readable_dir.cleanup": {
            "name": "cleanup",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "PretaskReadCheckTest.test_read_file_exists.post_run": {
            "name": "post_run",
            "location": 128,
            "return": [],
            "arguments": {}
        }
    },
    "flamenco-worker-master/tests/test_runner.py": {
        "AbstractCommandTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractCommandTest.tearDown": {
            "name": "tearDown",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SleepCommandTest.test_sleep": {
            "name": "test_sleep",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecCommandTest.construct": {
            "name": "construct",
            "location": 57,
            "return": [
                "flamenco_worker.commands.ExecCommand"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecCommandTest.test_bad_settings": {
            "name": "test_bad_settings",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecCommandTest.test_exec_python": {
            "name": "test_exec_python",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecCommandTest.test_exec_invalid_utf": {
            "name": "test_exec_invalid_utf",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecCommandTest.test_exec_python_fails": {
            "name": "test_exec_python_fails",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_timing.py": {
        "TimingTest.test_record_duration": {
            "name": "test_record_duration",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "mock_monotonic": []
            }
        },
        "TimingTest.test_record_duration_exception": {
            "name": "test_record_duration_exception",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "mock_monotonic": []
            }
        },
        "TimingTest.test_checkpoints": {
            "name": "test_checkpoints",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "mock_monotonic": []
            }
        },
        "TimingTest.test_add_empty": {
            "name": "test_add_empty",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingTest.test_add": {
            "name": "test_add",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingTest.test_iadd": {
            "name": "test_iadd",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingTest.test_add_bad_type": {
            "name": "test_add_bad_type",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingTest.test_clear": {
            "name": "test_clear",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingTest.test_json_encoding": {
            "name": "test_json_encoding",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_upstream_update_queue.py": {
        "TaskUpdateQueueTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueueTest.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueueTest.test_queue_push": {
            "name": "test_queue_push",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueueTest.test_queue_persistence": {
            "name": "test_queue_persistence",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueueTest.test_conflict": {
            "name": "test_conflict",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskUpdateQueueTest.test_task_gone": {
            "name": "test_task_gone",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flamenco-worker-master/tests/test_worker.py": {
        "AbstractFWorkerTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractFWorkerTest.tearDown": {
            "name": "tearDown",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerStartupTest.test_startup_already_registered": {
            "name": "test_startup_already_registered",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "mock_merge_with_home_config": []
            }
        },
        "WorkerStartupTest.test_startup_registration": {
            "name": "test_startup_registration",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "mock_merge_with_home_config": []
            }
        },
        "WorkerStartupTest.test_startup_registration_unhappy": {
            "name": "test_startup_registration_unhappy",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "mock_merge_with_home_config": [],
                "mock_gethostname": []
            }
        },
        "WorkerStartupTest.test_reregister_if_forbidden": {
            "name": "test_reregister_if_forbidden",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "mock_merge_with_home_config": []
            }
        },
        "TestWorkerTaskExecution.setUp": {
            "name": "setUp",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerTaskExecution.test_fetch_task_happy": {
            "name": "test_fetch_task_happy",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerTaskExecution.test_stop_current_task": {
            "name": "test_stop_current_task",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerTaskExecution.test_stop_current_task_mismatch": {
            "name": "test_stop_current_task_mismatch",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkerTaskExecution.test_uncaught_exception": {
            "name": "test_uncaught_exception",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPushToMasterTest.test_one_activity": {
            "name": "test_one_activity",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPushToMasterTest.test_two_activities": {
            "name": "test_two_activities",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPushToMasterTest.test_one_log": {
            "name": "test_one_log",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPushToMasterTest.test_two_logs": {
            "name": "test_two_logs",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerShutdownTest.setUp": {
            "name": "setUp",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerShutdownTest.test_shutdown": {
            "name": "test_shutdown",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerShutdownTest.tearDown": {
            "name": "tearDown",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerSleepingTest.setUp": {
            "name": "setUp",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerSleepingTest.test_stop_current_task_go_sleep": {
            "name": "test_stop_current_task_go_sleep",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPushToMasterTest.test_one_activity.queue_pushed": {
            "name": "queue_pushed",
            "location": 441,
            "return": [],
            "arguments": {}
        },
        "WorkerPushToMasterTest.test_two_activities.queue_pushed": {
            "name": "queue_pushed",
            "location": 464,
            "return": [],
            "arguments": {}
        },
        "WorkerPushToMasterTest.test_one_log.queue_pushed": {
            "name": "queue_pushed",
            "location": 496,
            "return": [],
            "arguments": {}
        },
        "WorkerPushToMasterTest.test_two_logs.queue_pushed": {
            "name": "queue_pushed",
            "location": 517,
            "return": [],
            "arguments": {}
        }
    },
    "flamenco-worker-master/tests/__init__.py": {}
}
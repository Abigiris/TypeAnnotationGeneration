{
    "flask-crud-master/setup.py": {},
    "flask-crud-master/flask_crud/view.py": {
        "update_attrs": {
            "name": "update_attrs",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        },
        "is_listy": {
            "name": "is_listy",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing": []
            }
        },
        "CRUDView.query": {
            "name": "query",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDView.query_for_user": {
            "name": "query_for_user",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDView._get_model": {
            "name": "_get_model",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDView._db": {
            "name": "_db",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CRUDView._get_current_user": {
            "name": "_get_current_user",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDView._access_checks_enabled": {
            "name": "_access_checks_enabled",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDView._abort_access_check_failed": {
            "name": "_abort_access_check_failed",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CRUDView._check_can": {
            "name": "_check_can",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check": [],
                "model": []
            }
        },
        "CRUDView._check_can_read": {
            "name": "_check_can_read",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CRUDView._check_can_write": {
            "name": "_check_can_write",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CRUDView._check_can_create": {
            "name": "_check_can_create",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "args": []
            }
        },
        "CollectionView.get": {
            "name": "get",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionView.post": {
            "name": "post",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CollectionView._add_prefetch": {
            "name": "_add_prefetch",
            "location": 141,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "_T0@@"
                ]
            }
        },
        "ResourceView._lookup": {
            "name": "_lookup",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "ResourceView.get": {
            "name": "get",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "ResourceView.patch": {
            "name": "patch",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "pk": []
            }
        },
        "ResourceView.delete": {
            "name": "delete",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": []
            }
        }
    },
    "flask-crud-master/flask_crud/__init__.py": {
        "AccessControlUser.query_for_user": {
            "name": "query_for_user",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "user": []
            }
        },
        "AccessControlUser.user_can_read": {
            "name": "user_can_read",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "AccessControlUser.user_can_write": {
            "name": "user_can_write",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "AccessControlUser.user_can_create": {
            "name": "user_can_create",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "args": []
            }
        },
        "CRUD.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "CRUD.init_app": {
            "name": "init_app",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "identity_handler": []
            }
        }
    },
    "flask-crud-master/flask_crud/test/conftest.py": {
        "app": {
            "name": "app",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 22,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "db": {
            "name": "db",
            "location": 27,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "pets": {
            "name": "pets",
            "location": 32,
            "return": [],
            "arguments": {
                "pet_factory": [],
                "db": []
            }
        }
    },
    "flask-crud-master/flask_crud/test/test_access_controls.py": {
        "test_create": {
            "name": "test_create",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": []
            }
        },
        "test_unchecked_collection_can_be_accessed": {
            "name": "test_unchecked_collection_can_be_accessed",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "flask-crud-master/flask_crud/test/test_crud.py": {
        "test_list": {
            "name": "test_list",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": []
            }
        },
        "test_get": {
            "name": "test_get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": [],
                "db": []
            }
        },
        "test_post": {
            "name": "test_post",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": []
            }
        },
        "test_patch": {
            "name": "test_patch",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": [],
                "db": []
            }
        },
        "test_disallowed": {
            "name": "test_disallowed",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "pets": []
            }
        }
    },
    "flask-crud-master/flask_crud/test/__init__.py": {},
    "flask-crud-master/flask_crud/test/app/model.py": {
        "Pet.query_for_user": {
            "name": "query_for_user",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "user": []
            }
        },
        "Human.user_can_write": {
            "name": "user_can_write",
            "location": 33,
            "return": [
                "sqlalchemy.sql.operators.ColumnOperators"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Human.query_for_user": {
            "name": "query_for_user",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "user": []
            }
        }
    },
    "flask-crud-master/flask_crud/test/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "is_rel_loaded": {
            "name": "is_rel_loaded",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [],
                "attr_name": []
            }
        },
        "PetCollection.get": {
            "name": "get",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PetCollection.post": {
            "name": "post",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "PetResource.get": {
            "name": "get",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "PetResource.patch": {
            "name": "patch",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "pk": []
            }
        },
        "PetResource.delete": {
            "name": "delete",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "HumanCollection.get": {
            "name": "get",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumanCollection.post": {
            "name": "post",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HumanResource.get": {
            "name": "get",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "HumanResource.patch": {
            "name": "patch",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "pk": []
            }
        },
        "CarCollection.get": {
            "name": "get",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "flask-dialogflow-master/setup.py": {},
    "flask-dialogflow-master/docs/conf.py": {},
    "flask-dialogflow-master/examples/helloonsei/helloonsei/helloonsei.py": {
        "welcome": {
            "name": "welcome",
            "location": 23,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "get_date": {
            "name": "get_date",
            "location": 32,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "get_berlin_picture": {
            "name": "get_berlin_picture",
            "location": 87,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "get_media_response": {
            "name": "get_media_response",
            "location": 122,
            "return": [],
            "arguments": {
                "conv": []
            }
        }
    },
    "flask-dialogflow-master/examples/helloonsei/helloonsei/__init__.py": {},
    "flask-dialogflow-master/flask_dialogflow/agent.py": {
        "_validate_dialogflow_version": {
            "name": "_validate_dialogflow_version",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            }
        },
        "_create_default_handler": {
            "name": "_create_default_handler",
            "location": 729,
            "return": [
                "logging.StreamHandler[TextIO]"
            ],
            "arguments": {}
        },
        "build_webhook_request": {
            "name": "build_webhook_request",
            "location": 735,
            "return": [
                "Any"
            ],
            "arguments": {
                "intent": [],
                "action": [],
                "source": [],
                "session": [],
                "parameters": [],
                "contexts": [],
                "payload": [],
                "is_fallback": [],
                "dialogflow_version": []
            }
        },
        "DialogflowAgent.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "version": [],
                "route": [],
                "templates_file": [],
                "debug": [],
                "aog_user_storage_default_factory": [],
                "aog_user_storage_deserializer": [],
                "aog_user_storage_serializer": [],
                "aog_text_to_speech_as_ssml": []
            }
        },
        "DialogflowAgent.init_app": {
            "name": "init_app",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "route": [],
                "templates_file": []
            }
        },
        "DialogflowAgent.register_handler": {
            "name": "register_handler",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intent": [],
                "handler": []
            }
        },
        "DialogflowAgent.handle": {
            "name": "handle",
            "location": 258,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "intent": []
            }
        },
        "DialogflowAgent.register_integration": {
            "name": "register_integration",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "integration_conv_cls": [],
                "version": [],
                "integration_conv_cls_kwargs": []
            }
        },
        "DialogflowAgent.integration": {
            "name": "integration",
            "location": 389,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "version": []
            }
        },
        "DialogflowAgent.register_context": {
            "name": "register_context",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": [],
                "keep_around": [],
                "default_factory": [],
                "deserializer": [],
                "serializer": []
            }
        },
        "DialogflowAgent.context": {
            "name": "context",
            "location": 463,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "DialogflowAgent.list_handler": {
            "name": "list_handler",
            "location": 533,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent.list_integrations": {
            "name": "list_integrations",
            "location": 541,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent.list_contexts": {
            "name": "list_contexts",
            "location": 549,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent.test_request": {
            "name": "test_request",
            "location": 558,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent._flask_view_func": {
            "name": "_flask_view_func",
            "location": 593,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent._lookup_conversation_handler": {
            "name": "_lookup_conversation_handler",
            "location": 603,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "DialogflowAgent._handle_request": {
            "name": "_handle_request",
            "location": 620,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "webhook_request": []
            }
        },
        "DialogflowAgent._initialize_conversation": {
            "name": "_initialize_conversation",
            "location": 631,
            "return": [
                "flask_dialogflow.conversation.V2DialogflowConversation"
            ],
            "arguments": {
                "self": [],
                "webhook_request": []
            }
        },
        "DialogflowAgent._initialize_default_contexts": {
            "name": "_initialize_default_contexts",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contexts": [],
                "session": []
            }
        },
        "DialogflowAgent._reset_lifespan_of_keep_around_contexts": {
            "name": "_reset_lifespan_of_keep_around_contexts",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contexts": []
            }
        },
        "DialogflowAgent._serialize_context_params": {
            "name": "_serialize_context_params",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contexts": []
            }
        },
        "DialogflowAgent._deserialize_context_params": {
            "name": "_deserialize_context_params",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contexts": []
            }
        },
        "DialogflowAgent._log_json": {
            "name": "_log_json",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [],
                "level": [],
                "header": [],
                "indent": [],
                "ensure_ascii": []
            }
        },
        "DialogflowAgent._flask_shell_context_processor": {
            "name": "_flask_shell_context_processor",
            "location": 718,
            "return": [
                "Dict[(str, DialogflowAgent)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogflowAgent.__repr__": {
            "name": "__repr__",
            "location": 725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebhookResponse.from_webhook_response": {
            "name": "from_webhook_response",
            "location": 813,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "webhook_response": []
            }
        },
        "TestWebhookResponse.text_responses": {
            "name": "text_responses",
            "location": 824,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebhookResponse.has_context": {
            "name": "has_context",
            "location": 837,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "TestWebhookResponse.context": {
            "name": "context",
            "location": 851,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "DialogflowAgent.handle.decorator": {
            "name": "decorator",
            "location": 279,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "DialogflowAgent.integration.decorator": {
            "name": "decorator",
            "location": 404,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DialogflowAgent.context.decorator": {
            "name": "decorator",
            "location": 519,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/cli.py": {
        "agent_cli": {
            "name": "agent_cli",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "intents": {
            "name": "intents",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "contexts": {
            "name": "contexts",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "integrations": {
            "name": "integrations",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "flask-dialogflow-master/flask_dialogflow/context.py": {
        "_except_not_registered": {
            "name": "_except_not_registered",
            "location": 84,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "_is_valid_ctx_display_name": {
            "name": "_is_valid_ctx_display_name",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [],
                "pattern": []
            }
        },
        "_is_full_ctx_name": {
            "name": "_is_full_ctx_name",
            "location": 371,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [],
                "pattern": []
            }
        },
        "make_full_ctx_name": {
            "name": "make_full_ctx_name",
            "location": 377,
            "return": [
                "Any"
            ],
            "arguments": {
                "session": [],
                "display_name": []
            }
        },
        "Context.display_name": {
            "name": "display_name",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.from_context": {
            "name": "from_context",
            "location": 60,
            "return": [
                "Context[nothing]"
            ],
            "arguments": {
                "cls": [
                    "Type[Context]"
                ],
                "ctx": []
            }
        },
        "_except_not_registered.wrapper": {
            "name": "wrapper",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "ContextRegistry.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRegistry.register": {
            "name": "register",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry._update_registry_entry": {
            "name": "_update_registry_entry",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.__contains__": {
            "name": "__contains__",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRegistry.__len__": {
            "name": "__len__",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRegistry.should_keep_around": {
            "name": "should_keep_around",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.have_default_factories": {
            "name": "have_default_factories",
            "location": 131,
            "return": [
                "Set[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRegistry.get_default_factory": {
            "name": "get_default_factory",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.get_serializer": {
            "name": "get_serializer",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.get_deserializer": {
            "name": "get_deserializer",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.unregister": {
            "name": "unregister",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextRegistry.list_entries": {
            "name": "list_entries",
            "location": 155,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRegistry.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManager.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contexts": [],
                "session": [],
                "context_registry": []
            }
        },
        "ContextManager.get": {
            "name": "get",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextManager.set": {
            "name": "set",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name_or_ctx_instance": [],
                "lifespan_count": []
            }
        },
        "ContextManager.delete": {
            "name": "delete",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": [],
                "keep_in_registry": []
            }
        },
        "ContextManager.has": {
            "name": "has",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextManager.__contains__": {
            "name": "__contains__",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextManager.__iter__": {
            "name": "__iter__",
            "location": 314,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManager.__len__": {
            "name": "__len__",
            "location": 317,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManager.__getattr__": {
            "name": "__getattr__",
            "location": 320,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attr_or_display_name": []
            }
        },
        "ContextManager.__delattr__": {
            "name": "__delattr__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextManager.as_list": {
            "name": "as_list",
            "location": 339,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/conversation.py": {
        "V2DialogflowConversation.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "webhook_request": [],
                "context_manager": [],
                "integration_convs": []
            }
        },
        "V2DialogflowConversation.webhook_request": {
            "name": "webhook_request",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.session": {
            "name": "session",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.response_id": {
            "name": "response_id",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.query_text": {
            "name": "query_text",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.language_code": {
            "name": "language_code",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.intent": {
            "name": "intent",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.action": {
            "name": "action",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.contexts": {
            "name": "contexts",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.parameters": {
            "name": "parameters",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.all_required_params_present": {
            "name": "all_required_params_present",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.fallback_level": {
            "name": "fallback_level",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.diagnostic_info": {
            "name": "diagnostic_info",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.intent_detection_confidence": {
            "name": "intent_detection_confidence",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.speech_recognition_confidence": {
            "name": "speech_recognition_confidence",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.sentiment": {
            "name": "sentiment",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.source": {
            "name": "source",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.version": {
            "name": "version",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.payload": {
            "name": "payload",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.integrations": {
            "name": "integrations",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.ask": {
            "name": "ask",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.show_quick_replies": {
            "name": "show_quick_replies",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.show_card": {
            "name": "show_card",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": []
            }
        },
        "V2DialogflowConversation.show_image": {
            "name": "show_image",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "V2DialogflowConversation._add_fulfillment_message": {
            "name": "_add_fulfillment_message",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.google": {
            "name": "google",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.facebook": {
            "name": "facebook",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.slack": {
            "name": "slack",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.telegram": {
            "name": "telegram",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.kik": {
            "name": "kik",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.skype": {
            "name": "skype",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.twilio": {
            "name": "twilio",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.twilio_ip": {
            "name": "twilio_ip",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.line": {
            "name": "line",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.spark": {
            "name": "spark",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.tropo": {
            "name": "tropo",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.viber": {
            "name": "viber",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2DialogflowConversation.__getattr__": {
            "name": "__getattr__",
            "location": 373,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "V2DialogflowConversation.to_webhook_response": {
            "name": "to_webhook_response",
            "location": 376,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2beta1DialogflowConversation.tell": {
            "name": "tell",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2beta1DialogflowConversation.alternative_query_results": {
            "name": "alternative_query_results",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/exceptions.py": {
        "AmbiguousHandlerError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intent": [],
                "existing_handler": []
            }
        },
        "AmbiguousIntegrationError.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "existing_cls": [],
                "version": []
            }
        },
        "ContextNotRegisteredError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "display_name": []
            }
        },
        "ContextClassNotSerializableError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/json.py": {
        "JSONType.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JSONType.from_json": {
            "name": "from_json",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "schema_kwargs": [],
                "load_kwargs": []
            }
        },
        "JSONType.to_json": {
            "name": "to_json",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "schema_kwargs": [],
                "dump_kwargs": []
            }
        },
        "JSONTypeSchema.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "JSONTypeSchema.make_obj": {
            "name": "make_obj",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "JSONTypeSchema.remove_skip_values": {
            "name": "remove_skip_values",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ModuleLocalNested.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nested": [],
                "module_name": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/templating.py": {
        "_validate_randomizable_source": {
            "name": "_validate_randomizable_source",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "source": []
            }
        },
        "YamlLoaderWithRandomization.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "YamlLoaderWithRandomization._should_reload": {
            "name": "_should_reload",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YamlLoaderWithRandomization._reload_mapping": {
            "name": "_reload_mapping",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YamlLoaderWithRandomization.get_source": {
            "name": "get_source",
            "location": 82,
            "return": [
                "Tuple[(Any, Any, Callable[([], Any)])]"
            ],
            "arguments": {
                "self": [],
                "environment": [],
                "name": []
            }
        },
        "YamlLoaderWithRandomization._get_randomized_source": {
            "name": "_get_randomized_source",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rand": []
            }
        },
        "YamlLoaderWithRandomization.list_templates": {
            "name": "list_templates",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/utils.py": {
        "fqn": {
            "name": "fqn",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/__init__.py": {},
    "flask-dialogflow-master/flask_dialogflow/google_apis/actions_on_google_v2.py": {},
    "flask-dialogflow-master/flask_dialogflow/google_apis/dialogflow_v2.py": {},
    "flask-dialogflow-master/flask_dialogflow/google_apis/dialogflow_v2beta1.py": {},
    "flask-dialogflow-master/flask_dialogflow/google_apis/__init__.py": {
        "import_dialogflow_api": {
            "name": "import_dialogflow_api",
            "location": 58,
            "return": [
                "module"
            ],
            "arguments": {
                "version": []
            }
        },
        "GoogleType.__post_init__": {
            "name": "__post_init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/integrations/actions_on_google.py": {
        "ssmlify": {
            "name": "ssmlify",
            "location": 773,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "UserFacade.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "user_storage_default_factory": [],
                "user_storage_deserializer": [],
                "user_storage_serializer": []
            }
        },
        "UserFacade.user_id": {
            "name": "user_id",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.id_token": {
            "name": "id_token",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.profile": {
            "name": "profile",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.access_token": {
            "name": "access_token",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.permissions": {
            "name": "permissions",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.locale": {
            "name": "locale",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.last_seen": {
            "name": "last_seen",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.last_seen_before": {
            "name": "last_seen_before",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.package_entitlements": {
            "name": "package_entitlements",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade.user_storage": {
            "name": "user_storage",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserFacade._serialize_user_storage": {
            "name": "_serialize_user_storage",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_request": [],
                "user_storage_default_factory": [],
                "user_storage_deserializer": [],
                "user_storage_serializer": [],
                "text_to_speech_as_ssml": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.from_webhook_request_payload": {
            "name": "from_webhook_request_payload",
            "location": 249,
            "return": [
                "V2ActionsOnGoogleDialogflowConversation"
            ],
            "arguments": {
                "cls": [
                    "Type[V2ActionsOnGoogleDialogflowConversation]"
                ],
                "payload": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.app_request": {
            "name": "app_request",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.user": {
            "name": "user",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.inputs": {
            "name": "inputs",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.surface": {
            "name": "surface",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.has_screen": {
            "name": "has_screen",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.available_surfaces": {
            "name": "available_surfaces",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.is_in_sandbox": {
            "name": "is_in_sandbox",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask": {
            "name": "ask",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_ssml": {
            "name": "ask_ssml",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.tell": {
            "name": "tell",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.tell_ssml": {
            "name": "tell_ssml",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.display": {
            "name": "display",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.suggest": {
            "name": "suggest",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.show_basic_card": {
            "name": "show_basic_card",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_card": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.show_image": {
            "name": "show_image",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "accessibility_text": [],
                "height": [],
                "width": [],
                "image_display_options": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.show_table_card": {
            "name": "show_table_card",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_card": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.play_media_response": {
            "name": "play_media_response",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "media_response": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.show_carousel_browse": {
            "name": "show_carousel_browse",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "carousel_browse": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.show_order_update": {
            "name": "show_order_update",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_update": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.suggest_link_out": {
            "name": "suggest_link_out",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_name": [],
                "url": [],
                "url_type_hint": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_permission": {
            "name": "ask_for_permission",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_confirmation": {
            "name": "ask_for_confirmation",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_confirmation_text": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_sign_in": {
            "name": "ask_for_sign_in",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_datetime": {
            "name": "ask_for_datetime",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_text": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_date": {
            "name": "ask_for_date",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_text": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_time": {
            "name": "ask_for_time",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_text": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation._ask_for_datetime": {
            "name": "_ask_for_datetime",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_screen_surface": {
            "name": "ask_for_screen_surface",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "notification_title": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_new_surface": {
            "name": "ask_for_new_surface",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capabilities": [],
                "context": [],
                "notification_title": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_link": {
            "name": "ask_for_link",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "open_url_action": [],
                "dialog_spec": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_simple_selection": {
            "name": "ask_for_simple_selection",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "simple_select": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_list_selection": {
            "name": "ask_for_list_selection",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_select": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_carousel_selection": {
            "name": "ask_for_carousel_selection",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "carousel_select": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_collection_selection": {
            "name": "ask_for_collection_selection",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection_select": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_delivery_address": {
            "name": "ask_for_delivery_address",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_transaction_requirements_check": {
            "name": "ask_for_transaction_requirements_check",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_options": [],
                "payment_options": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.ask_for_transaction_decision": {
            "name": "ask_for_transaction_decision",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proposed_order": [],
                "order_options": [],
                "payment_options": [],
                "presentation_options": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation._add_text_response": {
            "name": "_add_text_response",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation._add_rich_response_item": {
            "name": "_add_rich_response_item",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation._set_system_intent": {
            "name": "_set_system_intent",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "intent": [],
                "value_spec": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation._set_option_system_intent": {
            "name": "_set_option_system_intent",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "V2ActionsOnGoogleDialogflowConversation.to_webhook_response_payload": {
            "name": "to_webhook_response_payload",
            "location": 751,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/flask_dialogflow/integrations/__init__.py": {
        "AbstractIntegrationConversation.from_webhook_request_payload": {
            "name": "from_webhook_request_payload",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "AbstractIntegrationConversation.to_webhook_response_payload": {
            "name": "to_webhook_response_payload",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericIntegrationConversation.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GenericIntegrationConversation.__setitem__": {
            "name": "__setitem__",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "GenericIntegrationConversation.__delitem__": {
            "name": "__delitem__",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "GenericIntegrationConversation.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "GenericIntegrationConversation.__len__": {
            "name": "__len__",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericIntegrationConversation.__iter__": {
            "name": "__iter__",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericIntegrationConversation.from_webhook_request_payload": {
            "name": "from_webhook_request_payload",
            "location": 97,
            "return": [
                "_TGenericIntegrationConversation@@GenericIntegrationConversation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGenericIntegrationConversation]"
                ],
                "payload": []
            }
        },
        "GenericIntegrationConversation.to_webhook_response_payload": {
            "name": "to_webhook_response_payload",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationRegistry.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_integration_conv_cls": []
            }
        },
        "IntegrationRegistry.register": {
            "name": "register",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "integration_conversation": [],
                "version": [],
                "integration_conversation_kwargs": []
            }
        },
        "IntegrationRegistry.lookup": {
            "name": "lookup",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "version": []
            }
        },
        "IntegrationRegistry.unregister": {
            "name": "unregister",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "version": []
            }
        },
        "IntegrationRegistry.init_integration_convs": {
            "name": "init_integration_convs",
            "location": 210,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "self": [],
                "odir": []
            }
        },
        "IntegrationRegistry.list_entries": {
            "name": "list_entries",
            "location": 243,
            "return": [
                "Generator[(Tuple[(nothing, nothing, nothing, nothing)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/test/conftest.py": {
        "aog_webhook_request": {
            "name": "aog_webhook_request",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "aog_payload": {
            "name": "aog_payload",
            "location": 32,
            "return": [],
            "arguments": {
                "aog_webhook_request": []
            }
        },
        "templates_file": {
            "name": "templates_file",
            "location": 37,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "app": {
            "name": "app",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "agent": {
            "name": "agent",
            "location": 75,
            "return": [],
            "arguments": {
                "templates_file": [],
                "request": []
            }
        },
        "agent.handler": {
            "name": "handler",
            "location": 81,
            "return": [],
            "arguments": {
                "conv": []
            }
        }
    },
    "flask-dialogflow-master/test/old_test_actions_on_google.py": {
        "_assert_system_intent_is": {
            "name": "_assert_system_intent_is",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": [],
                "intent": []
            }
        },
        "_assert": {
            "name": "_assert",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": []
            }
        },
        "test_ssmlify": {
            "name": "test_ssmlify",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestUserFacade.test_can_init_without_user_obj": {
            "name": "test_can_init_without_user_obj",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserFacade.user": {
            "name": "user",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserFacade.user_facade": {
            "name": "user_facade",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "TestUserFacade.test_all_user_attrs_accessible_through_facade": {
            "name": "test_all_user_attrs_accessible_through_facade",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "user_facade": []
            }
        },
        "TestUserFacade.test_last_seen_before": {
            "name": "test_last_seen_before",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_facade": []
            }
        },
        "TestUserFacade.test_user_storage_initialization": {
            "name": "test_user_storage_initialization",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_facade": []
            }
        },
        "TestUserFacade.test_user_storage_with_existing_storage": {
            "name": "test_user_storage_with_existing_storage",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "TestUserFacade.test_delete_user_storage": {
            "name": "test_delete_user_storage",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_facade": []
            }
        },
        "TestUserFacade.test_custom_user_storage_class": {
            "name": "test_custom_user_storage_class",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "TestUserFacade.test_serialize_user_storage": {
            "name": "test_serialize_user_storage",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_facade": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_from_request_json": {
            "name": "test_from_request_json",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aog_payload": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.conv": {
            "name": "conv",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "aog_payload": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_app_request": {
            "name": "test_app_request",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_user": {
            "name": "test_user",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "conv": [],
                "user_attr": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_inputs": {
            "name": "test_inputs",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_surface": {
            "name": "test_surface",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_surface_when_surface_None": {
            "name": "test_surface_when_surface_None",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_has_screen": {
            "name": "test_has_screen",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_available_surfaces": {
            "name": "test_available_surfaces",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_available_surfaces_when_available_surfaces_None": {
            "name": "test_available_surfaces_when_available_surfaces_None",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_is_in_sandbox": {
            "name": "test_is_in_sandbox",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask": {
            "name": "test_ask",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_with_automatic_ssml_off": {
            "name": "test_ask_with_automatic_ssml_off",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_ssml": {
            "name": "test_ask_ssml",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_does_expect_response": {
            "name": "test_ask_does_expect_response",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_tell": {
            "name": "test_tell",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_tell_with_automatic_ssml_off": {
            "name": "test_tell_with_automatic_ssml_off",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_tell_ssml": {
            "name": "test_tell_ssml",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_tell_doesnt_expect_response": {
            "name": "test_tell_doesnt_expect_response",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_display": {
            "name": "test_display",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_display_with_multiple_rich_response_items": {
            "name": "test_display_with_multiple_rich_response_items",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_display_raises_ValueError_when_no_text_set": {
            "name": "test_display_raises_ValueError_when_no_text_set",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_suggest": {
            "name": "test_suggest",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_show_basic_card": {
            "name": "test_show_basic_card",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_show_image": {
            "name": "test_show_image",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_show_table_card": {
            "name": "test_show_table_card",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_play_media_response": {
            "name": "test_play_media_response",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_show_browsing_carousel": {
            "name": "test_show_browsing_carousel",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_show_order_update": {
            "name": "test_show_order_update",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_suggest_link_out": {
            "name": "test_suggest_link_out",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_permission": {
            "name": "test_ask_for_permission",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_confirmation": {
            "name": "test_ask_for_confirmation",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_sign_in": {
            "name": "test_ask_for_sign_in",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_datetime": {
            "name": "test_ask_for_datetime",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_date": {
            "name": "test_ask_for_date",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_time": {
            "name": "test_ask_for_time",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_screen_surface": {
            "name": "test_ask_for_screen_surface",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_new_surface": {
            "name": "test_ask_for_new_surface",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_link": {
            "name": "test_ask_for_link",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_simple_selection": {
            "name": "test_ask_for_simple_selection",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_list_selection": {
            "name": "test_ask_for_list_selection",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_collection_selection": {
            "name": "test_ask_for_collection_selection",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_carousel_selection": {
            "name": "test_ask_for_carousel_selection",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_delivery_address": {
            "name": "test_ask_for_delivery_address",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_transaction_requirements_check": {
            "name": "test_ask_for_transaction_requirements_check",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestV2ActionsOnGoogleDialogflowConversation.test_ask_for_transaction_decision": {
            "name": "test_ask_for_transaction_decision",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        }
    },
    "flask-dialogflow-master/test/test_agent.py": {
        "test_validate_dialogflow_version_valid_version": {
            "name": "test_validate_dialogflow_version_valid_version",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_dialogflow_version_invalid_version": {
            "name": "test_validate_dialogflow_version_invalid_version",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_default_handler": {
            "name": "test_create_default_handler",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_webhook_request": {
            "name": "test_build_webhook_request",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDialogflowAgent.test_basic_context_functionality": {
            "name": "test_basic_context_functionality",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "templates_file": [],
                "version": []
            }
        },
        "TestDialogflowAgent.test_test_request": {
            "name": "test_test_request",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgent.test_debug_mode_sets_debug_logging_level": {
            "name": "test_debug_mode_sets_debug_logging_level",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "templates_file": []
            }
        },
        "TestDialogflowAgent.test_debug_mode_adds_handler": {
            "name": "test_debug_mode_adds_handler",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "templates_file": []
            }
        },
        "TestDialogflowAgent.test_repr": {
            "name": "test_repr",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.uninitialized_agent": {
            "name": "uninitialized_agent",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "templates_file": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_called_when_app_passed_to_constructor": {
            "name": "test_init_app_called_when_app_passed_to_constructor",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "templates_file": [],
                "monkeypatch": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_not_called_when_no_app_passed_to_constructor": {
            "name": "test_init_app_not_called_when_no_app_passed_to_constructor",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "monkeypatch": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_adds_route": {
            "name": "test_init_app_adds_route",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": [],
                "templates_file": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_sets_ChoiceLoader": {
            "name": "test_init_app_sets_ChoiceLoader",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_sets_auto_reload": {
            "name": "test_init_app_sets_auto_reload",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_adds_reference_to_agent": {
            "name": "test_init_app_adds_reference_to_agent",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_creates_extensions_dict_when_necessary": {
            "name": "test_init_app_creates_extensions_dict_when_necessary",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_flask_shell_context_processor": {
            "name": "test_flask_shell_context_processor",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentInitFlaskApp.test_init_app_adds_shell_context_processor": {
            "name": "test_init_app_adds_shell_context_processor",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uninitialized_agent": [],
                "app": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_registered_handler_is_called": {
            "name": "test_registered_handler_is_called",
            "location": 315,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_handle_decorator": {
            "name": "test_handle_decorator",
            "location": 327,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_double_registration_raises_error": {
            "name": "test_double_registration_raises_error",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_error_when_no_handler_matched": {
            "name": "test_error_when_no_handler_matched",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_list_handler": {
            "name": "test_list_handler",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.foo_conv": {
            "name": "foo_conv",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.test_register_integration": {
            "name": "test_register_integration",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "foo_conv": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.test_integration_decorator": {
            "name": "test_integration_decorator",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [],
                "foo_conv": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.test_aog_integration_cls_registered_by_default": {
            "name": "test_aog_integration_cls_registered_by_default",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.test_list_integrations": {
            "name": "test_list_integrations",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_ctx_without_params_does_nothing": {
            "name": "test_register_ctx_without_params_does_nothing",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_ctx_keep_around_resets_lifespan": {
            "name": "test_register_ctx_keep_around_resets_lifespan",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_keep_around_lifespan_is_reset_before_handler": {
            "name": "test_keep_around_lifespan_is_reset_before_handler",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_ctx_default_factory_is_called": {
            "name": "test_register_ctx_default_factory_is_called",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_JSONType_context_class": {
            "name": "test_register_JSONType_context_class",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_class_with_custom_serializer": {
            "name": "test_register_class_with_custom_serializer",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_error_on_class_registration_without_serializer": {
            "name": "test_error_on_class_registration_without_serializer",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentContextAPI.test_list_contexts": {
            "name": "test_list_contexts",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentSessionContext.test_session_context_gets_set": {
            "name": "test_session_context_gets_set",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentSessionContext.test_fallback_level_increased_on_fallback_intent": {
            "name": "test_fallback_level_increased_on_fallback_intent",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentSessionContext.test_fallback_level_increased_on_repeated_fallback_intent": {
            "name": "test_fallback_level_increased_on_repeated_fallback_intent",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgentSessionContext.test_fallback_level_reset_on_non_fallback_intent": {
            "name": "test_fallback_level_reset_on_non_fallback_intent",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestTestWebhookResponse.test_is_WebhookResponse": {
            "name": "test_is_WebhookResponse",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestWebhookResponse.test_test_request_returns_TestWebhookResponse": {
            "name": "test_test_request_returns_TestWebhookResponse",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestTestWebhookResponse.test_text_responses": {
            "name": "test_text_responses",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestTestWebhookResponse.test_has_context": {
            "name": "test_has_context",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestTestWebhookResponse.test_context": {
            "name": "test_context",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestTestWebhookResponse.test_nonexistent_context": {
            "name": "test_nonexistent_context",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowAgent.test_test_request.handler": {
            "name": "handler",
            "location": 217,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_registered_handler_is_called.handler": {
            "name": "handler",
            "location": 318,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentHandlerAPI.test_handle_decorator.handler": {
            "name": "handler",
            "location": 331,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentContextAPI.test_keep_around_lifespan_is_reset_before_handler.handler": {
            "name": "handler",
            "location": 411,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_ctx_default_factory_is_called.default": {
            "name": "default",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "TestDialogflowAgentContextAPI.test_register_JSONType_context_class.handler": {
            "name": "handler",
            "location": 435,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentContextAPI.test_register_class_with_custom_serializer.handler": {
            "name": "handler",
            "location": 458,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestTestWebhookResponse.test_text_responses.handler": {
            "name": "handler",
            "location": 537,
            "return": [],
            "arguments": {
                "conv": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.foo_conv.FooConv.from_webhook_request_payload": {
            "name": "from_webhook_request_payload",
            "location": 362,
            "return": [],
            "arguments": {
                "cls": [],
                "payload": []
            }
        },
        "TestDialogflowAgentIntegrationsAPI.foo_conv.FooConv.to_webhook_response_payload": {
            "name": "to_webhook_response_payload",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/test/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 15,
            "return": [],
            "arguments": {
                "app": [],
                "agent": []
            }
        },
        "test_intents_cmd": {
            "name": "test_intents_cmd",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_contexts_cmd": {
            "name": "test_contexts_cmd",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_integrations_cmd": {
            "name": "test_integrations_cmd",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": []
            }
        }
    },
    "flask-dialogflow-master/test/test_context.py": {
        "test_make_full_ctx_name": {
            "name": "test_make_full_ctx_name",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_full_ctx_name": {
            "name": "test_is_full_ctx_name",
            "location": 347,
            "return": [],
            "arguments": {
                "name": [],
                "pattern": [],
                "expected": []
            }
        },
        "test_is_valid_ctx_display_name": {
            "name": "test_is_valid_ctx_display_name",
            "location": 359,
            "return": [],
            "arguments": {
                "name": [],
                "pattern": [],
                "expected": []
            }
        },
        "TestContext.test_serialization": {
            "name": "test_serialization",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_deserialization": {
            "name": "test_deserialization",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_getitem": {
            "name": "test_getitem",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_setitem": {
            "name": "test_setitem",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_delitem": {
            "name": "test_delitem",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_len": {
            "name": "test_len",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_iter": {
            "name": "test_iter",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_display_name": {
            "name": "test_display_name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "expected": []
            }
        },
        "TestContextRegistry.test_empty_init": {
            "name": "test_empty_init",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextRegistry.registry": {
            "name": "registry",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextRegistry.test_name_only_registers_empty_entry": {
            "name": "test_name_only_registers_empty_entry",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_update_existing_entry": {
            "name": "test_update_existing_entry",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_contains": {
            "name": "test_contains",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_iter": {
            "name": "test_iter",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_len": {
            "name": "test_len",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_get_default_factory": {
            "name": "test_get_default_factory",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_have_default_factories": {
            "name": "test_have_default_factories",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_get_serializer": {
            "name": "test_get_serializer",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_get_serializer_key_error_when_not_registered": {
            "name": "test_get_serializer_key_error_when_not_registered",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_get_deserializer": {
            "name": "test_get_deserializer",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_get_deserializer_key_error_when_not_registered": {
            "name": "test_get_deserializer_key_error_when_not_registered",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_unregister": {
            "name": "test_unregister",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_unregister_is_no_op_when_not_registered": {
            "name": "test_unregister_is_no_op_when_not_registered",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_list_entries": {
            "name": "test_list_entries",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextRegistry.test_repr": {
            "name": "test_repr",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestContextManager.ctx_manager": {
            "name": "ctx_manager",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_init": {
            "name": "test_init",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_emtpy_init": {
            "name": "test_emtpy_init",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_get": {
            "name": "test_get",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_get_as_attribute": {
            "name": "test_get_as_attribute",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_set": {
            "name": "test_set",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_set_with_ctx_instance": {
            "name": "test_set_with_ctx_instance",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_set_with_ctx_instance_with_full_name": {
            "name": "test_set_with_ctx_instance_with_full_name",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_set_with_ctx_instance_and_params": {
            "name": "test_set_with_ctx_instance_and_params",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_set_with_invalid_display_name": {
            "name": "test_set_with_invalid_display_name",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_set_make_full_ctx_name": {
            "name": "test_set_make_full_ctx_name",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx_manager": []
            }
        },
        "TestContextManager.test_delete": {
            "name": "test_delete",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_delete_keep_in_registry": {
            "name": "test_delete_keep_in_registry",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_delete_dont_keep_in_registry": {
            "name": "test_delete_dont_keep_in_registry",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_delete_as_attribute": {
            "name": "test_delete_as_attribute",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_has": {
            "name": "test_has",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_in_operator": {
            "name": "test_in_operator",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_collection_contains": {
            "name": "test_collection_contains",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_collection_len": {
            "name": "test_collection_len",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_collection_iter": {
            "name": "test_collection_iter",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_getattr": {
            "name": "test_getattr",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_getattr_to_ctx_param": {
            "name": "test_getattr_to_ctx_param",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_delattr": {
            "name": "test_delattr",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_delattr_to_ctx_param": {
            "name": "test_delattr_to_ctx_param",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_as_list": {
            "name": "test_as_list",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextManager.test_as_list_with_deleted_ctx": {
            "name": "test_as_list_with_deleted_ctx",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextRegistry.test_update_existing_entry.fac1": {
            "name": "fac1",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "TestContextRegistry.test_update_existing_entry.fac2": {
            "name": "fac2",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "TestContextRegistry.test_get_default_factory.fac": {
            "name": "fac",
            "location": 121,
            "return": [],
            "arguments": {}
        }
    },
    "flask-dialogflow-master/test/test_conversation.py": {
        "TestDialogflowConversation.test_empty_init": {
            "name": "test_empty_init",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "conv_cls": []
            }
        },
        "TestDialogflowConversation.conv": {
            "name": "conv",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "agent": []
            }
        },
        "TestDialogflowConversation.test_webhook_request": {
            "name": "test_webhook_request",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_conv_attrs": {
            "name": "test_conv_attrs",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "conv": [],
                "attr": [],
                "expected": []
            }
        },
        "TestDialogflowConversation.test_integration_convs": {
            "name": "test_integration_convs",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "integration_conv": [],
                "agent": []
            }
        },
        "TestDialogflowConversation.test_context": {
            "name": "test_context",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_ask": {
            "name": "test_ask",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_tell": {
            "name": "test_tell",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_show_quick_replies": {
            "name": "test_show_quick_replies",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_show_card": {
            "name": "test_show_card",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_show_image": {
            "name": "test_show_image",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_alternative_query_results": {
            "name": "test_alternative_query_results",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_ctx_set_builds_full_name": {
            "name": "test_ctx_set_builds_full_name",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestDialogflowConversation.test_integration_convs.handler": {
            "name": "handler",
            "location": 102,
            "return": [],
            "arguments": {
                "conv": []
            }
        }
    },
    "flask-dialogflow-master/test/test_exceptions.py": {
        "test_DialogflowAgentError": {
            "name": "test_DialogflowAgentError",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_AmbiguousHandlerError": {
            "name": "test_AmbiguousHandlerError",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_AmbiguousIntegrationError": {
            "name": "test_AmbiguousIntegrationError",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ContextNotRegisteredError": {
            "name": "test_ContextNotRegisteredError",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ContextClassNotSerializableError": {
            "name": "test_ContextClassNotSerializableError",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_AmbiguousHandlerError.handler": {
            "name": "handler",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "flask-dialogflow-master/test/test_google_apis.py": {
        "generate_module_classes": {
            "name": "generate_module_classes",
            "location": 29,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "module": []
            }
        },
        "google_api_module_class": {
            "name": "google_api_module_class",
            "location": 50,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_class_is_either_type_or_schema_or_enum": {
            "name": "test_class_is_either_type_or_schema_or_enum",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "google_api_module_class": []
            }
        },
        "google_api_type": {
            "name": "google_api_type",
            "location": 64,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_type_is_dataclass": {
            "name": "test_type_is_dataclass",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "google_api_type": []
            }
        },
        "google_api_type_schema": {
            "name": "google_api_type_schema",
            "location": 73,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_each_type_field_maps_to_a_schema_field": {
            "name": "test_each_type_field_maps_to_a_schema_field",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "google_api_type": []
            }
        },
        "test_each_schema_field_maps_to_a_type_field": {
            "name": "test_each_schema_field_maps_to_a_type_field",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "google_api_type_schema": []
            }
        },
        "_schema_field_names": {
            "name": "_schema_field_names",
            "location": 91,
            "return": [
                "tuple"
            ],
            "arguments": {
                "schema": []
            }
        },
        "_type_field_names": {
            "name": "_type_field_names",
            "location": 103,
            "return": [
                "Tuple[(str, ...)]"
            ],
            "arguments": {
                "api_type": []
            }
        },
        "test_import_dialogflow_api": {
            "name": "test_import_dialogflow_api",
            "location": 108,
            "return": [],
            "arguments": {
                "version": []
            }
        }
    },
    "flask-dialogflow-master/test/test_integrations.py": {
        "TestAbstractIntegrationConversation.test_from_webhook_request_payload": {
            "name": "test_from_webhook_request_payload",
            "location": 22,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractIntegrationConversation.to_webhook_response_payload": {
            "name": "to_webhook_response_payload",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenericIntegrationConversation.test_from_webhook_request_payload": {
            "name": "test_from_webhook_request_payload",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "expected_data": []
            }
        },
        "TestGenericIntegrationConversation.conv": {
            "name": "conv",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenericIntegrationConversation.test_getitem": {
            "name": "test_getitem",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestGenericIntegrationConversation.test_setitem": {
            "name": "test_setitem",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestGenericIntegrationConversation.test_delitem": {
            "name": "test_delitem",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestGenericIntegrationConversation.test_len": {
            "name": "test_len",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestGenericIntegrationConversation.test_iter": {
            "name": "test_iter",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestGenericIntegrationConversation.test_to_webhook_response_payload": {
            "name": "test_to_webhook_response_payload",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "TestIntegrationRegistry.test_init": {
            "name": "test_init",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegistry.registry": {
            "name": "registry",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegistry.test_register": {
            "name": "test_register",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_error_on_duplicate_registration": {
            "name": "test_error_on_duplicate_registration",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_lookup": {
            "name": "test_lookup",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_lookup_source_only": {
            "name": "test_lookup_source_only",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_lookup_non_registered": {
            "name": "test_lookup_non_registered",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_unregister": {
            "name": "test_unregister",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.test_unregister_does_nothing_when_not_registered": {
            "name": "test_unregister_does_nothing_when_not_registered",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "TestIntegrationRegistry.odir": {
            "name": "odir",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrationRegistry.test_init_integration_convs_with_custom_conv": {
            "name": "test_init_integration_convs_with_custom_conv",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [],
                "odir": []
            }
        },
        "TestIntegrationRegistry.test_init_integration_convs_without_custom_conv": {
            "name": "test_init_integration_convs_without_custom_conv",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [],
                "odir": []
            }
        },
        "TestIntegrationRegistry.test_list_entries": {
            "name": "test_list_entries",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": []
            }
        }
    },
    "flask-dialogflow-master/test/test_json.py": {
        "schema": {
            "name": "schema",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "cls": {
            "name": "cls",
            "location": 28,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "TestJSONTypeSchema.test_schema_subclass": {
            "name": "test_schema_subclass",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestJSONTypeSchema.test_has_object_class_attr": {
            "name": "test_has_object_class_attr",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestJSONTypeSchema.test_has_post_load_hook": {
            "name": "test_has_post_load_hook",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestJSONTypeSchema.test_make_obj_is_post_load_hook": {
            "name": "test_make_obj_is_post_load_hook",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "cls": []
            }
        },
        "TestJSONType.test_immediate_subclasses_must_declare_schema": {
            "name": "test_immediate_subclasses_must_declare_schema",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONType.test_indirect_subclasses_can_inherit_schema_from_direct_subclass": {
            "name": "test_indirect_subclasses_can_inherit_schema_from_direct_subclass",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "TestJSONType.test_error_when_schema_not_JSONTypeSchema": {
            "name": "test_error_when_schema_not_JSONTypeSchema",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONType.test_has_schema_attr": {
            "name": "test_has_schema_attr",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "TestJSONType.test_from_json": {
            "name": "test_from_json",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "cls": []
            }
        },
        "TestJSONType.test_from_json_without_object_cls": {
            "name": "test_from_json_without_object_cls",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "cls": []
            }
        },
        "TestJSONType.test_to_json": {
            "name": "test_to_json",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "cls": []
            }
        },
        "TestModuleLocalNested.test_with_schema_instance": {
            "name": "test_with_schema_instance",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleLocalNested.test_with_module_name": {
            "name": "test_with_module_name",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mself": [
                    "TestModuleLocalNested"
                ]
            }
        },
        "TestModuleLocalNested.test_still_works_without_module_name": {
            "name": "test_still_works_without_module_name",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-dialogflow-master/test/test_templating.py": {
        "env": {
            "name": "env",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "loader": {
            "name": "loader",
            "location": 25,
            "return": [],
            "arguments": {
                "templates_file": []
            }
        },
        "test_validate_randomizable_template": {
            "name": "test_validate_randomizable_template",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_path": {
            "name": "test_path",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_get_source_with_simple_template": {
            "name": "test_get_source_with_simple_template",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_get_source_with_list_template": {
            "name": "test_get_source_with_list_template",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_get_source_with_weighted_template": {
            "name": "test_get_source_with_weighted_template",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_get_source_filename": {
            "name": "test_get_source_filename",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_get_source_uptodate": {
            "name": "test_get_source_uptodate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_random_list_choice": {
            "name": "test_random_list_choice",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_random_weighted_choice": {
            "name": "test_random_weighted_choice",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_random_weighted_choice_with_complex_template": {
            "name": "test_random_weighted_choice_with_complex_template",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_random_list_choice_with_env_caching": {
            "name": "test_random_list_choice_with_env_caching",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_random_weighted_choice_with_env_caching": {
            "name": "test_random_weighted_choice_with_env_caching",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_reload_mapping_when_should_update": {
            "name": "test_reload_mapping_when_should_update",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": [],
                "monkeypatch": []
            }
        },
        "TestYamlLoaderWithRandomization.test_dont_reload_mapping_when_when_not_should_update": {
            "name": "test_dont_reload_mapping_when_when_not_should_update",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": [],
                "monkeypatch": []
            }
        },
        "TestYamlLoaderWithRandomization.test_TemplateNotFound_error": {
            "name": "test_TemplateNotFound_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "loader": []
            }
        },
        "TestYamlLoaderWithRandomization.test_list_templates": {
            "name": "test_list_templates",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loader": []
            }
        }
    },
    "flask-dialogflow-master/test/test_utils.py": {
        "test_fqn": {
            "name": "test_fqn",
            "location": 21,
            "return": [],
            "arguments": {
                "obj": [],
                "expected": []
            }
        }
    },
    "flask-dialogflow-master/test/__init__.py": {}
}
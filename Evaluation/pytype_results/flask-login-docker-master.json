{
    "flask-login-docker-master/manage.py": {
        "runserver": {
            "name": "runserver",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "runworker": {
            "name": "runworker",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "recreate_db": {
            "name": "recreate_db",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "flask-login-docker-master/api/config.py": {},
    "flask-login-docker-master/api/core.py": {
        "create_response": {
            "name": "create_response",
            "location": 21,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "data": [
                    "dict"
                ],
                "status": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "serialize_list": {
            "name": "serialize_list",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "items": [
                    "list"
                ]
            }
        },
        "all_exception_handler": {
            "name": "all_exception_handler",
            "location": 59,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ]
            }
        },
        "Mixin.to_dict": {
            "name": "to_dict",
            "location": 14,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-login-docker-master/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "test_config": []
            }
        }
    },
    "flask-login-docker-master/api/models/base.py": {},
    "flask-login-docker-master/api/models/Users.py": {
        "Users.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Users.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-login-docker-master/api/models/__init__.py": {},
    "flask-login-docker-master/api/views/main.py": {
        "load_user": {
            "name": "load_user",
            "location": 12,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "index": {
            "name": "index",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "signup": {
            "name": "signup",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "dashboard": {
            "name": "dashboard",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "flask-login-docker-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "flask-login-docker-master/tests/test_basic.py": {
        "test_index": {
            "name": "test_index",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_person": {
            "name": "test_get_person",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    }
}
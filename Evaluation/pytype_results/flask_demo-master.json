{
    "flask_demo-master/gunicorn.py": {},
    "flask_demo-master/settings.py": {},
    "flask_demo-master/app/exceptions.py": {},
    "flask_demo-master/app/models.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.validate_all": {
            "name": "validate_all",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_validate_errors": {
            "name": "get_validate_errors",
            "location": 39,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.save": {
            "name": "save",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get": {
            "name": "get",
            "location": 58,
            "return": [
                "M"
            ],
            "arguments": {
                "cls": [
                    "Type[M]"
                ],
                "_id": [
                    "int"
                ]
            }
        },
        "Base.get_dict": {
            "name": "get_dict",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [
                    "Type[M]"
                ],
                "_id": [
                    "int"
                ]
            }
        },
        "Base.delete": {
            "name": "delete",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "_id": [
                    "int"
                ]
            }
        },
        "Base.list": {
            "name": "list",
            "location": 81,
            "return": [
                "builtins.list[M]"
            ],
            "arguments": {
                "cls": [
                    "Type[M]"
                ],
                "page": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Base.list_dict": {
            "name": "list_dict",
            "location": 92,
            "return": [
                "builtins.list[Dict[(str, Any)]]"
            ],
            "arguments": {
                "cls": [
                    "Type[M]"
                ],
                "page": [
                    "int"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Cat.get_validate_errors": {
            "name": "get_validate_errors",
            "location": 112,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask_demo-master/app/utils.py": {
        "get_sign": {
            "name": "get_sign",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "get_json": {
            "name": "get_json",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "req": []
            }
        },
        "parse_integer": {
            "name": "parse_integer",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "num": [
                    "Union[(int, str)]"
                ]
            }
        },
        "parse_id": {
            "name": "parse_id",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "_id": [
                    "Optional[Union[(int, str)]]"
                ]
            }
        },
        "parse_paginate": {
            "name": "parse_paginate",
            "location": 47,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "req": []
            }
        },
        "JSONResponse.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "status": []
            }
        }
    },
    "flask_demo-master/app/__init__.py": {
        "health": {
            "name": "health",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "flask_demo-master/app/api/views.py": {
        "CatView.get": {
            "name": "get",
            "location": 8,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatView.put": {
            "name": "put",
            "location": 33,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatView.delete": {
            "name": "delete",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatsView.get": {
            "name": "get",
            "location": 96,
            "return": [
                "utils.JSONResponse"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatsView.post": {
            "name": "post",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flask_demo-master/app/api/__init__.py": {},
    "flask_demo-master/app/extensions/base.py": {
        "Extension.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Extension.init_app": {
            "name": "init_app",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "flask_demo-master/app/extensions/database.py": {
        "DBExtension.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_url": [
                    "str"
                ],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DBExtension.execute": {
            "name": "execute",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "sqlalchemy.sql.elements.TextClause"
                ]
            }
        },
        "DBExtension.fetch": {
            "name": "fetch",
            "location": 22,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "sqlalchemy.sql.elements.TextClause"
                ]
            }
        },
        "DBExtension.insert": {
            "name": "insert",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DBExtension.update": {
            "name": "update",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DBExtension.count": {
            "name": "count",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ]
            }
        },
        "DBExtension.transaction": {
            "name": "transaction",
            "location": 62,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable"
                ]
            }
        },
        "DBExtension.transaction.wrapper": {
            "name": "wrapper",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "flask_demo-master/app/extensions/__init__.py": {},
    "flask_demo-master/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 19,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "db": {
            "name": "db",
            "location": 24,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "flask_demo-master/tests/test_api.py": {
        "test_apiman": {
            "name": "test_apiman",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cat": {
            "name": "test_cat",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "db": []
            }
        }
    },
    "flask_demo-master/tests/test_health.py": {
        "test_health": {
            "name": "test_health",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "flask_demo-master/tests/__init__.py": {}
}
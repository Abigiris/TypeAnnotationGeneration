{
    "floods-backend-master/ccai/config.py": {
        "ConfigSingleton.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "floods-backend-master/ccai/singleton.py": {
        "Singleton.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Singleton.__new__": {
            "name": "__new__",
            "location": 17,
            "return": [
                "Callable"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "floods-backend-master/ccai/__init__.py": {},
    "floods-backend-master/ccai/bin/webserver.py": {
        "flood": {
            "name": "flood",
            "location": 44,
            "return": [],
            "arguments": {
                "model": [],
                "address": []
            }
        }
    },
    "floods-backend-master/ccai/climate/climatizer.py": {
        "waterize": {
            "name": "waterize",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "coords": [],
                "band": []
            }
        },
        "spiralize": {
            "name": "spiralize",
            "location": 30,
            "return": [
                "Tuple[(int, _T0)]"
            ],
            "arguments": {
                "coords": [
                    "_T0"
                ]
            }
        },
        "distansize": {
            "name": "distansize",
            "location": 79,
            "return": [
                "float"
            ],
            "arguments": {
                "init_lat": [],
                "init_lon": [],
                "coords": []
            }
        },
        "revolutionize": {
            "name": "revolutionize",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "coords": []
            }
        },
        "climatize": {
            "name": "climatize",
            "location": 102,
            "return": [
                "Tuple[(Any, Union[(float, str)])]"
            ],
            "arguments": {
                "coords": []
            }
        }
    },
    "floods-backend-master/ccai/climate/coastal.py": {
        "fetch_coastal": {
            "name": "fetch_coastal",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "coordinates": []
            }
        }
    },
    "floods-backend-master/ccai/climate/extractor.py": {
        "Extractor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.coordinates_from_address": {
            "name": "coordinates_from_address",
            "location": 44,
            "return": [
                "Coordinates"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "Extractor.metadata_for_address": {
            "name": "metadata_for_address",
            "location": 49,
            "return": [
                "ClimateMetadata"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        }
    },
    "floods-backend-master/ccai/climate/frequency.py": {
        "shift_frequency": {
            "name": "shift_frequency",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "coordinates": []
            }
        }
    },
    "floods-backend-master/ccai/climate/historic.py": {
        "fetch_history": {
            "name": "fetch_history",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "coordinates": []
            }
        }
    },
    "floods-backend-master/ccai/climate/process_climate.py": {
        "fetch_climate_data": {
            "name": "fetch_climate_data",
            "location": 18,
            "return": [
                "Tuple[(Union[(int, str)], Union[(float, str)], Union[(str, _T1)], Union[(int, str)], str, _T0)]"
            ],
            "arguments": {
                "address": [
                    "_T0"
                ],
                "RP": [
                    "_T1"
                ]
            }
        },
        "fetch_water_level": {
            "name": "fetch_water_level",
            "location": 53,
            "return": [
                "Tuple[(Union[(int, str)], _T1)]"
            ],
            "arguments": {
                "coordinates": [],
                "address": [
                    "_T1"
                ],
                "band": []
            }
        },
        "fetch_places": {
            "name": "fetch_places",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "coordinates": []
            }
        }
    },
    "floods-backend-master/ccai/climate/__init__.py": {},
    "floods-backend-master/ccai/climate/data/__init__.py": {},
    "floods-backend-master/ccai/image_processing/process_image.py": {
        "create_temp_dir": {
            "name": "create_temp_dir",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "images": [],
                "temp_dir": []
            }
        },
        "fetch_image": {
            "name": "fetch_image",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "address": []
            }
        },
        "encode_image": {
            "name": "encode_image",
            "location": 36,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "temp_dir": []
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_dir": [],
                "path_to_flooded_image": []
            }
        }
    },
    "floods-backend-master/ccai/image_processing/streetview.py": {
        "fetch_street_view_image": {
            "name": "fetch_street_view_image",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "geocoder_api_key": [
                    "str"
                ],
                "streetview_api_key": [
                    "str"
                ]
            }
        }
    },
    "floods-backend-master/ccai/image_processing/watermark.py": {
        "apply_watermark": {
            "name": "apply_watermark",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "input_image_path": [
                    "str"
                ],
                "output_image_path": [
                    "str"
                ]
            }
        }
    },
    "floods-backend-master/ccai/image_processing/__init__.py": {},
    "floods-backend-master/ccai/nn/process_model.py": {
        "cuda_check": {
            "name": "cuda_check",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "MODEL": []
            }
        },
        "model_validation": {
            "name": "model_validation",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "ROUTE_MODEL": [],
                "VALID_MODELS": []
            }
        },
        "model_launch": {
            "name": "model_launch",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "MODEL": [],
                "MODEL_NEW_SIZE": [],
                "MASK_MODEL": [],
                "temp_dir": [],
                "path_to_gsv_image": []
            }
        },
        "model_spade": {
            "name": "model_spade",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "MODEL": [],
                "MODEL_NEW_SIZE": [],
                "MASK_MODEL": [],
                "temp_dir": [],
                "path_to_gsv_image": []
            }
        },
        "model_deeplab": {
            "name": "model_deeplab",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": [],
                "MASK_MODEL": [],
                "MODEL_NEW_SIZE": []
            }
        }
    },
    "floods-backend-master/ccai/nn/__init__.py": {},
    "floods-backend-master/ccai/nn/model/data.py": {
        "default_loader": {
            "name": "default_loader",
            "location": 9,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "path": []
            }
        },
        "default_flist_reader": {
            "name": "default_flist_reader",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "flist": []
            }
        },
        "is_image_file": {
            "name": "is_image_file",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        },
        "make_dataset": {
            "name": "make_dataset",
            "location": 90,
            "return": [
                "list"
            ],
            "arguments": {
                "dir": []
            }
        },
        "ImageFilelist.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "flist": [],
                "transform": [],
                "flist_reader": [],
                "loader": []
            }
        },
        "ImageFilelist.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ImageFilelist.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageLabelFilelist.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "flist": [],
                "transform": [],
                "flist_reader": [],
                "loader": []
            }
        },
        "ImageLabelFilelist.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ImageLabelFilelist.__len__": {
            "name": "__len__",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFolder.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "transform": [],
                "return_paths": [],
                "loader": []
            }
        },
        "ImageFolder.__getitem__": {
            "name": "__getitem__",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ImageFolder.__len__": {
            "name": "__len__",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/networks.py": {
        "get_norm_layer": {
            "name": "get_norm_layer",
            "location": 792,
            "return": [
                "Optional[functools.partial]"
            ],
            "arguments": {
                "norm_type": []
            }
        },
        "l2normalize": {
            "name": "l2normalize",
            "location": 878,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": [],
                "eps": []
            }
        },
        "MsImageDis.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "MsImageDis._make_net": {
            "name": "_make_net",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsImageDis.forward": {
            "name": "forward",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MsImageDis.calc_dis_loss": {
            "name": "calc_dis_loss",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MsImageDis.calc_gradient_penalty": {
            "name": "calc_gradient_penalty",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "real_data": [],
                "fake_data": []
            }
        },
        "MsImageDis.calc_gen_loss": {
            "name": "calc_gen_loss",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MsImageDis.calc_dis_loss_sr": {
            "name": "calc_dis_loss_sr",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_sim": [],
                "input_real": []
            }
        },
        "MsImageDis.calc_gen_loss_sr": {
            "name": "calc_gen_loss_sr",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": []
            }
        },
        "MultiscaleDiscriminator.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_nc": [],
                "params": []
            }
        },
        "MultiscaleDiscriminator.singleD_forward": {
            "name": "singleD_forward",
            "location": 253,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "input": [
                    "_T1"
                ]
            }
        },
        "MultiscaleDiscriminator.forward": {
            "name": "forward",
            "location": 262,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "_T0"
                ]
            }
        },
        "MultiscaleDiscriminator.calc_dis_loss": {
            "name": "calc_dis_loss",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MultiscaleDiscriminator.calc_gen_loss": {
            "name": "calc_gen_loss",
            "location": 304,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "NLayerDiscriminator.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_nc": [],
                "params": []
            }
        },
        "NLayerDiscriminator.forward": {
            "name": "forward",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "VAEGen.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "VAEGen.forward": {
            "name": "forward",
            "location": 440,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "VAEGen.encode": {
            "name": "encode",
            "location": 450,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "VAEGen.decode": {
            "name": "decode",
            "location": 455,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hiddens": []
            }
        },
        "StyleEncoder.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_downsample": [],
                "input_dim": [],
                "dim": [],
                "style_dim": [],
                "norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "StyleEncoder.forward": {
            "name": "forward",
            "location": 486,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ContentEncoder.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_downsample": [],
                "n_res": [],
                "input_dim": [],
                "dim": [],
                "norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "ContentEncoder.forward": {
            "name": "forward",
            "location": 509,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_upsample": [],
                "n_res": [],
                "dim": [],
                "output_dim": [],
                "res_norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 535,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResBlocks.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_blocks": [],
                "dim": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "ResBlocks.forward": {
            "name": "forward",
            "location": 550,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "dim": [],
                "n_blk": [],
                "norm": [],
                "activ": []
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 567,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResBlock.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "ResBlock.forward": {
            "name": "forward",
            "location": 585,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Conv2dBlock.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "kernel_size": [],
                "stride": [],
                "padding": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "Conv2dBlock.forward": {
            "name": "forward",
            "location": 656,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearBlock.__init__": {
            "name": "__init__",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "norm": [],
                "activation": []
            }
        },
        "LinearBlock.forward": {
            "name": "forward",
            "location": 704,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Vgg19.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requires_grad": []
            }
        },
        "Vgg19.forward": {
            "name": "forward",
            "location": 742,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "VGGLoss.__init__": {
            "name": "__init__",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGLoss.forward": {
            "name": "forward",
            "location": 760,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TVLoss.__init__": {
            "name": "__init__",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TVLoss_weight": []
            }
        },
        "TVLoss.forward": {
            "name": "forward",
            "location": 773,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TVLoss._tensor_size": {
            "name": "_tensor_size",
            "location": 783,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "AdaptiveInstanceNorm2d.__init__": {
            "name": "__init__",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [],
                "eps": [],
                "momentum": []
            }
        },
        "AdaptiveInstanceNorm2d.forward": {
            "name": "forward",
            "location": 820,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AdaptiveInstanceNorm2d.__repr__": {
            "name": "__repr__",
            "location": 844,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [],
                "eps": [],
                "affine": []
            }
        },
        "LayerNorm.forward": {
            "name": "forward",
            "location": 859,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SpectralNorm.__init__": {
            "name": "__init__",
            "location": 888,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "name": [],
                "power_iterations": []
            }
        },
        "SpectralNorm._update_u_v": {
            "name": "_update_u_v",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm._made_params": {
            "name": "_made_params",
            "location": 910,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm._make_params": {
            "name": "_make_params",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm.forward": {
            "name": "forward",
            "location": 937,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SPADE.__init__": {
            "name": "__init__",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_free_norm_type": [],
                "kernel_size": [],
                "norm_nc": [],
                "cond_nc": []
            }
        },
        "SPADE.forward": {
            "name": "forward",
            "location": 967,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "segmap": []
            }
        },
        "SPADEResnetBlock.__init__": {
            "name": "__init__",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fin": [],
                "fout": [],
                "cond_nc": [],
                "spade_use_spectral_norm": [],
                "spade_param_free_norm": [],
                "spade_kernel_size": []
            }
        },
        "SPADEResnetBlock.forward": {
            "name": "forward",
            "location": 1022,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "seg": []
            }
        },
        "SPADEResnetBlock.shortcut": {
            "name": "shortcut",
            "location": 1031,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "seg": []
            }
        },
        "SPADEResnetBlock.activation": {
            "name": "activation",
            "location": 1038,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SPADEResnetBlock.__str__": {
            "name": "__str__",
            "location": 1041,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpadeDecoder.__init__": {
            "name": "__init__",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_dim": [],
                "cond_nc": [],
                "spade_n_up": [],
                "spade_use_spectral_norm": [],
                "spade_param_free_norm": [],
                "spade_kernel_size": [],
                "fullspade": []
            }
        },
        "SpadeDecoder._apply": {
            "name": "_apply",
            "location": 1135,
            "return": [
                "_TSpadeDecoder"
            ],
            "arguments": {
                "self": [
                    "_TSpadeDecoder"
                ],
                "fn": []
            }
        },
        "SpadeDecoder.forward": {
            "name": "forward",
            "location": 1146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": []
            }
        },
        "SpadeDecoder.__str__": {
            "name": "__str__",
            "location": 1162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpadeGen.__init__": {
            "name": "__init__",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "SpadeGen.forward": {
            "name": "forward",
            "location": 1204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "masks": [],
                "encoder_name": []
            }
        },
        "SpadeGen.encode": {
            "name": "encode",
            "location": 1210,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "encoder_name": []
            }
        },
        "SpadeGen.decode": {
            "name": "decode",
            "location": 1221,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "mask": [],
                "encoder_name": []
            }
        },
        "SpadeTestGen.__init__": {
            "name": "__init__",
            "location": 1234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeTestGen.forward": {
            "name": "forward",
            "location": 1257,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": []
            }
        },
        "SpadeAdaINGen.__init__": {
            "name": "__init__",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeAdaINGen.forward": {
            "name": "forward",
            "location": 1302,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": [],
                "style_im": []
            }
        },
        "SpadeAdaINGen.assign_adain_params": {
            "name": "assign_adain_params",
            "location": 1309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adain_params": [],
                "model": []
            }
        },
        "SpadeAdaINGen.get_num_adain_params": {
            "name": "get_num_adain_params",
            "location": 1320,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "SpadeAdaINGen.get_adain_param": {
            "name": "get_adain_param",
            "location": 1328,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "style": []
            }
        },
        "SpadeGenBasic.__init__": {
            "name": "__init__",
            "location": 1338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeGenBasic.forward": {
            "name": "forward",
            "location": 1361,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "cond": []
            }
        },
        "FullSpadeGen.__init__": {
            "name": "__init__",
            "location": 1368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "FullSpadeGen.forward": {
            "name": "forward",
            "location": 1391,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/newtorks.py": {
        "get_norm_layer": {
            "name": "get_norm_layer",
            "location": 773,
            "return": [
                "Optional[functools.partial]"
            ],
            "arguments": {
                "norm_type": []
            }
        },
        "l2normalize": {
            "name": "l2normalize",
            "location": 859,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": [],
                "eps": []
            }
        },
        "MsImageDis.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "MsImageDis._make_net": {
            "name": "_make_net",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsImageDis.forward": {
            "name": "forward",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MsImageDis.calc_dis_loss": {
            "name": "calc_dis_loss",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MsImageDis.calc_gradient_penalty": {
            "name": "calc_gradient_penalty",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "real_data": [],
                "fake_data": []
            }
        },
        "MsImageDis.calc_gen_loss": {
            "name": "calc_gen_loss",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MsImageDis.calc_dis_loss_sr": {
            "name": "calc_dis_loss_sr",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_sim": [],
                "input_real": []
            }
        },
        "MsImageDis.calc_gen_loss_sr": {
            "name": "calc_gen_loss_sr",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": []
            }
        },
        "MultiscaleDiscriminator.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_nc": [],
                "params": []
            }
        },
        "MultiscaleDiscriminator.singleD_forward": {
            "name": "singleD_forward",
            "location": 253,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "input": [
                    "_T1"
                ]
            }
        },
        "MultiscaleDiscriminator.forward": {
            "name": "forward",
            "location": 262,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "_T0"
                ]
            }
        },
        "MultiscaleDiscriminator.calc_dis_loss": {
            "name": "calc_dis_loss",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "MultiscaleDiscriminator.calc_gen_loss": {
            "name": "calc_gen_loss",
            "location": 304,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_fake": [],
                "input_real": [],
                "comet_exp": [],
                "mode": []
            }
        },
        "NLayerDiscriminator.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_nc": [],
                "params": []
            }
        },
        "NLayerDiscriminator.forward": {
            "name": "forward",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "VAEGen.__init__": {
            "name": "__init__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "VAEGen.forward": {
            "name": "forward",
            "location": 440,
            "return": [
                "Tuple[(Any, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "VAEGen.encode": {
            "name": "encode",
            "location": 450,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "VAEGen.decode": {
            "name": "decode",
            "location": 455,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hiddens": []
            }
        },
        "StyleEncoder.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_downsample": [],
                "input_dim": [],
                "dim": [],
                "style_dim": [],
                "norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "StyleEncoder.forward": {
            "name": "forward",
            "location": 486,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ContentEncoder.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_downsample": [],
                "n_res": [],
                "input_dim": [],
                "dim": [],
                "norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "ContentEncoder.forward": {
            "name": "forward",
            "location": 509,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_upsample": [],
                "n_res": [],
                "dim": [],
                "output_dim": [],
                "res_norm": [],
                "activ": [],
                "pad_type": []
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 535,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResBlocks.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_blocks": [],
                "dim": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "ResBlocks.forward": {
            "name": "forward",
            "location": 550,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "dim": [],
                "n_blk": [],
                "norm": [],
                "activ": []
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 567,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResBlock.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "ResBlock.forward": {
            "name": "forward",
            "location": 585,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Conv2dBlock.__init__": {
            "name": "__init__",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "kernel_size": [],
                "stride": [],
                "padding": [],
                "norm": [],
                "activation": [],
                "pad_type": []
            }
        },
        "Conv2dBlock.forward": {
            "name": "forward",
            "location": 656,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LinearBlock.__init__": {
            "name": "__init__",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "output_dim": [],
                "norm": [],
                "activation": []
            }
        },
        "LinearBlock.forward": {
            "name": "forward",
            "location": 704,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Vgg19.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requires_grad": []
            }
        },
        "Vgg19.forward": {
            "name": "forward",
            "location": 742,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "VGGLoss.__init__": {
            "name": "__init__",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGLoss.forward": {
            "name": "forward",
            "location": 760,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "AdaptiveInstanceNorm2d.__init__": {
            "name": "__init__",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [],
                "eps": [],
                "momentum": []
            }
        },
        "AdaptiveInstanceNorm2d.forward": {
            "name": "forward",
            "location": 801,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AdaptiveInstanceNorm2d.__repr__": {
            "name": "__repr__",
            "location": 825,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_features": [],
                "eps": [],
                "affine": []
            }
        },
        "LayerNorm.forward": {
            "name": "forward",
            "location": 840,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SpectralNorm.__init__": {
            "name": "__init__",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "name": [],
                "power_iterations": []
            }
        },
        "SpectralNorm._update_u_v": {
            "name": "_update_u_v",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm._made_params": {
            "name": "_made_params",
            "location": 891,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm._make_params": {
            "name": "_make_params",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpectralNorm.forward": {
            "name": "forward",
            "location": 918,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SPADE.__init__": {
            "name": "__init__",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_free_norm_type": [],
                "kernel_size": [],
                "norm_nc": [],
                "cond_nc": []
            }
        },
        "SPADE.forward": {
            "name": "forward",
            "location": 948,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "segmap": []
            }
        },
        "SPADEResnetBlock.__init__": {
            "name": "__init__",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fin": [],
                "fout": [],
                "cond_nc": [],
                "spade_use_spectral_norm": [],
                "spade_param_free_norm": [],
                "spade_kernel_size": []
            }
        },
        "SPADEResnetBlock.forward": {
            "name": "forward",
            "location": 1003,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "seg": []
            }
        },
        "SPADEResnetBlock.shortcut": {
            "name": "shortcut",
            "location": 1012,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "seg": []
            }
        },
        "SPADEResnetBlock.activation": {
            "name": "activation",
            "location": 1019,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SPADEResnetBlock.__str__": {
            "name": "__str__",
            "location": 1022,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpadeDecoder.__init__": {
            "name": "__init__",
            "location": 1027,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_dim": [],
                "cond_nc": [],
                "spade_n_up": [],
                "spade_use_spectral_norm": [],
                "spade_param_free_norm": [],
                "spade_kernel_size": []
            }
        },
        "SpadeDecoder._apply": {
            "name": "_apply",
            "location": 1106,
            "return": [
                "_TSpadeDecoder"
            ],
            "arguments": {
                "self": [
                    "_TSpadeDecoder"
                ],
                "fn": []
            }
        },
        "SpadeDecoder.forward": {
            "name": "forward",
            "location": 1117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": []
            }
        },
        "SpadeDecoder.__str__": {
            "name": "__str__",
            "location": 1133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpadeGen.__init__": {
            "name": "__init__",
            "location": 1138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "params": []
            }
        },
        "SpadeGen.forward": {
            "name": "forward",
            "location": 1175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "masks": [],
                "encoder_name": []
            }
        },
        "SpadeGen.encode": {
            "name": "encode",
            "location": 1181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "images": [],
                "encoder_name": []
            }
        },
        "SpadeGen.decode": {
            "name": "decode",
            "location": 1192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "mask": [],
                "encoder_name": []
            }
        },
        "SpadeTestGen.__init__": {
            "name": "__init__",
            "location": 1205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeTestGen.forward": {
            "name": "forward",
            "location": 1228,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": []
            }
        },
        "SpadeAdaINGen.__init__": {
            "name": "__init__",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeAdaINGen.forward": {
            "name": "forward",
            "location": 1272,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "z": [],
                "cond": [],
                "style_im": []
            }
        },
        "SpadeAdaINGen.assign_adain_params": {
            "name": "assign_adain_params",
            "location": 1279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adain_params": [],
                "model": []
            }
        },
        "SpadeAdaINGen.get_num_adain_params": {
            "name": "get_num_adain_params",
            "location": 1290,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "SpadeAdaINGen.get_adain_param": {
            "name": "get_adain_param",
            "location": 1298,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "style": []
            }
        },
        "SpadeAdaINGenII.__init__": {
            "name": "__init__",
            "location": 1308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "size": [],
                "batch_size": [],
                "params": []
            }
        },
        "SpadeAdaINGenII.forward": {
            "name": "forward",
            "location": 1344,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "cond": [],
                "style_im": []
            }
        },
        "SpadeAdaINGenII.assign_adain_params": {
            "name": "assign_adain_params",
            "location": 1353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adain_params": [],
                "model": []
            }
        },
        "SpadeAdaINGenII.get_num_adain_params": {
            "name": "get_num_adain_params",
            "location": 1364,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "SpadeAdaINGenII.get_adain_param": {
            "name": "get_adain_param",
            "location": 1372,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "style": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/resnet.py": {
        "conv3x3": {
            "name": "conv3x3",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_planes": [],
                "out_planes": [],
                "stride": [],
                "dilation": []
            }
        },
        "resnet18": {
            "name": "resnet18",
            "location": 264,
            "return": [
                "ResNet"
            ],
            "arguments": {
                "pretrained": []
            }
        },
        "resnet34": {
            "name": "resnet34",
            "location": 284,
            "return": [
                "ResNet"
            ],
            "arguments": {
                "pretrained": []
            }
        },
        "resnet50": {
            "name": "resnet50",
            "location": 304,
            "return": [
                "ResNet"
            ],
            "arguments": {
                "pretrained": []
            }
        },
        "resnet101": {
            "name": "resnet101",
            "location": 324,
            "return": [
                "ResNet"
            ],
            "arguments": {
                "pretrained": []
            }
        },
        "resnet152": {
            "name": "resnet152",
            "location": 344,
            "return": [
                "ResNet"
            ],
            "arguments": {
                "pretrained": []
            }
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inplanes": [],
                "planes": [],
                "stride": [],
                "downsample": [],
                "dilation": []
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inplanes": [],
                "planes": [],
                "stride": [],
                "downsample": [],
                "dilation": []
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": [],
                "layers": [],
                "num_classes": [],
                "fully_conv": [],
                "remove_avg_pool_layer": [],
                "output_stride": [],
                "additional_blocks": [],
                "multi_grid": []
            }
        },
        "ResNet._make_layer": {
            "name": "_make_layer",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block": [],
                "planes": [],
                "blocks": [],
                "stride": [],
                "multi_grid": []
            }
        },
        "ResNet.forward": {
            "name": "forward",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/segmentation.py": {
        "Resnet34_8s.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": []
            }
        },
        "Resnet34_8s._normal_initialization": {
            "name": "_normal_initialization",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "Resnet34_8s.forward": {
            "name": "forward",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "feature_alignment": []
            }
        },
        "MyDataset.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "transform": []
            }
        },
        "MyDataset.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MyDataset.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDataset.getPaths": {
            "name": "getPaths",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/trainer.py": {
        "MUNIT_Trainer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyperparameters": []
            }
        },
        "MUNIT_Trainer.recon_criterion": {
            "name": "recon_criterion",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "target": []
            }
        },
        "MUNIT_Trainer.recon_criterion_mask": {
            "name": "recon_criterion_mask",
            "location": 225,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "target": [],
                "mask": []
            }
        },
        "MUNIT_Trainer.forward": {
            "name": "forward",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "m_a": [],
                "m_b": []
            }
        },
        "MUNIT_Trainer.gen_update": {
            "name": "gen_update",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "hyperparameters": [],
                "mask_a": [],
                "mask_b": [],
                "comet_exp": [],
                "synth": [],
                "semantic_gt_a": [],
                "semantic_gt_b": []
            }
        },
        "MUNIT_Trainer.compute_vgg_loss": {
            "name": "compute_vgg_loss",
            "location": 426,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": [],
                "target": [],
                "mask": [],
                "preprocess": []
            }
        },
        "MUNIT_Trainer.compute_classifier_sr_loss": {
            "name": "compute_classifier_sr_loss",
            "location": 454,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "c_a": [],
                "c_b": [],
                "domain_synth": [],
                "fool": []
            }
        },
        "MUNIT_Trainer.compute_domain_adv_loss": {
            "name": "compute_domain_adv_loss",
            "location": 485,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "c_a": [],
                "c_b": [],
                "compute_accuracy": [],
                "minimize": []
            }
        },
        "MUNIT_Trainer.compute_semantic_seg_loss": {
            "name": "compute_semantic_seg_loss",
            "location": 522,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img1": [],
                "img2": [],
                "mask": [],
                "ground_truth": []
            }
        },
        "MUNIT_Trainer.merge_seg_with_mask": {
            "name": "merge_seg_with_mask",
            "location": 585,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": [],
                "mask": []
            }
        },
        "MUNIT_Trainer.average_mask": {
            "name": "average_mask",
            "location": 619,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": [],
                "mask": []
            }
        },
        "MUNIT_Trainer.sample": {
            "name": "sample",
            "location": 636,
            "return": [
                "Tuple[(_T0, Any, Any, Any, _T1, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "x_a": [
                    "_T0"
                ],
                "x_b": [
                    "_T1"
                ],
                "m_a": [],
                "m_b": []
            }
        },
        "MUNIT_Trainer.sample_syn": {
            "name": "sample_syn",
            "location": 681,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "x_a": [
                    "_T0"
                ],
                "x_b": [
                    "_T1"
                ],
                "m_a": [],
                "m_b": []
            }
        },
        "MUNIT_Trainer.dis_update": {
            "name": "dis_update",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "m_a": [],
                "m_b": [],
                "hyperparameters": [],
                "comet_exp": []
            }
        },
        "MUNIT_Trainer.domain_classifier_update": {
            "name": "domain_classifier_update",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "hyperparameters": [],
                "comet_exp": []
            }
        },
        "MUNIT_Trainer.domain_classifier_sr_update": {
            "name": "domain_classifier_sr_update",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "m_a": [],
                "m_b": [],
                "domain_synth": [],
                "lambda_classifier": [],
                "step": [],
                "comet_exp": []
            }
        },
        "MUNIT_Trainer.output_domain_classifier_sr_update": {
            "name": "output_domain_classifier_sr_update",
            "location": 875,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_ar": [],
                "x_as": [],
                "x_br": [],
                "x_bs": [],
                "hyperparameters": [],
                "step": [],
                "comet_exp": []
            }
        },
        "MUNIT_Trainer.segmentation_head_update": {
            "name": "segmentation_head_update",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_a": [],
                "x_b": [],
                "target_a": [],
                "target_b": [],
                "lamb": [],
                "comet_exp": []
            }
        },
        "MUNIT_Trainer.update_learning_rate": {
            "name": "update_learning_rate",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MUNIT_Trainer.resume": {
            "name": "resume",
            "location": 930,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "checkpoint_dir": [],
                "hyperparameters": []
            }
        },
        "MUNIT_Trainer.save": {
            "name": "save",
            "location": 973,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_dir": [],
                "iterations": []
            }
        }
    },
    "floods-backend-master/ccai/nn/model/utils.py": {
        "get_all_data_loaders": {
            "name": "get_all_data_loaders",
            "location": 51,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "conf": []
            }
        },
        "seg_batch_transform": {
            "name": "seg_batch_transform",
            "location": 160,
            "return": [
                "_T0"
            ],
            "arguments": {
                "img_batch": [
                    "_T0"
                ]
            }
        },
        "seg_transform": {
            "name": "seg_transform",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "transform_torchVar": {
            "name": "transform_torchVar",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_data_loader_list": {
            "name": "get_data_loader_list",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "root": [],
                "file_list": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "height": [],
                "width": [],
                "num_workers": [],
                "crop": []
            }
        },
        "default_txt_reader": {
            "name": "default_txt_reader",
            "location": 247,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "flist": []
            }
        },
        "get_fid_data_loader": {
            "name": "get_fid_data_loader",
            "location": 554,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_list_a": [],
                "file_list_b": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "num_workers": []
            }
        },
        "get_synthetic_data_loader": {
            "name": "get_synthetic_data_loader",
            "location": 705,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_list_a": [],
                "file_list_b": [],
                "mask_list": [],
                "sem_list_a": [],
                "sem_list_b": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "height": [],
                "width": [],
                "num_workers": [],
                "crop": []
            }
        },
        "get_data_loader_mask_and_im": {
            "name": "get_data_loader_mask_and_im",
            "location": 753,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_list": [],
                "mask_list": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "height": [],
                "width": [],
                "num_workers": [],
                "crop": []
            }
        },
        "get_data_loader_mask_and_im_and_rect": {
            "name": "get_data_loader_mask_and_im_and_rect",
            "location": 795,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_list": [],
                "mask_list": [],
                "rect_list": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "height": [],
                "width": [],
                "num_workers": [],
                "crop": []
            }
        },
        "get_data_loader_folder": {
            "name": "get_data_loader_folder",
            "location": 838,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_folder": [],
                "batch_size": [],
                "train": [],
                "new_size": [],
                "height": [],
                "width": [],
                "num_workers": [],
                "crop": []
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 887,
            "return": [
                "Any"
            ],
            "arguments": {
                "config": []
            }
        },
        "eformat": {
            "name": "eformat",
            "location": 900,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [],
                "prec": []
            }
        },
        "__write_images": {
            "name": "__write_images",
            "location": 907,
            "return": [
                "None"
            ],
            "arguments": {
                "image_outputs": [],
                "display_image_num": [],
                "file_name": []
            }
        },
        "write_2images": {
            "name": "write_2images",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "image_outputs": [],
                "display_image_num": [],
                "image_directory": [],
                "postfix": [],
                "comet_exp": []
            }
        },
        "prepare_sub_folder": {
            "name": "prepare_sub_folder",
            "location": 952,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "output_directory": []
            }
        },
        "write_loss": {
            "name": "write_loss",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "iterations": [],
                "trainer": [],
                "train_writer": []
            }
        },
        "slerp": {
            "name": "slerp",
            "location": 984,
            "return": [
                "Any"
            ],
            "arguments": {
                "val": [],
                "low": [],
                "high": []
            }
        },
        "get_slerp_interp": {
            "name": "get_slerp_interp",
            "location": 1002,
            "return": [
                "Any"
            ],
            "arguments": {
                "nb_latents": [],
                "nb_interp": [],
                "z_dim": []
            }
        },
        "get_model_list": {
            "name": "get_model_list",
            "location": 1020,
            "return": [
                "Any"
            ],
            "arguments": {
                "dirname": [],
                "key": []
            }
        },
        "load_vgg16": {
            "name": "load_vgg16",
            "location": 1044,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "model_dir": []
            }
        },
        "load_flood_classifier": {
            "name": "load_flood_classifier",
            "location": 1050,
            "return": [
                "Any"
            ],
            "arguments": {
                "ckpt_path": []
            }
        },
        "load_segmentation_model": {
            "name": "load_segmentation_model",
            "location": 1104,
            "return": [
                "Any"
            ],
            "arguments": {
                "ckpt_path": [],
                "classes": []
            }
        },
        "decode_segmap": {
            "name": "decode_segmap",
            "location": 1119,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "nc": []
            }
        },
        "load_inception": {
            "name": "load_inception",
            "location": 1162,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_path": []
            }
        },
        "vgg_preprocess": {
            "name": "vgg_preprocess",
            "location": 1182,
            "return": [
                "Any"
            ],
            "arguments": {
                "batch": []
            }
        },
        "get_scheduler": {
            "name": "get_scheduler",
            "location": 1197,
            "return": [
                "Any"
            ],
            "arguments": {
                "optimizer": [],
                "hyperparameters": [],
                "iterations": []
            }
        },
        "weights_init": {
            "name": "weights_init",
            "location": 1224,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "init_type": []
            }
        },
        "pytorch03_to_pytorch04": {
            "name": "pytorch03_to_pytorch04",
            "location": 1259,
            "return": [
                "typing.Dict[(str, Any)]"
            ],
            "arguments": {
                "state_dict_base": [],
                "trainer_name": []
            }
        },
        "conv_block": {
            "name": "conv_block",
            "location": 1349,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_channels": [],
                "out_channels": []
            }
        },
        "conv3x3": {
            "name": "conv3x3",
            "location": 1367,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_planes": [],
                "out_planes": [],
                "stride": [],
                "groups": [],
                "dilation": []
            }
        },
        "conv1x1": {
            "name": "conv1x1",
            "location": 1394,
            "return": [
                "Any"
            ],
            "arguments": {
                "in_planes": [],
                "out_planes": [],
                "stride": []
            }
        },
        "merge_classes": {
            "name": "merge_classes",
            "location": 1457,
            "return": [
                "Any"
            ],
            "arguments": {
                "output": []
            }
        },
        "mapping": {
            "name": "mapping",
            "location": 1483,
            "return": [
                "_T0"
            ],
            "arguments": {
                "im": [
                    "_T0"
                ]
            }
        },
        "flatten_opts": {
            "name": "flatten_opts",
            "location": 1522,
            "return": [
                "typing.Dict[(str, Any)]"
            ],
            "arguments": {
                "opts": []
            }
        },
        "sorted_nicely": {
            "name": "sorted_nicely",
            "location": 1565,
            "return": [
                "list"
            ],
            "arguments": {
                "l": []
            }
        },
        "load_opts": {
            "name": "load_opts",
            "location": 1572,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "default": []
            }
        },
        "tv_loss": {
            "name": "tv_loss",
            "location": 1599,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "tv_weight": []
            }
        },
        "normalize_batch": {
            "name": "normalize_batch",
            "location": 1615,
            "return": [
                "Any"
            ],
            "arguments": {
                "batch": []
            }
        },
        "gram_matrix": {
            "name": "gram_matrix",
            "location": 1623,
            "return": [
                "Any"
            ],
            "arguments": {
                "y": []
            }
        },
        "MyDatasetRect.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_list": [],
                "mask_list": [],
                "rect_list": [],
                "new_size": [],
                "height": [],
                "width": []
            }
        },
        "MyDatasetRect.transform": {
            "name": "transform",
            "location": 297,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "image": [],
                "mask": [],
                "rect": []
            }
        },
        "MyDatasetRect.__getitem__": {
            "name": "__getitem__",
            "location": 355,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MyDatasetRect.__len__": {
            "name": "__len__",
            "location": 382,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDataset.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_list": [],
                "mask_list": [],
                "new_size": [],
                "height": [],
                "width": []
            }
        },
        "MyDataset.transform": {
            "name": "transform",
            "location": 408,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "image": [],
                "mask": []
            }
        },
        "MyDataset.__getitem__": {
            "name": "__getitem__",
            "location": 462,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MyDataset.__len__": {
            "name": "__len__",
            "location": 484,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetInferenceFID.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_list_a": [],
                "file_list_b": [],
                "new_size": []
            }
        },
        "DatasetInferenceFID.transform": {
            "name": "transform",
            "location": 503,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "image_a": [],
                "image_b": []
            }
        },
        "DatasetInferenceFID.__getitem__": {
            "name": "__getitem__",
            "location": 531,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DatasetInferenceFID.__len__": {
            "name": "__len__",
            "location": 545,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDatasetSynthetic.__init__": {
            "name": "__init__",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_list_a": [],
                "file_list_b": [],
                "mask_list": [],
                "semantic_a_list": [],
                "semantic_b_list": [],
                "new_size": [],
                "height": [],
                "width": []
            }
        },
        "MyDatasetSynthetic.transform": {
            "name": "transform",
            "location": 608,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "image_a": [],
                "image_b": [],
                "mask": [],
                "semantic_a": [],
                "semantic_b": []
            }
        },
        "MyDatasetSynthetic.__getitem__": {
            "name": "__getitem__",
            "location": 680,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MyDatasetSynthetic.__len__": {
            "name": "__len__",
            "location": 697,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resnet34_8s.__init__": {
            "name": "__init__",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": []
            }
        },
        "Resnet34_8s._normal_initialization": {
            "name": "_normal_initialization",
            "location": 1083,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "Resnet34_8s.forward": {
            "name": "forward",
            "location": 1087,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "feature_alignment": []
            }
        },
        "weights_init.init_fun": {
            "name": "init_fun",
            "location": 1225,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 1248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 1252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        },
        "pytorch03_to_pytorch04.__conversion_core": {
            "name": "__conversion_core",
            "location": 1260,
            "return": [],
            "arguments": {
                "state_dict_base": [],
                "trainer_name": []
            }
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 1409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inplanes": [],
                "planes": [],
                "stride": [],
                "downsample": [],
                "groups": [],
                "base_width": [],
                "dilation": [],
                "norm_layer": []
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 1438,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "domainClassifier.__init__": {
            "name": "__init__",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [],
                "dim": []
            }
        },
        "domainClassifier.forward": {
            "name": "forward",
            "location": 1509,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "flatten_opts.p": {
            "name": "p",
            "location": 1548,
            "return": [],
            "arguments": {
                "d": [],
                "prefix": [],
                "vals": []
            }
        },
        "pytorch03_to_pytorch04.__conversion_core.__conversion_core": {
            "name": "__conversion_core",
            "location": 1293,
            "return": [],
            "arguments": {
                "state_dict_base": []
            }
        }
    },
    "floods-backend-master/tests/test_climate.py": {
        "TestClimate.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClimate.test_lat_long": {
            "name": "test_lat_long",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClimate.test_metadata": {
            "name": "test_metadata",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "floods-backend-master/tests/test_config.py": {
        "TestConfig.test_config": {
            "name": "test_config",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "floods-backend-master/tests/__init__.py": {}
}
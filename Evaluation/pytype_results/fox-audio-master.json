{
    "fox-audio-master/audioset/mel_features.py": {
        "frame": {
            "name": "frame",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "window_length": [],
                "hop_length": []
            }
        },
        "periodic_hann": {
            "name": "periodic_hann",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "window_length": []
            }
        },
        "stft_magnitude": {
            "name": "stft_magnitude",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "signal": [],
                "fft_length": [],
                "hop_length": [],
                "window_length": []
            }
        },
        "hertz_to_mel": {
            "name": "hertz_to_mel",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "frequencies_hertz": []
            }
        },
        "spectrogram_to_mel_matrix": {
            "name": "spectrogram_to_mel_matrix",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_mel_bins": [],
                "num_spectrogram_bins": [],
                "audio_sample_rate": [],
                "lower_edge_hertz": [],
                "upper_edge_hertz": []
            }
        },
        "log_mel_spectrogram": {
            "name": "log_mel_spectrogram",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "audio_sample_rate": [],
                "log_offset": [],
                "window_length_secs": [],
                "hop_length_secs": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_inference.py": {
        "get_last_row": {
            "name": "get_last_row",
            "location": 101,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "csv_filename": []
            }
        },
        "embedding": {
            "name": "embedding",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "wav": [],
                "tf_record_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_inference_demo.py": {
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_inference_score.py": {
        "embedding": {
            "name": "embedding",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "wav": [],
                "tf_record_filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_input.py": {
        "waveform_to_examples": {
            "name": "waveform_to_examples",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "sample_rate": []
            }
        },
        "wavfile_to_examples": {
            "name": "wavfile_to_examples",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "wav_file": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_params.py": {},
    "fox-audio-master/audioset/vggish_postprocess.py": {
        "Postprocessor.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pca_params_npz_path": []
            }
        },
        "Postprocessor.postprocess": {
            "name": "postprocess",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "embeddings_batch": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_slim.py": {
        "define_vggish_slim": {
            "name": "define_vggish_slim",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "training": []
            }
        },
        "load_vggish_slim_checkpoint": {
            "name": "load_vggish_slim_checkpoint",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "checkpoint_path": []
            }
        }
    },
    "fox-audio-master/audioset/vggish_smoke_test.py": {},
    "fox-audio-master/audioset/vggish_train_demo.py": {
        "_get_examples_batch": {
            "name": "_get_examples_batch",
            "location": 84,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "fox-audio-master/audioset/__init__.py": {},
    "fox-audio-master/microsoft/tfrecord.py": {
        "read": {
            "name": "read",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "record_path": [
                    "str"
                ],
                "is_sequence_example": [
                    "bool"
                ]
            }
        },
        "print_example": {
            "name": "print_example",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "record_path": [
                    "str"
                ],
                "is_sequence_example": [
                    "bool"
                ]
            }
        }
    },
    "fox-audio-master/microsoft/white_noise_padding.py": {
        "wav_length": {
            "name": "wav_length",
            "location": 15,
            "return": [
                "float"
            ],
            "arguments": {
                "filename": []
            }
        },
        "combinations": {
            "name": "combinations",
            "location": 23,
            "return": [
                "Optional[List[List[nothing]]]"
            ],
            "arguments": {
                "lst": [],
                "target": [],
                "with_replacement": []
            }
        },
        "padding": {
            "name": "padding",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "wav": [],
                "white_noise_duration": []
            }
        },
        "padding_output": {
            "name": "padding_output",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        },
        "combinations._a": {
            "name": "_a",
            "location": 24,
            "return": [],
            "arguments": {
                "idx": [],
                "l": [],
                "r": [],
                "t": [],
                "w": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 334,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "fox-audio-master/microsoft/__init__.py": {},
    "fox-audio-master/microsoft/validation/inference_json.py": {
        "format_lines": {
            "name": "format_lines",
            "location": 84,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "video_ids": [],
                "predictions": [],
                "top_k": []
            }
        },
        "get_input_data_tensors": {
            "name": "get_input_data_tensors",
            "location": 102,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "reader": [],
                "data_pattern": [],
                "batch_size": [],
                "num_readers": []
            }
        },
        "inference": {
            "name": "inference",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": [],
                "train_dir": [],
                "data_pattern": [],
                "out_file_location": [],
                "batch_size": [],
                "top_k": []
            }
        },
        "main": {
            "name": "main",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": []
            }
        },
        "inference.set_up_init_ops": {
            "name": "set_up_init_ops",
            "location": 173,
            "return": [],
            "arguments": {
                "variables": []
            }
        }
    },
    "fox-audio-master/microsoft/validation/k_inference_json.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "get_2d_conv_model": {
            "name": "get_2d_conv_model",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "fox-audio-master/microsoft/validation/yt8m_inference_json_formatter.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 84,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "fox-audio-master/youtube8m/average_precision_calculator.py": {
        "AveragePrecisionCalculator.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_n": []
            }
        },
        "AveragePrecisionCalculator.heap_size": {
            "name": "heap_size",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AveragePrecisionCalculator.num_accumulated_positives": {
            "name": "num_accumulated_positives",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AveragePrecisionCalculator.accumulate": {
            "name": "accumulate",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "actuals": [],
                "num_positives": []
            }
        },
        "AveragePrecisionCalculator.clear": {
            "name": "clear",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AveragePrecisionCalculator.peek_ap_at_n": {
            "name": "peek_ap_at_n",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AveragePrecisionCalculator.ap": {
            "name": "ap",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "actuals": []
            }
        },
        "AveragePrecisionCalculator.ap_at_n": {
            "name": "ap_at_n",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "actuals": [],
                "n": [],
                "total_num_positives": []
            }
        },
        "AveragePrecisionCalculator._shuffle": {
            "name": "_shuffle",
            "location": 249,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "predictions": [],
                "actuals": []
            }
        },
        "AveragePrecisionCalculator._zero_one_normalize": {
            "name": "_zero_one_normalize",
            "location": 257,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "epsilon": []
            }
        }
    },
    "fox-audio-master/youtube8m/convert_prediction_from_json_to_csv.py": {
        "get_csv_header": {
            "name": "get_csv_header",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "to_csv_row": {
            "name": "to_csv_row",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "json_data": []
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": []
            }
        }
    },
    "fox-audio-master/youtube8m/eval.py": {
        "find_class_by_name": {
            "name": "find_class_by_name",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "modules": []
            }
        },
        "get_input_evaluation_tensors": {
            "name": "get_input_evaluation_tensors",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "reader": [],
                "data_pattern": [],
                "batch_size": [],
                "num_readers": []
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": [],
                "model": [],
                "eval_data_pattern": [],
                "label_loss_fn": [],
                "batch_size": [],
                "num_readers": []
            }
        },
        "get_latest_checkpoint": {
            "name": "get_latest_checkpoint",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "evaluation_loop": {
            "name": "evaluation_loop",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "video_id_batch": [],
                "prediction_batch": [],
                "label_batch": [],
                "loss": [],
                "summary_op": [],
                "saver": [],
                "summary_writer": [],
                "evl_metrics": [],
                "last_global_step_val": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": []
            }
        }
    },
    "fox-audio-master/youtube8m/eval_util.py": {
        "flatten": {
            "name": "flatten",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "l": []
            }
        },
        "calculate_hit_at_one": {
            "name": "calculate_hit_at_one",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "actuals": []
            }
        },
        "calculate_precision_at_equal_recall_rate": {
            "name": "calculate_precision_at_equal_recall_rate",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "actuals": []
            }
        },
        "calculate_gap": {
            "name": "calculate_gap",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "predictions": [],
                "actuals": [],
                "top_k": []
            }
        },
        "top_k_by_class": {
            "name": "top_k_by_class",
            "location": 99,
            "return": [
                "Tuple[(List[List[nothing]], List[List[nothing]], list)]"
            ],
            "arguments": {
                "predictions": [],
                "labels": [],
                "k": []
            }
        },
        "top_k_triplets": {
            "name": "top_k_triplets",
            "location": 138,
            "return": [
                "List[Tuple[(Any, Any, Any)]]"
            ],
            "arguments": {
                "predictions": [],
                "labels": [],
                "k": []
            }
        },
        "EvaluationMetrics.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_class": [],
                "top_k": []
            }
        },
        "EvaluationMetrics.accumulate": {
            "name": "accumulate",
            "location": 169,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "labels": [],
                "loss": []
            }
        },
        "EvaluationMetrics.get": {
            "name": "get",
            "location": 207,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationMetrics.clear": {
            "name": "clear",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fox-audio-master/youtube8m/export_model.py": {
        "ModelExporter.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_features": [],
                "model": [],
                "reader": []
            }
        },
        "ModelExporter.export_model": {
            "name": "export_model",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dir": [],
                "global_step_val": [],
                "last_checkpoint": []
            }
        },
        "ModelExporter.build_inputs_and_outputs": {
            "name": "build_inputs_and_outputs",
            "location": 66,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelExporter.build_prediction_graph": {
            "name": "build_prediction_graph",
            "location": 96,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "serialized_examples": []
            }
        },
        "ModelExporter.build_inputs_and_outputs.fn": {
            "name": "fn",
            "location": 70,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "fox-audio-master/youtube8m/frame_level_models.py": {
        "FrameLevelLogisticModel.create_model": {
            "name": "create_model",
            "location": 62,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "model_input": [],
                "vocab_size": [],
                "num_frames": []
            }
        },
        "DbofModel.create_model": {
            "name": "create_model",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model_input": [],
                "vocab_size": [],
                "num_frames": [],
                "iterations": [],
                "add_batch_norm": [],
                "sample_random_frames": [],
                "cluster_size": [],
                "hidden_size": [],
                "is_training": []
            }
        },
        "LstmModel.create_model": {
            "name": "create_model",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "model_input": [],
                "vocab_size": [],
                "num_frames": []
            }
        }
    },
    "fox-audio-master/youtube8m/inference.py": {
        "format_lines": {
            "name": "format_lines",
            "location": 89,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "video_ids": [],
                "predictions": [],
                "top_k": []
            }
        },
        "get_input_data_tensors": {
            "name": "get_input_data_tensors",
            "location": 103,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "reader": [],
                "data_pattern": [],
                "batch_size": [],
                "num_readers": []
            }
        },
        "inference": {
            "name": "inference",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": [],
                "train_dir": [],
                "data_pattern": [],
                "out_file_location": [],
                "batch_size": [],
                "top_k": []
            }
        },
        "main": {
            "name": "main",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": []
            }
        },
        "inference.set_up_init_ops": {
            "name": "set_up_init_ops",
            "location": 174,
            "return": [],
            "arguments": {
                "variables": []
            }
        }
    },
    "fox-audio-master/youtube8m/losses.py": {
        "BaseLoss.calculate_loss": {
            "name": "calculate_loss",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "unused_predictions": [],
                "unused_labels": []
            }
        },
        "CrossEntropyLoss.calculate_loss": {
            "name": "calculate_loss",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "labels": []
            }
        },
        "HingeLoss.calculate_loss": {
            "name": "calculate_loss",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "labels": [],
                "b": []
            }
        },
        "SoftmaxLoss.calculate_loss": {
            "name": "calculate_loss",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "labels": []
            }
        }
    },
    "fox-audio-master/youtube8m/mean_average_precision_calculator.py": {
        "MeanAveragePrecisionCalculator.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_class": []
            }
        },
        "MeanAveragePrecisionCalculator.accumulate": {
            "name": "accumulate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "actuals": [],
                "num_positives": []
            }
        },
        "MeanAveragePrecisionCalculator.clear": {
            "name": "clear",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeanAveragePrecisionCalculator.is_empty": {
            "name": "is_empty",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeanAveragePrecisionCalculator.peek_map_at_n": {
            "name": "peek_map_at_n",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fox-audio-master/youtube8m/models.py": {
        "BaseModel.create_model": {
            "name": "create_model",
            "location": 21,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "unused_model_input": []
            }
        }
    },
    "fox-audio-master/youtube8m/model_utils.py": {
        "SampleRandomSequence": {
            "name": "SampleRandomSequence",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_input": [],
                "num_frames": [],
                "num_samples": []
            }
        },
        "SampleRandomFrames": {
            "name": "SampleRandomFrames",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_input": [],
                "num_frames": [],
                "num_samples": []
            }
        },
        "FramePooling": {
            "name": "FramePooling",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "frames": [],
                "method": []
            }
        }
    },
    "fox-audio-master/youtube8m/readers.py": {
        "resize_axis": {
            "name": "resize_axis",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "axis": [],
                "new_size": [],
                "fill_value": []
            }
        },
        "BaseReader.prepare_reader": {
            "name": "prepare_reader",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "unused_filename_queue": []
            }
        },
        "YT8MAggregatedFeatureReader.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [],
                "feature_sizes": [],
                "feature_names": []
            }
        },
        "YT8MAggregatedFeatureReader.prepare_reader": {
            "name": "prepare_reader",
            "location": 104,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "filename_queue": [],
                "batch_size": []
            }
        },
        "YT8MAggregatedFeatureReader.prepare_serialized_examples": {
            "name": "prepare_serialized_examples",
            "location": 119,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "serialized_examples": []
            }
        },
        "YT8MFrameFeatureReader.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classes": [],
                "feature_sizes": [],
                "feature_names": [],
                "max_frames": []
            }
        },
        "YT8MFrameFeatureReader.get_video_matrix": {
            "name": "get_video_matrix",
            "location": 189,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "features": [],
                "feature_size": [],
                "max_frames": [],
                "max_quantized_value": [],
                "min_quantized_value": []
            }
        },
        "YT8MFrameFeatureReader.prepare_reader": {
            "name": "prepare_reader",
            "location": 221,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "filename_queue": [],
                "max_quantized_value": [],
                "min_quantized_value": []
            }
        },
        "YT8MFrameFeatureReader.prepare_serialized_examples": {
            "name": "prepare_serialized_examples",
            "location": 241,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "serialized_example": [],
                "max_quantized_value": [],
                "min_quantized_value": []
            }
        }
    },
    "fox-audio-master/youtube8m/retrain.py": {
        "validate_class_name": {
            "name": "validate_class_name",
            "location": 124,
            "return": [],
            "arguments": {
                "flag_value": [],
                "category": [],
                "modules": [],
                "expected_superclass": []
            }
        },
        "get_input_data_tensors": {
            "name": "get_input_data_tensors",
            "location": 154,
            "return": [],
            "arguments": {
                "reader": [],
                "data_pattern": [],
                "batch_size": [],
                "num_epochs": [],
                "num_readers": []
            }
        },
        "find_class_by_name": {
            "name": "find_class_by_name",
            "location": 200,
            "return": [],
            "arguments": {
                "name": [],
                "modules": []
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 206,
            "return": [],
            "arguments": {
                "reader": [],
                "model": [],
                "train_data_pattern": [],
                "label_loss_fn": [],
                "batch_size": [],
                "base_learning_rate": [],
                "learning_rate_decay_examples": [],
                "learning_rate_decay": [],
                "optimizer_class": [],
                "clip_gradient_norm": [],
                "regularization_penalty": [],
                "num_readers": [],
                "num_epochs": []
            }
        },
        "get_reader": {
            "name": "get_reader",
            "location": 720,
            "return": [],
            "arguments": {}
        },
        "start_server": {
            "name": "start_server",
            "location": 765,
            "return": [],
            "arguments": {
                "cluster": [],
                "task": []
            }
        },
        "task_as_string": {
            "name": "task_as_string",
            "location": 788,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "main": {
            "name": "main",
            "location": 792,
            "return": [],
            "arguments": {
                "unused_argv": []
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "cluster": [],
                "task": [],
                "train_dir": [],
                "model": [],
                "reader": [],
                "model_exporter": [],
                "log_device_placement": [],
                "max_steps": [],
                "export_model_steps": []
            }
        },
        "Trainer.run": {
            "name": "run",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "start_new_model": []
            }
        },
        "Trainer.restore_last_checkpoint": {
            "name": "restore_last_checkpoint",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.export_model": {
            "name": "export_model",
            "location": 601,
            "return": [],
            "arguments": {
                "self": [],
                "global_step_val": [],
                "saver": [],
                "save_path": [],
                "session": []
            }
        },
        "Trainer.start_server_if_distributed": {
            "name": "start_server_if_distributed",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.remove_training_directory": {
            "name": "remove_training_directory",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "train_dir": []
            }
        },
        "Trainer.get_meta_filename": {
            "name": "get_meta_filename",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "start_new_model": [],
                "train_dir": []
            }
        },
        "Trainer.recover_model": {
            "name": "recover_model",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "meta_filename": []
            }
        },
        "Trainer.build_model": {
            "name": "build_model",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "reader": []
            }
        },
        "ParameterServer.__init__": {
            "name": "__init__",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "cluster": [],
                "task": []
            }
        },
        "ParameterServer.run": {
            "name": "run",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "fox-audio-master/youtube8m/train.py": {
        "validate_class_name": {
            "name": "validate_class_name",
            "location": 140,
            "return": [],
            "arguments": {
                "flag_value": [],
                "category": [],
                "modules": [],
                "expected_superclass": []
            }
        },
        "get_input_data_tensors": {
            "name": "get_input_data_tensors",
            "location": 170,
            "return": [],
            "arguments": {
                "reader": [],
                "data_pattern": [],
                "batch_size": [],
                "num_epochs": [],
                "num_readers": []
            }
        },
        "find_class_by_name": {
            "name": "find_class_by_name",
            "location": 216,
            "return": [],
            "arguments": {
                "name": [],
                "modules": []
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 222,
            "return": [],
            "arguments": {
                "reader": [],
                "model": [],
                "train_data_pattern": [],
                "label_loss_fn": [],
                "batch_size": [],
                "base_learning_rate": [],
                "learning_rate_decay_examples": [],
                "learning_rate_decay": [],
                "optimizer_class": [],
                "clip_gradient_norm": [],
                "regularization_penalty": [],
                "num_readers": [],
                "num_epochs": []
            }
        },
        "get_reader": {
            "name": "get_reader",
            "location": 710,
            "return": [],
            "arguments": {}
        },
        "start_server": {
            "name": "start_server",
            "location": 755,
            "return": [],
            "arguments": {
                "cluster": [],
                "task": []
            }
        },
        "task_as_string": {
            "name": "task_as_string",
            "location": 778,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "main": {
            "name": "main",
            "location": 782,
            "return": [],
            "arguments": {
                "unused_argv": []
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "cluster": [],
                "task": [],
                "train_dir": [],
                "model": [],
                "reader": [],
                "model_exporter": [],
                "log_device_placement": [],
                "max_steps": [],
                "export_model_steps": []
            }
        },
        "Trainer.run": {
            "name": "run",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "start_new_model": []
            }
        },
        "Trainer.export_model": {
            "name": "export_model",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "global_step_val": [],
                "saver": [],
                "save_path": [],
                "session": []
            }
        },
        "Trainer.start_server_if_distributed": {
            "name": "start_server_if_distributed",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer.remove_training_directory": {
            "name": "remove_training_directory",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "train_dir": []
            }
        },
        "Trainer.get_meta_filename": {
            "name": "get_meta_filename",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "start_new_model": [],
                "train_dir": []
            }
        },
        "Trainer.recover_model": {
            "name": "recover_model",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "meta_filename": []
            }
        },
        "Trainer.build_model": {
            "name": "build_model",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "reader": []
            }
        },
        "ParameterServer.__init__": {
            "name": "__init__",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "cluster": [],
                "task": []
            }
        },
        "ParameterServer.run": {
            "name": "run",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "fox-audio-master/youtube8m/transfer.py": {
        "build_graph": {
            "name": "build_graph",
            "location": 137,
            "return": [],
            "arguments": {
                "reader": [],
                "model": [],
                "train_data_pattern": [],
                "label_loss_fn": [],
                "batch_size": [],
                "base_learning_rate": [],
                "learning_rate_decay_examples": [],
                "learning_rate_decay": [],
                "optimizer_class": [],
                "clip_gradient_norm": [],
                "regularization_penalty": [],
                "num_readers": [],
                "num_epochs": []
            }
        },
        "main": {
            "name": "main",
            "location": 527,
            "return": [],
            "arguments": {
                "unused_argv": []
            }
        },
        "TransferTrainer.recover_model": {
            "name": "recover_model",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "meta_filename": []
            }
        },
        "TransferTrainer.run": {
            "name": "run",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "start_new_model": []
            }
        }
    },
    "fox-audio-master/youtube8m/utils.py": {
        "Dequantize": {
            "name": "Dequantize",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "feat_vector": [],
                "max_quantized_value": [],
                "min_quantized_value": []
            }
        },
        "MakeSummary": {
            "name": "MakeSummary",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [],
                "value": []
            }
        },
        "AddGlobalStepSummary": {
            "name": "AddGlobalStepSummary",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "summary_writer": [],
                "global_step_val": [],
                "global_step_info_dict": [],
                "summary_scope": []
            }
        },
        "AddEpochSummary": {
            "name": "AddEpochSummary",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "summary_writer": [],
                "global_step_val": [],
                "epoch_info_dict": [],
                "summary_scope": []
            }
        },
        "GetListOfFeatureNamesAndSizes": {
            "name": "GetListOfFeatureNamesAndSizes",
            "location": 152,
            "return": [
                "Tuple[(list, List[int])]"
            ],
            "arguments": {
                "feature_names": [],
                "feature_sizes": []
            }
        },
        "clip_gradient_norms": {
            "name": "clip_gradient_norms",
            "location": 181,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "gradients_to_variables": [],
                "max_norm": []
            }
        },
        "combine_gradients": {
            "name": "combine_gradients",
            "location": 203,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "tower_grads": []
            }
        }
    },
    "fox-audio-master/youtube8m/video_level_models.py": {
        "LogisticModel.create_model": {
            "name": "create_model",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "model_input": [],
                "vocab_size": [],
                "l2_penalty": []
            }
        },
        "MoeModel.create_model": {
            "name": "create_model",
            "location": 59,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "model_input": [],
                "vocab_size": [],
                "num_mixtures": [],
                "l2_penalty": []
            }
        }
    },
    "fox-audio-master/youtube8m/__init__.py": {},
    "fox-audio-master/youtube8m/feature_extractor/extract_tfrecords_main.py": {
        "frame_iterator": {
            "name": "frame_iterator",
            "location": 106,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "filename": [],
                "every_ms": [],
                "max_num_frames": []
            }
        },
        "_int64_list_feature": {
            "name": "_int64_list_feature",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "int64_list": []
            }
        },
        "_bytes_feature": {
            "name": "_bytes_feature",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "_make_bytes": {
            "name": "_make_bytes",
            "location": 147,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "int_array": []
            }
        },
        "quantize": {
            "name": "quantize",
            "location": 154,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "features": [],
                "min_quantized_value": [],
                "max_quantized_value": []
            }
        },
        "main": {
            "name": "main",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "unused_argv": []
            }
        }
    },
    "fox-audio-master/youtube8m/feature_extractor/feature_extractor.py": {
        "YouTube8MFeatureExtractor.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dir": []
            }
        },
        "YouTube8MFeatureExtractor.extract_rgb_frame_features": {
            "name": "extract_rgb_frame_features",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frame_rgb": [],
                "apply_pca": []
            }
        },
        "YouTube8MFeatureExtractor.apply_pca": {
            "name": "apply_pca",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frame_features": []
            }
        },
        "YouTube8MFeatureExtractor._maybe_download": {
            "name": "_maybe_download",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "YouTube8MFeatureExtractor._load_inception": {
            "name": "_load_inception",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto_file": []
            }
        },
        "YouTube8MFeatureExtractor._load_pca": {
            "name": "_load_pca",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YouTube8MFeatureExtractor._maybe_download._progress": {
            "name": "_progress",
            "location": 141,
            "return": [],
            "arguments": {
                "count": [],
                "block_size": [],
                "total_size": []
            }
        }
    },
    "fox-audio-master/youtube8m/feature_extractor/feature_extractor_test.py": {
        "_FilePath": {
            "name": "_FilePath",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": []
            }
        },
        "_MeanElementWiseDifference": {
            "name": "_MeanElementWiseDifference",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "FeatureExtractorTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureExtractorTest.testPCAOnFeatureVector": {
            "name": "testPCAOnFeatureVector",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
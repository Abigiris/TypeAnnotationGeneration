{
    "galaxy_emulator.py": {
        "FakeGalaxyRpcClient.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [],
                "writer": []
            }
        }
    },
    "tasks.py": {
        "get_repo": {
            "name": "get_repo",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "asset_name": {
            "name": "asset_name",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "tag": [],
                "platform": []
            }
        },
        "install": {
            "name": "install",
            "location": 55,
            "return": [],
            "arguments": {
                "c": [],
                "dev": []
            }
        },
        "build": {
            "name": "build",
            "location": 61,
            "return": [],
            "arguments": {
                "c": [],
                "output": []
            }
        },
        "dist": {
            "name": "dist",
            "location": 67,
            "return": [],
            "arguments": {
                "c": [],
                "output": [],
                "galaxy_path": [],
                "no_deps": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 86,
            "return": [],
            "arguments": {
                "c": [],
                "output": [],
                "deps": []
            }
        },
        "recursive_overwrite": {
            "name": "recursive_overwrite",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "copy": {
            "name": "copy",
            "location": 115,
            "return": [],
            "arguments": {
                "c": [],
                "output": []
            }
        },
        "test": {
            "name": "test",
            "location": 121,
            "return": [],
            "arguments": {
                "c": [],
                "target": []
            }
        },
        "archive": {
            "name": "archive",
            "location": 146,
            "return": [],
            "arguments": {
                "c": [],
                "zip_name": [],
                "target": []
            }
        },
        "curr_ver": {
            "name": "curr_ver",
            "location": 160,
            "return": [],
            "arguments": {
                "c": [],
                "tag": []
            }
        },
        "create_tag": {
            "name": "create_tag",
            "location": 179,
            "return": [],
            "arguments": {
                "c": [],
                "tag": []
            }
        },
        "release": {
            "name": "release",
            "location": 197,
            "return": [],
            "arguments": {
                "c": [],
                "automa": []
            }
        }
    },
    "src/active_month_resolver.py": {
        "ActiveMonthResolver.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "has_active_subscription": [
                    "bool"
                ]
            }
        }
    },
    "src/consts.py": {},
    "src/guirunner.py": {},
    "src/humbledownloader.py": {
        "HumbleDownloadResolver.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_bitness": [
                    "consts.BITNESS"
                ]
            }
        },
        "HumbleDownloadResolver.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "model.download.DownloadStructItem"
            ],
            "arguments": {
                "self": [],
                "download": [
                    "model.download.SubproductDownload"
                ]
            }
        }
    },
    "src/library.py": {
        "LibraryResolver.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "webservice.AuthorizedHumbleAPI"
                ],
                "settings": [
                    "settings.LibrarySettings"
                ],
                "save_cache_callback": [
                    "Callable"
                ],
                "cache": [
                    "Dict[(str, list)]"
                ]
            }
        },
        "LibraryResolver._make_chunks": {
            "name": "_make_chunks",
            "location": 82,
            "return": [
                "Generator[(Sequence[T], None, None)]"
            ],
            "arguments": {
                "items": [
                    "Sequence[T]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "LibraryResolver.__filter_out_not_game_bundles": {
            "name": "__filter_out_not_game_bundles",
            "location": 108,
            "return": [],
            "arguments": {
                "orders": []
            }
        },
        "LibraryResolver._get_subproducts": {
            "name": "_get_subproducts",
            "location": 119,
            "return": [
                "List[model.game.Subproduct]"
            ],
            "arguments": {
                "orders": [
                    "list"
                ]
            }
        },
        "LibraryResolver._is_multigame_key": {
            "name": "_is_multigame_key",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "model.game.Key"
                ],
                "product_category": [
                    "str"
                ],
                "blacklist": [
                    "Iterable[str]"
                ]
            }
        },
        "LibraryResolver._split_multigame_key": {
            "name": "_split_multigame_key",
            "location": 147,
            "return": [
                "List[model.game.KeyGame]"
            ],
            "arguments": {
                "key": [
                    "model.game.Key"
                ]
            }
        },
        "LibraryResolver._get_key_infos": {
            "name": "_get_key_infos",
            "location": 161,
            "return": [
                "List[KeyInfo]"
            ],
            "arguments": {
                "orders": [
                    "list"
                ]
            }
        },
        "LibraryResolver._get_key_games": {
            "name": "_get_key_games",
            "location": 176,
            "return": [
                "List[model.game.KeyGame]"
            ],
            "arguments": {
                "self": [],
                "orders": [
                    "list"
                ],
                "show_revealed_keys": [
                    "bool"
                ]
            }
        }
    },
    "src/plugin.py": {
        "setup_sentry": {
            "name": "setup_sentry",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HumbleBundlePlugin.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [],
                "writer": [],
                "token": []
            }
        },
        "HumbleBundlePlugin._humble_games": {
            "name": "_humble_games",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleBundlePlugin._save_cache": {
            "name": "_save_cache",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "data": []
            }
        },
        "HumbleBundlePlugin._load_cache": {
            "name": "_load_cache",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": []
            }
        },
        "HumbleBundlePlugin.handshake_complete": {
            "name": "handshake_complete",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleBundlePlugin.__is_after_minor_update": {
            "name": "__is_after_minor_update",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleBundlePlugin._normalize_subscription_name": {
            "name": "_normalize_subscription_name",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "machine_name": [
                    "str"
                ]
            }
        },
        "HumbleBundlePlugin._choice_name_to_slug": {
            "name": "_choice_name_to_slug",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "subscription_name": [
                    "str"
                ]
            }
        },
        "HumbleBundlePlugin.subscription_games_import_complete": {
            "name": "subscription_games_import_complete",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleBundlePlugin._open_config": {
            "name": "_open_config",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "gui.options.OPTIONS_MODE"
                ]
            }
        },
        "HumbleBundlePlugin.tick": {
            "name": "tick",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleBundlePlugin.__is_after_minor_update.cut_to_minor": {
            "name": "cut_to_minor",
            "location": 166,
            "return": [],
            "arguments": {
                "ver": []
            }
        }
    },
    "src/privacy.py": {
        "SensitiveFilter.filter": {
            "name": "filter",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "SensitiveFilter.redact": {
            "name": "redact",
            "location": 25,
            "return": [
                "Union[(str, model.game.Key, _T0)]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "_T0"
                ]
            }
        }
    },
    "src/settings.py": {
        "UpdateTracker.has_changed": {
            "name": "has_changed",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTracker.update": {
            "name": "update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTracker._update": {
            "name": "_update",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateTracker.serialize": {
            "name": "serialize",
            "location": 41,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibrarySettings._update": {
            "name": "_update",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library": []
            }
        },
        "LibrarySettings.serialize": {
            "name": "serialize",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstalledSettings._update": {
            "name": "_update",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installed": []
            }
        },
        "InstalledSettings.serialize": {
            "name": "serialize",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suppress_initial_change": []
            }
        },
        "Settings.library": {
            "name": "library",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.installed": {
            "name": "installed",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.open_config_file": {
            "name": "open_config_file",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.reload_config_if_changed": {
            "name": "reload_config_if_changed",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "initial": []
            }
        },
        "Settings._has_config_changed": {
            "name": "_has_config_changed",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._load_config_file": {
            "name": "_load_config_file",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._update_objects": {
            "name": "_update_objects",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.get_config": {
            "name": "get_config",
            "location": 172,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._get_config_file_comments": {
            "name": "_get_config_file_comments",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.save_config": {
            "name": "save_config",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/webservice.py": {
        "handle_exception": {
            "name": "handle_exception",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "AuthorizedHumbleAPI.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AuthorizedHumbleAPI.is_authenticated": {
            "name": "is_authenticated",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedHumbleAPI._decode_user_id": {
            "name": "_decode_user_id",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_simpleauth_sess": []
            }
        },
        "AuthorizedHumbleAPI._filename_from_web_link": {
            "name": "_filename_from_web_link",
            "location": 307,
            "return": [
                "Any"
            ],
            "arguments": {
                "link": [
                    "str"
                ]
            }
        }
    },
    "src/gui/baseapp.py": {
        "BaseApp.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_name": [
                    "str"
                ],
                "size": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "BaseApp.startup": {
            "name": "startup",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseApp.startup_method": {
            "name": "startup_method",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseApp._create_impl": {
            "name": "_create_impl",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/gui/keys.py": {
        "test": {
            "name": "test",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ShowKey.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "human_name": [
                    "str"
                ],
                "key_type": [
                    "str"
                ],
                "key_val": [
                    "Optional[str]"
                ]
            }
        },
        "ShowKey.startup_method": {
            "name": "startup_method",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShowKey.open_keys_url": {
            "name": "open_keys_url",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        }
    },
    "src/gui/options.py": {
        "Options.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "OPTIONS_MODE"
                ],
                "changelog_path": [
                    "pathlib.Path"
                ]
            }
        },
        "Options._on_source_switch": {
            "name": "_on_source_switch",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "el": []
            }
        },
        "Options._on_revealed_switch": {
            "name": "_on_revealed_switch",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "el": []
            }
        },
        "Options.__cfg_add_path": {
            "name": "__cfg_add_path",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "raw_path": []
            }
        },
        "Options._add_path": {
            "name": "_add_path",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "el": []
            }
        },
        "Options.__cfg_remove_path": {
            "name": "__cfg_remove_path",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "raw_path": []
            }
        },
        "Options._remove_paths": {
            "name": "_remove_paths",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "Options._library_section": {
            "name": "_library_section",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options._installed_section": {
            "name": "_installed_section",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options._about_section": {
            "name": "_about_section",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options._news_section": {
            "name": "_news_section",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.startup_method": {
            "name": "startup_method",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/gui/toga_helpers.py": {
        "set_tooltip": {
            "name": "set_tooltip",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "el": [],
                "text": []
            }
        },
        "LinkLabel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "link": [],
                "id": [],
                "style": [],
                "factory": []
            }
        },
        "LinkLabel.link": {
            "name": "link",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "LinkLabel._link_clicked": {
            "name": "_link_clicked",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "el": [],
                "_": []
            }
        },
        "OneColumnTable.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str"
                ]
            }
        },
        "OneColumnTable.__set_full_width_one_column": {
            "name": "__set_full_width_one_column",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneColumnTable.not_empty": {
            "name": "not_empty",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OneColumnTable.selection": {
            "name": "selection",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionContainer.open_tab": {
            "name": "open_tab",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "WinformsLinkLabel.create": {
            "name": "create",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/gui/__init__.py": {},
    "src/humbleapp/humbleapp.py": {
        "load_humble_app_config": {
            "name": "load_humble_app_config",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "Union[(str, pathlib.PurePath)]"
                ]
            }
        },
        "parse_humble_app_config": {
            "name": "parse_humble_app_config",
            "location": 105,
            "return": [
                "HumbleAppConfig"
            ],
            "arguments": {
                "content": [
                    "dict"
                ]
            }
        },
        "get_app_path_for_uri_handler": {
            "name": "get_app_path_for_uri_handler",
            "location": 140,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "protocol": [
                    "str"
                ]
            }
        },
        "VaultGame.full_executable_path": {
            "name": "full_executable_path",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileWatcher.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePath"
                ]
            }
        },
        "FileWatcher.path": {
            "name": "path",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileWatcher.has_changed": {
            "name": "has_changed",
            "location": 90,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "parse_humble_app_config.parse_game": {
            "name": "parse_game",
            "location": 106,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "get_app_path_for_uri_handler._get_path_from_cmd_template": {
            "name": "_get_path_from_cmd_template",
            "location": 146,
            "return": [],
            "arguments": {
                "cmd_template": []
            }
        },
        "HumbleAppClient._open": {
            "name": "_open",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "cmd": [
                    "str"
                ],
                "arg": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.get_exe_path": {
            "name": "get_exe_path",
            "location": 168,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.is_installed": {
            "name": "is_installed",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.launch": {
            "name": "launch",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.download": {
            "name": "download",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.uninstall": {
            "name": "uninstall",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        }
    },
    "src/humbleapp/__init__.py": {},
    "src/local/baseappfinder.py": {
        "BaseAppFinder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_close_matches": [],
                "find_best_exe": []
            }
        },
        "BaseAppFinder._get_close_matches": {
            "name": "_get_close_matches",
            "location": 87,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dir_name": [
                    "str"
                ],
                "candidates": [
                    "Set[str]"
                ],
                "similarity": [
                    "float"
                ]
            }
        },
        "BaseAppFinder._find_best_exe": {
            "name": "_find_best_exe",
            "location": 95,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.PurePath"
                ],
                "app_name": [
                    "str"
                ]
            }
        }
    },
    "src/local/humbleapp_adapter.py": {
        "_vault_to_galaxy_subscription_game": {
            "name": "_vault_to_galaxy_subscription_game",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "vault_game": [
                    "humbleapp.humbleapp.VaultGame"
                ]
            }
        },
        "_vault_to_galaxy_local_game": {
            "name": "_vault_to_galaxy_local_game",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "vault_game": [
                    "humbleapp.humbleapp.VaultGame"
                ]
            }
        },
        "HumbleAppClient.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.__contains__": {
            "name": "__contains__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.get_subscription_games": {
            "name": "get_subscription_games",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "subscription_name": [
                    "HumbleAppGameCategory"
                ]
            }
        },
        "HumbleAppClient.get_local_games": {
            "name": "get_local_games",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.os_compatibility": {
            "name": "os_compatibility",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.refresh_game_list": {
            "name": "refresh_game_list",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient._parse_config": {
            "name": "_parse_config",
            "location": 78,
            "return": [
                "Optional[humbleapp.humbleapp.HumbleAppConfig]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.get_local_size": {
            "name": "get_local_size",
            "location": 84,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.is_installed": {
            "name": "is_installed",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleAppClient.install": {
            "name": "install",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.uninstall": {
            "name": "uninstall",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        },
        "HumbleAppClient.launch": {
            "name": "launch",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_id": [
                    "str"
                ]
            }
        }
    },
    "src/local/localgame.py": {
        "LocalHumbleGame.id": {
            "name": "id",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.is_installed": {
            "name": "is_installed",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.is_running": {
            "name": "is_running",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.state": {
            "name": "state",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.in_galaxy_format": {
            "name": "in_galaxy_format",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.bundle_name": {
            "name": "bundle_name",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.run": {
            "name": "run",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalHumbleGame.uninstall": {
            "name": "uninstall",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/local/macappfinder.py": {
        "BundleInfo.executable": {
            "name": "executable",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MacAppFinder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacAppFinder._get_close_matches": {
            "name": "_get_close_matches",
            "location": 35,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dir_name": [],
                "candidates": [],
                "similarity": []
            }
        },
        "MacAppFinder._find_best_exe": {
            "name": "_find_best_exe",
            "location": 40,
            "return": [
                "Optional[Union[(str, pathlib.Path)]]"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "pathlib.PurePath"
                ],
                "app_name": [
                    "str"
                ]
            }
        },
        "MacAppFinder.__parse_bundle": {
            "name": "__parse_bundle",
            "location": 46,
            "return": [],
            "arguments": {
                "app_dir": []
            }
        }
    },
    "src/local/pathfinder.py": {
        "PathFinder.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_windows": [
                    "bool"
                ]
            }
        },
        "PathFinder.find_executables": {
            "name": "find_executables",
            "location": 13,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[(str, os.PathLike)]"
                ]
            }
        },
        "PathFinder.is_exe": {
            "name": "is_exe",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PathFinder.choose_main_executable": {
            "name": "choose_main_executable",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "executables": [
                    "Sequence[str]"
                ]
            }
        }
    },
    "src/local/reg_watcher.py": {
        "UninstallKey.install_location_path": {
            "name": "install_location_path",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UninstallKey.display_icon_path": {
            "name": "display_icon_path",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UninstallKey.local_uninstaller_path": {
            "name": "local_uninstaller_path",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UninstallKey.get_install_location": {
            "name": "get_install_location",
            "location": 48,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinRegUninstallWatcher.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ignore_filter": [
                    "Optional[Callable[([str], bool)]]"
                ]
            }
        },
        "WinRegUninstallWatcher.uninstall_keys": {
            "name": "uninstall_keys",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WinRegUninstallWatcher._is_os_64bit": {
            "name": "_is_os_64bit",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "WinRegUninstallWatcher.__get_value": {
            "name": "__get_value",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "subkey": [],
                "prop": [],
                "optional": []
            }
        },
        "WinRegUninstallWatcher.__parse_uninstall_key": {
            "name": "__parse_uninstall_key",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "subkey": []
            }
        },
        "WinRegUninstallWatcher._iterate_new_uninstall_keys": {
            "name": "_iterate_new_uninstall_keys",
            "location": 105,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WinRegUninstallWatcher.refresh": {
            "name": "refresh",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/local/winappfinder.py": {
        "location_exists": {
            "name": "location_exists",
            "location": 15,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "location": [
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "WindowsAppFinder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowsAppFinder.is_other_store_game": {
            "name": "is_other_store_game",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "key_name": []
            }
        },
        "WindowsAppFinder._matches": {
            "name": "_matches",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "human_name": [
                    "str"
                ],
                "uk": [
                    "local.reg_watcher.UninstallKey"
                ]
            }
        },
        "WindowsAppFinder._find_executable": {
            "name": "_find_executable",
            "location": 60,
            "return": [
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "human_name": [
                    "str"
                ],
                "uk": [
                    "local.reg_watcher.UninstallKey"
                ]
            }
        },
        "WindowsAppFinder._matches.escape": {
            "name": "escape",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "WindowsAppFinder._matches.escaped_matches": {
            "name": "escaped_matches",
            "location": 42,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "WindowsAppFinder._matches.norm": {
            "name": "norm",
            "location": 44,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "src/local/__init__.py": {},
    "src/model/download.py": {
        "DownloadStructItem.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "DownloadStructItem.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadStructItem.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadStructItem.name": {
            "name": "name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadStructItem.web": {
            "name": "web",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadStructItem.bittorrent": {
            "name": "bittorrent",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadStructItem.human_size": {
            "name": "human_size",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TroveDownload.human_size": {
            "name": "human_size",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TroveDownload.machine_name": {
            "name": "machine_name",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubproductDownload.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "SubproductDownload.machine_name": {
            "name": "machine_name",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubproductDownload.download_struct": {
            "name": "download_struct",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "src/model/game.py": {
        "HumbleGame.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "HumbleGame.downloads": {
            "name": "downloads",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.os_compatibile": {
            "name": "os_compatibile",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "os": [
                    "model.types.HP"
                ]
            }
        },
        "HumbleGame.human_name": {
            "name": "human_name",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.machine_name": {
            "name": "machine_name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.in_galaxy_format": {
            "name": "in_galaxy_format",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HumbleGame.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TroveGame.downloads": {
            "name": "downloads",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TroveGame.human_name": {
            "name": "human_name",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TroveGame.date_added": {
            "name": "date_added",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TroveGame.in_galaxy_format": {
            "name": "in_galaxy_format",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TroveGame.serialize": {
            "name": "serialize",
            "location": 74,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subproduct.downloads": {
            "name": "downloads",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subproduct.license": {
            "name": "license",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.downloads": {
            "name": "downloads",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.license": {
            "name": "license",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.key_type": {
            "name": "key_type",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.key_type_human_name": {
            "name": "key_type_human_name",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.key_val": {
            "name": "key_val",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyGame.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Key"
                ],
                "game_id": [
                    "str"
                ],
                "game_name": [
                    "str"
                ]
            }
        },
        "KeyGame.human_name": {
            "name": "human_name",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyGame.machine_name": {
            "name": "machine_name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.machine_name": {
            "name": "machine_name",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.human_name": {
            "name": "human_name",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.downloads": {
            "name": "downloads",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.presentation_url": {
            "name": "presentation_url",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.in_galaxy_format": {
            "name": "in_galaxy_format",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceGame.serialize": {
            "name": "serialize",
            "location": 185,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/model/product.py": {
        "Product.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "Product.category": {
            "name": "category",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Product.bundle_type": {
            "name": "bundle_type",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "src/model/subscription.py": {
        "datetime_parse": {
            "name": "datetime_parse",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "dt": [
                    "str"
                ]
            }
        },
        "_now_time": {
            "name": "_now_time",
            "location": 16,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "UserSubscriptionInfo.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "UserSubscriptionInfo.user_plan": {
            "name": "user_plan",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSubscriptionInfo.pay_early_options": {
            "name": "pay_early_options",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSubscriptionInfo.subcription_join_date": {
            "name": "subcription_join_date",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSubscriptionInfo.subscription_expires": {
            "name": "subscription_expires",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSubscriptionInfo.subscription_expired": {
            "name": "subscription_expired",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSubscriptionPlan.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "PayEarlyOptions.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "PayEarlyOptions.active_content_product_machine_name": {
            "name": "active_content_product_machine_name",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PayEarlyOptions.active_content_start": {
            "name": "active_content_start",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceMonth.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "is_active": [
                    "bool"
                ]
            }
        },
        "ChoiceMonth.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceMonth.last_url_part": {
            "name": "last_url_part",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ContentChoice.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "Extras.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ContentChoiceOptions.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ContentChoiceOptions.content_choices_made": {
            "name": "content_choices_made",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentChoiceOptions.remaining_choices": {
            "name": "remaining_choices",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentMonthlyOptions.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "MontlyContentData.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ChoiceContentData.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ChoiceContentData.active_content_start": {
            "name": "active_content_start",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "src/model/types.py": {
        "HP._missing_": {
            "name": "_missing_",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "HP.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HP.__hash__": {
            "name": "__hash__",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "src/model/__init__.py": {},
    "src/utils/decorators.py": {
        "double_click_effect": {
            "name": "double_click_effect",
            "location": 7,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "timeout": [
                    "float"
                ],
                "effect": [
                    "Union[(str, Callable)]"
                ]
            }
        },
        "double_click_effect._wrapper": {
            "name": "_wrapper",
            "location": 14,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "src/utils/__init__.py": {},
    "tests/conftest.py": {
        "delayed_fn": {
            "name": "delayed_fn",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "aioresponse": {
            "name": "aioresponse",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 46,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "api_mock_raw": {
            "name": "api_mock_raw",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "api_mock": {
            "name": "api_mock",
            "location": 74,
            "return": [],
            "arguments": {
                "api_mock_raw": [],
                "orders_keys": []
            }
        },
        "humbleapp_client_mock": {
            "name": "humbleapp_client_mock",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "_initialize_plugin": {
            "name": "_initialize_plugin",
            "location": 97,
            "return": [
                "_plugin.HumbleBundlePlugin"
            ],
            "arguments": {}
        },
        "get_data": {
            "name": "get_data",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "orders": {
            "name": "orders",
            "location": 138,
            "return": [],
            "arguments": {
                "get_data": []
            }
        },
        "orders_keys": {
            "name": "orders_keys",
            "location": 143,
            "return": [],
            "arguments": {
                "get_data": []
            }
        },
        "origin_bundle_order": {
            "name": "origin_bundle_order",
            "location": 148,
            "return": [],
            "arguments": {
                "get_data": []
            }
        },
        "overgrowth": {
            "name": "overgrowth",
            "location": 153,
            "return": [],
            "arguments": {
                "get_data": []
            }
        },
        "bulk_api_orders": {
            "name": "bulk_api_orders",
            "location": 158,
            "return": [],
            "arguments": {
                "orders_keys": []
            }
        },
        "api_mock.get_details": {
            "name": "get_details",
            "location": 78,
            "return": [],
            "arguments": {
                "gamekey": []
            }
        },
        "get_data.fn": {
            "name": "fn",
            "location": 130,
            "return": [],
            "arguments": {
                "source": []
            }
        }
    },
    "tests/common/test_api.py": {
        "client_session": {
            "name": "client_session",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_filename_from_web_link": {
            "name": "test_filename_from_web_link",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        }
    },
    "tests/common/test_appfinder.py": {
        "candidates": {
            "name": "candidates",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_get_close_matches_exact": {
            "name": "test_get_close_matches_exact",
            "location": 23,
            "return": [],
            "arguments": {
                "dirname": [],
                "expected": [],
                "candidates": []
            }
        },
        "test_get_close_matches_close": {
            "name": "test_get_close_matches_close",
            "location": 32,
            "return": [],
            "arguments": {
                "dirname": [],
                "expected": [],
                "candidates": []
            }
        },
        "create_tmp_tree": {
            "name": "create_tmp_tree",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "create_tmp_tree.fn": {
            "name": "fn",
            "location": 40,
            "return": [],
            "arguments": {
                "paths": []
            }
        }
    },
    "tests/common/test_authentication.py": {
        "user_id": {
            "name": "user_id",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "auth_cookie": {
            "name": "auth_cookie",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "fetching_user_email": {
            "name": "fetching_user_email",
            "location": 31,
            "return": [],
            "arguments": {
                "aioresponse": []
            }
        }
    },
    "tests/common/test_downloader.py": {
        "test_download_resolver_for_bitness": {
            "name": "test_download_resolver_for_bitness",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tests/common/test_library.py": {
        "create_resolver": {
            "name": "create_resolver",
            "location": 14,
            "return": [],
            "arguments": {
                "plugin": []
            }
        },
        "change_settings": {
            "name": "change_settings",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "get_torchlight": {
            "name": "get_torchlight",
            "location": 33,
            "return": [],
            "arguments": {
                "orders_keys": []
            }
        },
        "an_order": {
            "name": "an_order",
            "location": 44,
            "return": [],
            "arguments": {
                "get_torchlight": []
            }
        },
        "an_order_games": {
            "name": "an_order_games",
            "location": 49,
            "return": [],
            "arguments": {
                "get_torchlight": []
            }
        },
        "test_is_multigame_key": {
            "name": "test_is_multigame_key",
            "location": 127,
            "return": [],
            "arguments": {
                "human_name": [],
                "category": [],
                "blacklist": [],
                "is_multigame": []
            }
        },
        "test_split_multigame_key": {
            "name": "test_split_multigame_key",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_multigame_key_and": {
            "name": "test_split_multigame_key_and",
            "location": 157,
            "return": [],
            "arguments": {
                "machine_name": [],
                "human_name": [],
                "expected": []
            }
        },
        "test_get_key_info": {
            "name": "test_get_key_info",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_chunks": {
            "name": "test_make_chunks",
            "location": 221,
            "return": [],
            "arguments": {
                "chunks": [],
                "expected": []
            }
        },
        "create_resolver.fn": {
            "name": "fn",
            "location": 15,
            "return": [],
            "arguments": {
                "settings": [],
                "cache": []
            }
        },
        "change_settings.fn": {
            "name": "fn",
            "location": 27,
            "return": [],
            "arguments": {
                "plugin": [],
                "lib_config": []
            }
        },
        "TestFetchOrdersViaBulkAPI.resolver": {
            "name": "resolver",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "create_resolver": []
            }
        },
        "TestFetchOrdersViaBulkAPI.test_fetch_by_multiple_batches.fake_bulk_api_reponse": {
            "name": "fake_bulk_api_reponse",
            "location": 103,
            "return": [],
            "arguments": {
                "gamekeys": []
            }
        }
    },
    "tests/common/test_localgame.py": {
        "create_file_at": {
            "name": "create_file_at",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "create_file_at.fn": {
            "name": "fn",
            "location": 10,
            "return": [],
            "arguments": {
                "path": [],
                "content": []
            }
        }
    },
    "tests/common/test_opening_options.py": {
        "auth_cookie": {
            "name": "auth_cookie",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "tests/common/test_pathfinder.py": {
        "systemize": {
            "name": "systemize",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_choose_1exe": {
            "name": "test_choose_1exe",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choose_exact_match": {
            "name": "test_choose_exact_match",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choose_icase": {
            "name": "test_choose_icase",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choose_2exe": {
            "name": "test_choose_2exe",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choose_full_path": {
            "name": "test_choose_full_path",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "systemize": []
            }
        },
        "test_choose_legendary_heroes": {
            "name": "test_choose_legendary_heroes",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "systemize": []
            }
        },
        "systemize.fn": {
            "name": "fn",
            "location": 10,
            "return": [],
            "arguments": {
                "executables": []
            }
        }
    },
    "tests/common/test_plugin.py": {},
    "tests/common/test_privacy.py": {
        "sensitive_logger": {
            "name": "sensitive_logger",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_strip_from_dict": {
            "name": "test_strip_from_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "sensitive_logger": [],
                "caplog": []
            }
        },
        "test_strip_from_key": {
            "name": "test_strip_from_key",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "sensitive_logger": [],
                "caplog": []
            }
        },
        "test_strip_extra": {
            "name": "test_strip_extra",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "sensitive_logger": [],
                "caplog": []
            }
        },
        "test_strip_extra_game_key": {
            "name": "test_strip_extra_game_key",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "sensitive_logger": [],
                "caplog": []
            }
        },
        "test_strip_from_str": {
            "name": "test_strip_from_str",
            "location": 85,
            "return": [],
            "arguments": {
                "sensitive_logger": [],
                "caplog": [],
                "key_val": []
            }
        },
        "test_strip_from_str_false_positives": {
            "name": "test_strip_from_str_false_positives",
            "location": 98,
            "return": [],
            "arguments": {
                "sensitive_logger": [],
                "caplog": [],
                "key_val": []
            }
        }
    },
    "tests/common/test_settings.py": {
        "test_ut_has_changed_on_init": {
            "name": "test_ut_has_changed_on_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ut_has_changed_check_twice": {
            "name": "test_ut_has_changed_check_twice",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ut_has_not_changed": {
            "name": "test_ut_has_not_changed",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ut_has_changed": {
            "name": "test_ut_has_changed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ut_has_changed_quickly": {
            "name": "test_ut_has_changed_quickly",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ut_update_error": {
            "name": "test_ut_update_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_installed_defaults": {
            "name": "test_installed_defaults",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_installed_update_serialize": {
            "name": "test_installed_update_serialize",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_installed_from_raw_file_allowed_paths": {
            "name": "test_installed_from_raw_file_allowed_paths",
            "location": 87,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_settings_default_config": {
            "name": "test_settings_default_config",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockSection._update": {
            "name": "_update",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MockSection.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tests/common/test_subscriptions.py": {
        "assert_contains": {
            "name": "assert_contains",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "alist": [
                    "list"
                ],
                "elements": [
                    "Iterable"
                ]
            }
        },
        "api_mock": {
            "name": "api_mock",
            "location": 23,
            "return": [],
            "arguments": {
                "api_mock": []
            }
        }
    },
    "tests/common/test_subscription_games.py": {
        "cco": {
            "name": "cco",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "choice_data": {
            "name": "choice_data",
            "location": 41,
            "return": [],
            "arguments": {
                "cco": []
            }
        },
        "test_humble_app_games.fake_get_sub_games": {
            "name": "fake_get_sub_games",
            "location": 150,
            "return": [],
            "arguments": {
                "game_cat": []
            }
        }
    },
    "tests/common/test_tick.py": {},
    "tests/common/model/test_game.py": {
        "test_game_properties_overgrowth": {
            "name": "test_game_properties_overgrowth",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "overgrowth": []
            }
        },
        "test_game_properties_access": {
            "name": "test_game_properties_access",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "orders": []
            }
        },
        "test_key_properties": {
            "name": "test_key_properties",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "origin_bundle_order": []
            }
        },
        "test_key_key_game_data": {
            "name": "test_key_key_game_data",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_game_human_name_changed": {
            "name": "test_key_game_human_name_changed",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_game_human_name_not_changed": {
            "name": "test_key_game_human_name_not_changed",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tests/common/model/test_product.py": {
        "software_photo": {
            "name": "software_photo",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "storefront_prod": {
            "name": "storefront_prod",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_bundle_type": {
            "name": "test_bundle_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "software_photo": [],
                "storefront_prod": []
            }
        }
    },
    "tests/common/utils/test_decorators.py": {
        "mock_dbclick": {
            "name": "mock_dbclick",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "mock_async_fn": {
            "name": "mock_async_fn",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "mock_dbclick.mock_callable": {
            "name": "mock_callable",
            "location": 11,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "tests/humbleapp/test_humbleapp.py": {
        "TestFileWatcher.watched_file": {
            "name": "watched_file",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestFileWatcher.checked_file": {
            "name": "checked_file",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "watched_file": []
            }
        },
        "TestFileWatcher.test_first_check_is_treated_as_changed": {
            "name": "test_first_check_is_treated_as_changed",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watched_file": []
            }
        },
        "TestFileWatcher.test_subsequent_check_says_not_changed": {
            "name": "test_subsequent_check_says_not_changed",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_file": []
            }
        },
        "TestFileWatcher.test_check_after_modification_says_file_changed": {
            "name": "test_check_after_modification_says_file_changed",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_file": []
            }
        },
        "TestFileWatcher.test_check_changed_file_when_is_still_open_sayd_file_changed": {
            "name": "test_check_changed_file_when_is_still_open_sayd_file_changed",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_file": []
            }
        },
        "TestFileWatcher.test_check_after_read_says_file_changed": {
            "name": "test_check_after_read_says_file_changed",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_file": []
            }
        },
        "TestFileWatcher.test_file_no_longer_not_exists": {
            "name": "test_file_no_longer_not_exists",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checked_file": []
            }
        },
        "TestFileWatcher.test_file_started_to_exists": {
            "name": "test_file_started_to_exists",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watched_file": []
            }
        },
        "TestHumbleAppConfigParser.setup": {
            "name": "setup",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHumbleAppConfigParser.config_path": {
            "name": "config_path",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHumbleAppConfigParser.test_load_config": {
            "name": "test_load_config",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": []
            }
        },
        "TestHumbleAppConfigParser.config": {
            "name": "config",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "config_path": []
            }
        },
        "TestHumbleAppConfigParser.test_parse_settings": {
            "name": "test_parse_settings",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestHumbleAppConfigParser.test_parse_game_with_partial_info": {
            "name": "test_parse_game_with_partial_info",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "TestHumbleAppConfigParser.test_parse_installed_game": {
            "name": "test_parse_installed_game",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestHumbleAppClient.setup": {
            "name": "setup",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHumbleAppClient.test_get_exe_path": {
            "name": "test_get_exe_path",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHumbleAppClient.test_is_installed_no_exe_path_found": {
            "name": "test_is_installed_no_exe_path_found",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHumbleAppClient.test_is_installed_exe_path_found": {
            "name": "test_is_installed_exe_path_found",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "exe_exists": []
            }
        },
        "TestHumbleAppClient.test_command_handler": {
            "name": "test_command_handler",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        }
    },
    "tests/windows/test_reg_watcher.py": {
        "patch_wrc": {
            "name": "patch_wrc",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "uk_annas_quest": {
            "name": "uk_annas_quest",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "uk_windosill": {
            "name": "uk_windosill",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_uk_display_icon_path": {
            "name": "test_uk_display_icon_path",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uk_local_uninstaller_path": {
            "name": "test_uk_local_uninstaller_path",
            "location": 67,
            "return": [],
            "arguments": {
                "uninstall_string": []
            }
        },
        "test_uk_local_uninstaller_path_empty": {
            "name": "test_uk_local_uninstaller_path_empty",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uk_local_uninstaller_path_msi": {
            "name": "test_uk_local_uninstaller_path_msi",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uk_local_uninstaller_path_other_uninstallers": {
            "name": "test_uk_local_uninstaller_path_other_uninstallers",
            "location": 87,
            "return": [],
            "arguments": {
                "mocker": [],
                "uninstall_string": []
            }
        },
        "test_refresh_uks": {
            "name": "test_refresh_uks",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "uk_annas_quest": [],
                "uk_windosill": [],
                "patch_wrc": []
            }
        },
        "patch_wrc.fn": {
            "name": "fn",
            "location": 17,
            "return": [],
            "arguments": {
                "subkeys": []
            }
        },
        "patch_wrc.fn.mock_get_val": {
            "name": "mock_get_val",
            "location": 18,
            "return": [],
            "arguments": {
                "subkey": [],
                "prop": [],
                "optional": []
            }
        }
    },
    "tests/windows/test_winappfinder.py": {
        "mock_winreg_watcher": {
            "name": "mock_winreg_watcher",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "uk_torchlight2": {
            "name": "uk_torchlight2",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_match_by_key_name": {
            "name": "test_match_by_key_name",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_with_folder_name": {
            "name": "test_match_with_folder_name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_colon_in_name": {
            "name": "test_match_colon_in_name",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_match": {
            "name": "test_no_match",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mock_winreg_watcher.fn": {
            "name": "fn",
            "location": 14,
            "return": [],
            "arguments": {
                "uninstall_keys": []
            }
        }
    }
}
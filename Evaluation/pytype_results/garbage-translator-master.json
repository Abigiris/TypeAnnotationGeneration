{
    "garbage-translator-master/setup.py": {},
    "garbage-translator-master/garbage_translator/fuzzy_searcher.py": {
        "levenshtein_automata": {
            "name": "levenshtein_automata",
            "location": 161,
            "return": [
                "NFA"
            ],
            "arguments": {
                "term": [],
                "k": []
            }
        },
        "SupportsStr.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NFA.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_state": []
            }
        },
        "NFA.start_state": {
            "name": "start_state",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NFA.add_transition": {
            "name": "add_transition",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "input": [],
                "dest": []
            }
        },
        "NFA.add_final_state": {
            "name": "add_final_state",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "NFA.is_final": {
            "name": "is_final",
            "location": 40,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "states": []
            }
        },
        "NFA._expand": {
            "name": "_expand",
            "location": 43,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "_T0@@"
                ]
            }
        },
        "NFA.next_state": {
            "name": "next_state",
            "location": 56,
            "return": [
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "states": [],
                "input": []
            }
        },
        "NFA.get_inputs": {
            "name": "get_inputs",
            "location": 64,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "states": []
            }
        },
        "NFA.to_dfa": {
            "name": "to_dfa",
            "location": 70,
            "return": [
                "DFA"
            ],
            "arguments": {
                "self": []
            }
        },
        "DFA.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_state": []
            }
        },
        "DFA.add_transition": {
            "name": "add_transition",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "input": [],
                "dest": []
            }
        },
        "DFA.set_default_transition": {
            "name": "set_default_transition",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "dest": []
            }
        },
        "DFA.add_final_state": {
            "name": "add_final_state",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DFA.is_final": {
            "name": "is_final",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DFA.next_state": {
            "name": "next_state",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "input": []
            }
        },
        "DFA.next_valid_string": {
            "name": "next_valid_string",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "DFA.find_next_edge": {
            "name": "find_next_edge",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "x": []
            }
        },
        "OrderedIterableCorpus.get_next_smaller": {
            "name": "get_next_smaller",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lookup_string": []
            }
        },
        "OrderedIterableCorpus.strings_to_elements": {
            "name": "strings_to_elements",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "FuzzySearcher.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "FuzzySearcher.search": {
            "name": "search",
            "location": 215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word_string": [],
                "k": []
            }
        }
    },
    "garbage-translator-master/garbage_translator/main.py": {
        "ElasticCorpus.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sorted_stripped_words": [],
                "is_accented_language": [],
                "unaccented_to_accented": [],
                "accented_corpus": []
            }
        },
        "ElasticCorpus._in_corpus": {
            "name": "_in_corpus",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "ElasticCorpus._insert_extra_words": {
            "name": "_insert_extra_words",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inserted_words": []
            }
        },
        "ElasticCorpus._remove_extra_words": {
            "name": "_remove_extra_words",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElasticCorpus.extra_words_inserted": {
            "name": "extra_words_inserted",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "ElasticCorpus.get_next_smaller": {
            "name": "get_next_smaller",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lookup_string": []
            }
        },
        "ElasticCorpus.strings_to_elements": {
            "name": "strings_to_elements",
            "location": 69,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "_T0@@"
                ]
            }
        },
        "ElasticCorpus.convert_stripped_to_accented": {
            "name": "convert_stripped_to_accented",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "CorpusImporter.build_corpus": {
            "name": "build_corpus",
            "location": 87,
            "return": [
                "ElasticCorpus"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "CorpusImporter.import_words": {
            "name": "import_words",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CorpusImporter.is_accented_language": {
            "name": "is_accented_language",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListImporter.import_words": {
            "name": "import_words",
            "location": 122,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "word_list": [
                    "_T0@@"
                ]
            }
        },
        "GarbageTranslator.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "importer_class": []
            }
        },
        "GarbageTranslator.from_list": {
            "name": "from_list",
            "location": 136,
            "return": [
                "_TGarbageTranslator@@GarbageTranslator@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGarbageTranslator]"
                ],
                "corpus": []
            }
        },
        "GarbageTranslator.import_corpus": {
            "name": "import_corpus",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GarbageTranslator.translate": {
            "name": "translate",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "paragraph": [],
                "garbigility": []
            }
        },
        "GarbageTranslator._translate_word": {
            "name": "_translate_word",
            "location": 178,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "regular_word": [],
                "garbigility": []
            }
        }
    },
    "garbage-translator-master/garbage_translator/__init__.py": {},
    "garbage-translator-master/tests/test_apply.py": {
        "test_apply": {
            "name": "test_apply",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "garbage-translator-master/tests/test_elastic_corpus.py": {
        "test_elastic_corpus": {
            "name": "test_elastic_corpus",
            "location": 8,
            "return": [],
            "arguments": {
                "corpus_words": [],
                "extras": []
            }
        }
    },
    "garbage-translator-master/tests/__init__.py": {}
}
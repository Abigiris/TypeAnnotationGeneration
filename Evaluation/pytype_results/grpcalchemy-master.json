{
    "grpcalchemy-master/setup.py": {},
    "grpcalchemy-master/docs/conf.py": {},
    "grpcalchemy-master/grpcalchemy/blueprint.py": {
        "_validate_rpc_method": {
            "name": "_validate_rpc_method",
            "location": 270,
            "return": [],
            "arguments": {
                "funcobj": []
            }
        },
        "grpcmethod": {
            "name": "grpcmethod",
            "location": 346,
            "return": [],
            "arguments": {
                "funcobj": []
            }
        },
        "AbstractRpcMethod.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractRpcMethod.to_rpc_method": {
            "name": "to_rpc_method",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractRpcMethod.handle_call": {
            "name": "handle_call",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "bp": [],
                "message": [],
                "context": []
            }
        },
        "AbstractRpcMethod.request_iterator": {
            "name": "request_iterator",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "UnaryUnaryRpcMethod.to_rpc_method": {
            "name": "to_rpc_method",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryUnaryRpcMethod.handle_call": {
            "name": "handle_call",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "bp": [],
                "message": [],
                "context": []
            }
        },
        "UnaryStreamRpcMethod.to_rpc_method": {
            "name": "to_rpc_method",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryStreamRpcMethod.handle_call": {
            "name": "handle_call",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "bp": [],
                "message": [],
                "context": []
            }
        },
        "StreamUnaryRpcMethod.to_rpc_method": {
            "name": "to_rpc_method",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamUnaryRpcMethod.handle_call": {
            "name": "handle_call",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "bp": [],
                "message": [],
                "context": []
            }
        },
        "StreamStreamRpcMethod.to_rpc_method": {
            "name": "to_rpc_method",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamStreamRpcMethod.handle_call": {
            "name": "handle_call",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "bp": [],
                "message": [],
                "context": []
            }
        },
        "Blueprint.access_service_name": {
            "name": "access_service_name",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Blueprint.access_file_name": {
            "name": "access_file_name",
            "location": 227,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Blueprint.before_request": {
            "name": "before_request",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "Blueprint.after_request": {
            "name": "after_request",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "context": []
            }
        },
        "Blueprint.as_view": {
            "name": "as_view",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "grpcmethod.wrapper": {
            "name": "wrapper",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "origin_request": [],
                "context": []
            }
        },
        "UnaryUnaryRpcMethod.funcobj": {
            "name": "funcobj",
            "location": 78,
            "return": [],
            "arguments": {
                "bp": [],
                "request": [],
                "contest": []
            }
        },
        "UnaryStreamRpcMethod.funcobj": {
            "name": "funcobj",
            "location": 110,
            "return": [],
            "arguments": {
                "bp": [],
                "request": [],
                "contest": []
            }
        },
        "StreamUnaryRpcMethod.funcobj": {
            "name": "funcobj",
            "location": 143,
            "return": [],
            "arguments": {
                "bp": [],
                "request": [],
                "contest": []
            }
        },
        "StreamStreamRpcMethod.funcobj": {
            "name": "funcobj",
            "location": 175,
            "return": [],
            "arguments": {
                "bp": [],
                "request": [],
                "contest": []
            }
        }
    },
    "grpcalchemy-master/grpcalchemy/config.py": {},
    "grpcalchemy-master/grpcalchemy/meta.py": {
        "ServiceMeta.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "rpcs": []
            }
        },
        "ProtoBuffMeta.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpcalchemy-master/grpcalchemy/orm.py": {
        "iter_attributes": {
            "name": "iter_attributes",
            "location": 302,
            "return": [],
            "arguments": {
                "attributes": []
            }
        },
        "DeclarativeMeta.__new__": {
            "name": "__new__",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "clsname": [],
                "bases": [],
                "clsdict": []
            }
        },
        "_gRPCMessageClass.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "__message_self__": []
            }
        },
        "Message.init_grpc_message": {
            "name": "init_grpc_message",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "grpc_message": []
            }
        },
        "Message.message_to_dict": {
            "name": "message_to_dict",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.message_to_json": {
            "name": "message_to_json",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.from_dict": {
            "name": "from_dict",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "BaseField.__get__": {
            "name": "__get__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "BaseField.__set__": {
            "name": "__set__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "BaseField.__str__": {
            "name": "__str__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseField.__set_name__": {
            "name": "__set_name__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "BaseField.to_message_field": {
            "name": "to_message_field",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ReferenceField.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "key_type": []
            }
        },
        "ReferenceField.type": {
            "name": "type",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceField.to_message_field": {
            "name": "to_message_field",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RepeatedField.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "key_type": []
            }
        },
        "RepeatedField.__str__": {
            "name": "__str__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RepeatedField.to_message_field": {
            "name": "to_message_field",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MapField.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "key_type": [],
                "value_type": []
            }
        },
        "MapField.__str__": {
            "name": "__str__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapField.to_message_field": {
            "name": "to_message_field",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DeclarativeMeta.__new__.iter_base_meta": {
            "name": "iter_base_meta",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "grpcalchemy-master/grpcalchemy/server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Server.register_blueprint": {
            "name": "register_blueprint",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "bp_cls": []
            }
        },
        "Server.generate_proto_file": {
            "name": "generate_proto_file",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Server.run": {
            "name": "run",
            "location": 122,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "host": [],
                "port": [],
                "server_credentials": [],
                "block": []
            }
        },
        "Server._run": {
            "name": "_run",
            "location": 179,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "target": [],
                "server_credentials": [],
                "block": []
            }
        },
        "Server.before_server_start": {
            "name": "before_server_start",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.after_server_stop": {
            "name": "after_server_stop",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.start": {
            "name": "start",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.stop": {
            "name": "stop",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "grace": []
            }
        },
        "Server.add_generic_rpc_handlers": {
            "name": "add_generic_rpc_handlers",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "generic_rpc_handlers": []
            }
        },
        "Server.add_insecure_port": {
            "name": "add_insecure_port",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "Server.add_secure_port": {
            "name": "add_secure_port",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "server_credentials": []
            }
        },
        "Server.process_request": {
            "name": "process_request",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "Server.process_response": {
            "name": "process_response",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "context": []
            }
        },
        "Server.__del__": {
            "name": "__del__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.__enter__": {
            "name": "__enter__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.__exit__": {
            "name": "__exit__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Server.app_context": {
            "name": "app_context",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "current_service": [],
                "current_method": [],
                "context": []
            }
        },
        "Server.handle_exception": {
            "name": "handle_exception",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "context": []
            }
        },
        "Server.get_blueprints": {
            "name": "get_blueprints",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpcalchemy-master/grpcalchemy/types.py": {
        "_SupportsLessThan.__lt__": {
            "name": "__lt__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "__other": []
            }
        },
        "Map.clear": {
            "name": "clear",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.pop": {
            "name": "pop",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.get_or_create": {
            "name": "get_or_create",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Map.__delitem__": {
            "name": "__delitem__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Repeated.add": {
            "name": "add",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repeated.append": {
            "name": "append",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Repeated.extend": {
            "name": "extend",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Repeated.insert": {
            "name": "insert",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "Repeated.pop": {
            "name": "pop",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Repeated.remove": {
            "name": "remove",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Repeated.sort": {
            "name": "sort",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repeated.__getitem__": {
            "name": "__getitem__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Repeated.__delitem__": {
            "name": "__delitem__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Repeated.__len__": {
            "name": "__len__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpcalchemy-master/grpcalchemy/utils.py": {
        "make_packages": {
            "name": "make_packages",
            "location": 34,
            "return": [],
            "arguments": {
                "name": [],
                "mode": [],
                "exist_ok": []
            }
        },
        "generate_proto_file": {
            "name": "generate_proto_file",
            "location": 71,
            "return": [],
            "arguments": {
                "template_path_root": [],
                "template_path": [],
                "auto_generate": []
            }
        },
        "add_blueprint_to_server": {
            "name": "add_blueprint_to_server",
            "location": 131,
            "return": [],
            "arguments": {
                "config": [],
                "bp": [],
                "server": []
            }
        },
        "select_address_family": {
            "name": "select_address_family",
            "location": 149,
            "return": [],
            "arguments": {
                "host": []
            }
        },
        "get_sockaddr": {
            "name": "get_sockaddr",
            "location": 171,
            "return": [],
            "arguments": {
                "host": [],
                "port": [],
                "family": []
            }
        },
        "socket_bind_test": {
            "name": "socket_bind_test",
            "location": 187,
            "return": [],
            "arguments": {
                "host": [],
                "port": []
            }
        }
    },
    "grpcalchemy-master/grpcalchemy/__init__.py": {},
    "grpcalchemy-master/installed_protos/__init__.py": {},
    "grpcalchemy-master/installed_protos/v1/api_pb2.py": {},
    "grpcalchemy-master/installed_protos/v1/api_pb2_grpc.py": {
        "add_APIServiceServicer_to_server": {
            "name": "add_APIServiceServicer_to_server",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "APIServiceStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "APIServiceServicer.GetSomething": {
            "name": "GetSomething",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "APIService.GetSomething": {
            "name": "GetSomething",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        }
    },
    "grpcalchemy-master/installed_protos/v1/__init__.py": {},
    "grpcalchemy-master/tests/test_blueprint.py": {
        "BlueprintTestCase.test_init_blueprint": {
            "name": "test_init_blueprint",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method": {
            "name": "test_register_invalid_rpc_method",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_unary_unary_grpcmethod": {
            "name": "test_unary_unary_grpcmethod",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_unary_stream_grpcmethod": {
            "name": "test_unary_stream_grpcmethod",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_stream_unary_grpcmethod": {
            "name": "test_stream_unary_grpcmethod",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_stream_stream_grpcmethod": {
            "name": "test_stream_stream_grpcmethod",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlueprintTestCase.test_unary_unary_grpcmethod.UnaryUnary": {
            "name": "UnaryUnary",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_unary_stream_grpcmethod.UnaryStream": {
            "name": "UnaryStream",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_stream_unary_grpcmethod.StreamUnary": {
            "name": "StreamUnary",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_stream_stream_grpcmethod.StreamStream": {
            "name": "StreamStream",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_init_blueprint.FooService.GetSomething": {
            "name": "GetSomething",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method.test_without_typing": {
            "name": "test_without_typing",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method.test_one_args": {
            "name": "test_one_args",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method.test_more_than_two_args": {
            "name": "test_more_than_two_args",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": [],
                "test": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method.test_message_one": {
            "name": "test_message_one",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "BlueprintTestCase.test_register_invalid_rpc_method.test_message_two": {
            "name": "test_message_two",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "grpcalchemy-master/tests/test_grpcalchemy.py": {
        "TestGRPCAlchemy.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGRPCAlchemy.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGRPCAlchemy.generate_proto_file": {
            "name": "generate_proto_file",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "grpcalchemy-master/tests/test_meta.py": {
        "MetaTestCase.test_single_message": {
            "name": "test_single_message",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTestCase.test_single_service": {
            "name": "test_single_service",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTestCase.test_multiple_messages": {
            "name": "test_multiple_messages",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTestCase.test_multiple_services": {
            "name": "test_multiple_services",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaTestCase.test_single_service.TestService.test_message": {
            "name": "test_message",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MetaTestCase.test_multiple_services.TestService.access_service_name": {
            "name": "access_service_name",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MetaTestCase.test_multiple_services.TestService.test_message_one": {
            "name": "test_message_one",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MetaTestCase.test_multiple_services.TestService.test_message_two": {
            "name": "test_message_two",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "MetaTestCase.test_multiple_services.TestServiceTmp.access_service_name": {
            "name": "access_service_name",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MetaTestCase.test_multiple_services.TestServiceTmp.test_message_three": {
            "name": "test_message_three",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "grpcalchemy-master/tests/test_multiple_process_server.py": {
        "MultipleProcessServerTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "unittest_self": []
            }
        },
        "MultipleProcessServerTestCase.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultipleProcessServerTestCase._send_request": {
            "name": "_send_request",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultipleProcessServerTestCase.test_multiple_processor": {
            "name": "test_multiple_processor",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultipleProcessServerTestCase.setUp.TestService.Sleep": {
            "name": "Sleep",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "grpcalchemy-master/tests/test_orm.py": {
        "ORMTestCase.test_message_with_default_filename": {
            "name": "test_message_with_default_filename",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORMTestCase.test_message_with_specific_filename": {
            "name": "test_message_with_specific_filename",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORMTestCase.test_field_str": {
            "name": "test_field_str",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ORMTestCase.test_composite_message": {
            "name": "test_composite_message",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpcalchemy-master/tests/test_server.py": {
        "ServerTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "unittest_self": []
            }
        },
        "ServerTestCase.tearDown": {
            "name": "tearDown",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_server": {
            "name": "test_server",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstalledProtoServerTestCase.setUp": {
            "name": "setUp",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstalledProtoServerTestCase.tearDown": {
            "name": "tearDown",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstalledProtoServerTestCase.test_server_with_installed_proto": {
            "name": "test_server_with_installed_proto",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.setUp.AppService.before_server_start": {
            "name": "before_server_start",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.setUp.AppService.after_server_stop": {
            "name": "after_server_stop",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.setUp.AppService.process_request": {
            "name": "process_request",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.AppService.process_response": {
            "name": "process_response",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.AppService.app_context": {
            "name": "app_context",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "current_service": [],
                "current_method": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.AppService.get_blueprints": {
            "name": "get_blueprints",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.UnaryUnary": {
            "name": "UnaryUnary",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.UnaryStream": {
            "name": "UnaryStream",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.StreamUnary": {
            "name": "StreamUnary",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.StreamStream": {
            "name": "StreamStream",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.before_request": {
            "name": "before_request",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ServerTestCase.setUp.BlueprintService.after_request": {
            "name": "after_request",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "context": []
            }
        },
        "InstalledProtoServerTestCase.setUp.APIService.access_file_name": {
            "name": "access_file_name",
            "location": 224,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "InstalledProtoServerTestCase.setUp.APIService.GetSomething": {
            "name": "GetSomething",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "grpcalchemy-master/tests/test_utils.py": {
        "UtilsTestCase.test_socket_bind_test_INET": {
            "name": "test_socket_bind_test_INET",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_socket_bind_test_INET6": {
            "name": "test_socket_bind_test_INET6",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_socket_bind_test_UNIX": {
            "name": "test_socket_bind_test_UNIX",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_generate_proto_file_automatically": {
            "name": "test_generate_proto_file_automatically",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpcalchemy-master/tests/__init__.py": {}
}
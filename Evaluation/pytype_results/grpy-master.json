{
    "grpy-master/make.py": {
        "exec_subprocess_no_report": {
            "name": "exec_subprocess_no_report",
            "location": 37,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "args": [],
                "verbose": []
            }
        },
        "exec_subprocess": {
            "name": "exec_subprocess",
            "location": 48,
            "return": [
                "subprocess.CompletedProcess"
            ],
            "arguments": {
                "args": [],
                "verbose": []
            }
        },
        "run_subprocess": {
            "name": "run_subprocess",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "verbose": []
            }
        },
        "lint_formatting": {
            "name": "lint_formatting",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_paths": [],
                "verbose": []
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_paths": [],
                "verbose": []
            }
        },
        "run_coverage": {
            "name": "run_coverage",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "paths": [],
                "test_directory": [],
                "verbose": []
            }
        },
        "main": {
            "name": "main",
            "location": 108,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 119,
            "return": [],
            "arguments": {
                "ctx": [],
                "force": [],
                "quiet": [],
                "verbose": []
            }
        },
        "types": {
            "name": "types",
            "location": 149,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 174,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 194,
            "return": [],
            "arguments": {
                "ctx": [],
                "directory": [],
                "verbose": []
            }
        },
        "valid_directory": {
            "name": "valid_directory",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory_path": []
            }
        },
        "collect_files_and_packages": {
            "name": "collect_files_and_packages",
            "location": 224,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {}
        },
        "full_coverage": {
            "name": "full_coverage",
            "location": 251,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "outdated": {
            "name": "outdated",
            "location": 266,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "check": {
            "name": "check",
            "location": 275,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "full_check": {
            "name": "full_check",
            "location": 285,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "update_w3css": {
            "name": "update_w3css",
            "location": 295,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "grpy-master/setup.py": {
        "open_local": {
            "name": "open_local",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [],
                "mode": []
            }
        },
        "execute_command": {
            "name": "execute_command",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_requirements_txt": {
            "name": "create_requirements_txt",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_requires": {
            "name": "read_requires",
            "location": 66,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "create_version_txt": {
            "name": "create_version_txt",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/wsgi.py": {},
    "grpy-master/deploy/wsgi_gunicorn.py": {
        "create_application": {
            "name": "create_application",
            "location": 27,
            "return": [
                "grpy.web.app.GrpyApp"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/version.py": {
        "get_version_file": {
            "name": "get_version_file",
            "location": 38,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [],
                "max_level": []
            }
        },
        "read_version_file": {
            "name": "read_version_file",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "max_level": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 64,
            "return": [
                "Version"
            ],
            "arguments": {
                "lines": []
            }
        }
    },
    "grpy-master/grpy/__init__.py": {},
    "grpy-master/grpy/core/logic.py": {
        "make_code": {
            "name": "make_code",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "grouping": [],
                "unique": []
            }
        },
        "len_groups": {
            "name": "len_groups",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "groups": []
            }
        },
        "remove_from_groups": {
            "name": "remove_from_groups",
            "location": 60,
            "return": [
                "tuple"
            ],
            "arguments": {
                "groups": [],
                "user_keys": []
            }
        },
        "sort_groups": {
            "name": "sort_groups",
            "location": 76,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "groups": []
            }
        }
    },
    "grpy-master/grpy/core/models.py": {
        "KeyType.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hex": [],
                "bytes_le": [],
                "int": [],
                "key": []
            }
        },
        "KeyType.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KeyType.__hash__": {
            "name": "__hash__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_host": {
            "name": "is_host",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_admin": {
            "name": "is_admin",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.validate": {
            "name": "validate",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grouping._validate_date": {
            "name": "_validate_date",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grouping.validate": {
            "name": "validate",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grouping.get_state": {
            "name": "get_state",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grouping.can_register": {
            "name": "can_register",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registration.validate": {
            "name": "validate",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/core/preferences.py": {
        "get_preferences": {
            "name": "get_preferences",
            "location": 37,
            "return": [
                "Optional[Type[grpy.core.models.UserPreferences]]"
            ],
            "arguments": {
                "code": []
            }
        },
        "get_code": {
            "name": "get_code",
            "location": 42,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "preferences": []
            }
        },
        "register_preferences": {
            "name": "register_preferences",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "preferences_class": []
            }
        }
    },
    "grpy-master/grpy/core/utils.py": {
        "now": {
            "name": "now",
            "location": 29,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "LazyList.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": []
            }
        },
        "LazyList._consume": {
            "name": "_consume",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyList.__bool__": {
            "name": "__bool__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyList.__len__": {
            "name": "__len__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyList.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [
                "LazyList"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyList.__next__": {
            "name": "__next__",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/core/__init__.py": {},
    "grpy-master/grpy/core/test/test_logic.py": {
        "check_code": {
            "name": "check_code",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "prev_code": [],
                "grouping": [],
                "unique": []
            }
        },
        "test_make_code": {
            "name": "test_make_code",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_groups": {
            "name": "_groups",
            "location": 62,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "spec": []
            }
        },
        "test__greoups": {
            "name": "test__greoups",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len_groups": {
            "name": "test_len_groups",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_from_groups": {
            "name": "test_remove_from_groups",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_groups": {
            "name": "test_sort_groups",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/core/test/test_models.py": {
        "test_keytype_operations": {
            "name": "test_keytype_operations",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_is_active": {
            "name": "test_user_is_active",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_is_host": {
            "name": "test_user_is_host",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_is_admin": {
            "name": "test_user_is_admin",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_validation": {
            "name": "test_user_validation",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_user_validation_failed": {
            "name": "test_user_validation_failed",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grouping_validation": {
            "name": "test_grouping_validation",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grouping_validation_failed": {
            "name": "test_grouping_validation_failed",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_state": {
            "name": "test_get_state",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_register": {
            "name": "test_can_register",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registration_validation": {
            "name": "test_registration_validation",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registration_validation_failed": {
            "name": "test_registration_validation_failed",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/core/test/test_preferences.py": {
        "test_valid_preferences": {
            "name": "test_valid_preferences",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_preferences": {
            "name": "test_invalid_preferences",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_code": {
            "name": "test_invalid_code",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_preferences": {
            "name": "test_register_preferences",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_registrations": {
            "name": "test_invalid_registrations",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/core/test/test_utils.py": {
        "test_now": {
            "name": "test_now",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_list_bool": {
            "name": "test_lazy_list_bool",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_lazy_list_len": {
            "name": "test_lazy_list_len",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_list_iterator": {
            "name": "test_lazy_list_iterator",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazy_list_bool_next": {
            "name": "test_lazy_list_bool_next",
            "location": 110,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "MockIterator.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_count": []
            }
        },
        "MockIterator.__iter__": {
            "name": "__iter__",
            "location": 47,
            "return": [
                "_TMockIterator@@MockIterator@@"
            ],
            "arguments": {
                "self": [
                    "_TMockIterator@@MockIterator@@"
                ]
            }
        },
        "MockIterator.__next__": {
            "name": "__next__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/core/test/__init__.py": {},
    "grpy-master/grpy/policies/genetic.py": {
        "build_genome": {
            "name": "build_genome",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "users": [],
                "sizes": []
            }
        },
        "iter_genome_count": {
            "name": "iter_genome_count",
            "location": 62,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "genome": [],
                "count": []
            }
        },
        "iter_genome_set": {
            "name": "iter_genome_set",
            "location": 72,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "genome": [],
                "ignore_members": []
            }
        },
        "crossover_genomes": {
            "name": "crossover_genomes",
            "location": 80,
            "return": [
                "Tuple[(bool, Union[(List[list], _T0)])]"
            ],
            "arguments": {
                "genome_1": [
                    "_T0@@"
                ],
                "genome_2": [],
                "user_count": []
            }
        },
        "mutate_genome": {
            "name": "mutate_genome",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "genome": []
            }
        },
        "build_initial_population_genomes": {
            "name": "build_initial_population_genomes",
            "location": 118,
            "return": [
                "List[List[list]]"
            ],
            "arguments": {
                "population_size": [],
                "users": [],
                "sizes": []
            }
        },
        "build_initial_population": {
            "name": "build_initial_population",
            "location": 129,
            "return": [
                "list"
            ],
            "arguments": {
                "population_size": [],
                "users": [],
                "sizes": [],
                "rating_func": [],
                "rating_data": []
            }
        },
        "mutate_population": {
            "name": "mutate_population",
            "location": 141,
            "return": [
                "List[Tuple[(list, Any)]]"
            ],
            "arguments": {
                "population": [],
                "num_mutation": []
            }
        },
        "crossover_population": {
            "name": "crossover_population",
            "location": 152,
            "return": [
                "list"
            ],
            "arguments": {
                "population": [],
                "num_crossover": [],
                "user_count": []
            }
        },
        "reduce_population": {
            "name": "reduce_population",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "population": [],
                "population_size": []
            }
        },
        "trivial_groups": {
            "name": "trivial_groups",
            "location": 179,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "users": [],
                "num_groups": []
            }
        },
        "best_groups": {
            "name": "best_groups",
            "location": 187,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "population": [],
                "num_groups": []
            }
        },
        "generic_genetic_policy": {
            "name": "generic_genetic_policy",
            "location": 230,
            "return": [
                "tuple"
            ],
            "arguments": {
                "users": [],
                "sizes": [],
                "rating_func": [],
                "rating_data": [],
                "stop_strategy": []
            }
        },
        "StopStrategy.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_rating": [],
                "max_rounds": [],
                "max_best_rounds": [],
                "max_seconds": []
            }
        },
        "StopStrategy.start": {
            "name": "start",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopStrategy.should_continue": {
            "name": "should_continue",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rating": []
            }
        }
    },
    "grpy-master/grpy/policies/preferred.py": {
        "build_preferred_rating_data": {
            "name": "build_preferred_rating_data",
            "location": 40,
            "return": [
                "Dict[(grpy.core.models.UserKey, Set[grpy.core.models.UserKey])]"
            ],
            "arguments": {
                "data": [],
                "max_preferred": []
            }
        },
        "preferred_rating_func": {
            "name": "preferred_rating_func",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "genome": [],
                "data": []
            }
        },
        "preferred_policy": {
            "name": "preferred_policy",
            "location": 67,
            "return": [
                "tuple"
            ],
            "arguments": {
                "max_preferred": [],
                "data": [],
                "max_group_size": [],
                "member_reserve": []
            }
        }
    },
    "grpy-master/grpy/policies/simple_belbin.py": {
        "build_simple_belbin_rating_data": {
            "name": "build_simple_belbin_rating_data",
            "location": 51,
            "return": [
                "Dict[(grpy.core.models.UserKey, Any)]"
            ],
            "arguments": {
                "data": []
            }
        },
        "simple_belbin_rating_func": {
            "name": "simple_belbin_rating_func",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "genome": [],
                "data": []
            }
        },
        "simple_belbin_policy": {
            "name": "simple_belbin_policy",
            "location": 78,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [],
                "max_group_size": [],
                "member_reserve": []
            }
        }
    },
    "grpy-master/grpy/policies/sizes.py": {
        "group_sizes": {
            "name": "group_sizes",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "num_participants": [],
                "max_group_size": [],
                "member_reserve": []
            }
        }
    },
    "grpy-master/grpy/policies/__init__.py": {
        "_build_groups": {
            "name": "_build_groups",
            "location": 32,
            "return": [
                "Tuple[(FrozenSet[grpy.core.models.UserKey], ...)]"
            ],
            "arguments": {
                "users": [],
                "max_group_size": [],
                "member_reserve": []
            }
        },
        "identity_policy": {
            "name": "identity_policy",
            "location": 43,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "data": [],
                "max_group_size": [],
                "member_reserve": []
            }
        },
        "random_policy": {
            "name": "random_policy",
            "location": 50,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "data": [],
                "max_group_size": [],
                "member_reserve": []
            }
        },
        "get_policy": {
            "name": "get_policy",
            "location": 68,
            "return": [
                "Union[(Callable[([Any, Any, Any], Any)], functools.partial[tuple])]"
            ],
            "arguments": {
                "code": []
            }
        }
    },
    "grpy-master/grpy/policies/test/test_genetic.py": {
        "userkeys": {
            "name": "userkeys",
            "location": 31,
            "return": [
                "List[grpy.core.models.UserKey]"
            ],
            "arguments": {
                "count": []
            }
        },
        "test_build_genome": {
            "name": "test_build_genome",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_genome_count": {
            "name": "test_iter_genome_count",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_genome_set": {
            "name": "test_iter_genome_set",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stop_strategy": {
            "name": "test_stop_strategy",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rating_func": {
            "name": "rating_func",
            "location": 85,
            "return": [
                "float"
            ],
            "arguments": {
                "genome": [],
                "_data": []
            }
        },
        "assert_best_groups": {
            "name": "assert_best_groups",
            "location": 97,
            "return": [
                "tuple"
            ],
            "arguments": {
                "user_count": [],
                "sizes": []
            }
        },
        "test_genetic_simple": {
            "name": "test_genetic_simple",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_genetic": {
            "name": "test_genetic",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_genetic": {
            "name": "test_random_genetic",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/policies/test/test_policies.py": {
        "assert_members_and_sizes": {
            "name": "assert_members_and_sizes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [],
                "users": [],
                "max_group_size": []
            }
        },
        "test_identity_policy": {
            "name": "test_identity_policy",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_policy": {
            "name": "test_random_policy",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_policy": {
            "name": "test_create_policy",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/policies/test/test_preferred.py": {
        "_create_preferred_preferences": {
            "name": "_create_preferred_preferences",
            "location": 31,
            "return": [
                "Dict[(grpy.core.models.User, grpy.core.models.UserPreferences)]"
            ],
            "arguments": {
                "max_preferred": []
            }
        },
        "test_build_preferred_rating_data": {
            "name": "test_build_preferred_rating_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_preferred_policy": {
            "name": "test_single_preferred_policy",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "grpy-master/grpy/policies/test/test_simple_belbin.py": {
        "_create_simple_belbin_preferences": {
            "name": "_create_simple_belbin_preferences",
            "location": 31,
            "return": [
                "Dict[(grpy.core.models.User, grpy.core.models.UserPreferences)]"
            ],
            "arguments": {}
        },
        "test_build_simple_belbin_rating_data": {
            "name": "test_build_simple_belbin_rating_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_belbin_policy": {
            "name": "test_simple_belbin_policy",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/policies/test/test_sizes.py": {
        "test_group_sizes": {
            "name": "test_group_sizes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_sizes_error": {
            "name": "test_group_sizes_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/policies/test/__init__.py": {},
    "grpy-master/grpy/repo/base.py": {
        "Connection.get_messages": {
            "name": "get_messages",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.has_errors": {
            "name": "has_errors",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 59,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "Connection.set_user": {
            "name": "set_user",
            "location": 63,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Connection.get_user": {
            "name": "get_user",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "Connection.get_user_by_ident": {
            "name": "get_user_by_ident",
            "location": 71,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "Connection.iter_users": {
            "name": "iter_users",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "Connection.delete_user": {
            "name": "delete_user",
            "location": 98,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "Connection.set_grouping": {
            "name": "set_grouping",
            "location": 102,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping": []
            }
        },
        "Connection.get_grouping": {
            "name": "get_grouping",
            "location": 106,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "Connection.get_grouping_by_code": {
            "name": "get_grouping_by_code",
            "location": 110,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "Connection.iter_groupings": {
            "name": "iter_groupings",
            "location": 114,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "Connection.delete_grouping": {
            "name": "delete_grouping",
            "location": 126,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "Connection.set_registration": {
            "name": "set_registration",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "registration": []
            }
        },
        "Connection.get_registration": {
            "name": "get_registration",
            "location": 134,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "Connection.count_registrations_by_grouping": {
            "name": "count_registrations_by_grouping",
            "location": 140,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "Connection.delete_registration": {
            "name": "delete_registration",
            "location": 144,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "Connection.delete_registrations": {
            "name": "delete_registrations",
            "location": 148,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "Connection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 152,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "Connection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 159,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "Connection.set_groups": {
            "name": "set_groups",
            "location": 166,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "Connection.get_groups": {
            "name": "get_groups",
            "location": 170,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "Connection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "Repository.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_url": []
            }
        },
        "Repository.url": {
            "name": "url",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repository.can_connect": {
            "name": "can_connect",
            "location": 200,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.initialize": {
            "name": "initialize",
            "location": 204,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.create": {
            "name": "create",
            "location": 208,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/conftest.py": {
        "_get_request_param": {
            "name": "_get_request_param",
            "location": 37,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "connection": {
            "name": "connection",
            "location": 53,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "grouping": {
            "name": "grouping",
            "location": 86,
            "return": [],
            "arguments": {
                "connection": []
            }
        }
    },
    "grpy-master/grpy/repo/dummy.py": {
        "DummyRepository.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_url": [],
                "reason": []
            }
        },
        "DummyRepository.can_connect": {
            "name": "can_connect",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyRepository.initialize": {
            "name": "initialize",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyRepository.create": {
            "name": "create",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/logic.py": {
        "has_user": {
            "name": "has_user",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": []
            }
        },
        "set_grouping_new_code": {
            "name": "set_grouping_new_code",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "groupings_for_host": {
            "name": "groupings_for_host",
            "location": 56,
            "return": [
                "Tuple[(List[Tuple[(Any, Any)]], list)]"
            ],
            "arguments": {
                "connection": [],
                "host_key": []
            }
        },
        "get_grouping_state": {
            "name": "get_grouping_state",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": [],
                "grouping_key": []
            }
        },
        "encode_preferences": {
            "name": "encode_preferences",
            "location": 103,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "preferences": []
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 117,
            "return": [
                "Union[(tuple, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "decode_preferences": {
            "name": "decode_preferences",
            "location": 124,
            "return": [
                "Optional[grpy.core.models.UserPreferences]"
            ],
            "arguments": {
                "encoded": []
            }
        }
    },
    "grpy-master/grpy/repo/models.py": {},
    "grpy-master/grpy/repo/ram.py": {
        "RamRepositoryState.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamRepositoryState.next_int": {
            "name": "next_int",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamRepository.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_url": []
            }
        },
        "RamRepository.can_connect": {
            "name": "can_connect",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamRepository.initialize": {
            "name": "initialize",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamRepository.create": {
            "name": "create",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamConnection.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RamConnection.get_messages": {
            "name": "get_messages",
            "location": 83,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamConnection.has_errors": {
            "name": "has_errors",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RamConnection.close": {
            "name": "close",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_success": []
            }
        },
        "RamConnection.set_user": {
            "name": "set_user",
            "location": 95,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "_T0@@"
                ]
            }
        },
        "RamConnection.get_user": {
            "name": "get_user",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "RamConnection.get_user_by_ident": {
            "name": "get_user_by_ident",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "RamConnection.iter_users": {
            "name": "iter_users",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "RamConnection.delete_user": {
            "name": "delete_user",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "RamConnection.set_grouping": {
            "name": "set_grouping",
            "location": 136,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "grouping": [
                    "_T0@@"
                ]
            }
        },
        "RamConnection.get_grouping": {
            "name": "get_grouping",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "RamConnection.get_grouping_by_code": {
            "name": "get_grouping_by_code",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "RamConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "RamConnection.delete_grouping": {
            "name": "delete_grouping",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "RamConnection.set_registration": {
            "name": "set_registration",
            "location": 179,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "registration": [
                    "_T0@@"
                ]
            }
        },
        "RamConnection.get_registration": {
            "name": "get_registration",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "RamConnection.count_registrations_by_grouping": {
            "name": "count_registrations_by_grouping",
            "location": 191,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "RamConnection.delete_registration": {
            "name": "delete_registration",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "RamConnection.delete_registrations": {
            "name": "delete_registrations",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "RamConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 211,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "RamConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 219,
            "return": [
                "Generator[(grpy.repo.models.UserRegistration, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "RamConnection.set_groups": {
            "name": "set_groups",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "RamConnection.get_groups": {
            "name": "get_groups",
            "location": 232,
            "return": [
                "Tuple[(FrozenSet[grpy.core.models.UserKey], ...)]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "RamConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 236,
            "return": [
                "List[grpy.repo.models.UserGroup]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        }
    },
    "grpy-master/grpy/repo/sqlite.py": {
        "relop_clause": {
            "name": "relop_clause",
            "location": 534,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "field": [],
                "relop": [],
                "value": [],
                "or_null": []
            }
        },
        "where_clause": {
            "name": "where_clause",
            "location": 546,
            "return": [
                "Tuple[(str, list)]"
            ],
            "arguments": {
                "where": [],
                "nullable_fields": [],
                "no_where": []
            }
        },
        "order_clause": {
            "name": "order_clause",
            "location": 574,
            "return": [
                "str"
            ],
            "arguments": {
                "order": []
            }
        },
        "SqliteRepository.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository_url": []
            }
        },
        "SqliteRepository._connect": {
            "name": "_connect",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteRepository.can_connect": {
            "name": "can_connect",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteRepository.initialize": {
            "name": "initialize",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteRepository.create": {
            "name": "create",
            "location": 160,
            "return": [
                "SqliteConnection"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteConnection.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "SqliteConnection._add_message": {
            "name": "_add_message",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [],
                "text": []
            }
        },
        "SqliteConnection.get_messages": {
            "name": "get_messages",
            "location": 179,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteConnection.has_errors": {
            "name": "has_errors",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteConnection.close": {
            "name": "close",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "SqliteConnection._execute": {
            "name": "_execute",
            "location": 197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sql": [],
                "values": []
            }
        },
        "SqliteConnection.set_user": {
            "name": "set_user",
            "location": 204,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "_T0@@"
                ]
            }
        },
        "SqliteConnection.get_user": {
            "name": "get_user",
            "location": 234,
            "return": [
                "Optional[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "SqliteConnection.get_user_by_ident": {
            "name": "get_user_by_ident",
            "location": 242,
            "return": [
                "Optional[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "SqliteConnection.iter_users": {
            "name": "iter_users",
            "location": 250,
            "return": [
                "List[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "SqliteConnection.delete_user": {
            "name": "delete_user",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "SqliteConnection.set_grouping": {
            "name": "set_grouping",
            "location": 270,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "grouping": [
                    "_T0@@"
                ]
            }
        },
        "SqliteConnection.get_grouping": {
            "name": "get_grouping",
            "location": 309,
            "return": [
                "Optional[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "SqliteConnection.get_grouping_by_code": {
            "name": "get_grouping_by_code",
            "location": 321,
            "return": [
                "Optional[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "SqliteConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 333,
            "return": [
                "List[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "SqliteConnection.delete_grouping": {
            "name": "delete_grouping",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "SqliteConnection.set_registration": {
            "name": "set_registration",
            "location": 354,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "registration": [
                    "_T0@@"
                ]
            }
        },
        "SqliteConnection.get_registration": {
            "name": "get_registration",
            "location": 380,
            "return": [
                "Optional[grpy.core.models.Registration]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "SqliteConnection.count_registrations_by_grouping": {
            "name": "count_registrations_by_grouping",
            "location": 395,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "SqliteConnection.delete_registration": {
            "name": "delete_registration",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "SqliteConnection.delete_registrations": {
            "name": "delete_registrations",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "SqliteConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 415,
            "return": [
                "List[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "SqliteConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 433,
            "return": [
                "List[grpy.repo.models.UserRegistration]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "SqliteConnection.set_groups": {
            "name": "set_groups",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "SqliteConnection.get_groups": {
            "name": "get_groups",
            "location": 472,
            "return": [
                "Tuple[(frozenset, ...)]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "SqliteConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 492,
            "return": [
                "List[grpy.repo.models.UserGroup]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "SqliteMemoryConnection.close": {
            "name": "close",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_success": []
            }
        }
    },
    "grpy-master/grpy/repo/__init__.py": {
        "create_repository": {
            "name": "create_repository",
            "location": 37,
            "return": [
                "grpy.repo.proxies.ProxyRepository"
            ],
            "arguments": {
                "repository_url": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/algebra.py": {
        "process_where": {
            "name": "process_where",
            "location": 128,
            "return": [],
            "arguments": {
                "result": [],
                "where": []
            }
        },
        "_value_to_sort": {
            "name": "_value_to_sort",
            "location": 141,
            "return": [],
            "arguments": {
                "obj": [],
                "name": []
            }
        },
        "process_order": {
            "name": "process_order",
            "location": 149,
            "return": [],
            "arguments": {
                "result": [],
                "order": []
            }
        },
        "process_where_order": {
            "name": "process_where_order",
            "location": 172,
            "return": [],
            "arguments": {
                "result": [],
                "where": [],
                "order": []
            }
        },
        "AlgebraConnection.iter_users": {
            "name": "iter_users",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "AlgebraConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "AlgebraConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "AlgebraConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "AlgebraConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "WherePredicate.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "where_op": [],
                "filter_value": []
            }
        },
        "WherePredicate.pred": {
            "name": "pred",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WherePredicate.eq_pred": {
            "name": "eq_pred",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WherePredicate.ne_pred": {
            "name": "ne_pred",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WherePredicate.lt_pred": {
            "name": "lt_pred",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WherePredicate.le_pred": {
            "name": "le_pred",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WherePredicate.ge_pred": {
            "name": "ge_pred",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WherePredicate.gt_pred": {
            "name": "gt_pred",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/base.py": {
        "BaseProxyConnection.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "BaseProxyConnection.get_messages": {
            "name": "get_messages",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxyConnection.has_errors": {
            "name": "has_errors",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProxyConnection.close": {
            "name": "close",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "BaseProxyConnection.set_user": {
            "name": "set_user",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "BaseProxyConnection.get_user": {
            "name": "get_user",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "BaseProxyConnection.get_user_by_ident": {
            "name": "get_user_by_ident",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "BaseProxyConnection.iter_users": {
            "name": "iter_users",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "BaseProxyConnection.delete_user": {
            "name": "delete_user",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "BaseProxyConnection.set_grouping": {
            "name": "set_grouping",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping": []
            }
        },
        "BaseProxyConnection.get_grouping": {
            "name": "get_grouping",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "BaseProxyConnection.get_grouping_by_code": {
            "name": "get_grouping_by_code",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "BaseProxyConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "BaseProxyConnection.delete_grouping": {
            "name": "delete_grouping",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "BaseProxyConnection.set_registration": {
            "name": "set_registration",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "registration": []
            }
        },
        "BaseProxyConnection.get_registration": {
            "name": "get_registration",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "BaseProxyConnection.count_registrations_by_grouping": {
            "name": "count_registrations_by_grouping",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "BaseProxyConnection.delete_registration": {
            "name": "delete_registration",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "BaseProxyConnection.delete_registrations": {
            "name": "delete_registrations",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "BaseProxyConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "BaseProxyConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "BaseProxyConnection.set_groups": {
            "name": "set_groups",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "BaseProxyConnection.get_groups": {
            "name": "get_groups",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "BaseProxyConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/check.py": {
        "ValidatingProxyConnection.set_user": {
            "name": "set_user",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "ValidatingProxyConnection.set_grouping": {
            "name": "set_grouping",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping": []
            }
        },
        "ValidatingProxyConnection.set_registration": {
            "name": "set_registration",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "registration": []
            }
        },
        "ValidatingProxyConnection.set_groups": {
            "name": "set_groups",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "CatchingProxyConnection.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "CatchingProxyConnection._add_message": {
            "name": "_add_message",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [],
                "text": [],
                "exception": []
            }
        },
        "CatchingProxyConnection._filter": {
            "name": "_filter",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "function": [],
                "default": []
            }
        },
        "CatchingProxyConnection.get_messages": {
            "name": "get_messages",
            "location": 107,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatchingProxyConnection.has_errors": {
            "name": "has_errors",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/filter.py": {
        "FilterProxyConnection.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "FilterProxyConnection._filter": {
            "name": "_filter",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "function": [],
                "_default": []
            }
        },
        "FilterProxyConnection.get_messages": {
            "name": "get_messages",
            "location": 52,
            "return": [
                "Sequence[grpy.repo.base.Message]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterProxyConnection.has_errors": {
            "name": "has_errors",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterProxyConnection.close": {
            "name": "close",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": []
            }
        },
        "FilterProxyConnection.set_user": {
            "name": "set_user",
            "location": 64,
            "return": [
                "grpy.core.models.User"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "FilterProxyConnection.get_user": {
            "name": "get_user",
            "location": 68,
            "return": [
                "Optional[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "FilterProxyConnection.get_user_by_ident": {
            "name": "get_user_by_ident",
            "location": 72,
            "return": [
                "Optional[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "ident": []
            }
        },
        "FilterProxyConnection.iter_users": {
            "name": "iter_users",
            "location": 77,
            "return": [
                "Iterable[grpy.core.models.User]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "FilterProxyConnection.delete_user": {
            "name": "delete_user",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "FilterProxyConnection.set_grouping": {
            "name": "set_grouping",
            "location": 89,
            "return": [
                "grpy.core.models.Grouping"
            ],
            "arguments": {
                "self": [],
                "grouping": []
            }
        },
        "FilterProxyConnection.get_grouping": {
            "name": "get_grouping",
            "location": 94,
            "return": [
                "Optional[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "FilterProxyConnection.get_grouping_by_code": {
            "name": "get_grouping_by_code",
            "location": 99,
            "return": [
                "Optional[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "FilterProxyConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 104,
            "return": [
                "Iterable[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "FilterProxyConnection.delete_grouping": {
            "name": "delete_grouping",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "FilterProxyConnection.set_registration": {
            "name": "set_registration",
            "location": 116,
            "return": [
                "grpy.core.models.Registration"
            ],
            "arguments": {
                "self": [],
                "registration": []
            }
        },
        "FilterProxyConnection.get_registration": {
            "name": "get_registration",
            "location": 121,
            "return": [
                "Optional[grpy.core.models.Registration]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "FilterProxyConnection.count_registrations_by_grouping": {
            "name": "count_registrations_by_grouping",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "FilterProxyConnection.delete_registration": {
            "name": "delete_registration",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "user_key": []
            }
        },
        "FilterProxyConnection.delete_registrations": {
            "name": "delete_registrations",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "FilterProxyConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 141,
            "return": [
                "Iterable[grpy.core.models.Grouping]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "FilterProxyConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 149,
            "return": [
                "Iterable[grpy.repo.models.UserRegistration]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "FilterProxyConnection.set_groups": {
            "name": "set_groups",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "groups": []
            }
        },
        "FilterProxyConnection.get_groups": {
            "name": "get_groups",
            "location": 162,
            "return": [
                "Tuple[(FrozenSet[grpy.core.models.UserKey], ...)]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": []
            }
        },
        "FilterProxyConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 166,
            "return": [
                "Iterable[grpy.repo.models.UserGroup]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/__init__.py": {
        "ProxyRepository.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "ProxyRepository.can_connect": {
            "name": "can_connect",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRepository.initialize": {
            "name": "initialize",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRepository.create": {
            "name": "create",
            "location": 42,
            "return": [
                "grpy.repo.proxies.check.CatchingProxyConnection"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/test_algebra.py": {
        "test_ensure_iter_overwritten": {
            "name": "test_ensure_iter_overwritten",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_connection": {
            "name": "get_connection",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "with_spec": []
            }
        },
        "test_iter_users_where": {
            "name": "test_iter_users_where",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_users_order": {
            "name": "test_iter_users_order",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_users_where_order": {
            "name": "test_iter_users_where_order",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_groupings": {
            "name": "test_iter_groupings",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_groupings_by_user": {
            "name": "test_iter_groupings_by_user",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_user_registrations_by_grouping": {
            "name": "test_iter_user_registrations_by_grouping",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_groups_by_user": {
            "name": "test_iter_groups_by_user",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockConnection.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "with_spec": []
            }
        },
        "MockConnection.iter_users": {
            "name": "iter_users",
            "location": 50,
            "return": [
                "Tuple[(grpy.core.models.User, grpy.core.models.User, grpy.core.models.User, grpy.core.models.User)]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "MockConnection.iter_groupings": {
            "name": "iter_groupings",
            "location": 64,
            "return": [
                "Tuple[(grpy.core.models.Grouping, grpy.core.models.Grouping, grpy.core.models.Grouping)]"
            ],
            "arguments": {
                "self": [],
                "where": [],
                "order": []
            }
        },
        "MockConnection.iter_groupings_by_user": {
            "name": "iter_groupings_by_user",
            "location": 85,
            "return": [
                "Tuple[()]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        },
        "MockConnection.iter_user_registrations_by_grouping": {
            "name": "iter_user_registrations_by_grouping",
            "location": 95,
            "return": [
                "Tuple[()]"
            ],
            "arguments": {
                "self": [],
                "grouping_key": [],
                "where": [],
                "order": []
            }
        },
        "MockConnection.iter_groups_by_user": {
            "name": "iter_groups_by_user",
            "location": 105,
            "return": [
                "Tuple[()]"
            ],
            "arguments": {
                "self": [],
                "user_key": [],
                "where": [],
                "order": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/test_base.py": {
        "base_proxy": {
            "name": "base_proxy",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_set_user": {
            "name": "test_set_user",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_get_user_by_ident": {
            "name": "test_get_user_by_ident",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_iter_users": {
            "name": "test_iter_users",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_delete_user": {
            "name": "test_delete_user",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_set_grouping": {
            "name": "test_set_grouping",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": [],
                "grouping": []
            }
        },
        "test_get_grouping": {
            "name": "test_get_grouping",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_get_grouping_by_code": {
            "name": "test_get_grouping_by_code",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_iter_groupings": {
            "name": "test_iter_groupings",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_delete_grouping": {
            "name": "test_delete_grouping",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_set_registration": {
            "name": "test_set_registration",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_get_registration": {
            "name": "test_get_registration",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_count_registrations_by_grouping": {
            "name": "test_count_registrations_by_grouping",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_delete_registration": {
            "name": "test_delete_registration",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_delete_registrations": {
            "name": "test_delete_registrations",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_iter_groupings_by_user": {
            "name": "test_iter_groupings_by_user",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_iter_user_registrations_by_grouping": {
            "name": "test_iter_user_registrations_by_grouping",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_set_groups": {
            "name": "test_set_groups",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_get_groups": {
            "name": "test_get_groups",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "test_iter_groups_by_user": {
            "name": "test_iter_groups_by_user",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "base_proxy": []
            }
        },
        "MockedBaseProxyConnection.mock": {
            "name": "mock",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/test_checks.py": {
        "validate_proxy": {
            "name": "validate_proxy",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_validate_set_user": {
            "name": "test_validate_set_user",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "validate_proxy": []
            }
        },
        "test_validate_set_grouping": {
            "name": "test_validate_set_grouping",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "validate_proxy": [],
                "grouping": []
            }
        },
        "test_validate_set_registration": {
            "name": "test_validate_set_registration",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "validate_proxy": []
            }
        },
        "test_validate_set_groups": {
            "name": "test_validate_set_groups",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "validate_proxy": []
            }
        },
        "catch_proxy": {
            "name": "catch_proxy",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_catch_get_messages": {
            "name": "test_catch_get_messages",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "catch_proxy": []
            }
        },
        "test_catch_has_errors": {
            "name": "test_catch_has_errors",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "catch_proxy": []
            }
        },
        "test_catch_set_user_excs": {
            "name": "test_catch_set_user_excs",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "catch_proxy": []
            }
        },
        "test_catch_set_grouping_duplicate": {
            "name": "test_catch_set_grouping_duplicate",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "catch_proxy": [],
                "grouping": []
            }
        },
        "MockedValidatingProxyConnection.mock": {
            "name": "mock",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedCatchProxyConnection.mock": {
            "name": "mock",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/test_filter.py": {
        "test_overwritten": {
            "name": "test_overwritten",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "filter_proxy": {
            "name": "filter_proxy",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_close": {
            "name": "test_close",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_set_user": {
            "name": "test_set_user",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_get_user_by_ident": {
            "name": "test_get_user_by_ident",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_iter_users": {
            "name": "test_iter_users",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_delete_user": {
            "name": "test_delete_user",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_set_grouping": {
            "name": "test_set_grouping",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": [],
                "grouping": []
            }
        },
        "test_get_grouping": {
            "name": "test_get_grouping",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_get_grouping_by_code": {
            "name": "test_get_grouping_by_code",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_iter_groupings": {
            "name": "test_iter_groupings",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_delete_grouping": {
            "name": "test_delete_grouping",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_set_registration": {
            "name": "test_set_registration",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_get_registration": {
            "name": "test_get_registration",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_count_registrations_by_grouping": {
            "name": "test_count_registrations_by_grouping",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_delete_registration": {
            "name": "test_delete_registration",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_delete_registrations": {
            "name": "test_delete_registrations",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_iter_groupings_by_user": {
            "name": "test_iter_groupings_by_user",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_iter_user_registrations_by_grouping": {
            "name": "test_iter_user_registrations_by_grouping",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_set_groups": {
            "name": "test_set_groups",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_get_groups": {
            "name": "test_get_groups",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "test_iter_groups_by_user": {
            "name": "test_iter_groups_by_user",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_proxy": []
            }
        },
        "MockedFilterProxyConnection.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": []
            }
        },
        "MockedFilterProxyConnection.mock": {
            "name": "mock",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedFilterProxyConnection._filter": {
            "name": "_filter",
            "location": 55,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "function": [],
                "default": [
                    "_T1@@"
                ]
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/test_repository.py": {
        "proxy_repository": {
            "name": "proxy_repository",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_repository_url": {
            "name": "test_repository_url",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_repository": []
            }
        },
        "test_repository_can_connect": {
            "name": "test_repository_can_connect",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_repository": []
            }
        },
        "test_repository_initialize": {
            "name": "test_repository_initialize",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_repository": []
            }
        },
        "test_repository_create": {
            "name": "test_repository_create",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "proxy_repository": []
            }
        },
        "MockedProxyRepository.mock": {
            "name": "mock",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/proxies/test/__init__.py": {},
    "grpy-master/grpy/repo/test/test_dummy.py": {
        "test_url": {
            "name": "test_url",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_different_repository": {
            "name": "test_different_repository",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/repo/test/test_logic.py": {
        "test_has_user": {
            "name": "test_has_user",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_set_grouping_new_code": {
            "name": "test_set_grouping_new_code",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_set_grouping_new_code_db_error": {
            "name": "test_set_grouping_new_code_db_error",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_set_grouping_new_code_no_random": {
            "name": "test_set_grouping_new_code_no_random",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_groupings_for_host_none": {
            "name": "test_groupings_for_host_none",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "make_users": {
            "name": "make_users",
            "location": 79,
            "return": [
                "list"
            ],
            "arguments": {
                "connection": [],
                "count": []
            }
        },
        "test_groupings_for_host_opened_regs": {
            "name": "test_groupings_for_host_opened_regs",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_groupings_for_host_opened_groups": {
            "name": "test_groupings_for_host_opened_groups",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_groupings_for_host_closed": {
            "name": "test_groupings_for_host_closed",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_state_simple": {
            "name": "test_get_grouping_state_simple",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "assert_final_grouping_state": {
            "name": "assert_final_grouping_state",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_state_final_1": {
            "name": "test_get_grouping_state_final_1",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_state_final_2": {
            "name": "test_get_grouping_state_final_2",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_state_close": {
            "name": "test_get_grouping_state_close",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_preference_conversion": {
            "name": "test_preference_conversion",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_error": {
            "name": "test_decode_error",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/repo/test/test_ram.py": {
        "test_url": {
            "name": "test_url",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_always_other_repository": {
            "name": "test_always_other_repository",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_different_repositories_different_connections": {
            "name": "test_different_repositories_different_connections",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/repo/test/test_repository.py": {
        "test_wrong_repository_url": {
            "name": "test_wrong_repository_url",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_connection": {
            "name": "test_no_connection",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_no_initialize": {
            "name": "test_no_initialize",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_has_errors": {
            "name": "test_has_errors",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_insert_user": {
            "name": "test_insert_user",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_update_user": {
            "name": "test_update_user",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_get_user_by_ident": {
            "name": "test_get_user_by_ident",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_get_user_by_ident_change": {
            "name": "test_get_user_by_ident_change",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "setup_users": {
            "name": "setup_users",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "connection": [],
                "count": []
            }
        },
        "test_iter_users": {
            "name": "test_iter_users",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_iter_users_where": {
            "name": "test_iter_users_where",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_iter_users_order": {
            "name": "test_iter_users_order",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_delete_user": {
            "name": "test_delete_user",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_insert_grouping": {
            "name": "test_insert_grouping",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_update_grouping": {
            "name": "test_update_grouping",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_update_grouping_duplicate": {
            "name": "test_update_grouping_duplicate",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping": {
            "name": "test_get_grouping",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_by_code": {
            "name": "test_get_grouping_by_code",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_grouping_by_code_after_change": {
            "name": "test_get_grouping_by_code_after_change",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "setup_groupings": {
            "name": "setup_groupings",
            "location": 324,
            "return": [
                "list"
            ],
            "arguments": {
                "connection": [],
                "count": []
            }
        },
        "test_iter_groupings": {
            "name": "test_iter_groupings",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_iter_groupings_where": {
            "name": "test_iter_groupings_where",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_iter_groupings_order": {
            "name": "test_iter_groupings_order",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_delete_grouping": {
            "name": "test_delete_grouping",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_set_registration": {
            "name": "test_set_registration",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_get_registration": {
            "name": "test_get_registration",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_count_registrations_by_grouping": {
            "name": "test_count_registrations_by_grouping",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_delete_registration": {
            "name": "test_delete_registration",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_iter_groupings_by_user": {
            "name": "test_iter_groupings_by_user",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_iter_user_registrations_by_grouping": {
            "name": "test_iter_user_registrations_by_grouping",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "insert_groups": {
            "name": "insert_groups",
            "location": 542,
            "return": [
                "Tuple[(list, Tuple[(FrozenSet[grpy.core.models.UserKey], ...)])]"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_set_get_groups": {
            "name": "test_set_get_groups",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_iter_groups_by_user": {
            "name": "test_iter_groups_by_user",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "grouping": []
            }
        },
        "test_no_connection.return_false": {
            "name": "return_false",
            "location": 49,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_no_initialize.return_false": {
            "name": "return_false",
            "location": 58,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "grpy-master/grpy/repo/test/test_sqlite.py": {
        "test_scheme": {
            "name": "test_scheme",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url": {
            "name": "test_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_connect": {
            "name": "test_connect",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_always_other_connection": {
            "name": "test_memory_always_other_connection",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_real_always_other_connection": {
            "name": "test_real_always_other_connection",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_initialize": {
            "name": "test_memory_initialize",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_no_initialize": {
            "name": "test_memory_no_initialize",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_failed_connection": {
            "name": "test_failed_connection",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_connection": {
            "name": "get_connection",
            "location": 134,
            "return": [
                "grpy.repo.sqlite.SqliteConnection"
            ],
            "arguments": {}
        },
        "raise_exception": {
            "name": "raise_exception",
            "location": 152,
            "return": [
                "MockCursor"
            ],
            "arguments": {
                "_self": [],
                "sql": [],
                "_values": []
            }
        },
        "test_insert_user": {
            "name": "test_insert_user",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "make_grouping": {
            "name": "make_grouping",
            "location": 172,
            "return": [
                "grpy.core.models.Grouping"
            ],
            "arguments": {
                "code": [],
                "host_key": []
            }
        },
        "test_set_grouping_exception": {
            "name": "test_set_grouping_exception",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_set_registration": {
            "name": "test_set_registration",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_registration": {
            "name": "test_get_registration",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_user_registrations_by_grouping": {
            "name": "test_iter_user_registrations_by_grouping",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_no_initialize.return_false": {
            "name": "return_false",
            "location": 119,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "MockCursor.fetchone": {
            "name": "fetchone",
            "location": 144,
            "return": [
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCursor.close": {
            "name": "close",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/repo/test/__init__.py": {},
    "grpy-master/grpy/test/test_version.py": {
        "test_read_version_file": {
            "name": "test_read_version_file",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_version": {
            "name": "test_get_version",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_version_from_distribution": {
            "name": "test_get_version_from_distribution",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_version_from_distribution.get_distribution": {
            "name": "get_distribution",
            "location": 68,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "grpy-master/grpy/test/__init__.py": {},
    "grpy-master/grpy/web/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 231,
            "return": [
                "GrpyApp"
            ],
            "arguments": {
                "config_mapping": []
            }
        },
        "handle_client_error": {
            "name": "handle_client_error",
            "location": 263,
            "return": [
                "Any"
            ],
            "arguments": {
                "exc": []
            }
        },
        "populate_testdata": {
            "name": "populate_testdata",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": []
            }
        },
        "GrpyApp.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_name": []
            }
        },
        "GrpyApp.setup_config": {
            "name": "setup_config",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_mapping": []
            }
        },
        "GrpyApp._set_log_level": {
            "name": "_set_log_level",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_level": []
            }
        },
        "GrpyApp._setup_logging": {
            "name": "_setup_logging",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_version": {
            "name": "_setup_version",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_time_zone": {
            "name": "_setup_time_zone",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_repository": {
            "name": "_setup_repository",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp.get_connection": {
            "name": "get_connection",
            "location": 143,
            "return": [
                "grpy.repo.base.Connection"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._clear_session": {
            "name": "_clear_session",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GrpyApp._setup_user_handling": {
            "name": "_setup_user_handling",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_babel": {
            "name": "_setup_babel",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_werkzeug": {
            "name": "_setup_werkzeug",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_jinja": {
            "name": "_setup_jinja",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp.login": {
            "name": "login",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_key": []
            }
        },
        "GrpyApp.logout": {
            "name": "logout",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp.log_debug": {
            "name": "log_debug",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GrpyApp.log_info": {
            "name": "log_info",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GrpyApp.log_error": {
            "name": "log_error",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GrpyApp.setup": {
            "name": "setup",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrpyApp._setup_repository.save_messages": {
            "name": "save_messages",
            "location": 118,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "GrpyApp._setup_repository.close_connection": {
            "name": "close_connection",
            "location": 135,
            "return": [],
            "arguments": {
                "_exc": []
            }
        },
        "GrpyApp._setup_user_handling.load_logged_in_user": {
            "name": "load_logged_in_user",
            "location": 162,
            "return": [],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/config.py": {},
    "grpy-master/grpy/web/conftest.py": {
        "_create_app": {
            "name": "_create_app",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "repository_url": []
            }
        },
        "_get_request_param": {
            "name": "_get_request_param",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 68,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ram_app": {
            "name": "ram_app",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "ram_client": {
            "name": "ram_client",
            "location": 93,
            "return": [],
            "arguments": {
                "ram_app": []
            }
        },
        "auth": {
            "name": "auth",
            "location": 118,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "ram_auth": {
            "name": "ram_auth",
            "location": 124,
            "return": [],
            "arguments": {
                "ram_client": []
            }
        },
        "app_grouping": {
            "name": "app_grouping",
            "location": 130,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "AuthenticationActions.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "AuthenticationActions.login": {
            "name": "login",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": [],
                "password": []
            }
        },
        "AuthenticationActions.logout": {
            "name": "logout",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "grpy-master/grpy/web/__init__.py": {},
    "grpy-master/grpy/web/auth/forms.py": {},
    "grpy-master/grpy/web/auth/logic.py": {
        "check_pw": {
            "name": "check_pw",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [],
                "url": [],
                "ident": [],
                "password": []
            }
        },
        "authenticate": {
            "name": "authenticate",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "ident": [],
                "password": []
            }
        }
    },
    "grpy-master/grpy/web/auth/views.py": {
        "login": {
            "name": "login",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/auth/__init__.py": {
        "create_blueprint": {
            "name": "create_blueprint",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/auth/test/test_forms.py": {
        "test_login_form": {
            "name": "test_login_form",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/auth/test/test_logic.py": {
        "test_check_pw": {
            "name": "test_check_pw",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "monkeypatch": [],
                "caplog": []
            }
        },
        "test_authenticate": {
            "name": "test_authenticate",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "monkeypatch": []
            }
        },
        "test_authenticate_inactive": {
            "name": "test_authenticate_inactive",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_authenticate_case": {
            "name": "test_authenticate_case",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_authenticate_spaces": {
            "name": "test_authenticate_spaces",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_authenticate_first_admin": {
            "name": "test_authenticate_first_admin",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_check_pw.requests_head_ok": {
            "name": "requests_head_ok",
            "location": 38,
            "return": [],
            "arguments": {
                "_url": [],
                "auth": []
            }
        },
        "test_check_pw.requests_head": {
            "name": "requests_head",
            "location": 47,
            "return": [],
            "arguments": {
                "_url": [],
                "auth": []
            }
        },
        "test_check_pw.requests_head_raise": {
            "name": "requests_head_raise",
            "location": 56,
            "return": [],
            "arguments": {
                "_url": [],
                "auth": []
            }
        },
        "test_authenticate.requests_head": {
            "name": "requests_head",
            "location": 79,
            "return": [],
            "arguments": {
                "_url": [],
                "auth": []
            }
        },
        "test_authenticate.requests_head_raise": {
            "name": "requests_head_raise",
            "location": 88,
            "return": [],
            "arguments": {
                "_url": [],
                "auth": []
            }
        }
    },
    "grpy-master/grpy/web/auth/test/test_views.py": {
        "check_user_login": {
            "name": "check_user_login",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "ident": []
            }
        },
        "test_login": {
            "name": "test_login",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_login_new_user": {
            "name": "test_login_new_user",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_invalid_login": {
            "name": "test_invalid_login",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_long_ident": {
            "name": "test_long_ident",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_long_password": {
            "name": "test_long_password",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_double_login": {
            "name": "test_double_login",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_ident_change_after_login": {
            "name": "test_ident_change_after_login",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_user_delete_after_login": {
            "name": "test_user_delete_after_login",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_login_with_redirect": {
            "name": "test_login_with_redirect",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_logout": {
            "name": "test_logout",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_logout_without_login": {
            "name": "test_logout_without_login",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "grpy-master/grpy/web/auth/test/__init__.py": {},
    "grpy-master/grpy/web/core/forms.py": {
        "DateTimeField.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "validators": [],
                "_form": [],
                "_name": [],
                "_prefix": [],
                "_translations": [],
                "_meta": []
            }
        },
        "DateTimeField._value": {
            "name": "_value",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationForm.create": {
            "name": "create",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "preferences": []
            }
        },
        "RegistrationForm.get_user_preferences": {
            "name": "get_user_preferences",
            "location": 74,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "grpy-master/grpy/web/core/middleware.py": {
        "cleanup_prefix": {
            "name": "cleanup_prefix",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "prefix": []
            }
        },
        "get_prefix_middleware": {
            "name": "get_prefix_middleware",
            "location": 40,
            "return": [
                "Union[(PrefixMiddleware, _T0)]"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ],
                "prefix": []
            }
        },
        "PrefixMiddleware.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "prefix": []
            }
        },
        "PrefixMiddleware.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        }
    },
    "grpy-master/grpy/web/core/utils.py": {
        "to_bool": {
            "name": "to_bool",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 75,
            "return": [
                "Callable"
            ],
            "arguments": {
                "view": []
            }
        },
        "admin_required": {
            "name": "admin_required",
            "location": 85,
            "return": [
                "Callable"
            ],
            "arguments": {
                "view": []
            }
        },
        "redirect_to_login": {
            "name": "redirect_to_login",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "login_required_redirect": {
            "name": "login_required_redirect",
            "location": 102,
            "return": [
                "Callable"
            ],
            "arguments": {
                "view": []
            }
        },
        "value_or_404": {
            "name": "value_or_404",
            "location": 117,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "make_model": {
            "name": "make_model",
            "location": 124,
            "return": [
                "grpy.core.models.Model"
            ],
            "arguments": {
                "model_class": [],
                "form_data": [],
                "additional_values": []
            }
        },
        "update_model": {
            "name": "update_model",
            "location": 136,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "model": [
                    "_T0@@"
                ],
                "form_data": []
            }
        },
        "local2utc": {
            "name": "local2utc",
            "location": 143,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "dt_value": []
            }
        },
        "utc2local": {
            "name": "utc2local",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt_value": []
            }
        },
        "datetimeformat": {
            "name": "datetimeformat",
            "location": 156,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "dt_value": [],
                "dt_format": [],
                "rebase": []
            }
        },
        "colormap": {
            "name": "colormap",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "color_description": [],
                "prefix": []
            }
        },
        "get_all_messages": {
            "name": "get_all_messages",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "truncate": {
            "name": "truncate",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "length": [],
                "value": []
            }
        },
        "GroupingKeyConverter.to_python": {
            "name": "to_python",
            "location": 39,
            "return": [
                "grpy.core.models.GroupingKey"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UserKeyConverter.to_python": {
            "name": "to_python",
            "location": 47,
            "return": [
                "grpy.core.models.UserKey"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "login_required.wrapped_view": {
            "name": "wrapped_view",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "admin_required.wrapped_view": {
            "name": "wrapped_view",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "login_required_redirect.wrapped_view": {
            "name": "wrapped_view",
            "location": 105,
            "return": [],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/core/views.py": {
        "get_connection": {
            "name": "get_connection",
            "location": 37,
            "return": [
                "grpy.repo.base.Connection"
            ],
            "arguments": {}
        },
        "home": {
            "name": "home",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "shortlink": {
            "name": "shortlink",
            "location": 109,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "code": []
            }
        }
    },
    "grpy-master/grpy/web/core/__init__.py": {},
    "grpy-master/grpy/web/core/test/test_forms.py": {
        "test_date_time_field_formdata": {
            "name": "test_date_time_field_formdata",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_date_time_field_kwargs": {
            "name": "test_date_time_field_kwargs",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_date_time_field_none": {
            "name": "test_date_time_field_none",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/core/test/test_middleware.py": {
        "_just_a_view": {
            "name": "_just_a_view",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "_make_app": {
            "name": "_make_app",
            "location": 35,
            "return": [
                "grpy.web.app.GrpyApp"
            ],
            "arguments": {}
        },
        "test_cleanup_prefix": {
            "name": "test_cleanup_prefix",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefix_call_valid": {
            "name": "test_prefix_call_valid",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefix_call_invalid": {
            "name": "test_prefix_call_invalid",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefix_call_scheme": {
            "name": "test_prefix_call_scheme",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefix_call_scheme.wsgi_app": {
            "name": "wsgi_app",
            "location": 81,
            "return": [],
            "arguments": {
                "environ": [],
                "_start_response": []
            }
        }
    },
    "grpy-master/grpy/web/core/test/test_utils.py": {
        "test_grouping_key_converter": {
            "name": "test_grouping_key_converter",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": []
            }
        },
        "test_user_key_converter": {
            "name": "test_user_key_converter",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": []
            }
        },
        "test_to_bool": {
            "name": "test_to_bool",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_make_user_inactive": {
            "name": "_make_user_inactive",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ident": []
            }
        },
        "test_login_required": {
            "name": "test_login_required",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": [],
                "ram_auth": []
            }
        },
        "test_admin_required": {
            "name": "test_admin_required",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": [],
                "ram_auth": []
            }
        },
        "test_login_required_redirect": {
            "name": "test_login_required_redirect",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": [],
                "ram_auth": []
            }
        },
        "test_login_required_redirect_prefix": {
            "name": "test_login_required_redirect_prefix",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_value_or_404": {
            "name": "test_value_or_404",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_value_or_404_none": {
            "name": "test_value_or_404_none",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_model": {
            "name": "test_make_model",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_model": {
            "name": "test_update_model",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datetimeformat": {
            "name": "test_datetimeformat",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_get_all_messages_none": {
            "name": "test_get_all_messages_none",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_get_all_messages_repo": {
            "name": "test_get_all_messages_repo",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "monkeypatch": []
            }
        },
        "test_get_all_messages_session": {
            "name": "test_get_all_messages_session",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": [],
                "ram_client": [],
                "monkeypatch": []
            }
        },
        "test_truncate": {
            "name": "test_truncate",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grouping_key_converter.just_a_view": {
            "name": "just_a_view",
            "location": 42,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "test_user_key_converter.just_a_view": {
            "name": "just_a_view",
            "location": 58,
            "return": [],
            "arguments": {
                "user_key": []
            }
        },
        "test_login_required.just_a_view": {
            "name": "just_a_view",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_admin_required.just_a_view": {
            "name": "just_a_view",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_login_required_redirect.just_a_view": {
            "name": "just_a_view",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_login_required_redirect_prefix.just_a_view": {
            "name": "just_a_view",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_get_all_messages_repo.get_messages": {
            "name": "get_messages",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "test_get_all_messages_session.just_a_view": {
            "name": "just_a_view",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "test_get_all_messages_session.get_messages": {
            "name": "get_messages",
            "location": 244,
            "return": [],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/core/test/test_views.py": {
        "test_home_anonymous": {
            "name": "test_home_anonymous",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_home_host": {
            "name": "test_home_host",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_host_user": {
            "name": "test_home_host_user",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_host_closed": {
            "name": "test_home_host_closed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_host_without_groupings": {
            "name": "test_home_host_without_groupings",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_home_user": {
            "name": "test_home_user",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": []
            }
        },
        "test_home_user_after_register": {
            "name": "test_home_user_after_register",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_user_after_final": {
            "name": "test_home_user_after_final",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_user_after_close": {
            "name": "test_home_user_after_close",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_home_inactive": {
            "name": "test_home_inactive",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_about_anonymous": {
            "name": "test_about_anonymous",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": []
            }
        },
        "test_about_user": {
            "name": "test_about_user",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_about_admin": {
            "name": "test_about_admin",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_shortlink_host": {
            "name": "test_shortlink_host",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_shortlink": {
            "name": "test_shortlink",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_shortlink_after_final": {
            "name": "test_shortlink_after_final",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        }
    },
    "grpy-master/grpy/web/core/test/__init__.py": {},
    "grpy-master/grpy/web/grouping/forms.py": {
        "GroupingForm.validate_final_date": {
            "name": "validate_final_date",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "GroupingForm.validate_close_date": {
            "name": "validate_close_date",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        }
    },
    "grpy-master/grpy/web/grouping/views.py": {
        "get_connection": {
            "name": "get_connection",
            "location": 41,
            "return": [
                "grpy.repo.base.Connection"
            ],
            "arguments": {}
        },
        "_redirect_to_detail": {
            "name": "_redirect_to_detail",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "grouping_key": []
            }
        },
        "_can_delete": {
            "name": "_can_delete",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": []
            }
        },
        "_can_set_final": {
            "name": "_can_set_final",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": []
            }
        },
        "_can_set_close": {
            "name": "_can_set_close",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "grouping": []
            }
        },
        "_remove_groups": {
            "name": "_remove_groups",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_list": {
            "name": "grouping_list",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "grouping_create": {
            "name": "grouping_create",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "_get_grouping": {
            "name": "_get_grouping",
            "location": 120,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "grouping_key": [],
                "allow_admin": []
            }
        },
        "grouping_detail": {
            "name": "grouping_detail",
            "location": 135,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "_get_group_list": {
            "name": "_get_group_list",
            "location": 187,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_update": {
            "name": "grouping_update",
            "location": 201,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_register": {
            "name": "grouping_register",
            "location": 223,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_start": {
            "name": "grouping_start",
            "location": 251,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_remove_groups": {
            "name": "grouping_remove_groups",
            "location": 280,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_final": {
            "name": "grouping_final",
            "location": 303,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_close": {
            "name": "grouping_close",
            "location": 317,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_fasten_groups": {
            "name": "grouping_fasten_groups",
            "location": 334,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_assign": {
            "name": "grouping_assign",
            "location": 357,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        },
        "grouping_delete": {
            "name": "grouping_delete",
            "location": 391,
            "return": [],
            "arguments": {
                "grouping_key": []
            }
        }
    },
    "grpy-master/grpy/web/grouping/__init__.py": {
        "create_blueprint": {
            "name": "create_blueprint",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/grouping/test/test_forms.py": {
        "test_grouping_form": {
            "name": "test_grouping_form",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/grouping/test/test_views.py": {
        "host_ident": {
            "name": "host_ident",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": [],
                "grouping": []
            }
        },
        "check_bad_requests": {
            "name": "check_bad_requests",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "url": [],
                "do_post": [],
                "allow_admin": []
            }
        },
        "check_bad_host_requests": {
            "name": "check_bad_host_requests",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "url": [],
                "do_post": [],
                "allow_admin": []
            }
        },
        "test_grouping_list": {
            "name": "test_grouping_list",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_grouping_create": {
            "name": "test_grouping_create",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_grouping_detail": {
            "name": "test_grouping_detail",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_detail_no_code": {
            "name": "test_grouping_detail_no_code",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "add_user_registrations": {
            "name": "add_user_registrations",
            "location": 169,
            "return": [
                "list"
            ],
            "arguments": {
                "app": [],
                "grouping_key": []
            }
        },
        "test_grouping_detail_remove": {
            "name": "test_grouping_detail_remove",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_detail_remove_grouped": {
            "name": "test_grouping_detail_remove_grouped",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_detail_remove_illegal": {
            "name": "test_grouping_detail_remove_illegal",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_detail_fasten": {
            "name": "test_grouping_detail_fasten",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_update": {
            "name": "test_grouping_update",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_register": {
            "name": "test_grouping_register",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_register_out_of_time": {
            "name": "test_grouping_register_out_of_time",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_start": {
            "name": "test_grouping_start",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_detail_no_group": {
            "name": "test_grouping_detail_no_group",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "create_registered_users": {
            "name": "create_registered_users",
            "location": 407,
            "return": [
                "list"
            ],
            "arguments": {
                "connection": [],
                "grouping_key": []
            }
        },
        "start_grouping": {
            "name": "start_grouping",
            "location": 420,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "connection": [],
                "app_grouping": [],
                "ident": []
            }
        },
        "test_grouping_build": {
            "name": "test_grouping_build",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_delete_after_build": {
            "name": "test_grouping_delete_after_build",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_remove_groups": {
            "name": "test_remove_groups",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_final": {
            "name": "test_grouping_final",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_grouping_close": {
            "name": "test_grouping_close",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_fasten_groups": {
            "name": "test_fasten_groups",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_assign_grouping": {
            "name": "test_assign_grouping",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_assign_grouping_deleted_new_host": {
            "name": "test_assign_grouping_deleted_new_host",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_delete_grouping_auth": {
            "name": "test_delete_grouping_auth",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_delete_grouping": {
            "name": "test_delete_grouping",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_assign_grouping_deleted_new_host.return_none": {
            "name": "return_none",
            "location": 689,
            "return": [],
            "arguments": {
                "_self": [],
                "user_key": []
            }
        }
    },
    "grpy-master/grpy/web/grouping/test/__init__.py": {},
    "grpy-master/grpy/web/policies/preferred.py": {
        "create_preferred_policy_form": {
            "name": "create_preferred_policy_form",
            "location": 30,
            "return": [
                "type"
            ],
            "arguments": {
                "num_entries": []
            }
        },
        "create_preferred_policy_form.PreferredPolicyForm.create": {
            "name": "create",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "preferences": []
            }
        },
        "create_preferred_policy_form.PreferredPolicyForm.get_user_preferences": {
            "name": "get_user_preferences",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "grpy-master/grpy/web/policies/simple_belbin.py": {
        "SimpleBelbinPolicyForm.create": {
            "name": "create",
            "location": 52,
            "return": [
                "_TSimpleBelbinPolicyForm@@SimpleBelbinPolicyForm@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSimpleBelbinPolicyForm]"
                ],
                "preferences": []
            }
        },
        "SimpleBelbinPolicyForm.get_user_preferences": {
            "name": "get_user_preferences",
            "location": 58,
            "return": [
                "grpy.policies.simple_belbin.SimpleBelbinPreferences"
            ],
            "arguments": {
                "self": [],
                "_config": []
            }
        }
    },
    "grpy-master/grpy/web/policies/__init__.py": {
        "get_policy_names": {
            "name": "get_policy_names",
            "location": 56,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {}
        },
        "get_policy_name": {
            "name": "get_policy_name",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "code": []
            }
        },
        "get_registration_form": {
            "name": "get_registration_form",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "code": [],
                "registration": []
            }
        },
        "EmptyPolicyForm.create": {
            "name": "create",
            "location": 34,
            "return": [
                "_TEmptyPolicyForm@@EmptyPolicyForm@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEmptyPolicyForm]"
                ],
                "preferences": []
            }
        },
        "EmptyPolicyForm.get_user_preferences": {
            "name": "get_user_preferences",
            "location": 38,
            "return": [
                "grpy.core.models.UserPreferences"
            ],
            "arguments": {
                "self": [],
                "_config": []
            }
        }
    },
    "grpy-master/grpy/web/policies/test/test_policies.py": {
        "test_get_policies": {
            "name": "test_get_policies",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_policies_implemented": {
            "name": "test_policies_implemented",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_policy_name": {
            "name": "test_get_policy_name",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_registration_form": {
            "name": "test_get_registration_form",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_empty_policy_form": {
            "name": "test_empty_policy_form",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/policies/test/test_preferred.py": {
        "assert_idents": {
            "name": "assert_idents",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "size": [],
                "values": []
            }
        },
        "test_preferred_policy_form": {
            "name": "test_preferred_policy_form",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_preferred_policy_form_case": {
            "name": "test_preferred_policy_form_case",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_preferred_policy_form_space": {
            "name": "test_preferred_policy_form_space",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        },
        "test_preferred_policy_form_length": {
            "name": "test_preferred_policy_form_length",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/policies/test/test_simple_belbin.py": {
        "test_simple_belbin_policy_form": {
            "name": "test_simple_belbin_policy_form",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/policies/test/__init__.py": {},
    "grpy-master/grpy/web/test/common.py": {
        "check_get": {
            "name": "check_get",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "client": [],
                "url": [],
                "status_code": []
            }
        },
        "check_get_data": {
            "name": "check_get_data",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [],
                "url": []
            }
        },
        "check_requests": {
            "name": "check_requests",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "url": [],
                "status_code": [],
                "do_post": []
            }
        },
        "check_bad_anon_requests": {
            "name": "check_bad_anon_requests",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "url": [],
                "do_post": []
            }
        },
        "check_redirect": {
            "name": "check_redirect",
            "location": 63,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "response": [
                    "_T0@@"
                ],
                "location_url": []
            }
        },
        "check_message": {
            "name": "check_message",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "category": [],
                "message": []
            }
        },
        "check_flash": {
            "name": "check_flash",
            "location": 77,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "client": [],
                "response": [
                    "_T1@@"
                ],
                "location_url": [],
                "category": [],
                "message": []
            }
        },
        "FormData.getlist": {
            "name": "getlist",
            "location": 30,
            "return": [
                "Union[(Sequence, List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "grpy-master/grpy/web/test/test_app.py": {
        "test_grpy_app": {
            "name": "test_grpy_app",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config": {
            "name": "test_config",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_env_config": {
            "name": "test_env_config",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "_check_log_level": {
            "name": "_check_log_level",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [],
                "expected": []
            }
        },
        "test_setup_logging": {
            "name": "test_setup_logging",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_time_zone": {
            "name": "test_setup_time_zone",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_time_zone_invalid": {
            "name": "test_setup_time_zone_invalid",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "create_grpy_app": {
            "name": "create_grpy_app",
            "location": 113,
            "return": [
                "grpy.web.app.GrpyApp"
            ],
            "arguments": {}
        },
        "do_login": {
            "name": "do_login",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "grpy_app": []
            }
        },
        "test_flash_connection_messages_get": {
            "name": "test_flash_connection_messages_get",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_flash_connection_messages_push": {
            "name": "test_flash_connection_messages_push",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_flash_connection_messages_get.raise_value_error": {
            "name": "raise_value_error",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_flash_connection_messages_push.raise_value_error": {
            "name": "raise_value_error",
            "location": 154,
            "return": [],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/test/__init__.py": {},
    "grpy-master/grpy/web/user/forms.py": {},
    "grpy-master/grpy/web/user/views.py": {
        "_get_user": {
            "name": "_get_user",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "user_key": []
            }
        },
        "get_connection": {
            "name": "get_connection",
            "location": 43,
            "return": [
                "grpy.repo.base.Connection"
            ],
            "arguments": {}
        },
        "users": {
            "name": "users",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "user_create": {
            "name": "user_create",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "user_detail": {
            "name": "user_detail",
            "location": 72,
            "return": [],
            "arguments": {
                "user_key": []
            }
        },
        "user_delete": {
            "name": "user_delete",
            "location": 119,
            "return": [],
            "arguments": {
                "user_key": []
            }
        }
    },
    "grpy-master/grpy/web/user/__init__.py": {
        "create_blueprint": {
            "name": "create_blueprint",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "grpy-master/grpy/web/user/test/test_forms.py": {
        "test_user_form": {
            "name": "test_user_form",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ram_app": []
            }
        }
    },
    "grpy-master/grpy/web/user/test/test_views.py": {
        "check_bad_requests": {
            "name": "check_bad_requests",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "auth": [],
                "url": [],
                "do_post": []
            }
        },
        "test_admin_users": {
            "name": "test_admin_users",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_admin_user_create": {
            "name": "test_admin_user_create",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_admin_user_detail": {
            "name": "test_admin_user_detail",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_admin_change_permission": {
            "name": "test_admin_change_permission",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        },
        "test_admin_user_detail_lists": {
            "name": "test_admin_user_detail_lists",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "check_has_groupings": {
            "name": "check_has_groupings",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "delete_url": [],
                "location_url": []
            }
        },
        "test_admin_user_delete": {
            "name": "test_admin_user_delete",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": [],
                "app_grouping": []
            }
        },
        "test_admin_user_detail_delete": {
            "name": "test_admin_user_detail_delete",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "client": [],
                "auth": []
            }
        }
    },
    "grpy-master/grpy/web/user/test/__init__.py": {}
}
{
    "hash_decoder-master/hashdecoder/exc.py": {
        "HashDecodeError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/__init__.py": {},
    "hash_decoder-master/hashdecoder/__main__.py": {
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": []
            }
        },
        "_get_dictionary": {
            "name": "_get_dictionary",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "db": []
            }
        },
        "process_db": {
            "name": "process_db",
            "location": 37,
            "return": [],
            "arguments": {
                "dictionary": [],
                "args": []
            }
        },
        "process_decode": {
            "name": "process_decode",
            "location": 66,
            "return": [],
            "arguments": {
                "dictionary": [],
                "args": []
            }
        },
        "process_hash": {
            "name": "process_hash",
            "location": 80,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "process_db.add_word": {
            "name": "add_word",
            "location": 56,
            "return": [],
            "arguments": {
                "index": [],
                "word": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/combinations.py": {
        "combinations": {
            "name": "combinations",
            "location": 8,
            "return": [
                "Generator[(tuple, Any, None)]"
            ],
            "arguments": {
                "get_iterable": [],
                "count": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/decoder.py": {
        "_sanitise_hint": {
            "name": "_sanitise_hint",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "hint": []
            }
        },
        "HashDecoder.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": []
            }
        },
        "HashDecoder.decode": {
            "name": "decode",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": [],
                "hint": []
            }
        },
        "HashDecoder._decode": {
            "name": "_decode",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": [],
                "get_combinations": [],
                "hint": []
            }
        },
        "HashDecoder._lookup": {
            "name": "_lookup",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/dictionary.py": {
        "get_mem_dictionary": {
            "name": "get_mem_dictionary",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "words": []
            }
        },
        "get_db_dictionary": {
            "name": "get_db_dictionary",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "db": []
            }
        },
        "_word_is_subset_of_hint": {
            "name": "_word_is_subset_of_hint",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [],
                "hint": []
            }
        },
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_words": [],
                "permutations": []
            }
        },
        "Dictionary.add_initial_word": {
            "name": "add_initial_word",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": [],
                "hint": []
            }
        },
        "Dictionary.add_permutation": {
            "name": "add_permutation",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": [],
                "hint": []
            }
        },
        "Dictionary.clear": {
            "name": "clear",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.count_initial_words": {
            "name": "count_initial_words",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.count_permutations": {
            "name": "count_permutations",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.lookup_hash": {
            "name": "lookup_hash",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        },
        "Dictionary.yield_all": {
            "name": "yield_all",
            "location": 65,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "hint": []
            }
        },
        "Dictionary._can_add_word": {
            "name": "_can_add_word",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [],
                "hint": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/hashutil.py": {
        "md5_encode": {
            "name": "md5_encode",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "word": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/logutil.py": {
        "_throttle": {
            "name": "_throttle",
            "location": 9,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "seconds": []
            }
        },
        "log_entry_and_exit": {
            "name": "log_entry_and_exit",
            "location": 28,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "log_callable": []
            }
        },
        "throttled_log": {
            "name": "throttled_log",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "log_callable": [],
                "msg": []
            }
        },
        "_throttle.throttle_decorator": {
            "name": "throttle_decorator",
            "location": 12,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "log_entry_and_exit.decorator": {
            "name": "decorator",
            "location": 31,
            "return": [],
            "arguments": {
                "inner": []
            }
        },
        "_throttle.throttle_decorator.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "log_entry_and_exit.decorator.wrapped": {
            "name": "wrapped",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "hash_decoder-master/hashdecoder/lib/parse_args.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 23,
            "return": [
                "_argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "parse_args.add_flags": {
            "name": "add_flags",
            "location": 24,
            "return": [],
            "arguments": {
                "p": [],
                "quiet": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/types.py": {},
    "hash_decoder-master/hashdecoder/lib/wordhasher.py": {
        "_sanitise_word": {
            "name": "_sanitise_word",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "WordHasher.add": {
            "name": "add",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "WordHasher.count": {
            "name": "count",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordHasher.lookup_hash": {
            "name": "lookup_hash",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        },
        "WordHasher.lookup_word": {
            "name": "lookup_word",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "WordHasher.values": {
            "name": "values",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordHasher.clear": {
            "name": "clear",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemWordHasher.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "MemWordHasher.add": {
            "name": "add",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MemWordHasher.count": {
            "name": "count",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemWordHasher.lookup_hash": {
            "name": "lookup_hash",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        },
        "MemWordHasher.lookup_word": {
            "name": "lookup_word",
            "location": 58,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "MemWordHasher.values": {
            "name": "values",
            "location": 63,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemWordHasher.clear": {
            "name": "clear",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBWordHasher.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "table_name": []
            }
        },
        "DBWordHasher.add": {
            "name": "add",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "DBWordHasher.count": {
            "name": "count",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBWordHasher.lookup_hash": {
            "name": "lookup_hash",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hash_": []
            }
        },
        "DBWordHasher.lookup_word": {
            "name": "lookup_word",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "DBWordHasher.values": {
            "name": "values",
            "location": 112,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBWordHasher.clear": {
            "name": "clear",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBWordHasher._init_table": {
            "name": "_init_table",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hash_decoder-master/hashdecoder/lib/__init__.py": {},
    "hash_decoder-master/test/helpers.py": {
        "get_db": {
            "name": "get_db",
            "location": 10,
            "return": [
                "sqlite3.dbapi2.Connection"
            ],
            "arguments": {}
        },
        "parametrise_dictionaries": {
            "name": "parametrise_dictionaries",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "db": []
            }
        },
        "parametrise_hashers": {
            "name": "parametrise_hashers",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "db": []
            }
        },
        "to_md5": {
            "name": "to_md5",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "word": []
            }
        }
    },
    "hash_decoder-master/test/test_combinations.py": {
        "test_combinations_yields_count_of_2_as_expected": {
            "name": "test_combinations_yields_count_of_2_as_expected",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_combinations_yields_count_of_3_as_expected": {
            "name": "test_combinations_yields_count_of_3_as_expected",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_assert_generator_contains": {
            "name": "_assert_generator_contains",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [],
                "ideal": []
            }
        }
    },
    "hash_decoder-master/test/test_dictionary_class.py": {
        "test_add_initial_word": {
            "name": "test_add_initial_word",
            "location": 10,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_add_initial_word_is_noop_if_word_exists": {
            "name": "test_add_initial_word_is_noop_if_word_exists",
            "location": 17,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_add_initial_word_respects_hint": {
            "name": "test_add_initial_word_respects_hint",
            "location": 26,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_add_permutation": {
            "name": "test_add_permutation",
            "location": 34,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_add_permutation_is_noop_if_word_exists": {
            "name": "test_add_permutation_is_noop_if_word_exists",
            "location": 41,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_added_words_are_sanitised": {
            "name": "test_added_words_are_sanitised",
            "location": 50,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_clear_clears_data": {
            "name": "test_clear_clears_data",
            "location": 57,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_count_initial_words": {
            "name": "test_count_initial_words",
            "location": 64,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_count_permutations": {
            "name": "test_count_permutations",
            "location": 71,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_lookup_hash": {
            "name": "test_lookup_hash",
            "location": 78,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_yield_all": {
            "name": "test_yield_all",
            "location": 87,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_yield_all_hint_narrows_trivial_lookup": {
            "name": "test_yield_all_hint_narrows_trivial_lookup",
            "location": 95,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "test_yield_all_hint_narrows_lookup": {
            "name": "test_yield_all_hint_narrows_lookup",
            "location": 103,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "_get_words": {
            "name": "_get_words",
            "location": 112,
            "return": [
                "tuple"
            ],
            "arguments": {
                "db": []
            }
        },
        "_get_permutations": {
            "name": "_get_permutations",
            "location": 118,
            "return": [
                "tuple"
            ],
            "arguments": {
                "db": []
            }
        }
    },
    "hash_decoder-master/test/test_hash_decoder.py": {
        "test_decodes_trivial_lookup": {
            "name": "test_decodes_trivial_lookup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_2_permutation": {
            "name": "test_can_decode_2_permutation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_decode_3_permutation": {
            "name": "test_can_decode_3_permutation",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_saves_permutations_to_dictionary": {
            "name": "test_saves_permutations_to_dictionary",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_simple_hint": {
            "name": "test_decode_simple_hint",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_hint": {
            "name": "test_decode_hint",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_to_md5": {
            "name": "_to_md5",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "word": []
            }
        }
    },
    "hash_decoder-master/test/test_logutil_log_entry_and_exit.py": {
        "test_normal_run": {
            "name": "test_normal_run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_exception_has_bespoke_msg": {
            "name": "test_exception_has_bespoke_msg",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "test_normal_run.foo": {
            "name": "foo",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_exception_has_bespoke_msg.foo": {
            "name": "foo",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "hash_decoder-master/test/test_logutil_throttled_log.py": {
        "test_called_twice_only_logs_once": {
            "name": "test_called_twice_only_logs_once",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        }
    },
    "hash_decoder-master/test/test_parse_args.py": {
        "test_empty_raises": {
            "name": "test_empty_raises",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "capfd": []
            }
        },
        "test_db_count": {
            "name": "test_db_count",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_db_load": {
            "name": "test_db_load",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_db_wipe": {
            "name": "test_db_wipe",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode": {
            "name": "test_decode",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash": {
            "name": "test_hash",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hash_decoder-master/test/test_wordhasher_class.py": {
        "test_add_is_noop_if_word_is_present": {
            "name": "test_add_is_noop_if_word_is_present",
            "location": 10,
            "return": [],
            "arguments": {
                "hasher": []
            }
        }
    },
    "hash_decoder-master/test/__init__.py": {}
}
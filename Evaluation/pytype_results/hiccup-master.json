{
    "hiccup-master/setup.py": {},
    "hiccup-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "hiccup-master/src/hiccup/myinspect.py": {
        "getmembers": {
            "name": "getmembers",
            "location": 15,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "object": [],
                "path": [],
                "excluded": []
            }
        }
    },
    "hiccup-master/src/hiccup/__init__.py": {
        "di": {
            "name": "di",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "id_": []
            }
        },
        "remove_control_characters": {
            "name": "remove_control_characters",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "IfType": {
            "name": "IfType",
            "location": 54,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "IfParentType": {
            "name": "IfParentType",
            "location": 61,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "IfName": {
            "name": "IfName",
            "location": 70,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "name": []
            }
        },
        "IfNameMatches": {
            "name": "IfNameMatches",
            "location": 77,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "regex": []
            }
        },
        "IfValueMatches": {
            "name": "IfValueMatches",
            "location": 87,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "predicate": []
            }
        },
        "xquery": {
            "name": "xquery",
            "location": 291,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "query": [],
                "cls": []
            }
        },
        "xquery_single": {
            "name": "xquery_single",
            "location": 294,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "query": [],
                "cls": []
            }
        },
        "IfType.check": {
            "name": "check",
            "location": 55,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "IfParentType.check": {
            "name": "check",
            "location": 62,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "IfName.check": {
            "name": "check",
            "location": 71,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "IfNameMatches.check": {
            "name": "check",
            "location": 78,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "IfValueMatches.check": {
            "name": "check",
            "location": 88,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "TypeNameMap.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeNameMap.get_type_name": {
            "name": "get_type_name",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PrimitiveFactory.as_primitive": {
            "name": "as_primitive",
            "location": 109,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DefaultPrimitiveFactory.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultPrimitiveFactory.as_primitive": {
            "name": "as_primitive",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "ListFactory.as_list": {
            "name": "as_list",
            "location": 133,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DefaultListFactory.as_list": {
            "name": "as_list",
            "location": 141,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DictFactory.as_dict": {
            "name": "as_dict",
            "location": 148,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DefaultDictFactory.as_dict": {
            "name": "as_dict",
            "location": 156,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "_T0@@"
                ]
            }
        },
        "Hiccup.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hiccup.default_excludes": {
            "name": "default_excludes",
            "location": 178,
            "return": [
                "List[Tuple[Callable[([Any], Any)]]]"
            ],
            "arguments": {}
        },
        "Hiccup.exclude": {
            "name": "exclude",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hiccup._get_attributes": {
            "name": "_get_attributes",
            "location": 191,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "path": []
            }
        },
        "Hiccup._keep": {
            "name": "_keep",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Hiccup._make_elem": {
            "name": "_make_elem",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "name": []
            }
        },
        "Hiccup._as_xmlstr": {
            "name": "_as_xmlstr",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Hiccup._is_excluded": {
            "name": "_is_excluded",
            "location": 210,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Hiccup._as_xml": {
            "name": "_as_xml",
            "location": 216,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Hiccup.as_xml": {
            "name": "as_xml",
            "location": 264,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Hiccup.xquery": {
            "name": "xquery",
            "location": 267,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "query": []
            }
        },
        "Hiccup.xquery_single": {
            "name": "xquery_single",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "query": []
            }
        },
        "Hiccup.xfind_all": {
            "name": "xfind_all",
            "location": 285,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hiccup.xfind": {
            "name": "xfind",
            "location": 288,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hiccup-master/tests/conftest.py": {
        "pretty": {
            "name": "pretty",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "xml": []
            }
        },
        "pytest_assertrepr_compare": {
            "name": "pytest_assertrepr_compare",
            "location": 10,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {
                "op": [],
                "left": [],
                "right": []
            }
        }
    },
    "hiccup-master/tests/test.py": {
        "as_xml": {
            "name": "as_xml",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "test_as_xml": {
            "name": "test_as_xml",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_prop": {
            "name": "test_simple_prop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tree": {
            "name": "test_tree",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_types": {
            "name": "test_types",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive": {
            "name": "test_recursive",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exclude_class": {
            "name": "test_exclude_class",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_primitive": {
            "name": "test_custom_primitive",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_mapping": {
            "name": "test_name_mapping",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_str": {
            "name": "test_set_str",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error": {
            "name": "test_error",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_characters": {
            "name": "test_bad_characters",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_dict": {
            "name": "test_query_dict",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_tag_filtered": {
            "name": "test_bad_tag_filtered",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exclude_member": {
            "name": "test_exclude_member",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Xml.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xmls": []
            }
        },
        "Xml.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Xml.elements_equal": {
            "name": "elements_equal",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "e1": [],
                "e2": []
            }
        },
        "Simple.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Simple.prop": {
            "name": "prop",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Xml.elements_equal.without_pyid": {
            "name": "without_pyid",
            "location": 33,
            "return": [],
            "arguments": {
                "attrs": []
            }
        },
        "test_types.X.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_recursive.X.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_exclude_class.A.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_exclude_class.B.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_name_mapping.A.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_error.A.error": {
            "name": "error",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_exclude_member.A.do_not_include": {
            "name": "do_not_include",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_exclude_member.A.include": {
            "name": "include",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
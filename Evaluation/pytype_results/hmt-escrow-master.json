{
    "hmt-escrow-master/setup.py": {},
    "hmt-escrow-master/hmt_escrow/eth_bridge.py": {
        "get_w3": {
            "name": "get_w3",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "handle_transaction": {
            "name": "handle_transaction",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "txn_func": []
            }
        },
        "handle_transaction_with_retry": {
            "name": "handle_transaction_with_retry",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "txn_func": [],
                "retry": []
            }
        },
        "get_contract_interface": {
            "name": "get_contract_interface",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "contract_entrypoint": []
            }
        },
        "get_hmtoken": {
            "name": "get_hmtoken",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "hmtoken_addr": []
            }
        },
        "get_escrow": {
            "name": "get_escrow",
            "location": 210,
            "return": [
                "Any"
            ],
            "arguments": {
                "escrow_addr": [
                    "str"
                ]
            }
        },
        "get_factory": {
            "name": "get_factory",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "factory_addr": [
                    "str"
                ]
            }
        },
        "deploy_factory": {
            "name": "deploy_factory",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "gas": [
                    "int"
                ]
            }
        },
        "get_pub_key_from_addr": {
            "name": "get_pub_key_from_addr",
            "location": 304,
            "return": [
                "bytes"
            ],
            "arguments": {
                "wallet_addr": [
                    "str"
                ]
            }
        },
        "set_pub_key_at_addr": {
            "name": "set_pub_key_at_addr",
            "location": 355,
            "return": [
                "Any"
            ],
            "arguments": {
                "pub_key": [
                    "str"
                ]
            }
        },
        "Retry.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries": [],
                "delay": [],
                "backoff": []
            }
        }
    },
    "hmt-escrow-master/hmt_escrow/job.py": {
        "status": {
            "name": "status",
            "location": 37,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "escrow_contract": [],
                "gas_payer": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "manifest_url": {
            "name": "manifest_url",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "escrow_contract": [],
                "gas_payer": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "manifest_hash": {
            "name": "manifest_hash",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "escrow_contract": [],
                "gas_payer": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "is_trusted_handler": {
            "name": "is_trusted_handler",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "escrow_contract": [],
                "handler_addr": [
                    "str"
                ],
                "gas_payer": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "launcher": {
            "name": "launcher",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "escrow_contract": [],
                "gas_payer": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "Dict[(str, str)]"
                ],
                "escrow_manifest": [],
                "factory_addr": [
                    "str"
                ],
                "escrow_addr": [
                    "str"
                ],
                "multi_credentials": [
                    "List[tuple]"
                ],
                "retry": [
                    "hmt_escrow.eth_bridge.Retry"
                ]
            }
        },
        "Job.launch": {
            "name": "launch",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pub_key": [
                    "bytes"
                ]
            }
        },
        "Job.setup": {
            "name": "setup",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ],
                "sender": [
                    "str"
                ]
            }
        },
        "Job.add_trusted_handlers": {
            "name": "add_trusted_handlers",
            "location": 447,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "List[str]"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.bulk_payout": {
            "name": "bulk_payout",
            "location": 506,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "payouts": [
                    "List[Tuple[(str, decimal.Decimal)]]"
                ],
                "results": [
                    "dict"
                ],
                "pub_key": [
                    "bytes"
                ],
                "gas": [
                    "int"
                ],
                "encrypt_final_results": [
                    "bool"
                ]
            }
        },
        "Job.abort": {
            "name": "abort",
            "location": 615,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.cancel": {
            "name": "cancel",
            "location": 715,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.store_intermediate_results": {
            "name": "store_intermediate_results",
            "location": 794,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict"
                ],
                "pub_key": [
                    "bytes"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.complete": {
            "name": "complete",
            "location": 883,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ],
                "blocking": [
                    "bool"
                ],
                "retries": [
                    "int"
                ],
                "delay": [
                    "int"
                ],
                "backoff": [
                    "int"
                ]
            }
        },
        "Job.status": {
            "name": "status",
            "location": 954,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.balance": {
            "name": "balance",
            "location": 978,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.manifest": {
            "name": "manifest",
            "location": 1008,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "priv_key": [
                    "bytes"
                ]
            }
        },
        "Job.intermediate_results": {
            "name": "intermediate_results",
            "location": 1037,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "priv_key": [
                    "bytes"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job.final_results": {
            "name": "final_results",
            "location": 1071,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "priv_key": [
                    "bytes"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._access_job": {
            "name": "_access_job",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory_addr": [
                    "str"
                ],
                "escrow_addr": [
                    "str"
                ]
            }
        },
        "Job._init_job": {
            "name": "_init_job",
            "location": 1129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest": []
            }
        },
        "Job._eth_addr_valid": {
            "name": "_eth_addr_valid",
            "location": 1142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "addr": [],
                "priv_key": []
            }
        },
        "Job._validate_multi_credentials": {
            "name": "_validate_multi_credentials",
            "location": 1148,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "multi_credentials": [
                    "List[tuple]"
                ]
            }
        },
        "Job._validate_credentials": {
            "name": "_validate_credentials",
            "location": 1188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "multi_credentials": [
                    "List[tuple]"
                ]
            }
        },
        "Job._factory_contains_escrow": {
            "name": "_factory_contains_escrow",
            "location": 1228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "escrow_addr": [
                    "str"
                ],
                "factory_addr": [
                    "str"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._init_factory": {
            "name": "_init_factory",
            "location": 1268,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "factory_addr": [
                    "Optional[str]"
                ],
                "credentials": [
                    "Dict[(str, str)]"
                ],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._bulk_paid": {
            "name": "_bulk_paid",
            "location": 1315,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._last_escrow_addr": {
            "name": "_last_escrow_addr",
            "location": 1352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._create_escrow": {
            "name": "_create_escrow",
            "location": 1379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "trusted_handlers": [],
                "gas": [
                    "int"
                ]
            }
        },
        "Job._raffle_txn": {
            "name": "_raffle_txn",
            "location": 1437,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "multi_creds": [],
                "txn_func": [],
                "txn_args": [],
                "txn_event": [],
                "gas": [
                    "int"
                ]
            }
        }
    },
    "hmt-escrow-master/hmt_escrow/kvstore_abi.py": {},
    "hmt-escrow-master/hmt_escrow/storage.py": {
        "_connect_s3": {
            "name": "_connect_s3",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "download_from_storage": {
            "name": "download_from_storage",
            "location": 44,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "private_key": [
                    "bytes"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 84,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "msg": [
                    "dict"
                ],
                "public_key": [
                    "bytes"
                ],
                "encrypt_data": [
                    "bool"
                ]
            }
        }
    },
    "hmt-escrow-master/hmt_escrow/utils.py": {
        "with_retry": {
            "name": "with_retry",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "fn": [],
                "retries": [],
                "delay": [],
                "backoff": []
            }
        },
        "get_hmt_balance": {
            "name": "get_hmt_balance",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "wallet_addr": [],
                "token_addr": [],
                "w3": []
            }
        }
    },
    "hmt-escrow-master/hmt_escrow/__init__.py": {},
    "hmt-escrow-master/hmt_escrow/crypto/encryption.py": {
        "Encryption.is_encrypted": {
            "name": "is_encrypted",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "Encryption.encrypt": {
            "name": "encrypt",
            "location": 76,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "public_key": [],
                "shared_mac_data": [
                    "bytes"
                ]
            }
        },
        "Encryption.decrypt": {
            "name": "decrypt",
            "location": 132,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "private_key": [],
                "shared_mac_data": [
                    "bytes"
                ]
            }
        },
        "Encryption._process_key_exchange": {
            "name": "_process_key_exchange",
            "location": 200,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "public_key": []
            }
        },
        "Encryption.generate_private_key": {
            "name": "generate_private_key",
            "location": 250,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encryption.generate_public_key": {
            "name": "generate_public_key",
            "location": 259,
            "return": [
                "Any"
            ],
            "arguments": {
                "private_key": [
                    "bytes"
                ]
            }
        },
        "Encryption._get_key_derivation": {
            "name": "_get_key_derivation",
            "location": 271,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key_material": [
                    "bytes"
                ]
            }
        },
        "Encryption._hmac_sha256": {
            "name": "_hmac_sha256",
            "location": 307,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "bytes"
                ],
                "msg": [
                    "bytes"
                ]
            }
        },
        "Encryption._pad32": {
            "name": "_pad32",
            "location": 314,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "bytes"
                ]
            }
        }
    },
    "hmt-escrow-master/hmt_escrow/crypto/exceptions.py": {},
    "hmt-escrow-master/hmt_escrow/crypto/__init__.py": {
        "decrypt": {
            "name": "decrypt",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "private_key": [
                    "bytes"
                ],
                "msg": [
                    "bytes"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "public_key": [
                    "bytes"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "is_encrypted": {
            "name": "is_encrypted",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [
                    "bytes"
                ]
            }
        }
    },
    "hmt-escrow-master/sphinx-documentation/escape_code.py": {},
    "hmt-escrow-master/sphinx-documentation/source/conf.py": {},
    "hmt-escrow-master/test/__init__.py": {},
    "hmt-escrow-master/test/hmt_escrow/test_eth_bridge.py": {
        "EthBridgeTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthBridgeTestCase.test_handle_transaction": {
            "name": "test_handle_transaction",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthBridgeTestCase.test_get_escrow": {
            "name": "test_get_escrow",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthBridgeTestCase.test_get_factory": {
            "name": "test_get_factory",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthBridgeTestCase.test_get_pub_key_from_address": {
            "name": "test_get_pub_key_from_address",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthBridgeTestCase.test_set_pub_key_at_address": {
            "name": "test_set_pub_key_at_address",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/test_job.py": {
        "JobTestCase.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_lauch": {
            "name": "test_lauch",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_status": {
            "name": "test_status",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_manifest_url": {
            "name": "test_manifest_url",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_init": {
            "name": "test_job_init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_launch": {
            "name": "test_job_launch",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_setup": {
            "name": "test_job_setup",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_add_trusted_handlers": {
            "name": "test_job_add_trusted_handlers",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_bulk_payout": {
            "name": "test_job_bulk_payout",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_bulk_payout_with_encryption_option": {
            "name": "test_job_bulk_payout_with_encryption_option",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_abort": {
            "name": "test_job_abort",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_cancel": {
            "name": "test_job_cancel",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_status": {
            "name": "test_job_status",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_job_balance": {
            "name": "test_job_balance",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_launch_failure": {
            "name": "test_launch_failure",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test__raffle_txn_retry": {
            "name": "test__raffle_txn_retry",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTestCase.test_get_hmt_balance": {
            "name": "test_get_hmt_balance",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/test_storage.py": {
        "StorageTest.test_download": {
            "name": "test_download",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageTest.test_upload": {
            "name": "test_upload",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageTest.test_upload_with_encryption_option": {
            "name": "test_upload_with_encryption_option",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/__init__.py": {},
    "hmt-escrow-master/test/hmt_escrow/crypto/test_crypto.py": {
        "EncryptionServiceTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_encrypt": {
            "name": "test_encrypt",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_decrypt": {
            "name": "test_decrypt",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_is_encrypted": {
            "name": "test_is_encrypted",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/crypto/test_encryption.py": {
        "EncryptionServiceTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_private_key_generation": {
            "name": "test_private_key_generation",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_generate_public_key_from_private_key": {
            "name": "test_generate_public_key_from_private_key",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_is_encrypted": {
            "name": "test_is_encrypted",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_encrypt": {
            "name": "test_encrypt",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionServiceTest.test_decrypt": {
            "name": "test_decrypt",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/crypto/__init__.py": {},
    "hmt-escrow-master/test/hmt_escrow/utils/job.py": {
        "create_job": {
            "name": "create_job",
            "location": 9,
            "return": [
                "hmt_escrow.job.Job"
            ],
            "arguments": {
                "manifest": [],
                "gas_payer": [
                    "Optional[str]"
                ],
                "gas_payer_priv": [
                    "Optional[str]"
                ]
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/utils/manifest.py": {
        "test_manifest": {
            "name": "test_manifest",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "number_of_tasks": [],
                "bid_amount": [],
                "oracle_stake": [],
                "expiration_date": [],
                "minimum_trust": [],
                "request_type": [],
                "request_config": [],
                "job_mode": []
            }
        }
    },
    "hmt-escrow-master/test/hmt_escrow/utils/__init__.py": {}
}
{
    "hobbit-core-master/setup.py": {
        "gen_data": {
            "name": "gen_data",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "data_root": []
            }
        }
    },
    "hobbit-core-master/docs/conf.py": {},
    "hobbit-core-master/hobbit/bootstrap.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "common_options": {
            "name": "common_options",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": []
            }
        },
        "new": {
            "name": "new",
            "location": 42,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "port": [],
                "dist": [],
                "template": [],
                "force": [],
                "celery": []
            }
        }
    },
    "hobbit-core-master/hobbit/devtools.py": {
        "dev": {
            "name": "dev",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 28,
            "return": [],
            "arguments": {
                "ctx": [],
                "all_": [],
                "hooks": [],
                "pipenv": []
            }
        },
        "BootstrapGroup.cmds": {
            "name": "cmds",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hobbit-core-master/hobbit/__init__.py": {
        "main": {
            "name": "main",
            "location": 102,
            "return": [],
            "arguments": {
                "ctx": [],
                "echo": []
            }
        },
        "HobbitCommand.format_options": {
            "name": "format_options",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "HobbitGroup.list_commands": {
            "name": "list_commands",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "HobbitGroup.get_command": {
            "name": "get_command",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "cmd_name": []
            }
        },
        "HobbitGroup.cmds": {
            "name": "cmds",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HobbitGroup.format_options": {
            "name": "format_options",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "HobbitGroup.format_commands": {
            "name": "format_commands",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        }
    },
    "hobbit-core-master/hobbit/handlers/bootstrap.py": {
        "regex_replace": {
            "name": "regex_replace",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "find": [],
                "replace": []
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 19,
            "return": [],
            "arguments": {
                "dist": []
            }
        },
        "render_project": {
            "name": "render_project",
            "location": 31,
            "return": [],
            "arguments": {
                "ctx": [],
                "dist": [],
                "tpl_path": []
            }
        },
        "render_file": {
            "name": "render_file",
            "location": 60,
            "return": [],
            "arguments": {
                "ctx": [],
                "dist": [],
                "fn": [],
                "data": []
            }
        },
        "validate_template_path": {
            "name": "validate_template_path",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        }
    },
    "hobbit-core-master/hobbit/handlers/devtools.py": {
        "dev_init": {
            "name": "dev_init",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "all_": [],
                "hooks": [],
                "pipenv": []
            }
        }
    },
    "hobbit-core-master/hobbit/handlers/__init__.py": {
        "echo": {
            "name": "echo",
            "location": 5,
            "return": [],
            "arguments": {
                "ctx": [],
                "msg": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/db.py": {
        "reference_col": {
            "name": "reference_col",
            "location": 150,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "tablename": [
                    "str"
                ],
                "nullable": [
                    "bool"
                ],
                "pk_name": [
                    "str"
                ],
                "onupdate": [
                    "str"
                ],
                "ondelete": [
                    "str"
                ]
            }
        },
        "transaction": {
            "name": "transaction",
            "location": 309,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "nested": [
                    "bool"
                ]
            }
        },
        "_BaseModel.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SurrogatePK.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModelMeta.__new__": {
            "name": "__new__",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "EnumExtMeta.__new__": {
            "name": "__new__",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "EnumExt.strict_dump": {
            "name": "strict_dump",
            "location": 230,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EnumExt.dump": {
            "name": "dump",
            "location": 245,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "label": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EnumExt.load": {
            "name": "load",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "val": [
                    "Union[(int, str)]"
                ]
            }
        },
        "EnumExt.to_opts": {
            "name": "to_opts",
            "location": 286,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "cls": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "transaction.wrapper": {
            "name": "wrapper",
            "location": 361,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "transaction.wrapper.inner": {
            "name": "inner",
            "location": 363,
            "return": [],
            "arguments": {}
        }
    },
    "hobbit-core-master/hobbit_core/err_handler.py": {
        "ErrHandler.handler_werkzeug_exceptions": {
            "name": "handler_werkzeug_exceptions",
            "location": 31,
            "return": [
                "hobbit_core.response.Result"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "ErrHandler.handler_sqlalchemy_orm_exc": {
            "name": "handler_sqlalchemy_orm_exc",
            "location": 38,
            "return": [
                "hobbit_core.response.Result"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "ErrHandler.handler_assertion_error": {
            "name": "handler_assertion_error",
            "location": 47,
            "return": [
                "hobbit_core.response.Result"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "ErrHandler.handler_hobbit_core_err_handler": {
            "name": "handler_hobbit_core_err_handler",
            "location": 52,
            "return": [
                "hobbit_core.response.FailedResult"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "ErrHandler.handler_others": {
            "name": "handler_others",
            "location": 56,
            "return": [
                "hobbit_core.response.ServerErrorResult"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        },
        "ErrHandler.handler": {
            "name": "handler",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "e": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/pagination.py": {
        "pagination": {
            "name": "pagination",
            "location": 41,
            "return": [
                "PaginationType"
            ],
            "arguments": {
                "obj": [
                    "model.DefaultMeta"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ],
                "order_by": [
                    "Optional[Union[(str, List[str])]]"
                ],
                "query_exp": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/response.py": {
        "gen_response": {
            "name": "gen_response",
            "location": 27,
            "return": [
                "RespType"
            ],
            "arguments": {
                "code": [
                    "int"
                ],
                "message": [
                    "str"
                ],
                "detail": [
                    "Optional[str]"
                ],
                "data": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "status": [],
                "headers": [],
                "mimetype": [],
                "content_type": [],
                "direct_passthrough": []
            }
        },
        "SuccessResult.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "code": [
                    "Optional[int]"
                ],
                "detail": [],
                "status": [
                    "Optional[int]"
                ],
                "data": []
            }
        },
        "FailedResult.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "code": [
                    "Optional[int]"
                ],
                "detail": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/schemas.py": {
        "ORMSchema.make_instance": {
            "name": "make_instance",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "many": []
            }
        },
        "EnumSetMeta.gen_func": {
            "name": "gen_func",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "decorator": [],
                "field_name": [],
                "enum": [],
                "verbose": []
            }
        },
        "EnumSetMeta.__new__": {
            "name": "__new__",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "EnumSetMeta.gen_func.wrapper": {
            "name": "wrapper",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "many": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/utils.py": {
        "secure_filename": {
            "name": "secure_filename",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_get_init_args": {
            "name": "_get_init_args",
            "location": 118,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "instance": [],
                "base_class": []
            }
        },
        "use_kwargs": {
            "name": "use_kwargs",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "argmap": [],
                "schema_kwargs": [
                    "Optional[dict]"
                ]
            }
        },
        "import_subs": {
            "name": "import_subs",
            "location": 182,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "locals_": [],
                "modules_only": [
                    "bool"
                ]
            }
        },
        "bulk_create_or_update_on_duplicate": {
            "name": "bulk_create_or_update_on_duplicate",
            "location": 234,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "db": [],
                "model_cls": [],
                "items": [],
                "updated_at": [],
                "batch_size": []
            }
        },
        "ParamsDict.update": {
            "name": "update",
            "location": 38,
            "return": [
                "_TParamsDict"
            ],
            "arguments": {
                "self": [
                    "_TParamsDict"
                ],
                "other": []
            }
        },
        "dict2object.__getattr__": {
            "name": "__getattr__",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "dict2object.__setattr__": {
            "name": "__setattr__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "use_kwargs.factory": {
            "name": "factory",
            "location": 162,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/webargs.py": {
        "strip_whitespace": {
            "name": "strip_whitespace",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "CustomParser._load_location_data": {
            "name": "_load_location_data",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hobbit-core-master/hobbit_core/__init__.py": {
        "HobbitManager.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "db": []
            }
        },
        "HobbitManager.init_app": {
            "name": "init_app",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "db": []
            }
        }
    },
    "hobbit-core-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 10,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "client": {
            "name": "client",
            "location": 22,
            "return": [],
            "arguments": {
                "app": [],
                "request": []
            }
        },
        "assert_session": {
            "name": "assert_session",
            "location": 27,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "db_session": {
            "name": "db_session",
            "location": 38,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "auto_session": {
            "name": "auto_session",
            "location": 46,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "session": {
            "name": "session",
            "location": 57,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "request_context": {
            "name": "request_context",
            "location": 70,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "web_request": {
            "name": "web_request",
            "location": 78,
            "return": [],
            "arguments": {
                "request_context": []
            }
        },
        "parser": {
            "name": "parser",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "app.teardown": {
            "name": "teardown",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "MockRequestParser.load_querystring": {
            "name": "load_querystring",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "schema": []
            }
        }
    },
    "hobbit-core-master/tests/test_db.py": {
        "TestSurrogatePK.test_surrogate_pk": {
            "name": "test_surrogate_pk",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assert_session": []
            }
        },
        "TestBaseModel.upper_conf": {
            "name": "upper_conf",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "request": []
            }
        },
        "TestBaseModel.test_oracle": {
            "name": "test_oracle",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "conf": [],
                "excepted": [],
                "upper_conf": []
            }
        },
        "TestEnumExt.test_key_index": {
            "name": "test_key_index",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumExt.TaskState": {
            "name": "TaskState",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEnumExt.test_strict_dump": {
            "name": "test_strict_dump",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TaskState": []
            }
        },
        "TestEnumExt.test_dump": {
            "name": "test_dump",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TaskState": []
            }
        },
        "TestEnumExt.test_load": {
            "name": "test_load",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TaskState": []
            }
        },
        "TestEnumExt.test_to_opts": {
            "name": "test_to_opts",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TaskState": []
            }
        },
        "TestTransaction.clear_user": {
            "name": "clear_user",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_transaction_decorator": {
            "name": "test_transaction_decorator",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_used_with_commit_raised": {
            "name": "test_used_with_commit_raised",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_used_with_begin_nested": {
            "name": "test_used_with_begin_nested",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_fall_used": {
            "name": "test_fall_used",
            "location": 189,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_nested_self_raise": {
            "name": "test_nested_self_raise",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true": {
            "name": "test_nested_self_with_nested_arg_is_true",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true_commit_raise": {
            "name": "test_nested_self_with_nested_arg_is_true_commit_raise",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_notautocommit_use_nested_alone_commit_raise": {
            "name": "test_notautocommit_use_nested_alone_commit_raise",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_session": []
            }
        },
        "TestTransaction.test_autocommit_use_nested_alone_raise": {
            "name": "test_autocommit_use_nested_alone_raise",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_session": []
            }
        },
        "TestTransaction.test_autocommittrue_not_excepted": {
            "name": "test_autocommittrue_not_excepted",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_session": [],
                "assert_session": []
            }
        },
        "TestNestedSessionSignal.test_transaction_signal_success": {
            "name": "test_transaction_signal_success",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "assert_session": []
            }
        },
        "TestNestedSessionSignal.test_transaction_signal_dailed": {
            "name": "test_transaction_signal_dailed",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "assert_session": []
            }
        },
        "TestTransaction.test_transaction_decorator.create_user": {
            "name": "create_user",
            "location": 131,
            "return": [],
            "arguments": {
                "raise_exception": []
            }
        },
        "TestTransaction.test_used_with_commit_raised.create_user": {
            "name": "create_user",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_used_with_begin_nested.create_user": {
            "name": "create_user",
            "location": 169,
            "return": [],
            "arguments": {
                "commit_inner": []
            }
        },
        "TestTransaction.test_fall_used.create_user1": {
            "name": "create_user1",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_fall_used.create_user2": {
            "name": "create_user2",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_fall_used.view_func1": {
            "name": "view_func1",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_fall_used.view_func2": {
            "name": "view_func2",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_raise.create_user": {
            "name": "create_user",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_raise.view_func": {
            "name": "view_func",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true.create_user": {
            "name": "create_user",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true.view_func": {
            "name": "view_func",
            "location": 250,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true_commit_raise.create_user": {
            "name": "create_user",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_nested_self_with_nested_arg_is_true_commit_raise.view_func": {
            "name": "view_func",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_notautocommit_use_nested_alone_commit_raise.create_user": {
            "name": "create_user",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "TestTransaction.test_autocommit_use_nested_alone_raise.create_user": {
            "name": "create_user",
            "location": 286,
            "return": [],
            "arguments": {}
        }
    },
    "hobbit-core-master/tests/test_err_handler.py": {
        "TestErrHandler.test_assertion_error": {
            "name": "test_assertion_error",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestErrHandler.test_sqlalchemy_orm_exc": {
            "name": "test_sqlalchemy_orm_exc",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestErrHandler.test_werkzeug_exceptions": {
            "name": "test_werkzeug_exceptions",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestErrHandler.test_hobbit_exception": {
            "name": "test_hobbit_exception",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestErrHandler.test_others": {
            "name": "test_others",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "hobbit-core-master/tests/test_fixture.py": {
        "TestFixture.test_session": {
            "name": "test_session",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assert_session": []
            }
        }
    },
    "hobbit-core-master/tests/test_hobbit.py": {
        "TestHobbit.setup_method": {
            "name": "setup_method",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestHobbit.teardown_method": {
            "name": "teardown_method",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "TestHobbit.runner": {
            "name": "runner",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHobbit.test_not_exist_cmd": {
            "name": "test_not_exist_cmd",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestHobbit.test_new_cmd": {
            "name": "test_new_cmd",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "runner": [],
                "name": [],
                "template": [],
                "celery_": [],
                "dist": []
            }
        },
        "TestHobbit.test_dev_init_cmd": {
            "name": "test_dev_init_cmd",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        }
    },
    "hobbit-core-master/tests/test_pagination.py": {
        "TestPagination.test_page_params": {
            "name": "test_page_params",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_request": [],
                "parser": []
            }
        },
        "TestPagination.test_pagination": {
            "name": "test_pagination",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestPagination.test_page_params.viewfunc": {
            "name": "viewfunc",
            "location": 17,
            "return": [],
            "arguments": {
                "page": [],
                "page_size": [],
                "order_by": []
            }
        }
    },
    "hobbit-core-master/tests/test_response.py": {
        "TestResponse.test_gen_response": {
            "name": "test_gen_response",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "input_": [],
                "excepted": []
            }
        },
        "TestResponse.test_result": {
            "name": "test_result",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponse.test_success_result": {
            "name": "test_success_result",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestResponse.test_failed_result": {
            "name": "test_failed_result",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponse.test_results": {
            "name": "test_results",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "excepted_status_code": []
            }
        }
    },
    "hobbit-core-master/tests/test_schemas.py": {
        "TestSchema.test_model_schema": {
            "name": "test_model_schema",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "hobbit-core-master/tests/test_utils.py": {
        "TestUtils.test_params_dict": {
            "name": "test_params_dict",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_dict2object": {
            "name": "test_dict2object",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_secure_filename": {
            "name": "test_secure_filename",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "excepted": []
            }
        },
        "TestUseKwargs.test_use_kwargs_with_partial": {
            "name": "test_use_kwargs_with_partial",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_use_kwargs_without_partial": {
            "name": "test_use_kwargs_without_partial",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_use_kwargs_with_partial2": {
            "name": "test_use_kwargs_with_partial2",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_use_kwargs_without_partial2": {
            "name": "test_use_kwargs_without_partial2",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_use_kwargs_dictargmap_partial": {
            "name": "test_use_kwargs_dictargmap_partial",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_use_kwargs_dictargmap_partial2": {
            "name": "test_use_kwargs_dictargmap_partial2",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_base_use_kwargs_dictargmap_whitout_partial": {
            "name": "test_base_use_kwargs_dictargmap_whitout_partial",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestUseKwargs.test_auto_trim": {
            "name": "test_auto_trim",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestImportSubs.test_import_subs": {
            "name": "test_import_subs",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestBulkInsertOrUpdate.test_bulk_create_or_update_on_duplicate": {
            "name": "test_bulk_create_or_update_on_duplicate",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "item_length": [],
                "model_cls": [],
                "updated_at_field_name": []
            }
        }
    },
    "hobbit-core-master/tests/__init__.py": {
        "rmdir": {
            "name": "rmdir",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 40,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "BaseTest.setup_class": {
            "name": "setup_class",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTest.teardown_class": {
            "name": "teardown_class",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTest.teardown_method": {
            "name": "teardown_method",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "chdir.wrapper": {
            "name": "wrapper",
            "location": 41,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "chdir.wrapper.inner": {
            "name": "inner",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "hobbit-core-master/tests/importsub/models.py": {},
    "hobbit-core-master/tests/importsub/others.py": {
        "b": {
            "name": "b",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hobbit-core-master/tests/importsub/schemas.py": {},
    "hobbit-core-master/tests/importsub/services.py": {},
    "hobbit-core-master/tests/importsub/__init__.py": {},
    "hobbit-core-master/tests/test_app/exts.py": {},
    "hobbit-core-master/tests/test_app/models.py": {
        "signalling": {
            "name": "signalling",
            "location": 23,
            "return": [],
            "arguments": {
                "app": [],
                "changes": []
            }
        }
    },
    "hobbit-core-master/tests/test_app/run.py": {
        "register_extensions": {
            "name": "register_extensions",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_blueprints": {
            "name": "register_blueprints",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_error_handler": {
            "name": "register_error_handler",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "init_app": {
            "name": "init_app",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "hobbit-core-master/tests/test_app/schemas.py": {},
    "hobbit-core-master/tests/test_app/views.py": {
        "wrapper_kwargs": {
            "name": "wrapper_kwargs",
            "location": 16,
            "return": [
                "dict"
            ],
            "arguments": {
                "kwargs": []
            }
        },
        "use_kwargs_with_partial": {
            "name": "use_kwargs_with_partial",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "use_kwargs_without_partial": {
            "name": "use_kwargs_without_partial",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "use_kwargs_dictargmap_partial": {
            "name": "use_kwargs_dictargmap_partial",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "base_use_kwargs_dictargmap_partial": {
            "name": "base_use_kwargs_dictargmap_partial",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "create_user_success": {
            "name": "create_user_success",
            "location": 58,
            "return": [],
            "arguments": {
                "email": []
            }
        },
        "create_user_failed": {
            "name": "create_user_failed",
            "location": 70,
            "return": [],
            "arguments": {
                "email": []
            }
        },
        "create_user_success.create_user": {
            "name": "create_user",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "create_user_failed.create_user": {
            "name": "create_user",
            "location": 72,
            "return": [],
            "arguments": {}
        }
    },
    "hobbit-core-master/tests/test_app/__init__.py": {}
}
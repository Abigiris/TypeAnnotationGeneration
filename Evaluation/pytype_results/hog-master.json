{
    "hog-master/setup.py": {},
    "hog-master/hog/const.py": {},
    "hog-master/hog/hog.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hog-master/hog/wrapped.py": {
        "wrapped_parse_args": {
            "name": "wrapped_parse_args",
            "location": 18,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "wrapped_get_logcategory": {
            "name": "wrapped_get_logcategory",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "query": [],
                "logcategories": [],
                "is_verbose": []
            }
        },
        "wrapped_get_filenames": {
            "name": "wrapped_get_filenames",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "logcategory": [],
                "interval": [],
                "is_verbose": []
            }
        },
        "wrapped_print_logs": {
            "name": "wrapped_print_logs",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "logcategory": [],
                "filenames": [],
                "is_verbose": []
            }
        }
    },
    "hog-master/hog/__init__.py": {},
    "hog-master/hog/__main__.py": {},
    "hog-master/hog/utils/args.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 7,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "_setup_parser": {
            "name": "_setup_parser",
            "location": 18,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "_parse_args_intelligently": {
            "name": "_parse_args_intelligently",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "parser": []
            }
        },
        "_are_args_valid": {
            "name": "_are_args_valid",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "logcategory": [],
                "interval": []
            }
        }
    },
    "hog-master/hog/utils/get_filenames.py": {
        "list_logfiles": {
            "name": "list_logfiles",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "directory": []
            }
        },
        "get_filenames": {
            "name": "get_filenames",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "logcategory": [],
                "interval": []
            }
        },
        "select_filenames_for_interval": {
            "name": "select_filenames_for_interval",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "filenames": [],
                "interval": []
            }
        },
        "_get_indexes_for_interval": {
            "name": "_get_indexes_for_interval",
            "location": 35,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filenames": [],
                "start_specifier": [],
                "end_specifier": []
            }
        },
        "_get_index_for_single": {
            "name": "_get_index_for_single",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "filenames": [],
                "specifier": []
            }
        },
        "_get_index_for_relative_single": {
            "name": "_get_index_for_relative_single",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "specifier": []
            }
        },
        "_get_index_for_absolute_single": {
            "name": "_get_index_for_absolute_single",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "filenames": [],
                "specifier": []
            }
        },
        "_get_slug_for_filename": {
            "name": "_get_slug_for_filename",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "hog-master/hog/utils/get_logcategory.py": {
        "list_logcategories": {
            "name": "list_logcategories",
            "location": 22,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_logcategory": {
            "name": "get_logcategory",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "query": [],
                "logcategories": []
            }
        },
        "does_name_match_pattern": {
            "name": "does_name_match_pattern",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [],
                "pattern": []
            }
        },
        "get_word_list_without_matching_word": {
            "name": "get_word_list_without_matching_word",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "word_list": [],
                "word_prefix": []
            }
        },
        "_get_words_from_name": {
            "name": "_get_words_from_name",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "has_exact_word_match": {
            "name": "has_exact_word_match",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "logcategory": [],
                "query_words": []
            }
        },
        "MultipleLogcategoriesFoundException.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logcategories": []
            }
        }
    },
    "hog-master/hog/utils/print_logs.py": {
        "print_logs": {
            "name": "print_logs",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "logcategory": [],
                "filenames": []
            }
        }
    },
    "hog-master/hog/utils/verify_selected_logfiles.py": {
        "verify_selected_logfiles": {
            "name": "verify_selected_logfiles",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "hog-master/hog/utils/__init__.py": {},
    "hog-master/tests/data.py": {},
    "hog-master/tests/test_does_name_match_pattern.py": {
        "DoesNameMatchPatternTestCase.test_single_word_exact_match": {
            "name": "test_single_word_exact_match",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_single_word_prefix_match": {
            "name": "test_single_word_prefix_match",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_single_word_no_match": {
            "name": "test_single_word_no_match",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_two_words_exact_match": {
            "name": "test_two_words_exact_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_two_words_switched_match": {
            "name": "test_two_words_switched_match",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_two_words_prefix_match": {
            "name": "test_two_words_prefix_match",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_two_words_switched_prefix_match": {
            "name": "test_two_words_switched_prefix_match",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_two_words_no_match": {
            "name": "test_two_words_no_match",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_several_words_specificity_beats_order": {
            "name": "test_several_words_specificity_beats_order",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoesNameMatchPatternTestCase.test_dash_equals_underscore": {
            "name": "test_dash_equals_underscore",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hog-master/tests/test_get_logcategory.py": {
        "GetLogcategoryTestCase.test_no_match": {
            "name": "test_no_match",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetLogcategoryTestCase.test_exact_match": {
            "name": "test_exact_match",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetLogcategoryTestCase.test_intelligent_match": {
            "name": "test_intelligent_match",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetLogcategoryTestCase.test_word_order_is_irrelevant": {
            "name": "test_word_order_is_irrelevant",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetLogcategoryTestCase.test_underqualified_name_raises": {
            "name": "test_underqualified_name_raises",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetLogcategoryTestCase.test_multiple_matches_exact_word_match_wins": {
            "name": "test_multiple_matches_exact_word_match_wins",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasExactWordMatchTestCase.test_single_word_matches": {
            "name": "test_single_word_matches",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasExactWordMatchTestCase.test_multiple_words_no_exact_match": {
            "name": "test_multiple_words_no_exact_match",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasExactWordMatchTestCase.test_multiple_words_one_exact_match": {
            "name": "test_multiple_words_one_exact_match",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasExactWordMatchTestCase.test_multiple_words_multiple_exact_matches": {
            "name": "test_multiple_words_multiple_exact_matches",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hog-master/tests/test_get_word_list_without_matching_word.py": {
        "GetWordListWithoutMatchingWordTestCase.test_single_word_exact_match": {
            "name": "test_single_word_exact_match",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_single_word_prefix_match": {
            "name": "test_single_word_prefix_match",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_exact_match_start_of_list": {
            "name": "test_multiple_words_exact_match_start_of_list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_prefix_match_start_of_list": {
            "name": "test_multiple_words_prefix_match_start_of_list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_exact_match_inside_list": {
            "name": "test_multiple_words_exact_match_inside_list",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_prefix_match_inside_list": {
            "name": "test_multiple_words_prefix_match_inside_list",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_exact_match_end_of_list": {
            "name": "test_multiple_words_exact_match_end_of_list",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_prefix_match_end_of_list": {
            "name": "test_multiple_words_prefix_match_end_of_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_ambigious_prefix": {
            "name": "test_multiple_words_ambigious_prefix",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_multiple_words_unambigious_prefix": {
            "name": "test_multiple_words_unambigious_prefix",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_empty_list_raises": {
            "name": "test_empty_list_raises",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetWordListWithoutMatchingWordTestCase.test_missing_word_raises": {
            "name": "test_missing_word_raises",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hog-master/tests/test_select_filenames.py": {
        "SelectFilenamesForRelativeIntervalTestCase.test_default_get_last_single": {
            "name": "test_default_get_last_single",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_single": {
            "name": "test_get_relative_single",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_single_out_of_range": {
            "name": "test_get_relative_single_out_of_range",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_interval_fully_specified": {
            "name": "test_get_relative_interval_fully_specified",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_relative_interval_edge_case": {
            "name": "test_relative_interval_edge_case",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_interval_open_left": {
            "name": "test_get_relative_interval_open_left",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_interval_open_right": {
            "name": "test_get_relative_interval_open_right",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForRelativeIntervalTestCase.test_get_relative_interval_end_before_start_is_empty": {
            "name": "test_get_relative_interval_end_before_start_is_empty",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_one_digit_no_leading_zero": {
            "name": "test_get_absolute_single_one_digit_no_leading_zero",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_one_digit_with_leading_zero": {
            "name": "test_get_absolute_single_one_digit_with_leading_zero",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_last": {
            "name": "test_get_absolute_single_last",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_gzip": {
            "name": "test_get_absolute_single_gzip",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_gzip_by_day": {
            "name": "test_get_absolute_single_gzip_by_day",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_gzip_by_month": {
            "name": "test_get_absolute_single_gzip_by_month",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_gzip_by_stub_year": {
            "name": "test_get_absolute_single_gzip_by_stub_year",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_single_gzip_by_full_year": {
            "name": "test_get_absolute_single_gzip_by_full_year",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_invalid_absolute_single_raises": {
            "name": "test_get_invalid_absolute_single_raises",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_interval_hour_to_hour": {
            "name": "test_get_absolute_interval_hour_to_hour",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_interval_end_before_start_is_empty": {
            "name": "test_get_absolute_interval_end_before_start_is_empty",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_interval_day_to_hour": {
            "name": "test_get_absolute_interval_day_to_hour",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_interval_open_left": {
            "name": "test_get_absolute_interval_open_left",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForAbsoluteIntervalTestCase.test_get_absolute_interval_open_right": {
            "name": "test_get_absolute_interval_open_right",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForMixedIntervalTestCase.test_get_relative_to_absolute_interval": {
            "name": "test_get_relative_to_absolute_interval",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectFilenamesForMixedIntervalTestCase.test_get_absolute_to_relative_interval": {
            "name": "test_get_absolute_to_relative_interval",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hog-master/tests/test_wrapped.py": {
        "WrappedParseArgsTestCase.test_stuff_here": {
            "name": "test_stuff_here",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hog-master/tests/__init__.py": {}
}
{
    "hpcpm-master/api/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 6,
            "return": [],
            "arguments": {
                "reqs": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/app.py": {
        "initialize": {
            "name": "initialize",
            "location": 19,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "run": {
            "name": "run",
            "location": 26,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "start_request": {
            "name": "start_request",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "end_request": {
            "name": "end_request",
            "location": 43,
            "return": [],
            "arguments": {
                "response_class": []
            }
        },
        "statistics_data_plot": {
            "name": "statistics_data_plot",
            "location": 56,
            "return": [],
            "arguments": {
                "name": [],
                "device_id": []
            }
        },
        "statistics_data_plot.autolabel": {
            "name": "autolabel",
            "location": 89,
            "return": [],
            "arguments": {
                "rects": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "prepare_app_configuration": {
            "name": "prepare_app_configuration",
            "location": 18,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 25,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "add_arguments_to_parser": {
            "name": "add_arguments_to_parser",
            "location": 41,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "try_to_configure_logging": {
            "name": "try_to_configure_logging",
            "location": 54,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 61,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "try_to_parse_config_file": {
            "name": "try_to_parse_config_file",
            "location": 66,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 73,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "handle_parsing_error": {
            "name": "handle_parsing_error",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "run_api": {
            "name": "run_api",
            "location": 85,
            "return": [],
            "arguments": {
                "config": [],
                "port": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/version.py": {},
    "hpcpm-master/api/hpcpm/api/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/helpers/constants.py": {},
    "hpcpm-master/api/hpcpm/api/helpers/database.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.configure": {
            "name": "configure",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Database.get_computation_node_info": {
            "name": "get_computation_node_info",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Database.get_computation_node_info_by_address": {
            "name": "get_computation_node_info_by_address",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": []
            }
        },
        "Database.get_power_limit_for_device": {
            "name": "get_power_limit_for_device",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.get_soft_limit_for_device": {
            "name": "get_soft_limit_for_device",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.get_list_of_nodes": {
            "name": "get_list_of_nodes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "sorting_order": [],
                "name_filter": [],
                "pagination": [],
                "address": []
            }
        },
        "Database.replace_computation_node_info": {
            "name": "replace_computation_node_info",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": []
            }
        },
        "Database.replace_power_limit_for_device": {
            "name": "replace_power_limit_for_device",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "power_limit": []
            }
        },
        "Database.replace_soft_limit_for_device": {
            "name": "replace_soft_limit_for_device",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "soft_limit": []
            }
        },
        "Database.delete_computation_node_info": {
            "name": "delete_computation_node_info",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Database.delete_power_limit_infos": {
            "name": "delete_power_limit_infos",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Database.delete_power_limit_info": {
            "name": "delete_power_limit_info",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.delete_soft_limit_info": {
            "name": "delete_soft_limit_info",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.replace_stats_interval_info": {
            "name": "replace_stats_interval_info",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "interval_info": []
            }
        },
        "Database.delete_stats_interval_info": {
            "name": "delete_stats_interval_info",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.get_stats_interval_info": {
            "name": "get_stats_interval_info",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.check_stats_present": {
            "name": "check_stats_present",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.replace_stats_data": {
            "name": "replace_stats_data",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "stats_data": []
            }
        },
        "Database.update_stats_data": {
            "name": "update_stats_data",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "stats_data": []
            }
        },
        "Database.get_stats_data": {
            "name": "get_stats_data",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.get_stats_data_for_time": {
            "name": "get_stats_data_for_time",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "date_time": []
            }
        },
        "Database.delete_stats_for_time": {
            "name": "delete_stats_for_time",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "stats_data": []
            }
        },
        "Database.get_rules": {
            "name": "get_rules",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.get_rules_of_type": {
            "name": "get_rules_of_type",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "rule_type": []
            }
        },
        "Database.get_rule_for_device": {
            "name": "get_rule_for_device",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.replace_rule_for_device": {
            "name": "replace_rule_for_device",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "rule": []
            }
        },
        "Database.delete_rule": {
            "name": "delete_rule",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Database.get_last_power_usage": {
            "name": "get_last_power_usage",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/helpers/requests.py": {
        "get_node_information": {
            "name": "get_node_information",
            "location": 4,
            "return": [],
            "arguments": {
                "address": [],
                "port": []
            }
        },
        "delete_power_limit": {
            "name": "delete_power_limit",
            "location": 9,
            "return": [],
            "arguments": {
                "address": [],
                "port": [],
                "device_id": [],
                "device_type": []
            }
        },
        "put_power_limit": {
            "name": "put_power_limit",
            "location": 14,
            "return": [],
            "arguments": {
                "address": [],
                "port": [],
                "device_id": [],
                "device_type": [],
                "power_limit": []
            }
        },
        "get_power_limit": {
            "name": "get_power_limit",
            "location": 20,
            "return": [],
            "arguments": {
                "address": [],
                "port": [],
                "device_id": [],
                "device_type": []
            }
        },
        "get_power_usage": {
            "name": "get_power_usage",
            "location": 25,
            "return": [],
            "arguments": {
                "address": [],
                "port": [],
                "device_id": [],
                "device_type": []
            }
        },
        "get_constraints": {
            "name": "get_constraints",
            "location": 30,
            "return": [],
            "arguments": {
                "address": [],
                "port": [],
                "device_id": [],
                "device_type": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/helpers/utils.py": {
        "abort_when_port_invalid": {
            "name": "abort_when_port_invalid",
            "location": 6,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "abort_when_not_int": {
            "name": "abort_when_not_int",
            "location": 17,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "abort_when_node_not_found": {
            "name": "abort_when_node_not_found",
            "location": 25,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "abort_when_device_not_found": {
            "name": "abort_when_device_not_found",
            "location": 35,
            "return": [],
            "arguments": {
                "device_id": [],
                "computation_node": []
            }
        },
        "get_com_node_and_dev_type": {
            "name": "get_com_node_and_dev_type",
            "location": 41,
            "return": [],
            "arguments": {
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/helpers/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/resources/ApiSpec.py": {
        "ApiSpec.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/resources/endpoints/RuleTypes.py": {
        "RuleTypes.get": {
            "name": "get",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/Status.py": {
        "Status.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/__init__.py": {},
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/AllComputationNodes.py": {
        "AllComputationNodes.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/AllRules.py": {
        "AllRules.delete": {
            "name": "delete",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/ComputationNode.py": {
        "ComputationNode.put": {
            "name": "put",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ComputationNode.get": {
            "name": "get",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ComputationNode.delete": {
            "name": "delete",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/LastPowerUsage.py": {
        "LastPowerUsage.get": {
            "name": "get",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/PowerLimit.py": {
        "PowerLimit.put": {
            "name": "put",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "PowerLimit.get": {
            "name": "get",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "PowerLimit.delete": {
            "name": "delete",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/PowerLimitConstraints.py": {
        "PowerLimitConstraints.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/PowerUsage.py": {
        "PowerUsage.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/Rule.py": {
        "Rule.put": {
            "name": "put",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Rule.get": {
            "name": "get",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "Rule.delete": {
            "name": "delete",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/SoftLimit.py": {
        "SoftLimit.put": {
            "name": "put",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "SoftLimit.get": {
            "name": "get",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "SoftLimit.delete": {
            "name": "delete",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/StatisticsData.py": {
        "StatisticsData.put": {
            "name": "put",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "date_time": []
            }
        },
        "StatisticsData.get": {
            "name": "get",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "date_time": []
            }
        },
        "StatisticsData.delete": {
            "name": "delete",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": [],
                "date_time": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/StatisticsDataWithInterval.py": {
        "StatisticsDataWithInterval.get": {
            "name": "get",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "StatisticsDataWithInterval._find": {
            "name": "_find",
            "location": 68,
            "return": [],
            "arguments": {
                "func": [],
                "seq": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/StatisticsInterval.py": {
        "set_statistics_interval": {
            "name": "set_statistics_interval",
            "location": 79,
            "return": [],
            "arguments": {
                "node_name": [],
                "device_id": [],
                "statistics_interval": []
            }
        },
        "StatisticsInterval.put": {
            "name": "put",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "StatisticsInterval.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        },
        "StatisticsInterval.delete": {
            "name": "delete",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/WithdrawAll.py": {
        "WithdrawAll.post": {
            "name": "post",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/WithdrawRule.py": {
        "WithdrawRule.post": {
            "name": "post",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/api/hpcpm/api/resources/endpoints/nodes/computation_node/__init__.py": {},
    "hpcpm-master/api/tests/test_app.py": {
        "TestApp.create_app": {
            "name": "create_app",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestApp.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_start_end_request": {
            "name": "test_start_end_request",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/api/tests/test_main.py": {
        "TestMain.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main": {
            "name": "test_main",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "m_run_api": []
            }
        },
        "TestMain.test_prepare_app_configuration": {
            "name": "test_prepare_app_configuration",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "m_try_to_parse_config_file": [],
                "m_parse_args": [],
                "m_try_to_configure_logging": []
            }
        },
        "TestMain.test_parse_args": {
            "name": "test_parse_args",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "m_add_arguments_to_parser": [],
                "m_create_parser": []
            }
        },
        "TestMain.test_create_parser": {
            "name": "test_create_parser",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "m_ArgumentParser": []
            }
        },
        "TestMain.test_add_arguments_to_parser": {
            "name": "test_add_arguments_to_parser",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_try_to_configure_logging_no_exception": {
            "name": "test_try_to_configure_logging_no_exception",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_try_to_configure_logging_ParsingError": {
            "name": "test_try_to_configure_logging_ParsingError",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "m_handle_parsing_error": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_try_to_configure_logging_exception": {
            "name": "test_try_to_configure_logging_exception",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_configure_logging": {
            "name": "test_configure_logging",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "m_fileConfig": []
            }
        },
        "TestMain.test_try_to_parse_config_file": {
            "name": "test_try_to_parse_config_file",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_try_to_parse_config_file_ParsingError": {
            "name": "test_try_to_parse_config_file_ParsingError",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "m_handle_parsing_error": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_try_to_parse_config_file_exception": {
            "name": "test_try_to_parse_config_file_exception",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_parse_config_file": {
            "name": "test_parse_config_file",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "m_ConfigParser": []
            }
        },
        "TestMain.test_handle_parsing_error": {
            "name": "test_handle_parsing_error",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "m_exit": []
            }
        },
        "TestMain.test_run_api": {
            "name": "test_run_api",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "m_run": [],
                "m_initialize": []
            }
        }
    },
    "hpcpm-master/api/tests/__init__.py": {},
    "hpcpm-master/management/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 6,
            "return": [],
            "arguments": {
                "reqs": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/__init__.py": {},
    "hpcpm-master/management/hpcpm/management/api_requests.py": {
        "ApiRequests.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "base_uri": []
            }
        },
        "ApiRequests.get_all_computation_nodes_info": {
            "name": "get_all_computation_nodes_info",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiRequests.get_computation_node_details": {
            "name": "get_computation_node_details",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": []
            }
        },
        "ApiRequests.get_power_limit_info": {
            "name": "get_power_limit_info",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": []
            }
        },
        "ApiRequests.put_power_limit_info": {
            "name": "put_power_limit_info",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": [],
                "limit": []
            }
        },
        "ApiRequests.delete_power_limit_info": {
            "name": "delete_power_limit_info",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": []
            }
        },
        "ApiRequests.get_statistics_interval_info": {
            "name": "get_statistics_interval_info",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": []
            }
        },
        "ApiRequests.put_statistics_data": {
            "name": "put_statistics_data",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": [],
                "date_time": [],
                "power_usage": []
            }
        },
        "ApiRequests.get_rule_for_device": {
            "name": "get_rule_for_device",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": []
            }
        },
        "ApiRequests.put_rule_for_device": {
            "name": "put_rule_for_device",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": [],
                "rule": []
            }
        },
        "ApiRequests.delete_rule_for_device": {
            "name": "delete_rule_for_device",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/app.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "App._update_device_power_limit": {
            "name": "_update_device_power_limit",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "device": [],
                "node_name": [],
                "backend_requests": []
            }
        },
        "App.check_and_set_nodes_power_limit": {
            "name": "check_and_set_nodes_power_limit",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.gather_statistics_data": {
            "name": "gather_statistics_data",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App._gather_device_stats": {
            "name": "_gather_device_stats",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device": [],
                "backend_requests": []
            }
        },
        "App.run_rules": {
            "name": "run_rules",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App._run_rule_for_device": {
            "name": "_run_rule_for_device",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "node_name": [],
                "device": [],
                "rule_types": []
            }
        },
        "App.do_work": {
            "name": "do_work",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.run": {
            "name": "run",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/backend_requests.py": {
        "BackendRequests.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "base_uri": []
            }
        },
        "BackendRequests.get_power_limit_for_device": {
            "name": "get_power_limit_for_device",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "device_type": [],
                "device_id": []
            }
        },
        "BackendRequests.set_power_limit_for_device": {
            "name": "set_power_limit_for_device",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "device_type": [],
                "device_id": [],
                "power_limit": []
            }
        },
        "BackendRequests.get_power_usage_for_device": {
            "name": "get_power_usage_for_device",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "device_type": [],
                "device_id": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/helpers.py": {
        "pairwise": {
            "name": "pairwise",
            "location": 4,
            "return": [],
            "arguments": {
                "iterable": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "prepare_app_configuration": {
            "name": "prepare_app_configuration",
            "location": 18,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 25,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "create_parser": {
            "name": "create_parser",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "add_arguments_to_parser": {
            "name": "add_arguments_to_parser",
            "location": 41,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "try_to_configure_logging": {
            "name": "try_to_configure_logging",
            "location": 48,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 55,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "try_to_parse_config_file": {
            "name": "try_to_parse_config_file",
            "location": 60,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 67,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "handle_parsing_error": {
            "name": "handle_parsing_error",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "run_app": {
            "name": "run_app",
            "location": 79,
            "return": [],
            "arguments": {
                "config": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/rules.py": {
        "Rule.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "api_requests": [],
                "node_name": [],
                "device_id": []
            }
        },
        "Rule.set_limit_on_device": {
            "name": "set_limit_on_device",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "rule_params": []
            }
        },
        "TimeBased.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "api_requests": [],
                "node_name": [],
                "device_id": []
            }
        },
        "TimeBased.proceed": {
            "name": "proceed",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "rule_params": []
            }
        },
        "TimeBased._parse_params": {
            "name": "_parse_params",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "HardLimit.proceed": {
            "name": "proceed",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "rule_params": []
            }
        },
        "Withdrawable.proceed": {
            "name": "proceed",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "rule_params": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/utils.py": {
        "find": {
            "name": "find",
            "location": 1,
            "return": [],
            "arguments": {
                "func": [],
                "seq": []
            }
        }
    },
    "hpcpm-master/management/hpcpm/management/version.py": {},
    "hpcpm-master/management/hpcpm/management/__init__.py": {},
    "hpcpm-master/management/tests/test_main.py": {
        "TestMain.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.tearDown": {
            "name": "tearDown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main": {
            "name": "test_main",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "m_run_app": []
            }
        },
        "TestMain.test_prepare_app_configuration": {
            "name": "test_prepare_app_configuration",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "m_try_to_parse_config_file": [],
                "m_parse_args": [],
                "m_try_to_configure_logging": []
            }
        },
        "TestMain.test_parse_args": {
            "name": "test_parse_args",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "m_add_arguments_to_parser": [],
                "m_create_parser": []
            }
        },
        "TestMain.test_create_parser": {
            "name": "test_create_parser",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "m_ArgumentParser": []
            }
        },
        "TestMain.test_add_arguments_to_parser": {
            "name": "test_add_arguments_to_parser",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_try_to_configure_logging_no_exception": {
            "name": "test_try_to_configure_logging_no_exception",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_try_to_configure_logging_ParsingError": {
            "name": "test_try_to_configure_logging_ParsingError",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "m_handle_parsing_error": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_try_to_configure_logging_exception": {
            "name": "test_try_to_configure_logging_exception",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "m_configure_logging": []
            }
        },
        "TestMain.test_configure_logging": {
            "name": "test_configure_logging",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "m_fileConfig": []
            }
        },
        "TestMain.test_try_to_parse_config_file": {
            "name": "test_try_to_parse_config_file",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_try_to_parse_config_file_ParsingError": {
            "name": "test_try_to_parse_config_file_ParsingError",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "m_handle_parsing_error": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_try_to_parse_config_file_exception": {
            "name": "test_try_to_parse_config_file_exception",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "m_parse_config_file": []
            }
        },
        "TestMain.test_parse_config_file": {
            "name": "test_parse_config_file",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "m_ConfigParser": []
            }
        },
        "TestMain.test_handle_parsing_error": {
            "name": "test_handle_parsing_error",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "m_exit": []
            }
        },
        "TestMain.test_run_app": {
            "name": "test_run_app",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "m_run": []
            }
        }
    },
    "hpcpm-master/management/tests/__init__.py": {}
}
{
    "httpstan-main/build.py": {
        "build": {
            "name": "build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_kwargs": []
            }
        }
    },
    "httpstan-main/doc/conf.py": {
        "make_openapi_spec": {
            "name": "make_openapi_spec",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "httpstan-main/httpstan/app.py": {
        "make_app": {
            "name": "make_app",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/httpstan/build_ext.py": {
        "_get_build_extension": {
            "name": "_get_build_extension",
            "location": 21,
            "return": [
                "distutils.command.build_ext.build_ext"
            ],
            "arguments": {}
        },
        "run_build_ext": {
            "name": "run_build_ext",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "extensions": [
                    "List[distutils.extension.Extension]"
                ],
                "build_lib": [
                    "str"
                ]
            }
        },
        "run_build_ext._has_fileno": {
            "name": "_has_fileno",
            "location": 43,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "run_build_ext._redirect_stderr_to": {
            "name": "_redirect_stderr_to",
            "location": 54,
            "return": [],
            "arguments": {
                "stream": []
            }
        }
    },
    "httpstan-main/httpstan/cache.py": {
        "cache_directory": {
            "name": "cache_directory",
            "location": 18,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "model_directory": {
            "name": "model_directory",
            "location": 23,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        },
        "fit_path": {
            "name": "fit_path",
            "location": 29,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "fit_name": [
                    "str"
                ]
            }
        },
        "delete_model_directory": {
            "name": "delete_model_directory",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        },
        "dump_services_extension_module_compiler_output": {
            "name": "dump_services_extension_module_compiler_output",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler_output": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "load_services_extension_module_compiler_output": {
            "name": "load_services_extension_module_compiler_output",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        },
        "list_model_names": {
            "name": "list_model_names",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "dump_stanc_warnings": {
            "name": "dump_stanc_warnings",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "stanc_warnings": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "load_stanc_warnings": {
            "name": "load_stanc_warnings",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        },
        "dump_fit": {
            "name": "dump_fit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "fit_bytes": [
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "load_fit": {
            "name": "load_fit",
            "location": 114,
            "return": [
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "delete_fit": {
            "name": "delete_fit",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "list_model_names.has_extension_suffix": {
            "name": "has_extension_suffix",
            "location": 66,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "httpstan-main/httpstan/compile.py": {
        "compile": {
            "name": "compile",
            "location": 10,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "program_code": [
                    "str"
                ],
                "stan_model_name": [
                    "str"
                ]
            }
        }
    },
    "httpstan-main/httpstan/config.py": {},
    "httpstan-main/httpstan/fits.py": {
        "calculate_fit_name": {
            "name": "calculate_fit_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "function": [
                    "str"
                ],
                "model_name": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        }
    },
    "httpstan-main/httpstan/models.py": {
        "calculate_model_name": {
            "name": "calculate_model_name",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "program_code": [
                    "str"
                ]
            }
        },
        "import_services_extension_module": {
            "name": "import_services_extension_module",
            "location": 67,
            "return": [
                "module"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "httpstan-main/httpstan/openapi.py": {
        "openapi_spec": {
            "name": "openapi_spec",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "DocPlugin.init_spec": {
            "name": "init_spec",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "DocPlugin.operation_helper": {
            "name": "operation_helper",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operations": [
                    "dict"
                ],
                "view": [
                    "Callable"
                ]
            }
        }
    },
    "httpstan-main/httpstan/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "httpstan-main/httpstan/schemas.py": {
        "Operation.validate_result": {
            "name": "validate_result",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "many": [],
                "partial": []
            }
        },
        "Data.validate_stan_values": {
            "name": "validate_stan_values",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "many": [],
                "partial": []
            }
        },
        "Data.validate_stan_values.is_nested_list_of_numbers": {
            "name": "is_nested_list_of_numbers",
            "location": 73,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "httpstan-main/httpstan/services_stub.py": {
        "init_worker": {
            "name": "init_worker",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_make_lazy_function_wrapper_helper": {
            "name": "_make_lazy_function_wrapper_helper",
            "location": 42,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function_basename": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "_make_lazy_function_wrapper": {
            "name": "_make_lazy_function_wrapper",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "function_basename": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "httpstan-main/httpstan/stan.py": {
        "version": {
            "name": "version",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "httpstan-main/httpstan/utils.py": {
        "_split_data": {
            "name": "_split_data",
            "location": 8,
            "return": [
                "Tuple[(List[str], List[float], List[Tuple[(int, ...)]], List[str], List[int], List[Tuple[(int, ...)]])]"
            ],
            "arguments": {
                "data": [
                    "dict"
                ]
            }
        }
    },
    "httpstan-main/httpstan/views.py": {
        "_make_error": {
            "name": "_make_error",
            "location": 31,
            "return": [
                "dict"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "status": [
                    "int"
                ],
                "details": [
                    "Optional[Sequence]"
                ]
            }
        },
        "handle_create_fit._services_call_done": {
            "name": "_services_call_done",
            "location": 367,
            "return": [],
            "arguments": {
                "operation": [],
                "future": []
            }
        },
        "handle_create_fit.logger_callback": {
            "name": "logger_callback",
            "location": 410,
            "return": [],
            "arguments": {
                "operation": [],
                "message": []
            }
        }
    },
    "httpstan-main/httpstan/__init__.py": {},
    "httpstan-main/httpstan/__main__.py": {},
    "httpstan-main/httpstan/services/arguments.py": {
        "_pythonize_cmdstan_type": {
            "name": "_pythonize_cmdstan_type",
            "location": 15,
            "return": [
                "type"
            ],
            "arguments": {
                "type_name": [
                    "str"
                ]
            }
        },
        "lookup_default": {
            "name": "lookup_default",
            "location": 35,
            "return": [],
            "arguments": {
                "method": [],
                "arg": []
            }
        },
        "function_arguments": {
            "name": "function_arguments",
            "location": 77,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "function_name": [
                    "str"
                ],
                "services_module": [
                    "module"
                ]
            }
        }
    },
    "httpstan-main/httpstan/services/__init__.py": {},
    "httpstan-main/scripts/parse_cmdstan_help.py": {
        "_split_cmdstan_help": {
            "name": "_split_cmdstan_help",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_extract_defaults": {
            "name": "_extract_defaults",
            "location": 36,
            "return": [
                "Generator[(dict, None, None)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse_cmdstan_help": {
            "name": "parse_cmdstan_help",
            "location": 42,
            "return": [
                "dict"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "parse_cmdstan_help.walk": {
            "name": "walk",
            "location": 46,
            "return": [],
            "arguments": {
                "node": [],
                "visit_func": []
            }
        }
    },
    "httpstan-main/tests/conftest.py": {},
    "httpstan-main/tests/helpers.py": {
        "decode_messages": {
            "name": "decode_messages",
            "location": 27,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "fit_bytes": [
                    "bytes"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 44,
            "return": [
                "List[Union[(float, int)]]"
            ],
            "arguments": {
                "param_name": [
                    "str"
                ],
                "fit_bytes": [
                    "bytes"
                ]
            }
        }
    },
    "httpstan-main/tests/test_arguments.py": {
        "test_lookup_default": {
            "name": "test_lookup_default",
            "location": 17,
            "return": [],
            "arguments": {
                "argument_value": []
            }
        },
        "test_lookup_invalid": {
            "name": "test_lookup_invalid",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pythonize_cmdstan_type": {
            "name": "test_pythonize_cmdstan_type",
            "location": 69,
            "return": [],
            "arguments": {
                "type_pair": []
            }
        },
        "test_pythonize_cmdstan_type_invalid": {
            "name": "test_pythonize_cmdstan_type_invalid",
            "location": 76,
            "return": [],
            "arguments": {
                "type_fail": []
            }
        }
    },
    "httpstan-main/tests/test_bernoulli.py": {},
    "httpstan-main/tests/test_cache.py": {
        "test_model_directory": {
            "name": "test_model_directory",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fit_path": {
            "name": "test_fit_path",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_services_extension_module_compiler_output_exception": {
            "name": "test_load_services_extension_module_compiler_output_exception",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_stanc_warnings_exception": {
            "name": "test_load_stanc_warnings_exception",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete_fit_keyerror_exception": {
            "name": "test_delete_fit_keyerror_exception",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_compile.py": {
        "test_compile": {
            "name": "test_compile",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_syntax_error": {
            "name": "test_compile_syntax_error",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_semantic_error": {
            "name": "test_compile_semantic_error",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_warning": {
            "name": "test_compile_warning",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_filename": {
            "name": "test_compile_filename",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_cvodes.py": {},
    "httpstan-main/tests/test_debug_model.py": {},
    "httpstan-main/tests/test_delete_fit.py": {},
    "httpstan-main/tests/test_delete_model.py": {},
    "httpstan-main/tests/test_eight_schools.py": {},
    "httpstan-main/tests/test_fits.py": {},
    "httpstan-main/tests/test_fixed_param.py": {},
    "httpstan-main/tests/test_generated_quantities.py": {},
    "httpstan-main/tests/test_generated_quantities_rng.py": {},
    "httpstan-main/tests/test_health_check.py": {},
    "httpstan-main/tests/test_large_model.py": {},
    "httpstan-main/tests/test_linear_regression.py": {},
    "httpstan-main/tests/test_logger_callback.py": {},
    "httpstan-main/tests/test_log_prob.py": {
        "gaussian_lp": {
            "name": "gaussian_lp",
            "location": 22,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "mean": [
                    "float"
                ],
                "var": [
                    "float"
                ]
            }
        }
    },
    "httpstan-main/tests/test_log_prob_grad.py": {
        "gaussian_gradient": {
            "name": "gaussian_gradient",
            "location": 23,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "mean": [
                    "float"
                ],
                "var": [
                    "float"
                ]
            }
        }
    },
    "httpstan-main/tests/test_nan_inf.py": {},
    "httpstan-main/tests/test_openapi_spec.py": {
        "test_openapi_spec": {
            "name": "test_openapi_spec",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_programs.py": {},
    "httpstan-main/tests/test_sampling_exceptions.py": {},
    "httpstan-main/tests/test_schemas.py": {
        "test_model_schema": {
            "name": "test_model_schema",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data_schema": {
            "name": "test_data_schema",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_data_schema_invalid": {
            "name": "test_data_schema_invalid",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_writer_message_schema_mapping": {
            "name": "test_writer_message_schema_mapping",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_writer_message_schema_list": {
            "name": "test_writer_message_schema_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_writer_message_schema_invalid_missing_field": {
            "name": "test_writer_message_schema_invalid_missing_field",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_writer_message_schema_invalid_extra_field": {
            "name": "test_writer_message_schema_invalid_extra_field",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_transformed_data_rng.py": {},
    "httpstan-main/tests/test_transform_inits.py": {},
    "httpstan-main/tests/test_user_inits.py": {},
    "httpstan-main/tests/test_utils.py": {
        "test_data_split": {
            "name": "test_data_split",
            "location": 18,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_data_split_invalid": {
            "name": "test_data_split_invalid",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_views.py": {
        "test_make_error": {
            "name": "test_make_error",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "httpstan-main/tests/test_write_array.py": {}
}
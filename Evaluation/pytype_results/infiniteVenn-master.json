{
    "infiniteVenn-master/setup.py": {},
    "infiniteVenn-master/set2net/set2net.py": {
        "purge": {
            "name": "purge",
            "location": 32,
            "return": [
                "set"
            ],
            "arguments": {
                "my_set": [
                    "Iterable"
                ],
                "other_sets": [
                    "Iterable[Iterable]"
                ]
            }
        },
        "intersect_em_all": {
            "name": "intersect_em_all",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "all_sets": []
            }
        },
        "intersect_and_purge_by_indx": {
            "name": "intersect_and_purge_by_indx",
            "location": 64,
            "return": [
                "set"
            ],
            "arguments": {
                "indexes": [],
                "all_sets": []
            }
        },
        "getAccessions": {
            "name": "getAccessions",
            "location": 78,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "xls_file": [],
                "sheet_indx": []
            }
        },
        "polar_dist": {
            "name": "polar_dist",
            "location": 92,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "n_angles": []
            }
        },
        "sum_of_binom": {
            "name": "sum_of_binom",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [],
                "k": []
            }
        },
        "transl": {
            "name": "transl",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "val": [],
                "incr": [],
                "max_limit": [],
                "min_limit": []
            }
        },
        "polar2cart": {
            "name": "polar2cart",
            "location": 140,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "phi": [],
                "rho": []
            }
        },
        "get_group": {
            "name": "get_group",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "infiniteVenn-master/set2net/__init__.py": {},
    "infiniteVenn-master/tests/test_intersect_and_purge_by_index.py": {
        "test_intersect_and_purge_by_index": {
            "name": "test_intersect_and_purge_by_index",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "infiniteVenn-master/tests/test_intersect_em_all.py": {
        "test_intersect_em_all_not_intersection": {
            "name": "test_intersect_em_all_not_intersection",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intersect_em_all_empty": {
            "name": "test_intersect_em_all_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_there_is_an_interception": {
            "name": "test_there_is_an_interception",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_result_is_always_less_or_equal_each_set_passed": {
            "name": "test_result_is_always_less_or_equal_each_set_passed",
            "location": 28,
            "return": [],
            "arguments": {
                "sets": []
            }
        }
    },
    "infiniteVenn-master/tests/test_purge.py": {
        "test_purge_simple": {
            "name": "test_purge_simple",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_other_sets_no_change": {
            "name": "test_purge_other_sets_no_change",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_purge_any_iterable": {
            "name": "test_purge_any_iterable",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_no": {
            "name": "test_purge_no",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_torture": {
            "name": "test_purge_torture",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hypothesis": {
            "name": "test_hypothesis",
            "location": 67,
            "return": [],
            "arguments": {
                "my": [],
                "others": []
            }
        }
    }
}
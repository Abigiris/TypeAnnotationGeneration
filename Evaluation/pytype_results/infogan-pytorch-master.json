{
    "infogan-pytorch-master/src/dataset.py": {
        "new_mnist_dataset": {
            "name": "new_mnist_dataset",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "root_path": []
            }
        },
        "new_fashion_mnist_dataset": {
            "name": "new_fashion_mnist_dataset",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "root_path": []
            }
        }
    },
    "infogan-pytorch-master/src/infer.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "infogan-pytorch-master/src/logger.py": {
        "new_logging_module": {
            "name": "new_logging_module",
            "location": 42,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [],
                "log_file": []
            }
        },
        "Metric.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtype": [],
                "priority": []
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_path": [],
                "tb_path": []
            }
        },
        "Logger.define": {
            "name": "define",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "mtype": [],
                "priority": []
            }
        },
        "Logger.metric_keys": {
            "name": "metric_keys",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.clear": {
            "name": "clear",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.update": {
            "name": "update",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Logger.print_header": {
            "name": "print_header",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.log_tensorboard": {
            "name": "log_tensorboard",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_axis_metric": []
            }
        },
        "Logger.tf_log_histgram": {
            "name": "tf_log_histgram",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [],
                "tag": [],
                "step": []
            }
        },
        "Logger.tf_log_image": {
            "name": "tf_log_image",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "step": [],
                "tag": []
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "infogan-pytorch-master/src/loss.py": {
        "AdversarialLoss.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdversarialLoss.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "y_hat": [],
                "label": []
            }
        },
        "InfoGANLoss.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_vars": []
            }
        },
        "InfoGANLoss.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "Tuple[(Any, dict)]"
            ],
            "arguments": {
                "self": [],
                "cs_hat": [],
                "cs_true": []
            }
        },
        "NormalNLLLoss.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "mean": [],
                "ln_var": []
            }
        }
    },
    "infogan-pytorch-master/src/model.py": {
        "Noise.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_noise": [],
                "sigma": []
            }
        },
        "Noise.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_vars": []
            }
        },
        "Generator.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Generator.forward_dummy": {
            "name": "forward_dummy",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.sample_latent_vars": {
            "name": "sample_latent_vars",
            "location": 71,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "batchsize": []
            }
        },
        "Generator.infer": {
            "name": "infer",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "zs": []
            }
        },
        "Generator.module": {
            "name": "module",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": []
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Discriminator.forward_dummy": {
            "name": "forward_dummy",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discriminator.module": {
            "name": "module",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DHead.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DHead.forward": {
            "name": "forward",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DHead.module": {
            "name": "module",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QHead.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_vars": []
            }
        },
        "QHead.forward": {
            "name": "forward",
            "location": 183,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QHead.module": {
            "name": "module",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "infogan-pytorch-master/src/train.py": {
        "worker_init_fn": {
            "name": "worker_init_fn",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "worker_id": []
            }
        },
        "create_optimizer": {
            "name": "create_optimizer",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "models": [],
                "lr": [],
                "decay": []
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "infogan-pytorch-master/src/trainer.py": {
        "weights_init": {
            "name": "weights_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "m": []
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataloader": [],
                "latent_vars": [],
                "models": [],
                "optimizers": [],
                "losses": [],
                "configs": [],
                "logger": []
            }
        },
        "Trainer.fix_seed": {
            "name": "fix_seed",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.snapshot_models": {
            "name": "snapshot_models",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.snapshot_params": {
            "name": "snapshot_params",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.log_random_images": {
            "name": "log_random_images",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Trainer.log_images_discrete": {
            "name": "log_images_discrete",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var_name": []
            }
        },
        "Trainer.log_images_continuous": {
            "name": "log_images_continuous",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var_name": [],
                "n": []
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "infogan-pytorch-master/src/util.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "current_device": {
            "name": "current_device",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "gen_random_images": {
            "name": "gen_random_images",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "gen": [],
                "n": []
            }
        },
        "gen_images_discrete": {
            "name": "gen_images_discrete",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "gen": [],
                "var_name": []
            }
        },
        "gen_images_continuous": {
            "name": "gen_images_continuous",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "gen": [],
                "var_name": [],
                "n": []
            }
        }
    },
    "infogan-pytorch-master/src/variable.py": {
        "build_latent_variables": {
            "name": "build_latent_variables",
            "location": 36,
            "return": [
                "collections.OrderedDict[(Any, LatentVariable)]"
            ],
            "arguments": {
                "lv_configs": []
            }
        },
        "LatentVariable.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "kind": [],
                "prob": [],
                "dim": []
            }
        },
        "LatentVariable.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatentVariable.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Categorical.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Categorical.one_hot": {
            "name": "one_hot",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Categorical.sample": {
            "name": "sample",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shape": []
            }
        }
    },
    "infogan-pytorch-master/src/__init__.py": {}
}
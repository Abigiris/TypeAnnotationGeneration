{
    "instark-master/docs/conf.py": {},
    "instark-master/instark/__init__.py": {},
    "instark-master/instark/__main__.py": {},
    "instark-master/instark/application/__init__.py": {},
    "instark-master/instark/application/domain/__init__.py": {},
    "instark-master/instark/application/domain/common/exceptions.py": {},
    "instark-master/instark/application/domain/common/query_parser.py": {
        "QueryParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Sequence[Union[(str, Tuple[(str, str, Union[(float, list, str, tuple)])])]]"
                ]
            }
        },
        "QueryParser._default_join": {
            "name": "_default_join",
            "location": 70,
            "return": [
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "List[Callable]"
                ]
            }
        },
        "QueryParser._parse_term": {
            "name": "_parse_term",
            "location": 80,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "Tuple[(str, str, Union[(float, list, str, tuple)])]"
                ]
            }
        },
        "QueryParser._parse_like": {
            "name": "_parse_like",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "pattern": [
                    "str"
                ],
                "insensitive": []
            }
        }
    },
    "instark-master/instark/application/domain/common/transaction.py": {
        "TransactionManager.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable"
                ]
            }
        },
        "MemoryTransactionManager.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/types.py": {},
    "instark-master/instark/application/domain/common/__init__.py": {},
    "instark-master/instark/application/domain/common/auth/auth_provider.py": {
        "AuthProvider.setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "instark.application.domain.common.auth.user.User"
                ]
            }
        },
        "AuthProvider.user": {
            "name": "user",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.roles": {
            "name": "roles",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.validate_roles": {
            "name": "validate_roles",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "required_roles": [
                    "List[str]"
                ]
            }
        },
        "AuthProvider.reference": {
            "name": "reference",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.setup": {
            "name": "setup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "instark.application.domain.common.auth.user.User"
                ]
            }
        },
        "StandardAuthProvider.user": {
            "name": "user",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.roles": {
            "name": "roles",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.validate_roles": {
            "name": "validate_roles",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required_roles": [
                    "List[str]"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/auth/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/common/auth/__init__.py": {},
    "instark-master/instark/application/domain/common/tenancy/tenant.py": {
        "Tenant.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tenant._normalize_slug": {
            "name": "_normalize_slug",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "slug": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/common/tenancy/tenant_provider.py": {
        "TenantProvider.setup": {
            "name": "setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "instark.application.domain.common.tenancy.tenant.Tenant"
                ]
            }
        },
        "TenantProvider.tenant": {
            "name": "tenant",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TenantProvider.location": {
            "name": "location",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TenantProvider.zone": {
            "name": "zone",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StandardTenantProvider.setup": {
            "name": "setup",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "instark.application.domain.common.tenancy.tenant.Tenant"
                ]
            }
        },
        "StandardTenantProvider.tenant": {
            "name": "tenant",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/common/tenancy/__init__.py": {},
    "instark-master/instark/application/domain/models/channel.py": {
        "Channel.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/device.py": {
        "Device.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/subscription.py": {
        "Subscription.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/application/domain/models/__init__.py": {},
    "instark-master/instark/application/domain/repositories/memory_model_repositories.py": {},
    "instark-master/instark/application/domain/repositories/__init__.py": {},
    "instark-master/instark/application/domain/services/delivery_service.py": {
        "DeliveryService.send": {
            "name": "send",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "locator": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "DeliveryService.broadcast": {
            "name": "broadcast",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "DeliveryService.subscribe": {
            "name": "subscribe",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "locator": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/services/memory_delivery_service.py": {
        "MemoryDeliveryService.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MemoryDeliveryService.send": {
            "name": "send",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "locator": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "MemoryDeliveryService.broadcast": {
            "name": "broadcast",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "MemoryDeliveryService.subscribe": {
            "name": "subscribe",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "locator": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/application/domain/services/__init__.py": {},
    "instark-master/instark/application/informers/instark_informer.py": {
        "StandardInstarkInformer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ]
            }
        }
    },
    "instark-master/instark/application/informers/__init__.py": {},
    "instark-master/instark/application/managers/notification_manager.py": {
        "NotificationManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/registration_manager.py": {
        "RegistrationManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/session_manager.py": {
        "SessionManager.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "SessionManager.set_tenant": {
            "name": "set_tenant",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SessionManager.get_tenant": {
            "name": "get_tenant",
            "location": 17,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionManager.set_user": {
            "name": "set_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/subscription_manager.py": {
        "SubscriptionManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ]
            }
        }
    },
    "instark-master/instark/application/managers/__init__.py": {},
    "instark-master/instark/core/__init__.py": {},
    "instark-master/instark/core/common/config.py": {},
    "instark-master/instark/core/common/__init__.py": {},
    "instark-master/instark/core/data/__init__.py": {},
    "instark-master/instark/core/data/sql/sql_model_repositories.py": {
        "SqlChannelRepository.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "parser": []
            }
        },
        "SqlChannelRepository._order_by": {
            "name": "_order_by",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlDeviceRepository.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "parser": []
            }
        },
        "SqlDeviceRepository._order_by": {
            "name": "_order_by",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlMessageRepository.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "parser": []
            }
        },
        "SqlSubscriptionRepository.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "parser": []
            }
        }
    },
    "instark-master/instark/core/data/sql/__init__.py": {},
    "instark-master/instark/core/data/sql/connection/connection_manager.py": {
        "DefaultConnectionManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "List[Dict[(str, Any)]]"
                ],
                "default": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/core/data/sql/connection/sql_transaction_manager.py": {
        "SqlTransactionManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ]
            }
        },
        "SqlTransactionManager.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "type"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "SqlTransactionManager._decorate_method": {
            "name": "_decorate_method",
            "location": 29,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Callable"
                ]
            }
        },
        "SqlTransactionManager.__call__.TransactionClass.__getattribute__": {
            "name": "__getattribute__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "instark-master/instark/core/data/sql/connection/__init__.py": {},
    "instark-master/instark/core/data/sql/migrations/001_initial_setup.py": {
        "Migration.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Migration._create_table": {
            "name": "_create_table",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "Migration.schema_up": {
            "name": "schema_up",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.schema_down": {
            "name": "schema_down",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/core/data/sql/migrations/002_index_over_id.py": {
        "Migration.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Migration._create_table": {
            "name": "_create_table",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "Migration.schema_up": {
            "name": "schema_up",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.schema_down": {
            "name": "schema_down",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/core/suppliers/__init__.py": {},
    "instark-master/instark/core/suppliers/common/__init__.py": {},
    "instark-master/instark/core/suppliers/common/connection/schema_connection.py": {
        "SchemaConnection.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "str"
                ]
            }
        },
        "SchemaConnection.open": {
            "name": "open",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaConnection.close": {
            "name": "close",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaConnection.execute": {
            "name": "execute",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str"
                ],
                "parameters": [
                    "Sequence"
                ]
            }
        },
        "SchemaConnection.select": {
            "name": "select",
            "location": 31,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str"
                ],
                "parameters": [
                    "Sequence"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/connection/__init__.py": {},
    "instark-master/instark/core/suppliers/common/tenancy/memory_tenant_supplier.py": {
        "MemoryTenantSupplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryTenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 11,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str"
                ]
            }
        },
        "MemoryTenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 14,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "list"
                ]
            }
        },
        "MemoryTenantSupplier.ensure_tenant": {
            "name": "ensure_tenant",
            "location": 17,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/schema_tenant_supplier.py": {
        "SchemaTenantSupplier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "instark.core.suppliers.common.connection.schema_connection.SchemaConnection"
                ],
                "zones": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/tenant_supplier.py": {
        "TenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 7,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str"
                ]
            }
        },
        "TenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 11,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "list"
                ]
            }
        },
        "TenantSupplier.ensure_tenant": {
            "name": "ensure_tenant",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/common/tenancy/__init__.py": {},
    "instark-master/instark/core/suppliers/migration/migration_supplier.py": {
        "MigrationSupplier.migrate": {
            "name": "migrate",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "MemoryMigrationSupplier.migrate": {
            "name": "migrate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/migration/schema_migration_supplier.py": {
        "SchemaMigrationSupplier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zones": [
                    "Dict[(str, str)]"
                ],
                "tenant_supplier": [
                    "instark.core.suppliers.common.tenancy.tenant_supplier.TenantSupplier"
                ]
            }
        },
        "SchemaMigrationSupplier.migrate": {
            "name": "migrate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/core/suppliers/migration/__init__.py": {},
    "instark-master/instark/factories/base_factory.py": {
        "BaseFactory.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaseFactory.query_parser": {
            "name": "query_parser",
            "location": 27,
            "return": [
                "instark.application.domain.common.query_parser.QueryParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.standard_tenant_provider": {
            "name": "standard_tenant_provider",
            "location": 30,
            "return": [
                "instark.application.domain.common.tenancy.tenant_provider.StandardTenantProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.standard_auth_provider": {
            "name": "standard_auth_provider",
            "location": 33,
            "return": [
                "instark.application.domain.common.auth.auth_provider.StandardAuthProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_transaction_manager": {
            "name": "memory_transaction_manager",
            "location": 36,
            "return": [
                "instark.application.domain.common.transaction.MemoryTransactionManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_device_repository": {
            "name": "memory_device_repository",
            "location": 41,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryDeviceRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "BaseFactory.memory_channel_repository": {
            "name": "memory_channel_repository",
            "location": 49,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryChannelRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "BaseFactory.memory_subscription_repository": {
            "name": "memory_subscription_repository",
            "location": 57,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemorySubscriptionRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "BaseFactory.memory_message_repository": {
            "name": "memory_message_repository",
            "location": 65,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryMessageRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "BaseFactory.memory_delivery_service": {
            "name": "memory_delivery_service",
            "location": 75,
            "return": [
                "instark.application.domain.services.memory_delivery_service.MemoryDeliveryService"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.registration_manager": {
            "name": "registration_manager",
            "location": 80,
            "return": [
                "instark.application.managers.registration_manager.RegistrationManager"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_manager": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ],
                "transaction_manager": [
                    "instark.application.domain.common.transaction.TransactionManager"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ]
            }
        },
        "BaseFactory.subscription_manager": {
            "name": "subscription_manager",
            "location": 91,
            "return": [
                "instark.application.managers.subscription_manager.SubscriptionManager"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ],
                "transaction_manager": [
                    "instark.application.domain.common.transaction.TransactionManager"
                ]
            }
        },
        "BaseFactory.notification_manager": {
            "name": "notification_manager",
            "location": 104,
            "return": [
                "instark.application.managers.notification_manager.NotificationManager"
            ],
            "arguments": {
                "self": [],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "delivery_service": [
                    "instark.application.domain.services.delivery_service.DeliveryService"
                ],
                "transaction_manager": [
                    "instark.application.domain.common.transaction.TransactionManager"
                ]
            }
        },
        "BaseFactory.session_manager": {
            "name": "session_manager",
            "location": 115,
            "return": [
                "instark.application.managers.session_manager.SessionManager"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "BaseFactory.standard_instark_informer": {
            "name": "standard_instark_informer",
            "location": 123,
            "return": [
                "instark.application.informers.instark_informer.StandardInstarkInformer"
            ],
            "arguments": {
                "self": [],
                "device_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.DeviceRepository"
                ],
                "channel_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.ChannelRepository"
                ],
                "message_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.MessageRepository"
                ],
                "subscription_repository": [
                    "instark.application.domain.repositories.memory_model_repositories.SubscriptionRepository"
                ],
                "transaction_manager": [
                    "instark.application.domain.common.transaction.TransactionManager"
                ]
            }
        },
        "BaseFactory.memory_tenant_supplier": {
            "name": "memory_tenant_supplier",
            "location": 136,
            "return": [
                "instark.core.suppliers.common.tenancy.memory_tenant_supplier.MemoryTenantSupplier"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.memory_migration_supplier": {
            "name": "memory_migration_supplier",
            "location": 139,
            "return": [
                "instark.core.suppliers.migration.migration_supplier.MemoryMigrationSupplier"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/check_factory.py": {
        "CheckFactory.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "CheckFactory.check_tenant_provider": {
            "name": "check_tenant_provider",
            "location": 20,
            "return": [
                "instark.application.domain.common.tenancy.tenant_provider.StandardTenantProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.check_auth_provider": {
            "name": "check_auth_provider",
            "location": 25,
            "return": [
                "instark.application.domain.common.auth.auth_provider.StandardAuthProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.memory_channel_repository": {
            "name": "memory_channel_repository",
            "location": 30,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryChannelRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "CheckFactory.memory_device_repository": {
            "name": "memory_device_repository",
            "location": 47,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryDeviceRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "CheckFactory.memory_message_repository": {
            "name": "memory_message_repository",
            "location": 64,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemoryMessageRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "CheckFactory.memory_subscription_repository": {
            "name": "memory_subscription_repository",
            "location": 79,
            "return": [
                "instark.application.domain.repositories.memory_model_repositories.MemorySubscriptionRepository"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "instark.application.domain.common.query_parser.QueryParser"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ]
            }
        },
        "CheckFactory.check_tenant_supplier": {
            "name": "check_tenant_supplier",
            "location": 96,
            "return": [
                "instark.core.suppliers.common.tenancy.memory_tenant_supplier.MemoryTenantSupplier"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/sql_factory.py": {
        "SqlFactory.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "SqlFactory.sql_query_parser": {
            "name": "sql_query_parser",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.sql_connection_manager": {
            "name": "sql_connection_manager",
            "location": 25,
            "return": [
                "instark.core.data.sql.connection.connection_manager.DefaultConnectionManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.sql_transaction_manager": {
            "name": "sql_transaction_manager",
            "location": 33,
            "return": [
                "instark.core.data.sql.connection.sql_transaction_manager.SqlTransactionManager"
            ],
            "arguments": {
                "self": [],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ]
            }
        },
        "SqlFactory.sql_channel_repository": {
            "name": "sql_channel_repository",
            "location": 39,
            "return": [
                "instark.core.data.sql.sql_model_repositories.SqlChannelRepository"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "sql_parser": []
            }
        },
        "SqlFactory.sql_device_repository": {
            "name": "sql_device_repository",
            "location": 47,
            "return": [
                "instark.core.data.sql.sql_model_repositories.SqlDeviceRepository"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "sql_parser": []
            }
        },
        "SqlFactory.sql_message_repository": {
            "name": "sql_message_repository",
            "location": 55,
            "return": [
                "instark.core.data.sql.sql_model_repositories.SqlMessageRepository"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "sql_parser": []
            }
        },
        "SqlFactory.sql_subscription_repository": {
            "name": "sql_subscription_repository",
            "location": 63,
            "return": [
                "instark.core.data.sql.sql_model_repositories.SqlSubscriptionRepository"
            ],
            "arguments": {
                "self": [],
                "tenant_provider": [
                    "instark.application.domain.common.tenancy.tenant_provider.TenantProvider"
                ],
                "auth_provider": [
                    "instark.application.domain.common.auth.auth_provider.AuthProvider"
                ],
                "connection_manager": [
                    "instark.core.data.sql.connection.connection_manager.ConnectionManager"
                ],
                "sql_parser": []
            }
        },
        "SqlFactory.schema_tenant_supplier": {
            "name": "schema_tenant_supplier",
            "location": 71,
            "return": [
                "instark.core.suppliers.common.tenancy.schema_tenant_supplier.SchemaTenantSupplier"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlFactory.schema_migration_supplier": {
            "name": "schema_migration_supplier",
            "location": 77,
            "return": [
                "instark.core.suppliers.migration.schema_migration_supplier.SchemaMigrationSupplier"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "instark.core.suppliers.common.tenancy.tenant_supplier.TenantSupplier"
                ]
            }
        },
        "SqlFactory.firebase_delivery_service": {
            "name": "firebase_delivery_service",
            "location": 85,
            "return": [
                "instark.presenters.delivery.firebase.delivery_service.FirebaseDeliveryService"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/factories/__init__.py": {},
    "instark-master/instark/factories/strategies/base.py": {},
    "instark-master/instark/factories/strategies/check.py": {},
    "instark-master/instark/factories/strategies/sql.py": {},
    "instark-master/instark/factories/strategies/__init__.py": {},
    "instark-master/instark/presenters/__init__.py": {},
    "instark-master/instark/presenters/delivery/__init__.py": {},
    "instark-master/instark/presenters/delivery/firebase/delivery_service.py": {
        "FirebaseDeliveryService.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_path": [
                    "str"
                ]
            }
        },
        "FirebaseDeliveryService.send": {
            "name": "send",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "locator": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "FirebaseDeliveryService.broadcast": {
            "name": "broadcast",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "FirebaseDeliveryService.subscribe": {
            "name": "subscribe",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "locator": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/presenters/delivery/firebase/__init__.py": {},
    "instark-master/instark/presenters/rest/doc.py": {
        "create_spec": {
            "name": "create_spec",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "_register_schemas": {
            "name": "_register_schemas",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": []
            }
        },
        "_register_paths": {
            "name": "_register_paths",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": []
            }
        },
        "_append_path": {
            "name": "_append_path",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": [],
                "endpoint": [],
                "schema": []
            }
        },
        "_respond": {
            "name": "_respond",
            "location": 66,
            "return": [
                "Dict[(_T2, Dict[(str, Union[(Dict[(str, Dict[(str, Dict[(str, Union[(str, Dict[(str, str)])])])])], _T0)])])]"
            ],
            "arguments": {
                "description": [
                    "_T0"
                ],
                "schema": [],
                "status": [
                    "_T2"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/rest.py": {
        "RestApplication.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(str, Any)]"
                ],
                "injector": []
            }
        },
        "RestApplication._setup": {
            "name": "_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApplication._bind": {
            "name": "_bind",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "resource": []
            }
        },
        "RestApplication._create_api": {
            "name": "_create_api",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/instark/presenters/rest/__init__.py": {},
    "instark-master/instark/presenters/rest/helpers/format.py": {
        "parse_domain": {
            "name": "parse_domain",
            "location": 6,
            "return": [
                "list"
            ],
            "arguments": {
                "filter": [
                    "str"
                ]
            }
        },
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/helpers/request.py": {},
    "instark-master/instark/presenters/rest/helpers/__init__.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/channel.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/device.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/entity.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/message.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/subscription.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/user.py": {},
    "instark-master/instark/presenters/rest/helpers/schemas/__init__.py": {},
    "instark-master/instark/presenters/rest/middleware/authenticate.py": {
        "authenticate_middleware_factory": {
            "name": "authenticate_middleware_factory",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "injector": []
            }
        },
        "extract_user": {
            "name": "extract_user",
            "location": 37,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "headers": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/middleware/errors.py": {
        "errors_middleware_factory": {
            "name": "errors_middleware_factory",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "injector": []
            }
        }
    },
    "instark-master/instark/presenters/rest/middleware/__init__.py": {
        "middlewares": {
            "name": "middlewares",
            "location": 7,
            "return": [
                "List[Callable]"
            ],
            "arguments": {
                "injector": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/channel.py": {
        "ChannelResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/device.py": {
        "DeviceResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/message.py": {
        "MessageResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/resource.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "type"
                ],
                "count_handler": [
                    "Callable"
                ],
                "search_handler": [
                    "Callable"
                ],
                "add_handler": [
                    "Callable"
                ],
                "delete_handler": [
                    "Callable"
                ]
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/root.py": {
        "RootResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/subscription.py": {
        "SubscriptionResource.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": []
            }
        }
    },
    "instark-master/instark/presenters/rest/resources/__init__.py": {},
    "instark-master/instark/presenters/shell/shell.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "injector": []
            }
        }
    },
    "instark-master/instark/presenters/shell/__init__.py": {},
    "instark-master/tests/test_main.py": {},
    "instark-master/tests/__init__.py": {},
    "instark-master/tests/application/__init__.py": {},
    "instark-master/tests/application/domain/common/test_query_parser.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_query_parser_object_creation": {
            "name": "test_query_parser_object_creation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_tuple": {
            "name": "test_query_parser_parse_tuple",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_single_term": {
            "name": "test_query_parser_parse_single_term",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_default_join": {
            "name": "test_query_parser_default_join",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_multiple_terms": {
            "name": "test_query_parser_parse_multiple_terms",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_with_empty_list": {
            "name": "test_query_parser_with_empty_list",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_string_parser_with_lists_of_lists": {
            "name": "test_string_parser_with_lists_of_lists",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_like": {
            "name": "test_query_parser_parse_like",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_contains": {
            "name": "test_query_parser_parse_contains",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 44,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_query_parser_default_join.expected": {
            "name": "expected",
            "location": 63,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_string_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 121,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "instark-master/tests/application/domain/common/test_transaction.py": {
        "transation_manager": {
            "name": "transation_manager",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_transaction_manager_creation": {
            "name": "test_transaction_manager_creation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "transation_manager": []
            }
        },
        "test_transaction_manager_methods": {
            "name": "test_transaction_manager_methods",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transaction_manager_call": {
            "name": "test_transaction_manager_call",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "transation_manager": []
            }
        }
    },
    "instark-master/tests/application/domain/common/__init__.py": {},
    "instark-master/tests/application/domain/common/auth/test_auth_provider.py": {
        "test_auth_provider_repository_methods": {
            "name": "test_auth_provider_repository_methods",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "loaded_auth_provider": {
            "name": "loaded_auth_provider",
            "location": 25,
            "return": [],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_provider": {
            "name": "test_standard_auth_provider",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_provider_verify": {
            "name": "test_standard_auth_provider_verify",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_get_user": {
            "name": "test_standard_auth_get_user",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_roles_authenticated": {
            "name": "test_standard_auth_roles_authenticated",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_get_roles_no_authenticated": {
            "name": "test_standard_auth_get_roles_no_authenticated",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_validate_roles_correct_roles": {
            "name": "test_standard_auth_validate_roles_correct_roles",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_validate_roles_incorrect_roles": {
            "name": "test_standard_auth_validate_roles_incorrect_roles",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_raises_if_user_not_set": {
            "name": "test_standard_auth_raises_if_user_not_set",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_provider": []
            }
        }
    },
    "instark-master/tests/application/domain/common/auth/test_user.py": {
        "user": {
            "name": "user",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_user_creation": {
            "name": "test_user_creation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "instark.application.domain.common.auth.user.User"
                ]
            }
        },
        "test_user_default_attributes": {
            "name": "test_user_default_attributes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "instark.application.domain.common.auth.user.User"
                ]
            }
        },
        "test_user_attributes_from_dict": {
            "name": "test_user_attributes_from_dict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/auth/__init__.py": {},
    "instark-master/tests/application/domain/common/tenancy/conftest.py": {
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/tenancy/test_tenant.py": {
        "tenant": {
            "name": "tenant",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_tenant_creation": {
            "name": "test_tenant_creation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tenant": [
                    "instark.application.domain.common.tenancy.tenant.Tenant"
                ]
            }
        },
        "test_tenant_default_attributes": {
            "name": "test_tenant_default_attributes",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tenant": [
                    "instark.application.domain.common.tenancy.tenant.Tenant"
                ]
            }
        },
        "test_tenant_attributes_from_dict": {
            "name": "test_tenant_attributes_from_dict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tenant_normalize_slug": {
            "name": "test_tenant_normalize_slug",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tenant_normalize_slug_invalid": {
            "name": "test_tenant_normalize_slug_invalid",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/common/tenancy/test_tenant_service.py": {
        "test_tenant_provider_methods": {
            "name": "test_tenant_provider_methods",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standard_tenant_provider_instantiation": {
            "name": "test_standard_tenant_provider_instantiation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tenant_provider": []
            }
        },
        "test_standard_tenant_provider_setup": {
            "name": "test_standard_tenant_provider_setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tenant_provider": []
            }
        },
        "test_standard_tenant_provider_get_tenant_not_set": {
            "name": "test_standard_tenant_provider_get_tenant_not_set",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tenant_provider": []
            }
        }
    },
    "instark-master/tests/application/domain/common/tenancy/__init__.py": {},
    "instark-master/tests/application/domain/models/test_channel.py": {
        "channel": {
            "name": "channel",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_channel_instantiation": {
            "name": "test_channel_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": []
            }
        },
        "test_channel_attributes": {
            "name": "test_channel_attributes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": []
            }
        }
    },
    "instark-master/tests/application/domain/models/test_device.py": {
        "device": {
            "name": "device",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_device_instantiation": {
            "name": "test_device_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "device": []
            }
        },
        "test_device_attributes": {
            "name": "test_device_attributes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "device": []
            }
        }
    },
    "instark-master/tests/application/domain/models/test_device_channel.py": {
        "device_channel": {
            "name": "device_channel",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_device_channel_instantiation": {
            "name": "test_device_channel_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "device_channel": []
            }
        },
        "test_device_channel_attributes": {
            "name": "test_device_channel_attributes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "device_channel": []
            }
        }
    },
    "instark-master/tests/application/domain/models/test_message.py": {
        "message": {
            "name": "message",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_message_instantiation": {
            "name": "test_message_instantiation",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "test_message_attributes": {
            "name": "test_message_attributes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        }
    },
    "instark-master/tests/application/domain/models/__init__.py": {},
    "instark-master/tests/application/domain/services/test_delivery_service.py": {
        "test_delivery_service": {
            "name": "test_delivery_service",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_memory_delivery_service_implementation": {
            "name": "test_memory_delivery_service_implementation",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_memory_delivery_service_send": {
            "name": "test_memory_delivery_service_send",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_memory_delivery_service_broadcast": {
            "name": "test_memory_delivery_service_broadcast",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_memory_delivery_service_subscribe": {
            "name": "test_memory_delivery_service_subscribe",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/application/domain/services/__init__.py": {},
    "instark-master/tests/application/informers/test_instark_informer.py": {
        "parser": {
            "name": "parser",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "device_repository": {
            "name": "device_repository",
            "location": 35,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": [],
                "parser": []
            }
        },
        "channel_repository": {
            "name": "channel_repository",
            "location": 49,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": [],
                "parser": []
            }
        },
        "message_repository": {
            "name": "message_repository",
            "location": 65,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": [],
                "parser": []
            }
        },
        "subscription_repository": {
            "name": "subscription_repository",
            "location": 79,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": [],
                "parser": []
            }
        },
        "instark_informer": {
            "name": "instark_informer",
            "location": 95,
            "return": [],
            "arguments": {
                "device_repository": [],
                "channel_repository": [],
                "message_repository": [],
                "subscription_repository": []
            }
        }
    },
    "instark-master/tests/application/informers/__init__.py": {},
    "instark-master/tests/application/managers/conftest.py": {
        "parser": {
            "name": "parser",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "device_repository": {
            "name": "device_repository",
            "location": 32,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": []
            }
        },
        "channel_repository": {
            "name": "channel_repository",
            "location": 38,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": []
            }
        },
        "subscription_repository": {
            "name": "subscription_repository",
            "location": 44,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": []
            }
        },
        "message_repository": {
            "name": "message_repository",
            "location": 50,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": []
            }
        },
        "delivery_service": {
            "name": "delivery_service",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/application/managers/test_notification_coordinator.py": {
        "notification_manager": {
            "name": "notification_manager",
            "location": 13,
            "return": [],
            "arguments": {
                "channel_repository": [],
                "device_repository": [],
                "message_repository": [],
                "delivery_service": []
            }
        },
        "test_notification_manager_instantiation": {
            "name": "test_notification_manager_instantiation",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "notification_manager": [
                    "instark.application.managers.notification_manager.NotificationManager"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_registration_coordinator.py": {
        "registration_manager": {
            "name": "registration_manager",
            "location": 13,
            "return": [],
            "arguments": {
                "device_repository": [],
                "message_repository": [],
                "subscription_repository": [],
                "delivery_service": []
            }
        },
        "test_registation_manager_instantiation": {
            "name": "test_registation_manager_instantiation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "registration_manager": [
                    "instark.application.managers.registration_manager.RegistrationManager"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_session_coordinator.py": {
        "auth_provider": {
            "name": "auth_provider",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "session_manager": {
            "name": "session_manager",
            "location": 21,
            "return": [],
            "arguments": {
                "tenant_provider": [],
                "auth_provider": []
            }
        },
        "test_session_manager_creation": {
            "name": "test_session_manager_creation",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.session_manager.SessionManager"
                ]
            }
        },
        "test_session_manager_set_tenant": {
            "name": "test_session_manager_set_tenant",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.session_manager.SessionManager"
                ]
            }
        },
        "test_session_manager_get_tenant": {
            "name": "test_session_manager_get_tenant",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.session_manager.SessionManager"
                ]
            }
        },
        "test_session_manager_set_user": {
            "name": "test_session_manager_set_user",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "session_manager": [
                    "instark.application.managers.session_manager.SessionManager"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/test_subscription_coordinator.py": {
        "subscription_manager": {
            "name": "subscription_manager",
            "location": 13,
            "return": [],
            "arguments": {
                "channel_repository": [],
                "device_repository": [],
                "message_repository": [],
                "subscription_repository": [],
                "delivery_service": []
            }
        },
        "test_subscription_manager_instantiation": {
            "name": "test_subscription_manager_instantiation",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "subscription_manager": [
                    "instark.application.managers.subscription_manager.SubscriptionManager"
                ]
            }
        }
    },
    "instark-master/tests/application/managers/__init__.py": {},
    "instark-master/tests/core/__init__.py": {},
    "instark-master/tests/core/data/__init__.py": {},
    "instark-master/tests/core/data/sql/__init__.py": {},
    "instark-master/tests/core/data/sql/connection/conftest.py": {
        "connection_database": {
            "name": "connection_database",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "mock_pool": {
            "name": "mock_pool",
            "location": 16,
            "return": [],
            "arguments": {
                "connection_database": [],
                "monkeypatch": []
            }
        },
        "default_connection_manager": {
            "name": "default_connection_manager",
            "location": 60,
            "return": [],
            "arguments": {
                "connection_database": [],
                "mock_pool": []
            }
        },
        "mock_pool.MockTransaction.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mock_pool.MockConnection.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mock_pool.MockConnection.transaction": {
            "name": "transaction",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/test_connection_manager.py": {
        "test_connection_manager_methods": {
            "name": "test_connection_manager_methods",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_connection_manager_instantiation": {
            "name": "test_default_connection_manager_instantiation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "default_connection_manager": []
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/test_sql_transaction_manager.py": {
        "connection_manager": {
            "name": "connection_manager",
            "location": 22,
            "return": [],
            "arguments": {
                "default_connection_manager": []
            }
        },
        "tenant_provider": {
            "name": "tenant_provider",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "transaction_manager": {
            "name": "transaction_manager",
            "location": 34,
            "return": [],
            "arguments": {
                "connection_manager": [],
                "tenant_provider": []
            }
        },
        "sample_repository": {
            "name": "sample_repository",
            "location": 41,
            "return": [],
            "arguments": {
                "connection_manager": [],
                "tenant_provider": []
            }
        },
        "dummy_manager": {
            "name": "dummy_manager",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_transaction_manager_instantiation": {
            "name": "test_transaction_manager_instantiation",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction_manager": []
            }
        },
        "test_order_by_channel": {
            "name": "test_order_by_channel",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_order_by_device": {
            "name": "test_order_by_device",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "SampleEntity.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dummy_manager.DummyManager.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_repository": []
            }
        }
    },
    "instark-master/tests/core/data/sql/connection/__init__.py": {},
    "instark-master/tests/core/suppliers/__init__.py": {},
    "instark-master/tests/core/suppliers/common/__init__.py": {},
    "instark-master/tests/core/suppliers/common/connection/test_schema_connection.py": {
        "driver_connection": {
            "name": "driver_connection",
            "location": 8,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "schema_connection": {
            "name": "schema_connection",
            "location": 50,
            "return": [],
            "arguments": {
                "driver_connection": []
            }
        },
        "test_schema_connection_instantiation": {
            "name": "test_schema_connection_instantiation",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_connection": []
            }
        },
        "test_schema_connection_open": {
            "name": "test_schema_connection_open",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_connection": []
            }
        },
        "test_schema_connection_close": {
            "name": "test_schema_connection_close",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_connection": []
            }
        },
        "test_schema_connection_execute": {
            "name": "test_schema_connection_execute",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_connection": []
            }
        },
        "test_schema_connection_select": {
            "name": "test_schema_connection_select",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_connection": []
            }
        },
        "driver_connection.mock_connect": {
            "name": "mock_connect",
            "location": 43,
            "return": [],
            "arguments": {
                "dsn": []
            }
        },
        "driver_connection.MockDriverCursor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "dsn": []
            }
        },
        "driver_connection.MockDriverCursor.execute": {
            "name": "execute",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "params": []
            }
        },
        "driver_connection.MockDriverCursor.fetchall": {
            "name": "fetchall",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverCursor.close": {
            "name": "close",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dsn": []
            }
        },
        "driver_connection.MockDriverConnection.cursor": {
            "name": "cursor",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.commit": {
            "name": "commit",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "driver_connection.MockDriverConnection.close": {
            "name": "close",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/core/suppliers/common/connection/__init__.py": {},
    "instark-master/tests/core/suppliers/common/tenancy/test_tenant_supplier.py": {
        "test_tenant_supplier_methods": {
            "name": "test_tenant_supplier_methods",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_search": {
            "name": "test_memory_tenant_supplier_search",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_ensure_tenant": {
            "name": "test_memory_tenant_supplier_ensure_tenant",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/core/suppliers/common/tenancy/__init__.py": {},
    "instark-master/tests/core/suppliers/migration/test_migration_supplier.py": {
        "test_migration_supplier_methods": {
            "name": "test_migration_supplier_methods",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_migration_supplier_migrate": {
            "name": "test_memory_migration_supplier_migrate",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/core/suppliers/migration/test_schema_migration_supplier.py": {
        "mock_tenant_supplier": {
            "name": "mock_tenant_supplier",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "schema_migration_supplier": {
            "name": "schema_migration_supplier",
            "location": 24,
            "return": [],
            "arguments": {
                "mock_tenant_supplier": []
            }
        },
        "test_schema_migration_supplier_instantiation": {
            "name": "test_schema_migration_supplier_instantiation",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": []
            }
        },
        "test_schema_migration_supplier_migrate": {
            "name": "test_schema_migration_supplier_migrate",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": [],
                "monkeypatch": []
            }
        },
        "test_schema_migration_supplier_migrate_missing": {
            "name": "test_schema_migration_supplier_migrate_missing",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_migration_supplier": []
            }
        },
        "test_schema_migration_supplier_migrate.mock_sql_migrate": {
            "name": "mock_sql_migrate",
            "location": 41,
            "return": [],
            "arguments": {
                "connection": [],
                "path": [],
                "schema": [],
                "context": [],
                "target_version": []
            }
        }
    },
    "instark-master/tests/core/suppliers/migration/__init__.py": {},
    "instark-master/tests/factories/test_factories.py": {
        "test_factories": {
            "name": "test_factories",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/factories/__init__.py": {},
    "instark-master/tests/presenters/__init__.py": {},
    "instark-master/tests/presenters/delivery/__init__.py": {},
    "instark-master/tests/presenters/delivery/firebase/test_delivery_service.py": {
        "test_firebase_delivery_service": {
            "name": "test_firebase_delivery_service",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_firebase_delivery_service.mock_initialize_app": {
            "name": "mock_initialize_app",
            "location": 18,
            "return": [],
            "arguments": {
                "credentials": []
            }
        },
        "test_firebase_delivery_service.MockCredentials.Certificate": {
            "name": "Certificate",
            "location": 12,
            "return": [],
            "arguments": {
                "certificate_path": []
            }
        },
        "test_firebase_delivery_service.MockMessaging.Notification": {
            "name": "Notification",
            "location": 36,
            "return": [],
            "arguments": {
                "body": []
            }
        },
        "test_firebase_delivery_service.MockMessaging.Message": {
            "name": "Message",
            "location": 40,
            "return": [],
            "arguments": {
                "data": [],
                "token": [],
                "topic": []
            }
        },
        "test_firebase_delivery_service.MockMessaging.send": {
            "name": "send",
            "location": 44,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_firebase_delivery_service.MockMessaging.subscribe_to_topic": {
            "name": "subscribe_to_topic",
            "location": 48,
            "return": [],
            "arguments": {
                "tokens": [],
                "topic": []
            }
        }
    },
    "instark-master/tests/presenters/delivery/firebase/__init__.py": {},
    "instark-master/tests/presenters/rest/conftest.py": {
        "app": {
            "name": "app",
            "location": 9,
            "return": [],
            "arguments": {
                "loop": [],
                "aiohttp_client": []
            }
        },
        "headers": {
            "name": "headers",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/rest/test_rest.py": {},
    "instark-master/tests/presenters/rest/xtest_base.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/rest/xtest_spec.py": {
        "spec": {
            "name": "spec",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "resource": {
            "name": "resource",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_spec": {
            "name": "test_spec",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": []
            }
        },
        "test_spec_resource_plugin_path_helper": {
            "name": "test_spec_resource_plugin_path_helper",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "spec": [],
                "resource": []
            }
        },
        "test_spec_resource_plugin_no_resource": {
            "name": "test_spec_resource_plugin_no_resource",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "spec": [],
                "resource": []
            }
        },
        "resource.MockResource.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "resource.MockResource.post": {
            "name": "post",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instark-master/tests/presenters/rest/__init__.py": {},
    "instark-master/tests/presenters/rest/api/xtest_api.py": {},
    "instark-master/tests/presenters/rest/api/__init__.py": {},
    "instark-master/tests/presenters/shell/conftest.py": {
        "shell": {
            "name": "shell",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "instark-master/tests/presenters/shell/test_shell.py": {
        "test_shell_instantiation": {
            "name": "test_shell_instantiation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "shell": []
            }
        },
        "test_shell_serve.MockRestApplication.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "injector": []
            }
        }
    },
    "instark-master/tests/presenters/shell/__init__.py": {}
}
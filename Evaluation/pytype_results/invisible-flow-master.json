{
    "invisible-flow-master/gunicorn.config.py": {},
    "invisible-flow-master/manage.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "_app": []
            }
        }
    },
    "invisible-flow-master/run-api-tests.py": {
        "wait_for_server_to_start": {
            "name": "wait_for_server_to_start",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/api_tests/foia_upload_test.py": {
        "TestFoiaUpload.test_post_request_file_must_be_a_valid_file_type": {
            "name": "test_post_request_file_must_be_a_valid_file_type",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFoiaUpload.test_post_request_must_contain_a_file": {
            "name": "test_post_request_must_contain_a_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFoiaUpload.test_post_request_must_specify_response_type": {
            "name": "test_post_request_must_specify_response_type",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/frontend/__init__.py": {},
    "invisible-flow-master/invisible_flow/app.py": {
        "status": {
            "name": "status",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 48,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "copa_scrape": {
            "name": "copa_scrape",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "foia_response_upload": {
            "name": "foia_response_upload",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "start_copa_job": {
            "name": "start_copa_job",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "job_status": {
            "name": "job_status",
            "location": 124,
            "return": [],
            "arguments": {
                "job_id": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/app_factory.py": {
        "AppFactory.create_app": {
            "name": "create_app",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/constants.py": {},
    "invisible-flow-master/invisible_flow/globals_factory.py": {
        "GlobalsFactory.get_request_context": {
            "name": "get_request_context",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "GlobalsFactory.get_current_datetime_utc": {
            "name": "get_current_datetime_utc",
            "location": 13,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/validation.py": {
        "is_valid_file_type": {
            "name": "is_valid_file_type",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/__init__.py": {},
    "invisible-flow-master/invisible_flow/api/copa_scrape.py": {
        "scrape_data": {
            "name": "scrape_data",
            "location": 7,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "get_num_rows": {
            "name": "get_num_rows",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/api/__init__.py": {},
    "invisible-flow-master/invisible_flow/copa/augment.py": {
        "Augment.get_augmented_copa_data": {
            "name": "get_augmented_copa_data",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "allegation_rows": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/converter.py": {
        "convert_sql_alchemy_obj_to_dict": {
            "name": "convert_sql_alchemy_obj_to_dict",
            "location": 2,
            "return": [
                "Any"
            ],
            "arguments": {
                "sql_alchemy_obj": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/data_allegation.py": {
        "insert_allegation_into_database": {
            "name": "insert_allegation_into_database",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "DataAllegation"
                ]
            }
        },
        "DataAllegation.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataAllegation.__getitem__": {
            "name": "__getitem__",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/data_allegation_category.py": {
        "insert_data_allegation_category_record_into_database": {
            "name": "insert_data_allegation_category_record_into_database",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "DataAllegationCategory"
                ]
            }
        },
        "DataAllegationCategory.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/data_complainant.py": {
        "insert_officer_allegation_into_database": {
            "name": "insert_officer_allegation_into_database",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "DataComplainant"
                ]
            }
        },
        "DataComplainant.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/data_officer_allegation.py": {
        "insert_officer_allegation_into_database": {
            "name": "insert_officer_allegation_into_database",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "DataOfficerAllegation"
                ]
            }
        },
        "DataOfficerAllegation.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/data_officer_unknown.py": {
        "insert_officerunknown_into_database": {
            "name": "insert_officerunknown_into_database",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "record": [
                    "DataOfficerUnknown"
                ]
            }
        },
        "DataOfficerUnknown.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/loader.py": {
        "Loader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loader.load_into_db": {
            "name": "load_into_db",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformed_data": []
            }
        },
        "Loader.load_officers_into_db": {
            "name": "load_officers_into_db",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_rows": [
                    "int"
                ],
                "cr_id": [
                    "str"
                ],
                "row": []
            }
        },
        "Loader.get_allegation_matches": {
            "name": "get_allegation_matches",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loader.get_new_allegation_data": {
            "name": "get_new_allegation_data",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/saver.py": {
        "strip_zeroes_from_beat_id": {
            "name": "strip_zeroes_from_beat_id",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "df_with_beat_id_col": []
            }
        },
        "cast_col_to_int": {
            "name": "cast_col_to_int",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "dataframe": [],
                "column_label": [
                    "str"
                ]
            }
        },
        "Saver.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Saver.save_to_csv": {
            "name": "save_to_csv",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_from_copa_scrape": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/copa/__init__.py": {},
    "invisible-flow-master/invisible_flow/entities/data_allegation.py": {
        "Allegation.__iter__": {
            "name": "__iter__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Allegation.to_array": {
            "name": "to_array",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/entities/data_allegation_category.py": {},
    "invisible-flow-master/invisible_flow/entities/data_complainant.py": {},
    "invisible-flow-master/invisible_flow/entities/data_investigator.py": {},
    "invisible-flow-master/invisible_flow/entities/data_officer.py": {},
    "invisible-flow-master/invisible_flow/entities/data_officer_badge_number.py": {},
    "invisible-flow-master/invisible_flow/entities/data_police_unit.py": {},
    "invisible-flow-master/invisible_flow/entities/__init__.py": {},
    "invisible-flow-master/invisible_flow/jobs/entities.py": {
        "insert_job_record_into_database": {
            "name": "insert_job_record_into_database",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "JobRecordModel"
                ]
            }
        },
        "JobRecordModel.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRecordModel.validate_status": {
            "name": "validate_status",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "attribute_name": [],
                "attribute_value": []
            }
        },
        "JobRecordModel.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/jobs/jobs_mapper.py": {
        "JobsMapper.store_job": {
            "name": "store_job",
            "location": 7,
            "return": [
                "_T0"
            ],
            "arguments": {
                "job": [
                    "_T0"
                ]
            }
        },
        "JobsMapper.get_job": {
            "name": "get_job",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "job_id": [
                    "int"
                ]
            }
        },
        "JobsMapper.update_job": {
            "name": "update_job",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": [
                    "int"
                ],
                "new_status": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/jobs/job_controller.py": {
        "copa_scrape": {
            "name": "copa_scrape",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_copa_job": {
            "name": "do_copa_job",
            "location": 23,
            "return": [
                "JobRecord"
            ],
            "arguments": {}
        },
        "run_copa_scrape_and_monitor_progress": {
            "name": "run_copa_scrape_and_monitor_progress",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "job_id": []
            }
        },
        "get_job_status": {
            "name": "get_job_status",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "id": []
            }
        },
        "JobRecord.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "job_id": []
            }
        },
        "JobRecord.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRecord.__eq__": {
            "name": "__eq__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "object"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/jobs/__init__.py": {},
    "invisible-flow-master/invisible_flow/lib/meta_data_creator.py": {
        "MetaDataCreator.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "commit": [
                    "str"
                ],
                "origin": [
                    "str"
                ]
            }
        },
        "MetaDataCreator.build_and_return_dict": {
            "name": "build_and_return_dict",
            "location": 20,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaDataCreator.write_file_to_gcp": {
            "name": "write_file_to_gcp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gcp_client": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/lib/__init__.py": {},
    "invisible-flow-master/invisible_flow/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 68,
            "return": [],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/3d1e1fc07ced_add_data_officerunknown_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/99c65ad0d581_changed_dataofficerunknown_age_type_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/ae6854ad2b65_in_data_officer_unknown_tables_changed_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/bbd684b70856_changed_dataofficerunknown_years_on_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/c21e3b3a073f_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/f448eae8501b_add_job_record_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/migrations/versions/f94c62d406e4_change_table_name_of_data_officer_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/storage/gcs_storage.py": {
        "GCStorage.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gcs_client": []
            }
        },
        "GCStorage.store_byte_string": {
            "name": "store_byte_string",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": []
            }
        },
        "GCStorage.store_string_with_type": {
            "name": "store_string_with_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": [],
                "file_type": []
            }
        },
        "GCStorage.get": {
            "name": "get",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "path": []
            }
        },
        "GCStorage.store_metadata": {
            "name": "store_metadata",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "metadata_text": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/storage/local_storage.py": {
        "LocalStorage.store_byte_string": {
            "name": "store_byte_string",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "LocalStorage.store_string_with_type": {
            "name": "store_string_with_type",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": [
                    "str"
                ],
                "file_type": [
                    "str"
                ]
            }
        },
        "LocalStorage.get": {
            "name": "get",
            "location": 24,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "path": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/storage/storage_base.py": {
        "StorageBase.get": {
            "name": "get",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "path": []
            }
        },
        "StorageBase.store_byte_string": {
            "name": "store_byte_string",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "StorageBase.store_string_with_type": {
            "name": "store_string_with_type",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "file_content": [
                    "bytes"
                ],
                "path": [
                    "str"
                ],
                "file_type": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/storage/storage_factory.py": {
        "StorageFactory.get_storage": {
            "name": "get_storage",
            "location": 11,
            "return": [
                "invisible_flow.storage.storage_base.StorageBase"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/invisible_flow/storage/__init__.py": {},
    "invisible-flow-master/invisible_flow/transformers/accused_transformer.py": {
        "AccusedTransformer.transform": {
            "name": "transform",
            "location": 11,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ],
                "csv_content": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/case_info_allegations_transformer.py": {
        "CaseInfoAllegationsTransformer.row_to_allegation": {
            "name": "row_to_allegation",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": []
            }
        },
        "CaseInfoAllegationsTransformer.transform_case_info_csv_to_allegation": {
            "name": "transform_case_info_csv_to_allegation",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {
                "csv_content": [
                    "str"
                ]
            }
        },
        "CaseInfoAllegationsTransformer.transform_allegations_to_database_ready_df": {
            "name": "transform_allegations_to_database_ready_df",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "allegations": [
                    "list"
                ]
            }
        },
        "CaseInfoAllegationsTransformer.case_info_csv_to_allegation_csv": {
            "name": "case_info_csv_to_allegation_csv",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "csv_content": [
                    "str"
                ]
            }
        },
        "CaseInfoAllegationsTransformer.transform": {
            "name": "transform",
            "location": 54,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ],
                "file_content": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/complainant_transformer.py": {
        "ComplainantTransformer.change_birth_year_to_age": {
            "name": "change_birth_year_to_age",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "ComplainantTransformer.transform": {
            "name": "transform",
            "location": 17,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ],
                "file_content": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/copa_scrape_transformer.py": {
        "CopaScrapeTransformer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.transform": {
            "name": "transform",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scraped_data": [
                    "bytes"
                ]
            }
        },
        "CopaScrapeTransformer.__transform_logno_to_crid": {
            "name": "__transform_logno_to_crid",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_demographic": {
            "name": "__transform_officer_demographic",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_gender": {
            "name": "__transform_officer_gender",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_demographics_to_number_of_rows": {
            "name": "__transform_officer_demographics_to_number_of_rows",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.__transform_beat_id": {
            "name": "__transform_beat_id",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.get_transformed_data": {
            "name": "get_transformed_data",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.get_non_transformable_data": {
            "name": "get_non_transformable_data",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.transform_beat_id_helper": {
            "name": "transform_beat_id_helper",
            "location": 67,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "beat": []
            }
        },
        "CopaScrapeTransformer.validate_beat_ids": {
            "name": "validate_beat_ids",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "beat_ids": []
            }
        },
        "CopaScrapeTransformer.beat_is_valid": {
            "name": "beat_is_valid",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "beat": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_race": {
            "name": "__transform_officer_race",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_gender.split_and_clean": {
            "name": "split_and_clean",
            "location": 43,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "CopaScrapeTransformer.__transform_officer_race.split_and_map": {
            "name": "split_and_map",
            "location": 96,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/investigator_transformer.py": {
        "InvestigatorTransformer.row_to_investigator": {
            "name": "row_to_investigator",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [
                    "InvestigatorTransformer"
                ]
            }
        },
        "InvestigatorTransformer.transform_investigator_csv_to_entity_list": {
            "name": "transform_investigator_csv_to_entity_list",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "csv_content": [
                    "InvestigatorTransformer"
                ]
            }
        },
        "InvestigatorTransformer.transform_investigator_entities_to_df": {
            "name": "transform_investigator_entities_to_df",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "entities": [
                    "InvestigatorTransformer"
                ]
            }
        },
        "InvestigatorTransformer.get_property_values": {
            "name": "get_property_values",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "investigator_entity": [
                    "InvestigatorTransformer"
                ],
                "column_list": []
            }
        },
        "InvestigatorTransformer.transform_investigator_csv_to_investigator_csv": {
            "name": "transform_investigator_csv_to_investigator_csv",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "csv_content": [
                    "InvestigatorTransformer"
                ]
            }
        },
        "InvestigatorTransformer.transform": {
            "name": "transform",
            "location": 40,
            "return": [
                "List[Tuple[(_T0, Any)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "_T0"
                ],
                "file_content": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/transformer_base.py": {
        "TransformerBase.transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ],
                "file_content": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/transformer_factory.py": {
        "TransformerFactory.get_transformer": {
            "name": "get_transformer",
            "location": 11,
            "return": [
                "invisible_flow.transformers.transformer_base.TransformerBase"
            ],
            "arguments": {
                "response_type": []
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/victim_transformer.py": {
        "VictimTransformer.change_birth_year_to_age_at_incident": {
            "name": "change_birth_year_to_age_at_incident",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "VictimTransformer.change_sex_to_one_letter": {
            "name": "change_sex_to_one_letter",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "VictimTransformer.transform": {
            "name": "transform",
            "location": 21,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "response_type": [
                    "str"
                ],
                "file_content": [
                    "str"
                ]
            }
        }
    },
    "invisible-flow-master/invisible_flow/transformers/__init__.py": {},
    "invisible-flow-master/tests/test_app.py": {
        "TestInvisibleFlowApp.client": {
            "name": "client",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInvisibleFlowApp.test_index_route_throws_on_post_request": {
            "name": "test_index_route_throws_on_post_request",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestInvisibleFlowApp.test_foia_response_upload_uploads_to_memory": {
            "name": "test_foia_response_upload_uploads_to_memory",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestInvisibleFlowApp.test_unsupported_file_type_throw_on_post_request": {
            "name": "test_unsupported_file_type_throw_on_post_request",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "extension": [],
                "client": []
            }
        },
        "TestInvisibleFlowApp.test_copa_scrape_endpoint_responds": {
            "name": "test_copa_scrape_endpoint_responds",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestInvisibleFlowApp.drop_with_cascade": {
            "name": "drop_with_cascade",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvisibleFlowApp._compile_drop_table": {
            "name": "_compile_drop_table",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "compiler": []
            }
        }
    },
    "invisible-flow-master/tests/test_validation.py": {
        "test_should_return_true_for_valid_extensions": {
            "name": "test_should_return_true_for_valid_extensions",
            "location": 7,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "test_should_return_false_for_invalid_extensions": {
            "name": "test_should_return_false_for_invalid_extensions",
            "location": 12,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "invisible-flow-master/tests/__init__.py": {},
    "invisible-flow-master/tests/api/test_copa_scrape.py": {
        "mocked_rows_requests_get_failure": {
            "name": "mocked_rows_requests_get_failure",
            "location": 21,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "mocked_requests_get_failure": {
            "name": "mocked_requests_get_failure",
            "location": 25,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "mocked_requests_get": {
            "name": "mocked_requests_get",
            "location": 33,
            "return": [
                "MockResponse"
            ],
            "arguments": {}
        },
        "test_copa_scrape": {
            "name": "test_copa_scrape",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_copa_scrape_with_errors": {
            "name": "test_copa_scrape_with_errors",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_copa_scrape_with_count_errors": {
            "name": "test_copa_scrape_with_count_errors",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_data": [],
                "status_code": [],
                "content": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_augment.py": {
        "TestAugment.test_adding_augmented_copa_record_to_db_no_category_matches": {
            "name": "test_adding_augmented_copa_record_to_db_no_category_matches",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAugment.test_adding_augmented_copa_record_to_db": {
            "name": "test_adding_augmented_copa_record_to_db",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_converter.py": {
        "TestConverter.get_data_allegation": {
            "name": "get_data_allegation",
            "location": 8,
            "return": [
                "invisible_flow.copa.data_allegation.DataAllegation"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConverter.test_convert_data_allegation_to_dict": {
            "name": "test_convert_data_allegation_to_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_data_allegation.py": {
        "TestDataAllegation.get_db": {
            "name": "get_db",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegation.get_data_allegation": {
            "name": "get_data_allegation",
            "location": 19,
            "return": [
                "invisible_flow.copa.data_allegation.DataAllegation"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegation.test_create_data_allegation": {
            "name": "test_create_data_allegation",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegation.test_adding_copa_record_to_db_works": {
            "name": "test_adding_copa_record_to_db_works",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_db": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_data_allegation_category.py": {
        "TestDataAllegationCategory.get_db": {
            "name": "get_db",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegationCategory.get_data_allegation_category": {
            "name": "get_data_allegation_category",
            "location": 19,
            "return": [
                "invisible_flow.copa.data_allegation_category.DataAllegationCategory"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegationCategory.test_create_data_allegation_category": {
            "name": "test_create_data_allegation_category",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataAllegationCategory.test_adding_data_allegation_category_to_db_works": {
            "name": "test_adding_data_allegation_category_to_db_works",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_db": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_data_complainant.py": {
        "TestComplainant.get_db": {
            "name": "get_db",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestComplainant.get_data_complainant": {
            "name": "get_data_complainant",
            "location": 19,
            "return": [
                "invisible_flow.copa.data_complainant.DataComplainant"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplainant.test_create_data_complainant": {
            "name": "test_create_data_complainant",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplainant.test_adding_data_complainant_to_db_works": {
            "name": "test_adding_data_complainant_to_db_works",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_db": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_data_officer_allegation.py": {
        "TestDataOfficerAllegation.get_db": {
            "name": "get_db",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataOfficerAllegation.get_data_officer_allegation": {
            "name": "get_data_officer_allegation",
            "location": 20,
            "return": [
                "invisible_flow.copa.data_officer_allegation.DataOfficerAllegation"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataOfficerAllegation.test_create_data_officer_allegation": {
            "name": "test_create_data_officer_allegation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataOfficerAllegation.test_adding_data_officer_allegation_to_db_works": {
            "name": "test_adding_data_officer_allegation_to_db_works",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_db": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_loader.py": {
        "TestLoader.set_up": {
            "name": "set_up",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_load_data_into_empty_database": {
            "name": "test_load_data_into_empty_database",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_get_new_data": {
            "name": "test_get_new_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_get_matches": {
            "name": "test_get_matches",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.setup_db_with_mock_data_rows": {
            "name": "setup_db_with_mock_data_rows",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_load_data_with_beat_id": {
            "name": "test_load_data_with_beat_id",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_load_officer_data": {
            "name": "test_load_officer_data",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_officer_allegation_dataframe_is_filled_when_load_officer_into_db": {
            "name": "test_officer_allegation_dataframe_is_filled_when_load_officer_into_db",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_unknown_officer_dataframe_is_filled_when_load_officer_into_db": {
            "name": "test_unknown_officer_dataframe_is_filled_when_load_officer_into_db",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/copa/test_saver.py": {
        "TestSaver.get_data": {
            "name": "get_data",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSaver.test_save_empty_df_to_csv": {
            "name": "test_save_empty_df_to_csv",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSaver.test_save_non_empty_list_to_csv": {
            "name": "test_save_non_empty_list_to_csv",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "get_data": []
            }
        },
        "TestSaver.test_save_officer_unknown_table_to_csv": {
            "name": "test_save_officer_unknown_table_to_csv",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "get_data": []
            }
        },
        "TestSaver.test_strip_zeroes_from_beat_id": {
            "name": "test_strip_zeroes_from_beat_id",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_data": []
            }
        },
        "TestSaver.test_cast_col_to_int": {
            "name": "test_cast_col_to_int",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_data": []
            }
        }
    },
    "invisible-flow-master/tests/entities/test_allegation.py": {
        "TestAllegation.test_allegation_to_array": {
            "name": "test_allegation_to_array",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/entities/test_data_investigator.py": {
        "TestInvestigator.test_values_are_unmodified": {
            "name": "test_values_are_unmodified",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/entities/__init__.py": {},
    "invisible-flow-master/tests/helpers/if_test_base.py": {},
    "invisible-flow-master/tests/helpers/testing_data.py": {},
    "invisible-flow-master/tests/integration/test_integration_copa_scrape.py": {
        "TestCopaSrapeIntegration.get_copa_data": {
            "name": "get_copa_data",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCopaSrapeIntegration.get_copa_data_demographics": {
            "name": "get_copa_data_demographics",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCopaSrapeIntegration.initialize_database": {
            "name": "initialize_database",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "TestCopaSrapeIntegration.test_copa_scrape_integration": {
            "name": "test_copa_scrape_integration",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "get_copa_data_demographics": []
            }
        }
    },
    "invisible-flow-master/tests/integration/__init__.py": {},
    "invisible-flow-master/tests/jobs/test_entities.py": {
        "TestJobRecord.set_up": {
            "name": "set_up",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobRecord.test_job_record_entity_allows_valid_statuses": {
            "name": "test_job_record_entity_allows_valid_statuses",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "TestJobRecord.test_job_record_entity_does_not_allow_invalid_statuses": {
            "name": "test_job_record_entity_does_not_allow_invalid_statuses",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobRecord.test_adding_job_record_to_db_works": {
            "name": "test_adding_job_record_to_db_works",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/jobs/test_job_controller.py": {
        "TestJobController.test_Run_copa_scrape_Do_copa_job_should_spawn_process_store_job_and_return_job_id": {
            "name": "test_Run_copa_scrape_Do_copa_job_should_spawn_process_store_job_and_return_job_id",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "process_mock": [],
                "jobs_mapper_mock": [],
                "db_mock": []
            }
        },
        "TestJobController.test_Run_copa_scrape_Job_status_is_updated_when_copa_scrape_done": {
            "name": "test_Run_copa_scrape_Job_status_is_updated_when_copa_scrape_done",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "update_job_mock": [],
                "copa_scrape_mock": [],
                "db_mock": []
            }
        },
        "TestJobController.test_Run_copa_scrape_Dispose_of_engine_and_run_scrape": {
            "name": "test_Run_copa_scrape_Dispose_of_engine_and_run_scrape",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "update_job_mock": [],
                "copa_scrape_mock": [],
                "db_mock": []
            }
        }
    },
    "invisible-flow-master/tests/jobs/__init__.py": {},
    "invisible-flow-master/tests/lib/test_meta_data_creator.py": {
        "test_invalid_filename_throw_value_error": {
            "name": "test_invalid_filename_throw_value_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_commit_throw_value_error": {
            "name": "test_invalid_commit_throw_value_error",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_origin_throw_value_error": {
            "name": "test_invalid_origin_throw_value_error",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_filename_is_original_filename_with_json_ext": {
            "name": "test_output_filename_is_original_filename_with_json_ext",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_dict_contains_origin_and_sha": {
            "name": "test_build_dict_contains_origin_and_sha",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_file_write_to_gcp_called": {
            "name": "test_json_file_write_to_gcp_called",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "invisible-flow-master/tests/storage/test_gc_storage.py": {
        "TestGCStorage.create_gcs_storage": {
            "name": "create_gcs_storage",
            "location": 12,
            "return": [
                "invisible_flow.storage.gcs_storage.GCStorage"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGCStorage.test_store_byte_string_sends_file_contents_string_to_gcp": {
            "name": "test_store_byte_string_sends_file_contents_string_to_gcp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/storage/test_local_storage.py": {
        "TestLocalStorage.test_store_byte_string_does_not_throw_exception_when_used": {
            "name": "test_store_byte_string_does_not_throw_exception_when_used",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_store_byte_string_writes_file_locally": {
            "name": "test_store_byte_string_writes_file_locally",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalStorage.test_get_retrieves_locally_stored_files": {
            "name": "test_get_retrieves_locally_stored_files",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/storage/__init__.py": {},
    "invisible-flow-master/tests/transformers/test_accusedTransformer.py": {
        "TestAccusedTransformer.test_transform_head": {
            "name": "test_transform_head",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_caseInfoAllegationsTransformer.py": {
        "TestCaseInfoAllegationsTransformer.test_transform_case_info_csv_to_allegation": {
            "name": "test_transform_case_info_csv_to_allegation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInfoAllegationsTransformer.test_transform_allegations_to_database_ready_df": {
            "name": "test_transform_allegations_to_database_ready_df",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInfoAllegationsTransformer.test_case_info_csv_to_allegation_csv": {
            "name": "test_case_info_csv_to_allegation_csv",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInfoAllegationsTransformer.test_transform": {
            "name": "test_transform",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_complainantTransformer.py": {
        "TestComplainantTransformer.test_change_birth_year_to_age": {
            "name": "test_change_birth_year_to_age",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplainantTransformer.test_transform": {
            "name": "test_transform",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_copa_scrape_transformer.py": {
        "TestCopaTransformer.test_copa_transform_with_demographics": {
            "name": "test_copa_transform_with_demographics",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopaTransformer.test__transform_officer_should_return_empty_list_when_demographic_string_is_empty": {
            "name": "test__transform_officer_should_return_empty_list_when_demographic_string_is_empty",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopaTransformer.test__transform_officer_should_return_one_row_when_demographic_string_has_one_officer": {
            "name": "test__transform_officer_should_return_one_row_when_demographic_string_has_one_officer",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopaTransformer.test__transform_officer_should_return_multiple_rows_when_demographic_string_has_multiple_officer": {
            "name": "test__transform_officer_should_return_multiple_rows_when_demographic_string_has_multiple_officer",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCopaTransformer.test__transform_officer_race_demographics": {
            "name": "test__transform_officer_race_demographics",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_investigators_transformer.py": {
        "TestInvestigatorTransformer.test_transform_investigator_csv_to_investigator_entity_list": {
            "name": "test_transform_investigator_csv_to_investigator_entity_list",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvestigatorTransformer.test_transform_investigator_entity_to_investigator_df": {
            "name": "test_transform_investigator_entity_to_investigator_df",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvestigatorTransformer.test_transform_investigator_csv_to_investigator_csv": {
            "name": "test_transform_investigator_csv_to_investigator_csv",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvestigatorTransformer.test_transform_returns_filename_and_contents": {
            "name": "test_transform_returns_filename_and_contents",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_transformer_factory.py": {
        "test_response_type_is_invalid": {
            "name": "test_response_type_is_invalid",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTransformerFactory.test_response_type_is_case_info": {
            "name": "test_response_type_is_case_info",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformerFactory.test_response_type_is_investigator": {
            "name": "test_response_type_is_investigator",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformerFactory.test_response_type_is_complainant": {
            "name": "test_response_type_is_complainant",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/test_victims_transformer.py": {
        "TestVictimTransformer.test_change_sex_to_one_letter_with_m": {
            "name": "test_change_sex_to_one_letter_with_m",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVictimTransformer.test_change_sex_to_one_letter_with_f": {
            "name": "test_change_sex_to_one_letter_with_f",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVictimTransformer.test_change_sex_to_one_letter_with_unkown_sex": {
            "name": "test_change_sex_to_one_letter_with_unkown_sex",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVictimTransformer.test_transform": {
            "name": "test_transform",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "invisible-flow-master/tests/transformers/__init__.py": {}
}
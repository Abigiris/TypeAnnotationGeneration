{
    "ippon_back-master/gen_secrets.sh.py": {
        "gen_ssh": {
            "name": "gen_ssh",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": []
            }
        },
        "gen_key": {
            "name": "gen_key",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ippon_back-master/manage.py": {},
    "ippon_back-master/auth_server/admin.py": {},
    "ippon_back-master/auth_server/apps.py": {},
    "ippon_back-master/auth_server/models.py": {},
    "ippon_back-master/auth_server/serializers.py": {
        "UserTokenSerializer.get_token": {
            "name": "get_token",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "user": []
            }
        }
    },
    "ippon_back-master/auth_server/urls.py": {},
    "ippon_back-master/auth_server/views.py": {
        "view_pubkey": {
            "name": "view_pubkey",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ippon_back-master/auth_server/__init__.py": {},
    "ippon_back-master/auth_server/migrations/__init__.py": {},
    "ippon_back-master/e2e/test_e2e.py": {
        "MySeleniumTests.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MySeleniumTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MySeleniumTests.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySeleniumTests.log_in": {
            "name": "log_in",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySeleniumTests.test_login": {
            "name": "test_login",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MySeleniumTests.test_logout": {
            "name": "test_logout",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/e2e/__init__.py": {},
    "ippon_back-master/ippon/admin.py": {},
    "ippon_back-master/ippon/apps.py": {},
    "ippon_back-master/ippon/urls.py": {},
    "ippon_back-master/ippon/__init__.py": {},
    "ippon_back-master/ippon/club/authorizations.py": {
        "has_club_authorization": {
            "name": "has_club_authorization",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "club_id": [],
                "request": []
            }
        }
    },
    "ippon_back-master/ippon/club/club_admins_views_test.py": {
        "ClubAdminViewTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetAuthorizedTests.test_creates_admin_with_valid_payload": {
            "name": "test_creates_admin_with_valid_payload",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetUnauthorizedTests.test_admin_creation_attempt_gets_forbidden": {
            "name": "test_admin_creation_attempt_gets_forbidden",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAdminViewSetUnauthenticatedTests.test_admin_creation_attempt_gets_unauthorized": {
            "name": "test_admin_creation_attempt_gets_unauthorized",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/club/club_authorization_views_test.py": {
        "ClubAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAuthorizationAuthenticatedTests.test_club_authorization_returns_positive_auth_if_authorized": {
            "name": "test_club_authorization_returns_positive_auth_if_authorized",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAuthorizationAuthenticatedTests.test_club_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_club_authorization_returns_negative_auth_if_not_authorized",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerAuthorizationAuthenticatedTests.test_player_authorization_returns_positive_auth_if_authorized": {
            "name": "test_player_authorization_returns_positive_auth_if_authorized",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerAuthorizationAuthenticatedTests.test_player_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_player_authorization_returns_negative_auth_if_not_authorized",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAuthorizationUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubAuthorizationUnauthenticatedTests.test_club_authorization_returns_negative_auth_if_not_authenticated": {
            "name": "test_club_authorization_returns_negative_auth_if_not_authenticated",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerAuthorizationUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerAuthorizationUnauthenticatedTests.test_player_authorization_returns_negative_auth_if_not_authenticated": {
            "name": "test_player_authorization_returns_negative_auth_if_not_authenticated",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/club/club_views_test.py": {
        "ClubViewTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_post_valid_payload_creates_specified_club": {
            "name": "test_post_valid_payload_creates_specified_club",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_newly_created_club_has_creator_as_admin": {
            "name": "test_newly_created_club_has_creator_as_admin",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_put_valid_payload_updates_club": {
            "name": "test_put_valid_payload_updates_club",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_delete_existing_club_deletes_it": {
            "name": "test_delete_existing_club_deletes_it",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_delete_not_existing_club_returns_bad_request": {
            "name": "test_delete_not_existing_club_returns_bad_request",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_players_lists_all_club_members": {
            "name": "test_players_lists_all_club_members",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_admins_lists_all_club_admins": {
            "name": "test_admins_lists_all_club_admins",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetAuthorizedTests.test_non_admins_lists_all_users_besides_club_admins": {
            "name": "test_non_admins_lists_all_users_besides_club_admins",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthorizedTests.test_put_gets_unauthorized": {
            "name": "test_put_gets_unauthorized",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthorizedTests.test_delete_gets_unauthorized": {
            "name": "test_delete_gets_unauthorized",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthorizedTests.test_admins_returns_forbidden": {
            "name": "test_admins_returns_forbidden",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthorizedTests.test_non_admins_returns_forbidden": {
            "name": "test_non_admins_returns_forbidden",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_list_returns_all_clubs": {
            "name": "test_list_returns_all_clubs",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_detail_for_existing_club_returns_correct_club": {
            "name": "test_detail_for_existing_club_returns_correct_club",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_detail_for_not_existing_club_returns_404": {
            "name": "test_detail_for_not_existing_club_returns_404",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_teams_unauthorized_delete_gets_unauthorized": {
            "name": "test_teams_unauthorized_delete_gets_unauthorized",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_admins_returns_unauthorized": {
            "name": "test_admins_returns_unauthorized",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubViewSetUnauthenticatedTests.test_non_admins_returns_unauthorized": {
            "name": "test_non_admins_returns_unauthorized",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/club/permissions_test.py": {
        "ClubPermissionsTests.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubPermissionTestsNotAdmin.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubPermissionTestsNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubPermissionTestsNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubPermissionTestsAdmin.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClubPermissionTestsAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissions.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsAdmin.test_permits_when_is_owner_for_object": {
            "name": "test_permits_when_is_owner_for_object",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsAdmin.test_permits_when_is_owner": {
            "name": "test_permits_when_is_owner",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsNotAdmin.test_does_not_permit_when_is_not_owner_for_object": {
            "name": "test_does_not_permit_when_is_not_owner_for_object",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerPermissionsNotAdmin.test_does_not_permit_when_is_not_owner": {
            "name": "test_does_not_permit_when_is_not_owner",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissions.setUp": {
            "name": "setUp",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsAdmin.test_permits_when_is_owner_for_object": {
            "name": "test_permits_when_is_owner_for_object",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsAdmin.test_permits_when_is_owner": {
            "name": "test_permits_when_is_owner",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_owner_for_object": {
            "name": "test_does_not_permit_when_is_not_owner_for_object",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClubOwnerAdminCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_owner": {
            "name": "test_does_not_permit_when_is_not_owner",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/club/permissisons.py": {
        "IsClubAdminOrReadOnlyClub.has_object_permission": {
            "name": "has_object_permission",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "club": []
            }
        },
        "IsClubAdminOrReadOnlyDependent.has_permission": {
            "name": "has_permission",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsClubAdminOrReadOnlyDependent.has_object_permission": {
            "name": "has_object_permission",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "player": []
            }
        },
        "IsClubOwner.has_permission": {
            "name": "has_permission",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsClubOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "admin": []
            }
        },
        "IsClubOwnerAdminCreation.has_permission": {
            "name": "has_permission",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsClubOwnerAdminCreation.has_object_permission": {
            "name": "has_object_permission",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "admin": []
            }
        }
    },
    "ippon_back-master/ippon/club/serializers.py": {
        "ClubAdminSerializer.create": {
            "name": "create",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "ippon_back-master/ippon/club/views.py": {
        "club_authorization": {
            "name": "club_authorization",
            "location": 54,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "ClubViewSet.perform_create": {
            "name": "perform_create",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "ClubViewSet.players": {
            "name": "players",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "ClubViewSet.admins": {
            "name": "admins",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "ClubViewSet.non_admins": {
            "name": "non_admins",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/club/__init__.py": {},
    "ippon_back-master/ippon/cup_fight/cup_fight_permissions_test.py": {
        "TestCupFightPermissions.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionAdmin.test_permits_when_unsafe_method": {
            "name": "test_permits_when_unsafe_method",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCupFightPermissionAdmin.test_does_permit_when_post": {
            "name": "test_does_permit_when_post",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/cup_fight/cup_fight_views_test.py": {
        "CupFightViewTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_post_valid_payload_creates_specified_cup_fight": {
            "name": "test_post_valid_payload_creates_specified_cup_fight",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_put_valid_payload_updates_cup_fight": {
            "name": "test_put_valid_payload_updates_cup_fight",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_delete_existing_cup_fight_deletes_it": {
            "name": "test_delete_existing_cup_fight_deletes_it",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_delete_existing_cup_fight_without_teamfight_deletes_it": {
            "name": "test_delete_existing_cup_fight_without_teamfight_deletes_it",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetAuthorizedTests.test_delete_not_existing_cup_fight_returns_bad_request": {
            "name": "test_delete_not_existing_cup_fight_returns_bad_request",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_list_returns_all_fights": {
            "name": "test_list_returns_all_fights",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_detail_for_existing_fight_returns_correct_fight": {
            "name": "test_detail_for_existing_fight_returns_correct_fight",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_detail_for_not_existing_fight_returns_404": {
            "name": "test_detail_for_not_existing_fight_returns_404",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_post_gets_unauthorized": {
            "name": "test_post_gets_unauthorized",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_put_gets_unauthorized": {
            "name": "test_put_gets_unauthorized",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthenticatedTests.test_delete_gets_unauthorized": {
            "name": "test_delete_gets_unauthorized",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/cup_fight/permissions.py": {
        "IsCupFightOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsCupFightOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "cup_fight": []
            }
        }
    },
    "ippon_back-master/ippon/cup_fight/serializers.py": {},
    "ippon_back-master/ippon/cup_fight/views.py": {},
    "ippon_back-master/ippon/cup_fight/__init__.py": {},
    "ippon_back-master/ippon/cup_phase/authorization_test.py": {
        "TournamentCupPhaseAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhaseAuthorizationAuthenticatedTests.test_tournament_cup_phase_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_cup_phase_authorization_returns_negative_auth_if_not_authorized",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhaseAuthorizationAuthenticatedTests.test_tournament_cup_phase_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_cup_phase_authorization_returns_positive_auth_if_authorized_staff",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhaseAuthorizationAuthenticatedTests.test_tournament_cup_phase_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_cup_phase_authorization_returns_positive_auth_if_authorized_admin",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhaseAuthorizationAuthenticatedTests.parametrized_cup_phase_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_cup_phase_authorization_returns_positive_auth_if_authorized",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "CupPhaseViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewsUnauthenticatedTests.test_tournament_cup_phase_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_cup_phase_authorization_returns_negative_auth_if_not_authorized",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/cup_phase/cup_phase_views_test.py": {
        "CupPhasesViewTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_post_valid_payload_creates_specified_cup_phase": {
            "name": "test_post_valid_payload_creates_specified_cup_phase",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_put_valid_payload_updates_cup_phase": {
            "name": "test_put_valid_payload_updates_cup_phase",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_delete_existing_cup_phase_deletes_it": {
            "name": "test_delete_existing_cup_phase_deletes_it",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhasesViewSetAuthorizedTests.test_delete_not_existing_cup_phase_returns_bad_request": {
            "name": "test_delete_not_existing_cup_phase_returns_bad_request",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthorizedTests.test_unauthorized_put_gets_forbidden": {
            "name": "test_unauthorized_put_gets_forbidden",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthorizedTests.test_unauthorized_post_gets_forbidden": {
            "name": "test_unauthorized_post_gets_forbidden",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthorizedTests.test_unauthorized_delete_gets_forbidden": {
            "name": "test_unauthorized_delete_gets_forbidden",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_list_returns_all_cup_phases": {
            "name": "test_list_returns_all_cup_phases",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_detail_for_existing_cup_phase_returns_correct_cup_phase": {
            "name": "test_detail_for_existing_cup_phase_returns_correct_cup_phase",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_detail_for_not_existing_cup_phase_returns_404": {
            "name": "test_detail_for_not_existing_cup_phase_returns_404",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_get_fights_for_valid_cup_phase_returns_list_of_cup_fights": {
            "name": "test_get_fights_for_valid_cup_phase_returns_list_of_cup_fights",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseViewSetUnauthenticatedTests.test_get_fights_for_invalid_cup_phase_returns_not_found": {
            "name": "test_get_fights_for_invalid_cup_phase_returns_not_found",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/cup_phase/serializers.py": {},
    "ippon_back-master/ippon/cup_phase/views.py": {
        "cup_phase_authorization": {
            "name": "cup_phase_authorization",
            "location": 31,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "CupPhaseViewSet.cup_fights": {
            "name": "cup_fights",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/cup_phase/__init__.py": {},
    "ippon_back-master/ippon/event/event_permissions_test.py": {
        "TestEventPermissions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_get_with_unauthorized_user_return_200": {
            "name": "test_event_get_with_unauthorized_user_return_200",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_delete_with_unauthorized_user_return_403": {
            "name": "test_event_delete_with_unauthorized_user_return_403",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_creation_with_unauthorized_user_return_401": {
            "name": "test_event_creation_with_unauthorized_user_return_401",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_creation_with_valid_owner_return_201": {
            "name": "test_event_creation_with_valid_owner_return_201",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_creation_with_invalid_owner_return_403": {
            "name": "test_event_creation_with_invalid_owner_return_403",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEventPermissions.test_event_delete_with_valid_owner_return_204": {
            "name": "test_event_delete_with_valid_owner_return_204",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/event/permissions.py": {
        "IsEventOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        }
    },
    "ippon_back-master/ippon/event/serializers.py": {},
    "ippon_back-master/ippon/event/views.py": {
        "EventViewSet.create": {
            "name": "create",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "EventViewSet.return_users_events": {
            "name": "return_users_events",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "ippon_back-master/ippon/event/__init__.py": {},
    "ippon_back-master/ippon/fight/authorization_test.py": {
        "TournamentFightAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFightAuthorizationAuthenticatedTests.test_tournament_fight_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_fight_authorization_returns_negative_auth_if_not_authorized",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFightAuthorizationAuthenticatedTests.test_tournament_fight_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_fight_authorization_returns_positive_auth_if_authorized_staff",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFightAuthorizationAuthenticatedTests.test_tournament_fight_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_fight_authorization_returns_positive_auth_if_authorized_admin",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFightAuthorizationAuthenticatedTests.parametrized_fight_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_fight_authorization_returns_positive_auth_if_authorized",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "FightViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewsUnauthenticatedTests.test_tournament_fight_authorization_returns_negative_auth": {
            "name": "test_tournament_fight_authorization_returns_negative_auth",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/fight/fight_permissions_test.py": {
        "TestFightPermissions.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFightPermissionAdmin.test_does_permit_when_post": {
            "name": "test_does_permit_when_post",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/fight/fight_views_test.py": {
        "FightViewTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_post_valid_payload_creates_specified_fight": {
            "name": "test_post_valid_payload_creates_specified_fight",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_put_valid_payload_updates_fight": {
            "name": "test_put_valid_payload_updates_fight",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_delete_existing_fight_deletes_it": {
            "name": "test_delete_existing_fight_deletes_it",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetAuthorizedTests.test_delete_not_existing_fight_returns_bad_request": {
            "name": "test_delete_not_existing_fight_returns_bad_request",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthenticatedTests.test_list_returns_all_fights": {
            "name": "test_list_returns_all_fights",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthenticatedTests.test_detail_for_existing_fight_returns_correct_fight": {
            "name": "test_detail_for_existing_fight_returns_correct_fight",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthenticatedTests.test_detail_for_not_existing_fight_returns_404": {
            "name": "test_detail_for_not_existing_fight_returns_404",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthorizedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthorizedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightViewSetUnauthorizedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedFightsPointsTest.setUp": {
            "name": "setUp",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedFightsPointsTest.test_get_points_for_valid_fight_returns_list_of_fights_points": {
            "name": "test_get_points_for_valid_fight_returns_list_of_fights_points",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedFightsPointsTest.test_get_points_for_invalid_fight_returns_list_of_fights_points": {
            "name": "test_get_points_for_invalid_fight_returns_list_of_fights_points",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/fight/models_test.py": {},
    "ippon_back-master/ippon/fight/permissions.py": {
        "IsFightOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsFightOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "fight": []
            }
        }
    },
    "ippon_back-master/ippon/fight/serializers.py": {},
    "ippon_back-master/ippon/fight/views.py": {
        "fight_authorization": {
            "name": "fight_authorization",
            "location": 32,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "FightViewSet.points": {
            "name": "points",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/fight/__init__.py": {},
    "ippon_back-master/ippon/group/authorization_test.py": {
        "TournamentGroupAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupAuthorizationAuthenticatedTests.test_tournament_group_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_group_authorization_returns_negative_auth_if_not_authorized",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupAuthorizationAuthenticatedTests.test_tournament_group_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_group_authorization_returns_positive_auth_if_authorized_staff",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupAuthorizationAuthenticatedTests.test_tournament_group_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_group_authorization_returns_positive_auth_if_authorized_admin",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupAuthorizationAuthenticatedTests.parametrized_group_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_group_authorization_returns_positive_auth_if_authorized",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "GroupViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewsUnauthenticatedTests.test_tournament_group_authorization_returns_negative_auth": {
            "name": "test_tournament_group_authorization_returns_negative_auth",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group/group_permissions_test.py": {
        "TestGroupPermissions.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissions.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionAdmin.test_does_permit_when_unsafe_method": {
            "name": "test_does_permit_when_unsafe_method",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerOrReadOnlyPermissionAdmin.test_does_permit_when_post": {
            "name": "test_does_permit_when_post",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissions.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionNotAdmin.test_doesnt_permit_general": {
            "name": "test_doesnt_permit_general",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionAdmin.test_does_permit_when_unsafe_method": {
            "name": "test_does_permit_when_unsafe_method",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupOwnerPermissionAdmin.test_does_permit_general": {
            "name": "test_does_permit_general",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group/group_views_test.py": {
        "GroupViewTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_post_valid_payload_creates_specified_group": {
            "name": "test_post_valid_payload_creates_specified_group",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_put_valid_payload_updates_group": {
            "name": "test_put_valid_payload_updates_group",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_delete_existing_group_deletes_it": {
            "name": "test_delete_existing_group_deletes_it",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetAuthorizedTests.test_delete_not_existing_group_returns_bad_request": {
            "name": "test_delete_not_existing_group_returns_bad_request",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_list_returns_all_fights": {
            "name": "test_list_returns_all_fights",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_detail_for_existing_fight_returns_correct_fight": {
            "name": "test_detail_for_existing_fight_returns_correct_fight",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_detail_for_not_existing_fight_returns_404": {
            "name": "test_detail_for_not_existing_fight_returns_404",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_put_gets_unauthorized": {
            "name": "test_put_gets_unauthorized",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_post_gets_unauthorized": {
            "name": "test_post_gets_unauthorized",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_delete_gets_unauthorized": {
            "name": "test_delete_gets_unauthorized",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_get_group_fights_for_valid_group_returns_list_of_fights": {
            "name": "test_get_group_fights_for_valid_group_returns_list_of_fights",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetUnauthenticatedTests.test_get_group_fights_for_invalid_group_returns_not_found": {
            "name": "test_get_group_fights_for_invalid_group_returns_not_found",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersTests.setUp": {
            "name": "setUp",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthorizedTests.test_get_members_returns_list_of_members": {
            "name": "test_get_members_returns_list_of_members",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthorizedTests.test_get_non_members_returns_forbidden": {
            "name": "test_get_non_members_returns_forbidden",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthenticatedTests.test_get_members_returns_list_of_members": {
            "name": "test_get_members_returns_list_of_members",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSetMembersUnauthenticatedTests.test_get_non_members_returns_unauthorized": {
            "name": "test_get_non_members_returns_unauthorized",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMemberViewSetScoreCountingTests.setUp": {
            "name": "setUp",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMemberViewSetScoreCountingTests.test_get_group_memeber_1_scores_returns_score": {
            "name": "test_get_group_memeber_1_scores_returns_score",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMemberViewSetScoreCountingTests.group_member_score_test": {
            "name": "group_member_score_test",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_response": [],
                "team_id": []
            }
        },
        "GroupMemberViewSetScoreCountingTests.test_get_group_memeber_2_scores_returns_score": {
            "name": "test_get_group_memeber_2_scores_returns_score",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMemberViewSetScoreCountingTests.test_get_group_memeber_3_scores_returns_score": {
            "name": "test_get_group_memeber_3_scores_returns_score",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedGroupMembersViewTests.setUp": {
            "name": "setUp",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsGroupMembersViewTests.setUp": {
            "name": "setUp",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsGroupMembersViewTests.test_post_valid_payload_creates_specified_group_member": {
            "name": "test_post_valid_payload_creates_specified_group_member",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsGroupMembersViewTests.test_delete_existing_group_member_deletes_it": {
            "name": "test_delete_existing_group_member_deletes_it",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsGroupMembersViewTests.test_groups_get_non_members_returns_list_of_participants_not_assigned_to_a_team": {
            "name": "test_groups_get_non_members_returns_list_of_participants_not_assigned_to_a_team",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsGroupMemberViewTests.setUp": {
            "name": "setUp",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsGroupMemberViewTests.test_groups_post_invalid_group_member_returns_forbidden": {
            "name": "test_groups_post_invalid_group_member_returns_forbidden",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsGroupMemberViewTests.test_groups_post_invalid_groups_returns_404": {
            "name": "test_groups_post_invalid_groups_returns_404",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsGroupMemberViewTests.test_delete_not_existing_group_member_returns_bad_request": {
            "name": "test_delete_not_existing_group_member_returns_bad_request",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsGroupMemberViewTests.test_groups_get_non_members_returns_forbidden": {
            "name": "test_groups_get_non_members_returns_forbidden",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group/permissions.py": {
        "IsGroupOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsGroupOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "group": []
            }
        },
        "IsGroupOwner.has_permission": {
            "name": "has_permission",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsGroupOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "group": []
            }
        }
    },
    "ippon_back-master/ippon/group/serializers.py": {},
    "ippon_back-master/ippon/group/views.py": {
        "group_authorization": {
            "name": "group_authorization",
            "location": 122,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "GroupViewSet.handle_members": {
            "name": "handle_members",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "team_id": []
            }
        },
        "GroupViewSet.create_member": {
            "name": "create_member",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "team_id": []
            }
        },
        "GroupViewSet.delete_member": {
            "name": "delete_member",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "team_id": []
            }
        },
        "GroupViewSet.members": {
            "name": "members",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "GroupViewSet.not_assigned": {
            "name": "not_assigned",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "GroupViewSet.group_fights": {
            "name": "group_fights",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "GroupViewSet.member_score": {
            "name": "member_score",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "team_id": []
            }
        }
    },
    "ippon_back-master/ippon/group/__init__.py": {},
    "ippon_back-master/ippon/group_fight/group_fight_permissions_test.py": {
        "TestGroupFightPermissions.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupFightPermissionAdmin.test_permit_when_post": {
            "name": "test_permit_when_post",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group_fight/group_fight_views_test.py": {
        "GroupFightViewTest.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_post_valid_payload_creates_specified_group_fight": {
            "name": "test_post_valid_payload_creates_specified_group_fight",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_put_valid_payload_updates_group_fight": {
            "name": "test_put_valid_payload_updates_group_fight",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_delete_existing_group_fight_deletes_it": {
            "name": "test_delete_existing_group_fight_deletes_it",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetAuthorizedTests.test_delete_not_existing_group_fight_returns_bad_request": {
            "name": "test_delete_not_existing_group_fight_returns_bad_request",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_list_returns_all_fights": {
            "name": "test_list_returns_all_fights",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_detail_for_existing_fight_returns_correct_fight": {
            "name": "test_detail_for_existing_fight_returns_correct_fight",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_detail_for_not_existing_fight_returns_404": {
            "name": "test_detail_for_not_existing_fight_returns_404",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_put_gets_unauthorized": {
            "name": "test_put_gets_unauthorized",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_post_gets_unauthorized": {
            "name": "test_post_gets_unauthorized",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthenticatedTests.test_delete_gets_unauthorized": {
            "name": "test_delete_gets_unauthorized",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group_fight/permissions.py": {
        "IsGroupFightOwnerOrReadOnly.get_tournament": {
            "name": "get_tournament",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "IsGroupFightOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsGroupFightOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "group_fight": []
            }
        }
    },
    "ippon_back-master/ippon/group_fight/serializers.py": {},
    "ippon_back-master/ippon/group_fight/views.py": {},
    "ippon_back-master/ippon/group_fight/__init__.py": {},
    "ippon_back-master/ippon/group_phase/authorization_test.py": {
        "TournamentGroupPhaseAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhaseAuthorizationAuthenticatedTests.test_tournament_group_phase_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_group_phase_authorization_returns_negative_auth_if_not_authorized",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhaseAuthorizationAuthenticatedTests.test_tournament_group_phase_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_group_phase_authorization_returns_positive_auth_if_authorized_staff",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhaseAuthorizationAuthenticatedTests.test_tournament_group_phase_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_group_phase_authorization_returns_positive_auth_if_authorized_admin",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhaseAuthorizationAuthenticatedTests.parametrized_group_phase_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_group_phase_authorization_returns_positive_auth_if_authorized",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "GroupPhaseViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewsUnauthenticatedTests.test_tournament_group_phase_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_group_phase_authorization_returns_negative_auth_if_not_authorized",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group_phase/group_phase_views_test.py": {
        "GroupPhasesViewTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_post_valid_payload_creates_specified_group_phase": {
            "name": "test_post_valid_payload_creates_specified_group_phase",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_put_valid_payload_updates_group_phase": {
            "name": "test_put_valid_payload_updates_group_phase",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_delete_existing_group_phase_deletes_it": {
            "name": "test_delete_existing_group_phase_deletes_it",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhasesViewSetAuthorizedTests.test_delete_not_existing_group_phase_returns_bad_request": {
            "name": "test_delete_not_existing_group_phase_returns_bad_request",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_list_returns_all_group_phases": {
            "name": "test_list_returns_all_group_phases",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_detail_for_existing_group_phase_returns_correct_group_phase": {
            "name": "test_detail_for_existing_group_phase_returns_correct_group_phase",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_detail_for_not_existing_group_phase_returns_404": {
            "name": "test_detail_for_not_existing_group_phase_returns_404",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_get_groups_for_valid_group_phase_returns_list_of_groups": {
            "name": "test_get_groups_for_valid_group_phase_returns_list_of_groups",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupPhaseViewSetUnauthenticatedTests.test_get_groups_for_invalid_group_phase_returns_not_found": {
            "name": "test_get_groups_for_invalid_group_phase_returns_not_found",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/group_phase/serializers.py": {},
    "ippon_back-master/ippon/group_phase/views.py": {
        "group_phase_authorization": {
            "name": "group_phase_authorization",
            "location": 31,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "GroupPhaseViewSet.groups": {
            "name": "groups",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/group_phase/__init__.py": {},
    "ippon_back-master/ippon/migrations/0001_initial.py": {},
    "ippon_back-master/ippon/migrations/0002_auto_20180318_0905.py": {},
    "ippon_back-master/ippon/migrations/0003_auto_20180318_0935.py": {},
    "ippon_back-master/ippon/migrations/0004_clubadmin.py": {},
    "ippon_back-master/ippon/migrations/0005_auto_20180415_1358.py": {},
    "ippon_back-master/ippon/migrations/0006_tournament_tournamentadmin.py": {},
    "ippon_back-master/ippon/migrations/0007_tournament_finals_depth.py": {},
    "ippon_back-master/ippon/migrations/0008_auto_20180602_1850.py": {},
    "ippon_back-master/ippon/migrations/0009_tournamentparticipation.py": {},
    "ippon_back-master/ippon/migrations/0010_auto_20180616_1112.py": {},
    "ippon_back-master/ippon/migrations/0011_auto_20180616_1734.py": {},
    "ippon_back-master/ippon/migrations/0012_team_teamfight_teammember.py": {},
    "ippon_back-master/ippon/migrations/0013_team_name.py": {},
    "ippon_back-master/ippon/migrations/0014_auto_20180902_0840.py": {},
    "ippon_back-master/ippon/migrations/0015_auto_20180910_0631.py": {},
    "ippon_back-master/ippon/migrations/0016_auto_20180916_0938.py": {},
    "ippon_back-master/ippon/migrations/0017_point.py": {},
    "ippon_back-master/ippon/migrations/0018_auto_20180920_1901.py": {},
    "ippon_back-master/ippon/migrations/0019_auto_20181022_1954.py": {},
    "ippon_back-master/ippon/migrations/0020_location.py": {},
    "ippon_back-master/ippon/migrations/0021_auto_20181101_1847.py": {},
    "ippon_back-master/ippon/migrations/0022_auto_20181101_1852.py": {},
    "ippon_back-master/ippon/migrations/0023_groupphase_name.py": {},
    "ippon_back-master/ippon/migrations/0024_auto_20181129_2014.py": {},
    "ippon_back-master/ippon/migrations/0025_auto_20181205_1947.py": {},
    "ippon_back-master/ippon/migrations/0026_auto_20190102_1745.py": {},
    "ippon_back-master/ippon/migrations/0027_auto_20190102_1916.py": {},
    "ippon_back-master/ippon/migrations/0028_auto_20190102_2013.py": {},
    "ippon_back-master/ippon/migrations/0029_teamfight_winner.py": {},
    "ippon_back-master/ippon/migrations/0030_auto_20190102_2247.py": {},
    "ippon_back-master/ippon/migrations/0031_auto_20190102_2256.py": {},
    "ippon_back-master/ippon/migrations/0032_auto_20190604_1919.py": {},
    "ippon_back-master/ippon/migrations/0033_auto_20190613_1821.py": {},
    "ippon_back-master/ippon/migrations/0034_auto_20190613_1835.py": {},
    "ippon_back-master/ippon/migrations/0035_auto_20190613_1835.py": {},
    "ippon_back-master/ippon/migrations/0036_teamfight_is_started.py": {},
    "ippon_back-master/ippon/migrations/0037_auto_20190613_1850.py": {},
    "ippon_back-master/ippon/migrations/0038_auto_20190613_2022.py": {},
    "ippon_back-master/ippon/migrations/0039_auto_20190701_0538.py": {},
    "ippon_back-master/ippon/migrations/0040_auto_20200401_2010.py": {},
    "ippon_back-master/ippon/migrations/0041_event_end_time.py": {},
    "ippon_back-master/ippon/migrations/0042_auto_20200405_1406.py": {},
    "ippon_back-master/ippon/migrations/0043_auto_20200405_1744.py": {},
    "ippon_back-master/ippon/migrations/0044_event_locationid.py": {},
    "ippon_back-master/ippon/migrations/__init__.py": {},
    "ippon_back-master/ippon/models/club.py": {
        "ClubAdmin.get_user": {
            "name": "get_user",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/cup_fight.py": {
        "winner_change_handler": {
            "name": "winner_change_handler",
            "location": 38,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "get_winner": {
            "name": "get_winner",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "cup_fight": []
            }
        },
        "CupFight.get_following_fight": {
            "name": "get_following_fight",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFight.delete": {
            "name": "delete",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [],
                "keep_parents": []
            }
        },
        "CupFight.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/cup_fight_test.py": {
        "TestCupFights.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightFollowingFightTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightFollowingFightTests.test_fight_throws_no_such_fight_when_het_following_called_on_final": {
            "name": "test_fight_throws_no_such_fight_when_het_following_called_on_final",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightFollowingFightTests.test_cup_fight_which_is_previous_on_aka_side_returns_following_fight": {
            "name": "test_cup_fight_which_is_previous_on_aka_side_returns_following_fight",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightSiblingTests.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightSiblingTests.test_cup_fight_when_winner_is_set_and_sibling_has_winner_already_set_creates_team_fight_in_parent": {
            "name": "test_cup_fight_when_winner_is_set_and_sibling_has_winner_already_set_creates_team_fight_in_parent",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightSiblingTests.test_when_aka_fight_winner_is_set_and_shiro_sibling_doesnt_have_winner_yet_doesnt_change_parent": {
            "name": "test_when_aka_fight_winner_is_set_and_shiro_sibling_doesnt_have_winner_yet_doesnt_change_parent",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightSiblingTests.test_when_shiro_fight_winner_is_set_and_aka_sibling_doesnt_have_winner_yet_doesnt_change_parent": {
            "name": "test_when_shiro_fight_winner_is_set_and_aka_sibling_doesnt_have_winner_yet_doesnt_change_parent",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightSiblingTests.test_when_shiro_fight_winner_is_changed_and_parent_was_laready_created_but_still_in_prep_change_parent": {
            "name": "test_when_shiro_fight_winner_is_changed_and_parent_was_laready_created_but_still_in_prep_change_parent",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseTests.setUp": {
            "name": "setUp",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupPhaseTests.test_destruction_of_cup_phase_is_impossible_when_there_are_some_fights_in_it": {
            "name": "test_destruction_of_cup_phase_is_impossible_when_there_are_some_fights_in_it",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/cup_phase.py": {},
    "ippon_back-master/ippon/models/event.py": {
        "Event.registration_is_open": {
            "name": "registration_is_open",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.has_started": {
            "name": "has_started",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/event_test.py": {
        "EventModelTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventModelTest.configure_event": {
            "name": "configure_event",
            "location": 15,
            "return": [
                "em.Event"
            ],
            "arguments": {
                "start_string": [],
                "end_string": []
            }
        },
        "EventModelTest.test_late_event_registration_is_open_to_be_false": {
            "name": "test_late_event_registration_is_open_to_be_false",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventModelTest.test_early_event_registration_is_open_to_be_false": {
            "name": "test_early_event_registration_is_open_to_be_false",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventModelTest.test_current_event_registration_is_open_to_be_true": {
            "name": "test_current_event_registration_is_open_to_be_true",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/fight.py": {},
    "ippon_back-master/ippon/models/group.py": {},
    "ippon_back-master/ippon/models/group_fight.py": {
        "GroupFight.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFight.delete": {
            "name": "delete",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "using": [],
                "keep_parents": []
            }
        }
    },
    "ippon_back-master/ippon/models/group_phase.py": {},
    "ippon_back-master/ippon/models/location.py": {},
    "ippon_back-master/ippon/models/model_interactions_test.py": {
        "TournamentDependentClasses.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightAndTeamFightInteractionTests.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightAndTeamFightInteractionTests.test_group_fight_deletion_triggers_underlying_team_fight_deletion": {
            "name": "test_group_fight_deletion_triggers_underlying_team_fight_deletion",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupFightAndTeamFightInteractionTests.test_team_fight_deletion_triggers_related_group_fight_deletion": {
            "name": "test_team_fight_deletion_triggers_related_group_fight_deletion",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightAndTeamFightInteractionTests.setUp": {
            "name": "setUp",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightAndTeamFightInteractionTests.test_cup_fight_deletion_triggers_underlying_team_fight_deletion": {
            "name": "test_cup_fight_deletion_triggers_underlying_team_fight_deletion",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CupFightAndTeamFightInteractionTests.test_team_fight_deletion_does_not_trigger_related_cup_fight_deletion": {
            "name": "test_team_fight_deletion_does_not_trigger_related_cup_fight_deletion",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/player.py": {},
    "ippon_back-master/ippon/models/point.py": {},
    "ippon_back-master/ippon/models/team.py": {
        "Team.get_member_ids": {
            "name": "get_member_ids",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/team_fight.py": {
        "TeamFight.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFight.get_teams_points": {
            "name": "get_teams_points",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "team": []
            }
        },
        "TeamFight.get_aka_points": {
            "name": "get_aka_points",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFight.get_aka_wins": {
            "name": "get_aka_wins",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFight.get_shiro_points": {
            "name": "get_shiro_points",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFight.get_shiro_wins": {
            "name": "get_shiro_wins",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/team_fight_test.py": {
        "TestTeamFights.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamFights.test_correctly_counts_aka_wins": {
            "name": "test_correctly_counts_aka_wins",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamFights.test_correctly_counts_aka_points": {
            "name": "test_correctly_counts_aka_points",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamFights.test_correctly_counts_shiro_wins": {
            "name": "test_correctly_counts_shiro_wins",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeamFights.test_correctly_counts_shiro_points": {
            "name": "test_correctly_counts_shiro_points",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/team_test.py": {
        "TeamTests.test_player_and_team_combinations_are_unique": {
            "name": "test_player_and_team_combinations_are_unique",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/tournament.py": {
        "is_numeric_constraint_satisfied": {
            "name": "is_numeric_constraint_satisfied",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "lhs": [],
                "constraint": [],
                "rhs": []
            }
        },
        "TournamentAdmin.get_user": {
            "name": "get_user",
            "location": 15,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipation.check_is_age_ok": {
            "name": "check_is_age_ok",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipation.check_is_rank_ok": {
            "name": "check_is_rank_ok",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipation.check_is_sex_ok": {
            "name": "check_is_sex_ok",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/tournament_test.py": {
        "TournamentParticipationTests.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_age_ok_true_when_age_is_equal_and_constraint_is_equal": {
            "name": "test_is_age_ok_true_when_age_is_equal_and_constraint_is_equal",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_age_ok_false_when_age_is_equal_and_constraint_is_not_equal": {
            "name": "test_is_age_ok_false_when_age_is_equal_and_constraint_is_not_equal",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_rank_ok_false_when_rank_is_equal_and_constrint_is_not_equal": {
            "name": "test_is_rank_ok_false_when_rank_is_equal_and_constrint_is_not_equal",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_rank_ok_false_when_rank_is_equal_and_constraint_is_not_equal": {
            "name": "test_is_rank_ok_false_when_rank_is_equal_and_constraint_is_not_equal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_sex_ok_true_when_female_and_woman_only": {
            "name": "test_is_sex_ok_true_when_female_and_woman_only",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationTests.test_is_sex_ok_false_when_female_and_man_only": {
            "name": "test_is_sex_ok_false_when_female_and_man_only",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/models/__init__.py": {},
    "ippon_back-master/ippon/player/permissions.py": {},
    "ippon_back-master/ippon/player/permissions_test.py": {
        "PlayerPermissionsTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsNotAdmin.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsAdmin.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerPermissionTestsAdmin.test_permits_when_unsafe_method": {
            "name": "test_permits_when_unsafe_method",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/player/player_views_test.py": {
        "PlayerViewTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_post_valid_payload_creates_specified_player": {
            "name": "test_post_valid_payload_creates_specified_player",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_put_valid_payload_updates_player": {
            "name": "test_put_valid_payload_updates_player",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_delete_existing_player_deletes_it": {
            "name": "test_delete_existing_player_deletes_it",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetAuthorizedTests.test_delete_not_existing_player_returns_bad_request": {
            "name": "test_delete_not_existing_player_returns_bad_request",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthorizedTests.test_unauthorized_put_gets_forbidden": {
            "name": "test_unauthorized_put_gets_forbidden",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthorizedTests.test_unauthorized_post_gets_forbidden": {
            "name": "test_unauthorized_post_gets_forbidden",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthorizedTests.test_unauthorized_delete_gets_forbidden": {
            "name": "test_unauthorized_delete_gets_forbidden",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_list_returns_all_players": {
            "name": "test_list_returns_all_players",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_detail_for_existing_player_returns_correct_player": {
            "name": "test_detail_for_existing_player_returns_correct_player",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_detail_for_not_existing_player_returns_404": {
            "name": "test_detail_for_not_existing_player_returns_404",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/player/serializers.py": {},
    "ippon_back-master/ippon/player/shallow_player_views_test.py": {
        "ShallowPlayerViewTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_list_returns_all_players": {
            "name": "test_list_returns_all_players",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_detail_for_existing_player_returns_correct_player": {
            "name": "test_detail_for_existing_player_returns_correct_player",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_detail_for_not_existing_player_returns_404": {
            "name": "test_detail_for_not_existing_player_returns_404",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_put_gets_method_not_allowed": {
            "name": "test_put_gets_method_not_allowed",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_post_gets_method_not_allowed": {
            "name": "test_post_gets_method_not_allowed",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShallowPlayerViewSetUnauthorizedTests.test_delete_gets_method_not_allowed": {
            "name": "test_delete_gets_method_not_allowed",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/player/views.py": {
        "player_authorization": {
            "name": "player_authorization",
            "location": 29,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        }
    },
    "ippon_back-master/ippon/player/__init__.py": {},
    "ippon_back-master/ippon/point/permissions.py": {
        "IsPointOwnerOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsPointOwnerOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "point": []
            }
        }
    },
    "ippon_back-master/ippon/point/permissions_test.py": {
        "TestPointPermissions.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionNotAdmin.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionNotAdmin.test_doesnt_permit_general": {
            "name": "test_doesnt_permit_general",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionAdmin.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionAdmin.test_does_permit_when_unsafe_method": {
            "name": "test_does_permit_when_unsafe_method",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPointPermissionAdmin.test_permits_general": {
            "name": "test_permits_general",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/point/point_views_test.py": {
        "PointsViewTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_post_valid_payload_creates_specified_point": {
            "name": "test_post_valid_payload_creates_specified_point",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_put_valid_payload_updates_point": {
            "name": "test_put_valid_payload_updates_point",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_delete_existing_point_deletes_it": {
            "name": "test_delete_existing_point_deletes_it",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetAuthorizedTests.test_delete_not_existing_point_returns_bad_request": {
            "name": "test_delete_not_existing_point_returns_bad_request",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_list_returns_all_points": {
            "name": "test_list_returns_all_points",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_detail_for_existing_point_returns_correct_point": {
            "name": "test_detail_for_existing_point_returns_correct_point",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_detail_for_not_existing_point_returns_404": {
            "name": "test_detail_for_not_existing_point_returns_404",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/point/serializers.py": {},
    "ippon_back-master/ippon/point/views.py": {},
    "ippon_back-master/ippon/point/__init__.py": {},
    "ippon_back-master/ippon/team/authorization_test.py": {
        "TournamentTeamAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamAuthorizationAuthenticatedTests.test_tournament_team_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_team_authorization_returns_negative_auth_if_not_authorized",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamAuthorizationAuthenticatedTests.test_tournament_team_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_team_authorization_returns_positive_auth_if_authorized_staff",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamAuthorizationAuthenticatedTests.test_tournament_team_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_team_authorization_returns_positive_auth_if_authorized_admin",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamAuthorizationAuthenticatedTests.parametrized_team_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_team_authorization_returns_positive_auth_if_authorized",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "TeamViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewsUnauthenticatedTests.test_tournament_team_authorization_returns_negative_auth": {
            "name": "test_tournament_team_authorization_returns_negative_auth",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/team/permissions.py": {
        "IsTeamOwner.has_permission": {
            "name": "has_permission",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsTeamOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "team": []
            }
        }
    },
    "ippon_back-master/ippon/team/permissions_test.py": {
        "IsTeamOwnerTests.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerAdminTests.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerAdminTests.test_does_permit_when_unsafe_method": {
            "name": "test_does_permit_when_unsafe_method",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerAdminTests.test_does_permit_general": {
            "name": "test_does_permit_general",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerNotAdminTests.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerNotAdminTests.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsTeamOwnerNotAdminTests.test_doesnt_permit_general": {
            "name": "test_doesnt_permit_general",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/team/serializers.py": {},
    "ippon_back-master/ippon/team/teams_views_test.py": {
        "TeamsViewTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_post_valid_payload_creates_specified_team": {
            "name": "test_teams_post_valid_payload_creates_specified_team",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_post_invalid_payload_returns_400": {
            "name": "test_teams_post_invalid_payload_returns_400",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_put_valid_payload_updates_team": {
            "name": "test_teams_put_valid_payload_updates_team",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_put_invalid_payload_gets_bad_request": {
            "name": "test_teams_put_invalid_payload_gets_bad_request",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_delete_existing_team_deletes_it": {
            "name": "test_teams_delete_existing_team_deletes_it",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_delete_not_existing_team_returns_bad_request": {
            "name": "test_teams_delete_not_existing_team_returns_bad_request",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetAuthorizedTests.test_teams_get_non_members_returns_list_of_participants_not_assigned_to_a_team": {
            "name": "test_teams_get_non_members_returns_list_of_participants_not_assigned_to_a_team",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthorizedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthorizedTests.test_teams_unauthorized_delete_gets_unauthorized": {
            "name": "test_teams_unauthorized_delete_gets_unauthorized",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthorizedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_list_returns_all_teams": {
            "name": "test_teams_list_returns_all_teams",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_detail_for_existing_team_returns_correct_team": {
            "name": "test_teams_detail_for_existing_team_returns_correct_team",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_detail_for_not_existing_team_returns_404": {
            "name": "test_teams_detail_for_not_existing_team_returns_404",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_unauthorized_delete_gets_unauthorized": {
            "name": "test_teams_unauthorized_delete_gets_unauthorized",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_get_members_returns_list_of_members": {
            "name": "test_teams_get_members_returns_list_of_members",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSetUnauthenticatedTests.test_teams_get_non_members_returns_unauthorized": {
            "name": "test_teams_get_non_members_returns_unauthorized",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamMembersViewTests.setUp": {
            "name": "setUp",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTeamMembersViewTests.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsTeamMembersViewTests.setUp": {
            "name": "setUp",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsTeamMembersViewTests.test_post_valid_payload_creates_specified_teammember": {
            "name": "test_post_valid_payload_creates_specified_teammember",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidIdsTeamMembersViewTests.test_delete_existing_team_member_deletes_it": {
            "name": "test_delete_existing_team_member_deletes_it",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsTeamMemberViewTests.setUp": {
            "name": "setUp",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsTeamMemberViewTests.test_teams_post_invalid_team_returns_404": {
            "name": "test_teams_post_invalid_team_returns_404",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsTeamMemberViewTests.test_teams_post_invalid_player_returns_404": {
            "name": "test_teams_post_invalid_player_returns_404",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidIdsTeamMemberViewTests.test_delete_not_existing_team_member_returns_bad_request": {
            "name": "test_delete_not_existing_team_member_returns_bad_request",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/team/views.py": {
        "team_authorization": {
            "name": "team_authorization",
            "location": 82,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "TeamViewSet.handle_members": {
            "name": "handle_members",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "player_id": []
            }
        },
        "TeamViewSet.create_member": {
            "name": "create_member",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "player_id": []
            }
        },
        "TeamViewSet.delete_member": {
            "name": "delete_member",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [],
                "player_id": []
            }
        },
        "TeamViewSet.members": {
            "name": "members",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TeamViewSet.not_assigned": {
            "name": "not_assigned",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/team/__init__.py": {},
    "ippon_back-master/ippon/team_fight/authorization_test.py": {
        "TournamentTeamFightAuthorizationAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamFightAuthorizationAuthenticatedTests.test_tournament_team_fight_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_team_fight_authorization_returns_negative_auth_if_not_authorized",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamFightAuthorizationAuthenticatedTests.test_tournament_team_fight_authorization_returns_positive_auth_if_authorized_staff": {
            "name": "test_tournament_team_fight_authorization_returns_positive_auth_if_authorized_staff",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamFightAuthorizationAuthenticatedTests.test_tournament_team_fight_authorization_returns_positive_auth_if_authorized_admin": {
            "name": "test_tournament_team_fight_authorization_returns_positive_auth_if_authorized_admin",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamFightAuthorizationAuthenticatedTests.parametrized_team_fight_authorization_returns_positive_auth_if_authorized": {
            "name": "parametrized_team_fight_authorization_returns_positive_auth_if_authorized",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_admin": []
            }
        },
        "TeamFightViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewsUnauthenticatedTests.test_tournament_team_fight_authorization_returns_negative_auth": {
            "name": "test_tournament_team_fight_authorization_returns_negative_auth",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/team_fight/permissions.py": {},
    "ippon_back-master/ippon/team_fight/permissions_test.py": {},
    "ippon_back-master/ippon/team_fight/serializers.py": {},
    "ippon_back-master/ippon/team_fight/team_fight_views_test.py": {
        "TeamFightViewTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_post_valid_payload_creates_specified_team_fight": {
            "name": "test_post_valid_payload_creates_specified_team_fight",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_put_valid_payload_updates_team_fight": {
            "name": "test_put_valid_payload_updates_team_fight",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_delete_existing_team_fight_deletes_it": {
            "name": "test_delete_existing_team_fight_deletes_it",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetAuthorizedTests.test_delete_not_existing_team_fight_returns_bad_request": {
            "name": "test_delete_not_existing_team_fight_returns_bad_request",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthorizedTests.test_post_gets_forbidden": {
            "name": "test_post_gets_forbidden",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_list_returns_all_fights": {
            "name": "test_list_returns_all_fights",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_detail_for_existing_fight_returns_correct_fight": {
            "name": "test_detail_for_existing_fight_returns_correct_fight",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_detail_for_not_existing_fight_returns_404": {
            "name": "test_detail_for_not_existing_fight_returns_404",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamFightViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTeamFightsFightsTest.setUp": {
            "name": "setUp",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTeamFightsFightsTest.test_get_fights_for_valid_team_fight_returns_list_of_fights": {
            "name": "test_get_fights_for_valid_team_fight_returns_list_of_fights",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTeamFightsFightsTest.test_get_fights_for_invalid_team_fight_returns_not_found": {
            "name": "test_get_fights_for_invalid_team_fight_returns_not_found",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/team_fight/views.py": {
        "team_fight_authorization": {
            "name": "team_fight_authorization",
            "location": 31,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "TeamFightViewSet.fights": {
            "name": "fights",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/team_fight/__init__.py": {},
    "ippon_back-master/ippon/tournament/authorizations.py": {
        "has_tournament_authorization": {
            "name": "has_tournament_authorization",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "allowed_master_statuses": [],
                "pk": [],
                "request": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/authorization_test.py": {
        "TournamentAdminAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthenticatedTests.test_tournament_admin_authorization_returns_positive_auth_if_authorized": {
            "name": "test_tournament_admin_authorization_returns_positive_auth_if_authorized",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthenticatedTests.test_tournament_staff_authorization_returns_positive_auth_if_authorized": {
            "name": "test_tournament_staff_authorization_returns_positive_auth_if_authorized",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthenticatedTests.test_tournament_admin_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_admin_authorization_returns_negative_auth_if_not_authorized",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthenticatedTests.test_tournament_staff_authorization_returns_negative_auth_if_not_authorized": {
            "name": "test_tournament_staff_authorization_returns_negative_auth_if_not_authorized",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminViewsUnauthenticatedTests.test_tournament_admin_authorization_returns_negative_auth_if_not_authenticated": {
            "name": "test_tournament_admin_authorization_returns_negative_auth_if_not_authenticated",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminViewsUnauthenticatedTests.test_tournament_staff_authorization_returns_negative_auth_if_not_authenticated": {
            "name": "test_tournament_staff_authorization_returns_negative_auth_if_not_authenticated",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/permissions.py": {
        "IsTournamentAdminOrReadOnlyTournament.has_object_permission": {
            "name": "has_object_permission",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "tournament": []
            }
        },
        "IsTournamentAdminOrReadOnlyDependent.has_permission": {
            "name": "has_permission",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsTournamentAdminOrReadOnlyDependent.has_object_permission": {
            "name": "has_object_permission",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "dependent": []
            }
        },
        "IsTournamentAdminDependent.has_object_permission": {
            "name": "has_object_permission",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "dependent": []
            }
        },
        "IsTournamentOwner.has_permission": {
            "name": "has_permission",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsTournamentOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "admin": []
            }
        },
        "IsTournamentOwnerAdminCreation.has_permission": {
            "name": "has_permission",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsTournamentOwnerAdminCreation.has_object_permission": {
            "name": "has_object_permission",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "admin": []
            }
        },
        "IsTournamentAdminParticipantCreation.has_permission": {
            "name": "has_permission",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsTournamentAdminParticipantCreation.has_object_permission": {
            "name": "has_object_permission",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "admin": []
            }
        },
        "IsTournamentAdmin.has_permission": {
            "name": "has_permission",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/permissions_test.py": {
        "TournamentPermissionTests.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissions.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissionTestsNotAdmin.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissionTestsNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissionTestsNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissionTestsAdmin.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminOrReadOnlyPermissionTestsAdmin.test_permits_when_unsafe_method": {
            "name": "test_permits_when_unsafe_method",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.setUp": {
            "name": "setUp",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.test_returns_false_when_not_authenticated": {
            "name": "test_returns_false_when_not_authenticated",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.returns_false_when_not_authorized": {
            "name": "returns_false_when_not_authorized",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.test_returns_false_when_view_has_no_pk": {
            "name": "test_returns_false_when_view_has_no_pk",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.test_returns_true_when_is_tournament_admin": {
            "name": "test_returns_true_when_is_tournament_admin",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTests.test_returns_true_when_is_tournament_owner": {
            "name": "test_returns_true_when_is_tournament_owner",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissions.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsNotAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsNotAdmin.test_doesnt_permit_when_post": {
            "name": "test_doesnt_permit_when_post",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsAdmin.test_permits_when_unsafe_method": {
            "name": "test_permits_when_unsafe_method",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentOrReadOnlyPermissionsAdmin.test_does_permit_when_post": {
            "name": "test_does_permit_when_post",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissions.setUp": {
            "name": "setUp",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsNotAdmin.test_doesnt_permit_when_safe_method": {
            "name": "test_doesnt_permit_when_safe_method",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsNotAdmin.test_doesnt_permit_when_unsafe_method": {
            "name": "test_doesnt_permit_when_unsafe_method",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsAdmin.test_permits_when_safe_method": {
            "name": "test_permits_when_safe_method",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentDependentPermissionsAdmin.test_permits_when_unsafe_method": {
            "name": "test_permits_when_unsafe_method",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissions.setUp": {
            "name": "setUp",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsAdmin.test_permits_object": {
            "name": "test_permits_object",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsAdmin.test_permits": {
            "name": "test_permits",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsNotAdmin.test_does_not_permit_object": {
            "name": "test_does_not_permit_object",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerPermissionsNotAdmin.test_does_not_permit": {
            "name": "test_does_not_permit",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissions.setUp": {
            "name": "setUp",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsOwner.setUp": {
            "name": "setUp",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsOwner.test_permits_when_is_owner_for_object": {
            "name": "test_permits_when_is_owner_for_object",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsOwner.test_permits_when_is_owner": {
            "name": "test_permits_when_is_owner",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsAdmin.test_does_not_permit_when_is_not_owner_for_object": {
            "name": "test_does_not_permit_when_is_not_owner_for_object",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsAdmin.test_does_not_permit_when_is_not_owner": {
            "name": "test_does_not_permit_when_is_not_owner",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_owner_for_object": {
            "name": "test_does_not_permit_when_is_not_owner_for_object",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerAdminCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_owner": {
            "name": "test_does_not_permit_when_is_not_owner",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissions.setUp": {
            "name": "setUp",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsOwner.setUp": {
            "name": "setUp",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsOwner.test_permits_when_is_owner_for_object": {
            "name": "test_permits_when_is_owner_for_object",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsOwner.test_permits_when_is_owner": {
            "name": "test_permits_when_is_owner",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsAdmin.setUp": {
            "name": "setUp",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsAdmin.test_permits_when_is_admin_for_object": {
            "name": "test_permits_when_is_admin_for_object",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsAdmin.test_permits_when_is_admin": {
            "name": "test_permits_when_is_admin",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsNotAdmin.setUp": {
            "name": "setUp",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_admin_for_object": {
            "name": "test_does_not_permit_when_is_not_admin_for_object",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTournamentOwnerParticipantCreationPermissionsNotAdmin.test_does_not_permit_when_is_not_admin": {
            "name": "test_does_not_permit_when_is_not_admin",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/seralizers.py": {
        "TournamentParticipationSerializer.create": {
            "name": "create",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "TournamentParticipationSerializer.update": {
            "name": "update",
            "location": 44,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "_T0"
                ],
                "validated_data": []
            }
        },
        "TournamentAdminSerializer.create": {
            "name": "create",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "TournamentAdminSerializer.update": {
            "name": "update",
            "location": 77,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "_T0"
                ],
                "validated_data": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/tournament_admin_views_test.py": {
        "TournamentAdminViewTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetAuthorizedTests.test_creates_admin_with_valid_payload": {
            "name": "test_creates_admin_with_valid_payload",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetUnauthorizedTests.test_admin_creation_attempt_gets_forbidden": {
            "name": "test_admin_creation_attempt_gets_forbidden",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminViewSetUnauthenticatedTests.test_admin_creation_attempt_gets_unauthorized": {
            "name": "test_admin_creation_attempt_gets_unauthorized",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/tournament_participations_views_test.py": {
        "TournamentParticipationsViewTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetAuthorizedTests.test_post_valid_payload_returns_201": {
            "name": "test_post_valid_payload_returns_201",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthorizedTests.test_post_invalid_payload_returns_403": {
            "name": "test_post_invalid_payload_returns_403",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthorizedTests.test_post_valid_payload_returns_403": {
            "name": "test_post_valid_payload_returns_403",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthenticatedTests.test_post_invalid_payload_returns_401": {
            "name": "test_post_invalid_payload_returns_401",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipationViewSetUnauthenticatedTests.test_post_valid_payload_returns_201": {
            "name": "test_post_valid_payload_returns_201",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/tournament_views_test.py": {
        "TournamentViewTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.setUp": {
            "name": "setUp",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.test_post_invalid_payload_returns_400": {
            "name": "test_post_invalid_payload_returns_400",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.test_put_valid_payload_updates_tournament": {
            "name": "test_put_valid_payload_updates_tournament",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.test_put_invalid_payload_gets_bad_request": {
            "name": "test_put_invalid_payload_gets_bad_request",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.test_delete_existing_tournament_deletes_it": {
            "name": "test_delete_existing_tournament_deletes_it",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetAuthorizedTests.test_delete_not_existing_tournament_returns_bad_request": {
            "name": "test_delete_not_existing_tournament_returns_bad_request",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthorizedTests.setUp": {
            "name": "setUp",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthorizedTests.test_post_valid_payload_creates_specified_tournament": {
            "name": "test_post_valid_payload_creates_specified_tournament",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthorizedTests.test_put_gets_forbidden": {
            "name": "test_put_gets_forbidden",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthorizedTests.test_delete_gets_forbidden": {
            "name": "test_delete_gets_forbidden",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_list_returns_all_tournaments": {
            "name": "test_list_returns_all_tournaments",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_detail_for_existing_tournament_returns_correct_tournament": {
            "name": "test_detail_for_existing_tournament_returns_correct_tournament",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_detail_for_not_existing_tournament_returns_404": {
            "name": "test_detail_for_not_existing_tournament_returns_404",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_unauthorized_post_gets_unauthorized": {
            "name": "test_unauthorized_post_gets_unauthorized",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_unauthorized_put_gets_unauthorized": {
            "name": "test_unauthorized_put_gets_unauthorized",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentViewSetUnauthenticatedTests.test_unauthorized_delete_gets_unauthorized": {
            "name": "test_unauthorized_delete_gets_unauthorized",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminTest.setUp": {
            "name": "setUp",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTournamentAdminTest.setUp": {
            "name": "setUp",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTournamentAdminTest.test_get_admins_returns_forbidden": {
            "name": "test_get_admins_returns_forbidden",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthorizedTournamentAdminTest.test_get_non_admins_returns_forbidden": {
            "name": "test_get_non_admins_returns_forbidden",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedTournamentAdminTest.setUp": {
            "name": "setUp",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedTournamentAdminTest.test_get_admins_returns_unauthorized": {
            "name": "test_get_admins_returns_unauthorized",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedTournamentAdminTest.test_get_non_admins_returns_unauthorized": {
            "name": "test_get_non_admins_returns_unauthorized",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTournamentAdminTest.setUp": {
            "name": "setUp",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTournamentAdminTest.test_get_admins_for_valid_fight_returns_list_of_tournaments_admins": {
            "name": "test_get_admins_for_valid_fight_returns_list_of_tournaments_admins",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTournamentAdminTest.test_get_admins_for_invalid_tournament_returns_not_found": {
            "name": "test_get_admins_for_invalid_tournament_returns_not_found",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTournamentAdminTest.test_get_non_admins_for_valid_fight_returns_list_of_tournaments_non_admins": {
            "name": "test_get_non_admins_for_valid_fight_returns_list_of_tournaments_non_admins",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedTournamentAdminTest.test_get_non_admins_for_invalid_tournament_returns_not_found": {
            "name": "test_get_non_admins_for_invalid_tournament_returns_not_found",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentParticipantsTest.setUp": {
            "name": "setUp",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedParticipantsTest.setUp": {
            "name": "setUp",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedParticipantsTest.test_get_participants_returns_unauthorized": {
            "name": "test_get_participants_returns_unauthorized",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedParticipantsTest.test_get_non_participants_returns_unauthorized": {
            "name": "test_get_non_participants_returns_unauthorized",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnauthenticatedParticipantsTest.test_get_participations_returns_unauthorized": {
            "name": "test_get_participations_returns_unauthorized",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.setUp": {
            "name": "setUp",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_participants_for_valid_tournament_returns_list_of_participants": {
            "name": "test_get_participants_for_valid_tournament_returns_list_of_participants",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_participants_for_invalid_tournament_returns_not_found": {
            "name": "test_get_participants_for_invalid_tournament_returns_not_found",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_non_participants_for_valid_tournament_returns_list_of_tournaments_non_participants": {
            "name": "test_get_non_participants_for_valid_tournament_returns_list_of_tournaments_non_participants",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_non_participants_for_invalid_tournament_returns_not_found": {
            "name": "test_get_non_participants_for_invalid_tournament_returns_not_found",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_participations_for_valid_tournament_returns_list_of_participations": {
            "name": "test_get_participations_for_valid_tournament_returns_list_of_participations",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizedParticipantsTest.test_get_participations_for_invalid_tournament_returns_not_found": {
            "name": "test_get_participations_for_invalid_tournament_returns_not_found",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamTests.setUp": {
            "name": "setUp",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamTests.test_get_teams_returns_list_of_tournament_teams": {
            "name": "test_get_teams_returns_list_of_tournament_teams",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentTeamTests.test_get_teams_for_invalid_tournament_returns_not_found": {
            "name": "test_get_teams_for_invalid_tournament_returns_not_found",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.setUp": {
            "name": "setUp",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_admin_auth_admin_returns_200_and_isAuthorized_true": {
            "name": "test_admin_auth_admin_returns_200_and_isAuthorized_true",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_admin_auth_staff_returns_200_and_isAuthorized_true": {
            "name": "test_admin_auth_staff_returns_200_and_isAuthorized_true",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_staff_auth_admin_returns_200_and_isAuthorized_false": {
            "name": "test_staff_auth_admin_returns_200_and_isAuthorized_false",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_staff_auth_staff_returns_200_and_isAuthorized_true": {
            "name": "test_staff_auth_staff_returns_200_and_isAuthorized_true",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_unauthenticated_auth_admin_returns_200_and_isAuthorized_false": {
            "name": "test_unauthenticated_auth_admin_returns_200_and_isAuthorized_false",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentAdminAuthorizationsTest.test_unauthenticated_staff_admin_returns_200_and_isAuthorized_false": {
            "name": "test_unauthenticated_staff_admin_returns_200_and_isAuthorized_false",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhasesUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhasesUnauthenticatedTests.test_get_group_phases_for_valid_tournament_returns_list_of_group_phases": {
            "name": "test_get_group_phases_for_valid_tournament_returns_list_of_group_phases",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentGroupPhasesUnauthenticatedTests.test_get_group_phases_for_invalid_tournament_returns_not_found": {
            "name": "test_get_group_phases_for_invalid_tournament_returns_not_found",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhasesUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhasesUnauthenticatedTests.test_get_cup_phases_for_valid_tournament_returns_list_of_cup_phases": {
            "name": "test_get_cup_phases_for_valid_tournament_returns_list_of_cup_phases",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentCupPhasesUnauthenticatedTests.test_get_cup_phases_for_invalid_tournament_returns_not_found": {
            "name": "test_get_cup_phases_for_invalid_tournament_returns_not_found",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.setUp": {
            "name": "setUp",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.test_calling_get_on_not_assigned_participants_when_not_authenticated_returns_unauthorised": {
            "name": "test_calling_get_on_not_assigned_participants_when_not_authenticated_returns_unauthorised",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.test_calling_get_on_not_assigned_participants_when_not_authorized_returns_forbidden": {
            "name": "test_calling_get_on_not_assigned_participants_when_not_authorized_returns_forbidden",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.test_calling_get_on_not_assigned_participants_when_admin_returns_list_of_unassigned": {
            "name": "test_calling_get_on_not_assigned_participants_when_admin_returns_list_of_unassigned",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.test_calling_get_on_not_assigned_participants_when_owner_returns_list_of_unassigned": {
            "name": "test_calling_get_on_not_assigned_participants_when_owner_returns_list_of_unassigned",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentUnassignedPlayersTests.test_calling_get_un_unassigned_participants_when_authorized_returns_only_qualified_players": {
            "name": "test_calling_get_un_unassigned_participants_when_authorized_returns_only_qualified_players",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/views.py": {
        "tournament_staff_authorization": {
            "name": "tournament_staff_authorization",
            "location": 131,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "tournament_admin_authorization": {
            "name": "tournament_admin_authorization",
            "location": 136,
            "return": [],
            "arguments": {
                "request": [],
                "pk": [],
                "format": []
            }
        },
        "TournamentViewSet.participations": {
            "name": "participations",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.non_participants": {
            "name": "non_participants",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.participants": {
            "name": "participants",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.perform_create": {
            "name": "perform_create",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "TournamentViewSet.admins": {
            "name": "admins",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.non_admins": {
            "name": "non_admins",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.teams": {
            "name": "teams",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.group_phases": {
            "name": "group_phases",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.cup_phases": {
            "name": "cup_phases",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        },
        "TournamentViewSet.not_assigned": {
            "name": "not_assigned",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "ippon_back-master/ippon/tournament/__init__.py": {},
    "ippon_back-master/ippon/user/registration_views_test.py": {
        "RegistrationViewsetTests.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationViewsetTests.test_register_unique_user_with_valid_payload_creates_new_user": {
            "name": "test_register_unique_user_with_valid_payload_creates_new_user",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "email_user_mock": []
            }
        },
        "RegistrationViewsetTests.test_non_unique_username_responds_with_400_and_unique_username_error": {
            "name": "test_non_unique_username_responds_with_400_and_unique_username_error",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationViewsetTests.test_invalid_email_format_responds_with_400_and_email_format_error": {
            "name": "test_invalid_email_format_responds_with_400_and_email_format_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/user/serailzers.py": {},
    "ippon_back-master/ippon/user/user_data_test.py": {
        "UserDataViewTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDataViewTest.test_invalid_user_responds_with_401_and_error_message": {
            "name": "test_invalid_user_responds_with_401_and_error_message",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDataViewTest.test_valid_user_responds_with_200_and_correct_data": {
            "name": "test_valid_user_responds_with_200_and_correct_data",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/user/views.py": {
        "register_user": {
            "name": "register_user",
            "location": 12,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "user_data": {
            "name": "user_data",
            "location": 32,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "ippon_back-master/ippon/user/__init__.py": {},
    "ippon_back-master/ippon/utils/authorization_test_fixtures.py": {
        "AuthorizationViewsTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizationViewsAuthenticatedTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorizationViewsUnauthenticatedTests.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ippon_back-master/ippon/utils/debug.py": {
        "print_comparison": {
            "name": "print_comparison",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "cp1_json": [],
                "data": []
            }
        }
    },
    "ippon_back-master/ippon/utils/permissions.py": {
        "is_user_admin_of_the_tournament": {
            "name": "is_user_admin_of_the_tournament",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "tournament": []
            }
        },
        "get_tournament_from_dependent": {
            "name": "get_tournament_from_dependent",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "has_object_creation_permission": {
            "name": "has_object_creation_permission",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "serializer_class": [],
                "tournament_dependent_class_field": [],
                "tournament_dependent_class": [],
                "getter_fcn": []
            }
        },
        "get_tournament_from_fight": {
            "name": "get_tournament_from_fight",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "fight": []
            }
        }
    },
    "ippon_back-master/ippon/utils/values.py": {},
    "ippon_back-master/ippon/utils/__init__.py": {},
    "ippon_back-master/ippon_back/settings.py": {},
    "ippon_back-master/ippon_back/urls.py": {},
    "ippon_back-master/ippon_back/wsgi.py": {},
    "ippon_back-master/ippon_back/__init__.py": {}
}
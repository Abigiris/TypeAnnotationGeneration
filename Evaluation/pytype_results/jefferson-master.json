{
    "jefferson-master/contrib/async_http_client.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 79,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "chunksize": []
            }
        },
        "block_num_from_id": {
            "name": "block_num_from_id",
            "location": 257,
            "return": [
                "int"
            ],
            "arguments": {
                "block_hash": []
            }
        },
        "verify_get_block_response": {
            "name": "verify_get_block_response",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": [],
                "response_data": [],
                "_raise": []
            }
        },
        "verify": {
            "name": "verify",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [],
                "response_data": [],
                "_raise": []
            }
        },
        "RateBar.rate": {
            "name": "rate",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient._new_connector": {
            "name": "_new_connector",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "connector_kwargs": []
            }
        },
        "AsyncClient._new_session": {
            "name": "_new_session",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "session_kwargs": []
            }
        },
        "AsyncClient._session_kwargs": {
            "name": "_session_kwargs",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient._connector_kwargs": {
            "name": "_connector_kwargs",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient.concurrent_connections": {
            "name": "concurrent_connections",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient.batch_request_size": {
            "name": "batch_request_size",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient.concurrent_tasks_limit": {
            "name": "concurrent_tasks_limit",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncClient.close": {
            "name": "close",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/contrib/http_client.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 32,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "chunksize": []
            }
        },
        "SimpleDPayAPIClient.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "num_pools": [],
                "max_size": [],
                "timeout": [],
                "retries": [],
                "pool_block": [],
                "tcp_keepalive": []
            }
        },
        "SimpleDPayAPIClient.json_rpc_body": {
            "name": "json_rpc_body",
            "location": 123,
            "return": [
                "Union[(bytes, Dict[(str, Union[(int, str, tuple, _T0, _T2)])])]"
            ],
            "arguments": {
                "name": [
                    "_T0@@"
                ]
            }
        },
        "SimpleDPayAPIClient.exec": {
            "name": "exec",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SimpleDPayAPIClient._return": {
            "name": "_return",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "response": [],
                "args": [],
                "return_with_args": []
            }
        },
        "SimpleDPayAPIClient.exec_multi": {
            "name": "exec_multi",
            "location": 181,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "params": []
            }
        },
        "SimpleDPayAPIClient.exec_batch": {
            "name": "exec_batch",
            "location": 201,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "params": []
            }
        },
        "SimpleDPayAPIClient.test_batch_support": {
            "name": "test_batch_support",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "jefferson-master/contrib/make_api_calls.py": {
        "make_jrpc_call": {
            "name": "make_jrpc_call",
            "location": 13,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "url": [],
                "jrpc_call": []
            }
        },
        "make_random_batches": {
            "name": "make_random_batches",
            "location": 18,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "jrpc_calls": []
            }
        },
        "open_json": {
            "name": "open_json",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        },
        "display_request": {
            "name": "display_request",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "call_num": [],
                "call_count": [],
                "jrpc_call": [],
                "show_req": []
            }
        },
        "display_response": {
            "name": "display_response",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": []
            }
        },
        "display_error": {
            "name": "display_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "display_type_results": {
            "name": "display_type_results",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_type": [],
                "actual_type": []
            }
        },
        "display_keys_results": {
            "name": "display_keys_results",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_keys": [],
                "actual_keys": []
            }
        },
        "display_response_equal_results": {
            "name": "display_response_equal_results",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "responses": []
            }
        },
        "is_batch_resp": {
            "name": "is_batch_resp",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": []
            }
        },
        "is_batch_req": {
            "name": "is_batch_req",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "jrpc_call": []
            }
        },
        "has_error": {
            "name": "has_error",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "resp": []
            }
        },
        "make_calls": {
            "name": "make_calls",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "jrpc_calls": []
            }
        },
        "test_batch_speed": {
            "name": "test_batch_speed",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "jrpc_calls": []
            }
        },
        "generate_test_requests_and_responses": {
            "name": "generate_test_requests_and_responses",
            "location": 145,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_response_results_type": {
            "name": "test_response_results_type",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "expected": [],
                "actual": []
            }
        },
        "test_response_equality": {
            "name": "test_response_equality",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "expected": [],
                "actual": [],
                "responses": []
            }
        },
        "test_repetition": {
            "name": "test_repetition",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_calls": {
            "name": "test_calls",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_batch_calls": {
            "name": "test_batch_calls",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_calls": {
            "name": "test_all_calls",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "jrpc_calls": []
            }
        }
    },
    "jefferson-master/contrib/setup.py": {},
    "jefferson-master/contrib/timingspy.py": {
        "TimingsPy.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "TimingsPy.record": {
            "name": "record",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TimingsPy.calculate_elapsed": {
            "name": "calculate_elapsed",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "timings": []
            }
        },
        "TimingsPy.stats": {
            "name": "stats",
            "location": 25,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/contrib/udpserver.py": {
        "EchoServerProtocol.connection_made": {
            "name": "connection_made",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "EchoServerProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "EchoServerProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/contrib/__init__.py": {},
    "jefferson-master/contrib/perf/batch_size_perf.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 26,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "chunksize": []
            }
        },
        "make_batch_request": {
            "name": "make_batch_request",
            "location": 40,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "rpc_url": [],
                "batch": []
            }
        },
        "show_results": {
            "name": "show_results",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [],
                "total": []
            }
        }
    },
    "jefferson-master/contrib/perf/generate_batch_jrpcs.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 15,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "chunksize": []
            }
        }
    },
    "jefferson-master/contrib/perf/ws_server.py": {},
    "jefferson-master/contrib/statsd/udpserver.py": {
        "EchoServerProtocol.connection_made": {
            "name": "connection_made",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "EchoServerProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        }
    },
    "jefferson-master/jefferson/async_stats.py": {
        "fmt_timings": {
            "name": "fmt_timings",
            "location": 133,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "timings": []
            }
        },
        "DatagramClientProtocol.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "DatagramClientProtocol.error_received": {
            "name": "error_received",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "DatagramClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "AsyncStatsClient.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "prefix": [],
                "maxudpsize": [],
                "loop": []
            }
        },
        "AsyncStatsClient.timing": {
            "name": "timing",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "delta": [],
                "rate": []
            }
        },
        "AsyncStatsClient.incr": {
            "name": "incr",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "count": [],
                "rate": []
            }
        },
        "AsyncStatsClient.decr": {
            "name": "decr",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "count": [],
                "rate": []
            }
        },
        "AsyncStatsClient.gauge": {
            "name": "gauge",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "value": [],
                "rate": [],
                "delta": []
            }
        },
        "AsyncStatsClient.set": {
            "name": "set",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "value": [],
                "rate": []
            }
        },
        "AsyncStatsClient.put": {
            "name": "put",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": [],
                "value": [],
                "rate": []
            }
        },
        "AsyncStatsClient.from_timings": {
            "name": "from_timings",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timings": []
            }
        },
        "AsyncStatsClient.serialize_timings": {
            "name": "serialize_timings",
            "location": 109,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "timings": []
            }
        },
        "AsyncStatsClient._sendbatch": {
            "name": "_sendbatch",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": []
            }
        },
        "AsyncStatsClient.__bool__": {
            "name": "__bool__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/empty.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        },
        "Empty.__bool__": {
            "name": "__bool__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Empty.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "jefferson-master/jefferson/errors.py": {
        "setup_error_handlers": {
            "name": "setup_error_handlers",
            "location": 33,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ]
            }
        },
        "Default.__missing__": {
            "name": "__missing__",
            "location": 29,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "_T0@@"
                ]
            }
        },
        "setup_error_handlers.handle_request_timeout_errors": {
            "name": "handle_request_timeout_errors",
            "location": 38,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "setup_error_handlers.handle_response_timeout_errors": {
            "name": "handle_response_timeout_errors",
            "location": 48,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "setup_error_handlers.handle_async_timeout_errors": {
            "name": "handle_async_timeout_errors",
            "location": 59,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "setup_error_handlers.handle_jsonrpc_error": {
            "name": "handle_jsonrpc_error",
            "location": 68,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "setup_error_handlers.handle_errors": {
            "name": "handle_errors",
            "location": 76,
            "return": [],
            "arguments": {
                "request": [],
                "exception": []
            }
        },
        "JeffersonInteralError.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_request": [],
                "jrpc_request": [],
                "jrpc_response": [],
                "exception": [],
                "log_traceback": [],
                "error_logger": []
            }
        },
        "JeffersonInteralError.format_message": {
            "name": "format_message",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "JeffersonInteralError.amzn_trace_id": {
            "name": "amzn_trace_id",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JeffersonInteralError.jrpc_request_id": {
            "name": "jrpc_request_id",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JeffersonInteralError.jefferson_request_id": {
            "name": "jefferson_request_id",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JeffersonInteralError.add_http_request": {
            "name": "add_http_request",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_request": []
            }
        },
        "JeffersonInteralError.add_jsonrpc_request": {
            "name": "add_jsonrpc_request",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsonrpc_request": []
            }
        },
        "JeffersonInteralError.add_jsonrpc_response": {
            "name": "add_jsonrpc_response",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsonrpc_response": []
            }
        },
        "JeffersonInteralError.to_dict": {
            "name": "to_dict",
            "location": 195,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JeffersonInteralError.log": {
            "name": "log",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRpcError.to_sanic_response": {
            "name": "to_sanic_response",
            "location": 228,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestTimeoutError.to_dict": {
            "name": "to_dict",
            "location": 273,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseTimeoutError.to_dict": {
            "name": "to_dict",
            "location": 288,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/handlers.py": {
        "dispatch_single": {
            "name": "dispatch_single",
            "location": 193,
            "return": [
                "coroutine"
            ],
            "arguments": {
                "http_request": [],
                "jrpc_request": []
            }
        }
    },
    "jefferson-master/jefferson/listeners.py": {
        "setup_listeners": {
            "name": "setup_listeners",
            "location": 19,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ]
            }
        },
        "setup_listeners.setup_debug": {
            "name": "setup_debug",
            "location": 22,
            "return": [],
            "arguments": {
                "app": [],
                "loop": []
            }
        },
        "setup_listeners.setup_upstreams": {
            "name": "setup_upstreams",
            "location": 32,
            "return": [],
            "arguments": {
                "app": [],
                "loop": []
            }
        },
        "setup_listeners.setup_aiohttp_session": {
            "name": "setup_aiohttp_session",
            "location": 47,
            "return": [],
            "arguments": {
                "app": [],
                "loop": []
            }
        }
    },
    "jefferson-master/jefferson/logging_config.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 135,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ],
                "log_level": []
            }
        },
        "CustomJsonFormatter._jsonify_log_record": {
            "name": "_jsonify_log_record",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "log_record": []
            }
        }
    },
    "jefferson-master/jefferson/sanic_config.py": {},
    "jefferson-master/jefferson/serve.py": {
        "strtobool": {
            "name": "strtobool",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "val": []
            }
        },
        "int_or_none": {
            "name": "int_or_none",
            "location": 38,
            "return": [
                "Optional[Union[(int, _T0)]]"
            ],
            "arguments": {
                "val": [
                    "_T0@@"
                ]
            }
        },
        "setup_routes": {
            "name": "setup_routes",
            "location": 46,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jefferson-master/jefferson/typedefs.py": {
        "urn_type": {
            "name": "urn_type",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "upstreams_type": {
            "name": "upstreams_type",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "upstream_type": {
            "name": "upstream_type",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "jefferson-master/jefferson/upstream.py": {
        "_Upstreams.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "validate": []
            }
        },
        "_Upstreams.__build_trie": {
            "name": "__build_trie",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_Upstreams.url": {
            "name": "url",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "request_urn": []
            }
        },
        "_Upstreams.ttl": {
            "name": "ttl",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "request_urn": []
            }
        },
        "_Upstreams.timeout": {
            "name": "timeout",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "request_urn": []
            }
        },
        "_Upstreams.urls": {
            "name": "urls",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Upstreams.namespaces": {
            "name": "namespaces",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Upstreams.translate_to_appbase": {
            "name": "translate_to_appbase",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request_urn": []
            }
        },
        "_Upstreams.validate_urls": {
            "name": "validate_urls",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Upstreams.__hash__": {
            "name": "__hash__",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upstream.from_urn": {
            "name": "from_urn",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "urn": [],
                "upstreams": []
            }
        }
    },
    "jefferson-master/jefferson/urn.py": {
        "_parse_jrpc_method": {
            "name": "_parse_jrpc_method",
            "location": 82,
            "return": [],
            "arguments": {
                "jrpc_method": []
            }
        },
        "_parse_jrpc": {
            "name": "_parse_jrpc",
            "location": 88,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "single_jsonrpc_request": []
            }
        },
        "from_request": {
            "name": "from_request",
            "location": 163,
            "return": [
                "URN"
            ],
            "arguments": {
                "single_jsonrpc_request": []
            }
        },
        "URN.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [],
                "api": [],
                "method": [],
                "params": []
            }
        },
        "URN.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URN.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "URN.to_dict": {
            "name": "to_dict",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "URN.__hash__": {
            "name": "__hash__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "URN.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "urn": []
            }
        }
    },
    "jefferson-master/jefferson/utils.py": {
        "async_nowait_middleware": {
            "name": "async_nowait_middleware",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "middleware_func": []
            }
        }
    },
    "jefferson-master/jefferson/validators.py": {
        "validate_jsonrpc_request": {
            "name": "validate_jsonrpc_request",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "is_valid_single_jsonrpc_response": {
            "name": "is_valid_single_jsonrpc_response",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "is_valid_non_error_single_jsonrpc_response": {
            "name": "is_valid_non_error_single_jsonrpc_response",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": []
            }
        },
        "is_valid_non_error_jefferson_response": {
            "name": "is_valid_non_error_jefferson_response",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "response": []
            }
        },
        "is_get_block_request": {
            "name": "is_get_block_request",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "is_get_block_header_request": {
            "name": "is_get_block_header_request",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "is_get_dynamic_global_properties_request": {
            "name": "is_get_dynamic_global_properties_request",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        },
        "is_valid_get_block_response": {
            "name": "is_valid_get_block_response",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "response": []
            }
        },
        "is_broadcast_transaction_request": {
            "name": "is_broadcast_transaction_request",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "limit_broadcast_transaction_request": {
            "name": "limit_broadcast_transaction_request",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "limits": []
            }
        },
        "limit_custom_json_op_length": {
            "name": "limit_custom_json_op_length",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "ops": [],
                "size_limit": []
            }
        },
        "limit_custom_json_account": {
            "name": "limit_custom_json_account",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "ops": [],
                "blacklist_accounts": []
            }
        },
        "block_num_from_id": {
            "name": "block_num_from_id",
            "location": 213,
            "return": [
                "int"
            ],
            "arguments": {
                "block_hash": []
            }
        },
        "jsonrpc_cache_key": {
            "name": "jsonrpc_cache_key",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "jefferson-master/jefferson/__about__.py": {},
    "jefferson-master/jefferson/__init__.py": {},
    "jefferson-master/jefferson/cache/cache_group.py": {
        "CacheGroup.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caches": []
            }
        },
        "CacheGroup.prepare_response_for_cache": {
            "name": "prepare_response_for_cache",
            "location": 238,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [
                    "_T1@@"
                ]
            }
        },
        "CacheGroup.is_complete_response": {
            "name": "is_complete_response",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [],
                "cached_response": []
            }
        },
        "CacheGroup.x_jefferson_cache_key": {
            "name": "x_jefferson_cache_key",
            "location": 262,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "jefferson-master/jefferson/cache/ttl.py": {
        "TTL.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TTL.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TTL.__gt__": {
            "name": "__gt__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TTL.__le__": {
            "name": "__le__",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TTL.__ge__": {
            "name": "__ge__",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TTL.__hash__": {
            "name": "__hash__",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/cache/utils.py": {
        "jsonrpc_cache_key": {
            "name": "jsonrpc_cache_key",
            "location": 19,
            "return": [],
            "arguments": {
                "single_jsonrpc_request": []
            }
        },
        "irreversible_ttl": {
            "name": "irreversible_ttl",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "jsonrpc_response": [],
                "last_irreversible_block_num": []
            }
        },
        "block_num_from_jsonrpc_response": {
            "name": "block_num_from_jsonrpc_response",
            "location": 44,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "jsonrpc_response": []
            }
        },
        "merge_cached_response": {
            "name": "merge_cached_response",
            "location": 72,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "request": [],
                "cached_response": []
            }
        },
        "merge_cached_responses": {
            "name": "merge_cached_responses",
            "location": 80,
            "return": [
                "list"
            ],
            "arguments": {
                "request": [],
                "cached_responses": []
            }
        }
    },
    "jefferson-master/jefferson/cache/__init__.py": {
        "setup_caches": {
            "name": "setup_caches",
            "location": 30,
            "return": [
                "jefferson.cache.cache_group.CacheGroup"
            ],
            "arguments": {
                "app": [],
                "loop": []
            }
        }
    },
    "jefferson-master/jefferson/cache/backends/max_ttl.py": {
        "SimplerMaxTTLMemoryCache.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_ttl": [],
                "max_size": []
            }
        },
        "SimplerMaxTTLMemoryCache.gets": {
            "name": "gets",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SimplerMaxTTLMemoryCache.mgets": {
            "name": "mgets",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "SimplerMaxTTLMemoryCache.sets": {
            "name": "sets",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "expire_time": []
            }
        },
        "SimplerMaxTTLMemoryCache.set_manys": {
            "name": "set_manys",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "expire_time": []
            }
        },
        "SimplerMaxTTLMemoryCache.deletes": {
            "name": "deletes",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SimplerMaxTTLMemoryCache.prune": {
            "name": "prune",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplerMaxTTLMemoryCache.clears": {
            "name": "clears",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/cache/backends/redis.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Cache._pack": {
            "name": "_pack",
            "location": 33,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Cache._unpack": {
            "name": "_unpack",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AttrDict.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockClient.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": []
            }
        }
    },
    "jefferson-master/jefferson/cache/backends/__init__.py": {},
    "jefferson-master/jefferson/middlewares/caching.py": {},
    "jefferson-master/jefferson/middlewares/jefferson.py": {},
    "jefferson-master/jefferson/middlewares/limits.py": {},
    "jefferson-master/jefferson/middlewares/statsd.py": {},
    "jefferson-master/jefferson/middlewares/update_block_num.py": {},
    "jefferson-master/jefferson/middlewares/__init__.py": {
        "setup_middlewares": {
            "name": "setup_middlewares",
            "location": 14,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "app": [
                    "_T0@@"
                ]
            }
        }
    },
    "jefferson-master/jefferson/request/http.py": {
        "HTTPRequest.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_bytes": [],
                "headers": [],
                "version": [],
                "method": [],
                "transport": []
            }
        },
        "HTTPRequest.jsonrpc": {
            "name": "jsonrpc",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.ip": {
            "name": "ip",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.port": {
            "name": "port",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.socket": {
            "name": "socket",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest._get_address": {
            "name": "_get_address",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.scheme": {
            "name": "scheme",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.host": {
            "name": "host",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.content_type": {
            "name": "content_type",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.match_info": {
            "name": "match_info",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.path": {
            "name": "path",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.query_string": {
            "name": "query_string",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.url": {
            "name": "url",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.jefferson_request_id": {
            "name": "jefferson_request_id",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.amzn_trace_id": {
            "name": "amzn_trace_id",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.request_start_time": {
            "name": "request_start_time",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPRequest.request_timeout": {
            "name": "request_timeout",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/request/jsonrpc.py": {
        "from_http_request": {
            "name": "from_http_request",
            "location": 116,
            "return": [],
            "arguments": {
                "http_request": [],
                "batch_index": [],
                "request": []
            }
        },
        "JSONRPCRequest.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "_id": [],
                "jsonrpc": [],
                "method": [],
                "params": [],
                "urn": [],
                "upstream": [],
                "amzn_trace_id": [],
                "jefferson_request_id": [],
                "batch_index": [],
                "original_request": [],
                "timings": []
            }
        },
        "JSONRPCRequest.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.json": {
            "name": "json",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.to_upstream_request": {
            "name": "to_upstream_request",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "as_json": []
            }
        },
        "JSONRPCRequest.upstream_headers": {
            "name": "upstream_headers",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.upstream_id": {
            "name": "upstream_id",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.translated": {
            "name": "translated",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.__hash__": {
            "name": "__hash__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCRequest.translate_to_appbase": {
            "name": "translate_to_appbase",
            "location": 102,
            "return": [],
            "arguments": {
                "request": [],
                "urn": []
            }
        }
    },
    "jefferson-master/jefferson/request/__init__.py": {},
    "jefferson-master/jefferson/ws/pool.py": {
        "PoolConnectionProxy.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holder": [],
                "con": []
            }
        },
        "PoolConnectionProxy.__getattr__": {
            "name": "__getattr__",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "PoolConnectionProxy.send": {
            "name": "send",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolConnectionProxy.recv": {
            "name": "recv",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolConnectionProxy.terminate": {
            "name": "terminate",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolConnectionHolder.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": []
            }
        },
        "PoolConnectionHolder.terminate": {
            "name": "terminate",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolConnectionHolder._release_on_close": {
            "name": "_release_on_close",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolConnectionHolder._release": {
            "name": "_release",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool_min_size": [],
                "pool_max_size": [],
                "pool_max_queries": [],
                "pool_loop": [],
                "connect_url": []
            }
        },
        "Pool.terminate": {
            "name": "terminate",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.__await__": {
            "name": "__await__",
            "location": 369,
            "return": [
                "Generator[(Any, None, Pool)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/jefferson/ws/__init__.py": {},
    "jefferson-master/tests/conftest.py": {
        "chunks": {
            "name": "chunks",
            "location": 44,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "l": [],
                "n": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "items": []
            }
        },
        "jefferson_url": {
            "name": "jefferson_url",
            "location": 80,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "jrpc_request_schema": {
            "name": "jrpc_request_schema",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "jrpc_response_schema": {
            "name": "jrpc_response_schema",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "dpayd_response_schema": {
            "name": "dpayd_response_schema",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "dpayd_requests_and_responses": {
            "name": "dpayd_requests_and_responses",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "batched_dpayd_requests_and_responses": {
            "name": "batched_dpayd_requests_and_responses",
            "location": 123,
            "return": [
                "List[Tuple[(list, list)]]"
            ],
            "arguments": {
                "chunk_size": []
            }
        },
        "appbase_requests_and_responses": {
            "name": "appbase_requests_and_responses",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "batched_appbase_requests_and_responses": {
            "name": "batched_appbase_requests_and_responses",
            "location": 136,
            "return": [
                "List[Tuple[(list, list)]]"
            ],
            "arguments": {
                "chunk_size": []
            }
        },
        "combined_requests_and_responses": {
            "name": "combined_requests_and_responses",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "batch_combined_requests": {
            "name": "batch_combined_requests",
            "location": 148,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "chunk_size": []
            }
        },
        "translatable_dpayd_requests_and_responses": {
            "name": "translatable_dpayd_requests_and_responses",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "batch_translatable_requests_and_responses": {
            "name": "batch_translatable_requests_and_responses",
            "location": 165,
            "return": [
                "List[Tuple[(list, list)]]"
            ],
            "arguments": {
                "chunk_size": []
            }
        },
        "appbase_requests": {
            "name": "appbase_requests",
            "location": 174,
            "return": [],
            "arguments": {
                "appbase_requests_and_responses": []
            }
        },
        "build_mocked_cache": {
            "name": "build_mocked_cache",
            "location": 1686,
            "return": [
                "jefferson.cache.backends.redis.Cache"
            ],
            "arguments": {}
        },
        "make_request": {
            "name": "make_request",
            "location": 1691,
            "return": [
                "jefferson.request.http.HTTPRequest"
            ],
            "arguments": {
                "headers": [],
                "body": [],
                "app": [],
                "method": [],
                "url_bytes": [],
                "upstreams": []
            }
        },
        "upstreams": {
            "name": "upstreams",
            "location": 1708,
            "return": [],
            "arguments": {}
        },
        "translate_to_appbase_upstreams": {
            "name": "translate_to_appbase_upstreams",
            "location": 1713,
            "return": [],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 1720,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "app_without_ws": {
            "name": "app_without_ws",
            "location": 1754,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_cli": {
            "name": "test_cli",
            "location": 1765,
            "return": [],
            "arguments": {
                "app": [],
                "loop": [],
                "test_client": []
            }
        },
        "mocked_app_test_cli": {
            "name": "mocked_app_test_cli",
            "location": 1770,
            "return": [],
            "arguments": {
                "app": [],
                "loop": [],
                "test_client": []
            }
        },
        "healthcheck_path": {
            "name": "healthcheck_path",
            "location": 1804,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "healthcheck_url": {
            "name": "healthcheck_url",
            "location": 1809,
            "return": [],
            "arguments": {
                "jefferson_url": [],
                "healthcheck_path": []
            }
        },
        "jrpc_request_validator": {
            "name": "jrpc_request_validator",
            "location": 1814,
            "return": [],
            "arguments": {
                "jrpc_request_schema": []
            }
        },
        "jrpc_response_validator": {
            "name": "jrpc_response_validator",
            "location": 1819,
            "return": [],
            "arguments": {
                "jrpc_response_schema": []
            }
        },
        "dpayd_jrpc_response_validator": {
            "name": "dpayd_jrpc_response_validator",
            "location": 1824,
            "return": [],
            "arguments": {
                "dpayd_response_schema": []
            }
        },
        "invalid_jrpc_single_and_batch_request": {
            "name": "invalid_jrpc_single_and_batch_request",
            "location": 1830,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "combined_request_and_response": {
            "name": "combined_request_and_response",
            "location": 1837,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "dpayd_method_pairs": {
            "name": "dpayd_method_pairs",
            "location": 1842,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "dpayd_request_and_response": {
            "name": "dpayd_request_and_response",
            "location": 1849,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "appbase_request_and_response": {
            "name": "appbase_request_and_response",
            "location": 1856,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "appbase_request_and_response_single_and_batch": {
            "name": "appbase_request_and_response_single_and_batch",
            "location": 1865,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "translatable_dpayd_request_and_response": {
            "name": "translatable_dpayd_request_and_response",
            "location": 1870,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "long_request": {
            "name": "long_request",
            "location": 1875,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "batch_translatable_request_and_response": {
            "name": "batch_translatable_request_and_response",
            "location": 1880,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "batch_combined_request": {
            "name": "batch_combined_request",
            "location": 1885,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "full_urn_test_request_dict": {
            "name": "full_urn_test_request_dict",
            "location": 1890,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "urn_test_request_dict": {
            "name": "urn_test_request_dict",
            "location": 1895,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "urn_test_requests": {
            "name": "urn_test_requests",
            "location": 1901,
            "return": [],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "dpayd_jefferson_request_and_dict": {
            "name": "dpayd_jefferson_request_and_dict",
            "location": 1915,
            "return": [],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "valid_broadcast_transaction": {
            "name": "valid_broadcast_transaction",
            "location": 1925,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "invalid_broadcast_transaction": {
            "name": "invalid_broadcast_transaction",
            "location": 1930,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "is_responsive": {
            "name": "is_responsive",
            "location": 1936,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "url": []
            }
        },
        "jefferson_docker_service": {
            "name": "jefferson_docker_service",
            "location": 1947,
            "return": [],
            "arguments": {
                "docker_ip": [],
                "docker_services": []
            }
        },
        "requests_session": {
            "name": "requests_session",
            "location": 1959,
            "return": [],
            "arguments": {}
        },
        "prod_url": {
            "name": "prod_url",
            "location": 1965,
            "return": [],
            "arguments": {}
        },
        "sanic_server": {
            "name": "sanic_server",
            "location": 1970,
            "return": [],
            "arguments": {
                "loop": [],
                "app": [],
                "test_server": []
            }
        },
        "AttrDict.__init__": {
            "name": "__init__",
            "location": 1681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jefferson-master/tests/test_account_transfer_route.py": {
        "test_account_transfer_regex_matches": {
            "name": "test_account_transfer_regex_matches",
            "location": 45,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "test_account_transfer_regex_non_matches": {
            "name": "test_account_transfer_regex_non_matches",
            "location": 50,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "jefferson-master/tests/test_appbase_compat_translation.py": {
        "test_id_translation": {
            "name": "test_id_translation",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        },
        "test_jsonrpc_translation": {
            "name": "test_jsonrpc_translation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        },
        "test_jrpc_method_translation": {
            "name": "test_jrpc_method_translation",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        },
        "test_params_api_translation": {
            "name": "test_params_api_translation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        },
        "test_params_method_translation": {
            "name": "test_params_method_translation",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        },
        "test_params_param_translation": {
            "name": "test_params_param_translation",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_jefferson_request_and_dict": []
            }
        }
    },
    "jefferson-master/tests/test_cached_responses.py": {
        "merge_cached_responses": {
            "name": "merge_cached_responses",
            "location": 56,
            "return": [],
            "arguments": {
                "jrpc_batch_req": [],
                "responses": [],
                "expected": []
            }
        },
        "cache_get_batch": {
            "name": "cache_get_batch",
            "location": 63,
            "return": [],
            "arguments": {
                "loop": [],
                "caches": [],
                "cached": [],
                "jrpc_batch_req": [],
                "expected": []
            }
        }
    },
    "jefferson-master/tests/test_cache_backends.py": {
        "test_cache_gets": {
            "name": "test_cache_gets",
            "location": 23,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_mgets": {
            "name": "test_cache_mgets",
            "location": 36,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_set_manys": {
            "name": "test_cache_set_manys",
            "location": 51,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_deletes": {
            "name": "test_cache_deletes",
            "location": 66,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_ttl_none": {
            "name": "test_cache_ttl_none",
            "location": 80,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_ttl_expire": {
            "name": "test_cache_ttl_expire",
            "location": 88,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_ttl_large_ttl": {
            "name": "test_cache_ttl_large_ttl",
            "location": 94,
            "return": [],
            "arguments": {
                "cache": []
            }
        },
        "test_cache_max_size": {
            "name": "test_cache_max_size",
            "location": 102,
            "return": [],
            "arguments": {
                "cache": []
            }
        }
    },
    "jefferson-master/tests/test_cache_group.py": {
        "test_cache_group_is_complete_response": {
            "name": "test_cache_group_is_complete_response",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_cache_group_is_complete_response_bad_responses": {
            "name": "test_cache_group_is_complete_response_bad_responses",
            "location": 378,
            "return": [],
            "arguments": {
                "req": [],
                "resp": [],
                "expected": []
            }
        },
        "test_cache_group_x_jefferson_cache_key": {
            "name": "test_cache_group_x_jefferson_cache_key",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        }
    },
    "jefferson-master/tests/test_cache_key.py": {
        "test_cache_key": {
            "name": "test_cache_key",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_requests": []
            }
        }
    },
    "jefferson-master/tests/test_cache_middleware.py": {},
    "jefferson-master/tests/test_cache_utils.py": {
        "test_block_num_from_jsonrpc_response": {
            "name": "test_block_num_from_jsonrpc_response",
            "location": 33,
            "return": [],
            "arguments": {
                "response": [],
                "expected": []
            }
        }
    },
    "jefferson-master/tests/test_empty.py": {
        "test_bool": {
            "name": "test_bool",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neq_false": {
            "name": "test_neq_false",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neq_none": {
            "name": "test_neq_none",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neq_empty_list": {
            "name": "test_neq_empty_list",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neq_empty_dict": {
            "name": "test_neq_empty_dict",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isinstance": {
            "name": "test_isinstance",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id": {
            "name": "test_id",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jefferson-master/tests/test_error_handling.py": {
        "test_middleware_error_handler": {
            "name": "test_middleware_error_handler",
            "location": 164,
            "return": [],
            "arguments": {
                "rpc_req": [],
                "error": [],
                "expected": []
            }
        },
        "test_middleware_error_handler.handler": {
            "name": "handler",
            "location": 170,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "jefferson-master/tests/test_healthcheck_routes.py": {
        "test_healtcheck_routes": {
            "name": "test_healtcheck_routes",
            "location": 10,
            "return": [],
            "arguments": {
                "healthcheck_url": []
            }
        }
    },
    "jefferson-master/tests/test_jefferson_handlers.py": {},
    "jefferson-master/tests/test_jefferson_http_request.py": {
        "test_json_lazy_parsing": {
            "name": "test_json_lazy_parsing",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_ignore_for_not_post": {
            "name": "test_json_ignore_for_not_post",
            "location": 21,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "test_jsonrpc_ignore_for_not_post": {
            "name": "test_jsonrpc_ignore_for_not_post",
            "location": 30,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "test_jsonrpc_lazy_parsing": {
            "name": "test_jsonrpc_lazy_parsing",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_invalid": {
            "name": "test_json_invalid",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonrpc_blank_body": {
            "name": "test_jsonrpc_blank_body",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonrpc_empty_body": {
            "name": "test_jsonrpc_empty_body",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonrpc_empty_dict": {
            "name": "test_jsonrpc_empty_dict",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonrpc_empty_list": {
            "name": "test_jsonrpc_empty_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonrpc": {
            "name": "test_jsonrpc",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ip": {
            "name": "test_ip",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_port": {
            "name": "test_port",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_socket": {
            "name": "test_socket",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scheme": {
            "name": "test_scheme",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_host": {
            "name": "test_host",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_content_type": {
            "name": "test_default_content_type",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__content_type": {
            "name": "test__content_type",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_info": {
            "name": "test_match_info",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path": {
            "name": "test_path",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_string": {
            "name": "test_query_string",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url": {
            "name": "test_url",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jefferson_request_id": {
            "name": "test_jefferson_request_id",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_amzn_trace_id": {
            "name": "test_amzn_trace_id",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jefferson-master/tests/test_jefferson_jsonrpc_request.py": {
        "test_request_id": {
            "name": "test_request_id",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_jsonrpc": {
            "name": "test_request_jsonrpc",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_method": {
            "name": "test_request_method",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_request_params": {
            "name": "test_request_params",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_request_urn": {
            "name": "test_request_urn",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_upstream": {
            "name": "test_request_upstream",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_batch_index": {
            "name": "test_request_batch_index",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_to_dict": {
            "name": "test_request_to_dict",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_request_to_json": {
            "name": "test_request_to_json",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_upstream_id": {
            "name": "test_upstream_id",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_upstream_headers": {
            "name": "test_upstream_headers",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "upstream_request": {
            "name": "upstream_request",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_log_extra": {
            "name": "test_log_extra",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_hash": {
            "name": "test_request_hash",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jefferson-master/tests/test_jefferson_request_response_middleware.py": {
        "test_request_id_in_response_headers": {
            "name": "test_request_id_in_response_headers",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jefferson_request_ids_equal": {
            "name": "test_jefferson_request_ids_equal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_time_in_response_headers": {
            "name": "test_response_time_in_response_headers",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_parts_in_post_response_headers": {
            "name": "test_urn_parts_in_post_response_headers",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_parts_not_in_batch_response_headers": {
            "name": "test_urn_parts_not_in_batch_response_headers",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_parts_not_in_get_response_headers": {
            "name": "test_urn_parts_not_in_get_response_headers",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_parts_not_in_head_response_headers": {
            "name": "test_urn_parts_not_in_head_response_headers",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_parts_not_in_options_response_headers": {
            "name": "test_urn_parts_not_in_options_response_headers",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_id_in_response_headers.handler": {
            "name": "handler",
            "location": 42,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_jefferson_request_ids_equal.handler": {
            "name": "handler",
            "location": 77,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_response_time_in_response_headers.handler": {
            "name": "handler",
            "location": 124,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_urn_parts_in_post_response_headers.handler": {
            "name": "handler",
            "location": 151,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_urn_parts_not_in_batch_response_headers.handler": {
            "name": "handler",
            "location": 170,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_urn_parts_not_in_get_response_headers.handler": {
            "name": "handler",
            "location": 188,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_urn_parts_not_in_head_response_headers.handler": {
            "name": "handler",
            "location": 206,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "test_urn_parts_not_in_options_response_headers.handler": {
            "name": "handler",
            "location": 224,
            "return": [],
            "arguments": {
                "r": []
            }
        }
    },
    "jefferson-master/tests/test_jsonrpc_request_and_responses.py": {
        "jrpc_response_with_updated_id": {
            "name": "jrpc_response_with_updated_id",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "m": [],
                "jrpc": []
            }
        }
    },
    "jefferson-master/tests/test_responses.py": {
        "test_appbase_responses": {
            "name": "test_appbase_responses",
            "location": 10,
            "return": [],
            "arguments": {
                "appbase_request_and_response_single_and_batch": [],
                "requests_session": [],
                "jefferson_url": [],
                "dpayd_jrpc_response_validator": [],
                "jrpc_request_validator": [],
                "jrpc_response_validator": []
            }
        },
        "test_response_headers": {
            "name": "test_response_headers",
            "location": 73,
            "return": [],
            "arguments": {
                "path": [],
                "method": [],
                "requests_session": [],
                "jefferson_url": []
            }
        },
        "test_long_request_live": {
            "name": "test_long_request_live",
            "location": 88,
            "return": [],
            "arguments": {
                "long_request": [],
                "requests_session": [],
                "jefferson_url": [],
                "dpayd_jrpc_response_validator": []
            }
        }
    },
    "jefferson-master/tests/test_restricted_routes.py": {
        "make_params": {
            "name": "make_params",
            "location": 11,
            "return": [
                "Generator[(Tuple[(_T0, str, Union[(int, _T2)])], Any, None)]"
            ],
            "arguments": {
                "path": [
                    "_T0@@"
                ],
                "allowed": [],
                "not_allowed_status_code": [
                    "_T2@@"
                ]
            }
        },
        "test_restricted_routes": {
            "name": "test_restricted_routes",
            "location": 32,
            "return": [],
            "arguments": {
                "jefferson_url": [],
                "path": [],
                "method": [],
                "expected_status": []
            }
        }
    },
    "jefferson-master/tests/test_ttls.py": {
        "test_ttls": {
            "name": "test_ttls",
            "location": 47,
            "return": [],
            "arguments": {
                "rpc_req": [],
                "rpc_resp": [],
                "last_block_num": [],
                "expected": []
            }
        },
        "test_ttl_eq": {
            "name": "test_ttl_eq",
            "location": 61,
            "return": [],
            "arguments": {
                "ttl": [],
                "eq": []
            }
        },
        "test_ttl_gt": {
            "name": "test_ttl_gt",
            "location": 72,
            "return": [],
            "arguments": {
                "ttl": []
            }
        },
        "test_ttl_ge": {
            "name": "test_ttl_ge",
            "location": 82,
            "return": [],
            "arguments": {
                "ttl": []
            }
        },
        "test_ttl_lt": {
            "name": "test_ttl_lt",
            "location": 92,
            "return": [],
            "arguments": {
                "ttl": []
            }
        },
        "test_ttl_le": {
            "name": "test_ttl_le",
            "location": 102,
            "return": [],
            "arguments": {
                "ttl": []
            }
        }
    },
    "jefferson-master/tests/test_upstream.py": {
        "test_upstream_url": {
            "name": "test_upstream_url",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_upstream_ttl": {
            "name": "test_upstream_ttl",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_upstream_timeout": {
            "name": "test_upstream_timeout",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        }
    },
    "jefferson-master/tests/test_upstreams.py": {
        "test_invalid_config": {
            "name": "test_invalid_config",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespaces_config": {
            "name": "test_namespaces_config",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespaces_config_ends_with_api": {
            "name": "test_namespaces_config_ends_with_api",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_namespaces_config_is_jsonrpc": {
            "name": "test_namespaces_config_is_jsonrpc",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urls_config": {
            "name": "test_urls_config",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_to_appbase_config_true": {
            "name": "test_translate_to_appbase_config_true",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translate_to_appbase_config_false": {
            "name": "test_translate_to_appbase_config_false",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_pair": {
            "name": "test_url_pair",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_object": {
            "name": "test_url_object",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_pair": {
            "name": "test_timeout_pair",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timeout_object": {
            "name": "test_timeout_object",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ttl_pair": {
            "name": "test_ttl_pair",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ttl_object": {
            "name": "test_ttl_object",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_urls_raises": {
            "name": "test_validate_urls_raises",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_urls": {
            "name": "test_validate_urls",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash": {
            "name": "test_hash",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_ineq": {
            "name": "test_hash_ineq",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jefferson-master/tests/test_urn.py": {
        "test_parse_jrpc_namespaces": {
            "name": "test_parse_jrpc_namespaces",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_parse_jrpc_errors": {
            "name": "test_parse_jrpc_errors",
            "location": 40,
            "return": [],
            "arguments": {
                "jsonrpc_request": [],
                "expected": []
            }
        },
        "test_parse_jrpc_namespace_is_dpayd": {
            "name": "test_parse_jrpc_namespace_is_dpayd",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_parse_jrpc_namespace_is_appbase": {
            "name": "test_parse_jrpc_namespace_is_appbase",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "appbase_request_and_response": []
            }
        },
        "test_urn_str": {
            "name": "test_urn_str",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_urn_hash": {
            "name": "test_urn_hash",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_urn_eq": {
            "name": "test_urn_eq",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_urn_not_eq": {
            "name": "test_urn_not_eq",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "full_urn_test_request_dict": []
            }
        },
        "test_urn_params_serialization": {
            "name": "test_urn_params_serialization",
            "location": 94,
            "return": [],
            "arguments": {
                "jsonrpc_request": [],
                "expected": []
            }
        }
    },
    "jefferson-master/tests/test_utils_namespaces.py": {
        "test_urns": {
            "name": "test_urns",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "urn_test_request_dict": []
            }
        },
        "test_urn_params_empty_list": {
            "name": "test_urn_params_empty_list",
            "location": 79,
            "return": [],
            "arguments": {
                "jsonrpc_request": [],
                "expected": []
            }
        },
        "test_urn_params_empty_dict": {
            "name": "test_urn_params_empty_dict",
            "location": 104,
            "return": [],
            "arguments": {
                "jsonrpc_request": [],
                "expected": []
            }
        },
        "test_urn_params_no_params": {
            "name": "test_urn_params_no_params",
            "location": 129,
            "return": [],
            "arguments": {
                "jsonrpc_request": [],
                "expected": []
            }
        },
        "test_invalid_numeric_dpayd_api": {
            "name": "test_invalid_numeric_dpayd_api",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urn_pairs": {
            "name": "test_urn_pairs",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_method_pairs": []
            }
        }
    },
    "jefferson-master/tests/test_validators.py": {
        "test_vaildate_jsonrpc_request_invalid": {
            "name": "test_vaildate_jsonrpc_request_invalid",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_jrpc_single_and_batch_request": []
            }
        },
        "test_vaildate_jsonrpc_requests": {
            "name": "test_vaildate_jsonrpc_requests",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "batch_combined_request": []
            }
        },
        "test_is_get_block_request": {
            "name": "test_is_get_block_request",
            "location": 110,
            "return": [],
            "arguments": {
                "req": [],
                "expected": []
            }
        },
        "test_is_get_block_header_request": {
            "name": "test_is_get_block_header_request",
            "location": 128,
            "return": [],
            "arguments": {
                "req": [],
                "expected": []
            }
        },
        "test_is_valid_get_block_response": {
            "name": "test_is_valid_get_block_response",
            "location": 153,
            "return": [],
            "arguments": {
                "req": [],
                "response": [],
                "expected": []
            }
        },
        "is_valid_jsonrpc_response": {
            "name": "is_valid_jsonrpc_response",
            "location": 184,
            "return": [],
            "arguments": {
                "req": [],
                "resp": [],
                "expected": []
            }
        },
        "test_is_valid_single_jsonrpc_response": {
            "name": "test_is_valid_single_jsonrpc_response",
            "location": 207,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_is_valid_single_jsonrpc_response_using_dpayd": {
            "name": "test_is_valid_single_jsonrpc_response_using_dpayd",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_is_valid_non_error_single_jsonrpc_response": {
            "name": "test_is_valid_non_error_single_jsonrpc_response",
            "location": 230,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_is_valid_non_error_single_jsonrpc_response_using_dpayd": {
            "name": "test_is_valid_non_error_single_jsonrpc_response_using_dpayd",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_is_valid_jefferson_response": {
            "name": "test_is_valid_jefferson_response",
            "location": 270,
            "return": [],
            "arguments": {
                "req": [],
                "resp": [],
                "expected": []
            }
        },
        "test_is_valid_jefferson_response_using_dpayd": {
            "name": "test_is_valid_jefferson_response_using_dpayd",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_is_valid_custom_json_op_length": {
            "name": "test_is_valid_custom_json_op_length",
            "location": 302,
            "return": [],
            "arguments": {
                "ops": [],
                "expected": []
            }
        },
        "test_limit_custom_json_account": {
            "name": "test_limit_custom_json_account",
            "location": 330,
            "return": [],
            "arguments": {
                "ops": [],
                "expected": []
            }
        },
        "test_is_broadcast_transaction_false": {
            "name": "test_is_broadcast_transaction_false",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_is_broadcast_transaction_true": {
            "name": "test_is_broadcast_transaction_true",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_broadcast_transaction": []
            }
        },
        "test_is_broadcast_transaction_true_invalid": {
            "name": "test_is_broadcast_transaction_true_invalid",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_broadcast_transaction": []
            }
        },
        "test_limit_broadcast_transaction_request": {
            "name": "test_limit_broadcast_transaction_request",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "dpayd_request_and_response": []
            }
        },
        "test_valid_limit_broadcast_transaction_request": {
            "name": "test_valid_limit_broadcast_transaction_request",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "valid_broadcast_transaction": []
            }
        },
        "test_invalid_limit_broadcast_transaction_request": {
            "name": "test_invalid_limit_broadcast_transaction_request",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_broadcast_transaction": []
            }
        }
    },
    "jefferson-master/tests/__init__.py": {},
    "jefferson-master/tests/data/__init__.py": {},
    "jefferson-master/tests/data/jsonrpc/__init__.py": {},
    "jefferson-master/tests/data/jsonrpc/invalid/__init__.py": {},
    "jefferson-master/tests/profiling_tests/profile_pool.py": {
        "patch_pool": {
            "name": "patch_pool",
            "location": 12,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "Pool": [
                    "_T0@@"
                ]
            }
        }
    }
}
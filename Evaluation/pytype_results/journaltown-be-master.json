{
    "journaltown-be-master/manage.py": {},
    "journaltown-be-master/posts/admin.py": {},
    "journaltown-be-master/posts/errors.py": {
        "ResponseError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "errors": []
            }
        },
        "ResponseError.render": {
            "name": "render",
            "location": 12,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingFieldsError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "InvalidFieldsError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "NameInUseError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "EmailInUseError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidUsernameError.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ResponseException.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "status_code": []
            }
        }
    },
    "journaltown-be-master/posts/filters.py": {},
    "journaltown-be-master/posts/middleware.py": {
        "ResponseExceptionMiddleware.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "ResponseExceptionMiddleware.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ResponseExceptionMiddleware.process_exception": {
            "name": "process_exception",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": []
            }
        },
        "JsonExceptionMiddleware.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "JsonExceptionMiddleware.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "JsonExceptionMiddleware.process_exception": {
            "name": "process_exception",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": []
            }
        }
    },
    "journaltown-be-master/posts/models.py": {
        "generate_registration_token": {
            "name": "generate_registration_token",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_user_profile": {
            "name": "create_user_profile",
            "location": 30,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "UserProfile.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Follow.__str__": {
            "name": "__str__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/permissions.py": {
        "IsUserOrReadOnly.has_object_permission": {
            "name": "has_object_permission",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        },
        "IsUser.has_object_permission": {
            "name": "has_object_permission",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        }
    },
    "journaltown-be-master/posts/serializers.py": {},
    "journaltown-be-master/posts/tasks.py": {
        "send_registration_verification_email": {
            "name": "send_registration_verification_email",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "token": []
            }
        },
        "send_follow_email": {
            "name": "send_follow_email",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "follow": [],
                "target": []
            }
        }
    },
    "journaltown-be-master/posts/urls.py": {},
    "journaltown-be-master/posts/validators.py": {
        "UsernameValidator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameValidator.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "journaltown-be-master/posts/wsgi.py": {},
    "journaltown-be-master/posts/__init__.py": {},
    "journaltown-be-master/posts/email/login.py": {
        "link_context": {
            "name": "link_context",
            "location": 6,
            "return": [
                "Dict[(str, Optional[str])]"
            ],
            "arguments": {}
        }
    },
    "journaltown-be-master/posts/email/__init__.py": {},
    "journaltown-be-master/posts/migrations/0001_initial.py": {},
    "journaltown-be-master/posts/migrations/0002_emailverificationtoken.py": {},
    "journaltown-be-master/posts/migrations/0003_userprofile.py": {},
    "journaltown-be-master/posts/migrations/0004_follow.py": {},
    "journaltown-be-master/posts/migrations/0005_friendgroup_friendgroupmember.py": {},
    "journaltown-be-master/posts/migrations/0006_auto_20200106_0256.py": {},
    "journaltown-be-master/posts/migrations/0007_postpermission.py": {},
    "journaltown-be-master/posts/migrations/__init__.py": {},
    "journaltown-be-master/posts/settings/base.py": {},
    "journaltown-be-master/posts/settings/local.py": {},
    "journaltown-be-master/posts/settings/staging.py": {},
    "journaltown-be-master/posts/settings/__init__.py": {},
    "journaltown-be-master/posts/tests/utils.py": {
        "TokenAuthClient.force_login": {
            "name": "force_login",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "TokenAuthClient.request": {
            "name": "request",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/tests/__init__.py": {},
    "journaltown-be-master/posts/utils/dict.py": {
        "without": {
            "name": "without",
            "location": 4,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": [],
                "keys": []
            }
        }
    },
    "journaltown-be-master/posts/utils/test_dict.py": {
        "DictUtilsTestCase.test_without_removes_list_of_keys": {
            "name": "test_without_removes_list_of_keys",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/utils/__init__.py": {},
    "journaltown-be-master/posts/views/groups.py": {
        "_update_members": {
            "name": "_update_members",
            "location": 19,
            "return": [
                "list"
            ],
            "arguments": {
                "getter": [],
                "group": [],
                "member_usernames": []
            }
        },
        "FriendGroupsView.get": {
            "name": "get",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": []
            }
        },
        "FriendGroupsView.post": {
            "name": "post",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": []
            }
        },
        "FriendGroupView.get": {
            "name": "get",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "group_id": []
            }
        },
        "FriendGroupView.put": {
            "name": "put",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "group_id": []
            }
        },
        "FriendGroupView.delete": {
            "name": "delete",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "group_id": []
            }
        },
        "FriendGroupMemberView.get": {
            "name": "get",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "group_id": []
            }
        },
        "FriendGroupMemberView.put": {
            "name": "put",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": [],
                "group_id": []
            }
        }
    },
    "journaltown-be-master/posts/views/mixins.py": {
        "UsernameScopedMixin.get_user_or_404": {
            "name": "get_user_or_404",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "check": []
            }
        }
    },
    "journaltown-be-master/posts/views/posts.py": {
        "PostViewSet.perform_create": {
            "name": "perform_create",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        }
    },
    "journaltown-be-master/posts/views/registration.py": {
        "send_token_email": {
            "name": "send_token_email",
            "location": 20,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "register_email_callback": {
            "name": "register_email_callback",
            "location": 41,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "is_available": {
            "name": "is_available",
            "location": 80,
            "return": [],
            "arguments": {
                "request": [],
                "username": []
            }
        }
    },
    "journaltown-be-master/posts/views/users.py": {
        "CurrentUserView.get": {
            "name": "get",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FollowView.get": {
            "name": "get",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": []
            }
        },
        "FollowView.put": {
            "name": "put",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": []
            }
        },
        "FollowView.delete": {
            "name": "delete",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "username": []
            }
        }
    },
    "journaltown-be-master/posts/views/__init__.py": {},
    "journaltown-be-master/posts/views/tests/test_groups.py": {
        "FriendGroupsViewTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_can_get_friend_groups": {
            "name": "test_can_get_friend_groups",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_cannot_get_other_user_friend_groups": {
            "name": "test_cannot_get_other_user_friend_groups",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_can_create_own_group": {
            "name": "test_can_create_own_group",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_create_group_needs_name": {
            "name": "test_create_group_needs_name",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_can_create_group_with_members": {
            "name": "test_can_create_group_with_members",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupsViewTest.test_cannot_create_multiple_groups_with_same_name": {
            "name": "test_cannot_create_multiple_groups_with_same_name",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.setUp": {
            "name": "setUp",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_can_get_group": {
            "name": "test_can_get_group",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_can_change_group_name": {
            "name": "test_can_change_group_name",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_can_delete_group": {
            "name": "test_can_delete_group",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_cannot_delete_group_under_other_username": {
            "name": "test_cannot_delete_group_under_other_username",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_cannot_delete_other_group": {
            "name": "test_cannot_delete_other_group",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_updating_group_can_remove_members": {
            "name": "test_updating_group_can_remove_members",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_updating_group_can_update_members": {
            "name": "test_updating_group_can_update_members",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupViewTest.test_updating_group_will_not_overwrite_members": {
            "name": "test_updating_group_will_not_overwrite_members",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.setUp": {
            "name": "setUp",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_can_get_group_members": {
            "name": "test_can_get_group_members",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_get_external_user_group_members": {
            "name": "test_cannot_get_external_user_group_members",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_get_other_user_group_members": {
            "name": "test_cannot_get_other_user_group_members",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_can_add_group_members": {
            "name": "test_can_add_group_members",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_can_add_group_members_idempotent": {
            "name": "test_can_add_group_members_idempotent",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_add_members_to_external_group": {
            "name": "test_cannot_add_members_to_external_group",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_add_members_to_other_group": {
            "name": "test_cannot_add_members_to_other_group",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_can_delete_members": {
            "name": "test_can_delete_members",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_can_delete_members_idempotent": {
            "name": "test_can_delete_members_idempotent",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_delete_members_from_external_group": {
            "name": "test_cannot_delete_members_from_external_group",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FriendGroupMemberViewTest.test_cannot_delete_members_from_other_group": {
            "name": "test_cannot_delete_members_from_other_group",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/views/tests/test_posts.py": {
        "PostUserViewTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_not_logged_in_returns_unauthorized": {
            "name": "test_not_logged_in_returns_unauthorized",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_no_posts_returns_empty_list": {
            "name": "test_no_posts_returns_empty_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_post_creates_post": {
            "name": "test_post_creates_post",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_can_update_content": {
            "name": "test_can_update_content",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_cannot_update_author": {
            "name": "test_cannot_update_author",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_posts_returns_post_list": {
            "name": "test_posts_returns_post_list",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_posts_request_created_before": {
            "name": "test_posts_request_created_before",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_posts_request_modified_after": {
            "name": "test_posts_request_modified_after",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_get_individual_post": {
            "name": "test_get_individual_post",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostUserViewTest.test_delete_post": {
            "name": "test_delete_post",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/views/tests/test_registration.py": {
        "SendRegistrationVerificationViewTestCase.test_token_send_succeeds_for_unknown_email": {
            "name": "test_token_send_succeeds_for_unknown_email",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendRegistrationVerificationViewTestCase.test_token_send_sends_email": {
            "name": "test_token_send_sends_email",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendRegistrationVerificationViewTestCase.test_token_success_erases_old_token": {
            "name": "test_token_success_erases_old_token",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendRegistrationVerificationViewTestCase.test_token_send_fails_for_invalid_email": {
            "name": "test_token_send_fails_for_invalid_email",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendRegistrationVerificationViewTestCase.test_token_send_fails_for_known_email": {
            "name": "test_token_send_fails_for_known_email",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendRegistrationVerificationViewTestCase.test_token_send_fails_with_missing_email": {
            "name": "test_token_send_fails_with_missing_email",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_missing_token_fails": {
            "name": "test_missing_token_fails",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_missing_username_fails": {
            "name": "test_missing_username_fails",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_missing_token_record_fails": {
            "name": "test_missing_token_record_fails",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_expired_token_record_fails": {
            "name": "test_expired_token_record_fails",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_invalid_username_fails": {
            "name": "test_invalid_username_fails",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_creates_user": {
            "name": "test_creates_user",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterUserViewTestCase.test_returns_valid_auth_token": {
            "name": "test_returns_valid_auth_token",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameAvailableViewTestCase.test_invalid_username_returns_failure": {
            "name": "test_invalid_username_returns_failure",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsernameAvailableViewTestCase.test_valid_username_returns_success": {
            "name": "test_valid_username_returns_success",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/views/tests/test_users.py": {
        "CurrentUserViewTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentUserViewTestCase.test_not_logged_in_returns_unauthorized": {
            "name": "test_not_logged_in_returns_unauthorized",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentUserViewTestCase.test_logged_in_returns_user_info": {
            "name": "test_logged_in_returns_user_info",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_get_individual_user": {
            "name": "test_get_individual_user",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_get_individual_user_expand_profile": {
            "name": "test_get_individual_user_expand_profile",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_get_user_includes_follows": {
            "name": "test_get_user_includes_follows",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_update_profile": {
            "name": "test_update_profile",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_cannot_update_external_profile": {
            "name": "test_cannot_update_external_profile",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserViewTestCase.test_update_other_profile_fails": {
            "name": "test_update_other_profile_fails",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_cannot_delete_account": {
            "name": "test_cannot_delete_account",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_get_returns_follow_list": {
            "name": "test_get_returns_follow_list",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_get_returns_individual_follow": {
            "name": "test_get_returns_individual_follow",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_get_returns_filtered_follow_list": {
            "name": "test_get_returns_filtered_follow_list",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_get_invalid_username_fails": {
            "name": "test_get_invalid_username_fails",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_can_add_follow": {
            "name": "test_put_can_add_follow",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_cannot_add_follow_for_other_user": {
            "name": "test_put_cannot_add_follow_for_other_user",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_invalid_username_fails": {
            "name": "test_put_invalid_username_fails",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_invalid_target_username_fails": {
            "name": "test_put_invalid_target_username_fails",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_missing_target_username_fails": {
            "name": "test_put_missing_target_username_fails",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_put_add_follow_idempotent": {
            "name": "test_put_add_follow_idempotent",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_delete_removes_follow": {
            "name": "test_delete_removes_follow",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_delete_invalid_username_fails": {
            "name": "test_delete_invalid_username_fails",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_delete_invalid_target_username_fails": {
            "name": "test_delete_invalid_target_username_fails",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_delete_missing_target_username_fails": {
            "name": "test_delete_missing_target_username_fails",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_delete_idempotent": {
            "name": "test_delete_idempotent",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FollowViewTestCase.test_first_add_sends_target_email": {
            "name": "test_first_add_sends_target_email",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "journaltown-be-master/posts/views/tests/__init__.py": {}
}
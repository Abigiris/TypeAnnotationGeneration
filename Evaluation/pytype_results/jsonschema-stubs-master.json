{
    "jsonschema-stubs-master/setup.py": {
        "find_stubs": {
            "name": "find_stubs",
            "location": 6,
            "return": [
                "Dict[(_T0, list)]"
            ],
            "arguments": {
                "package": [
                    "_T0"
                ]
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/cli.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 9,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 11,
            "return": [],
            "arguments": {
                "arguments": [],
                "stdout": [],
                "stderr": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/compat.py": {
        "urlsplit": {
            "name": "urlsplit",
            "location": 15,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "urldefrag": {
            "name": "urldefrag",
            "location": 16,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/exceptions.py": {
        "by_relevance": {
            "name": "by_relevance",
            "location": 71,
            "return": [],
            "arguments": {
                "weak": [],
                "strong": []
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 75,
            "return": [],
            "arguments": {
                "errors": [],
                "key": []
            }
        },
        "_Error.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "validator": [],
                "path": [],
                "cause": [],
                "context": [],
                "validator_value": [],
                "instance": [],
                "schema": [],
                "schema_path": [],
                "parent": []
            }
        },
        "_Error.__unicode__": {
            "name": "__unicode__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Error.create_from": {
            "name": "create_from",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "_Error.absolute_path": {
            "name": "absolute_path",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Error.absolute_schema_path": {
            "name": "absolute_schema_path",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefResolutionError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "cause": []
            }
        },
        "RefResolutionError.__ne__": {
            "name": "__ne__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefResolutionError.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefResolutionError.__lt__": {
            "name": "__lt__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefResolutionError.__le__": {
            "name": "__le__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefResolutionError.__gt__": {
            "name": "__gt__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefResolutionError.__ge__": {
            "name": "__ge__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UndefinedTypeCheck.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "UndefinedTypeCheck.__unicode__": {
            "name": "__unicode__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownType.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "instance": [],
                "schema": []
            }
        },
        "UnknownType.__unicode__": {
            "name": "__unicode__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormatError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "cause": []
            }
        },
        "FormatError.__unicode__": {
            "name": "__unicode__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTree.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "ErrorTree.__contains__": {
            "name": "__contains__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ErrorTree.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ErrorTree.__setitem__": {
            "name": "__setitem__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "ErrorTree.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTree.__len__": {
            "name": "__len__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorTree.total_errors": {
            "name": "total_errors",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/validators.py": {
        "validates": {
            "name": "validates",
            "location": 12,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "create": {
            "name": "create",
            "location": 17,
            "return": [],
            "arguments": {
                "meta_schema": [],
                "validators": [],
                "version": [],
                "default_types": [],
                "type_checker": [],
                "id_of": []
            }
        },
        "extend": {
            "name": "extend",
            "location": 18,
            "return": [],
            "arguments": {
                "validator": [],
                "validators": [],
                "version": [],
                "type_checker": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 46,
            "return": [],
            "arguments": {
                "instance": [],
                "schema": [],
                "cls": []
            }
        },
        "validator_for": {
            "name": "validator_for",
            "location": 47,
            "return": [],
            "arguments": {
                "schema": [],
                "default": []
            }
        },
        "RefResolver.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "base_uri": [],
                "referrer": [],
                "store": [],
                "cache_remote": [],
                "handlers": [],
                "urljoin_cache": [],
                "remote_cache": []
            }
        },
        "RefResolver.from_schema": {
            "name": "from_schema",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "schema": [],
                "id_of": []
            }
        },
        "RefResolver.push_scope": {
            "name": "push_scope",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "RefResolver.pop_scope": {
            "name": "pop_scope",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefResolver.resolution_scope": {
            "name": "resolution_scope",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefResolver.base_uri": {
            "name": "base_uri",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefResolver.in_scope": {
            "name": "in_scope",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "RefResolver.resolving": {
            "name": "resolving",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "RefResolver.resolve": {
            "name": "resolve",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "RefResolver.resolve_from_url": {
            "name": "resolve_from_url",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "RefResolver.resolve_fragment": {
            "name": "resolve_fragment",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "fragment": []
            }
        },
        "RefResolver.resolve_remote": {
            "name": "resolve_remote",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_format.py": {
        "is_email": {
            "name": "is_email",
            "location": 20,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_ipv4": {
            "name": "is_ipv4",
            "location": 21,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_ipv6": {
            "name": "is_ipv6",
            "location": 22,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_host_name": {
            "name": "is_host_name",
            "location": 23,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_idn_host_name": {
            "name": "is_idn_host_name",
            "location": 24,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_iri": {
            "name": "is_iri",
            "location": 25,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_iri_reference": {
            "name": "is_iri_reference",
            "location": 26,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_uri": {
            "name": "is_uri",
            "location": 27,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_uri_reference": {
            "name": "is_uri_reference",
            "location": 28,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_datetime": {
            "name": "is_datetime",
            "location": 29,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_time": {
            "name": "is_time",
            "location": 30,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_regex": {
            "name": "is_regex",
            "location": 31,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_date": {
            "name": "is_date",
            "location": 32,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_draft3_time": {
            "name": "is_draft3_time",
            "location": 33,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_css_color_code": {
            "name": "is_css_color_code",
            "location": 34,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_css21_color": {
            "name": "is_css21_color",
            "location": 35,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_css3_color": {
            "name": "is_css3_color",
            "location": 36,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_json_pointer": {
            "name": "is_json_pointer",
            "location": 37,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_relative_json_pointer": {
            "name": "is_relative_json_pointer",
            "location": 38,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_uri_template": {
            "name": "is_uri_template",
            "location": 39,
            "return": [],
            "arguments": {
                "instance": [],
                "template_validator": []
            }
        },
        "FormatChecker.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "formats": []
            }
        },
        "FormatChecker.checks": {
            "name": "checks",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "format": [],
                "raises": []
            }
        },
        "FormatChecker.check": {
            "name": "check",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "format": []
            }
        },
        "FormatChecker.conforms": {
            "name": "conforms",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "format": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_legacy_validators.py": {
        "dependencies_draft3": {
            "name": "dependencies_draft3",
            "location": 7,
            "return": [],
            "arguments": {
                "validator": [],
                "dependencies": [],
                "instance": [],
                "schema": []
            }
        },
        "disallow_draft3": {
            "name": "disallow_draft3",
            "location": 8,
            "return": [],
            "arguments": {
                "validator": [],
                "disallow": [],
                "instance": [],
                "schema": []
            }
        },
        "extends_draft3": {
            "name": "extends_draft3",
            "location": 9,
            "return": [],
            "arguments": {
                "validator": [],
                "extends": [],
                "instance": [],
                "schema": []
            }
        },
        "items_draft3_draft4": {
            "name": "items_draft3_draft4",
            "location": 10,
            "return": [],
            "arguments": {
                "validator": [],
                "items": [],
                "instance": [],
                "schema": []
            }
        },
        "minimum_draft3_draft4": {
            "name": "minimum_draft3_draft4",
            "location": 11,
            "return": [],
            "arguments": {
                "validator": [],
                "minimum": [],
                "instance": [],
                "schema": []
            }
        },
        "maximum_draft3_draft4": {
            "name": "maximum_draft3_draft4",
            "location": 12,
            "return": [],
            "arguments": {
                "validator": [],
                "maximum": [],
                "instance": [],
                "schema": []
            }
        },
        "properties_draft3": {
            "name": "properties_draft3",
            "location": 13,
            "return": [],
            "arguments": {
                "validator": [],
                "properties": [],
                "instance": [],
                "schema": []
            }
        },
        "type_draft3": {
            "name": "type_draft3",
            "location": 14,
            "return": [],
            "arguments": {
                "validator": [],
                "types": [],
                "instance": [],
                "schema": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_reflect.py": {
        "reraise": {
            "name": "reraise",
            "location": 12,
            "return": [],
            "arguments": {
                "exception": [],
                "traceback": []
            }
        },
        "namedAny": {
            "name": "namedAny",
            "location": 13,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_types.py": {
        "is_array": {
            "name": "is_array",
            "location": 7,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_bool": {
            "name": "is_bool",
            "location": 8,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_integer": {
            "name": "is_integer",
            "location": 9,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 10,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_number": {
            "name": "is_number",
            "location": 11,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_object": {
            "name": "is_object",
            "location": 12,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_string": {
            "name": "is_string",
            "location": 13,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_any": {
            "name": "is_any",
            "location": 14,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "TypeChecker.is_type": {
            "name": "is_type",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "type": []
            }
        },
        "TypeChecker.redefine": {
            "name": "redefine",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "fn": []
            }
        },
        "TypeChecker.redefine_many": {
            "name": "redefine_many",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "definitions": []
            }
        },
        "TypeChecker.remove": {
            "name": "remove",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeChecker.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "type_checkers": []
            }
        },
        "TypeChecker.__ne__": {
            "name": "__ne__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeChecker.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeChecker.__lt__": {
            "name": "__lt__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeChecker.__le__": {
            "name": "__le__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeChecker.__gt__": {
            "name": "__gt__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TypeChecker.__ge__": {
            "name": "__ge__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_utils.py": {
        "load_schema": {
            "name": "load_schema",
            "location": 20,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 21,
            "return": [],
            "arguments": {
                "string": [],
                "times": []
            }
        },
        "format_as_index": {
            "name": "format_as_index",
            "location": 22,
            "return": [],
            "arguments": {
                "indices": []
            }
        },
        "find_additional_properties": {
            "name": "find_additional_properties",
            "location": 23,
            "return": [],
            "arguments": {
                "instance": [],
                "schema": []
            }
        },
        "extras_msg": {
            "name": "extras_msg",
            "location": 24,
            "return": [],
            "arguments": {
                "extras": []
            }
        },
        "types_msg": {
            "name": "types_msg",
            "location": 25,
            "return": [],
            "arguments": {
                "instance": [],
                "types": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 26,
            "return": [],
            "arguments": {
                "suitable_for_isinstance": []
            }
        },
        "ensure_list": {
            "name": "ensure_list",
            "location": 27,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "equal": {
            "name": "equal",
            "location": 28,
            "return": [],
            "arguments": {
                "one": [],
                "two": []
            }
        },
        "unbool": {
            "name": "unbool",
            "location": 29,
            "return": [],
            "arguments": {
                "element": [],
                "true": [],
                "false": []
            }
        },
        "uniq": {
            "name": "uniq",
            "location": 30,
            "return": [],
            "arguments": {
                "container": []
            }
        },
        "URIDict.normalize": {
            "name": "normalize",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "URIDict.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIDict.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "URIDict.__setitem__": {
            "name": "__setitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "value": []
            }
        },
        "URIDict.__delitem__": {
            "name": "__delitem__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "URIDict.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIDict.__len__": {
            "name": "__len__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/_validators.py": {
        "patternProperties": {
            "name": "patternProperties",
            "location": 7,
            "return": [],
            "arguments": {
                "validator": [],
                "patternProperties": [],
                "instance": [],
                "schema": []
            }
        },
        "propertyNames": {
            "name": "propertyNames",
            "location": 8,
            "return": [],
            "arguments": {
                "validator": [],
                "propertyNames": [],
                "instance": [],
                "schema": []
            }
        },
        "additionalProperties": {
            "name": "additionalProperties",
            "location": 9,
            "return": [],
            "arguments": {
                "validator": [],
                "aP": [],
                "instance": [],
                "schema": []
            }
        },
        "items": {
            "name": "items",
            "location": 10,
            "return": [],
            "arguments": {
                "validator": [],
                "items": [],
                "instance": [],
                "schema": []
            }
        },
        "additionalItems": {
            "name": "additionalItems",
            "location": 11,
            "return": [],
            "arguments": {
                "validator": [],
                "aI": [],
                "instance": [],
                "schema": []
            }
        },
        "const": {
            "name": "const",
            "location": 12,
            "return": [],
            "arguments": {
                "validator": [],
                "const": [],
                "instance": [],
                "schema": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 13,
            "return": [],
            "arguments": {
                "validator": [],
                "contains": [],
                "instance": [],
                "schema": []
            }
        },
        "exclusiveMinimum": {
            "name": "exclusiveMinimum",
            "location": 14,
            "return": [],
            "arguments": {
                "validator": [],
                "minimum": [],
                "instance": [],
                "schema": []
            }
        },
        "exclusiveMaximum": {
            "name": "exclusiveMaximum",
            "location": 15,
            "return": [],
            "arguments": {
                "validator": [],
                "maximum": [],
                "instance": [],
                "schema": []
            }
        },
        "minimum": {
            "name": "minimum",
            "location": 16,
            "return": [],
            "arguments": {
                "validator": [],
                "minimum": [],
                "instance": [],
                "schema": []
            }
        },
        "maximum": {
            "name": "maximum",
            "location": 17,
            "return": [],
            "arguments": {
                "validator": [],
                "maximum": [],
                "instance": [],
                "schema": []
            }
        },
        "multipleOf": {
            "name": "multipleOf",
            "location": 18,
            "return": [],
            "arguments": {
                "validator": [],
                "dB": [],
                "instance": [],
                "schema": []
            }
        },
        "minItems": {
            "name": "minItems",
            "location": 19,
            "return": [],
            "arguments": {
                "validator": [],
                "mI": [],
                "instance": [],
                "schema": []
            }
        },
        "maxItems": {
            "name": "maxItems",
            "location": 20,
            "return": [],
            "arguments": {
                "validator": [],
                "mI": [],
                "instance": [],
                "schema": []
            }
        },
        "uniqueItems": {
            "name": "uniqueItems",
            "location": 21,
            "return": [],
            "arguments": {
                "validator": [],
                "uI": [],
                "instance": [],
                "schema": []
            }
        },
        "pattern": {
            "name": "pattern",
            "location": 22,
            "return": [],
            "arguments": {
                "validator": [],
                "patrn": [],
                "instance": [],
                "schema": []
            }
        },
        "format": {
            "name": "format",
            "location": 23,
            "return": [],
            "arguments": {
                "validator": [],
                "format": [],
                "instance": [],
                "schema": []
            }
        },
        "minLength": {
            "name": "minLength",
            "location": 24,
            "return": [],
            "arguments": {
                "validator": [],
                "mL": [],
                "instance": [],
                "schema": []
            }
        },
        "maxLength": {
            "name": "maxLength",
            "location": 25,
            "return": [],
            "arguments": {
                "validator": [],
                "mL": [],
                "instance": [],
                "schema": []
            }
        },
        "dependencies": {
            "name": "dependencies",
            "location": 26,
            "return": [],
            "arguments": {
                "validator": [],
                "dependencies": [],
                "instance": [],
                "schema": []
            }
        },
        "enum": {
            "name": "enum",
            "location": 27,
            "return": [],
            "arguments": {
                "validator": [],
                "enums": [],
                "instance": [],
                "schema": []
            }
        },
        "ref": {
            "name": "ref",
            "location": 28,
            "return": [],
            "arguments": {
                "validator": [],
                "ref": [],
                "instance": [],
                "schema": []
            }
        },
        "type": {
            "name": "type",
            "location": 29,
            "return": [],
            "arguments": {
                "validator": [],
                "types": [],
                "instance": [],
                "schema": []
            }
        },
        "properties": {
            "name": "properties",
            "location": 30,
            "return": [],
            "arguments": {
                "validator": [],
                "properties": [],
                "instance": [],
                "schema": []
            }
        },
        "required": {
            "name": "required",
            "location": 31,
            "return": [],
            "arguments": {
                "validator": [],
                "required": [],
                "instance": [],
                "schema": []
            }
        },
        "minProperties": {
            "name": "minProperties",
            "location": 32,
            "return": [],
            "arguments": {
                "validator": [],
                "mP": [],
                "instance": [],
                "schema": []
            }
        },
        "maxProperties": {
            "name": "maxProperties",
            "location": 33,
            "return": [],
            "arguments": {
                "validator": [],
                "mP": [],
                "instance": [],
                "schema": []
            }
        },
        "allOf": {
            "name": "allOf",
            "location": 34,
            "return": [],
            "arguments": {
                "validator": [],
                "allOf": [],
                "instance": [],
                "schema": []
            }
        },
        "anyOf": {
            "name": "anyOf",
            "location": 35,
            "return": [],
            "arguments": {
                "validator": [],
                "anyOf": [],
                "instance": [],
                "schema": []
            }
        },
        "oneOf": {
            "name": "oneOf",
            "location": 36,
            "return": [],
            "arguments": {
                "validator": [],
                "oneOf": [],
                "instance": [],
                "schema": []
            }
        },
        "not_": {
            "name": "not_",
            "location": 37,
            "return": [],
            "arguments": {
                "validator": [],
                "not_schema": [],
                "instance": [],
                "schema": []
            }
        },
        "if_": {
            "name": "if_",
            "location": 38,
            "return": [],
            "arguments": {
                "validator": [],
                "if_schema": [],
                "instance": [],
                "schema": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/__init__.py": {},
    "jsonschema-stubs-master/jsonschema-stubs/benchmarks/__init__.py": {},
    "jsonschema-stubs-master/jsonschema-stubs/tests/test_cli.py": {
        "fake_validator": {
            "name": "fake_validator",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "TestParser.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.fake_open": {
            "name": "fake_open",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestParser.test_find_validator_by_fully_qualified_object_name": {
            "name": "test_find_validator_by_fully_qualified_object_name",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_find_validator_in_jsonschema": {
            "name": "test_find_validator_in_jsonschema",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_draft3_schema_draft4_validator": {
            "name": "test_draft3_schema_draft4_validator",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_successful_validation": {
            "name": "test_successful_validation",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_unsuccessful_validation": {
            "name": "test_unsuccessful_validation",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_unsuccessful_validation_multiple_instances": {
            "name": "test_unsuccessful_validation_multiple_instances",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCLI.test_version": {
            "name": "test_version",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/tests/test_exceptions.py": {
        "TestBestMatch.best_match": {
            "name": "best_match",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "TestBestMatch.test_shallower_errors_are_better_matches": {
            "name": "test_shallower_errors_are_better_matches",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_oneOf_and_anyOf_are_weak_matches": {
            "name": "test_oneOf_and_anyOf_are_weak_matches",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_if_the_most_relevant_error_is_anyOf_it_is_traversed": {
            "name": "test_if_the_most_relevant_error_is_anyOf_it_is_traversed",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_if_the_most_relevant_error_is_oneOf_it_is_traversed": {
            "name": "test_if_the_most_relevant_error_is_oneOf_it_is_traversed",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_if_the_most_relevant_error_is_allOf_it_is_traversed": {
            "name": "test_if_the_most_relevant_error_is_allOf_it_is_traversed",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_nested_context_for_oneOf": {
            "name": "test_nested_context_for_oneOf",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_one_error": {
            "name": "test_one_error",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBestMatch.test_no_errors": {
            "name": "test_no_errors",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestByRelevance.test_short_paths_are_better_matches": {
            "name": "test_short_paths_are_better_matches",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestByRelevance.test_global_errors_are_even_better_matches": {
            "name": "test_global_errors_are_even_better_matches",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestByRelevance.test_weak_validators_are_lower_priority": {
            "name": "test_weak_validators_are_lower_priority",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestByRelevance.test_strong_validators_are_higher_priority": {
            "name": "test_strong_validators_are_higher_priority",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_it_knows_how_many_total_errors_it_contains": {
            "name": "test_it_knows_how_many_total_errors_it_contains",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_it_contains_an_item_if_the_item_had_an_error": {
            "name": "test_it_contains_an_item_if_the_item_had_an_error",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_it_does_not_contain_an_item_if_the_item_had_no_error": {
            "name": "test_it_does_not_contain_an_item_if_the_item_had_no_error",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_validators_that_failed_appear_in_errors_dict": {
            "name": "test_validators_that_failed_appear_in_errors_dict",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_it_creates_a_child_tree_for_each_nested_path": {
            "name": "test_it_creates_a_child_tree_for_each_nested_path",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_children_have_their_errors_dicts_built": {
            "name": "test_children_have_their_errors_dicts_built",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_multiple_errors_with_instance": {
            "name": "test_multiple_errors_with_instance",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_it_does_not_contain_subtrees_that_are_not_in_the_instance": {
            "name": "test_it_does_not_contain_subtrees_that_are_not_in_the_instance",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorTree.test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error": {
            "name": "test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.make_error": {
            "name": "make_error",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.assertShows": {
            "name": "assertShows",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "TestErrorInitReprStr.test_it_calls_super_and_sets_args": {
            "name": "test_it_calls_super_and_sets_args",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_repr": {
            "name": "test_repr",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_unset_error": {
            "name": "test_unset_error",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_empty_paths": {
            "name": "test_empty_paths",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_one_item_paths": {
            "name": "test_one_item_paths",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_multiple_item_paths": {
            "name": "test_multiple_item_paths",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_uses_pprint": {
            "name": "test_uses_pprint",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestErrorInitReprStr.test_str_works_with_instances_having_overriden_eq_operator": {
            "name": "test_str_works_with_instances_having_overriden_eq_operator",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHashable.test_hashable": {
            "name": "test_hashable",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/tests/test_format.py": {
        "boom": {
            "name": "boom",
            "location": 11,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "TestFormatChecker.test_it_can_validate_no_formats": {
            "name": "test_it_can_validate_no_formats",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_it_raises_a_key_error_for_unknown_formats": {
            "name": "test_it_raises_a_key_error_for_unknown_formats",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_it_can_register_cls_checkers": {
            "name": "test_it_can_register_cls_checkers",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_it_can_register_checkers": {
            "name": "test_it_can_register_checkers",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_it_catches_registered_errors": {
            "name": "test_it_catches_registered_errors",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_format_error_causes_become_validation_error_causes": {
            "name": "test_format_error_causes_become_validation_error_causes",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFormatChecker.test_format_checkers_come_with_defaults": {
            "name": "test_format_checkers_come_with_defaults",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/tests/test_types.py": {
        "equals_2": {
            "name": "equals_2",
            "location": 8,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 9,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "is_object_or_named_tuple": {
            "name": "is_object_or_named_tuple",
            "location": 10,
            "return": [],
            "arguments": {
                "checker": [],
                "instance": []
            }
        },
        "coerce_named_tuple": {
            "name": "coerce_named_tuple",
            "location": 11,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "TestTypeChecker.test_is_type": {
            "name": "test_is_type",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_is_unknown_type": {
            "name": "test_is_unknown_type",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_checks_can_be_added_at_init": {
            "name": "test_checks_can_be_added_at_init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_redefine_existing_type": {
            "name": "test_redefine_existing_type",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_remove": {
            "name": "test_remove",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_remove_unknown_type": {
            "name": "test_remove_unknown_type",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_redefine_many": {
            "name": "test_redefine_many",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_remove_multiple": {
            "name": "test_remove_multiple",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTypeChecker.test_type_check_can_raise_key_error": {
            "name": "test_type_check_can_raise_key_error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomTypes.test_simple_type_can_be_extended": {
            "name": "test_simple_type_can_be_extended",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomTypes.test_object_can_be_extended": {
            "name": "test_object_can_be_extended",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomTypes.test_object_extensions_require_custom_validators": {
            "name": "test_object_extensions_require_custom_validators",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCustomTypes.test_object_extensions_can_handle_custom_validators": {
            "name": "test_object_extensions_can_handle_custom_validators",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jsonschema-stubs-master/jsonschema-stubs/tests/__init__.py": {}
}
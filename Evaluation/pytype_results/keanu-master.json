{
    "keanu-master/docs/bin/freezeAtVersion.py": {
        "update_file": {
            "name": "update_file",
            "location": 8,
            "return": [],
            "arguments": {
                "destination": [],
                "version": []
            }
        },
        "freeze_shiny": {
            "name": "freeze_shiny",
            "location": 17,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "copy_to_versioned_legacy_path": {
            "name": "copy_to_versioned_legacy_path",
            "location": 23,
            "return": [],
            "arguments": {
                "source_path": [],
                "legacy_root": [],
                "version": []
            }
        },
        "freeze_python": {
            "name": "freeze_python",
            "location": 28,
            "return": [],
            "arguments": {
                "version": []
            }
        }
    },
    "keanu-master/docs/bin/snippet_writer.py": {
        "record_error": {
            "name": "record_error",
            "location": 21,
            "return": [],
            "arguments": {
                "output_str": []
            }
        },
        "printd": {
            "name": "printd",
            "location": 27,
            "return": [],
            "arguments": {
                "debug_str": []
            }
        },
        "read_file_snippets": {
            "name": "read_file_snippets",
            "location": 31,
            "return": [],
            "arguments": {
                "file": [],
                "snippet_store": []
            }
        },
        "replace_tags": {
            "name": "replace_tags",
            "location": 76,
            "return": [],
            "arguments": {
                "in_name": [],
                "out_name": [],
                "snippet_store": []
            }
        },
        "do_rewrites": {
            "name": "do_rewrites",
            "location": 95,
            "return": [],
            "arguments": {
                "file_name": [],
                "in_loc": [],
                "out_loc": [],
                "snippet_store": []
            }
        },
        "for_all_files_in_dir": {
            "name": "for_all_files_in_dir",
            "location": 102,
            "return": [],
            "arguments": {
                "directory": [],
                "action": []
            }
        },
        "subtractStrings": {
            "name": "subtractStrings",
            "location": 108,
            "return": [],
            "arguments": {
                "str1": [],
                "str2": []
            }
        },
        "for_all_in_subdirs": {
            "name": "for_all_in_subdirs",
            "location": 114,
            "return": [],
            "arguments": {
                "directory": [],
                "action": []
            }
        },
        "check_output_dir_exists": {
            "name": "check_output_dir_exists",
            "location": 121,
            "return": [],
            "arguments": {
                "output_dir": []
            }
        },
        "strip_block_whitespace": {
            "name": "strip_block_whitespace",
            "location": 126,
            "return": [],
            "arguments": {
                "string_list": []
            }
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_autocorrelation.py": {
        "test_autocorrelation_example_scalar": {
            "name": "test_autocorrelation_example_scalar",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_autocorrelation_example_nd": {
            "name": "test_autocorrelation_example_nd",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_lorenz.py": {
        "add_time": {
            "name": "add_time",
            "location": 39,
            "return": [],
            "arguments": {
                "current": []
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 49,
            "return": [],
            "arguments": {
                "initial": []
            }
        },
        "apply_observations": {
            "name": "apply_observations",
            "location": 57,
            "return": [],
            "arguments": {
                "graph_time_steps": [],
                "window": [],
                "observed": []
            }
        },
        "get_time_slice_values": {
            "name": "get_time_slice_values",
            "location": 66,
            "return": [],
            "arguments": {
                "time_steps": [],
                "time": []
            }
        },
        "test_run_lorenz": {
            "name": "test_run_lorenz",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "LorenzModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sigma": [],
                "beta": [],
                "rho": [],
                "time_step": []
            }
        },
        "LorenzModel.run_model": {
            "name": "run_model",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "num_time_steps": []
            }
        },
        "LorenzModel.__get_next_position": {
            "name": "__get_next_position",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "current": []
            }
        }
    },
    "keanu-master/docs/src/test/python/test_optimizer.py": {
        "build_model": {
            "name": "build_model",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_gradient_optimzer_example": {
            "name": "test_gradient_optimzer_example",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_non_gradient_optimizer_example": {
            "name": "test_non_gradient_optimizer_example",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_sampling.py": {
        "test_inference_example_metropolis": {
            "name": "test_inference_example_metropolis",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_inference_example_hmc_nuts": {
            "name": "test_inference_example_hmc_nuts",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_save_load.py": {
        "test_can_save_and_load": {
            "name": "test_can_save_and_load",
            "location": 5,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "keanu-master/docs/src/test/python/test_tensors.py": {
        "test_tensor_example_creation": {
            "name": "test_tensor_example_creation",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_thermometers.py": {
        "test_thermometers_example": {
            "name": "test_thermometers_example",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-project/src/test/resources/model.py": {},
    "keanu-master/keanu-python/setup.py": {
        "readme": {
            "name": "readme",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/docs/conf.py": {},
    "keanu-master/keanu-python/docs/remove_underscores.py": {},
    "keanu-master/keanu-python/examples/coal_mining.py": {
        "CoalMining.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoalMining.model": {
            "name": "model",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoalMining.training_data": {
            "name": "training_data",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/examples/lorenz_model.py": {
        "LorenzModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "sigma": [],
                "beta": [],
                "rho": [],
                "time_step": []
            }
        },
        "LorenzModel.run_model": {
            "name": "run_model",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "num_time_steps": []
            }
        },
        "LorenzModel.__get_next_position": {
            "name": "__get_next_position",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "current": []
            }
        }
    },
    "keanu-master/keanu-python/examples/thermometers.py": {
        "model": {
            "name": "model",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/examples/__init__.py": {},
    "keanu-master/keanu-python/keanu/base.py": {
        "JavaObjectWrapper.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "JavaObjectWrapper.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaObjectWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "JavaObjectWrapper.__check_if_constructed_without_error": {
            "name": "__check_if_constructed_without_error",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "JavaObjectWrapper.__check_if_unwrapped": {
            "name": "__check_if_unwrapped",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "JavaObjectWrapper.unwrap": {
            "name": "unwrap",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/context.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeanuContext.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__build_classpath": {
            "name": "__build_classpath",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__stderr_with_redirect_disabled_for_jupyter": {
            "name": "__stderr_with_redirect_disabled_for_jupyter",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__get_random_port_for_callback_server": {
            "name": "__get_random_port_for_callback_server",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.jvm_view": {
            "name": "jvm_view",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.to_java_map": {
            "name": "to_java_map",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "python_map": []
            }
        },
        "KeanuContext.to_java_object_list": {
            "name": "to_java_object_list",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_object_set": {
            "name": "to_java_object_set",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_array": {
            "name": "to_java_array",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "l": [],
                "klass": []
            }
        },
        "KeanuContext.to_java_long_array": {
            "name": "to_java_long_array",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_int_array": {
            "name": "to_java_int_array",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_boolean_array": {
            "name": "to_java_boolean_array",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_string_array": {
            "name": "to_java_string_array",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.to_java_vertex_array": {
            "name": "to_java_vertex_array",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        },
        "KeanuContext.__infer_class_from_array": {
            "name": "__infer_class_from_array",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "l": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/description_creator.py": {
        "create_description": {
            "name": "create_description",
            "location": 13,
            "return": [],
            "arguments": {
                "vertex": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/infer_type.py": {
        "infer_type_and_execute": {
            "name": "infer_type_and_execute",
            "location": 11,
            "return": [],
            "arguments": {
                "value": [],
                "actions": []
            }
        },
        "get_type_of_value": {
            "name": "get_type_of_value",
            "location": 15,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "__infer_type_from_ndarray": {
            "name": "__infer_type_from_ndarray",
            "location": 30,
            "return": [],
            "arguments": {
                "ndarray": []
            }
        },
        "__infer_type_from_scalar": {
            "name": "__infer_type_from_scalar",
            "location": 41,
            "return": [],
            "arguments": {
                "scalar": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/java_exception.py": {
        "JavaException.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "JavaException.get_class": {
            "name": "get_class",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaException.get_message": {
            "name": "get_message",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaException.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/keanu_random.py": {
        "set_deterministic_state": {
            "name": "set_deterministic_state",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "KeanuRandom.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "KeanuRandom.next_double": {
            "name": "next_double",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeanuRandom.set_default_random_seed": {
            "name": "set_default_random_seed",
            "location": 24,
            "return": [],
            "arguments": {
                "seed": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "vertices": []
            }
        },
        "Model.to_bayes_net": {
            "name": "to_bayes_net",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__setattr__": {
            "name": "__setattr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "Model.__getattr__": {
            "name": "__getattr__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Model.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__exit__": {
            "name": "__exit__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/net.py": {
        "BayesNet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "vertices": []
            }
        },
        "BayesNet.iter_latent_or_observed_vertices": {
            "name": "iter_latent_or_observed_vertices",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_latent_vertices": {
            "name": "iter_latent_vertices",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_observed_vertices": {
            "name": "iter_observed_vertices",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_continuous_latent_vertices": {
            "name": "iter_continuous_latent_vertices",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_discrete_latent_vertices": {
            "name": "iter_discrete_latent_vertices",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_all_vertices": {
            "name": "iter_all_vertices",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.probe_for_non_zero_probability": {
            "name": "probe_for_non_zero_probability",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "attempts": [],
                "random": []
            }
        },
        "BayesNet.get_vertex_by_label": {
            "name": "get_vertex_by_label",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "ProbabilisticModel.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "ProbabilisticModelWithGradient.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/network_io.py": {
        "NetworkSaver.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "saver_object": []
            }
        },
        "NetworkSaver.save": {
            "name": "save",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "save_values": [],
                "metadata": []
            }
        },
        "ProtobufSaver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "DotSaver.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "net_or_vertices": []
            }
        },
        "JsonSaver.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "MIRSaver.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "NetworkLoader.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "loader_object": []
            }
        },
        "NetworkLoader.load": {
            "name": "load",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "ProtobufLoader.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonLoader.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MIRLoader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/sequence.py": {
        "SequenceItem.add": {
            "name": "add",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "vertex": [],
                "label": []
            }
        },
        "SequenceItem.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "SequenceItem.get_contents": {
            "name": "get_contents",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceItem.add_double_proxy_for": {
            "name": "add_double_proxy_for",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "shape": []
            }
        },
        "SequenceItem.add_integer_proxy_for": {
            "name": "add_integer_proxy_for",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "shape": []
            }
        },
        "SequenceItem.add_boolean_proxy_for": {
            "name": "add_boolean_proxy_for",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "shape": []
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "factories": [],
                "count": [],
                "name": [],
                "data_generator": [],
                "initial_state": []
            }
        },
        "Sequence.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.size": {
            "name": "size",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.get_last_item": {
            "name": "get_last_item",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.to_bayes_net": {
            "name": "to_bayes_net",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.proxy_label_for": {
            "name": "proxy_label_for",
            "location": 150,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "SequenceItem.get_contents.get_unqualified_name_or_proxy_name": {
            "name": "get_unqualified_name_or_proxy_name",
            "location": 40,
            "return": [],
            "arguments": {
                "key": [],
                "vertex": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/shape_validation.py": {
        "check_index_is_valid": {
            "name": "check_index_is_valid",
            "location": 4,
            "return": [],
            "arguments": {
                "shape": [],
                "index": []
            }
        },
        "check_all_shapes_match": {
            "name": "check_all_shapes_match",
            "location": 12,
            "return": [],
            "arguments": {
                "shapes": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stats.py": {
        "autocorrelation": {
            "name": "autocorrelation",
            "location": 15,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "check_all_floats": {
            "name": "check_all_floats",
            "location": 21,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/tensor.py": {
        "Tensor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Tensor.is_scalar": {
            "name": "is_scalar",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tensor.scalar": {
            "name": "scalar",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tensor.apply": {
            "name": "apply",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "lambda_function": []
            }
        },
        "Tensor.get_tensor_type": {
            "name": "get_tensor_type",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tensor.__get_tensor_from_ndarray": {
            "name": "__get_tensor_from_ndarray",
            "location": 50,
            "return": [],
            "arguments": {
                "ndarray": []
            }
        },
        "Tensor.__get_java_array_from_ndarray": {
            "name": "__get_java_array_from_ndarray",
            "location": 59,
            "return": [],
            "arguments": {
                "ndarray": []
            }
        },
        "Tensor.__infer_tensor_ctor_from_ndarray": {
            "name": "__infer_tensor_ctor_from_ndarray",
            "location": 77,
            "return": [],
            "arguments": {
                "ndarray": []
            }
        },
        "Tensor.__get_tensor_from_scalar": {
            "name": "__get_tensor_from_scalar",
            "location": 89,
            "return": [],
            "arguments": {
                "scalar": []
            }
        },
        "Tensor._to_ndarray": {
            "name": "_to_ndarray",
            "location": 100,
            "return": [],
            "arguments": {
                "java_tensor": []
            }
        },
        "Tensor.__get_ndarray_from_tensor": {
            "name": "__get_ndarray_from_tensor",
            "location": 107,
            "return": [],
            "arguments": {
                "java_tensor": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vartypes.py": {},
    "keanu-master/keanu-python/keanu/__init__.py": {},
    "keanu-master/keanu-python/keanu/__version__.py": {},
    "keanu-master/keanu-python/keanu/algorithm/optimization.py": {
        "relative": {
            "name": "relative",
            "location": 40,
            "return": [],
            "arguments": {
                "norm": [],
                "tolerance": []
            }
        },
        "absolute": {
            "name": "absolute",
            "location": 44,
            "return": [],
            "arguments": {
                "norm": [],
                "tolerance": []
            }
        },
        "_OptimizedResult.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "result_object": []
            }
        },
        "_OptimizedResult.fitness": {
            "name": "fitness",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OptimizedResult.value_for": {
            "name": "value_for",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "ConvergenceChecker.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "difference": [],
                "norm": [],
                "tolerance": []
            }
        },
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "net": []
            }
        },
        "Optimizer.max_a_posteriori": {
            "name": "max_a_posteriori",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.max_likelihood": {
            "name": "max_likelihood",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer._build_bayes_net": {
            "name": "_build_bayes_net",
            "location": 82,
            "return": [],
            "arguments": {
                "factory_class": [],
                "net": []
            }
        },
        "GradientOptimizer.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "algorithm": []
            }
        },
        "ConjugateGradient.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "max_evaluations": [],
                "relative_threshold": [],
                "absolute_threshold": []
            }
        },
        "Adam.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "max_evaluations": [],
                "alpha": [],
                "beta1": [],
                "beta2": [],
                "epsilon": [],
                "convergence_checker": []
            }
        },
        "NonGradientOptimizer.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "algorithm": []
            }
        },
        "BOBYQA.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "max_evaluations": [],
                "bounds_range": [],
                "initial_trust_region_radius": [],
                "stopping_trust_region_radius": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/proposal_listeners.py": {
        "AcceptanceRateTracker.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AcceptanceRateTracker.get_acceptance_rate": {
            "name": "get_acceptance_rate",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "vertex": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/sampling.py": {
        "sample": {
            "name": "sample",
            "location": 130,
            "return": [],
            "arguments": {
                "net": [],
                "sample_from": [],
                "sampling_algorithm": [],
                "draws": [],
                "drop": [],
                "down_sample_interval": [],
                "plot": [],
                "ax": []
            }
        },
        "generate_samples": {
            "name": "generate_samples",
            "location": 188,
            "return": [],
            "arguments": {
                "net": [],
                "sample_from": [],
                "sampling_algorithm": [],
                "drop": [],
                "down_sample_interval": [],
                "live_plot": [],
                "refresh_every": [],
                "ax": []
            }
        },
        "__all_scalar": {
            "name": "__all_scalar",
            "location": 245,
            "return": [],
            "arguments": {
                "sample_from": []
            }
        },
        "_samples_generator": {
            "name": "_samples_generator",
            "location": 249,
            "return": [],
            "arguments": {
                "sample_iterator": [],
                "vertices_unwrapped": [],
                "live_plot": [],
                "refresh_every": [],
                "ax": [],
                "all_scalar": [],
                "id_to_label": []
            }
        },
        "__check_if_vertices_are_labelled": {
            "name": "__check_if_vertices_are_labelled",
            "location": 278,
            "return": [],
            "arguments": {
                "vertices": []
            }
        },
        "__create_single_indexed_samples": {
            "name": "__create_single_indexed_samples",
            "location": 289,
            "return": [],
            "arguments": {
                "network_samples": [],
                "vertices_unwrapped": [],
                "id_to_label": []
            }
        },
        "__create_multi_indexed_samples": {
            "name": "__create_multi_indexed_samples",
            "location": 299,
            "return": [],
            "arguments": {
                "vertices_unwrapped": [],
                "network_samples": [],
                "id_to_label": []
            }
        },
        "__create_multi_indexed_samples_generated": {
            "name": "__create_multi_indexed_samples_generated",
            "location": 316,
            "return": [],
            "arguments": {
                "vertices_unwrapped": [],
                "network_samples": [],
                "id_to_label": []
            }
        },
        "__add_sample_to_dict": {
            "name": "__add_sample_to_dict",
            "location": 332,
            "return": [],
            "arguments": {
                "sample_value": [],
                "vertex_sample": []
            }
        },
        "__get_vertex_samples": {
            "name": "__get_vertex_samples",
            "location": 340,
            "return": [],
            "arguments": {
                "network_samples": [],
                "vertex": []
            }
        },
        "PosteriorSamplingAlgorithm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "sampler": []
            }
        },
        "PosteriorSamplingAlgorithm.get_sampler": {
            "name": "get_sampler",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardSampler.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetropolisHastingsSampler.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "proposal_distribution": [],
                "latents": [],
                "proposal_listeners": [],
                "proposal_distribution_sigma": []
            }
        },
        "NUTSSampler.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "adapt_count": [],
                "adapt_step_size_enabled": [],
                "adapt_potential_enabled": [],
                "target_acceptance_prob": [],
                "initial_step_size": [],
                "potential_adapt_window_size": [],
                "max_energy_change": [],
                "max_tree_height": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/_proposal_distribution.py": {
        "ProposalDistribution.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "latents": [],
                "sigma": [],
                "listeners": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/__init__.py": {},
    "keanu-master/keanu-python/keanu/functional/biconsumer.py": {
        "BiConsumer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lambda_function": []
            }
        },
        "BiConsumer.accept": {
            "name": "accept",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [],
                "arg2": []
            }
        },
        "BiConsumer.hashCode": {
            "name": "hashCode",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "lambda_function": []
            }
        },
        "Consumer.accept": {
            "name": "accept",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Consumer.hashCode": {
            "name": "hashCode",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/function.py": {
        "Function.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "lambda_function": []
            }
        },
        "Function.apply": {
            "name": "apply",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/hash_shortener.py": {
        "shorten_hash": {
            "name": "shorten_hash",
            "location": 1,
            "return": [],
            "arguments": {
                "original_hash": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/iterator.py": {
        "JavaIterator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "python_iterator": []
            }
        },
        "JavaIterator.next": {
            "name": "next",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaIterator.hasNext": {
            "name": "hasNext",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/supplier.py": {
        "Supplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "lambda_function": []
            }
        },
        "Supplier.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/__init__.py": {},
    "keanu-master/keanu-python/keanu/plots/autocorrelation.py": {
        "__create_new_mpl": {
            "name": "__create_new_mpl",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "__plot_corr": {
            "name": "__plot_corr",
            "location": 17,
            "return": [],
            "arguments": {
                "ax": [],
                "acf_x": [],
                "nlags": []
            }
        },
        "__calc_max_lag": {
            "name": "__calc_max_lag",
            "location": 30,
            "return": [],
            "arguments": {
                "data_len": []
            }
        },
        "plot_acf": {
            "name": "plot_acf",
            "location": 35,
            "return": [],
            "arguments": {
                "data": [],
                "nlags": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/plots/traceplot.py": {
        "traceplot": {
            "name": "traceplot",
            "location": 12,
            "return": [],
            "arguments": {
                "trace": [],
                "labels": [],
                "ax": [],
                "x0": []
            }
        },
        "__integer_xaxis": {
            "name": "__integer_xaxis",
            "location": 40,
            "return": [],
            "arguments": {
                "ax": [],
                "x0": [],
                "n": []
            }
        },
        "__pause_for_crude_animation": {
            "name": "__pause_for_crude_animation",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/plots/__init__.py": {},
    "keanu-master/keanu-python/keanu/vertex/base.py": {
        "__cast_to": {
            "name": "__cast_to",
            "location": 370,
            "return": [],
            "arguments": {
                "arg": [],
                "cast_to_type": []
            }
        },
        "cast_tensor_arg_to_double": {
            "name": "cast_tensor_arg_to_double",
            "location": 381,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "cast_tensor_arg_to_integer": {
            "name": "cast_tensor_arg_to_integer",
            "location": 385,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "cast_tensor_arg_to_boolean": {
            "name": "cast_tensor_arg_to_boolean",
            "location": 389,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "is_floating_type": {
            "name": "is_floating_type",
            "location": 393,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "cast_to_double_vertex_if_integer_vertex": {
            "name": "cast_to_double_vertex_if_integer_vertex",
            "location": 400,
            "return": [],
            "arguments": {
                "vertex": []
            }
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "val_or_ctor": [],
                "label": []
            }
        },
        "Vertex.cast": {
            "name": "cast",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Vertex.__bool__": {
            "name": "__bool__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.observe": {
            "name": "observe",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Vertex.unobserve": {
            "name": "unobserve",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_value": {
            "name": "set_value",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Vertex.set_and_cascade": {
            "name": "set_and_cascade",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Vertex.set_label": {
            "name": "set_label",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Vertex.sample": {
            "name": "sample",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_value": {
            "name": "get_value",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_connected_graph": {
            "name": "iter_connected_graph",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_id": {
            "name": "get_id",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_label": {
            "name": "get_label",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_label_without_outer_namespace": {
            "name": "get_label_without_outer_namespace",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_parents": {
            "name": "iter_parents",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_children": {
            "name": "iter_children",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.is_observed": {
            "name": "is_observed",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.has_value": {
            "name": "has_value",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "ufunc": [],
                "method": [],
                "input0": [],
                "_": []
            }
        },
        "Vertex.__add__": {
            "name": "__add__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__radd__": {
            "name": "__radd__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__sub__": {
            "name": "__sub__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__rsub__": {
            "name": "__rsub__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__mul__": {
            "name": "__mul__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__rmul__": {
            "name": "__rmul__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__pow__": {
            "name": "__pow__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__rpow__": {
            "name": "__rpow__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__truediv__": {
            "name": "__truediv__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__floordiv__": {
            "name": "__floordiv__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__eq__": {
            "name": "__eq__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__ne__": {
            "name": "__ne__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__gt__": {
            "name": "__gt__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__ge__": {
            "name": "__ge__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__lt__": {
            "name": "__lt__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__le__": {
            "name": "__le__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__abs__": {
            "name": "__abs__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__round__": {
            "name": "__round__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "ndigits": []
            }
        },
        "Vertex.__floor__": {
            "name": "__floor__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__ceil__": {
            "name": "__ceil__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__parse_args": {
            "name": "__parse_args",
            "location": 221,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "Vertex.__parse_arg": {
            "name": "__parse_arg",
            "location": 225,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "Vertex._from_java_vertex": {
            "name": "_from_java_vertex",
            "location": 236,
            "return": [],
            "arguments": {
                "java_vertex": []
            }
        },
        "Vertex._to_generator": {
            "name": "_to_generator",
            "location": 251,
            "return": [],
            "arguments": {
                "java_vertices": []
            }
        },
        "Vertex._get_python_id": {
            "name": "_get_python_id",
            "location": 255,
            "return": [],
            "arguments": {
                "java_vertex": []
            }
        },
        "Double.cast": {
            "name": "cast",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Integer.cast": {
            "name": "cast",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Integer.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "ufunc": [],
                "method": [],
                "input0": [],
                "_": []
            }
        },
        "Integer.__op_based_on_other_type": {
            "name": "__op_based_on_other_type",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "op": [],
                "integer_op_ctr": []
            }
        },
        "Integer.__add__": {
            "name": "__add__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__radd__": {
            "name": "__radd__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__sub__": {
            "name": "__sub__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rsub__": {
            "name": "__rsub__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__mul__": {
            "name": "__mul__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rmul__": {
            "name": "__rmul__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__pow__": {
            "name": "__pow__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rpow__": {
            "name": "__rpow__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__truediv__": {
            "name": "__truediv__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__floordiv__": {
            "name": "__floordiv__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Boolean.cast": {
            "name": "cast",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/const.py": {
        "Const": {
            "name": "Const",
            "location": 8,
            "return": [],
            "arguments": {
                "t": [],
                "label": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/generated.py": {
        "cast_to_double_vertex": {
            "name": "cast_to_double_vertex",
            "location": 30,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_integer_vertex": {
            "name": "cast_to_integer_vertex",
            "location": 34,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_boolean_vertex": {
            "name": "cast_to_boolean_vertex",
            "location": 38,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_vertex": {
            "name": "cast_to_vertex",
            "location": 42,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "Broadcast": {
            "name": "Broadcast",
            "location": 189,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "to_shape": [],
                "label": []
            }
        },
        "DiagPart": {
            "name": "DiagPart",
            "location": 193,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Diag": {
            "name": "Diag",
            "location": 197,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "FillTriangular": {
            "name": "FillTriangular",
            "location": 201,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "fill_upper": [],
                "fill_lower": [],
                "label": []
            }
        },
        "Permute": {
            "name": "Permute",
            "location": 205,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "rearrange": [],
                "label": []
            }
        },
        "Reshape": {
            "name": "Reshape",
            "location": 209,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "proposed_shape": [],
                "label": []
            }
        },
        "Slice": {
            "name": "Slice",
            "location": 213,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "dimension": [],
                "index": [],
                "label": []
            }
        },
        "StridedSlice": {
            "name": "StridedSlice",
            "location": 224,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "start": [],
                "end": [],
                "stride": [],
                "ellipsis": [],
                "upper_bound_stop": [],
                "drop_dimension": [],
                "label": []
            }
        },
        "Take": {
            "name": "Take",
            "location": 228,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "index": [],
                "label": []
            }
        },
        "TriLower": {
            "name": "TriLower",
            "location": 232,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "k": [],
                "label": []
            }
        },
        "TriUpper": {
            "name": "TriUpper",
            "location": 236,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "k": [],
                "label": []
            }
        },
        "TrianglePart": {
            "name": "TrianglePart",
            "location": 240,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "upper_part": [],
                "label": []
            }
        },
        "Where": {
            "name": "Where",
            "location": 244,
            "return": [],
            "arguments": {
                "predicate": [],
                "thn": [],
                "els": [],
                "label": []
            }
        },
        "BooleanProxy": {
            "name": "BooleanProxy",
            "location": 248,
            "return": [],
            "arguments": {
                "shape": [],
                "label": []
            }
        },
        "CastNumberToBoolean": {
            "name": "CastNumberToBoolean",
            "location": 252,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "CastToBoolean": {
            "name": "CastToBoolean",
            "location": 256,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ConstantBoolean": {
            "name": "ConstantBoolean",
            "location": 260,
            "return": [],
            "arguments": {
                "constant": [],
                "label": []
            }
        },
        "AndBinary": {
            "name": "AndBinary",
            "location": 264,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "OrBinary": {
            "name": "OrBinary",
            "location": 268,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "XorBinary": {
            "name": "XorBinary",
            "location": 272,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "Equals": {
            "name": "Equals",
            "location": 276,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "GreaterThanOrEqual": {
            "name": "GreaterThanOrEqual",
            "location": 280,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "GreaterThan": {
            "name": "GreaterThan",
            "location": 284,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "LessThanOrEqual": {
            "name": "LessThanOrEqual",
            "location": 288,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "LessThan": {
            "name": "LessThan",
            "location": 292,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "NotEquals": {
            "name": "NotEquals",
            "location": 296,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "label": []
            }
        },
        "NumericalEquals": {
            "name": "NumericalEquals",
            "location": 300,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "epsilon": [],
                "label": []
            }
        },
        "BooleanConcatenation": {
            "name": "BooleanConcatenation",
            "location": 304,
            "return": [],
            "arguments": {
                "dimension": [],
                "input": [],
                "label": []
            }
        },
        "BooleanToDoubleMask": {
            "name": "BooleanToDoubleMask",
            "location": 308,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "BooleanToIntegerMask": {
            "name": "BooleanToIntegerMask",
            "location": 312,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "AllFalse": {
            "name": "AllFalse",
            "location": 316,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "AllTrue": {
            "name": "AllTrue",
            "location": 320,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "AnyFalse": {
            "name": "AnyFalse",
            "location": 324,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "AnyTrue": {
            "name": "AnyTrue",
            "location": 328,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "IsFinite": {
            "name": "IsFinite",
            "location": 332,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "IsInfinite": {
            "name": "IsInfinite",
            "location": 336,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "IsNaN": {
            "name": "IsNaN",
            "location": 340,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "IsNegativeInfinity": {
            "name": "IsNegativeInfinity",
            "location": 344,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "IsPositiveInfinity": {
            "name": "IsPositiveInfinity",
            "location": 348,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "NotBinary": {
            "name": "NotBinary",
            "location": 352,
            "return": [],
            "arguments": {
                "a": [],
                "label": []
            }
        },
        "NotNaN": {
            "name": "NotNaN",
            "location": 356,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Bernoulli": {
            "name": "Bernoulli",
            "location": 360,
            "return": [],
            "arguments": {
                "prob_true": [],
                "label": []
            }
        },
        "Print": {
            "name": "Print",
            "location": 370,
            "return": [],
            "arguments": {
                "parent": [],
                "message": [],
                "print_data": [],
                "label": []
            }
        },
        "CastNumberToInteger": {
            "name": "CastNumberToInteger",
            "location": 374,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ConstantInteger": {
            "name": "ConstantInteger",
            "location": 378,
            "return": [],
            "arguments": {
                "constant": [],
                "label": []
            }
        },
        "IntegerProxy": {
            "name": "IntegerProxy",
            "location": 382,
            "return": [],
            "arguments": {
                "shape": [],
                "label": []
            }
        },
        "IntegerConcatenation": {
            "name": "IntegerConcatenation",
            "location": 386,
            "return": [],
            "arguments": {
                "dimension": [],
                "input": [],
                "label": []
            }
        },
        "ArgMax": {
            "name": "ArgMax",
            "location": 390,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "axis": [],
                "label": []
            }
        },
        "ArgMin": {
            "name": "ArgMin",
            "location": 394,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "axis": [],
                "label": []
            }
        },
        "NaNArgMax": {
            "name": "NaNArgMax",
            "location": 398,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "axis": [],
                "label": []
            }
        },
        "NaNArgMin": {
            "name": "NaNArgMin",
            "location": 402,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "axis": [],
                "label": []
            }
        },
        "Binomial": {
            "name": "Binomial",
            "location": 406,
            "return": [],
            "arguments": {
                "p": [],
                "n": [],
                "label": []
            }
        },
        "Geometric": {
            "name": "Geometric",
            "location": 410,
            "return": [],
            "arguments": {
                "p": [],
                "label": []
            }
        },
        "Multinomial": {
            "name": "Multinomial",
            "location": 414,
            "return": [],
            "arguments": {
                "n": [],
                "p": [],
                "label": []
            }
        },
        "Poisson": {
            "name": "Poisson",
            "location": 418,
            "return": [],
            "arguments": {
                "mu": [],
                "label": []
            }
        },
        "UniformInt": {
            "name": "UniformInt",
            "location": 428,
            "return": [],
            "arguments": {
                "min": [],
                "max": [],
                "label": []
            }
        },
        "Mod": {
            "name": "Mod",
            "location": 432,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "CastNumberToDouble": {
            "name": "CastNumberToDouble",
            "location": 436,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ConstantDouble": {
            "name": "ConstantDouble",
            "location": 440,
            "return": [],
            "arguments": {
                "constant": [],
                "label": []
            }
        },
        "DoubleProxy": {
            "name": "DoubleProxy",
            "location": 444,
            "return": [],
            "arguments": {
                "shape": [],
                "label": []
            }
        },
        "Concatenation": {
            "name": "Concatenation",
            "location": 448,
            "return": [],
            "arguments": {
                "dimension": [],
                "operands": [],
                "label": []
            }
        },
        "Beta": {
            "name": "Beta",
            "location": 459,
            "return": [],
            "arguments": {
                "alpha": [],
                "beta": [],
                "label": []
            }
        },
        "Cauchy": {
            "name": "Cauchy",
            "location": 470,
            "return": [],
            "arguments": {
                "location": [],
                "scale": [],
                "label": []
            }
        },
        "ChiSquared": {
            "name": "ChiSquared",
            "location": 474,
            "return": [],
            "arguments": {
                "k": [],
                "label": []
            }
        },
        "Dirichlet": {
            "name": "Dirichlet",
            "location": 484,
            "return": [],
            "arguments": {
                "concentration": [],
                "label": []
            }
        },
        "Exponential": {
            "name": "Exponential",
            "location": 493,
            "return": [],
            "arguments": {
                "rate": [],
                "label": []
            }
        },
        "Gamma": {
            "name": "Gamma",
            "location": 502,
            "return": [],
            "arguments": {
                "theta": [],
                "k": [],
                "label": []
            }
        },
        "Gaussian": {
            "name": "Gaussian",
            "location": 512,
            "return": [],
            "arguments": {
                "mu": [],
                "sigma": [],
                "label": []
            }
        },
        "HalfCauchy": {
            "name": "HalfCauchy",
            "location": 516,
            "return": [],
            "arguments": {
                "scale": [],
                "label": []
            }
        },
        "HalfGaussian": {
            "name": "HalfGaussian",
            "location": 520,
            "return": [],
            "arguments": {
                "sigma": [],
                "label": []
            }
        },
        "InverseGamma": {
            "name": "InverseGamma",
            "location": 524,
            "return": [],
            "arguments": {
                "alpha": [],
                "beta": [],
                "label": []
            }
        },
        "KDE": {
            "name": "KDE",
            "location": 535,
            "return": [],
            "arguments": {
                "samples": [],
                "bandwidth": [],
                "label": []
            }
        },
        "Laplace": {
            "name": "Laplace",
            "location": 539,
            "return": [],
            "arguments": {
                "mu": [],
                "beta": [],
                "label": []
            }
        },
        "LogNormal": {
            "name": "LogNormal",
            "location": 550,
            "return": [],
            "arguments": {
                "mu": [],
                "sigma": [],
                "label": []
            }
        },
        "Logistic": {
            "name": "Logistic",
            "location": 554,
            "return": [],
            "arguments": {
                "mu": [],
                "s": [],
                "label": []
            }
        },
        "MultivariateGaussian": {
            "name": "MultivariateGaussian",
            "location": 558,
            "return": [],
            "arguments": {
                "mu": [],
                "covariance": [],
                "label": []
            }
        },
        "Pareto": {
            "name": "Pareto",
            "location": 572,
            "return": [],
            "arguments": {
                "location": [],
                "scale": [],
                "label": []
            }
        },
        "StudentT": {
            "name": "StudentT",
            "location": 576,
            "return": [],
            "arguments": {
                "v": [],
                "label": []
            }
        },
        "Triangular": {
            "name": "Triangular",
            "location": 580,
            "return": [],
            "arguments": {
                "x_min": [],
                "x_max": [],
                "c": [],
                "label": []
            }
        },
        "Uniform": {
            "name": "Uniform",
            "location": 591,
            "return": [],
            "arguments": {
                "x_min": [],
                "x_max": [],
                "label": []
            }
        },
        "ArcTan2": {
            "name": "ArcTan2",
            "location": 602,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "label": []
            }
        },
        "LogAddExp2": {
            "name": "LogAddExp2",
            "location": 612,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "LogAddExp": {
            "name": "LogAddExp",
            "location": 616,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "SafeLogTimes": {
            "name": "SafeLogTimes",
            "location": 620,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "label": []
            }
        },
        "ArcCos": {
            "name": "ArcCos",
            "location": 624,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ArcCosh": {
            "name": "ArcCosh",
            "location": 633,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ArcSin": {
            "name": "ArcSin",
            "location": 642,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ArcSinh": {
            "name": "ArcSinh",
            "location": 651,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ArcTan": {
            "name": "ArcTan",
            "location": 660,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ArcTanh": {
            "name": "ArcTanh",
            "location": 669,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Ceil": {
            "name": "Ceil",
            "location": 678,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "CholeskyDecomposition": {
            "name": "CholeskyDecomposition",
            "location": 688,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "CholeskyInverse": {
            "name": "CholeskyInverse",
            "location": 697,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Cos": {
            "name": "Cos",
            "location": 706,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Cosh": {
            "name": "Cosh",
            "location": 715,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Digamma": {
            "name": "Digamma",
            "location": 724,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Exp2": {
            "name": "Exp2",
            "location": 733,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "ExpM1": {
            "name": "ExpM1",
            "location": 742,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Exp": {
            "name": "Exp",
            "location": 751,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Floor": {
            "name": "Floor",
            "location": 760,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Log10": {
            "name": "Log10",
            "location": 770,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Log1p": {
            "name": "Log1p",
            "location": 779,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Log2": {
            "name": "Log2",
            "location": 788,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "LogGamma": {
            "name": "LogGamma",
            "location": 797,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Log": {
            "name": "Log",
            "location": 806,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "MatrixDeterminant": {
            "name": "MatrixDeterminant",
            "location": 815,
            "return": [],
            "arguments": {
                "vertex": [],
                "label": []
            }
        },
        "MatrixInverse": {
            "name": "MatrixInverse",
            "location": 819,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Mean": {
            "name": "Mean",
            "location": 823,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "over_dimensions": [],
                "label": []
            }
        },
        "ReplaceNaN": {
            "name": "ReplaceNaN",
            "location": 833,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "replace_with_value": [],
                "label": []
            }
        },
        "Round": {
            "name": "Round",
            "location": 837,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Sigmoid": {
            "name": "Sigmoid",
            "location": 847,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Sin": {
            "name": "Sin",
            "location": 857,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Sinh": {
            "name": "Sinh",
            "location": 866,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "StandardDeviation": {
            "name": "StandardDeviation",
            "location": 875,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Standardize": {
            "name": "Standardize",
            "location": 884,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Tan": {
            "name": "Tan",
            "location": 888,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Tanh": {
            "name": "Tanh",
            "location": 897,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Trigamma": {
            "name": "Trigamma",
            "location": 906,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Addition": {
            "name": "Addition",
            "location": 915,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "Difference": {
            "name": "Difference",
            "location": 925,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "Division": {
            "name": "Division",
            "location": 929,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "GreaterThanMask": {
            "name": "GreaterThanMask",
            "location": 939,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "GreaterThanOrEqualToMask": {
            "name": "GreaterThanOrEqualToMask",
            "location": 943,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "LessThanMask": {
            "name": "LessThanMask",
            "location": 947,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "LessThanOrEqualToMask": {
            "name": "LessThanOrEqualToMask",
            "location": 951,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "MatrixMultiplication": {
            "name": "MatrixMultiplication",
            "location": 955,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "transpose_left": [],
                "transpose_right": [],
                "label": []
            }
        },
        "Max": {
            "name": "Max",
            "location": 967,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "Min": {
            "name": "Min",
            "location": 977,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "Multiplication": {
            "name": "Multiplication",
            "location": 987,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "label": []
            }
        },
        "Power": {
            "name": "Power",
            "location": 997,
            "return": [],
            "arguments": {
                "base": [],
                "exponent": [],
                "label": []
            }
        },
        "TensorMultiplication": {
            "name": "TensorMultiplication",
            "location": 1007,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "dims_left": [],
                "dims_right": [],
                "label": []
            }
        },
        "SetWithMask": {
            "name": "SetWithMask",
            "location": 1021,
            "return": [],
            "arguments": {
                "operand": [],
                "mask": [],
                "set_value": [],
                "label": []
            }
        },
        "Abs": {
            "name": "Abs",
            "location": 1025,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "CumProd": {
            "name": "CumProd",
            "location": 1034,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "requested_dimension": [],
                "label": []
            }
        },
        "CumSum": {
            "name": "CumSum",
            "location": 1038,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "requested_dimension": [],
                "label": []
            }
        },
        "MaxUnary": {
            "name": "MaxUnary",
            "location": 1042,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "MinUnary": {
            "name": "MinUnary",
            "location": 1046,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Product": {
            "name": "Product",
            "location": 1050,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "over_dimensions": [],
                "label": []
            }
        },
        "Sign": {
            "name": "Sign",
            "location": 1054,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "label": []
            }
        },
        "Sum": {
            "name": "Sum",
            "location": 1063,
            "return": [],
            "arguments": {
                "input_vertex": [],
                "over_dimensions": [],
                "label": []
            }
        },
        "Assert": {
            "name": "Assert",
            "location": 1073,
            "return": [],
            "arguments": {
                "predicate": [],
                "error_message": [],
                "label": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/iff.py": {
        "If": {
            "name": "If",
            "location": 12,
            "return": [],
            "arguments": {
                "predicate": [],
                "thn": [],
                "els": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/label.py": {
        "_VertexLabel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_VertexLabel.get_name": {
            "name": "get_name",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_VertexLabel.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_VertexLabel.create_from_list": {
            "name": "create_from_list",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/vertex/lambda_model.py": {
        "LambdaModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "executor": [],
                "update_values": [],
                "label": []
            }
        },
        "LambdaModel.__execute": {
            "name": "__execute",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "vertices_unwrapped": []
            }
        },
        "LambdaModel.__update_value": {
            "name": "__update_value",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LambdaModel.__to_java_map": {
            "name": "__to_java_map",
            "location": 41,
            "return": [],
            "arguments": {
                "inputs": []
            }
        },
        "LambdaModel.__wrap": {
            "name": "__wrap",
            "location": 46,
            "return": [],
            "arguments": {
                "vertices": []
            }
        },
        "LambdaModel.__update_unwrapped_vertices": {
            "name": "__update_unwrapped_vertices",
            "location": 50,
            "return": [],
            "arguments": {
                "vertices_wrapped": [],
                "vertices_unwrapped": []
            }
        },
        "LambdaModel.get_double_model_output_vertex": {
            "name": "get_double_model_output_vertex",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/vertex_casting.py": {
        "do_vertex_cast": {
            "name": "do_vertex_cast",
            "location": 13,
            "return": [],
            "arguments": {
                "vertex_ctor": [],
                "value": []
            }
        },
        "do_inferred_vertex_cast": {
            "name": "do_inferred_vertex_cast",
            "location": 17,
            "return": [],
            "arguments": {
                "ctors": [],
                "value": []
            }
        },
        "cast_to_double_tensor": {
            "name": "cast_to_double_tensor",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "cast_to_integer_tensor": {
            "name": "cast_to_integer_tensor",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "cast_to_boolean_tensor": {
            "name": "cast_to_boolean_tensor",
            "location": 36,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "cast_to_double": {
            "name": "cast_to_double",
            "location": 40,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_integer": {
            "name": "cast_to_integer",
            "location": 44,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_boolean": {
            "name": "cast_to_boolean",
            "location": 48,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_long_array": {
            "name": "cast_to_long_array",
            "location": 52,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_int_array": {
            "name": "cast_to_int_array",
            "location": 56,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_boolean_array": {
            "name": "cast_to_boolean_array",
            "location": 60,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "cast_to_vertex_array": {
            "name": "cast_to_vertex_array",
            "location": 64,
            "return": [],
            "arguments": {
                "input": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/__init__.py": {},
    "keanu-master/keanu-python/nd4j/setup.py": {},
    "keanu-master/keanu-python/nd4j/nd4j/__init__.py": {
        "get_classpath": {
            "name": "get_classpath",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/nd4j/nd4j/__version__.py": {},
    "keanu-master/keanu-python/tests/conftest.py": {
        "make_tests_deterministic": {
            "name": "make_tests_deterministic",
            "location": 7,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_base.py": {
        "java_list_wrapper": {
            "name": "java_list_wrapper",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_you_can_call_a_java_method_on_the_unwrapped_object": {
            "name": "test_you_can_call_a_java_method_on_the_unwrapped_object",
            "location": 25,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "test_you_cannot_call_a_java_method_with_snake_case_on_the_unwrapped_object": {
            "name": "test_you_cannot_call_a_java_method_with_snake_case_on_the_unwrapped_object",
            "location": 29,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "test_you_cannot_call_a_java_method_with_snake_case_on_the_wrapped_object": {
            "name": "test_you_cannot_call_a_java_method_with_snake_case_on_the_wrapped_object",
            "location": 34,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "test_you_can_overload_a_java_method_in_python": {
            "name": "test_you_can_overload_a_java_method_in_python",
            "location": 39,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "test_you_cannot_call_a_java_method_that_hasnt_been_overloaded": {
            "name": "test_you_cannot_call_a_java_method_that_hasnt_been_overloaded",
            "location": 43,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "test_throws_if_not_unwrapped_and_passed_to_java_object": {
            "name": "test_throws_if_not_unwrapped_and_passed_to_java_object",
            "location": 48,
            "return": [],
            "arguments": {
                "java_list_wrapper": []
            }
        },
        "java_list_wrapper.JavaListWrapper.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "numbers": []
            }
        },
        "java_list_wrapper.JavaListWrapper.get": {
            "name": "get",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_cast.py": {
        "test_scalar_cast": {
            "name": "test_scalar_cast",
            "location": 18,
            "return": [],
            "arguments": {
                "value": [],
                "cast_fn": [],
                "expected_type": []
            }
        },
        "test_nonscalar_tensor_cast": {
            "name": "test_nonscalar_tensor_cast",
            "location": 40,
            "return": [],
            "arguments": {
                "value": [],
                "cast_fn": [],
                "expected_type": []
            }
        },
        "test_nonscalar_vertex_cast": {
            "name": "test_nonscalar_vertex_cast",
            "location": 61,
            "return": [],
            "arguments": {
                "value": [],
                "cast_fn": [],
                "expected_type": []
            }
        },
        "test_cant_pass_vertex_to_cast_tensor_arg": {
            "name": "test_cant_pass_vertex_to_cast_tensor_arg",
            "location": 68,
            "return": [],
            "arguments": {
                "cast_fn": [],
                "cast_to_type": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_coal_mining.py": {
        "test_coalmining": {
            "name": "test_coalmining",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_const.py": {
        "generic": {
            "name": "generic",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_const_takes_ndarray": {
            "name": "test_const_takes_ndarray",
            "location": 20,
            "return": [],
            "arguments": {
                "arr": [],
                "expected_java_class": []
            }
        },
        "test_const_takes_panda_series": {
            "name": "test_const_takes_panda_series",
            "location": 31,
            "return": [],
            "arguments": {
                "data": [],
                "expected_java_class": []
            }
        },
        "test_const_takes_panda_dataframe": {
            "name": "test_const_takes_panda_dataframe",
            "location": 50,
            "return": [],
            "arguments": {
                "data": [],
                "expected_java_class": []
            }
        },
        "test_const_takes_num": {
            "name": "test_const_takes_num",
            "location": 68,
            "return": [],
            "arguments": {
                "num": [],
                "expected_java_class": []
            }
        },
        "test_const_does_not_take_generic_ndarray": {
            "name": "test_const_does_not_take_generic_ndarray",
            "location": 75,
            "return": [],
            "arguments": {
                "generic": []
            }
        },
        "test_const_does_not_take_generic": {
            "name": "test_const_does_not_take_generic",
            "location": 81,
            "return": [],
            "arguments": {
                "generic": []
            }
        },
        "test_const_does_not_take_empty_ndarray": {
            "name": "test_const_does_not_take_empty_ndarray",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_const_takes_ndarray_of_rank_one": {
            "name": "test_const_takes_ndarray_of_rank_one",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_const_takes_label": {
            "name": "test_const_takes_label",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_const_takes_none_label": {
            "name": "test_const_takes_none_label",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "assert_java_class": {
            "name": "assert_java_class",
            "location": 116,
            "return": [],
            "arguments": {
                "java_object_wrapper": [],
                "java_class_str": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_context.py": {
        "test_the_context_is_a_singleton": {
            "name": "test_the_context_is_a_singleton",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_there_is_only_one_jvm_view": {
            "name": "test_there_is_only_one_jvm_view",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_you_can_convert_a_numpy_array_to_a_java_array": {
            "name": "test_you_can_convert_a_numpy_array_to_a_java_array",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_you_can_create_vertex_array_from_different_types": {
            "name": "test_you_can_create_vertex_array_from_different_types",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_descriptions.py": {
        "test_simple_if_vertex_description_created_correctly": {
            "name": "test_simple_if_vertex_description_created_correctly",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_simple_binary_op_description": {
            "name": "test_simple_binary_op_description",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_gradient_optimization.py": {
        "model": {
            "name": "model",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_gradient_op_bayes_net": {
            "name": "test_gradient_op_bayes_net",
            "location": 18,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_gradient_op_vertex": {
            "name": "test_gradient_op_vertex",
            "location": 24,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_gradient_op_throws_with_invalid_net_param": {
            "name": "test_gradient_op_throws_with_invalid_net_param",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_gradient_can_set_max_eval_builder_properties_for_conjugate_gradient": {
            "name": "test_gradient_can_set_max_eval_builder_properties_for_conjugate_gradient",
            "location": 34,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_thermometers_map_gradient_with_conjugate_gradient": {
            "name": "test_thermometers_map_gradient_with_conjugate_gradient",
            "location": 42,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_thermometers_map_gradient_with_adam": {
            "name": "test_thermometers_map_gradient_with_adam",
            "location": 46,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "thermometers_map_gradient": {
            "name": "thermometers_map_gradient",
            "location": 50,
            "return": [],
            "arguments": {
                "model": [],
                "algorithm": []
            }
        },
        "test_thermometers_likelihood_gradient_for_conjugate_gradient": {
            "name": "test_thermometers_likelihood_gradient_for_conjugate_gradient",
            "location": 60,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_thermometers_likelihood_gradient_for_adam": {
            "name": "test_thermometers_likelihood_gradient_for_adam",
            "location": 64,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "thermometers_max_likelihood_gradient": {
            "name": "thermometers_max_likelihood_gradient",
            "location": 68,
            "return": [],
            "arguments": {
                "model": [],
                "algorithm": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_if.py": {
        "test_you_can_create_a_double_valued_if": {
            "name": "test_you_can_create_a_double_valued_if",
            "location": 21,
            "return": [],
            "arguments": {
                "predicate": [],
                "data": []
            }
        },
        "test_you_can_create_an_integer_valued_if": {
            "name": "test_you_can_create_an_integer_valued_if",
            "location": 37,
            "return": [],
            "arguments": {
                "predicate": [],
                "data": []
            }
        },
        "test_you_can_create_a_boolean_valued_if": {
            "name": "test_you_can_create_a_boolean_valued_if",
            "location": 58,
            "return": [],
            "arguments": {
                "predicate": [],
                "data": []
            }
        },
        "test_if_thn_or_els_is_not_float_it_gets_coerced": {
            "name": "test_if_thn_or_els_is_not_float_it_gets_coerced",
            "location": 73,
            "return": [],
            "arguments": {
                "thn": [],
                "els": []
            }
        },
        "test_if_thn_or_els_is_not_int_it_gets_coerced": {
            "name": "test_if_thn_or_els_is_not_int_it_gets_coerced",
            "location": 84,
            "return": [],
            "arguments": {
                "thn": [],
                "els": []
            }
        },
        "test_if_predicate_is_not_bool_it_gets_coerced": {
            "name": "test_if_predicate_is_not_bool_it_gets_coerced",
            "location": 92,
            "return": [],
            "arguments": {
                "pred": []
            }
        },
        "test_you_get_a_useful_error_message_when_you_use_a_boolean_vertex_in_a_python_if_clause": {
            "name": "test_you_get_a_useful_error_message_when_you_use_a_boolean_vertex_in_a_python_if_clause",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_init.py": {
        "test_version_is_correctly_formatted": {
            "name": "test_version_is_correctly_formatted",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_iterator.py": {
        "test_it_tells_you_when_it_is_finished": {
            "name": "test_it_tells_you_when_it_is_finished",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_it_throws_if_you_pass_the_end": {
            "name": "test_it_throws_if_you_pass_the_end",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_an_empty_python_iterator_yields_an_empty_java_iterator": {
            "name": "test_an_empty_python_iterator_yields_an_empty_java_iterator",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_java_exception.py": {
        "test_you_can_get_info_from_a_java_exception": {
            "name": "test_you_can_get_info_from_a_java_exception",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_you_can_throw_a_java_exception": {
            "name": "test_you_can_throw_a_java_exception",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_its_repr_method_gives_you_the_stack_trace": {
            "name": "test_its_repr_method_gives_you_the_stack_trace",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_keanu_random.py": {
        "test_default_keanu_random": {
            "name": "test_default_keanu_random",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_seeded_keanu_random": {
            "name": "test_seeded_keanu_random",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_labels.py": {
        "test_you_can_create_a_label_with_a_name": {
            "name": "test_you_can_create_a_label_with_a_name",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_you_can_create_a_label_from_a_dot_separated_string": {
            "name": "test_you_can_create_a_label_from_a_dot_separated_string",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_there_is_a_helper_method_to_build_the_string_from_a_list": {
            "name": "test_there_is_a_helper_method_to_build_the_string_from_a_list",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_you_cannot_build_it_with_an_empty_list": {
            "name": "test_you_cannot_build_it_with_an_empty_list",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_the_repr_method_makes_it_clear_what_the_namespace_is": {
            "name": "test_the_repr_method_makes_it_clear_what_the_namespace_is",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_lambdas.py": {
        "plus_one": {
            "name": "plus_one",
            "location": 6,
            "return": [],
            "arguments": {
                "vertices": []
            }
        },
        "test_you_can_create_a_lambda_model_vertex": {
            "name": "test_you_can_create_a_lambda_model_vertex",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_you_can_create_a_process_model_vertex": {
            "name": "test_you_can_create_a_process_model_vertex",
            "location": 30,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "evaluate_and_check_for_increment": {
            "name": "evaluate_and_check_for_increment",
            "location": 38,
            "return": [],
            "arguments": {
                "model": [],
                "v_in": []
            }
        },
        "BlackBoxProcess.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "dir": []
            }
        },
        "BlackBoxProcess.run": {
            "name": "run",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "vertices": []
            }
        },
        "BlackBoxProcess.extract_values": {
            "name": "extract_values",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_lorenz.py": {
        "test_lorenz": {
            "name": "test_lorenz",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "add_time": {
            "name": "add_time",
            "location": 54,
            "return": [],
            "arguments": {
                "current": []
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 64,
            "return": [],
            "arguments": {
                "initial": []
            }
        },
        "apply_observations": {
            "name": "apply_observations",
            "location": 72,
            "return": [],
            "arguments": {
                "graph_time_steps": [],
                "window": [],
                "observed": []
            }
        },
        "get_time_slice_values": {
            "name": "get_time_slice_values",
            "location": 81,
            "return": [],
            "arguments": {
                "time_steps": [],
                "time": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_model.py": {
        "test_to_bayes_net": {
            "name": "test_to_bayes_net",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_to_bayes_net_excludes_non_vertices": {
            "name": "test_to_bayes_net_excludes_non_vertices",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_net.py": {
        "test_construct_bayes_net": {
            "name": "test_construct_bayes_net",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_can_get_vertices_from_bayes_net": {
            "name": "test_can_get_vertices_from_bayes_net",
            "location": 31,
            "return": [],
            "arguments": {
                "get_method": [],
                "latent": [],
                "observed": [],
                "continuous": [],
                "discrete": [],
                "deterministic": []
            }
        },
        "test_probe_for_non_zero_probability_from_bayes_net": {
            "name": "test_probe_for_non_zero_probability_from_bayes_net",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "check_loaded_net": {
            "name": "check_loaded_net",
            "location": 76,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "check_dot_file": {
            "name": "check_dot_file",
            "location": 83,
            "return": [],
            "arguments": {
                "dot_file_name": []
            }
        },
        "test_can_save_and_load": {
            "name": "test_can_save_and_load",
            "location": 88,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_can_dot_save_list_of_vertices": {
            "name": "test_can_dot_save_list_of_vertices",
            "location": 113,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_dot_save_only_takes_bayes_net_or_list": {
            "name": "test_dot_save_only_takes_bayes_net_or_list",
            "location": 125,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_get_vertex_by_label": {
            "name": "test_get_vertex_by_label",
            "location": 131,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_non_gradient_optimization.py": {
        "model": {
            "name": "model",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_non_gradient_op_bayes_net": {
            "name": "test_non_gradient_op_bayes_net",
            "location": 20,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_non_gradient_op_vertex": {
            "name": "test_non_gradient_op_vertex",
            "location": 26,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_non_gradient_op_throws_with_invalid_net_param": {
            "name": "test_non_gradient_op_throws_with_invalid_net_param",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_non_gradient_can_set_max_eval_builder_properties": {
            "name": "test_non_gradient_can_set_max_eval_builder_properties",
            "location": 36,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_non_gradient_can_set_bounds_range_builder_properties": {
            "name": "test_non_gradient_can_set_bounds_range_builder_properties",
            "location": 44,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_map_non_gradient": {
            "name": "test_map_non_gradient",
            "location": 52,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_max_likelihood_non_gradient": {
            "name": "test_max_likelihood_non_gradient",
            "location": 61,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_proposal_distributions.py": {
        "net": {
            "name": "net",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_you_can_create_a_prior_proposal_distribution": {
            "name": "test_you_can_create_a_prior_proposal_distribution",
            "location": 19,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_you_can_create_a_gaussian_proposal_distribution": {
            "name": "test_you_can_create_a_gaussian_proposal_distribution",
            "location": 24,
            "return": [],
            "arguments": {
                "sigma": [],
                "net": []
            }
        },
        "test_it_throws_if_you_specify_gaussian_without_a_value_for_sigma": {
            "name": "test_it_throws_if_you_specify_gaussian_without_a_value_for_sigma",
            "location": 28,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_it_throws_if_you_specify_gaussian_with_not_enough_sigmas_for_each_latent": {
            "name": "test_it_throws_if_you_specify_gaussian_with_not_enough_sigmas_for_each_latent",
            "location": 34,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_it_throws_if_you_specify_gaussian_without_values_for_latents": {
            "name": "test_it_throws_if_you_specify_gaussian_without_values_for_latents",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_it_throws_if_you_specify_gaussian_with_empty_list_of_latents": {
            "name": "test_it_throws_if_you_specify_gaussian_with_empty_list_of_latents",
            "location": 45,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_it_throws_if_you_specify_sigma_but_the_type_isnt_gaussian": {
            "name": "test_it_throws_if_you_specify_sigma_but_the_type_isnt_gaussian",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_it_throws_if_it_doesnt_recognise_the_type": {
            "name": "test_it_throws_if_it_doesnt_recognise_the_type",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_sampling.py": {
        "net": {
            "name": "net",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "tensor_net": {
            "name": "tensor_net",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_sampling_returns_dict_of_list_of_ndarrays_for_vertices_in_sample_from": {
            "name": "test_sampling_returns_dict_of_list_of_ndarrays_for_vertices_in_sample_from",
            "location": 39,
            "return": [],
            "arguments": {
                "algo": [],
                "net": []
            }
        },
        "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_tensor_in_sample_from": {
            "name": "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_tensor_in_sample_from",
            "location": 52,
            "return": [],
            "arguments": {
                "algo": [],
                "tensor_net": []
            }
        },
        "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_mixed_net": {
            "name": "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_mixed_net",
            "location": 64,
            "return": [],
            "arguments": {
                "algo": []
            }
        },
        "test_sample_dict_can_be_loaded_in_to_dataframe": {
            "name": "test_sample_dict_can_be_loaded_in_to_dataframe",
            "location": 109,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_multi_indexed_sample_dict_can_be_loaded_in_to_dataframe": {
            "name": "test_multi_indexed_sample_dict_can_be_loaded_in_to_dataframe",
            "location": 124,
            "return": [],
            "arguments": {
                "tensor_net": []
            }
        },
        "test_dropping_samples": {
            "name": "test_dropping_samples",
            "location": 140,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_down_sample_interval": {
            "name": "test_down_sample_interval",
            "location": 150,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_sample_with_plot": {
            "name": "test_sample_with_plot",
            "location": 161,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_specify_a_gaussian_proposal_distribution": {
            "name": "test_can_specify_a_gaussian_proposal_distribution",
            "location": 173,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_specify_a_gaussian_proposal_distribution_with_multiple_sigmas": {
            "name": "test_can_specify_a_gaussian_proposal_distribution_with_multiple_sigmas",
            "location": 179,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_iter_through_samples": {
            "name": "test_can_iter_through_samples",
            "location": 188,
            "return": [],
            "arguments": {
                "algo": [],
                "net": []
            }
        },
        "test_can_iter_through_tensor_samples": {
            "name": "test_can_iter_through_tensor_samples",
            "location": 202,
            "return": [],
            "arguments": {
                "algo": [],
                "tensor_net": []
            }
        },
        "test_iter_returns_same_result_as_sample": {
            "name": "test_iter_returns_same_result_as_sample",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_iter_with_live_plot": {
            "name": "test_iter_with_live_plot",
            "location": 239,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_get_acceptance_rates": {
            "name": "test_can_get_acceptance_rates",
            "location": 253,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_track_acceptance_rate_when_iterating": {
            "name": "test_can_track_acceptance_rate_when_iterating",
            "location": 266,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_can_specify_nuts_params": {
            "name": "test_can_specify_nuts_params",
            "location": 281,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_sample_throws_if_vertices_in_sample_from_are_missing_labels": {
            "name": "test_sample_throws_if_vertices_in_sample_from_are_missing_labels",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_generate_samples_throws_if_vertices_in_sample_from_are_missing_labels": {
            "name": "test_generate_samples_throws_if_vertices_in_sample_from_are_missing_labels",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "set_starting_state": {
            "name": "set_starting_state",
            "location": 315,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "reorder_subplots": {
            "name": "reorder_subplots",
            "location": 322,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "__assert_valid_samples": {
            "name": "__assert_valid_samples",
            "location": 333,
            "return": [],
            "arguments": {
                "draws": [],
                "samples": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_sequence.py": {
        "test_you_can_iterate_over_the_sequence": {
            "name": "test_you_can_iterate_over_the_sequence",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_with_fixed_count": {
            "name": "test_you_can_build_a_sequence_with_fixed_count",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_from_data": {
            "name": "test_you_can_build_a_sequence_from_data",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_you_must_pass_count_or_data_generator": {
            "name": "test_you_must_pass_count_or_data_generator",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_you_cannot_pass_both_count_and_data_generator": {
            "name": "test_you_cannot_pass_both_count_and_data_generator",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_you_can_build_a_time_series": {
            "name": "test_you_can_build_a_time_series",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "__check_sequence_output_links_to_input": {
            "name": "__check_sequence_output_links_to_input",
            "location": 105,
            "return": [],
            "arguments": {
                "item": [],
                "previous_output_label": [],
                "current_input_label": []
            }
        },
        "__check_output_equals": {
            "name": "__check_output_equals",
            "location": 120,
            "return": [],
            "arguments": {
                "sequence": [],
                "label": [],
                "desired_output": []
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences": {
            "name": "test_you_can_use_multiple_factories_to_build_sequences",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_last_item_retrieved_correctly": {
            "name": "test_last_item_retrieved_correctly",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_you_can_name_a_sequence": {
            "name": "test_you_can_name_a_sequence",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "test_you_can_get_a_bayes_net_from_a_sequence": {
            "name": "test_you_can_get_a_bayes_net_from_a_sequence",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "test_proxy_vertices_are_correctly_typed": {
            "name": "test_proxy_vertices_are_correctly_typed",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_with_fixed_count.create_vertex": {
            "name": "create_vertex",
            "location": 23,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "test_you_can_build_a_sequence_from_data.create_vertices": {
            "name": "create_vertices",
            "location": 40,
            "return": [],
            "arguments": {
                "item": [],
                "point": []
            }
        },
        "test_you_can_build_a_time_series.create_time_step": {
            "name": "create_time_step",
            "location": 79,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences.factory1": {
            "name": "factory1",
            "location": 139,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences.factory2": {
            "name": "factory2",
            "location": 151,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_last_item_retrieved_correctly.factory": {
            "name": "factory",
            "location": 195,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_name_a_sequence.factory": {
            "name": "factory",
            "location": 219,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_get_a_bayes_net_from_a_sequence.factory": {
            "name": "factory",
            "location": 248,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_proxy_vertices_are_correctly_typed.factory": {
            "name": "factory",
            "location": 274,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_shape_validation.py": {
        "test_doesnt_throw_on_valid_index": {
            "name": "test_doesnt_throw_on_valid_index",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_throws_on_index_longer_than_shape": {
            "name": "test_throws_on_index_longer_than_shape",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_throws_on_index_shorter_than_shape": {
            "name": "test_throws_on_index_shorter_than_shape",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_throws_on_index_out_of_bounds": {
            "name": "test_throws_on_index_out_of_bounds",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_doesnt_throw_on_matching_shapes": {
            "name": "test_doesnt_throw_on_matching_shapes",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_throws_on_non_mathcing_shapes": {
            "name": "test_throws_on_non_mathcing_shapes",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_throws_on_empty_list_of_shapes": {
            "name": "test_throws_on_empty_list_of_shapes",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_stats.py": {
        "test_can_get_correct_autocorrelation": {
            "name": "test_can_get_correct_autocorrelation",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_autocorr_returns_ndarray_of_correct_dtype": {
            "name": "test_autocorr_returns_ndarray_of_correct_dtype",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_cant_get_autocorrelation_of_np_bools": {
            "name": "test_cant_get_autocorrelation_of_np_bools",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_cant_get_autocorrelation_of_np_ints": {
            "name": "test_cant_get_autocorrelation_of_np_ints",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_autocorrelation_same_for_streaming_as_batch": {
            "name": "test_autocorrelation_same_for_streaming_as_batch",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "set_starting_state": {
            "name": "set_starting_state",
            "location": 65,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_tensor.py": {
        "generic": {
            "name": "generic",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_num_passed_to_Tensor_creates_scalar_tensor": {
            "name": "test_num_passed_to_Tensor_creates_scalar_tensor",
            "location": 19,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "test_dataframe_passed_to_Tensor_creates_tensor": {
            "name": "test_dataframe_passed_to_Tensor_creates_tensor",
            "location": 26,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_series_passed_to_Tensor_creates_tensor": {
            "name": "test_series_passed_to_Tensor_creates_tensor",
            "location": 37,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_cannot_pass_generic_to_Tensor": {
            "name": "test_cannot_pass_generic_to_Tensor",
            "location": 51,
            "return": [],
            "arguments": {
                "generic": []
            }
        },
        "test_ndarray_passed_to_Tensor_creates_nonscalar_tensor": {
            "name": "test_ndarray_passed_to_Tensor_creates_nonscalar_tensor",
            "location": 59,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "test_cannot_pass_generic_ndarray_to_Tensor": {
            "name": "test_cannot_pass_generic_ndarray_to_Tensor",
            "location": 66,
            "return": [],
            "arguments": {
                "generic": []
            }
        },
        "test_can_pass_empty_ndarray_to_Tensor": {
            "name": "test_can_pass_empty_ndarray_to_Tensor",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_convert_java_tensor_to_ndarray": {
            "name": "test_convert_java_tensor_to_ndarray",
            "location": 77,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_you_can_apply_a_function_to_a_tensor": {
            "name": "test_you_can_apply_a_function_to_a_tensor",
            "location": 89,
            "return": [],
            "arguments": {
                "value": [],
                "expected_result": []
            }
        },
        "test_you_can_create_tensors": {
            "name": "test_you_can_create_tensors",
            "location": 97,
            "return": [],
            "arguments": {
                "dtype": []
            }
        },
        "test_you_can_create_boolean_tensor": {
            "name": "test_you_can_create_boolean_tensor",
            "location": 106,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_fails_when_long_is_too_long": {
            "name": "test_fails_when_long_is_too_long",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_traceplot.py": {
        "trace": {
            "name": "trace",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_traceplot_returns_axesplot_with_correct_data": {
            "name": "test_traceplot_returns_axesplot_with_correct_data",
            "location": 15,
            "return": [],
            "arguments": {
                "trace": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_vertex.py": {
        "jvm_view": {
            "name": "jvm_view",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "assert_vertex_value_equals_scalar": {
            "name": "assert_vertex_value_equals_scalar",
            "location": 23,
            "return": [],
            "arguments": {
                "vertex": [],
                "expected_type": [],
                "scalar": []
            }
        },
        "assert_vertex_value_equals_ndarray": {
            "name": "assert_vertex_value_equals_ndarray",
            "location": 31,
            "return": [],
            "arguments": {
                "vertex": [],
                "expected_type": [],
                "ndarray": []
            }
        },
        "assert_vertex_value_equals_pandas": {
            "name": "assert_vertex_value_equals_pandas",
            "location": 38,
            "return": [],
            "arguments": {
                "vertex": [],
                "expected_type": [],
                "pandas": []
            }
        },
        "test_can_pass_scalar_to_vertex": {
            "name": "test_can_pass_scalar_to_vertex",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_ndarray_to_vertex": {
            "name": "test_can_pass_ndarray_to_vertex",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_pandas_dataframe_to_vertex": {
            "name": "test_can_pass_pandas_dataframe_to_vertex",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_pandas_series_to_vertex": {
            "name": "test_can_pass_pandas_series_to_vertex",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_vertex_to_vertex": {
            "name": "test_can_pass_vertex_to_vertex",
            "location": 75,
            "return": [],
            "arguments": {
                "jvm_view": []
            }
        },
        "test_can_pass_array_to_vertex": {
            "name": "test_can_pass_array_to_vertex",
            "location": 85,
            "return": [],
            "arguments": {
                "jvm_view": []
            }
        },
        "test_cannot_pass_generic_to_vertex": {
            "name": "test_cannot_pass_generic_to_vertex",
            "location": 92,
            "return": [],
            "arguments": {
                "jvm_view": []
            }
        },
        "test_int_vertex_value_is_a_numpy_array": {
            "name": "test_int_vertex_value_is_a_numpy_array",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_float_vertex_value_is_a_numpy_array": {
            "name": "test_float_vertex_value_is_a_numpy_array",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_boolean_vertex_value_is_a_numpy_array": {
            "name": "test_boolean_vertex_value_is_a_numpy_array",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_scalar_vertex_value_is_a_numpy_array": {
            "name": "test_scalar_vertex_value_is_a_numpy_array",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_vertex_sample_is_a_numpy_array": {
            "name": "test_vertex_sample_is_a_numpy_array",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_get_connected_graph": {
            "name": "test_get_connected_graph",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_id_str_of_downstream_vertex_is_higher_than_upstream": {
            "name": "test_id_str_of_downstream_vertex_is_higher_than_upstream",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_construct_vertex_with_java_vertex": {
            "name": "test_construct_vertex_with_java_vertex",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "test_java_collections_to_generator": {
            "name": "test_java_collections_to_generator",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_get_vertex_id": {
            "name": "test_get_vertex_id",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "test_ids_are_reset": {
            "name": "test_ids_are_reset",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_you_can_set_value": {
            "name": "test_you_can_set_value",
            "location": 224,
            "return": [],
            "arguments": {
                "vertex": [],
                "expected_type": [],
                "value": [],
                "assert_vertex_value_equals": []
            }
        },
        "test_you_can_set_scalar_value": {
            "name": "test_you_can_set_scalar_value",
            "location": 232,
            "return": [],
            "arguments": {
                "vertex": [],
                "expected_type": [],
                "value": []
            }
        },
        "test_you_can_set_and_cascade": {
            "name": "test_you_can_set_and_cascade",
            "location": 257,
            "return": [],
            "arguments": {
                "ctor": [],
                "args": [],
                "expected_type": [],
                "value": [],
                "assert_vertex_value_equals": []
            }
        },
        "test_you_can_set_and_cascade_scalar": {
            "name": "test_you_can_set_and_cascade_scalar",
            "location": 289,
            "return": [],
            "arguments": {
                "ctor": [],
                "args": [],
                "expected_type": [],
                "value": []
            }
        },
        "test_you_can_observe": {
            "name": "test_you_can_observe",
            "location": 313,
            "return": [],
            "arguments": {
                "ctor": [],
                "args": [],
                "expected_type": [],
                "value": [],
                "assert_vertex_value_equals": []
            }
        },
        "test_unobserve": {
            "name": "test_unobserve",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "test_you_can_observe_scalar": {
            "name": "test_you_can_observe_scalar",
            "location": 335,
            "return": [],
            "arguments": {
                "ctor": [],
                "args": [],
                "expected_type": [],
                "value": []
            }
        },
        "test_pass_label_as_an_optional_param": {
            "name": "test_pass_label_as_an_optional_param",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_none_label": {
            "name": "test_can_pass_none_label",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "test_can_pass_namespaced_label": {
            "name": "test_can_pass_namespaced_label",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_set_label": {
            "name": "test_set_label",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_cannot_set_none_label": {
            "name": "test_cannot_set_none_label",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_label_is_required_param_for_proxy_vertices": {
            "name": "test_label_is_required_param_for_proxy_vertices",
            "location": 369,
            "return": [],
            "arguments": {}
        },
        "test_proxy_vertex_takes_string_as_required_param": {
            "name": "test_proxy_vertex_takes_string_as_required_param",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "test_java_vertex_to_python_vertex_persists_label": {
            "name": "test_java_vertex_to_python_vertex_persists_label",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_can_get_parents_and_children": {
            "name": "test_can_get_parents_and_children",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_can_get_parents_and_children.labels_match": {
            "name": "labels_match",
            "location": 389,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_vertex_operations.py": {
        "test_can_do_equal_to": {
            "name": "test_can_do_equal_to",
            "location": 26,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_not_equal_to": {
            "name": "test_can_do_not_equal_to",
            "location": 44,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_greater_than": {
            "name": "test_can_do_greater_than",
            "location": 60,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_less_than": {
            "name": "test_can_do_less_than",
            "location": 76,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_greater_than_or_equal_to": {
            "name": "test_can_do_greater_than_or_equal_to",
            "location": 92,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_greater_than_or_equal_to_with_vertex_on_rhs": {
            "name": "test_can_do_greater_than_or_equal_to_with_vertex_on_rhs",
            "location": 105,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_less_than_or_equal_to": {
            "name": "test_can_do_less_than_or_equal_to",
            "location": 119,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_less_than_or_equal_to_with_vertex_on_rhs": {
            "name": "test_can_do_less_than_or_equal_to_with_vertex_on_rhs",
            "location": 132,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "infer_result_type": {
            "name": "infer_result_type",
            "location": 147,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": []
            }
        },
        "result_should_be_vertex": {
            "name": "result_should_be_vertex",
            "location": 154,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": []
            }
        },
        "assert_is_correct_vertex_type_and_expected_value": {
            "name": "assert_is_correct_vertex_type_and_expected_value",
            "location": 161,
            "return": [],
            "arguments": {
                "lhs": [],
                "rhs": [],
                "result": [],
                "expected_result": []
            }
        },
        "test_can_do_addition": {
            "name": "test_can_do_addition",
            "location": 179,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_subtraction": {
            "name": "test_can_do_subtraction",
            "location": 202,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_multiplication": {
            "name": "test_can_do_multiplication",
            "location": 225,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_division": {
            "name": "test_can_do_division",
            "location": 248,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_integer_division": {
            "name": "test_can_do_integer_division",
            "location": 275,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_pow": {
            "name": "test_can_do_pow",
            "location": 295,
            "return": [],
            "arguments": {
                "lhs_constructor": [],
                "rhs_constructor": [],
                "lhs": [],
                "rhs": [],
                "expected_result": []
            }
        },
        "test_can_do_compound_operations": {
            "name": "test_can_do_compound_operations",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_can_do_abs": {
            "name": "test_can_do_abs",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_can_do_round": {
            "name": "test_can_do_round",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "test_rounding_is_only_supported_to_zero_digits": {
            "name": "test_rounding_is_only_supported_to_zero_digits",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_can_do_floor": {
            "name": "test_can_do_floor",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_can_do_ceil": {
            "name": "test_can_do_ceil",
            "location": 358,
            "return": [],
            "arguments": {}
        }
    }
}
{
    "kinematic-synthesis-master/setup.py": {},
    "kinematic-synthesis-master/__init__.py": {},
    "kinematic-synthesis-master/mechsynth/context.py": {
        "_validate_lang": {
            "name": "_validate_lang",
            "location": 53,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "lang": [
                    "FrozenSet[type]"
                ]
            }
        },
        "term_algebra": {
            "name": "term_algebra",
            "location": 745,
            "return": [],
            "arguments": {
                "lang": []
            }
        },
        "ID.__hash__": {
            "name": "__hash__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.is_equal_to": {
            "name": "is_equal_to",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ID.stored_type": {
            "name": "stored_type",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.parent_context": {
            "name": "parent_context",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.name": {
            "name": "name",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.is_relevant": {
            "name": "is_relevant",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.set_relevant": {
            "name": "set_relevant",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "ID.short_name": {
            "name": "short_name",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.long_name": {
            "name": "long_name",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.other_names": {
            "name": "other_names",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.add_name": {
            "name": "add_name",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "is_rel": []
            }
        },
        "ID.uniq_name": {
            "name": "uniq_name",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.assign_statement": {
            "name": "assign_statement",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.val": {
            "name": "val",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.uuid": {
            "name": "uuid",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ID.add_provenance": {
            "name": "add_provenance",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "ID.add_provenances": {
            "name": "add_provenances",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "ID.__getitem__": {
            "name": "__getitem__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ID.__delitem__": {
            "name": "__delitem__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ID.__contains__": {
            "name": "__contains__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ID.__setitem__": {
            "name": "__setitem__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "Context.__eq__": {
            "name": "__eq__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Context.__hash__": {
            "name": "__hash__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.in_language": {
            "name": "in_language",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Context.insert_fresh": {
            "name": "insert_fresh",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "name": [],
                "provenance": []
            }
        },
        "Context.insert": {
            "name": "insert",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "name": [],
                "provenance": []
            }
        },
        "Context.dependency_map": {
            "name": "dependency_map",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.topo": {
            "name": "topo",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.topolist": {
            "name": "topolist",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.to_graphviz": {
            "name": "to_graphviz",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.purge_key": {
            "name": "purge_key",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Context.purge_keys": {
            "name": "purge_keys",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Context.run_algebra": {
            "name": "run_algebra",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "alg": []
            }
        },
        "_Term_Algebra._run": {
            "name": "_run",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "_Term_Algebra._init_algebra": {
            "name": "_init_algebra",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_Term_Algebra._init_pass": {
            "name": "_init_pass",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_Term_Algebra._end_pass": {
            "name": "_end_pass",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_Term_Algebra._end_algebra": {
            "name": "_end_algebra",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "term_algebra._decorate": {
            "name": "_decorate",
            "location": 779,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ID.__repr__.flat_str": {
            "name": "flat_str",
            "location": 95,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "Context.insert_fresh.verify_ident": {
            "name": "verify_ident",
            "location": 420,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "Context.insert.validate_elems": {
            "name": "validate_elems",
            "location": 512,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "term_algebra._decorate._run_d": {
            "name": "_run_d",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "term_algebra._decorate._new": {
            "name": "_new",
            "location": 818,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Context.insert_fresh.collect_short_names": {
            "name": "collect_short_names",
            "location": 456,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/errors.py": {},
    "kinematic-synthesis-master/mechsynth/symbolic.py": {},
    "kinematic-synthesis-master/mechsynth/term.py": {
        "term": {
            "name": "term",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "map_accum": {
            "name": "map_accum",
            "location": 181,
            "return": [],
            "arguments": {
                "f": [],
                "init": [],
                "v": []
            }
        },
        "tfold": {
            "name": "tfold",
            "location": 208,
            "return": [],
            "arguments": {
                "f": [],
                "init": [],
                "v": []
            }
        },
        "tlen": {
            "name": "tlen",
            "location": 227,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "tlist": {
            "name": "tlist",
            "location": 236,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "tzip": {
            "name": "tzip",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "tzipwith": {
            "name": "tzipwith",
            "location": 252,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "tmap": {
            "name": "tmap",
            "location": 256,
            "return": [],
            "arguments": {
                "f": [],
                "a": []
            }
        },
        "Term.__tmap__": {
            "name": "__tmap__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "Term.__tzip__": {
            "name": "__tzip__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "Term.__attrs__": {
            "name": "__attrs__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "term.__attrs__": {
            "name": "__attrs__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "term.__tmap__": {
            "name": "__tmap__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "term.__tzip__": {
            "name": "__tzip__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "map_accum.helper": {
            "name": "helper",
            "location": 196,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "tfold.helper": {
            "name": "helper",
            "location": 219,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "tlen.cnt": {
            "name": "cnt",
            "location": 231,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "tlist.cns": {
            "name": "cns",
            "location": 241,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/util.py": {
        "hygienic": {
            "name": "hygienic",
            "location": 10,
            "return": [],
            "arguments": {
                "decorator": []
            }
        },
        "hygienic.new_decorator": {
            "name": "new_decorator",
            "location": 16,
            "return": [],
            "arguments": {
                "original": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/__init__.py": {},
    "kinematic-synthesis-master/mechsynth/algebra/dreal.py": {
        "DRealAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "DRealAlg._init_pass": {
            "name": "_init_pass",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "DRealAlg._end_pass": {
            "name": "_end_pass",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "DRealAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "DRealAlg._run": {
            "name": "_run",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_constant": {
            "name": "run_constant",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_param": {
            "name": "run_param",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_control": {
            "name": "run_control",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_ifthenelse": {
            "name": "run_ifthenelse",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_eq": {
            "name": "run_eq",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_greaterthan": {
            "name": "run_greaterthan",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_greaterthaneq": {
            "name": "run_greaterthaneq",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_lessthan": {
            "name": "run_lessthan",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_lessthaneq": {
            "name": "run_lessthaneq",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_add": {
            "name": "run_add",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_mul": {
            "name": "run_mul",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_and": {
            "name": "run_and",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_or": {
            "name": "run_or",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_sin": {
            "name": "run_sin",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_cos": {
            "name": "run_cos",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "DRealAlg.run_tan": {
            "name": "run_tan",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/optimize.py": {
        "dprint": {
            "name": "dprint",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "model_stats": {
            "name": "model_stats",
            "location": 26,
            "return": [
                "Dict[(str, Union[(int, _T1)])]"
            ],
            "arguments": {
                "model": [],
                "pass_name": [
                    "_T1"
                ]
            }
        },
        "print_stats": {
            "name": "print_stats",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "stats": []
            }
        },
        "OptimizeAlg.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "counter": [],
                "stats": [],
                "num_steps": []
            }
        },
        "OptimizeAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "OptimizeAlg._append_stats": {
            "name": "_append_stats",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": [],
                "stage": []
            }
        },
        "OptimizeAlg._init_pass": {
            "name": "_init_pass",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "OptimizeAlg._end_pass": {
            "name": "_end_pass",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "OptimizeAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "OptimizeAlg._run": {
            "name": "_run",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/simplify.py": {
        "dprint": {
            "name": "dprint",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EqElimAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "EqElimAlg._init_pass": {
            "name": "_init_pass",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "EqElimAlg._end_pass": {
            "name": "_end_pass",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "EqElimAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "EqElimAlg._run": {
            "name": "_run",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "ConstPropAlg._init_pass": {
            "name": "_init_pass",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "ConstPropAlg._end_pass": {
            "name": "_end_pass",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "ConstPropAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "ConstPropAlg.set_next": {
            "name": "set_next",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg._run": {
            "name": "_run",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_negate": {
            "name": "run_negate",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_mag": {
            "name": "run_mag",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_eq": {
            "name": "run_eq",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_xor": {
            "name": "run_xor",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_not": {
            "name": "run_not",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_lessthan": {
            "name": "run_lessthan",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_lessthaneq": {
            "name": "run_lessthaneq",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_greaterthan": {
            "name": "run_greaterthan",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_greaterthaneq": {
            "name": "run_greaterthaneq",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_sin": {
            "name": "run_sin",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_cos": {
            "name": "run_cos",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_tan": {
            "name": "run_tan",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_asin": {
            "name": "run_asin",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_acos": {
            "name": "run_acos",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_atan": {
            "name": "run_atan",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_atan2": {
            "name": "run_atan2",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_ifthenelse": {
            "name": "run_ifthenelse",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_and": {
            "name": "run_and",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_or": {
            "name": "run_or",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_implies": {
            "name": "run_implies",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_add": {
            "name": "run_add",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_mul": {
            "name": "run_mul",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg.run_pow": {
            "name": "run_pow",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "ConstPropAlg._run.update_exp": {
            "name": "update_exp",
            "location": 227,
            "return": [],
            "arguments": {
                "i": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/small_step.py": {
        "final": {
            "name": "final",
            "location": 24,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "i": [
                    "_T0"
                ]
            }
        },
        "TTypeAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "TTypeAlg._init_pass": {
            "name": "_init_pass",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "TTypeAlg._end_pass": {
            "name": "_end_pass",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "TTypeAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "TTypeAlg._run": {
            "name": "_run",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "FinalizeAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "FinalizeAlg._init_pass": {
            "name": "_init_pass",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "FinalizeAlg._end_pass": {
            "name": "_end_pass",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "FinalizeAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "FinalizeAlg._run": {
            "name": "_run",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SmallStepAlg._init_pass": {
            "name": "_init_pass",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SmallStepAlg._end_pass": {
            "name": "_end_pass",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SmallStepAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SmallStepAlg._run": {
            "name": "_run",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_ifthenelse": {
            "name": "run_ifthenelse",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_dot": {
            "name": "run_dot",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_eq": {
            "name": "run_eq",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_negate": {
            "name": "run_negate",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_mul": {
            "name": "run_mul",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_div": {
            "name": "run_div",
            "location": 690,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_add": {
            "name": "run_add",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_sub": {
            "name": "run_sub",
            "location": 796,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_sqrt": {
            "name": "run_sqrt",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_within": {
            "name": "run_within",
            "location": 824,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_between": {
            "name": "run_between",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_atinitial": {
            "name": "run_atinitial",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_getmember": {
            "name": "run_getmember",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_invert": {
            "name": "run_invert",
            "location": 962,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_mag": {
            "name": "run_mag",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_cross": {
            "name": "run_cross",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_norm": {
            "name": "run_norm",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_dist": {
            "name": "run_dist",
            "location": 1181,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_inframe": {
            "name": "run_inframe",
            "location": 1233,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_crossmat": {
            "name": "run_crossmat",
            "location": 1289,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_matmul": {
            "name": "run_matmul",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SmallStepAlg.run_ifthenelse.wrap_if": {
            "name": "wrap_if",
            "location": 448,
            "return": [],
            "arguments": {
                "vt": [],
                "vf": []
            }
        },
        "FinalizeAlg._run.update_term": {
            "name": "update_term",
            "location": 301,
            "return": [],
            "arguments": {
                "ident": [],
                "dirty": []
            }
        },
        "SmallStepAlg.run_negate.neg_elem": {
            "name": "neg_elem",
            "location": 598,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/sympy.py": {
        "SympyAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SympyAlg._add_relevant": {
            "name": "_add_relevant",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "flag": [],
                "terms": []
            }
        },
        "SympyAlg._init_pass": {
            "name": "_init_pass",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SympyAlg._end_pass": {
            "name": "_end_pass",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SympyAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "SympyAlg._run": {
            "name": "_run",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.try_simp": {
            "name": "try_simp",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.try_eq_simp": {
            "name": "try_eq_simp",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_rep": {
            "name": "gen_rep",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_add": {
            "name": "gen_add",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_mul": {
            "name": "gen_mul",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_pow": {
            "name": "gen_pow",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_negate": {
            "name": "gen_negate",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_eq": {
            "name": "gen_eq",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_neq": {
            "name": "gen_neq",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_lessthan": {
            "name": "gen_lessthan",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_lessthaneq": {
            "name": "gen_lessthaneq",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_greaterthan": {
            "name": "gen_greaterthan",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_greaterthaneq": {
            "name": "gen_greaterthaneq",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_and": {
            "name": "gen_and",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_or": {
            "name": "gen_or",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_not": {
            "name": "gen_not",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_xor": {
            "name": "gen_xor",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_implies": {
            "name": "gen_implies",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_mag": {
            "name": "gen_mag",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_sin": {
            "name": "gen_sin",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_cos": {
            "name": "gen_cos",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_tan": {
            "name": "gen_tan",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_asin": {
            "name": "gen_asin",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_acos": {
            "name": "gen_acos",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_atan": {
            "name": "gen_atan",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_atan2": {
            "name": "gen_atan2",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "SympyAlg.gen_rep.get_sym": {
            "name": "get_sym",
            "location": 192,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/update_rep.py": {},
    "kinematic-synthesis-master/mechsynth/algebra/use_def.py": {
        "UseDefAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "UseDefAlg._init_pass": {
            "name": "_init_pass",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "UseDefAlg._end_pass": {
            "name": "_end_pass",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "UseDefAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "UseDefAlg._run": {
            "name": "_run",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "UseDefAlg._run.add_used": {
            "name": "add_used",
            "location": 65,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "UseDefAlg._run.add_defines": {
            "name": "add_defines",
            "location": 74,
            "return": [],
            "arguments": {
                "i": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/util.py": {
        "par": {
            "name": "par",
            "location": 116,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "s": [
                    "_T0"
                ]
            }
        },
        "no_par": {
            "name": "no_par",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "pretty_graphviz": {
            "name": "pretty_graphviz",
            "location": 607,
            "return": [
                "Any"
            ],
            "arguments": {
                "model": [],
                "expand_nexts": []
            }
        },
        "unflatten": {
            "name": "unflatten",
            "location": 952,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "print_graph": {
            "name": "print_graph",
            "location": 960,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "model": []
            }
        },
        "print_graphs": {
            "name": "print_graphs",
            "location": 966,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "model": []
            }
        },
        "AssocAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "AssocAlg._init_pass": {
            "name": "_init_pass",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "AssocAlg._end_pass": {
            "name": "_end_pass",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "AssocAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "AssocAlg._run": {
            "name": "_run",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "AssocAlg.get": {
            "name": "get",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "ident": []
            }
        },
        "PrintAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PrintAlg._init_pass": {
            "name": "_init_pass",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PrintAlg._end_pass": {
            "name": "_end_pass",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PrintAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PrintAlg.get": {
            "name": "get",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": [],
                "ident": []
            }
        },
        "PrintAlg._run": {
            "name": "_run",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "PrintAlg.short_field": {
            "name": "short_field",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "PrintAlg.run_param": {
            "name": "run_param",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "e_val": [],
                "fields": []
            }
        },
        "PrintAlg.run_atinitial": {
            "name": "run_atinitial",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_frame": {
            "name": "run_frame",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "e_val": [],
                "fields": []
            }
        },
        "PrintAlg.run_variable": {
            "name": "run_variable",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "field": []
            }
        },
        "PrintAlg.run_control": {
            "name": "run_control",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "field": []
            }
        },
        "PrintAlg.run_constant": {
            "name": "run_constant",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_versions": {
            "name": "run_versions",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "fun": [],
                "shift": []
            }
        },
        "PrintAlg.run_getmember": {
            "name": "run_getmember",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_ifthenelse": {
            "name": "run_ifthenelse",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_negate": {
            "name": "run_negate",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_invert": {
            "name": "run_invert",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_not": {
            "name": "run_not",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_eq": {
            "name": "run_eq",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_neq": {
            "name": "run_neq",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_lessthan": {
            "name": "run_lessthan",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_lessthaneq": {
            "name": "run_lessthaneq",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_greaterthan": {
            "name": "run_greaterthan",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_greaterthaneq": {
            "name": "run_greaterthaneq",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_implies": {
            "name": "run_implies",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_matmul": {
            "name": "run_matmul",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_pow": {
            "name": "run_pow",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_add": {
            "name": "run_add",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_sub": {
            "name": "run_sub",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_mul": {
            "name": "run_mul",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_div": {
            "name": "run_div",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_and": {
            "name": "run_and",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_or": {
            "name": "run_or",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_mat3x1": {
            "name": "run_mat3x1",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_mat4x1": {
            "name": "run_mat4x1",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_point": {
            "name": "run_point",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_vector": {
            "name": "run_vector",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "PrintAlg.run_unit_vector": {
            "name": "run_unit_vector",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": [],
                "fields": []
            }
        },
        "pretty_graphviz.tensor_style": {
            "name": "tensor_style",
            "location": 645,
            "return": [],
            "arguments": {
                "sty": [],
                "ident": []
            }
        },
        "pretty_graphviz.add_node": {
            "name": "add_node",
            "location": 736,
            "return": [],
            "arguments": {
                "graph": [],
                "ident": []
            }
        },
        "pretty_graphviz.add_edge": {
            "name": "add_edge",
            "location": 741,
            "return": [],
            "arguments": {
                "frm": [],
                "to": []
            }
        },
        "pretty_graphviz.make_terms": {
            "name": "make_terms",
            "location": 906,
            "return": [],
            "arguments": {
                "mset": [],
                "name": [],
                "label": []
            }
        },
        "pretty_graphviz.make_end_terms": {
            "name": "make_end_terms",
            "location": 925,
            "return": [],
            "arguments": {
                "mset": [],
                "name": [],
                "label": []
            }
        },
        "PruneAlg.__init__": {
            "name": "__init__",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alg_name": [],
                "keep_relevant": []
            }
        },
        "PruneAlg._init_algebra": {
            "name": "_init_algebra",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PruneAlg._init_pass": {
            "name": "_init_pass",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PruneAlg._end_pass": {
            "name": "_end_pass",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PruneAlg._end_algebra": {
            "name": "_end_algebra",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "PruneAlg._run": {
            "name": "_run",
            "location": 1071,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "PruneAlg.flat": {
            "name": "flat",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "final": []
            }
        },
        "PrintAlg._run.default_names": {
            "name": "default_names",
            "location": 213,
            "return": [],
            "arguments": {
                "ident": [],
                "e_val": [],
                "fields": []
            }
        },
        "PrintAlg._run.field_names": {
            "name": "field_names",
            "location": 246,
            "return": [],
            "arguments": {
                "fields": []
            }
        },
        "PrintAlg.run_atinitial.ini": {
            "name": "ini",
            "location": 298,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_getmember.add_member": {
            "name": "add_member",
            "location": 371,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_ifthenelse.ite": {
            "name": "ite",
            "location": 379,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_negate.neg": {
            "name": "neg",
            "location": 388,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_invert.inv": {
            "name": "inv",
            "location": 396,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_not.notf": {
            "name": "notf",
            "location": 404,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_eq.notf": {
            "name": "notf",
            "location": 412,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_neq.notf": {
            "name": "notf",
            "location": 420,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_lessthan.coll_terms": {
            "name": "coll_terms",
            "location": 428,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_lessthaneq.coll_terms": {
            "name": "coll_terms",
            "location": 436,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_greaterthan.coll_terms": {
            "name": "coll_terms",
            "location": 445,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_greaterthaneq.coll_terms": {
            "name": "coll_terms",
            "location": 453,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_implies.coll_terms": {
            "name": "coll_terms",
            "location": 461,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_matmul.coll_terms": {
            "name": "coll_terms",
            "location": 469,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_pow.coll_terms": {
            "name": "coll_terms",
            "location": 477,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_add.coll_terms": {
            "name": "coll_terms",
            "location": 486,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_sub.coll_terms": {
            "name": "coll_terms",
            "location": 494,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_mul.coll_terms": {
            "name": "coll_terms",
            "location": 502,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_div.coll_terms": {
            "name": "coll_terms",
            "location": 523,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_and.coll_terms": {
            "name": "coll_terms",
            "location": 533,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_or.coll_terms": {
            "name": "coll_terms",
            "location": 549,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_mat3x1.m31": {
            "name": "m31",
            "location": 563,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_mat4x1.m41": {
            "name": "m41",
            "location": 572,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_point.m41": {
            "name": "m41",
            "location": 581,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_vector.m41": {
            "name": "m41",
            "location": 590,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "PrintAlg.run_unit_vector.m41": {
            "name": "m41",
            "location": 599,
            "return": [],
            "arguments": {
                "ex": []
            }
        },
        "pretty_graphviz.tensor_style.group_color": {
            "name": "group_color",
            "location": 673,
            "return": [],
            "arguments": {
                "s": [],
                "c": []
            }
        },
        "PruneAlg._init_algebra.copy_field": {
            "name": "copy_field",
            "location": 1005,
            "return": [],
            "arguments": {
                "f_name": [],
                "get_field": [],
                "alg": [],
                "eqs": []
            }
        },
        "PrintAlg._run.default_names.map_fields": {
            "name": "map_fields",
            "location": 217,
            "return": [],
            "arguments": {
                "fl": [],
                "f": []
            }
        },
        "PrintAlg._run.default_names.shorter": {
            "name": "shorter",
            "location": 226,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "pretty_graphviz.add_nodes": {
            "name": "add_nodes",
            "location": 769,
            "return": [],
            "arguments": {
                "g": [],
                "members": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/algebra/__init__.py": {},
    "kinematic-synthesis-master/mechsynth/symbolic/geom.py": {
        "Line.__attrs__": {
            "name": "__attrs__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__tmap__": {
            "name": "__tmap__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "Line.__tzip__": {
            "name": "__tzip__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "others": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/symbolic/model.py": {
        "model_algebra": {
            "name": "model_algebra",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "within_model_context": {
            "name": "within_model_context",
            "location": 86,
            "return": [],
            "arguments": {
                "wrapped": [],
                "instance": [],
                "args": [],
                "kwargs": []
            }
        },
        "within_model_frame_context": {
            "name": "within_model_frame_context",
            "location": 108,
            "return": [],
            "arguments": {
                "wrapped": [],
                "instance": [],
                "args": [],
                "kwargs": []
            }
        },
        "id_to_mval": {
            "name": "id_to_mval",
            "location": 506,
            "return": [],
            "arguments": {
                "ident": []
            }
        },
        "MVal.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.__hash__": {
            "name": "__hash__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.is_equal_to": {
            "name": "is_equal_to",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.set_next": {
            "name": "set_next",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "color": []
            }
        },
        "MVal.__setitem__": {
            "name": "__setitem__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "MVal.has_next": {
            "name": "has_next",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.final": {
            "name": "final",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.set_eq": {
            "name": "set_eq",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__add__": {
            "name": "__add__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.add": {
            "name": "add",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__sub__": {
            "name": "__sub__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.sub": {
            "name": "sub",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__mul__": {
            "name": "__mul__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.mul": {
            "name": "mul",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__truediv__": {
            "name": "__truediv__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__mod__": {
            "name": "__mod__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__pow__": {
            "name": "__pow__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.pow": {
            "name": "pow",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.sqr": {
            "name": "sqr",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.sqrt": {
            "name": "sqrt",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.__and__": {
            "name": "__and__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__xor__": {
            "name": "__xor__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__or__": {
            "name": "__or__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__neg__": {
            "name": "__neg__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.negation": {
            "name": "negation",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.implies": {
            "name": "implies",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__abs__": {
            "name": "__abs__",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.__pos__": {
            "name": "__pos__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.abs": {
            "name": "abs",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__invert__": {
            "name": "__invert__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.inverse": {
            "name": "inverse",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.__matmul__": {
            "name": "__matmul__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.equals": {
            "name": "equals",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.not_equals": {
            "name": "not_equals",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__lt__": {
            "name": "__lt__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__gt__": {
            "name": "__gt__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__le__": {
            "name": "__le__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.__ge__": {
            "name": "__ge__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.dot": {
            "name": "dot",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.cross": {
            "name": "cross",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.dist_to": {
            "name": "dist_to",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MVal.is_between": {
            "name": "is_between",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": []
            }
        },
        "MVal.within": {
            "name": "within",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "dist": [],
                "of": []
            }
        },
        "MVal.in_frame": {
            "name": "in_frame",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "MVal.transpose": {
            "name": "transpose",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.at_initial": {
            "name": "at_initial",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.at_init": {
            "name": "at_init",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.__member": {
            "name": "__member",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MVal.x": {
            "name": "x",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.y": {
            "name": "y",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.z": {
            "name": "z",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.w": {
            "name": "w",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.c1": {
            "name": "c1",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.c2": {
            "name": "c2",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.c3": {
            "name": "c3",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.c4": {
            "name": "c4",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.r1": {
            "name": "r1",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.r2": {
            "name": "r2",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.r3": {
            "name": "r3",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.r4": {
            "name": "r4",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.axis": {
            "name": "axis",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.rot": {
            "name": "rot",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.shift": {
            "name": "shift",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.angle": {
            "name": "angle",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.offset": {
            "name": "offset",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.exists": {
            "name": "exists",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.dir": {
            "name": "dir",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.direction": {
            "name": "direction",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.loc": {
            "name": "loc",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.location": {
            "name": "location",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.moment": {
            "name": "moment",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.frame": {
            "name": "frame",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.parent_frame": {
            "name": "parent_frame",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.target_frame": {
            "name": "target_frame",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.point_offset": {
            "name": "point_offset",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MVal.rotation_metrix": {
            "name": "rotation_metrix",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.build": {
            "name": "build",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__post_init__": {
            "name": "__post_init__",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._const": {
            "name": "_const",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model._param": {
            "name": "_param",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type_hint": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "Model._control": {
            "name": "_control",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "initial_condition": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "Model._variable": {
            "name": "_variable",
            "location": 722,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "initial_condition": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "Model.insert_fresh": {
            "name": "insert_fresh",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "name": [],
                "provenance": []
            }
        },
        "Model.insert": {
            "name": "insert",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "name": [],
                "provenance": []
            }
        },
        "Model.__add_w_init": {
            "name": "__add_w_init",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "val": [],
                "name": [],
                "provenance": [],
                "init": []
            }
        },
        "Model.add_assertion": {
            "name": "add_assertion",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model.add_assumption": {
            "name": "add_assumption",
            "location": 886,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model.add_constraint": {
            "name": "add_constraint",
            "location": 894,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model.add_guarantee": {
            "name": "add_guarantee",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model.add_cost": {
            "name": "add_cost",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Model.insert._to_const": {
            "name": "_to_const",
            "location": 820,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/symbolic/model_ops.py": {
        "tup_map": {
            "name": "tup_map",
            "location": 27,
            "return": [
                "tuple"
            ],
            "arguments": {
                "f": []
            }
        },
        "soft_insert": {
            "name": "soft_insert",
            "location": 32,
            "return": [],
            "arguments": {
                "model": [],
                "val": []
            }
        },
        "const": {
            "name": "const",
            "location": 40,
            "return": [],
            "arguments": {
                "model": [],
                "val": [],
                "type_hint": []
            }
        },
        "parameter": {
            "name": "parameter",
            "location": 52,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "type_hint": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "control": {
            "name": "control",
            "location": 75,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "initial_condition": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "var": {
            "name": "var",
            "location": 104,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "initial_condition": [],
                "max_bound": [],
                "min_bound": [],
                "provenance": []
            }
        },
        "_mk_key_val": {
            "name": "_mk_key_val",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "prefix": [],
                "inserter": []
            }
        },
        "m_assert": {
            "name": "m_assert",
            "location": 141,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "assume": {
            "name": "assume",
            "location": 146,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "constrain": {
            "name": "constrain",
            "location": 151,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "require": {
            "name": "require",
            "location": 156,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "penalize": {
            "name": "penalize",
            "location": 162,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "add": {
            "name": "add",
            "location": 167,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "sub": {
            "name": "sub",
            "location": 172,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "negate": {
            "name": "negate",
            "location": 177,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "mul": {
            "name": "mul",
            "location": 182,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "div": {
            "name": "div",
            "location": 187,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "invert": {
            "name": "invert",
            "location": 192,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 197,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "pow": {
            "name": "pow",
            "location": 202,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "square": {
            "name": "square",
            "location": 207,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "sin": {
            "name": "sin",
            "location": 212,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "cos": {
            "name": "cos",
            "location": 217,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "tan": {
            "name": "tan",
            "location": 222,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "asin": {
            "name": "asin",
            "location": 227,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "acos": {
            "name": "acos",
            "location": 232,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "atan": {
            "name": "atan",
            "location": 237,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "atan2": {
            "name": "atan2",
            "location": 242,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "oneof": {
            "name": "oneof",
            "location": 247,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "m_and": {
            "name": "m_and",
            "location": 254,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "m_or": {
            "name": "m_or",
            "location": 259,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "m_not": {
            "name": "m_not",
            "location": 284,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "m_xor": {
            "name": "m_xor",
            "location": 269,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "m_implies": {
            "name": "m_implies",
            "location": 274,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "m_iff": {
            "name": "m_iff",
            "location": 279,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "if_then_else": {
            "name": "if_then_else",
            "location": 289,
            "return": [],
            "arguments": {
                "model": [],
                "c": [],
                "t": [],
                "f": []
            }
        },
        "eq": {
            "name": "eq",
            "location": 294,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "neq": {
            "name": "neq",
            "location": 299,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "less_than": {
            "name": "less_than",
            "location": 304,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "less_than_eq": {
            "name": "less_than_eq",
            "location": 309,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "greater_than": {
            "name": "greater_than",
            "location": 314,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "greater_than_eq": {
            "name": "greater_than_eq",
            "location": 319,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "dot": {
            "name": "dot",
            "location": 324,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "cross": {
            "name": "cross",
            "location": 329,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "norm": {
            "name": "norm",
            "location": 334,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "mag": {
            "name": "mag",
            "location": 339,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "length": {
            "name": "length",
            "location": 344,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "matmul": {
            "name": "matmul",
            "location": 349,
            "return": [],
            "arguments": {
                "model": [],
                "a": [],
                "b": []
            }
        },
        "determinant": {
            "name": "determinant",
            "location": 354,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "crossmat": {
            "name": "crossmat",
            "location": 359,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "mat3x1": {
            "name": "mat3x1",
            "location": 364,
            "return": [],
            "arguments": {
                "model": [],
                "x": [],
                "y": [],
                "z": []
            }
        },
        "mat4x1": {
            "name": "mat4x1",
            "location": 369,
            "return": [],
            "arguments": {
                "model": [],
                "x": [],
                "y": [],
                "z": [],
                "w": []
            }
        },
        "mat3x3": {
            "name": "mat3x3",
            "location": 374,
            "return": [],
            "arguments": {
                "model": [],
                "c1": [],
                "c2": [],
                "c3": []
            }
        },
        "mat4x4": {
            "name": "mat4x4",
            "location": 379,
            "return": [],
            "arguments": {
                "model": [],
                "c1": [],
                "c2": [],
                "c3": [],
                "c4": []
            }
        },
        "extendmat": {
            "name": "extendmat",
            "location": 383,
            "return": [],
            "arguments": {
                "model": [],
                "m3": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 392,
            "return": [],
            "arguments": {
                "model": [],
                "a": []
            }
        },
        "fixed_var": {
            "name": "fixed_var",
            "location": 406,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": []
            }
        },
        "mobile_var": {
            "name": "mobile_var",
            "location": 426,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": []
            }
        },
        "assert_frames_equal": {
            "name": "assert_frames_equal",
            "location": 443,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "fa": [],
                "fb": []
            }
        },
        "make_xyz": {
            "name": "make_xyz",
            "location": 456,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": [],
                "x": [],
                "y": [],
                "z": [],
                "fixed": []
            }
        },
        "point": {
            "name": "point",
            "location": 497,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": [],
                "x": [],
                "y": [],
                "z": [],
                "fixed": []
            }
        },
        "origin": {
            "name": "origin",
            "location": 530,
            "return": [],
            "arguments": {
                "model": [],
                "frame": []
            }
        },
        "vector": {
            "name": "vector",
            "location": 538,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": [],
                "x": [],
                "y": [],
                "z": [],
                "fixed": []
            }
        },
        "unit_vector": {
            "name": "unit_vector",
            "location": 572,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "val": [],
                "x": [],
                "y": [],
                "z": [],
                "fixed": [],
                "make_unit": []
            }
        },
        "rot_matrix": {
            "name": "rot_matrix",
            "location": 622,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "val": [],
                "x_axis": [],
                "y_axis": [],
                "z_axis": [],
                "make_unit": [],
                "fixed": []
            }
        },
        "axial_rot_matrix": {
            "name": "axial_rot_matrix",
            "location": 705,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "axis": [],
                "angle": [],
                "fixed": [],
                "make_unit": [],
                "initial_condition": []
            }
        },
        "rigid_matrix": {
            "name": "rigid_matrix",
            "location": 782,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "rot_mat": [],
                "pos_offset": [],
                "fixed": []
            }
        },
        "line": {
            "name": "line",
            "location": 815,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "name": [],
                "point": [],
                "direction": [],
                "other_point": [],
                "moment": [],
                "fixed": []
            }
        },
        "point_on_line": {
            "name": "point_on_line",
            "location": 865,
            "return": [],
            "arguments": {
                "model": [],
                "frame": [],
                "line": []
            }
        },
        "screw_matrix": {
            "name": "screw_matrix",
            "location": 879,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "axis": [],
                "angle": [],
                "offset": [],
                "fixed": []
            }
        },
        "ref_frame": {
            "name": "ref_frame",
            "location": 920,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "rigid_mat": []
            }
        },
        "default_frame": {
            "name": "default_frame",
            "location": 953,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "rigid_body": {
            "name": "rigid_body",
            "location": 961,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "frame": [],
                "rigid_mat": [],
                "exists": []
            }
        },
        "frame_transform": {
            "name": "frame_transform",
            "location": 1005,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "from_frame": [],
                "to_frame": []
            }
        },
        "anchor": {
            "name": "anchor",
            "location": 1036,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "body": [],
                "location": [],
                "x": [],
                "y": [],
                "z": [],
                "direction": [],
                "exists": []
            }
        },
        "hinge": {
            "name": "hinge",
            "location": 1127,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "from_frame": [],
                "to_frame": [],
                "axis": [],
                "angle": [],
                "min_angle": [],
                "max_angle": [],
                "exists": []
            }
        },
        "slide": {
            "name": "slide",
            "location": 1206,
            "return": [],
            "arguments": {
                "model": [],
                "name": [],
                "from_frame": [],
                "to_frame": [],
                "axis": [],
                "offset": [],
                "fixed": []
            }
        },
        "rot_matrix.make_axis": {
            "name": "make_axis",
            "location": 644,
            "return": [],
            "arguments": {
                "suffix": [],
                "val": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/symbolic/object.py": {},
    "kinematic-synthesis-master/mechsynth/symbolic/operator.py": {
        "OneOf.__tmap__": {
            "name": "__tmap__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "OneOf.__tzip__": {
            "name": "__tzip__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "others": []
            }
        }
    },
    "kinematic-synthesis-master/mechsynth/symbolic/relation.py": {},
    "kinematic-synthesis-master/mechsynth/symbolic/value.py": {},
    "kinematic-synthesis-master/mechsynth/symbolic/__init__.py": {},
    "kinematic-synthesis-master/setup/dreal-test.py": {},
    "kinematic-synthesis-master/test/premade_models.py": {
        "find_orthogonal": {
            "name": "find_orthogonal",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "design_pantograph": {
            "name": "design_pantograph",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "single_hinge": {
            "name": "single_hinge",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_data": {
            "name": "test_data",
            "location": 194,
            "return": [],
            "arguments": {
                "flags": []
            }
        },
        "design_pantograph.point_nearest_origin": {
            "name": "point_nearest_origin",
            "location": 155,
            "return": [],
            "arguments": {
                "line": []
            }
        }
    },
    "kinematic-synthesis-master/test/test_context.py": {
        "test_context_equality": {
            "name": "test_context_equality",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_inequality": {
            "name": "test_context_inequality",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_insert_fresh": {
            "name": "test_context_insert_fresh",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_nest": {
            "name": "test_insert_nest",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_key_store": {
            "name": "test_insert_key_store",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accept_lang": {
            "name": "test_accept_lang",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reject_lang": {
            "name": "test_reject_lang",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_algebra_decorator_defs": {
            "name": "test_algebra_decorator_defs",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_algebra_print": {
            "name": "test_algebra_print",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_algebra_eval": {
            "name": "test_algebra_eval",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_algebra_eval_state": {
            "name": "test_algebra_eval_state",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_algebra_print.PPrint._init_algebra": {
            "name": "_init_algebra",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_print.PPrint._init_pass": {
            "name": "_init_pass",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_print.PPrint._end_pass": {
            "name": "_end_pass",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_print.PPrint._end_algebra": {
            "name": "_end_algebra",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_print.PPrint.run_add": {
            "name": "run_add",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_print.PPrint.run_sub": {
            "name": "run_sub",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_print.PPrint.run_mul": {
            "name": "run_mul",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_print.PPrint.run_var": {
            "name": "run_var",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_print.PPrint.run_val": {
            "name": "run_val",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval.Eval._init_algebra": {
            "name": "_init_algebra",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval.Eval._init_pass": {
            "name": "_init_pass",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval.Eval._end_pass": {
            "name": "_end_pass",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval.Eval._end_algebra": {
            "name": "_end_algebra",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval.Eval.run_add": {
            "name": "run_add",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval.Eval.run_sub": {
            "name": "run_sub",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval.Eval.run_mul": {
            "name": "run_mul",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval.Eval.run_val": {
            "name": "run_val",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval_state.Eval.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "vs": []
            }
        },
        "test_algebra_eval_state.Eval._init_algebra": {
            "name": "_init_algebra",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval_state.Eval._init_pass": {
            "name": "_init_pass",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval_state.Eval._end_pass": {
            "name": "_end_pass",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval_state.Eval._end_algebra": {
            "name": "_end_algebra",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "ctxt": []
            }
        },
        "test_algebra_eval_state.Eval.run_add": {
            "name": "run_add",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval_state.Eval.run_sub": {
            "name": "run_sub",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval_state.Eval.run_mul": {
            "name": "run_mul",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval_state.Eval.run_val": {
            "name": "run_val",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        },
        "test_algebra_eval_state.Eval.run_var": {
            "name": "run_var",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [],
                "val": []
            }
        }
    },
    "kinematic-synthesis-master/test/test_model.py": {
        "test_model_parse": {
            "name": "test_model_parse",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_basic": {
            "name": "test_model_basic",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kinematic-synthesis-master/test/test_symbolic.py": {
        "test_symbolic_parse": {
            "name": "test_symbolic_parse",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kinematic-synthesis-master/test/test_term.py": {
        "test_tmap_basic": {
            "name": "test_tmap_basic",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tmap_complex": {
            "name": "test_tmap_complex",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tfold_sum": {
            "name": "test_tfold_sum",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tfold_count": {
            "name": "test_tfold_count",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_accum_print": {
            "name": "test_map_accum_print",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tfold_count.cnt": {
            "name": "cnt",
            "location": 33,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_map_accum_print.prnlen": {
            "name": "prnlen",
            "location": 41,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "kinematic-synthesis-master/test/test_util.py": {
        "test_util_build": {
            "name": "test_util_build",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kinematic-synthesis-master/test/__init__.py": {},
    "kinematic-synthesis-master/test/algebra/test_dreal.py": {
        "test_dreal_parse": {
            "name": "test_dreal_parse",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dreal_interface_othro": {
            "name": "test_dreal_interface_othro",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_boolean_if_then": {
            "name": "test_boolean_if_then",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_forall": {
            "name": "test_nested_forall",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "fst": {
            "name": "fst",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "print_model_trans": {
            "name": "print_model_trans",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "model_graraphviz_trans": {
            "name": "model_graraphviz_trans",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_dreal_basic": {
            "name": "test_dreal_basic",
            "location": 167,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        },
        "test_dreal_orthogonal_sat": {
            "name": "test_dreal_orthogonal_sat",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_forall.exists": {
            "name": "exists",
            "location": 132,
            "return": [],
            "arguments": {
                "vs": [],
                "fun": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/test_optimize.py": {
        "test_optimize_parse": {
            "name": "test_optimize_parse",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimize_basic": {
            "name": "test_optimize_basic",
            "location": 32,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/test_simp.py": {
        "test_simp_parse": {
            "name": "test_simp_parse",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dprint": {
            "name": "dprint",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "model_stats": {
            "name": "model_stats",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_simp_basic": {
            "name": "test_simp_basic",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/test_small_step.py": {
        "test_small_step_parse": {
            "name": "test_small_step_parse",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_small_step_basic": {
            "name": "test_small_step_basic",
            "location": 28,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/test_sympy.py": {
        "test_sympy_parse": {
            "name": "test_sympy_parse",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kinematic-synthesis-master/test/algebra/test_use_def.py": {
        "test_use_def_parse": {
            "name": "test_use_def_parse",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fst": {
            "name": "fst",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "print_model_use_def": {
            "name": "print_model_use_def",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_use_def_basic": {
            "name": "test_use_def_basic",
            "location": 38,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/test_util.py": {
        "test_util_parse": {
            "name": "test_util_parse",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dprint": {
            "name": "dprint",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_util_basic": {
            "name": "test_util_basic",
            "location": 33,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        },
        "model_stats": {
            "name": "model_stats",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_util_looped": {
            "name": "test_util_looped",
            "location": 71,
            "return": [],
            "arguments": {
                "name": [],
                "builder": []
            }
        }
    },
    "kinematic-synthesis-master/test/algebra/__init__.py": {}
}
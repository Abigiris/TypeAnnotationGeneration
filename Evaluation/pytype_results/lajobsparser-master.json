{
    "lajobsparser-master/setup.py": {},
    "lajobsparser-master/lajobsparser/experience_parser.py": {
        "_get_experience_parser": {
            "name": "_get_experience_parser",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "job_titles": []
            }
        },
        "_parse_experience_ebnf": {
            "name": "_parse_experience_ebnf",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "experience_parser": [],
                "experience": []
            }
        },
        "parse_experience": {
            "name": "parse_experience",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": [],
                "job_titles": []
            }
        },
        "n2w": {
            "name": "n2w",
            "location": 74,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "n": []
            }
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lajobsparser-master/lajobsparser/parse_jobs.py": {
        "get_bulletin_headers_file": {
            "name": "get_bulletin_headers_file",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "path": []
            }
        },
        "get_bulletin_headers": {
            "name": "get_bulletin_headers",
            "location": 50,
            "return": [
                "list"
            ],
            "arguments": {
                "paths": []
            }
        },
        "get_header_counts": {
            "name": "get_header_counts",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "header_df": [],
                "header": []
            }
        },
        "get_job_bulletins": {
            "name": "get_job_bulletins",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "paths": []
            }
        },
        "check_job_class_titles": {
            "name": "check_job_class_titles",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "title_df": [],
                "bulletin_df": []
            }
        },
        "get_data_dictionary": {
            "name": "get_data_dictionary",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "data_dictionary_path": []
            }
        },
        "parse_field": {
            "name": "parse_field",
            "location": 124,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "pat_re": [],
                "text": []
            }
        },
        "get_job_class_title": {
            "name": "get_job_class_title",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "parse_job_class_no": {
            "name": "parse_job_class_no",
            "location": 139,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "open_date_to_datetime": {
            "name": "open_date_to_datetime",
            "location": 152,
            "return": [
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "date_str": []
            }
        },
        "parse_open_date": {
            "name": "parse_open_date",
            "location": 167,
            "return": [
                "Tuple[(Optional[datetime.datetime], int, int)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "get_salary_range_list_parser": {
            "name": "get_salary_range_list_parser",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "parse_salary_ebnf": {
            "name": "parse_salary_ebnf",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "salary_parser": [],
                "salary_str": []
            }
        },
        "parse_annual_salary": {
            "name": "parse_annual_salary",
            "location": 223,
            "return": [
                "Tuple[(str, int, int)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "parse_job_duties": {
            "name": "parse_job_duties",
            "location": 254,
            "return": [
                "Tuple[(Any, int, int)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "parse_requirement": {
            "name": "parse_requirement",
            "location": 269,
            "return": [
                "Tuple[(str, int, int)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "get_job_info_file": {
            "name": "get_job_info_file",
            "location": 299,
            "return": [
                "JobInfo"
            ],
            "arguments": {
                "file_text": []
            }
        },
        "get_job_info_df": {
            "name": "get_job_info_df",
            "location": 403,
            "return": [
                "Any"
            ],
            "arguments": {
                "paths": []
            }
        },
        "get_bulletin_headers_file.is_valid_first_header": {
            "name": "is_valid_first_header",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "get_bulletin_headers_file.is_header": {
            "name": "is_header",
            "location": 35,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "get_job_info_file.print_text": {
            "name": "print_text",
            "location": 358,
            "return": [],
            "arguments": {
                "msg": [],
                "text": []
            }
        }
    },
    "lajobsparser-master/lajobsparser/parse_job_paths.py": {
        "is_in_box": {
            "name": "is_in_box",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "box_in": [],
                "box_out": []
            }
        },
        "sort_box_horizontal": {
            "name": "sort_box_horizontal",
            "location": 81,
            "return": [
                "list"
            ],
            "arguments": {
                "box_list": [],
                "reverse": []
            }
        },
        "sort_box_vertical": {
            "name": "sort_box_vertical",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "box_list": [],
                "reverse": []
            }
        },
        "get_job_paths_in_file": {
            "name": "get_job_paths_in_file",
            "location": 93,
            "return": [
                "List[JobPath]"
            ],
            "arguments": {
                "job_path_file": []
            }
        },
        "get_job_paths": {
            "name": "get_job_paths",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "paths": []
            }
        },
        "PdfBoxProcessor.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_file": []
            }
        },
        "PdfBoxProcessor.get_box_type": {
            "name": "get_box_type",
            "location": 65,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "BoxType": []
            }
        },
        "PdfBoxProcessor.get_box_text": {
            "name": "get_box_text",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfBoxProcessor.get_box_curve": {
            "name": "get_box_curve",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfBoxProcessor.get_box_figure": {
            "name": "get_box_figure",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PdfBoxProcessor.get_box_line": {
            "name": "get_box_line",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lajobsparser-master/lajobsparser/test_experience_parser.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse.str_list_match": {
            "name": "str_list_match",
            "location": 5,
            "return": [],
            "arguments": {
                "str_list1": [],
                "str_list2": []
            }
        }
    },
    "lajobsparser-master/lajobsparser/__init__.py": {},
    "lajobsparser-master/tests/__init__.py": {}
}
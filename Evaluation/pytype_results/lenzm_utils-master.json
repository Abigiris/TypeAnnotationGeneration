{
    "lenzm_utils-master/setup.py": {},
    "lenzm_utils-master/lenzm_utils/bootstrap_wtf.py": {
        "_space_join_cond": {
            "name": "_space_join_cond",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "names_conditions": [
                    "Mapping[(Optional[str], Any)]"
                ]
            }
        },
        "_col": {
            "name": "_col",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "size": [
                    "str"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "bootstrap_field": {
            "name": "bootstrap_field",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "field": [],
                "form_group": [
                    "bool"
                ],
                "placeholder": [
                    "Union[(bool, str)]"
                ],
                "label": [
                    "bool"
                ],
                "errors": [
                    "bool"
                ],
                "horizontal": [
                    "bool"
                ],
                "inline": [
                    "bool"
                ],
                "btn_color": [
                    "str"
                ],
                "icon": [
                    "Union[(bool, str)]"
                ]
            }
        },
        "_insert_icon": {
            "name": "_insert_icon",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "html_str": [],
                "field": [],
                "icon": [
                    "Union[(bool, str)]"
                ],
                "is_text_field": [
                    "bool"
                ]
            }
        },
        "_field_description": {
            "name": "_field_description",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "field": [],
                "horizontal": [
                    "bool"
                ]
            }
        },
        "_field_errors": {
            "name": "_field_errors",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "field": [],
                "errors": [
                    "bool"
                ],
                "horizontal": [
                    "bool"
                ]
            }
        },
        "_gen_fields": {
            "name": "_gen_fields",
            "location": 209,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "obj": []
            }
        },
        "bootstrap_form": {
            "name": "bootstrap_form",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "form": [],
                "action": [
                    "str"
                ]
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/comparable_mixin.py": {
        "ComparableMixin._is_valid_operand": {
            "name": "_is_valid_operand",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "ComparableMixin._cmp_key": {
            "name": "_cmp_key",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComparableMixin.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__gt__": {
            "name": "__gt__",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__ge__": {
            "name": "__ge__",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__lt__": {
            "name": "__lt__",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__le__": {
            "name": "__le__",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComparableMixin.__hash__": {
            "name": "__hash__",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComparableIsInstanceMixin._is_valid_operand": {
            "name": "_is_valid_operand",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "ComparableSameClassMixin._is_valid_operand": {
            "name": "_is_valid_operand",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "other": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/dates.py": {
        "week_start": {
            "name": "week_start",
            "location": 29,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "d": [
                    "_datetime.date"
                ],
                "starts_on": [
                    "Day"
                ]
            }
        },
        "workday_diff": {
            "name": "workday_diff",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "start_date": [
                    "_datetime.datetime"
                ],
                "end_date": [
                    "_datetime.datetime"
                ],
                "holidays": [
                    "Iterable[_datetime.date]"
                ]
            }
        },
        "midnight": {
            "name": "midnight",
            "location": 107,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "d": [
                    "_datetime.date"
                ]
            }
        },
        "past_complete_weeks": {
            "name": "past_complete_weeks",
            "location": 114,
            "return": [
                "Tuple[(_datetime.date, _datetime.date)]"
            ],
            "arguments": {
                "num_weeks": [
                    "int"
                ],
                "today": [
                    "_datetime.date"
                ],
                "week_starts_on": [
                    "Day"
                ]
            }
        },
        "parse_iso_date_with_colon": {
            "name": "parse_iso_date_with_colon",
            "location": 244,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "date_string": [
                    "str"
                ]
            }
        },
        "parse_date_missing_zero_padding": {
            "name": "parse_date_missing_zero_padding",
            "location": 263,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "date_string": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "order": [
                    "str"
                ],
                "min_year": [
                    "int"
                ]
            }
        },
        "workday_diff.should_exclude_day": {
            "name": "should_exclude_day",
            "location": 86,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Month.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ]
            }
        },
        "Month.first": {
            "name": "first",
            "location": 144,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.first_datetime": {
            "name": "first_datetime",
            "location": 148,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.first_string": {
            "name": "first_string",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.mid": {
            "name": "mid",
            "location": 155,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.mid_datetime": {
            "name": "mid_datetime",
            "location": 159,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.mid_string": {
            "name": "mid_string",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.last": {
            "name": "last",
            "location": 166,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.num_days": {
            "name": "num_days",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.date": {
            "name": "date",
            "location": 172,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int"
                ]
            }
        },
        "Month.datetime": {
            "name": "datetime",
            "location": 182,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int"
                ]
            }
        },
        "Month.pace": {
            "name": "pace",
            "location": 185,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Month.next": {
            "name": "next",
            "location": 200,
            "return": [
                "_TMonth"
            ],
            "arguments": {
                "self": [
                    "_TMonth"
                ]
            }
        },
        "Month.from_date": {
            "name": "from_date",
            "location": 207,
            "return": [
                "Optional[Month]"
            ],
            "arguments": {
                "cls": [],
                "d": []
            }
        },
        "Month._cmp_key": {
            "name": "_cmp_key",
            "location": 213,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Month.__sub__": {
            "name": "__sub__",
            "location": 216,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Month.iter": {
            "name": "iter",
            "location": 221,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "start": [
                    "_T0"
                ],
                "end": []
            }
        },
        "Month.days": {
            "name": "days",
            "location": 236,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/dicts.py": {
        "csv_to_dict": {
            "name": "csv_to_dict",
            "location": 7,
            "return": [
                "Dict[(Tuple[(str, ...)], Dict[(str, str)])]"
            ],
            "arguments": {
                "filepath": [],
                "key_cols": []
            }
        },
        "sort_dict": {
            "name": "sort_dict",
            "location": 25,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "d": [],
                "key": []
            }
        },
        "group_dicts_by": {
            "name": "group_dicts_by",
            "location": 33,
            "return": [
                "collections.defaultdict"
            ],
            "arguments": {
                "dict_list": [],
                "key": []
            }
        },
        "xlsx_dict_reader": {
            "name": "xlsx_dict_reader",
            "location": 40,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "filepath": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/fontawesome.py": {
        "_style_class": {
            "name": "_style_class",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "style": []
            }
        },
        "fa_icon": {
            "name": "fa_icon",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "style": [
                    "str"
                ],
                "size": [
                    "str"
                ],
                "fixed_width": [
                    "bool"
                ],
                "brand_color": [
                    "bool"
                ],
                "title": [
                    "str"
                ]
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/itertools.py": {
        "product": {
            "name": "product",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "all_equal": {
            "name": "all_equal",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "one": {
            "name": "one",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "first": {
            "name": "first",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "last": {
            "name": "last",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "nth": {
            "name": "nth",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": [],
                "n": [],
                "key": []
            }
        },
        "count": {
            "name": "count",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "match_any": {
            "name": "match_any",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "res": [],
                "string": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/other.py": {
        "valid_email_address": {
            "name": "valid_email_address",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "email": []
            }
        },
        "create_url": {
            "name": "create_url",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "scheme": [],
                "path": [],
                "query": [],
                "fragment": [],
                "username": [],
                "password": [],
                "hostname": [],
                "port": []
            }
        },
        "sniff_and_decode": {
            "name": "sniff_and_decode",
            "location": 183,
            "return": [
                "io.StringIO"
            ],
            "arguments": {
                "stream": []
            }
        },
        "no_autoflush.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "no_autoflush.__enter__": {
            "name": "__enter__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "no_autoflush.__exit__": {
            "name": "__exit__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "memoized_method.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "memoized_method.__get__": {
            "name": "__get__",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "objtype": []
            }
        },
        "memoized_method.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": []
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "owner_self": [],
                "owner_cls": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/parse_string.py": {
        "money": {
            "name": "money",
            "location": 6,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "money_string": [
                    "str"
                ]
            }
        },
        "accounting": {
            "name": "accounting",
            "location": 23,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "percent_to_float": {
            "name": "percent_to_float",
            "location": 33,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "percent_to_decimal": {
            "name": "percent_to_decimal",
            "location": 41,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "blank_return_value": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/sqlalchemy.py": {
        "psycopg_uri": {
            "name": "psycopg_uri",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "username": [],
                "password": [],
                "db_name": [],
                "host": [],
                "port": []
            }
        },
        "foreign_key_col": {
            "name": "foreign_key_col",
            "location": 76,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "col": []
            }
        },
        "parent_key": {
            "name": "parent_key",
            "location": 85,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "column": [],
                "col_type": [],
                "nullable": [],
                "index": []
            }
        },
        "parse_uuid": {
            "name": "parse_uuid",
            "location": 452,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "obj": []
            }
        },
        "CIText.get_col_spec": {
            "name": "get_col_spec",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIText.bind_processor": {
            "name": "bind_processor",
            "location": 50,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "CIText.result_processor": {
            "name": "result_processor",
            "location": 55,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "dialect": [],
                "coltype": []
            }
        },
        "Fraction.process_bind_param": {
            "name": "process_bind_param",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "Fraction.process_result_value": {
            "name": "process_result_value",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "dialect": []
            }
        },
        "UTCDateTime.process_bind_param": {
            "name": "process_bind_param",
            "location": 127,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[_datetime.datetime]"
                ],
                "dialect": []
            }
        },
        "UTCDateTime.process_result_value": {
            "name": "process_result_value",
            "location": 139,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[_datetime.datetime]"
                ],
                "dialect": []
            }
        },
        "UTCDateTime.now": {
            "name": "now",
            "location": 150,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "BaseMixin.__table_args__": {
            "name": "__table_args__",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.find_one": {
            "name": "find_one",
            "location": 172,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.find_one_or_404": {
            "name": "find_one_or_404",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.create": {
            "name": "create",
            "location": 185,
            "return": [
                "_TBaseMixin"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBaseMixin]"
                ]
            }
        },
        "BaseMixin.find_create": {
            "name": "find_create",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "create_args": []
            }
        },
        "BaseMixin.exists": {
            "name": "exists",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.cast": {
            "name": "cast",
            "location": 214,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "cls": [],
                "obj": [
                    "_T0"
                ],
                "allow_none": []
            }
        },
        "BaseMixin._repr_class_template": {
            "name": "_repr_class_template",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.__repr__": {
            "name": "__repr__",
            "location": 235,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMixin.query_default_order": {
            "name": "query_default_order",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin._get_pkey_col": {
            "name": "_get_pkey_col",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.fkey_constraint": {
            "name": "fkey_constraint",
            "location": 254,
            "return": [
                "sqlalchemy.sql.schema.ForeignKeyConstraint"
            ],
            "arguments": {
                "cls": [],
                "cols": [
                    "Sequence"
                ],
                "ondelete": [],
                "onupdate": []
            }
        },
        "BaseMixin.pkey": {
            "name": "pkey",
            "location": 268,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseMixin.to_dict": {
            "name": "to_dict",
            "location": 273,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "sub": []
            }
        },
        "BaseMixin._get_path": {
            "name": "_get_path",
            "location": 338,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "_T0"
                ],
                "directory": []
            }
        },
        "BaseMixin.merge_csv": {
            "name": "merge_csv",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "directory": [],
                "io_wrapper": []
            }
        },
        "BaseMixin.import_csv": {
            "name": "import_csv",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "directory": [],
                "io_wrapper": []
            }
        },
        "BaseMixin.export_csv": {
            "name": "export_csv",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "directory": [],
                "io_wrapper": []
            }
        },
        "BaseMixin.import_from_file": {
            "name": "import_from_file",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "infile": [],
                "io_wrapper": []
            }
        },
        "BaseMixin.merge_from_file": {
            "name": "merge_from_file",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "infile": [],
                "io_wrapper": []
            }
        },
        "BaseMixin.export_to_file": {
            "name": "export_to_file",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "outfile": [],
                "fieldnames": [],
                "io_wrapper": []
            }
        },
        "IntegerPKey.cast": {
            "name": "cast",
            "location": 428,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "IntegerPKey._get_pkey_col": {
            "name": "_get_pkey_col",
            "location": 438,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "IntegerPKey.__hash__": {
            "name": "__hash__",
            "location": 441,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerPKey.__eq__": {
            "name": "__eq__",
            "location": 444,
            "return": [
                "Union[(bool, sqlalchemy.sql.operators.ColumnOperators)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IntegerPKey.query_default_order": {
            "name": "query_default_order",
            "location": 448,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UUID4Pkey.cast": {
            "name": "cast",
            "location": 479,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "UUID4Pkey._get_pkey_col": {
            "name": "_get_pkey_col",
            "location": 491,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UUID4Pkey.__hash__": {
            "name": "__hash__",
            "location": 494,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUID4Pkey.__eq__": {
            "name": "__eq__",
            "location": 497,
            "return": [
                "Union[(bool, sqlalchemy.sql.operators.ColumnOperators)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UUID4Pkey.query_default_order": {
            "name": "query_default_order",
            "location": 501,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AbbrPKey.cast": {
            "name": "cast",
            "location": 510,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "AbbrPKey._get_pkey_col": {
            "name": "_get_pkey_col",
            "location": 520,
            "return": [
                "sqlalchemy.sql.schema.Column"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AbbrPKey.__hash__": {
            "name": "__hash__",
            "location": 523,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbbrPKey.__eq__": {
            "name": "__eq__",
            "location": 526,
            "return": [
                "Union[(bool, sqlalchemy.sql.operators.ColumnOperators)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbbrPKey.query_default_order": {
            "name": "query_default_order",
            "location": 530,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "no_autoflush.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "no_autoflush.__enter__": {
            "name": "__enter__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "no_autoflush.__exit__": {
            "name": "__exit__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "CIText.bind_processor.process": {
            "name": "process",
            "location": 51,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "CIText.result_processor.process": {
            "name": "process",
            "location": 56,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/web.py": {
        "space_join_cond": {
            "name": "space_join_cond",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "mapping": [
                    "Mapping[(str, Any)]"
                ]
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/_duration.py": {
        "parse_duration_iso": {
            "name": "parse_duration_iso",
            "location": 21,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_parse_duration_days": {
            "name": "_parse_duration_days",
            "location": 46,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "days_string": [],
                "any_time_string": []
            }
        },
        "_parse_duration_time": {
            "name": "_parse_duration_time",
            "location": 79,
            "return": [
                "datetime.timedelta"
            ],
            "arguments": {
                "time_string": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/__init__.py": {},
    "lenzm_utils-master/lenzm_utils/flask/url_converters.py": {
        "ListConverter": {
            "name": "ListConverter",
            "location": 23,
            "return": [
                "type"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "DateConverter.to_python": {
            "name": "to_python",
            "location": 11,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "DateConverter.to_url": {
            "name": "to_url",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "_datetime.date"
                ]
            }
        },
        "UUIDConverter.to_python": {
            "name": "to_python",
            "location": 43,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "UUIDConverter.to_url": {
            "name": "to_url",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "uuid.UUID"
                ]
            }
        },
        "ListConverter._ListConverter.to_python": {
            "name": "to_python",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ListConverter._ListConverter.to_url": {
            "name": "to_url",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/url_for_obj.py": {
        "url_for_obj": {
            "name": "url_for_obj",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "option": []
            }
        },
        "register": {
            "name": "register",
            "location": 80,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "class_": [],
                "option": [],
                "get_funcs": []
            }
        },
        "register.decorator": {
            "name": "decorator",
            "location": 88,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/url_update.py": {
        "url_update_args": {
            "name": "url_update_args",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "url_update_endpoint_args": {
            "name": "url_update_endpoint_args",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "endpoint": []
            }
        },
        "url_update": {
            "name": "url_update",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/__init__.py": {
        "encodeURIComponent": {
            "name": "encodeURIComponent",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/db_admin/migrate.py": {
        "_get_config": {
            "name": "_get_config",
            "location": 64,
            "return": [
                "Config"
            ],
            "arguments": {
                "x_arg": []
            }
        },
        "init": {
            "name": "init",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "revision": {
            "name": "revision",
            "location": 103,
            "return": [],
            "arguments": {
                "message": [],
                "autogenerate": [],
                "sql": [],
                "head": [],
                "splice": [],
                "branch_label": [],
                "version_path": [],
                "rev_id": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 133,
            "return": [],
            "arguments": {
                "revisions": [],
                "message": [],
                "branch_label": [],
                "rev_id": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 153,
            "return": [],
            "arguments": {
                "revision": [],
                "sql": [],
                "tag": [],
                "x_arg": []
            }
        },
        "downgrade": {
            "name": "downgrade",
            "location": 167,
            "return": [],
            "arguments": {
                "revision": [],
                "sql": [],
                "tag": [],
                "x_arg": []
            }
        },
        "show": {
            "name": "show",
            "location": 180,
            "return": [],
            "arguments": {
                "revision": []
            }
        },
        "history": {
            "name": "history",
            "location": 189,
            "return": [],
            "arguments": {
                "rev_range": [],
                "verbose": []
            }
        },
        "heads": {
            "name": "heads",
            "location": 202,
            "return": [],
            "arguments": {
                "verbose": [],
                "resolve_dependencies": []
            }
        },
        "branches": {
            "name": "branches",
            "location": 214,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "current": {
            "name": "current",
            "location": 222,
            "return": [],
            "arguments": {
                "verbose": [],
                "head_only": []
            }
        },
        "stamp": {
            "name": "stamp",
            "location": 232,
            "return": [],
            "arguments": {
                "revision": [],
                "sql": [],
                "tag": []
            }
        },
        "_MigrateConfig.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [],
                "db": []
            }
        },
        "Migrate.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "db": [],
                "directory": []
            }
        },
        "Migrate.init_app": {
            "name": "init_app",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "db": [],
                "directory": []
            }
        },
        "Config.get_template_directory": {
            "name": "get_template_directory",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/db_admin/pg.py": {
        "dump": {
            "name": "dump",
            "location": 23,
            "return": [],
            "arguments": {
                "location": [],
                "format": []
            }
        },
        "restore": {
            "name": "restore",
            "location": 39,
            "return": [],
            "arguments": {
                "location": []
            }
        },
        "psql": {
            "name": "psql",
            "location": 56,
            "return": [],
            "arguments": {
                "command": [],
                "file": []
            }
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/db_admin/__init__.py": {
        "create_all": {
            "name": "create_all",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "drop_all": {
            "name": "drop_all",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "reset_all": {
            "name": "reset_all",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "lenzm_utils-master/lenzm_utils/flask/db_admin/templates/flask/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lenzm_utils-master/tests/test_comparable_mixin.py": {
        "lt": {
            "name": "lt",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "le": {
            "name": "le",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "gt": {
            "name": "gt",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ge": {
            "name": "ge",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "eq": {
            "name": "eq",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ne": {
            "name": "ne",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ha": {
            "name": "ha",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_hash": {
            "name": "test_hash",
            "location": 30,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_comparable_mixin": {
            "name": "test_comparable_mixin",
            "location": 35,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "operand": []
            }
        },
        "CompWrap.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "CompWrap._cmp_key": {
            "name": "_cmp_key",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lenzm_utils-master/tests/test_dates.py": {
        "test_Month_first": {
            "name": "test_Month_first",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_mid": {
            "name": "test_Month_mid",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_next": {
            "name": "test_Month_next",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_from_date": {
            "name": "test_Month_from_date",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_lt": {
            "name": "test_Month_lt",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_sub": {
            "name": "test_Month_sub",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Month_date": {
            "name": "test_Month_date",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_week_start": {
            "name": "test_week_start",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_past_complete_weeks": {
            "name": "test_past_complete_weeks",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestWorkdayDiff.test_one_day": {
            "name": "test_one_day",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkdayDiff.test_full_year": {
            "name": "test_full_year",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkdayDiff.test_partial_day": {
            "name": "test_partial_day",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkdayDiff.test_concurrent_partial_days": {
            "name": "test_concurrent_partial_days",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkdayDiff.test_weekend": {
            "name": "test_weekend",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkdayDiff.test_holidays_and_weekend": {
            "name": "test_holidays_and_weekend",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_sunday": {
            "name": "test_sunday",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_monday": {
            "name": "test_monday",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_tuesday": {
            "name": "test_tuesday",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_wednesday": {
            "name": "test_wednesday",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_thursday": {
            "name": "test_thursday",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_friday": {
            "name": "test_friday",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStart.test_saturday": {
            "name": "test_saturday",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_sunday": {
            "name": "test_sunday",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_monday": {
            "name": "test_monday",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_tuesday": {
            "name": "test_tuesday",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_wednesday": {
            "name": "test_wednesday",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_thursday": {
            "name": "test_thursday",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_friday": {
            "name": "test_friday",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWeekStartMon.test_saturday": {
            "name": "test_saturday",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_simple": {
            "name": "test_simple",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_order": {
            "name": "test_order",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_min_year1": {
            "name": "test_min_year1",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_min_year2": {
            "name": "test_min_year2",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_full_year": {
            "name": "test_full_year",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_100_year": {
            "name": "test_100_year",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_invalid_years": {
            "name": "test_invalid_years",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_date_missing_zero_padding.test_missing_values": {
            "name": "test_missing_values",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_full": {
            "name": "test_full",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_out_of_order": {
            "name": "test_out_of_order",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_minute_month": {
            "name": "test_minute_month",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.time_missing_t": {
            "name": "time_missing_t",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_parse_float": {
            "name": "test_parse_float",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_parse_float_comma": {
            "name": "test_parse_float_comma",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_duration.test_multiple_floats": {
            "name": "test_multiple_floats",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lenzm_utils-master/tests/test_flask_url_for_obj.py": {
        "employee_view": {
            "name": "employee_view",
            "location": 32,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "manager_view": {
            "name": "manager_view",
            "location": 40,
            "return": [],
            "arguments": {
                "full_name": []
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mapped": {
            "name": "test_mapped",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple.test_view": {
            "name": "test_view",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_mapped.test_view": {
            "name": "test_view",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "lenzm_utils-master/tests/test_itertools.py": {
        "test_product": {
            "name": "test_product",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nth": {
            "name": "test_nth",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_eq": {
            "name": "test_all_eq",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first": {
            "name": "test_first",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one": {
            "name": "test_one",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lenzm_utils-master/tests/test_other.py": {
        "test_valid_email_address": {
            "name": "test_valid_email_address",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lenzm_utils-master/tests/test_parse_string.py": {
        "test_money": {
            "name": "test_money",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accounting": {
            "name": "test_accounting",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_percent_to_float": {
            "name": "test_percent_to_float",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_percent_to_decimal": {
            "name": "test_percent_to_decimal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lenzm_utils-master/tests/test_sqlalchemy.py": {
        "session": {
            "name": "session",
            "location": 17,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_citext": {
            "name": "test_citext",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_utc_datetime": {
            "name": "test_utc_datetime",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_parse_uuid": {
            "name": "test_parse_uuid",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "session.teardown": {
            "name": "teardown",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "CIKeyObj.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
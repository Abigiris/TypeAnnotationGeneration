{
    "libkol-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/ci_test/check_mail.py": {},
    "libkol-master/docs_source/conf.py": {
        "format_annotation": {
            "name": "format_annotation",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "annotation": []
            }
        }
    },
    "libkol-master/examples/chat.py": {},
    "libkol-master/examples/combat.py": {},
    "libkol-master/examples/max.py": {},
    "libkol-master/examples/noncombat.py": {},
    "libkol-master/libkol/Bonus.py": {},
    "libkol-master/libkol/CharacterClass.py": {
        "CharacterClass.stat": {
            "name": "stat",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharacterClass.has_value": {
            "name": "has_value",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str"
                ]
            }
        },
        "CharacterClass.from_title": {
            "name": "from_title",
            "location": 39,
            "return": [
                "_TCharacterClass"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCharacterClass]"
                ],
                "title": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/Chat.py": {
        "Chat.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/Clan.py": {
        "Clan.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": [],
                "name": []
            }
        },
        "Clan.__ge__": {
            "name": "__ge__",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "libkol-master/libkol/Effect.py": {},
    "libkol-master/libkol/Element.py": {
        "Element.damage": {
            "name": "damage",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.resistance": {
            "name": "resistance",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.immunity": {
            "name": "immunity",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Error.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "wait": [
                    "Optional[int]"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Familiar.py": {
        "FamiliarMeta.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [
                "asyncio.futures.Future"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Familiar.__ge__": {
            "name": "__ge__",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Familiar.have": {
            "name": "have",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Familiar.weight": {
            "name": "weight",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/FoldGroup.py": {},
    "libkol-master/libkol/Item.py": {
        "ItemMeta.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "asyncio.futures.Future"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Item.adventures": {
            "name": "adventures",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.pluralize": {
            "name": "pluralize",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.space": {
            "name": "space",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.cleans_organ": {
            "name": "cleans_organ",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.type": {
            "name": "type",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.slot": {
            "name": "slot",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.amount": {
            "name": "amount",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.equipped": {
            "name": "equipped",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.have": {
            "name": "have",
            "location": 386,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.meet_requirements": {
            "name": "meet_requirements",
            "location": 389,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Kmail.py": {
        "Kmail.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/koldate.py": {
        "KLT.utcoffset": {
            "name": "utcoffset",
            "location": 20,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "KLT.tzname": {
            "name": "tzname",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "KLT.dst": {
            "name": "dst",
            "location": 26,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "koldate.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ],
                "day": [
                    "int"
                ]
            }
        },
        "koldate.__lt__": {
            "name": "__lt__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.__lte__": {
            "name": "__lte__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.__gt__": {
            "name": "__gt__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.__gte__": {
            "name": "__gte__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.__sub__": {
            "name": "__sub__",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "koldate.COLLISION": {
            "name": "COLLISION",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.today": {
            "name": "today",
            "location": 77,
            "return": [
                "_Tkoldate"
            ],
            "arguments": {
                "cls": [
                    "Type[_Tkoldate]"
                ]
            }
        },
        "koldate.get_phase_name": {
            "name": "get_phase_name",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "phase": [
                    "int"
                ]
            }
        },
        "koldate.from_gregorian": {
            "name": "from_gregorian",
            "location": 85,
            "return": [
                "_Tkoldate"
            ],
            "arguments": {
                "cls": [
                    "Type[_Tkoldate]"
                ],
                "date": [
                    "_datetime.datetime"
                ]
            }
        },
        "koldate.get_hamburglar_light": {
            "name": "get_hamburglar_light",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "ronald_phase": [
                    "int"
                ],
                "grimace_phase": [
                    "int"
                ],
                "hamburglar_phase": [
                    "int"
                ]
            }
        },
        "koldate.jarlsberg": {
            "name": "jarlsberg",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.strftime": {
            "name": "strftime",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        },
        "koldate.days": {
            "name": "days",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.month_name": {
            "name": "month_name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.ronald_phase": {
            "name": "ronald_phase",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_phase": {
            "name": "grimace_phase",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_phase": {
            "name": "hamburglar_phase",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.ronald_light": {
            "name": "ronald_light",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_light": {
            "name": "grimace_light",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_darkness": {
            "name": "grimace_darkness",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_light": {
            "name": "hamburglar_light",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_darkness": {
            "name": "hamburglar_darkness",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.moonlight": {
            "name": "moonlight",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Location.py": {
        "Combat.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": []
            }
        }
    },
    "libkol-master/libkol/Maximizer.py": {
        "Maximizer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "Maximizer.__iadd__": {
            "name": "__iadd__",
            "location": 22,
            "return": [
                "_TMaximizer"
            ],
            "arguments": {
                "self": [
                    "_TMaximizer"
                ],
                "constraint": []
            }
        },
        "Maximizer.__isub__": {
            "name": "__isub__",
            "location": 41,
            "return": [
                "_TMaximizer"
            ],
            "arguments": {
                "self": [
                    "_TMaximizer"
                ],
                "constraint": []
            }
        },
        "Maximizer.calculate_smithsness": {
            "name": "calculate_smithsness",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "solution": [],
                "smithsness": []
            }
        },
        "Maximizer.calculate_hobo_power": {
            "name": "calculate_hobo_power",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "solution": [],
                "hobo_power": []
            }
        },
        "Maximizer.enthroned_repr": {
            "name": "enthroned_repr",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "familiar": []
            }
        },
        "Maximizer.summarise": {
            "name": "summarise",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Model.py": {},
    "libkol-master/libkol/Modifier.py": {
        "WeightedModifier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifier": [
                    "Modifier"
                ],
                "weight": [
                    "int"
                ],
                "min": [
                    "Optional[int]"
                ]
            }
        },
        "WeightedModifier.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "Modifier.__mul__": {
            "name": "__mul__",
            "location": 171,
            "return": [
                "WeightedModifier"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int"
                ]
            }
        },
        "Modifier.__ge__": {
            "name": "__ge__",
            "location": 174,
            "return": [
                "WeightedModifier"
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int"
                ]
            }
        },
        "Modifier.apply_percentage": {
            "name": "apply_percentage",
            "location": 177,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "multiplier": [
                    "float"
                ]
            }
        },
        "Modifier.sum": {
            "name": "sum",
            "location": 195,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[float]"
                ]
            }
        },
        "Modifier.normalise": {
            "name": "normalise",
            "location": 219,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        }
    },
    "libkol-master/libkol/Monster.py": {},
    "libkol-master/libkol/MonsterDrop.py": {},
    "libkol-master/libkol/MonsterImage.py": {},
    "libkol-master/libkol/Outfit.py": {},
    "libkol-master/libkol/OutfitVariant.py": {},
    "libkol-master/libkol/Phylum.py": {},
    "libkol-master/libkol/Session.py": {
        "Stats.from_tuple": {
            "name": "from_tuple",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tuple": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_file": []
            }
        },
        "Session.username": {
            "name": "username",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.user_id": {
            "name": "user_id",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.clan": {
            "name": "clan",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.adventures": {
            "name": "adventures",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.hp": {
            "name": "hp",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.max_hp": {
            "name": "max_hp",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.mp": {
            "name": "mp",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.skills": {
            "name": "skills",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.pwd": {
            "name": "pwd",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.fury": {
            "name": "fury",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.get_stat": {
            "name": "get_stat",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "stat": [],
                "buffed": []
            }
        },
        "Session.get_character_class": {
            "name": "get_character_class",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.inebriety": {
            "name": "inebriety",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.fullness": {
            "name": "fullness",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.spleenhit": {
            "name": "spleenhit",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.level": {
            "name": "level",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.effects": {
            "name": "effects",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.ascensions": {
            "name": "ascensions",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.gender": {
            "name": "gender",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiar": {
            "name": "familiar",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiar_weight": {
            "name": "familiar_weight",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.equipment": {
            "name": "equipment",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiars": {
            "name": "familiars",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.inventory": {
            "name": "inventory",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Skill.py": {
        "SkillMeta.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [
                "asyncio.futures.Future"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Skill.buff": {
            "name": "buff",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Skill.have": {
            "name": "have",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Slot.py": {
        "Slot.from_acc_number": {
            "name": "from_acc_number",
            "location": 18,
            "return": [
                "_TSlot"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSlot]"
                ],
                "num": [
                    "int"
                ]
            }
        },
        "Slot.to_acc_number": {
            "name": "to_acc_number",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.is_accessory": {
            "name": "is_accessory",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.from_db": {
            "name": "from_db",
            "location": 28,
            "return": [
                "Optional[Slot]"
            ],
            "arguments": {
                "cls": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/Stat.py": {
        "Stat.__contains__": {
            "name": "__contains__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character_class": [
                    "libkol.CharacterClass.CharacterClass"
                ]
            }
        },
        "Stat.substats": {
            "name": "substats",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Store.py": {},
    "libkol-master/libkol/Trophy.py": {},
    "libkol-master/libkol/types.py": {},
    "libkol-master/libkol/ZapGroup.py": {},
    "libkol-master/libkol/__init__.py": {
        "run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        }
    },
    "libkol-master/libkol/pattern/PatternManager.py": {
        "getOrCompilePattern": {
            "name": "getOrCompilePattern",
            "location": 16,
            "return": [
                "Pattern[Union[(bytes, str)]]"
            ],
            "arguments": {
                "patternId": []
            }
        }
    },
    "libkol-master/libkol/pattern/Patterns.py": {},
    "libkol-master/libkol/pattern/__init__.py": {},
    "libkol-master/libkol/request/adventure.py": {
        "adventure.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "location_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/ascension_history.py": {
        "get_int_cell": {
            "name": "get_int_cell",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "c": [
                    "bs4.BeautifulSoup"
                ]
            }
        },
        "ascension_history.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player_id": [
                    "int"
                ],
                "pre_ns13": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/autosell_items.py": {
        "autosell_items.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "items": [
                    "list"
                ],
                "quantity": [
                    "int"
                ],
                "all": [
                    "bool"
                ],
                "keep_one": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/cafe_consume.py": {
        "cafe_consume.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "cafe": [
                    "libkol.request.cafe_menu.Cafe"
                ],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/cafe_menu.py": {
        "cafe_menu.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "cafe": [
                    "Cafe"
                ]
            }
        }
    },
    "libkol-master/libkol/request/campground_kitchen.py": {
        "campground_kitchen.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/campground_rest.py": {
        "campground_rest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/canadia_gym.py": {
        "canadia_gym.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "turns": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/canadia_mindcontrol.py": {
        "canadia_mindcontrol.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "level": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/charpane.py": {
        "charpane.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "charpane.get_stat": {
            "name": "get_stat",
            "location": 53,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "soup": [
                    "bs4.element.Tag"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chat_channel.py": {
        "chat_channel.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/chat_receive.py": {
        "chat_receive.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "since": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chat_send.py": {
        "chat_send.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chew.py": {
        "chew.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/choice.py": {
        "choice.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "choice": [
                    "Union[(Choice, int)]"
                ],
                "option": [
                    "Union[(Option, int)]"
                ],
                "extra": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_accepting_applications.py": {
        "clan_accepting_applications.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_apply.py": {
        "clan_apply.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "clan_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_log.py": {
        "clan_log.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_log.parse_clan_log": {
            "name": "parse_clan_log",
            "location": 115,
            "return": [
                "ClanLog"
            ],
            "arguments": {
                "cls": [],
                "raw_log": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_member_boot.py": {
        "clan_member_boot.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user_id": [
                    "Union[(int, List[int])]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raids.py": {
        "clan_raids.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_raids.dungeon_name_id_from_title": {
            "name": "dungeon_name_id_from_title",
            "location": 23,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "comment": [
                    "List[bs4.element.Tag]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raids_previous.py": {
        "clan_raids_previous.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "page": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raid_log.py": {
        "clan_raid_log.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "raid_id": [
                    "int"
                ]
            }
        },
        "clan_raid_log.center_with_no_link": {
            "name": "center_with_no_link",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "tag": []
            }
        },
        "clan_raid_log.parse_raid_log": {
            "name": "parse_raid_log",
            "location": 457,
            "return": [
                "Optional[Event]"
            ],
            "arguments": {
                "cls": [],
                "raw_log": [
                    "str"
                ]
            }
        },
        "clan_raid_log.parse_raid": {
            "name": "parse_raid",
            "location": 484,
            "return": [
                "Raid"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "id": [
                    "int"
                ],
                "raid": [
                    "bs4.element.Tag"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_ranks.py": {
        "clan_ranks.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_ranks.parse_privileges": {
            "name": "parse_privileges",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "container": [
                    "bs4.element.Tag"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus.py": {
        "Furniture.has_value": {
            "name": "has_value",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "clan_rumpus.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_effect.py": {
        "clan_rumpus_effect.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "type": [
                    "Type"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_gym.py": {
        "clan_rumpus_gym.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "stat": [
                    "libkol.Stat.Stat"
                ],
                "turns": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_item.py": {
        "clan_rumpus_item.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "furniture": [
                    "ItemFurniture"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_meat.py": {
        "clan_rumpus_meat.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "furniture": [
                    "MeatFurniture"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_sofa.py": {
        "clan_rumpus_sofa.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "turns": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_search.py": {
        "clan_search.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "str"
                ],
                "nameonly": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_show.py": {
        "clan_show.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash.py": {
        "clan_stash.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_item_add.py": {
        "clan_stash_item_add.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "items": [
                    "List[libkol.types.ItemQuantity]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_item_remove.py": {
        "clan_stash_item_remove.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item_id": [
                    "int"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_meat_add.py": {
        "clan_stash_meat_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_crimbotree.py": {
        "clan_vip_crimbotree.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_klaw.py": {
        "clan_vip_klaw.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_lookingglass.py": {
        "clan_vip_lookingglass.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist.py": {
        "clan_whitelist.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist_add.py": {
        "clan_whitelist_add.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user": [
                    "Union[(int, str)]"
                ],
                "rank": [
                    "int"
                ],
                "title": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist_remove.py": {
        "clan_whitelist_remove.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user": [
                    "Union[(int, str)]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_item_add.py": {
        "closet_item_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_meat_add.py": {
        "closet_meat_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_meat_remove.py": {
        "closet_meat_remove.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "amount": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/combat.py": {
        "combat.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "action": [
                    "CombatAction"
                ],
                "skill": [
                    "Optional[libkol.Skill.Skill]"
                ],
                "item": []
            }
        },
        "combat.parse_damage": {
            "name": "parse_damage",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "log": [
                    "str"
                ]
            }
        },
        "combat.parse_event": {
            "name": "parse_event",
            "location": 148,
            "return": [
                "CombatEvent"
            ],
            "arguments": {
                "cls": [],
                "line": [
                    "bs4.element.Tag"
                ]
            }
        }
    },
    "libkol-master/libkol/request/craft.py": {
        "craft.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "mode": [
                    "Mode"
                ],
                "ingredients": [
                    "Tuple[(Any, Any)]"
                ],
                "quantity": [
                    "int"
                ],
                "max": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/craft_paste.py": {
        "craft_paste.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/curse.py": {
        "curse.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player": [
                    "Union[(int, str)]"
                ],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/display_case_add_items.py": {
        "display_case_add_items.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "items": [
                    "List[libkol.types.ItemQuantity]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/drink.py": {
        "drink.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "utensil": []
            }
        }
    },
    "libkol-master/libkol/request/eat.py": {
        "eat.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "utensil": []
            }
        }
    },
    "libkol-master/libkol/request/equip.py": {
        "equip.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "slot": [
                    "libkol.Slot.Slot"
                ]
            }
        }
    },
    "libkol-master/libkol/request/equipment.py": {
        "equipment.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/familiar.py": {
        "familiar.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/guild_malus.py": {
        "guild_malus.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/guild_train.py": {
        "guild_train.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "skill": [
                    "libkol.Skill.Skill"
                ]
            }
        }
    },
    "libkol-master/libkol/request/hermit_menu.py": {
        "hermit_menu.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/hermit_trade.py": {
        "hermit_trade.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/homepage.py": {
        "homepage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "server_number": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/inventory.py": {
        "inventory.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/item_description.py": {
        "item_description.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "descid": []
            }
        }
    },
    "libkol-master/libkol/request/item_discard.py": {
        "item_discard.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/item_information.py": {
        "item_information.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item_id": []
            }
        }
    },
    "libkol-master/libkol/request/item_multi_use.py": {
        "item_multi_use.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_search.py": {
        "item_search.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [],
                "category": [
                    "Category"
                ],
                "sort_items_by": [
                    "SortBy"
                ],
                "tiers": [
                    "List[Tier]"
                ],
                "consumable_by_me": [
                    "bool"
                ],
                "weapon_attribute": [
                    "int"
                ],
                "weapon_hands": [
                    "int"
                ],
                "wearable_by_me": [
                    "bool"
                ],
                "start": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_use.py": {
        "item_use.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/kmail_delete.py": {
        "kmail_delete.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "message_ids": [
                    "List[int]"
                ],
                "box": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/kmail_get.py": {
        "kmail_get.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "box": [
                    "str"
                ],
                "page": [
                    "int"
                ],
                "messages_per_page": [
                    "int"
                ],
                "oldest_first": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/kmail_send.py": {
        "kmail_send.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "recipient": [
                    "Union[(int, str)]"
                ],
                "message": [
                    "str"
                ],
                "items": [
                    "List[libkol.types.ItemQuantity]"
                ],
                "meat": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/login.py": {
        "login.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "challenge": [
                    "str"
                ],
                "stealth": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/logout.py": {
        "logout.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/main.py": {
        "main.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/mall_price.py": {
        "mall_price.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/mall_purchase.py": {
        "mall_purchase.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "listing": [
                    "libkol.types.Listing"
                ],
                "store_id": [
                    "int"
                ],
                "item": [],
                "price": [
                    "int"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/mall_search.py": {
        "mall_search.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [],
                "category": [
                    "Category"
                ],
                "no_limits": [
                    "bool"
                ],
                "max_price": [
                    "int"
                ],
                "num_results": [
                    "int"
                ],
                "sort_items_by": [
                    "SortBy"
                ],
                "sort_shops_by": [
                    "SortBy"
                ],
                "tiers": [
                    "List[Tier]"
                ],
                "consumable_by_me": [
                    "bool"
                ],
                "weapon_attribute": [
                    "int"
                ],
                "weapon_hands": [
                    "int"
                ],
                "wearable_by_me": [
                    "bool"
                ],
                "start": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/mall_transactions.py": {
        "mall_transactions.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/mining.py": {
        "mining.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "mine": [
                    "int"
                ],
                "reset": [
                    "bool"
                ],
                "coords": [
                    "Optional[Tuple[(int, int)]]"
                ]
            }
        },
        "mining.parse_mine": {
            "name": "parse_mine",
            "location": 56,
            "return": [
                "List[List[MiningSpotType]]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/npc_buy.py": {
        "npc_buy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "store": [
                    "libkol.Store.Store"
                ],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/player_profile.py": {
        "player_profile.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/player_search.py": {
        "player_search.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "str"
                ],
                "query_type": [
                    "QueryType"
                ],
                "pvp_only": [
                    "bool"
                ],
                "hardcore_only": [
                    "bool"
                ],
                "level": [
                    "int"
                ],
                "fame": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/pulverize.py": {
        "pulverize.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/questlog.py": {
        "questlog.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "page": [
                    "QuestPage"
                ]
            }
        }
    },
    "libkol-master/libkol/request/request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/skills.py": {
        "skills.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/skill_use.py": {
        "skill_use.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "skill": [
                    "libkol.Skill.Skill"
                ],
                "times": [
                    "int"
                ],
                "target": [
                    "Optional[int]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/status.py": {
        "status.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/store_inventory.py": {
        "store_inventory.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/store_item_add.py": {
        "store_item_add.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ],
                "limit": [
                    "int"
                ],
                "price": [
                    "int"
                ],
                "from_hangks": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/store_item_remove.py": {
        "store_item_remove.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/store_item_update.py": {
        "store_item_update.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "listings": [
                    "List[libkol.request.store_inventory.Listing]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_cancel.py": {
        "trade_cancel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": [
                    "int"
                ],
                "status": [
                    "libkol.request.trade_pending.Status"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_offer_decline.py": {
        "trade_offer_decline.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_pending.py": {
        "trade_pending.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/trade_propose.py": {
        "trade_propose.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user_id": [
                    "int"
                ],
                "item_quantities": [
                    "List[libkol.types.ItemQuantity]"
                ],
                "meat": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_respond.py": {
        "trade_respond.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "int"
                ],
                "item_quantities": [
                    "List[libkol.types.ItemQuantity]"
                ],
                "meat": [
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_response_accept.py": {
        "trade_response_accept.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_response_decline.py": {
        "trade_response_decline.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trophy.py": {
        "trophy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/trophy_buy.py": {
        "trophy_buy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trophy": [
                    "libkol.Trophy.Trophy"
                ]
            }
        }
    },
    "libkol-master/libkol/request/uneffect.py": {
        "uneffect.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "effect_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/unequip.py": {
        "unequip.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "slot": [
                    "libkol.Slot.Slot"
                ]
            }
        }
    },
    "libkol-master/libkol/request/__init__.py": {},
    "libkol-master/libkol/staticdata/Adventures.py": {},
    "libkol-master/libkol/staticdata/Quests.py": {},
    "libkol-master/libkol/staticdata/Skills.py": {},
    "libkol-master/libkol/staticdata/__init__.py": {},
    "libkol-master/libkol/util/decorators.py": {
        "logged_in": {
            "name": "logged_in",
            "location": 6,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "logged_in._decorator": {
            "name": "_decorator",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/util/EnumField.py": {
        "EnumField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "Type[enum.Enum]"
                ]
            }
        },
        "EnumField.to_db_value": {
            "name": "to_db_value",
            "location": 20,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[enum.Enum]"
                ],
                "instance": []
            }
        },
        "EnumField.to_python_value": {
            "name": "to_python_value",
            "location": 23,
            "return": [
                "Optional[enum.Enum]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        }
    },
    "libkol-master/libkol/util/expression.py": {
        "arg_encode": {
            "name": "arg_encode",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "arg_decode": {
            "name": "arg_decode",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "expression_string": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/parsing.py": {
        "panel": {
            "name": "panel",
            "location": 15,
            "return": [
                "Optional[bs4.element.Tag]"
            ],
            "arguments": {
                "html": [
                    "str"
                ],
                "title": [
                    "str"
                ]
            }
        },
        "get_value": {
            "name": "get_value",
            "location": 22,
            "return": [
                "Optional[bs4.element.Tag]"
            ],
            "arguments": {
                "soup": [
                    "bs4.element.Tag"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "to_float": {
            "name": "to_float",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "to_int": {
            "name": "to_int",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "wrap_elements": {
            "name": "wrap_elements",
            "location": 37,
            "return": [
                "bs4.element.Tag"
            ],
            "arguments": {
                "wrapper": [
                    "bs4.element.Tag"
                ],
                "elements": [
                    "List[bs4.element.Tag]"
                ]
            }
        },
        "split_by_br": {
            "name": "split_by_br",
            "location": 45,
            "return": [
                "list"
            ],
            "arguments": {
                "element": [
                    "bs4.element.Tag"
                ],
                "wrapper": [
                    "bs4.element.Tag"
                ]
            }
        },
        "meat": {
            "name": "meat",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "text": []
            }
        },
        "substat": {
            "name": "substat",
            "location": 122,
            "return": [
                "Dict[(libkol.Stat.Stat, int)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "stats": {
            "name": "stats",
            "location": 140,
            "return": [
                "Dict[(libkol.Stat.Stat, int)]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "level": {
            "name": "level",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "hp": {
            "name": "hp",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "mp": {
            "name": "mp",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "inebriety": {
            "name": "inebriety",
            "location": 188,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "adventures": {
            "name": "adventures",
            "location": 193,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "effects": {
            "name": "effects",
            "location": 198,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/PickleField.py": {
        "save_function": {
            "name": "save_function",
            "location": 10,
            "return": [],
            "arguments": {
                "pickler": [],
                "obj": []
            }
        },
        "PickleField.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleField.encode": {
            "name": "encode",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "PickleField.to_db_value": {
            "name": "to_db_value",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "PickleField.to_python_value": {
            "name": "to_python_value",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/__init__.py": {},
    "libkol-master/stubs/bs4/dammit.py": {
        "chardet_dammit": {
            "name": "chardet_dammit",
            "location": 10,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "EntitySubstitution.quoted_attribute_value": {
            "name": "quoted_attribute_value",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_xml_containing_entities": {
            "name": "substitute_xml_containing_entities",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "EncodingDetector.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "EncodingDetector.encodings": {
            "name": "encodings",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodingDetector.strip_byte_order_mark": {
            "name": "strip_byte_order_mark",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "EncodingDetector.find_declared_encoding": {
            "name": "find_declared_encoding",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "markup": [],
                "is_html": [],
                "search_entire_document": []
            }
        },
        "UnicodeDammit.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "smart_quotes_to": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "UnicodeDammit.declared_html_encoding": {
            "name": "declared_html_encoding",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeDammit.find_codec": {
            "name": "find_codec",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit.detwingle": {
            "name": "detwingle",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "in_bytes": [],
                "main_encoding": [],
                "embedded_encoding": []
            }
        }
    },
    "libkol-master/stubs/bs4/diagnose.py": {
        "diagnose": {
            "name": "diagnose",
            "location": 10,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "lxml_trace": {
            "name": "lxml_trace",
            "location": 11,
            "return": [],
            "arguments": {
                "data": [],
                "html": []
            }
        },
        "htmlparser_trace": {
            "name": "htmlparser_trace",
            "location": 24,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "rword": {
            "name": "rword",
            "location": 25,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "rsentence": {
            "name": "rsentence",
            "location": 26,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "rdoc": {
            "name": "rdoc",
            "location": 27,
            "return": [],
            "arguments": {
                "num_elements": []
            }
        },
        "benchmark_parsers": {
            "name": "benchmark_parsers",
            "location": 28,
            "return": [],
            "arguments": {
                "num_elements": []
            }
        },
        "profile": {
            "name": "profile",
            "location": 29,
            "return": [],
            "arguments": {
                "num_elements": [],
                "parser": []
            }
        },
        "AnnouncingParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "AnnouncingParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_data": {
            "name": "handle_data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_charref": {
            "name": "handle_charref",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_entityref": {
            "name": "handle_entityref",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_comment": {
            "name": "handle_comment",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_decl": {
            "name": "handle_decl",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.unknown_decl": {
            "name": "unknown_decl",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_pi": {
            "name": "handle_pi",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "libkol-master/stubs/bs4/element.py": {
        "NamespacedAttribute.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "prefix": [],
                "name": [],
                "namespace": []
            }
        },
        "CharsetMetaAttributeValue.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "original_value": []
            }
        },
        "ContentMetaAttributeValue.__new__": {
            "name": "__new__",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "original_value": []
            }
        },
        "HTMLAwareEntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "ns": []
            }
        },
        "Formatter.substitute_entities": {
            "name": "substitute_entities",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLFormatter.substitute": {
            "name": "substitute",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinimalHTMLFormatter.substitute": {
            "name": "substitute",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLFormatter.substitute": {
            "name": "substitute",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLXMLFormatter.substitute": {
            "name": "substitute",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.format_string": {
            "name": "format_string",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "formatter": []
            }
        },
        "PageElement.setup": {
            "name": "setup",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "previous_element": [],
                "next_element": [],
                "previous_sibling": [],
                "next_sibling": []
            }
        },
        "PageElement.replace_with": {
            "name": "replace_with",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "replace_with": []
            }
        },
        "PageElement.unwrap": {
            "name": "unwrap",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.wrap": {
            "name": "wrap",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "wrap_inside": []
            }
        },
        "PageElement.extract": {
            "name": "extract",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.insert": {
            "name": "insert",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "new_child": []
            }
        },
        "PageElement.append": {
            "name": "append",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "PageElement.extend": {
            "name": "extend",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "PageElement.insert_before": {
            "name": "insert_before",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.insert_after": {
            "name": "insert_after",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.find_next": {
            "name": "find_next",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_all_next": {
            "name": "find_all_next",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_next_sibling": {
            "name": "find_next_sibling",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_next_siblings": {
            "name": "find_next_siblings",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_previous": {
            "name": "find_previous",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_all_previous": {
            "name": "find_all_previous",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_previous_sibling": {
            "name": "find_previous_sibling",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_previous_siblings": {
            "name": "find_previous_siblings",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_parent": {
            "name": "find_parent",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "PageElement.find_parents": {
            "name": "find_parents",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "limit": []
            }
        },
        "PageElement.next": {
            "name": "next",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous": {
            "name": "previous",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_elements": {
            "name": "next_elements",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_siblings": {
            "name": "next_siblings",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_elements": {
            "name": "previous_elements",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_siblings": {
            "name": "previous_siblings",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parents": {
            "name": "parents",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextGenerator": {
            "name": "nextGenerator",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextSiblingGenerator": {
            "name": "nextSiblingGenerator",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousGenerator": {
            "name": "previousGenerator",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousSiblingGenerator": {
            "name": "previousSiblingGenerator",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parentGenerator": {
            "name": "parentGenerator",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__new__": {
            "name": "__new__",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "NavigableString.__copy__": {
            "name": "__copy__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__getattr__": {
            "name": "__getattr__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "NavigableString.output_ready": {
            "name": "output_ready",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": []
            }
        },
        "NavigableString.name": {
            "name": "name",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PreformattedString.output_ready": {
            "name": "output_ready",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": []
            }
        },
        "Doctype.for_name_and_ids": {
            "name": "for_name_and_ids",
            "location": 159,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "pub_id": [],
                "system_id": []
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "builder": [],
                "name": [],
                "namespace": [],
                "prefix": [],
                "attrs": [],
                "parent": [],
                "previous": [],
                "is_xml": []
            }
        },
        "Tag.__copy__": {
            "name": "__copy__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.is_empty_element": {
            "name": "is_empty_element",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.string": {
            "name": "string",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Tag.stripped_strings": {
            "name": "stripped_strings",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_text": {
            "name": "get_text",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "separator": [],
                "strip": [],
                "types": []
            }
        },
        "Tag.decompose": {
            "name": "decompose",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.clear": {
            "name": "clear",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "decompose": []
            }
        },
        "Tag.index": {
            "name": "index",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "Tag.get": {
            "name": "get",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Tag.get_attribute_list": {
            "name": "get_attribute_list",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Tag.has_attr": {
            "name": "has_attr",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__hash__": {
            "name": "__hash__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getitem__": {
            "name": "__getitem__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__iter__": {
            "name": "__iter__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__len__": {
            "name": "__len__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__contains__": {
            "name": "__contains__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Tag.__bool__": {
            "name": "__bool__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__setitem__": {
            "name": "__setitem__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Tag.__delitem__": {
            "name": "__delitem__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__call__": {
            "name": "__call__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getattr__": {
            "name": "__getattr__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Tag.__eq__": {
            "name": "__eq__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tag.__ne__": {
            "name": "__ne__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tag.__unicode__": {
            "name": "__unicode__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.encode": {
            "name": "encode",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "indent_level": [],
                "formatter": [],
                "errors": []
            }
        },
        "Tag.decode": {
            "name": "decode",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "eventual_encoding": [],
                "formatter": []
            }
        },
        "Tag.prettify": {
            "name": "prettify",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "formatter": []
            }
        },
        "Tag.decode_contents": {
            "name": "decode_contents",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "eventual_encoding": [],
                "formatter": []
            }
        },
        "Tag.encode_contents": {
            "name": "encode_contents",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "encoding": [],
                "formatter": []
            }
        },
        "Tag.renderContents": {
            "name": "renderContents",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "prettyPrint": [],
                "indentLevel": []
            }
        },
        "Tag.find": {
            "name": "find",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "recursive": [],
                "text": []
            }
        },
        "Tag.find_all": {
            "name": "find_all",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "recursive": [],
                "text": [],
                "limit": []
            }
        },
        "Tag.children": {
            "name": "children",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.descendants": {
            "name": "descendants",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.select_one": {
            "name": "select_one",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "namespaces": []
            }
        },
        "Tag.select": {
            "name": "select",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "namespaces": [],
                "limit": []
            }
        },
        "Tag.childGenerator": {
            "name": "childGenerator",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.recursiveChildGenerator": {
            "name": "recursiveChildGenerator",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.has_key": {
            "name": "has_key",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SoupStrainer.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "SoupStrainer.search_tag": {
            "name": "search_tag",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "markup_name": [],
                "markup_attrs": []
            }
        },
        "SoupStrainer.search": {
            "name": "search",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "ResultSet.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "result": []
            }
        },
        "ResultSet.__getattr__": {
            "name": "__getattr__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "libkol-master/stubs/bs4/__init__.py": {
        "BeautifulSoup.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "features": [],
                "builder": [],
                "parse_only": [],
                "from_encoding": [],
                "exclude_encodings": []
            }
        },
        "BeautifulSoup.__copy__": {
            "name": "__copy__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.reset": {
            "name": "reset",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.new_tag": {
            "name": "new_tag",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "namespace": [],
                "nsprefix": [],
                "attrs": []
            }
        },
        "BeautifulSoup.new_string": {
            "name": "new_string",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "subclass": []
            }
        },
        "BeautifulSoup.popTag": {
            "name": "popTag",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.pushTag": {
            "name": "pushTag",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "BeautifulSoup.endData": {
            "name": "endData",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "containerClass": []
            }
        },
        "BeautifulSoup.object_was_parsed": {
            "name": "object_was_parsed",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "o": [],
                "parent": [],
                "most_recent_element": []
            }
        },
        "BeautifulSoup.handle_starttag": {
            "name": "handle_starttag",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "namespace": [],
                "nsprefix": [],
                "attrs": []
            }
        },
        "BeautifulSoup.handle_endtag": {
            "name": "handle_endtag",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "nsprefix": []
            }
        },
        "BeautifulSoup.handle_data": {
            "name": "handle_data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulStoneSoup.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/builder/_htmlparser.py": {
        "BeautifulSoupHTMLParser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoupHTMLParser.error": {
            "name": "error",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "BeautifulSoupHTMLParser.handle_startendtag": {
            "name": "handle_startendtag",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "BeautifulSoupHTMLParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "handle_empty_element": []
            }
        },
        "BeautifulSoupHTMLParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "check_already_closed": []
            }
        },
        "BeautifulSoupHTMLParser.handle_data": {
            "name": "handle_data",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_charref": {
            "name": "handle_charref",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BeautifulSoupHTMLParser.handle_entityref": {
            "name": "handle_entityref",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BeautifulSoupHTMLParser.handle_comment": {
            "name": "handle_comment",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_decl": {
            "name": "handle_decl",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.unknown_decl": {
            "name": "unknown_decl",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_pi": {
            "name": "handle_pi",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HTMLParserTreeBuilder.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": [],
                "exclude_encodings": []
            }
        },
        "HTMLParserTreeBuilder.feed": {
            "name": "feed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        }
    },
    "libkol-master/stubs/bs4/builder/__init__.py": {
        "TreeBuilderRegistry.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilderRegistry.register": {
            "name": "register",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "treebuilder_class": []
            }
        },
        "TreeBuilderRegistry.lookup": {
            "name": "lookup",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.initialize_soup": {
            "name": "initialize_soup",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "soup": []
            }
        },
        "TreeBuilder.reset": {
            "name": "reset",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.can_be_empty_element": {
            "name": "can_be_empty_element",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "TreeBuilder.feed": {
            "name": "feed",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "TreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": []
            }
        },
        "TreeBuilder.test_fragment_to_document": {
            "name": "test_fragment_to_document",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "TreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "SAXTreeBuilder.feed": {
            "name": "feed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SAXTreeBuilder.close": {
            "name": "close",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.startElement": {
            "name": "startElement",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElement": {
            "name": "endElement",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SAXTreeBuilder.startElementNS": {
            "name": "startElementNS",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElementNS": {
            "name": "endElementNS",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": []
            }
        },
        "SAXTreeBuilder.startPrefixMapping": {
            "name": "startPrefixMapping",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "nodeValue": []
            }
        },
        "SAXTreeBuilder.endPrefixMapping": {
            "name": "endPrefixMapping",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SAXTreeBuilder.characters": {
            "name": "characters",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SAXTreeBuilder.startDocument": {
            "name": "startDocument",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.endDocument": {
            "name": "endDocument",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_builder_registry.py": {
        "BuiltInRegistryTest.test_combination": {
            "name": "test_combination",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_lookup_by_markup_type": {
            "name": "test_lookup_by_markup_type",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_named_library": {
            "name": "test_named_library",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_beautifulsoup_constructor_does_lookup": {
            "name": "test_beautifulsoup_constructor_does_lookup",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.builder_for_features": {
            "name": "builder_for_features",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_register_with_no_features": {
            "name": "test_register_with_no_features",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_register_with_features_makes_lookup_succeed": {
            "name": "test_register_with_features_makes_lookup_succeed",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_no_builder_implements_feature": {
            "name": "test_lookup_fails_when_no_builder_implements_feature",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_gets_most_recent_registration_when_no_feature_specified": {
            "name": "test_lookup_gets_most_recent_registration_when_no_feature_specified",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_no_tree_builders_registered": {
            "name": "test_lookup_fails_when_no_tree_builders_registered",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_gets_most_recent_builder_supporting_all_features": {
            "name": "test_lookup_gets_most_recent_builder_supporting_all_features",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_cannot_reconcile_requested_features": {
            "name": "test_lookup_fails_when_cannot_reconcile_requested_features",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_docs.py": {},
    "libkol-master/stubs/bs4/tests/test_html5lib.py": {
        "HTML5LibBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_soupstrainer": {
            "name": "test_soupstrainer",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_correctly_nested_tables": {
            "name": "test_correctly_nested_tables",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_xml_declaration_followed_by_doctype": {
            "name": "test_xml_declaration_followed_by_doctype",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup": {
            "name": "test_reparented_markup",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_ends_with_whitespace": {
            "name": "test_reparented_markup_ends_with_whitespace",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_containing_identical_whitespace_nodes": {
            "name": "test_reparented_markup_containing_identical_whitespace_nodes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_containing_children": {
            "name": "test_reparented_markup_containing_children",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_processing_instruction": {
            "name": "test_processing_instruction",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_cloned_multivalue_node": {
            "name": "test_cloned_multivalue_node",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_foster_parenting": {
            "name": "test_foster_parenting",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_extraction": {
            "name": "test_extraction",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_empty_comment": {
            "name": "test_empty_comment",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_htmlparser.py": {
        "HTMLParserTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_namespaced_system_doctype": {
            "name": "test_namespaced_system_doctype",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_namespaced_public_doctype": {
            "name": "test_namespaced_public_doctype",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_builder_is_pickled": {
            "name": "test_builder_is_pickled",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_redundant_empty_element_closing_tags": {
            "name": "test_redundant_empty_element_closing_tags",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_empty_element": {
            "name": "test_empty_element",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTMLParserSubclass.test_error": {
            "name": "test_error",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_lxml.py": {
        "LXMLTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_out_of_range_entity": {
            "name": "test_out_of_range_entity",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_entities_in_foreign_document_encoding": {
            "name": "test_entities_in_foreign_document_encoding",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_empty_doctype": {
            "name": "test_empty_doctype",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_beautifulstonesoup_is_xml_parser": {
            "name": "test_beautifulstonesoup_is_xml_parser",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLXMLTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLXMLTreeBuilderSmokeTest.test_namespace_indexing": {
            "name": "test_namespace_indexing",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_soup.py": {
        "TestConstructor.test_short_unicode_input": {
            "name": "test_short_unicode_input",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstructor.test_embedded_null": {
            "name": "test_embedded_null",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstructor.test_exclude_encodings": {
            "name": "test_exclude_encodings",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warning_if_no_parser_specified": {
            "name": "test_warning_if_no_parser_specified",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warning_if_parser_specified_too_vague": {
            "name": "test_warning_if_parser_specified_too_vague",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_no_warning_if_explicit_parser_specified": {
            "name": "test_no_warning_if_explicit_parser_specified",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_parseOnlyThese_renamed_to_parse_only": {
            "name": "test_parseOnlyThese_renamed_to_parse_only",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_fromEncoding_renamed_to_from_encoding": {
            "name": "test_fromEncoding_renamed_to_from_encoding",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_unrecognized_keyword_argument": {
            "name": "test_unrecognized_keyword_argument",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_disk_file_warning": {
            "name": "test_disk_file_warning",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_bytes_url": {
            "name": "test_url_warning_with_bytes_url",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_unicode_url": {
            "name": "test_url_warning_with_unicode_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_bytes_and_space": {
            "name": "test_url_warning_with_bytes_and_space",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_unicode_and_space": {
            "name": "test_url_warning_with_unicode_and_space",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveParsing.test_parse_with_soupstrainer": {
            "name": "test_parse_with_soupstrainer",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_simple_html_substitution": {
            "name": "test_simple_html_substitution",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_smart_quote_substitution": {
            "name": "test_smart_quote_substitution",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false": {
            "name": "test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_normally_uses_double_quotes": {
            "name": "test_xml_attribute_quoting_normally_uses_double_quotes",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes": {
            "name": "test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes": {
            "name": "test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quotes_arent_escaped_when_value_is_not_being_quoted": {
            "name": "test_xml_quotes_arent_escaped_when_value_is_not_being_quoted",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_handles_angle_brackets": {
            "name": "test_xml_quoting_handles_angle_brackets",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_handles_ampersands": {
            "name": "test_xml_quoting_handles_ampersands",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity": {
            "name": "test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity": {
            "name": "test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_quotes_not_html_substituted": {
            "name": "test_quotes_not_html_substituted",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_ascii_in_unicode_out": {
            "name": "test_ascii_in_unicode_out",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_unicode_in_unicode_out": {
            "name": "test_unicode_in_unicode_out",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_utf8_in_unicode_out": {
            "name": "test_utf8_in_unicode_out",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_utf8_out": {
            "name": "test_utf8_out",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_attribute_name_containing_unicode_characters": {
            "name": "test_attribute_name_containing_unicode_characters",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_unicode_input": {
            "name": "test_unicode_input",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_unicode": {
            "name": "test_smart_quotes_to_unicode",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_xml_entities": {
            "name": "test_smart_quotes_to_xml_entities",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_html_entities": {
            "name": "test_smart_quotes_to_html_entities",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_ascii": {
            "name": "test_smart_quotes_to_ascii",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detect_utf8": {
            "name": "test_detect_utf8",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_convert_hebrew": {
            "name": "test_convert_hebrew",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_dont_see_smart_quotes_where_there_are_none": {
            "name": "test_dont_see_smart_quotes_where_there_are_none",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_ignore_inappropriate_codecs": {
            "name": "test_ignore_inappropriate_codecs",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_ignore_invalid_codecs": {
            "name": "test_ignore_invalid_codecs",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_exclude_encodings": {
            "name": "test_exclude_encodings",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character": {
            "name": "test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detect_html5_style_meta_tag": {
            "name": "test_detect_html5_style_meta_tag",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_last_ditch_entity_replacement": {
            "name": "test_last_ditch_entity_replacement",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_byte_order_mark_removed": {
            "name": "test_byte_order_mark_removed",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detwingle": {
            "name": "test_detwingle",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detwingle_ignores_multibyte_characters": {
            "name": "test_detwingle_ignores_multibyte_characters",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_name_may_be_none": {
            "name": "test_name_may_be_none",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_attribute_is_equivalent_to_colon_separated_string": {
            "name": "test_attribute_is_equivalent_to_colon_separated_string",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_attributes_are_equivalent_if_prefix_and_name_identical": {
            "name": "test_attributes_are_equivalent_if_prefix_and_name_identical",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeValueWithCharsetSubstitution.test_content_meta_attribute_value": {
            "name": "test_content_meta_attribute_value",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/test_tree.py": {
        "TreeTest.assertSelects": {
            "name": "assertSelects",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "tags": [],
                "should_match": []
            }
        },
        "TreeTest.assertSelectsIDs": {
            "name": "assertSelectsIDs",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "tags": [],
                "should_match": []
            }
        },
        "TestFind.test_find_tag": {
            "name": "test_find_tag",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_unicode_text_find": {
            "name": "test_unicode_text_find",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_unicode_attribute_find": {
            "name": "test_unicode_attribute_find",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_everything": {
            "name": "test_find_everything",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_everything_with_name": {
            "name": "test_find_everything_with_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_text_nodes": {
            "name": "test_find_all_text_nodes",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_limit": {
            "name": "test_find_all_limit",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_calling_a_tag_is_calling_findall": {
            "name": "test_calling_a_tag_is_calling_findall",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion": {
            "name": "test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_resultset": {
            "name": "test_find_all_resultset",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllBasicNamespaces.test_find_by_namespaced_name": {
            "name": "test_find_by_namespaced_name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_name": {
            "name": "test_find_all_by_tag_name",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_name_and_text": {
            "name": "test_find_all_by_name_and_text",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_on_non_root_element": {
            "name": "test_find_all_on_non_root_element",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_calling_element_invokes_find_all": {
            "name": "test_calling_element_invokes_find_all",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_strainer": {
            "name": "test_find_all_by_tag_strainer",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_names": {
            "name": "test_find_all_by_tag_names",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_dict": {
            "name": "test_find_all_by_tag_dict",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_re": {
            "name": "test_find_all_by_tag_re",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_with_tags_matching_method": {
            "name": "test_find_all_with_tags_matching_method",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_with_multi_valued_attribute": {
            "name": "test_find_with_multi_valued_attribute",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_name": {
            "name": "test_find_all_by_attribute_name",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_utf8_attribute_value": {
            "name": "test_find_all_by_utf8_attribute_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_dict": {
            "name": "test_find_all_by_attribute_dict",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_class": {
            "name": "test_find_all_by_class",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_class_when_multiple_classes_present": {
            "name": "test_find_by_class_when_multiple_classes_present",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_non_dictionary_for_attrs_finds_by_class": {
            "name": "test_find_all_with_non_dictionary_for_attrs_finds_by_class",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_string_for_attrs_finds_multiple_classes": {
            "name": "test_find_all_with_string_for_attrs_finds_multiple_classes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_soupstrainer": {
            "name": "test_find_all_by_attribute_soupstrainer",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_missing_attribute": {
            "name": "test_find_all_with_missing_attribute",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_defined_attribute": {
            "name": "test_find_all_with_defined_attribute",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_numeric_attribute": {
            "name": "test_find_all_with_numeric_attribute",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_list_attribute_values": {
            "name": "test_find_all_with_list_attribute_values",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_regular_expression_attribute_value": {
            "name": "test_find_all_with_regular_expression_attribute_value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_name_and_containing_string": {
            "name": "test_find_by_name_and_containing_string",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_name_and_containing_string_when_string_is_buried": {
            "name": "test_find_by_name_and_containing_string_when_string_is_buried",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_attribute_and_containing_string": {
            "name": "test_find_by_attribute_and_containing_string",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndex.test_index": {
            "name": "test_index",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent": {
            "name": "test_parent",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_of_top_tag_is_soup_object": {
            "name": "test_parent_of_top_tag_is_soup_object",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_soup_object_has_no_parent": {
            "name": "test_soup_object_has_no_parent",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_find_parents": {
            "name": "test_find_parents",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_find_parent": {
            "name": "test_find_parent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_of_text_element": {
            "name": "test_parent_of_text_element",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_text_element_find_parent": {
            "name": "test_text_element_find_parent",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_generator": {
            "name": "test_parent_generator",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProximityTest.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next": {
            "name": "test_next",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_of_last_item_is_none": {
            "name": "test_next_of_last_item_is_none",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_of_root_is_none": {
            "name": "test_next_of_root_is_none",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_all_next": {
            "name": "test_find_all_next",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_next": {
            "name": "test_find_next",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_next_for_text_element": {
            "name": "test_find_next_for_text_element",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_generator": {
            "name": "test_next_generator",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous": {
            "name": "test_previous",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_of_first_item_is_none": {
            "name": "test_previous_of_first_item_is_none",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_of_root_is_none": {
            "name": "test_previous_of_root_is_none",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_all_previous": {
            "name": "test_find_all_previous",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_previous": {
            "name": "test_find_previous",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_previous_for_text_element": {
            "name": "test_find_previous_for_text_element",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_generator": {
            "name": "test_previous_generator",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SiblingTest.setUp": {
            "name": "setUp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.setUp": {
            "name": "setUp",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_of_root_is_none": {
            "name": "test_next_sibling_of_root_is_none",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling": {
            "name": "test_next_sibling",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_may_not_exist": {
            "name": "test_next_sibling_may_not_exist",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_find_next_sibling": {
            "name": "test_find_next_sibling",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_siblings": {
            "name": "test_next_siblings",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_for_text_element": {
            "name": "test_next_sibling_for_text_element",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_of_root_is_none": {
            "name": "test_previous_sibling_of_root_is_none",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling": {
            "name": "test_previous_sibling",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_may_not_exist": {
            "name": "test_previous_sibling_may_not_exist",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_find_previous_sibling": {
            "name": "test_find_previous_sibling",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_siblings": {
            "name": "test_previous_siblings",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_for_text_element": {
            "name": "test_previous_sibling_for_text_element",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_tag": {
            "name": "test_new_tag",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_tag_inherits_self_closing_rules_from_builder": {
            "name": "test_tag_inherits_self_closing_rules_from_builder",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_string_creates_navigablestring": {
            "name": "test_new_string_creates_navigablestring",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_string_can_create_navigablestring_subclass": {
            "name": "test_new_string_can_create_navigablestring_subclass",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_attribute_modification": {
            "name": "test_attribute_modification",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_new_tag_creation": {
            "name": "test_new_tag_creation",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_append_to_contents_moves_tag": {
            "name": "test_append_to_contents_moves_tag",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_returns_thing_that_was_replaced": {
            "name": "test_replace_with_returns_thing_that_was_replaced",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_unwrap_returns_thing_that_was_replaced": {
            "name": "test_unwrap_returns_thing_that_was_replaced",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent": {
            "name": "test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_tag_with_itself": {
            "name": "test_replace_tag_with_itself",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_tag_with_its_parent_raises_exception": {
            "name": "test_replace_tag_with_its_parent_raises_exception",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_tag_into_itself_raises_exception": {
            "name": "test_insert_tag_into_itself_raises_exception",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_beautifulsoup_object_inserts_children": {
            "name": "test_insert_beautifulsoup_object_inserts_children",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_maintains_next_element_throughout": {
            "name": "test_replace_with_maintains_next_element_throughout",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_final_node": {
            "name": "test_replace_final_node",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_consecutive_text_nodes": {
            "name": "test_consecutive_text_nodes",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_string": {
            "name": "test_insert_string",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_tag": {
            "name": "test_insert_tag",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_append_child_thats_already_at_the_end": {
            "name": "test_append_child_thats_already_at_the_end",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extend": {
            "name": "test_extend",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_move_tag_to_beginning_of_parent": {
            "name": "test_move_tag_to_beginning_of_parent",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_works_on_empty_element_tag": {
            "name": "test_insert_works_on_empty_element_tag",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_before": {
            "name": "test_insert_before",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_multiple_before": {
            "name": "test_insert_multiple_before",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_after": {
            "name": "test_insert_after",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_multiple_after": {
            "name": "test_insert_multiple_after",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_after_raises_exception_if_after_has_no_meaning": {
            "name": "test_insert_after_raises_exception_if_after_has_no_meaning",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_before_raises_notimplementederror_if_before_has_no_meaning": {
            "name": "test_insert_before_raises_notimplementederror_if_before_has_no_meaning",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with": {
            "name": "test_replace_with",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_first_child": {
            "name": "test_replace_first_child",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_last_child": {
            "name": "test_replace_last_child",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_nested_tag_replace_with": {
            "name": "test_nested_tag_replace_with",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_unwrap": {
            "name": "test_unwrap",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap": {
            "name": "test_wrap",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap_extracts_tag_from_elsewhere": {
            "name": "test_wrap_extracts_tag_from_elsewhere",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap_puts_new_contents_at_the_end": {
            "name": "test_wrap_puts_new_contents_at_the_end",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract": {
            "name": "test_extract",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_distinguishes_between_identical_strings": {
            "name": "test_extract_distinguishes_between_identical_strings",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_multiples_of_same_tag": {
            "name": "test_extract_multiples_of_same_tag",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_works_when_element_is_surrounded_by_identical_strings": {
            "name": "test_extract_works_when_element_is_surrounded_by_identical_strings",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_clear": {
            "name": "test_clear",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_string_set": {
            "name": "test_string_set",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_string_set_does_not_affect_original_string": {
            "name": "test_string_set_does_not_affect_original_string",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_set_string_preserves_class_of_string": {
            "name": "test_set_string_preserves_class_of_string",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_len": {
            "name": "test_len",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_member_access_invokes_find": {
            "name": "test_member_access_invokes_find",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_deprecated_member_access": {
            "name": "test_deprecated_member_access",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_has_attr": {
            "name": "test_has_attr",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_attributes_come_out_in_alphabetical_order": {
            "name": "test_attributes_come_out_in_alphabetical_order",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_string": {
            "name": "test_string",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_empty_tag_has_no_string": {
            "name": "test_empty_tag_has_no_string",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_tag_with_multiple_children_has_no_string": {
            "name": "test_tag_with_multiple_children_has_no_string",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_tag_with_recursive_string_has_string": {
            "name": "test_tag_with_recursive_string_has_string",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_lack_of_string": {
            "name": "test_lack_of_string",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_all_text": {
            "name": "test_all_text",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_get_text_ignores_comments": {
            "name": "test_get_text_ignores_comments",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_all_strings_ignores_comments": {
            "name": "test_all_strings_ignores_comments",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_single_value_becomes_list": {
            "name": "test_single_value_becomes_list",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_multiple_values_becomes_list": {
            "name": "test_multiple_values_becomes_list",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_multiple_values_separated_by_weird_whitespace": {
            "name": "test_multiple_values_separated_by_weird_whitespace",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_attributes_joined_into_string_on_output": {
            "name": "test_attributes_joined_into_string_on_output",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_get_attribute_list": {
            "name": "test_get_attribute_list",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_accept_charset": {
            "name": "test_accept_charset",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_cdata_attribute_applying_only_to_one_tag": {
            "name": "test_cdata_attribute_applying_only_to_one_tag",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_string_has_immutable_name_property": {
            "name": "test_string_has_immutable_name_property",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.setUp": {
            "name": "setUp",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_pickle_and_unpickle_identity": {
            "name": "test_pickle_and_unpickle_identity",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_deepcopy_identity": {
            "name": "test_deepcopy_identity",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_preserves_encoding": {
            "name": "test_copy_preserves_encoding",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_unicode_pickle": {
            "name": "test_unicode_pickle",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_navigablestring_is_not_attached_to_tree": {
            "name": "test_copy_navigablestring_is_not_attached_to_tree",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_navigablestring_subclass_has_same_type": {
            "name": "test_copy_navigablestring_subclass_has_same_type",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_entire_soup": {
            "name": "test_copy_entire_soup",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_tag_copies_contents": {
            "name": "test_copy_tag_copies_contents",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_default_formatter_is_minimal": {
            "name": "test_default_formatter_is_minimal",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_html": {
            "name": "test_formatter_html",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_html5": {
            "name": "test_formatter_html5",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_minimal": {
            "name": "test_formatter_minimal",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_null": {
            "name": "test_formatter_null",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_custom": {
            "name": "test_formatter_custom",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_is_run_on_attribute_values": {
            "name": "test_formatter_is_run_on_attribute_values",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_skips_script_tag_for_html_documents": {
            "name": "test_formatter_skips_script_tag_for_html_documents",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_skips_style_tag_for_html_documents": {
            "name": "test_formatter_skips_style_tag_for_html_documents",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_leaves_preformatted_text_alone": {
            "name": "test_prettify_leaves_preformatted_text_alone",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_accepts_formatter_function": {
            "name": "test_prettify_accepts_formatter_function",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_outputs_unicode_by_default": {
            "name": "test_prettify_outputs_unicode_by_default",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_can_encode_data": {
            "name": "test_prettify_can_encode_data",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_html_entity_substitution_off_by_default": {
            "name": "test_html_entity_substitution_off_by_default",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_encoding_substitution": {
            "name": "test_encoding_substitution",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_encoding_substitution_doesnt_happen_if_tag_is_strained": {
            "name": "test_encoding_substitution_doesnt_happen_if_tag_is_strained",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_unicode_string_can_be_encoded": {
            "name": "test_unicode_string_can_be_encoded",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_tag_containing_unicode_string_can_be_encoded": {
            "name": "test_tag_containing_unicode_string_can_be_encoded",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encoding_substitutes_unrecognized_characters_by_default": {
            "name": "test_encoding_substitutes_unrecognized_characters_by_default",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encoding_can_be_made_strict": {
            "name": "test_encoding_can_be_made_strict",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_decode_contents": {
            "name": "test_decode_contents",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encode_contents": {
            "name": "test_encode_contents",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_deprecated_renderContents": {
            "name": "test_deprecated_renderContents",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_repr": {
            "name": "test_repr",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_cdata": {
            "name": "test_cdata",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_cdata_is_never_formatted": {
            "name": "test_cdata_is_never_formatted",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_doctype_ends_in_newline": {
            "name": "test_doctype_ends_in_newline",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_declaration": {
            "name": "test_declaration",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.setUp": {
            "name": "setUp",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.assertSelects": {
            "name": "assertSelects",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "expected_ids": []
            }
        },
        "TestSoupSelector.assertSelectMultiple": {
            "name": "assertSelectMultiple",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_tag_one": {
            "name": "test_one_tag_one",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_tag_many": {
            "name": "test_one_tag_many",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_one_returns_none_if_no_match": {
            "name": "test_select_one_returns_none_if_no_match",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_in_tag_one": {
            "name": "test_tag_in_tag_one",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_in_tag_many": {
            "name": "test_tag_in_tag_many",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_limit": {
            "name": "test_limit",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_no_match": {
            "name": "test_tag_no_match",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_invalid_tag": {
            "name": "test_invalid_tag",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_tag_ids": {
            "name": "test_select_dashed_tag_ids",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_by_id": {
            "name": "test_select_dashed_by_id",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_dashed_tag_text": {
            "name": "test_dashed_tag_text",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_matches_find_all": {
            "name": "test_select_dashed_matches_find_all",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_header_tags": {
            "name": "test_header_tags",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_class_one": {
            "name": "test_class_one",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_class_mismatched_tag": {
            "name": "test_class_mismatched_tag",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_id": {
            "name": "test_one_id",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_bad_id": {
            "name": "test_bad_id",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_items_in_id": {
            "name": "test_items_in_id",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_a_bunch_of_emptys": {
            "name": "test_a_bunch_of_emptys",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multi_class_support": {
            "name": "test_multi_class_support",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multi_class_selection": {
            "name": "test_multi_class_selection",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_child_selector": {
            "name": "test_child_selector",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_child_selector_id": {
            "name": "test_child_selector_id",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_equals": {
            "name": "test_attribute_equals",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_tilde": {
            "name": "test_attribute_tilde",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_startswith": {
            "name": "test_attribute_startswith",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_endswith": {
            "name": "test_attribute_endswith",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_contains": {
            "name": "test_attribute_contains",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_exact_or_hypen": {
            "name": "test_attribute_exact_or_hypen",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_exists": {
            "name": "test_attribute_exists",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_quoted_space_in_selector_name": {
            "name": "test_quoted_space_in_selector_name",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_unsupported_pseudoclass": {
            "name": "test_unsupported_pseudoclass",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_nth_of_type": {
            "name": "test_nth_of_type",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_nth_of_type_direct_descendant": {
            "name": "test_nth_of_type_direct_descendant",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_id_child_selector_nth_of_type": {
            "name": "test_id_child_selector_nth_of_type",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_on_element": {
            "name": "test_select_on_element",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_overspecified_child_id": {
            "name": "test_overspecified_child_id",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_adjacent_sibling_selector": {
            "name": "test_adjacent_sibling_selector",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_general_sibling_selector": {
            "name": "test_general_sibling_selector",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_dangling_combinator": {
            "name": "test_dangling_combinator",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_sibling_combinator_wont_select_same_tag_twice": {
            "name": "test_sibling_combinator_wont_select_same_tag_twice",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select": {
            "name": "test_multiple_select",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_with_no_space": {
            "name": "test_multiple_select_with_no_space",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_with_more_space": {
            "name": "test_multiple_select_with_more_space",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_duplicated": {
            "name": "test_multiple_select_duplicated",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_sibling": {
            "name": "test_multiple_select_sibling",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_tag_and_direct_descendant": {
            "name": "test_multiple_select_tag_and_direct_descendant",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_direct_descendant_and_tags": {
            "name": "test_multiple_select_direct_descendant_and_tags",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_indirect_descendant": {
            "name": "test_multiple_select_indirect_descendant",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_invalid_multiple_select": {
            "name": "test_invalid_multiple_select",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_attrs": {
            "name": "test_multiple_select_attrs",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_ids": {
            "name": "test_multiple_select_ids",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_nested": {
            "name": "test_multiple_select_nested",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_duplicate_elements": {
            "name": "test_select_duplicate_elements",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/bs4/tests/__init__.py": {},
    "libkol-master/stubs/tortoise/aggregation.py": {
        "Aggregate.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Aggregate.resolve": {
            "name": "resolve",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        }
    },
    "libkol-master/stubs/tortoise/exceptions.py": {},
    "libkol-master/stubs/tortoise/fields.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "source_field": [],
                "generated": [],
                "pk": [],
                "null": [],
                "default": [],
                "unique": [],
                "index": []
            }
        },
        "Field.to_db_value": {
            "name": "to_db_value",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "Field.to_python_value": {
            "name": "to_python_value",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.required": {
            "name": "required",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntField.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "BigIntField.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "pk": []
            }
        },
        "SmallIntField.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CharField.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "TextField.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BooleanField.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecimalField.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "max_digits": [],
                "decimal_places": []
            }
        },
        "DatetimeField.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "auto_now": [],
                "auto_now_add": []
            }
        },
        "DatetimeField.to_python_value": {
            "name": "to_python_value",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DatetimeField.to_db_value": {
            "name": "to_db_value",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "DateField.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DateField.to_python_value": {
            "name": "to_python_value",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TimeDeltaField.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeDeltaField.to_python_value": {
            "name": "to_python_value",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TimeDeltaField.to_db_value": {
            "name": "to_db_value",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "FloatField.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONField.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "encoder": [],
                "decoder": []
            }
        },
        "JSONField.to_db_value": {
            "name": "to_db_value",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "JSONField.to_python_value": {
            "name": "to_python_value",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ForeignKeyField.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [],
                "related_name": [],
                "on_delete": []
            }
        },
        "ManyToManyField.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": [],
                "through": [],
                "forward_key": [],
                "backward_key": [],
                "related_name": []
            }
        },
        "BackwardFKRelation.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "relation_field": []
            }
        },
        "RelationQueryContainer.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "relation_field": [],
                "instance": []
            }
        },
        "RelationQueryContainer.__contains__": {
            "name": "__contains__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RelationQueryContainer.__iter__": {
            "name": "__iter__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__len__": {
            "name": "__len__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__bool__": {
            "name": "__bool__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RelationQueryContainer.__await__": {
            "name": "__await__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.__aiter__": {
            "name": "__aiter__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.filter": {
            "name": "filter",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.all": {
            "name": "all",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.order_by": {
            "name": "order_by",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.limit": {
            "name": "limit",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationQueryContainer.offset": {
            "name": "offset",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManyToManyRelationManager.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "instance": [],
                "m2m_field": []
            }
        }
    },
    "libkol-master/stubs/tortoise/filters.py": {
        "list_encoder": {
            "name": "list_encoder",
            "location": 9,
            "return": [],
            "arguments": {
                "values": [],
                "instance": [],
                "field": []
            }
        },
        "bool_encoder": {
            "name": "bool_encoder",
            "location": 10,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "string_encoder": {
            "name": "string_encoder",
            "location": 11,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "is_in": {
            "name": "is_in",
            "location": 12,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "not_in": {
            "name": "not_in",
            "location": 13,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "not_equal": {
            "name": "not_equal",
            "location": 14,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 15,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "not_null": {
            "name": "not_null",
            "location": 16,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 17,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "starts_with": {
            "name": "starts_with",
            "location": 18,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "ends_with": {
            "name": "ends_with",
            "location": 19,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "insensitive_contains": {
            "name": "insensitive_contains",
            "location": 20,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "insensitive_starts_with": {
            "name": "insensitive_starts_with",
            "location": 21,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "insensitive_ends_with": {
            "name": "insensitive_ends_with",
            "location": 22,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "get_m2m_filters": {
            "name": "get_m2m_filters",
            "location": 23,
            "return": [],
            "arguments": {
                "field_name": [],
                "field": []
            }
        },
        "get_backward_fk_filters": {
            "name": "get_backward_fk_filters",
            "location": 24,
            "return": [],
            "arguments": {
                "field_name": [],
                "field": []
            }
        },
        "get_filters_for_field": {
            "name": "get_filters_for_field",
            "location": 25,
            "return": [],
            "arguments": {
                "field_name": [],
                "field": [],
                "source_field": []
            }
        }
    },
    "libkol-master/stubs/tortoise/models.py": {
        "get_unique_together": {
            "name": "get_unique_together",
            "location": 11,
            "return": [],
            "arguments": {
                "meta": []
            }
        },
        "MetaInfo.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "meta": []
            }
        },
        "MetaInfo.db": {
            "name": "db",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaInfo.get_filter": {
            "name": "get_filter",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MetaInfo.generate_filters": {
            "name": "generate_filters",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelMeta.__new__": {
            "name": "__new__",
            "location": 38,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Model.first": {
            "name": "first",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.filter": {
            "name": "filter",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.exclude": {
            "name": "exclude",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.annotate": {
            "name": "annotate",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.all": {
            "name": "all",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.get": {
            "name": "get",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.check": {
            "name": "check",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "libkol-master/stubs/tortoise/queryset.py": {
        "AwaitableQuery.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "AwaitableQuery.resolve_filters": {
            "name": "resolve_filters",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "AwaitableQuery.resolve_ordering": {
            "name": "resolve_ordering",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "orderings": [],
                "annotations": []
            }
        },
        "AwaitableQuery.__await__": {
            "name": "__await__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "QuerySet.filter": {
            "name": "filter",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.exclude": {
            "name": "exclude",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.order_by": {
            "name": "order_by",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.limit": {
            "name": "limit",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "QuerySet.offset": {
            "name": "offset",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "QuerySet.distinct": {
            "name": "distinct",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.annotate": {
            "name": "annotate",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.values_list": {
            "name": "values_list",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.values": {
            "name": "values",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.delete": {
            "name": "delete",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.update": {
            "name": "update",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.count": {
            "name": "count",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.all": {
            "name": "all",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.first": {
            "name": "first",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.prefetch_related": {
            "name": "prefetch_related",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.using_db": {
            "name": "using_db",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "_db": []
            }
        },
        "QuerySet.__await__": {
            "name": "__await__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__aiter__": {
            "name": "__aiter__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateQuery.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "update_kwargs": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "DeleteQuery.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "CountQuery.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "FieldSelectQuery.add_field_to_select_query": {
            "name": "add_field_to_select_query",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "return_as": []
            }
        },
        "FieldSelectQuery.resolve_to_python_value": {
            "name": "resolve_to_python_value",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "field": []
            }
        },
        "ValuesListQuery.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "fields_for_select_list": [],
                "limit": [],
                "offset": [],
                "distinct": [],
                "orderings": [],
                "flat": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "ValuesQuery.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "q_objects": [],
                "fields_for_select": [],
                "limit": [],
                "offset": [],
                "distinct": [],
                "orderings": [],
                "annotations": [],
                "custom_filters": []
            }
        }
    },
    "libkol-master/stubs/tortoise/query_utils.py": {
        "EmptyCriterion.__or__": {
            "name": "__or__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EmptyCriterion.__and__": {
            "name": "__and__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EmptyCriterion.__bool__": {
            "name": "__bool__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryModifier.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "where_criterion": [],
                "joins": [],
                "having_criterion": []
            }
        },
        "QueryModifier.__and__": {
            "name": "__and__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryModifier.__or__": {
            "name": "__or__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "QueryModifier.__invert__": {
            "name": "__invert__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueryModifier.get_query_modifiers": {
            "name": "get_query_modifiers",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Q.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Q.__and__": {
            "name": "__and__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Q.__or__": {
            "name": "__or__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Q.__invert__": {
            "name": "__invert__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Q.negate": {
            "name": "negate",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Q.resolve": {
            "name": "resolve",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "annotations": [],
                "custom_filters": []
            }
        },
        "Prefetch.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "relation": [],
                "queryset": []
            }
        },
        "Prefetch.resolve_for_queryset": {
            "name": "resolve_for_queryset",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": []
            }
        }
    },
    "libkol-master/stubs/tortoise/transactions.py": {
        "in_transaction": {
            "name": "in_transaction",
            "location": 10,
            "return": [],
            "arguments": {
                "connection_name": []
            }
        },
        "atomic": {
            "name": "atomic",
            "location": 11,
            "return": [],
            "arguments": {
                "connection_name": []
            }
        }
    },
    "libkol-master/stubs/tortoise/utils.py": {
        "get_schema_sql": {
            "name": "get_schema_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "client": [],
                "safe": []
            }
        },
        "QueryAsyncIterator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "callback": []
            }
        },
        "QueryAsyncIterator.__aiter__": {
            "name": "__aiter__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/tortoise/__init__.py": {
        "run_async": {
            "name": "run_async",
            "location": 22,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "Tortoise.get_connection": {
            "name": "get_connection",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "connection_name": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/__init__.py": {},
    "libkol-master/stubs/tortoise/backends/base/client.py": {
        "Capabilities.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "dialect": []
            }
        },
        "Capabilities.__setattr__": {
            "name": "__setattr__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "value": []
            }
        },
        "BaseDBAsyncClient.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "connection_name": []
            }
        },
        "BaseDBAsyncClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionWrapper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "lock": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/base/config_generator.py": {
        "expand_db_url": {
            "name": "expand_db_url",
            "location": 9,
            "return": [],
            "arguments": {
                "db_url": [],
                "testing": []
            }
        },
        "generate_config": {
            "name": "generate_config",
            "location": 10,
            "return": [],
            "arguments": {
                "db_url": [],
                "app_modules": [],
                "connection_label": [],
                "testing": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/base/executor.py": {
        "BaseExecutor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "db": [],
                "prefetch_map": [],
                "prefetch_queries": []
            }
        },
        "BaseExecutor.get_overridden_filter_func": {
            "name": "get_overridden_filter_func",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "filter_func": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/base/schema_generator.py": {
        "BaseSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "BaseSchemaGenerator.get_create_schema_sql": {
            "name": "get_create_schema_sql",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "safe": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/base/__init__.py": {},
    "libkol-master/stubs/tortoise/backends/sqlite/client.py": {
        "translate_exceptions": {
            "name": "translate_exceptions",
            "location": 9,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "SqliteClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "SqliteClient.acquire_connection": {
            "name": "acquire_connection",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionWrapper.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "connection_name": [],
                "connection": [],
                "lock": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/sqlite/executor.py": {
        "to_db_bool": {
            "name": "to_db_bool",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "to_db_decimal": {
            "name": "to_db_decimal",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        },
        "to_db_datetime": {
            "name": "to_db_datetime",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "instance": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/sqlite/schema_generator.py": {
        "SqliteSchemaGenerator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/stubs/tortoise/backends/sqlite/__init__.py": {},
    "libkol-master/test/test_koldate.py": {
        "KoldateTestCase.test_ronald_phase": {
            "name": "test_ronald_phase",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_ronald_light": {
            "name": "test_ronald_light",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_grimace_phase": {
            "name": "test_grimace_phase",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_grimace_light": {
            "name": "test_grimace_light",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_hamburglar_phase": {
            "name": "test_hamburglar_phase",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_hamburglar_light": {
            "name": "test_hamburglar_light",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_moonlight": {
            "name": "test_moonlight",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/__init__.py": {},
    "libkol-master/test/request/test_base.py": {
        "open_test_data": {
            "name": "open_test_data",
            "location": 15,
            "return": [
                "TextIO"
            ],
            "arguments": {
                "request": [],
                "variant": [
                    "str"
                ],
                "ext": [
                    "str"
                ]
            }
        },
        "MockSession.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [],
                "request_mocks": []
            }
        },
        "TestCase.run_async": {
            "name": "run_async",
            "location": 64,
            "return": [
                "MockSession"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "async_test": [],
                "ext": [
                    "str"
                ],
                "request_mocks": []
            }
        },
        "MockSession.__init__.async_return": {
            "name": "async_return",
            "location": 27,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "libkol-master/test/request/test_charpane.py": {
        "CharpaneTestCase.test_charpane_basic": {
            "name": "test_charpane_basic",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharpaneTestCase.test_charpane_custom_title": {
            "name": "test_charpane_custom_title",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_chat_send.py": {
        "ChatSendTestCase.test_chat_send_no_respose": {
            "name": "test_chat_send_no_respose",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatSendTestCase.test_chat_send_green_response": {
            "name": "test_chat_send_green_response",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_choice.py": {
        "ChoiceTestCase.test_choice_shore": {
            "name": "test_choice_shore",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_accepting_applications.py": {
        "ClanAcceptingApplicationsTestCase.test_clan_accepting_applications_on": {
            "name": "test_clan_accepting_applications_on",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClanAcceptingApplicationsTestCase.test_clan_accepting_applications_off": {
            "name": "test_clan_accepting_applications_off",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_log.py": {
        "ClanLogTestCase.test_clan_log_basic": {
            "name": "test_clan_log_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClanLogTestCase.test_clan_log_busy": {
            "name": "test_clan_log_busy",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_raid_log.py": {
        "ClanRaidLogTestCase.test_clan_raid_log_events": {
            "name": "test_clan_raid_log_events",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_combat.py": {
        "CombatTestCase.test_combat_parse_damage": {
            "name": "test_combat_parse_damage",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatTestCase.test_combat_fumble": {
            "name": "test_combat_fumble",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_craft.py": {
        "CraftTestCase.test_craft_combine_meatpaste_error": {
            "name": "test_craft_combine_meatpaste_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftTestCase.test_craft_cook_recipe_error": {
            "name": "test_craft_cook_recipe_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_equipment.py": {
        "EquipmentTestCase.test_equipment_accessories_merged": {
            "name": "test_equipment_accessories_merged",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EquipmentTestCase.test_equipment_accessories_separate": {
            "name": "test_equipment_accessories_separate",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_familiar.py": {
        "MiningTestCase.test_familiar_basic": {
            "name": "test_familiar_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_hermit_menu.py": {
        "HermitMenuTestCase.test_hermit_menu_clovers": {
            "name": "test_hermit_menu_clovers",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitMenuTestCase.test_hermit_menu_unrecognised": {
            "name": "test_hermit_menu_unrecognised",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_hermit_trade.py": {
        "HermitTradeTestCase.test_hermit_trade_clover": {
            "name": "test_hermit_trade_clover",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitTradeTestCase.test_hermit_trade_doesnt_sell": {
            "name": "test_hermit_trade_doesnt_sell",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitTradeTestCase.test_hermit_trade_insufficient": {
            "name": "test_hermit_trade_insufficient",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_item_description.py": {
        "ItemDescriptionTestCase.test_item_description_food": {
            "name": "test_item_description_food",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemDescriptionTestCase.test_item_description_hat": {
            "name": "test_item_description_hat",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_price.py": {
        "MallPriceTestCase.test_mall_price_basic": {
            "name": "test_mall_price_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallPriceTestCase.test_mall_price_commas": {
            "name": "test_mall_price_commas",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_search.py": {
        "MallSearchTestCase.test_mall_search_lime": {
            "name": "test_mall_search_lime",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallSearchTestCase.test_mall_search_limited_include": {
            "name": "test_mall_search_limited_include",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallSearchTestCase.test_mall_search_limited_exclude": {
            "name": "test_mall_search_limited_exclude",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_transactions.py": {
        "MallTransactionsTestCase.test_mall_transactions_short": {
            "name": "test_mall_transactions_short",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mining.py": {
        "MiningTestCase.test_mining_mid_mine": {
            "name": "test_mining_mid_mine",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_player_profile.py": {
        "PlayerSearchTestCase.test_player_profile_public": {
            "name": "test_player_profile_public",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_profile_private": {
            "name": "test_player_profile_private",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_player_search.py": {
        "PlayerSearchTestCase.test_player_search_basic": {
            "name": "test_player_search_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_search_pvp": {
            "name": "test_player_search_pvp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_search_infinity": {
            "name": "test_player_search_infinity",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_skills.py": {
        "SkillsTestCase.test_skills_lots": {
            "name": "test_skills_lots",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_trophy.py": {
        "TrophyTestCase.test_trophy_none": {
            "name": "test_trophy_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrophyTestCase.test_trophy_one": {
            "name": "test_trophy_one",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/tools/bonuses.py": {
        "ModifierError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "modifier": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/tools/consumables.py": {},
    "libkol-master/tools/effects.py": {},
    "libkol-master/tools/equipment.py": {},
    "libkol-master/tools/familiars.py": {},
    "libkol-master/tools/foldgroups.py": {},
    "libkol-master/tools/items.py": {},
    "libkol-master/tools/monsters.py": {
        "apply_params": {
            "name": "apply_params",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "monster": [
                    "libkol.Monster.Monster"
                ],
                "param_list": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/tools/npcstores.py": {},
    "libkol-master/tools/outfits.py": {},
    "libkol-master/tools/populate_db.py": {},
    "libkol-master/tools/skills.py": {},
    "libkol-master/tools/trophies.py": {},
    "libkol-master/tools/util.py": {
        "split_range": {
            "name": "split_range",
            "location": 15,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "range": [
                    "str"
                ]
            }
        },
        "mafia_dedupe": {
            "name": "mafia_dedupe",
            "location": 28,
            "return": [
                "Dict[(str, Union[(int, str)])]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/tools/zapgroups.py": {},
    "libkol-master/tools/__init__.py": {}
}
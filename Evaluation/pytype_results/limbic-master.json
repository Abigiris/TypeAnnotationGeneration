{
    "limbic-master/setup.py": {},
    "limbic-master/limbic/limbic_constants.py": {},
    "limbic-master/limbic/__init__.py": {},
    "limbic-master/limbic/analysis/words.py": {
        "plot_emotions_wordclouds": {
            "name": "plot_emotions_wordclouds",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "categories": [
                    "List[str]"
                ],
                "unique": [
                    "bool"
                ],
                "weighted": [
                    "bool"
                ]
            }
        },
        "_weighted_emotions_terms": {
            "name": "_weighted_emotions_terms",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "category": [
                    "str"
                ],
                "unique_terms": [
                    "Optional[Set[str]]"
                ]
            }
        },
        "_unique_terms_for_categories": {
            "name": "_unique_terms_for_categories",
            "location": 69,
            "return": [
                "Dict[(str, Set[str])]"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "categories": [
                    "List[str]"
                ]
            }
        }
    },
    "limbic-master/limbic/analysis/__init__.py": {
        "get_total": {
            "name": "get_total",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "get_mean": {
            "name": "get_mean",
            "location": 14,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "category": [
                    "str"
                ]
            }
        },
        "moving_window": {
            "name": "moving_window",
            "location": 24,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "category": [
                    "str"
                ],
                "step": [
                    "int"
                ],
                "window": [
                    "int"
                ]
            }
        },
        "get_max_delta": {
            "name": "get_max_delta",
            "location": 44,
            "return": [
                "Tuple[(float, int)]"
            ],
            "arguments": {
                "emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "category": [
                    "str"
                ],
                "step": [
                    "int"
                ],
                "window": [
                    "int"
                ]
            }
        }
    },
    "limbic-master/limbic/analysis/series/features.py": {
        "all_moving_windows": {
            "name": "all_moving_windows",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "seasons_episodes_subtitles_emotions": [],
                "categories": [
                    "List[str]"
                ],
                "window": [
                    "int"
                ]
            }
        },
        "get_features": {
            "name": "get_features",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "seasons_episodes_subtitles_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ],
                "imdb_data": [
                    "Dict[(str, Any)]"
                ],
                "categories": [
                    "List[str]"
                ],
                "min_threshold": [
                    "float"
                ],
                "max_threshold": [
                    "float"
                ]
            }
        },
        "_add_data": {
            "name": "_add_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "episodes_data": [
                    "Dict[(str, Any)]"
                ],
                "features": [
                    "Dict[(str, float)]"
                ],
                "ratings": [],
                "votes": []
            }
        },
        "_get_rating": {
            "name": "_get_rating",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "imdb_data": [
                    "Dict[(str, list)]"
                ],
                "season": [],
                "episode": []
            }
        },
        "_get_votes": {
            "name": "_get_votes",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "imdb_data": [
                    "Dict[(str, list)]"
                ],
                "season": [],
                "episode": []
            }
        },
        "_rating_to_category": {
            "name": "_rating_to_category",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "rating": [
                    "float"
                ],
                "min_threshold": [
                    "float"
                ],
                "max_threshold": [
                    "float"
                ]
            }
        },
        "_get_emotions_features": {
            "name": "_get_emotions_features",
            "location": 79,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "subtitles_emotions": [
                    "List[limbic.limbic_types.TimeEmotion]"
                ],
                "season": [
                    "int"
                ],
                "episode": [
                    "int"
                ],
                "categories": [
                    "List[str]"
                ]
            }
        }
    },
    "limbic-master/limbic/analysis/series/plot.py": {
        "plot_emotion_all_episodes": {
            "name": "plot_emotion_all_episodes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "subtitles_emotions": [],
                "category": []
            }
        },
        "_seasons_episodes_category_moving_window": {
            "name": "_seasons_episodes_category_moving_window",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "seasons_episodes_subtitles_emotions": [],
                "category": []
            }
        }
    },
    "limbic-master/limbic/analysis/series/__init__.py": {},
    "limbic-master/limbic/applications/subtitle_analysis.py": {
        "load_subtitles": {
            "name": "load_subtitles",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "srt_file_path": []
            }
        },
        "get_subtitles_emotions": {
            "name": "get_subtitles_emotions",
            "location": 41,
            "return": [
                "Iterable[limbic.limbic_types.TimeEmotion]"
            ],
            "arguments": {
                "subtitles": [
                    "list"
                ],
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ]
            }
        },
        "get_emotions_for_series_folder": {
            "name": "get_emotions_for_series_folder",
            "location": 55,
            "return": [
                "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
            ],
            "arguments": {
                "folder_path": [
                    "str"
                ],
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ],
                "output_file_path": [
                    "Optional[str]"
                ],
                "fast": [
                    "bool"
                ]
            }
        },
        "_get_emotions_for_series_folder": {
            "name": "_get_emotions_for_series_folder",
            "location": 72,
            "return": [
                "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
            ],
            "arguments": {
                "folder_path": [
                    "str"
                ],
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ],
                "output_file_path": [
                    "Optional[str]"
                ]
            }
        },
        "_get_emotions_for_series_folder_fast": {
            "name": "_get_emotions_for_series_folder_fast",
            "location": 92,
            "return": [
                "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
            ],
            "arguments": {
                "folder_path": [
                    "str"
                ],
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ],
                "output_file_path": [
                    "Optional[str]"
                ]
            }
        },
        "_save_seasons_emotions_to_file": {
            "name": "_save_seasons_emotions_to_file",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "seasons_episodes_subtitles_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ],
                "output_file_path": [
                    "str"
                ]
            }
        },
        "_update_seasons_emotions_data": {
            "name": "_update_seasons_emotions_data",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "season_episode_time_words": [
                    "Dict[(int, Dict[(int, Dict[(int, Set[Optional[str]])])])]"
                ],
                "seasons_episodes_subtitles_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ],
                "season_episode_time_sentence": [
                    "Dict[(int, Dict[(int, Dict[(int, List[str])])])]"
                ],
                "sub_words": [
                    "Set[str]"
                ],
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ]
            }
        },
        "_add_emotions_from_words": {
            "name": "_add_emotions_from_words",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "words": [
                    "Set[Optional[str]]"
                ],
                "words_emotions": [
                    "Dict[(str, List[limbic.limbic_types.Emotion])]"
                ],
                "seasons_episodes_subtitles_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ],
                "index": [
                    "Tuple[(int, int, int)]"
                ]
            }
        },
        "_add_emotions_from_sentence": {
            "name": "_add_emotions_from_sentence",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "limbic_model": [
                    "limbic.emotion.models.lexicon_limbic_model.LexiconLimbicModel"
                ],
                "seasons_episodes_subtitles_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ],
                "season_episode_time_sentence": [
                    "Dict[(int, Dict[(int, Dict[(int, List[str])])])]"
                ],
                "index": [
                    "Tuple[(int, int, int)]"
                ]
            }
        },
        "_get_season_episode": {
            "name": "_get_season_episode",
            "location": 206,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "_contains_negation": {
            "name": "_contains_negation",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "_season_episode_emotions_to_dict": {
            "name": "_season_episode_emotions_to_dict",
            "location": 227,
            "return": [
                "Dict[(int, Any)]"
            ],
            "arguments": {
                "season_episode_emotions": [
                    "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
                ]
            }
        },
        "_time_emotion_to_dict": {
            "name": "_time_emotion_to_dict",
            "location": 240,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "time_emotion": [
                    "limbic.limbic_types.TimeEmotion"
                ]
            }
        },
        "load_emotions_for_series": {
            "name": "load_emotions_for_series",
            "location": 253,
            "return": [
                "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
            ],
            "arguments": {
                "emotions_data_file_path": [
                    "str"
                ]
            }
        },
        "_season_episode_emotions_from_dict": {
            "name": "_season_episode_emotions_from_dict",
            "location": 268,
            "return": [
                "Dict[(int, Dict[(int, List[limbic.limbic_types.TimeEmotion])])]"
            ],
            "arguments": {
                "season_episode_emotions_dict": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "limbic-master/limbic/applications/__init__.py": {},
    "limbic-master/limbic/emotion/nrc_utils.py": {
        "load_nrc_lexicon": {
            "name": "load_nrc_lexicon",
            "location": 22,
            "return": [
                "limbic.limbic_types.Lexicon"
            ],
            "arguments": {
                "lexicon_path": [
                    "str"
                ],
                "lexicon_type": [
                    "str"
                ]
            }
        },
        "_load_nrc_emotion": {
            "name": "_load_nrc_emotion",
            "location": 32,
            "return": [
                "limbic.limbic_types.Lexicon"
            ],
            "arguments": {
                "lexicon_file_path": []
            }
        },
        "_load_nrc_affect_intensity": {
            "name": "_load_nrc_affect_intensity",
            "location": 36,
            "return": [
                "limbic.limbic_types.Lexicon"
            ],
            "arguments": {
                "lexicon_file_path": [
                    "str"
                ]
            }
        },
        "_load_nrc_vad": {
            "name": "_load_nrc_vad",
            "location": 56,
            "return": [
                "limbic.limbic_types.Lexicon"
            ],
            "arguments": {
                "lexicon_file_path": []
            }
        }
    },
    "limbic-master/limbic/emotion/plutchik_wheel.py": {},
    "limbic-master/limbic/emotion/utils.py": {
        "load_lexicon": {
            "name": "load_lexicon",
            "location": 7,
            "return": [
                "limbic.limbic_types.Lexicon"
            ],
            "arguments": {
                "lexicon_path": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/__init__.py": {},
    "limbic-master/limbic/emotion/models/lexicon_limbic_model.py": {
        "LexiconLimbicModel.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexicon": [
                    "limbic.limbic_types.Lexicon"
                ],
                "terms_mapping": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        },
        "LexiconLimbicModel.get_term_emotions": {
            "name": "get_term_emotions",
            "location": 15,
            "return": [
                "List[limbic.limbic_types.Emotion]"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "str"
                ],
                "is_negated": [
                    "bool"
                ]
            }
        },
        "LexiconLimbicModel.get_sentence_emotions": {
            "name": "get_sentence_emotions",
            "location": 42,
            "return": [
                "List[limbic.limbic_types.Emotion]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/limbic_model.py": {
        "LimbicModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_params": [
                    "Optional[limbic.limbic_types.ModelParams]"
                ]
            }
        },
        "LimbicModel.load_model": {
            "name": "load_model",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "specific_params": []
            }
        },
        "LimbicModel.predict": {
            "name": "predict",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        },
        "LimbicModel.get_max_len": {
            "name": "get_max_len",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimbicModel.get_sentence_emotions": {
            "name": "get_sentence_emotions",
            "location": 39,
            "return": [
                "List[limbic.limbic_types.EmotionValue]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/__init__.py": {},
    "limbic-master/limbic/emotion/models/bert_limbic_model/bert_base_uncased.py": {
        "BERTBaseUncased.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_path": [
                    "str"
                ],
                "bert_params": [
                    "Optional[limbic.limbic_types.BertBaseUncaseParams]"
                ]
            }
        },
        "BERTBaseUncased.forward": {
            "name": "forward",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ids": [],
                "mask": [],
                "token_type_ids": []
            }
        }
    },
    "limbic-master/limbic/emotion/models/bert_limbic_model/bert_dataset.py": {
        "BERTDataset.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "target": [],
                "tokenizer": [],
                "max_len": []
            }
        },
        "BERTDataset.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERTDataset.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "limbic-master/limbic/emotion/models/bert_limbic_model/bert_limbic_model.py": {
        "BertLimbicModel.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [],
                "bert_path": [],
                "model_params": [
                    "Optional[limbic.limbic_types.ModelParams]"
                ],
                "device": []
            }
        },
        "BertLimbicModel.get_max_len": {
            "name": "get_max_len",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertLimbicModel.load_model": {
            "name": "load_model",
            "location": 40,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "specific_params": []
            }
        },
        "BertLimbicModel.sentence_prediction": {
            "name": "sentence_prediction",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BertLimbicModel.predict": {
            "name": "predict",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/bert_limbic_model/utils.py": {
        "load_data_file": {
            "name": "load_data_file",
            "location": 29,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "loss_function": {
            "name": "loss_function",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "outputs": [],
                "targets": [],
                "num_labels": []
            }
        },
        "train_model": {
            "name": "train_model",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "data_loader": [],
                "model": [],
                "optimizer": [],
                "device": [],
                "scheduler": [],
                "num_labels": [],
                "epoch": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 84,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "data_loader": [],
                "model": [],
                "device": []
            }
        },
        "build_model": {
            "name": "build_model",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "limbic.limbic_types.TrainBertParams"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/bert_limbic_model/__init__.py": {},
    "limbic-master/limbic/emotion/models/tf_limbic_model/tf_limbic_model.py": {
        "TfLimbicModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_params": [
                    "Optional[limbic.limbic_types.ModelParams]"
                ]
            }
        },
        "TfLimbicModel.get_max_len": {
            "name": "get_max_len",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfLimbicModel.load_model": {
            "name": "load_model",
            "location": 26,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "specific_params": []
            }
        },
        "TfLimbicModel._process_input": {
            "name": "_process_input",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        },
        "TfLimbicModel.predict": {
            "name": "predict",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/tf_limbic_model/utils.py": {
        "load_book": {
            "name": "load_book",
            "location": 25,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]"
                ]
            }
        },
        "load_glove_embeddings": {
            "name": "load_glove_embeddings",
            "location": 40,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "glove_file": [
                    "str"
                ]
            }
        },
        "preprocess_sentence": {
            "name": "preprocess_sentence",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "process_train": {
            "name": "process_train",
            "location": 65,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "train": [],
                "categories": [
                    "List[str]"
                ],
                "max_words": [
                    "int"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "build_embeddings_matrix": {
            "name": "build_embeddings_matrix",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "tokenizer": [],
                "embeddings_file": [
                    "str"
                ],
                "max_words": [
                    "int"
                ],
                "embedding_size": [
                    "int"
                ]
            }
        },
        "build_model": {
            "name": "build_model",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "embedding_matrix": [],
                "params": [
                    "ModelParams"
                ]
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "tokenizer": [],
                "model": [],
                "training_metadata": []
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 213,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "experiments_date": [
                    "str"
                ]
            }
        },
        "continuous_labels_to_binary": {
            "name": "continuous_labels_to_binary",
            "location": 228,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "labels": [],
                "threshold": [
                    "Optional[float]"
                ]
            }
        }
    },
    "limbic-master/limbic/emotion/models/tf_limbic_model/__init__.py": {},
    "limbic-master/limbic/integrations/imdb.py": {
        "get_imdb_data": {
            "name": "get_imdb_data",
            "location": 17,
            "return": [
                "Dict[(int, list)]"
            ],
            "arguments": {
                "show_imdb_id": [
                    "str"
                ],
                "num_seasons": [
                    "int"
                ],
                "output_path": [
                    "Optional[str]"
                ]
            }
        },
        "_get_episodes_imdb_ids": {
            "name": "_get_episodes_imdb_ids",
            "location": 31,
            "return": [
                "Dict[(int, List[str])]"
            ],
            "arguments": {
                "show_imdb_id": [
                    "str"
                ],
                "seasons": [
                    "int"
                ]
            }
        },
        "_get_imdb_data": {
            "name": "_get_imdb_data",
            "location": 47,
            "return": [
                "Dict[(int, list)]"
            ],
            "arguments": {
                "seasons_episodes": [
                    "Dict[(int, List[str])]"
                ]
            }
        }
    },
    "limbic-master/limbic/integrations/__init__.py": {},
    "limbic-master/limbic/limbic_types/__init__.py": {},
    "limbic-master/limbic/utils/nlp.py": {
        "get_negated_words": {
            "name": "get_negated_words",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "limbic-master/limbic/utils/text.py": {
        "_clean_text": {
            "name": "_clean_text",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "_tokenizer": {
            "name": "_tokenizer",
            "location": 111,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "_remove_stopwords": {
            "name": "_remove_stopwords",
            "location": 120,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "sentence_tokens": [
                    "Iterable[str]"
                ]
            }
        },
        "process_content": {
            "name": "process_content",
            "location": 127,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ],
                "terms_mapping": [
                    "Optional[Dict[(str, str)]]"
                ]
            }
        }
    },
    "limbic-master/limbic/utils/__init__.py": {},
    "limbic-master/test/__init__.py": {},
    "limbic-master/test/utils/test_nlp.py": {
        "TestNLP.test_process_content": {
            "name": "test_process_content",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "limbic-master/test/utils/test_text.py": {
        "TestUtilText.test_process_content": {
            "name": "test_process_content",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtilText.test_process_content_with_terms_mapping": {
            "name": "test_process_content_with_terms_mapping",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "limbic-master/test/utils/__init__.py": {}
}
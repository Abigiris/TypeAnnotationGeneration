{
    "little-boxes-master/setup.py": {},
    "little-boxes-master/docs/conf.py": {},
    "little-boxes-master/little_boxes/activitypub.py": {
        "get_backend": {
            "name": "get_backend",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "use_backend": {
            "name": "use_backend",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "backend_instance": []
            }
        },
        "format_datetime": {
            "name": "format_datetime",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": []
            }
        },
        "parse_activity": {
            "name": "parse_activity",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "payload": [],
                "expected": []
            }
        },
        "_to_list": {
            "name": "_to_list",
            "location": 179,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "data": [
                    "_T0@@"
                ]
            }
        },
        "clean_activity": {
            "name": "clean_activity",
            "location": 187,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "activity": [
                    "_T0@@"
                ]
            }
        },
        "_get_actor_id": {
            "name": "_get_actor_id",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "actor": []
            }
        },
        "_get_id": {
            "name": "_get_id",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "_has_type": {
            "name": "_has_type",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj_type": [],
                "_types": []
            }
        },
        "fetch_remote_activity": {
            "name": "fetch_remote_activity",
            "location": 981,
            "return": [
                "Any"
            ],
            "arguments": {
                "iri": [],
                "expected": []
            }
        },
        "_ActivityMeta.__new__": {
            "name": "__new__",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "meta": [
                    "Type[_ActivityMeta]"
                ],
                "name": [],
                "bases": [],
                "class_dict": []
            }
        },
        "BaseActivity.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity._init": {
            "name": "_init",
            "location": 366,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.has_type": {
            "name": "has_type",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_types": []
            }
        },
        "BaseActivity.get_url": {
            "name": "get_url",
            "location": 376,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "preferred_mimetype": []
            }
        },
        "BaseActivity.ctx": {
            "name": "ctx",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.set_ctx": {
            "name": "set_ctx",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "BaseActivity.__repr__": {
            "name": "__repr__",
            "location": 410,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.__str__": {
            "name": "__str__",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.__getattr__": {
            "name": "__getattr__",
            "location": 418,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BaseActivity._set_id": {
            "name": "_set_id",
            "location": 423,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "obj_id": []
            }
        },
        "BaseActivity.set_id": {
            "name": "set_id",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "obj_id": []
            }
        },
        "BaseActivity._actor_id": {
            "name": "_actor_id",
            "location": 436,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "BaseActivity._validate_actor": {
            "name": "_validate_actor",
            "location": 449,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "BaseActivity.get_object_id": {
            "name": "get_object_id",
            "location": 471,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.get_object": {
            "name": "get_object",
            "location": 484,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.reset_object_cache": {
            "name": "reset_object_cache",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.to_dict": {
            "name": "to_dict",
            "location": 507,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "embed": [],
                "embed_object_id_only": []
            }
        },
        "BaseActivity.get_actor": {
            "name": "get_actor",
            "location": 530,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity._recipients": {
            "name": "_recipients",
            "location": 561,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseActivity.recipients": {
            "name": "recipients",
            "location": 564,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.get_key": {
            "name": "get_key",
            "location": 642,
            "return": [
                "little_boxes.key.Key"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.__repr__": {
            "name": "__repr__",
            "location": 685,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Follow._recipients": {
            "name": "_recipients",
            "location": 695,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Follow.build_undo": {
            "name": "build_undo",
            "location": 698,
            "return": [
                "Undo"
            ],
            "arguments": {
                "self": []
            }
        },
        "Accept._recipients": {
            "name": "_recipients",
            "location": 708,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Undo._recipients": {
            "name": "_recipients",
            "location": 723,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like._recipients": {
            "name": "_recipients",
            "location": 737,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Like.build_undo": {
            "name": "build_undo",
            "location": 740,
            "return": [
                "Undo"
            ],
            "arguments": {
                "self": []
            }
        },
        "Announce._recipients": {
            "name": "_recipients",
            "location": 753,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Announce.build_undo": {
            "name": "build_undo",
            "location": 762,
            "return": [
                "Undo"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delete._get_actual_object": {
            "name": "_get_actual_object",
            "location": 771,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delete._recipients": {
            "name": "_recipients",
            "location": 789,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Update._recipients": {
            "name": "_recipients",
            "location": 800,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.is_public": {
            "name": "is_public",
            "location": 818,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create._set_id": {
            "name": "_set_id",
            "location": 827,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "obj_id": []
            }
        },
        "Create._init": {
            "name": "_init",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create._recipients": {
            "name": "_recipients",
            "location": 854,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Create.get_tombstone": {
            "name": "get_tombstone",
            "location": 865,
            "return": [
                "Tombstone"
            ],
            "arguments": {
                "self": [],
                "deleted": []
            }
        },
        "Note._init": {
            "name": "_init",
            "location": 885,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note._recipients": {
            "name": "_recipients",
            "location": 889,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.build_create": {
            "name": "build_create",
            "location": 899,
            "return": [
                "Create"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.build_like": {
            "name": "build_like",
            "location": 914,
            "return": [
                "Like"
            ],
            "arguments": {
                "self": [],
                "as_actor": []
            }
        },
        "Note.build_announce": {
            "name": "build_announce",
            "location": 917,
            "return": [
                "Announce"
            ],
            "arguments": {
                "self": [],
                "as_actor": []
            }
        },
        "Note.has_mention": {
            "name": "has_mention",
            "location": 926,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "actor_id": []
            }
        },
        "Note.get_in_reply_to": {
            "name": "get_in_reply_to",
            "location": 938,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.one_of": {
            "name": "one_of",
            "location": 947,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "little-boxes-master/little_boxes/backend.py": {
        "Backend.debug_mode": {
            "name": "debug_mode",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.check_url": {
            "name": "check_url",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Backend.user_agent": {
            "name": "user_agent",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.random_object_id": {
            "name": "random_object_id",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.fetch_json": {
            "name": "fetch_json",
            "location": 44,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Backend.parse_collection": {
            "name": "parse_collection",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "url": []
            }
        },
        "Backend.extra_inboxes": {
            "name": "extra_inboxes",
            "location": 63,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_from_outbox": {
            "name": "is_from_outbox",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "Backend.base_url": {
            "name": "base_url",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.fetch_iri": {
            "name": "fetch_iri",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "iri": []
            }
        },
        "Backend.activity_url": {
            "name": "activity_url",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj_id": []
            }
        },
        "Backend.note_url": {
            "name": "note_url",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj_id": []
            }
        }
    },
    "little-boxes-master/little_boxes/collection.py": {
        "parse_collection": {
            "name": "parse_collection",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "payload": [],
                "url": [],
                "level": [],
                "fetcher": []
            }
        }
    },
    "little-boxes-master/little_boxes/content_helper.py": {
        "_set_attrs": {
            "name": "_set_attrs",
            "location": 13,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "attrs": [
                    "_T0@@"
                ],
                "new": []
            }
        },
        "hashtagify": {
            "name": "hashtagify",
            "location": 25,
            "return": [
                "Tuple[(Any, List[dict])]"
            ],
            "arguments": {
                "content": []
            }
        },
        "mentionify": {
            "name": "mentionify",
            "location": 40,
            "return": [
                "Tuple[(Any, List[dict])]"
            ],
            "arguments": {
                "content": [],
                "hide_domain": []
            }
        },
        "parse_markdown": {
            "name": "parse_markdown",
            "location": 62,
            "return": [
                "Tuple[(str, List[dict])]"
            ],
            "arguments": {
                "content": []
            }
        }
    },
    "little-boxes-master/little_boxes/errors.py": {
        "ServerError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "ServerError.to_dict": {
            "name": "to_dict",
            "location": 35,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerError.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerError.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "little-boxes-master/little_boxes/httpsig.py": {
        "_build_signed_string": {
            "name": "_build_signed_string",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "signed_headers": [],
                "method": [],
                "path": [],
                "headers": [],
                "body_digest": []
            }
        },
        "_parse_sig_header": {
            "name": "_parse_sig_header",
            "location": 42,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "val": []
            }
        },
        "_verify_h": {
            "name": "_verify_h",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "signed_string": [],
                "signature": [],
                "pubkey": []
            }
        },
        "_body_digest": {
            "name": "_body_digest",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "body": []
            }
        },
        "_get_public_key": {
            "name": "_get_public_key",
            "location": 65,
            "return": [
                "little_boxes.key.Key"
            ],
            "arguments": {
                "key_id": []
            }
        },
        "verify_request": {
            "name": "verify_request",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "method": [],
                "path": [],
                "headers": [],
                "body": []
            }
        },
        "HTTPSigAuth.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HTTPSigAuth.__call__": {
            "name": "__call__",
            "location": 109,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "_T0@@"
                ]
            }
        }
    },
    "little-boxes-master/little_boxes/key.py": {
        "Key.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "id_": []
            }
        },
        "Key.load_pub": {
            "name": "load_pub",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey_pem": []
            }
        },
        "Key.load": {
            "name": "load",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "privkey_pem": []
            }
        },
        "Key.new": {
            "name": "new",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.key_id": {
            "name": "key_id",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.to_dict": {
            "name": "to_dict",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.from_dict": {
            "name": "from_dict",
            "location": 48,
            "return": [
                "_TKey@@Key@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKey]"
                ],
                "data": []
            }
        },
        "Key.to_magic_key": {
            "name": "to_magic_key",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "little-boxes-master/little_boxes/linked_data_sig.py": {
        "_caching_document_loader": {
            "name": "_caching_document_loader",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "_options_hash": {
            "name": "_options_hash",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": []
            }
        },
        "_doc_hash": {
            "name": "_doc_hash",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": []
            }
        },
        "verify_signature": {
            "name": "verify_signature",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "doc": [],
                "key": []
            }
        },
        "generate_signature": {
            "name": "generate_signature",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [],
                "key": []
            }
        }
    },
    "little-boxes-master/little_boxes/urlutils.py": {
        "is_url_valid": {
            "name": "is_url_valid",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [],
                "debug": []
            }
        },
        "check_url": {
            "name": "check_url",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "debug": []
            }
        }
    },
    "little-boxes-master/little_boxes/webfinger.py": {
        "webfinger": {
            "name": "webfinger",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "resource": [],
                "debug": []
            }
        },
        "get_remote_follow_template": {
            "name": "get_remote_follow_template",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "resource": [],
                "debug": []
            }
        },
        "get_actor_url": {
            "name": "get_actor_url",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "resource": [],
                "debug": []
            }
        }
    },
    "little-boxes-master/little_boxes/__init__.py": {
        "strtobool": {
            "name": "strtobool",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "little-boxes-master/little_boxes/__version__.py": {},
    "little-boxes-master/tests/test_backend.py": {
        "track_call": {
            "name": "track_call",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "track_call.wrapper": {
            "name": "wrapper",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "InMemBackend.called_methods": {
            "name": "called_methods",
            "location": 34,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "InMemBackend.assert_called_methods": {
            "name": "assert_called_methods",
            "location": 39,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "InMemBackend.debug_mode": {
            "name": "debug_mode",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemBackend.setup_actor": {
            "name": "setup_actor",
            "location": 71,
            "return": [
                "ap.Person"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "pusername": []
            }
        },
        "InMemBackend.fetch_iri": {
            "name": "fetch_iri",
            "location": 93,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "iri": []
            }
        },
        "InMemBackend.get_user": {
            "name": "get_user",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "InMemBackend.outbox_is_blocked": {
            "name": "outbox_is_blocked",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "actor_id": []
            }
        },
        "InMemBackend.inbox_check_duplicate": {
            "name": "inbox_check_duplicate",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "iri": []
            }
        },
        "InMemBackend.inbox_new": {
            "name": "inbox_new",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.base_url": {
            "name": "base_url",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemBackend.activity_url": {
            "name": "activity_url",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_id": []
            }
        },
        "InMemBackend.note_url": {
            "name": "note_url",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj_id": []
            }
        },
        "InMemBackend.outbox_new": {
            "name": "outbox_new",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.new_follower": {
            "name": "new_follower",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "follow": []
            }
        },
        "InMemBackend.undo_new_follower": {
            "name": "undo_new_follower",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "follow": []
            }
        },
        "InMemBackend.new_following": {
            "name": "new_following",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "follow": []
            }
        },
        "InMemBackend.undo_new_following": {
            "name": "undo_new_following",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "follow": []
            }
        },
        "InMemBackend.followers": {
            "name": "followers",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "as_actor": []
            }
        },
        "InMemBackend.following": {
            "name": "following",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "as_actor": []
            }
        },
        "InMemBackend.post_to_remote_inbox": {
            "name": "post_to_remote_inbox",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "payload_encoded": [],
                "recp": []
            }
        },
        "InMemBackend.inbox_like": {
            "name": "inbox_like",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_undo_like": {
            "name": "inbox_undo_like",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_like": {
            "name": "outbox_like",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_undo_like": {
            "name": "outbox_undo_like",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_announce": {
            "name": "inbox_announce",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_undo_announce": {
            "name": "inbox_undo_announce",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_announce": {
            "name": "outbox_announce",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_undo_announce": {
            "name": "outbox_undo_announce",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_delete": {
            "name": "inbox_delete",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_delete": {
            "name": "outbox_delete",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_update": {
            "name": "inbox_update",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_update": {
            "name": "outbox_update",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.inbox_create": {
            "name": "inbox_create",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        },
        "InMemBackend.outbox_create": {
            "name": "outbox_create",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_actor": [],
                "activity": []
            }
        }
    },
    "little-boxes-master/tests/test_collection.py": {
        "test_empty_collection": {
            "name": "test_empty_collection",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_collection_limit": {
            "name": "test_recursive_collection_limit",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_activity_type": {
            "name": "test_unexpected_activity_type",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collection": {
            "name": "test_collection",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordered_collection": {
            "name": "test_ordered_collection",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "little-boxes-master/tests/test_content_helper.py": {
        "test_little_content_helper_simple": {
            "name": "test_little_content_helper_simple",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_little_content_helper_linkify": {
            "name": "test_little_content_helper_linkify",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_little_content_helper_mention": {
            "name": "test_little_content_helper_mention",
            "location": 34,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_little_content_helper_tag": {
            "name": "test_little_content_helper_tag",
            "location": 59,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "little-boxes-master/tests/test_httpsig.py": {
        "test_httpsig": {
            "name": "test_httpsig",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_httpsig_key": {
            "name": "test_httpsig_key",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "little-boxes-master/tests/test_key.py": {
        "test_key_new_load": {
            "name": "test_key_new_load",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "little-boxes-master/tests/test_linked_data_sig.py": {
        "test_linked_data_sig": {
            "name": "test_linked_data_sig",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "little-boxes-master/tests/test_urlutils.py": {
        "test_urlutils_reject_invalid_scheme": {
            "name": "test_urlutils_reject_invalid_scheme",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlutils_reject_localhost": {
            "name": "test_urlutils_reject_localhost",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlutils_reject_private_ip": {
            "name": "test_urlutils_reject_private_ip",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_urlutils_reject_domain_that_resolve_to_private_ip": {
            "name": "test_urlutils_reject_domain_that_resolve_to_private_ip",
            "location": 20,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_urlutils_accept_valid_url": {
            "name": "test_urlutils_accept_valid_url",
            "location": 25,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_urlutils_check_url_helper": {
            "name": "test_urlutils_check_url_helper",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "little-boxes-master/tests/test_webfinger.py": {
        "test_webfinger": {
            "name": "test_webfinger",
            "location": 39,
            "return": [],
            "arguments": {
                "_": [],
                "_1": []
            }
        },
        "test_webfinger_invalid_url": {
            "name": "test_webfinger_invalid_url",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
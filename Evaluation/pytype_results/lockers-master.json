{
    "lockers-master/source/manage.py": {},
    "lockers-master/source/lockers/admin.py": {
        "ReferrerFilter.lookups": {
            "name": "lookups",
            "location": 13,
            "return": [
                "Tuple[(Tuple[(str, str)], Tuple[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "model_admin": []
            }
        },
        "ReferrerFilter.queryset": {
            "name": "queryset",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": []
            }
        },
        "LockerAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LockerAdmin.get_is_active": {
            "name": "get_is_active",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "OwnershipAdmin.get_user": {
            "name": "get_user",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "OwnershipAdmin.get_locker_number": {
            "name": "get_locker_number",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "OwnershipAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "lockers-master/source/lockers/email.py": {
        "send_final_warning": {
            "name": "send_final_warning",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "token": []
            }
        },
        "send_re_activation_mail": {
            "name": "send_re_activation_mail",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "token": []
            }
        },
        "send_locker_email": {
            "name": "send_locker_email",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "token": [],
                "activation_type": []
            }
        }
    },
    "lockers-master/source/lockers/forms.py": {},
    "lockers-master/source/lockers/models.py": {
        "LockerManager.reset_idle": {
            "name": "reset_idle",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locker.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locker.is_free": {
            "name": "is_free",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locker.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Locker.clear": {
            "name": "clear",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerUser.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerUser.reached_limit": {
            "name": "reached_limit",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerUser.fetch_lockers": {
            "name": "fetch_lockers",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnershipManager.prune_expired": {
            "name": "prune_expired",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ownership.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ownership.create_confirmation": {
            "name": "create_confirmation",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ownership.reached_limit": {
            "name": "reached_limit",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerConfirmationManager.prune_expired": {
            "name": "prune_expired",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerToken.activate": {
            "name": "activate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerToken.expired": {
            "name": "expired",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerToken.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerToken.reactivate": {
            "name": "reactivate",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerToken.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/tests.py": {
        "create_user_with_locker": {
            "name": "create_user_with_locker",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "count": []
            }
        },
        "LockerUserLimitTest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerUserLimitTest.test_not_reached_limit": {
            "name": "test_not_reached_limit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LockerUserLimitTest.test_reached_limit": {
            "name": "test_reached_limit",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_locker_inactive": {
            "name": "test_locker_inactive",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_locker_taken": {
            "name": "test_locker_taken",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_prune_expired": {
            "name": "test_prune_expired",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_reset_idle": {
            "name": "test_reset_idle",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_active_locker_user_kept_after_reset": {
            "name": "test_active_locker_user_kept_after_reset",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenTest.test_reset_locker_ownerships": {
            "name": "test_reset_locker_ownerships",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_email_activations": {
            "name": "test_email_activations",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/urls.py": {},
    "lockers-master/source/lockers/views.py": {
        "view_lockers": {
            "name": "view_lockers",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "page": []
            }
        },
        "my_lockers": {
            "name": "my_lockers",
            "location": 31,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "register_locker": {
            "name": "register_locker",
            "location": 43,
            "return": [],
            "arguments": {
                "request": [],
                "number": []
            }
        },
        "activate_ownership": {
            "name": "activate_ownership",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "code": []
            }
        },
        "manage_lockers": {
            "name": "manage_lockers",
            "location": 114,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "clear_locker": {
            "name": "clear_locker",
            "location": 126,
            "return": [],
            "arguments": {
                "request": [],
                "locker_number": []
            }
        }
    },
    "lockers-master/source/lockers/__init__.py": {},
    "lockers-master/source/lockers/management/__init__.py": {},
    "lockers-master/source/lockers/management/commands/final_warning.py": {
        "issue_final_warnings": {
            "name": "issue_final_warnings",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/management/commands/freezombielockers.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/management/commands/pruneexpired.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/management/commands/resetlockerstatus.py": {
        "reset_locker_ownerships": {
            "name": "reset_locker_ownerships",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/lockers/migrations/__init__.py": {},
    "lockers-master/source/main/oauth.py": {
        "allauth_token": {
            "name": "allauth_token",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "user": []
            }
        },
        "save_study_program_data": {
            "name": "save_study_program_data",
            "location": 41,
            "return": [],
            "arguments": {
                "sender": [],
                "request": [],
                "user": []
            }
        },
        "SocialAccountAdapter.pre_social_login": {
            "name": "pre_social_login",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "sociallogin": []
            }
        }
    },
    "lockers-master/source/main/urls.py": {},
    "lockers-master/source/main/views.py": {},
    "lockers-master/source/main/wsgi.py": {},
    "lockers-master/source/main/__init__.py": {},
    "lockers-master/source/main/management/__init__.py": {},
    "lockers-master/source/main/management/commands/dataporten_setup.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/main/management/commands/import_emails.py": {
        "Command.import_email_template": {
            "name": "import_email_template",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lockers-master/source/main/migrations/0001_initial.py": {
        "create_site_model_objects": {
            "name": "create_site_model_objects",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "delete_site_model_objects": {
            "name": "delete_site_model_objects",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "lockers-master/source/main/settings/base.py": {},
    "lockers-master/source/main/settings/dev.py": {},
    "lockers-master/source/main/settings/prod.py": {},
    "lockers-master/source/main/settings/test.py": {}
}
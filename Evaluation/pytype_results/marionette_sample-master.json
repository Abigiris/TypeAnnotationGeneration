{
    "marionette_sample-master/2to3/modified/six.py": {
        "_add_doc": {
            "name": "_add_doc",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [],
                "doc": []
            }
        },
        "_import_module": {
            "name": "_import_module",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "add_move": {
            "name": "add_move",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "move": []
            }
        },
        "remove_move": {
            "name": "remove_move",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "assertCountEqual": {
            "name": "assertCountEqual",
            "location": 686,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRaisesRegex": {
            "name": "assertRaisesRegex",
            "location": 690,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "assertRegex": {
            "name": "assertRegex",
            "location": 694,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 835,
            "return": [
                "type"
            ],
            "arguments": {
                "meta": []
            }
        },
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 851,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "metaclass": []
            }
        },
        "ensure_binary": {
            "name": "ensure_binary",
            "location": 869,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "encoding": [],
                "errors": []
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 888,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "encoding": [],
                "errors": []
            }
        },
        "ensure_text": {
            "name": "ensure_text",
            "location": 908,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "encoding": [],
                "errors": []
            }
        },
        "python_2_unicode_compatible": {
            "name": "python_2_unicode_compatible",
            "location": 927,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "klass": [
                    "_T0@@"
                ]
            }
        },
        "_LazyDescr.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_LazyDescr.__get__": {
            "name": "__get__",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "tp": []
            }
        },
        "MovedModule.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "old": [],
                "new": []
            }
        },
        "MovedModule._resolve": {
            "name": "_resolve",
            "location": 114,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedModule.__getattr__": {
            "name": "__getattr__",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "_LazyModule.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_LazyModule.__dir__": {
            "name": "__dir__",
            "location": 130,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedAttribute.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "old_mod": [],
                "new_mod": [],
                "old_attr": [],
                "new_attr": []
            }
        },
        "MovedAttribute._resolve": {
            "name": "_resolve",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SixMetaPathImporter.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "six_module_name": []
            }
        },
        "_SixMetaPathImporter._add_module": {
            "name": "_add_module",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod": []
            }
        },
        "_SixMetaPathImporter._get_module": {
            "name": "_get_module",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "_SixMetaPathImporter.find_module": {
            "name": "find_module",
            "location": 184,
            "return": [
                "Optional[_SixMetaPathImporter]"
            ],
            "arguments": {
                "self": [],
                "fullname": [],
                "path": []
            }
        },
        "_SixMetaPathImporter.__get_module": {
            "name": "__get_module",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "_SixMetaPathImporter.load_module": {
            "name": "load_module",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "_SixMetaPathImporter.is_package": {
            "name": "is_package",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "_SixMetaPathImporter.get_code": {
            "name": "get_code",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "Module_six_moves_urllib.__dir__": {
            "name": "__dir__",
            "location": 498,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_unbound_function": {
            "name": "get_unbound_function",
            "location": 566,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "unbound": [
                    "_T0@@"
                ]
            }
        },
        "create_unbound_method": {
            "name": "create_unbound_method",
            "location": 572,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "func": [
                    "_T0@@"
                ],
                "cls": []
            }
        },
        "create_bound_method": {
            "name": "create_bound_method",
            "location": 569,
            "return": [],
            "arguments": {
                "func": [],
                "obj": []
            }
        },
        "iterkeys": {
            "name": "iterkeys",
            "location": 612,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "itervalues": {
            "name": "itervalues",
            "location": 615,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "iteritems": {
            "name": "iteritems",
            "location": 618,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "iterlists": {
            "name": "iterlists",
            "location": 621,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "b": {
            "name": "b",
            "location": 662,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "u": {
            "name": "u",
            "location": 666,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "s": [
                    "_T0@@"
                ]
            }
        },
        "byte2int": {
            "name": "byte2int",
            "location": 671,
            "return": [],
            "arguments": {
                "bs": []
            }
        },
        "indexbytes": {
            "name": "indexbytes",
            "location": 674,
            "return": [
                "_V@@"
            ],
            "arguments": {
                "buf": [],
                "i": []
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 701,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "tp": [],
                "value": [],
                "tb": []
            }
        },
        "exec_": {
            "name": "exec_",
            "location": 715,
            "return": [],
            "arguments": {
                "_code_": [],
                "_globs_": [],
                "_locs_": []
            }
        },
        "print_": {
            "name": "print_",
            "location": 814,
            "return": [],
            "arguments": {}
        },
        "wraps": {
            "name": "wraps",
            "location": 824,
            "return": [
                "Callable[([_T], _T)]"
            ],
            "arguments": {
                "wrapped": [
                    "Callable"
                ],
                "assigned": [
                    "Sequence[str]"
                ],
                "updated": [
                    "Sequence[str]"
                ]
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 853,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "advance_iterator": {
            "name": "advance_iterator",
            "location": 543,
            "return": [
                "Any"
            ],
            "arguments": {
                "it": []
            }
        },
        "callable": {
            "name": "callable",
            "location": 551,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "Iterator.next": {
            "name": "next",
            "location": 577,
            "return": [
                "Union[(_T, _T2)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "raise_from": {
            "name": "raise_from",
            "location": 752,
            "return": [],
            "arguments": {
                "value": [],
                "from_value": []
            }
        },
        "print_.write": {
            "name": "write",
            "location": 764,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "wraps.wrapper": {
            "name": "wrapper",
            "location": 826,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "with_metaclass.metaclass.__new__": {
            "name": "__new__",
            "location": 842,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "this_bases": [],
                "d": []
            }
        },
        "with_metaclass.metaclass.__prepare__": {
            "name": "__prepare__",
            "location": 846,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "this_bases": []
            }
        },
        "X.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "marionette_sample-master/2to3/modified/marionette_driver/geckoinstance.py": {
        "GeckoInstance.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "bin": [],
                "profile": [],
                "addons": [],
                "app_args": [],
                "symbols_path": [],
                "gecko_log": [],
                "prefs": [],
                "workspace": [],
                "verbose": [],
                "headless": []
            }
        },
        "GeckoInstance.gecko_log": {
            "name": "gecko_log",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeckoInstance._update_profile": {
            "name": "_update_profile",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeckoInstance.create": {
            "name": "create",
            "location": 207,
            "return": [
                "Union[(DesktopInstance, FennecInstance)]"
            ],
            "arguments": {
                "cls": [],
                "app": []
            }
        },
        "GeckoInstance.start": {
            "name": "start",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeckoInstance._get_runner_args": {
            "name": "_get_runner_args",
            "location": 228,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeckoInstance.close": {
            "name": "close",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clean": []
            }
        },
        "GeckoInstance.restart": {
            "name": "restart",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [],
                "clean": []
            }
        },
        "FennecInstance.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emulator_binary": [],
                "avd_home": [],
                "avd": [],
                "adb_path": [],
                "serial": [],
                "connect_to_running_emulator": [],
                "package_name": []
            }
        },
        "FennecInstance.package_name": {
            "name": "package_name",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FennecInstance.start": {
            "name": "start",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FennecInstance._get_runner_args": {
            "name": "_get_runner_args",
            "location": 377,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FennecInstance.close": {
            "name": "close",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clean": []
            }
        },
        "DesktopInstance.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullOutput.__call__": {
            "name": "__call__",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        }
    },
    "marionette_sample-master/2to3/modified/marionette_driver/marionette.py": {
        "HTMLElement.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marionette": [],
                "id": []
            }
        },
        "HTMLElement.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other_element": []
            }
        },
        "HTMLElement.find_element": {
            "name": "find_element",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "target": []
            }
        },
        "HTMLElement.find_elements": {
            "name": "find_elements",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "target": []
            }
        },
        "HTMLElement.get_attribute": {
            "name": "get_attribute",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "HTMLElement.get_property": {
            "name": "get_property",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "HTMLElement.click": {
            "name": "click",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.tap": {
            "name": "tap",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "HTMLElement.text": {
            "name": "text",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.send_keys": {
            "name": "send_keys",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.clear": {
            "name": "clear",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.is_selected": {
            "name": "is_selected",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.is_enabled": {
            "name": "is_enabled",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.is_displayed": {
            "name": "is_displayed",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.size": {
            "name": "size",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.tag_name": {
            "name": "tag_name",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.location": {
            "name": "location",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.rect": {
            "name": "rect",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLElement.value_of_css_property": {
            "name": "value_of_css_property",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "property_name": []
            }
        },
        "Actions.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marionette": []
            }
        },
        "Actions.press": {
            "name": "press",
            "location": 231,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "x": [],
                "y": []
            }
        },
        "Actions.release": {
            "name": "release",
            "location": 249,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ]
            }
        },
        "Actions.move": {
            "name": "move",
            "location": 266,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": []
            }
        },
        "Actions.move_by_offset": {
            "name": "move_by_offset",
            "location": 278,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "x": [],
                "y": []
            }
        },
        "Actions.wait": {
            "name": "wait",
            "location": 293,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "time": []
            }
        },
        "Actions.cancel": {
            "name": "cancel",
            "location": 305,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ]
            }
        },
        "Actions.tap": {
            "name": "tap",
            "location": 314,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "x": [],
                "y": []
            }
        },
        "Actions.double_tap": {
            "name": "double_tap",
            "location": 337,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "x": [],
                "y": []
            }
        },
        "Actions.click": {
            "name": "click",
            "location": 354,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "button": [],
                "count": []
            }
        },
        "Actions.context_click": {
            "name": "context_click",
            "location": 368,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": []
            }
        },
        "Actions.middle_click": {
            "name": "middle_click",
            "location": 376,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": []
            }
        },
        "Actions.double_click": {
            "name": "double_click",
            "location": 384,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": []
            }
        },
        "Actions.flick": {
            "name": "flick",
            "location": 392,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "x1": [],
                "y1": [],
                "x2": [],
                "y2": [],
                "duration": []
            }
        },
        "Actions.long_press": {
            "name": "long_press",
            "location": 423,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "element": [],
                "time_in_seconds": [],
                "x": [],
                "y": []
            }
        },
        "Actions.key_down": {
            "name": "key_down",
            "location": 447,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "key_code": []
            }
        },
        "Actions.key_up": {
            "name": "key_up",
            "location": 457,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ],
                "key_code": []
            }
        },
        "Actions.perform": {
            "name": "perform",
            "location": 467,
            "return": [
                "_TActions@@Actions@@"
            ],
            "arguments": {
                "self": [
                    "_TActions@@Actions@@"
                ]
            }
        },
        "MultiActions.__init__": {
            "name": "__init__",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marionette": []
            }
        },
        "MultiActions.add": {
            "name": "add",
            "location": 502,
            "return": [
                "_TMultiActions@@MultiActions@@"
            ],
            "arguments": {
                "self": [
                    "_TMultiActions@@MultiActions@@"
                ],
                "action": []
            }
        },
        "MultiActions.perform": {
            "name": "perform",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.__init__": {
            "name": "__init__",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "marionette": []
            }
        },
        "Alert.accept": {
            "name": "accept",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.dismiss": {
            "name": "dismiss",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.text": {
            "name": "text",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alert.send_keys": {
            "name": "send_keys",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.__init__": {
            "name": "__init__",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "app": [],
                "bin": [],
                "baseurl": [],
                "socket_timeout": [],
                "startup_timeout": []
            }
        },
        "Marionette.profile_path": {
            "name": "profile_path",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.cleanup": {
            "name": "cleanup",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.__del__": {
            "name": "__del__",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.is_port_available": {
            "name": "is_port_available",
            "location": 641,
            "return": [
                "bool"
            ],
            "arguments": {
                "port": [],
                "host": []
            }
        },
        "Marionette.wait_for_port": {
            "name": "wait_for_port",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Marionette.raise_for_port": {
            "name": "raise_for_port",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Marionette._send_message": {
            "name": "_send_message",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "params": [],
                "key": []
            }
        },
        "Marionette._unwrap_response": {
            "name": "_unwrap_response",
            "location": 747,
            "return": [
                "Union[(HTMLElement, list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0@@"
                ]
            }
        },
        "Marionette._handle_error": {
            "name": "_handle_error",
            "location": 759,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Marionette.check_for_crash": {
            "name": "check_for_crash",
            "location": 775,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette._handle_socket_failure": {
            "name": "_handle_socket_failure",
            "location": 789,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.convert_keys": {
            "name": "convert_keys",
            "location": 836,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Marionette.clear_pref": {
            "name": "clear_pref",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pref": []
            }
        },
        "Marionette.get_pref": {
            "name": "get_pref",
            "location": 861,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pref": [],
                "default_branch": [],
                "value_type": []
            }
        },
        "Marionette.set_pref": {
            "name": "set_pref",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pref": [],
                "value": [],
                "default_branch": []
            }
        },
        "Marionette.set_prefs": {
            "name": "set_prefs",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefs": [],
                "default_branch": []
            }
        },
        "Marionette.using_prefs": {
            "name": "using_prefs",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "prefs": [],
                "default_branch": []
            }
        },
        "Marionette.enforce_gecko_prefs": {
            "name": "enforce_gecko_prefs",
            "location": 967,
            "return": [],
            "arguments": {
                "self": [],
                "prefs": []
            }
        },
        "Marionette._request_in_app_shutdown": {
            "name": "_request_in_app_shutdown",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.quit": {
            "name": "quit",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "clean": [],
                "in_app": [],
                "callback": []
            }
        },
        "Marionette.restart": {
            "name": "restart",
            "location": 1111,
            "return": [],
            "arguments": {
                "self": [],
                "clean": [],
                "in_app": [],
                "callback": []
            }
        },
        "Marionette.absolute_url": {
            "name": "absolute_url",
            "location": 1170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relative_url": []
            }
        },
        "Marionette.start_session": {
            "name": "start_session",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": [],
                "capabilities": [],
                "session_id": [],
                "timeout": []
            }
        },
        "Marionette.test_name": {
            "name": "test_name",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": [],
                "test_name": []
            }
        },
        "Marionette.delete_session": {
            "name": "delete_session",
            "location": 1230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "send_request": [],
                "reset_session_id": []
            }
        },
        "Marionette.session_capabilities": {
            "name": "session_capabilities",
            "location": 1255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.set_script_timeout": {
            "name": "set_script_timeout",
            "location": 1262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Marionette.set_search_timeout": {
            "name": "set_search_timeout",
            "location": 1282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Marionette.set_page_load_timeout": {
            "name": "set_page_load_timeout",
            "location": 1303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Marionette.current_window_handle": {
            "name": "current_window_handle",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.current_chrome_window_handle": {
            "name": "current_chrome_window_handle",
            "location": 1336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.get_window_position": {
            "name": "get_window_position",
            "location": 1352,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.set_window_position": {
            "name": "set_window_position",
            "location": 1362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Marionette.set_window_rect": {
            "name": "set_window_rect",
            "location": 1372,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "height": [],
                "width": []
            }
        },
        "Marionette.window_rect": {
            "name": "window_rect",
            "location": 1394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.title": {
            "name": "title",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.window_handles": {
            "name": "window_handles",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.chrome_window_handles": {
            "name": "chrome_window_handles",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.page_source": {
            "name": "page_source",
            "location": 1432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.close": {
            "name": "close",
            "location": 1436,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.close_chrome_window": {
            "name": "close_chrome_window",
            "location": 1444,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.set_context": {
            "name": "set_context",
            "location": 1452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Marionette.using_context": {
            "name": "using_context",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Marionette.switch_to_alert": {
            "name": "switch_to_alert",
            "location": 1488,
            "return": [
                "Alert"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.switch_to_window": {
            "name": "switch_to_window",
            "location": 1500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_id": [],
                "focus": []
            }
        },
        "Marionette.get_active_frame": {
            "name": "get_active_frame",
            "location": 1513,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.switch_to_default_content": {
            "name": "switch_to_default_content",
            "location": 1518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.switch_to_parent_frame": {
            "name": "switch_to_parent_frame",
            "location": 1522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.switch_to_frame": {
            "name": "switch_to_frame",
            "location": 1528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [],
                "focus": []
            }
        },
        "Marionette.switch_to_shadow_root": {
            "name": "switch_to_shadow_root",
            "location": 1549,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "host": []
            }
        },
        "Marionette.get_url": {
            "name": "get_url",
            "location": 1564,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.get_window_type": {
            "name": "get_window_type",
            "location": 1578,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.navigate": {
            "name": "navigate",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Marionette.go_back": {
            "name": "go_back",
            "location": 1612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.go_forward": {
            "name": "go_forward",
            "location": 1616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.refresh": {
            "name": "refresh",
            "location": 1620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette._to_json": {
            "name": "_to_json",
            "location": 1624,
            "return": [
                "Union[(dict, list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "_T0@@"
                ]
            }
        },
        "Marionette._from_json": {
            "name": "_from_json",
            "location": 1641,
            "return": [
                "Union[(HTMLElement, dict, list, _T0)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0@@"
                ]
            }
        },
        "Marionette.execute_js_script": {
            "name": "execute_js_script",
            "location": 1661,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "script": [],
                "script_args": [],
                "async_": [],
                "new_sandbox": [],
                "script_timeout": [],
                "inactivity_timeout": [],
                "filename": [],
                "sandbox": []
            }
        },
        "Marionette.execute_script": {
            "name": "execute_script",
            "location": 1678,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "script": [],
                "script_args": [],
                "new_sandbox": [],
                "sandbox": [],
                "script_timeout": []
            }
        },
        "Marionette.execute_async_script": {
            "name": "execute_async_script",
            "location": 1754,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "script": [],
                "script_args": [],
                "new_sandbox": [],
                "sandbox": [],
                "script_timeout": [],
                "debug_script": []
            }
        },
        "Marionette.find_element": {
            "name": "find_element",
            "location": 1803,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "target": [],
                "id": []
            }
        },
        "Marionette.find_elements": {
            "name": "find_elements",
            "location": 1833,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "target": [],
                "id": []
            }
        },
        "Marionette.get_active_element": {
            "name": "get_active_element",
            "location": 1862,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.add_cookie": {
            "name": "add_cookie",
            "location": 1868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cookie": []
            }
        },
        "Marionette.delete_all_cookies": {
            "name": "delete_all_cookies",
            "location": 1887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.delete_cookie": {
            "name": "delete_cookie",
            "location": 1898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Marionette.get_cookie": {
            "name": "get_cookie",
            "location": 1911,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Marionette.get_cookies": {
            "name": "get_cookies",
            "location": 1923,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.screenshot": {
            "name": "screenshot",
            "location": 1933,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "element": [],
                "highlights": [],
                "format": [],
                "full": [],
                "scroll": []
            }
        },
        "Marionette.orientation": {
            "name": "orientation",
            "location": 1988,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.set_orientation": {
            "name": "set_orientation",
            "location": 1997,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "orientation": []
            }
        },
        "Marionette.window_size": {
            "name": "window_size",
            "location": 2015,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Marionette.set_window_size": {
            "name": "set_window_size",
            "location": 2029,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        },
        "Marionette.maximize_window": {
            "name": "maximize_window",
            "location": 2047,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Marionette.fullscreen": {
            "name": "fullscreen",
            "location": 2053,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marionette_sample-master/2to3/modified/marionette_driver/transport.py": {
        "SocketTimeout.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socket": [],
                "timeout": []
            }
        },
        "SocketTimeout.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketTimeout.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msgid": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Message.__ne__": {
            "name": "__ne__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msgid": [],
                "name": [],
                "params": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.to_msg": {
            "name": "to_msg",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.from_msg": {
            "name": "from_msg",
            "location": 51,
            "return": [
                "Command"
            ],
            "arguments": {
                "payload": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msgid": [],
                "error": [],
                "result": []
            }
        },
        "Response.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.to_msg": {
            "name": "to_msg",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.from_msg": {
            "name": "from_msg",
            "location": 74,
            "return": [
                "Response"
            ],
            "arguments": {
                "payload": []
            }
        },
        "Proto2Command.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "params": []
            }
        },
        "Proto2Response.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "result": []
            }
        },
        "Proto2Response.from_data": {
            "name": "from_data",
            "location": 98,
            "return": [
                "Proto2Response"
            ],
            "arguments": {
                "data": []
            }
        },
        "TcpTransport.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "addr": [],
                "port": [],
                "socket_timeout": []
            }
        },
        "TcpTransport.socket_timeout": {
            "name": "socket_timeout",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TcpTransport._unmarshal": {
            "name": "_unmarshal",
            "location": 146,
            "return": [
                "Proto2Response"
            ],
            "arguments": {
                "self": [],
                "packet": []
            }
        },
        "TcpTransport.receive": {
            "name": "receive",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "unmarshal": []
            }
        },
        "TcpTransport.connect": {
            "name": "connect",
            "location": 215,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpTransport.send": {
            "name": "send",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TcpTransport.respond": {
            "name": "respond",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TcpTransport.request": {
            "name": "request",
            "location": 280,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "params": []
            }
        },
        "TcpTransport.close": {
            "name": "close",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TcpTransport.__del__": {
            "name": "__del__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "marionette_sample-master/2to3/modified/mozprocess/processhandler.py": {
        "ProcessHandlerMixin.__init__": {
            "name": "__init__",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "args": [],
                "cwd": [],
                "env": [],
                "ignore_children": [],
                "kill_on_timeout": [],
                "processOutputLine": [],
                "processStderrLine": [],
                "onTimeout": [],
                "onFinish": []
            }
        },
        "ProcessHandlerMixin.timedOut": {
            "name": "timedOut",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.outputTimedOut": {
            "name": "outputTimedOut",
            "location": 764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.commandline": {
            "name": "commandline",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.run": {
            "name": "run",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "outputTimeout": []
            }
        },
        "ProcessHandlerMixin.kill": {
            "name": "kill",
            "location": 808,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "ProcessHandlerMixin.poll": {
            "name": "poll",
            "location": 833,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.processOutput": {
            "name": "processOutput",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "outputTimeout": []
            }
        },
        "ProcessHandlerMixin.wait": {
            "name": "wait",
            "location": 876,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "ProcessHandlerMixin.pid": {
            "name": "pid",
            "location": 905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.pid_exists": {
            "name": "pid_exists",
            "location": 912,
            "return": [
                "Any"
            ],
            "arguments": {
                "pid": []
            }
        },
        "ProcessHandlerMixin._getpgid": {
            "name": "_getpgid",
            "location": 943,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cls": [],
                "pid": []
            }
        },
        "ProcessHandlerMixin.check_for_detached": {
            "name": "check_for_detached",
            "location": 951,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "new_pid": []
            }
        },
        "CallableList.__call__": {
            "name": "__call__",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableList.__add__": {
            "name": "__add__",
            "location": 981,
            "return": [
                "_TCallableList@@CallableList@@"
            ],
            "arguments": {
                "self": [
                    "_TCallableList@@CallableList@@"
                ],
                "lst": []
            }
        },
        "ProcessReader.__init__": {
            "name": "__init__",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout_callback": [],
                "stderr_callback": [],
                "finished_callback": [],
                "timeout_callback": [],
                "timeout": [],
                "output_timeout": []
            }
        },
        "ProcessReader._create_stream_reader": {
            "name": "_create_stream_reader",
            "location": 999,
            "return": [
                "threading.Thread"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "stream": [],
                "queue": [],
                "callback": []
            }
        },
        "ProcessReader._read_stream": {
            "name": "_read_stream",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "queue": [],
                "callback": []
            }
        },
        "ProcessReader.start": {
            "name": "start",
            "location": 1015,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": []
            }
        },
        "ProcessReader._read": {
            "name": "_read",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout_reader": [],
                "stderr_reader": [],
                "queue": []
            }
        },
        "ProcessReader.is_alive": {
            "name": "is_alive",
            "location": 1080,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessReader.join": {
            "name": "join",
            "location": 1085,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "StoreOutput.__init__": {
            "name": "__init__",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreOutput.__call__": {
            "name": "__call__",
            "location": 1100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StreamOutput.__init__": {
            "name": "__init__",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StreamOutput.__call__": {
            "name": "__call__",
            "location": 1110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "LogOutput.__init__": {
            "name": "__init__",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "LogOutput.__del__": {
            "name": "__del__",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandler.__init__": {
            "name": "__init__",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "logfile": [],
                "stream": [],
                "storeOutput": []
            }
        },
        "ProcessHandlerMixin.Process.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "bufsize": [],
                "executable": [],
                "stdin": [],
                "stdout": [],
                "stderr": [],
                "preexec_fn": [],
                "close_fds": [],
                "shell": [],
                "cwd": [],
                "env": [],
                "universal_newlines": [],
                "startupinfo": [],
                "creationflags": [],
                "ignore_children": []
            }
        },
        "ProcessHandlerMixin.Process.debug": {
            "name": "debug",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "ProcessHandlerMixin.Process.__del__": {
            "name": "__del__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process.kill": {
            "name": "kill",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "ProcessHandlerMixin.Process.poll": {
            "name": "poll",
            "location": 213,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process.wait": {
            "name": "wait",
            "location": 223,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.__init__.to_callable_list": {
            "name": "to_callable_list",
            "location": 723,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "ProcessHandlerMixin.__init__.on_timeout": {
            "name": "on_timeout",
            "location": 733,
            "return": [],
            "arguments": {}
        },
        "ProcessHandlerMixin.Process._execute_child": {
            "name": "_execute_child",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._can_nest_jobs": {
            "name": "_can_nest_jobs",
            "location": 406,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._procmgr": {
            "name": "_procmgr",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._poll_iocompletion_port": {
            "name": "_poll_iocompletion_port",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._wait": {
            "name": "_wait",
            "location": 690,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._cleanup_job_io_port": {
            "name": "_cleanup_job_io_port",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process._cleanup": {
            "name": "_cleanup",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessHandlerMixin.Process.__init__.setpgidfn": {
            "name": "setpgidfn",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "ProcessHandlerMixin.Process.kill.send_sig": {
            "name": "send_sig",
            "location": 165,
            "return": [],
            "arguments": {
                "sig": [],
                "retries": []
            }
        }
    },
    "marionette_sample-master/2to3/modified/mozprocess/winprocess.py": {
        "ErrCheckBool": {
            "name": "ErrCheckBool",
            "location": 52,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "args": [
                    "_T2@@"
                ]
            }
        },
        "ErrCheckHandle": {
            "name": "ErrCheckHandle",
            "location": 81,
            "return": [
                "AutoHANDLE"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "args": []
            }
        },
        "ErrCheckCreateProcess": {
            "name": "ErrCheckCreateProcess",
            "location": 214,
            "return": [
                "Tuple[(AutoHANDLE, AutoHANDLE, Any, Any)]"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "args": []
            }
        },
        "ErrCheckOpenProcess": {
            "name": "ErrCheckOpenProcess",
            "location": 285,
            "return": [
                "AutoHANDLE"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "args": []
            }
        },
        "ErrCheckResumeThread": {
            "name": "ErrCheckResumeThread",
            "location": 404,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "args": [
                    "_T2@@"
                ]
            }
        },
        "CanCreateJobObject": {
            "name": "CanCreateJobObject",
            "location": 483,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "parent": {
            "name": "parent",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "child": {
            "name": "child",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoHANDLE.Close": {
            "name": "Close",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoHANDLE.__del__": {
            "name": "__del__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoHANDLE.__int__": {
            "name": "__int__",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PROCESS_INFORMATION.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentBlock.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "IsProcessInJob": {
            "name": "IsProcessInJob",
            "location": 398,
            "return": [],
            "arguments": {
                "process": []
            }
        }
    },
    "marionette_sample-master/scripts/sample.py": {},
    "marionette_sample-master/src/download.py": {
        "setup_download_folder": {
            "name": "setup_download_folder",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": []
            }
        }
    },
    "marionette_sample-master/src/main.py": {},
    "marionette_sample-master/src/mime.py": {},
    "marionette_sample-master/src/puppet.py": {
        "Puppet.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binary": [],
                "profile": []
            }
        },
        "Puppet.has_marionette": {
            "name": "has_marionette",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Puppet.auto_download": {
            "name": "auto_download",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Puppet.__activate_auto_download": {
            "name": "__activate_auto_download",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Puppet.download_dir": {
            "name": "download_dir",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dir": []
            }
        },
        "Puppet.set_download": {
            "name": "set_download",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": []
            }
        },
        "Puppet.query_selector": {
            "name": "query_selector",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "selectors": []
            }
        },
        "Puppet.query_selectors": {
            "name": "query_selectors",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "selectors": []
            }
        },
        "Puppet.wait": {
            "name": "wait",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": []
            }
        },
        "Puppet.quit": {
            "name": "quit",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Puppet.exec": {
            "name": "exec",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": []
            }
        }
    },
    "marionette_sample-master/src/script.py": {
        "load_scripts": {
            "name": "load_scripts",
            "location": 5,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "dir": []
            }
        },
        "load_script": {
            "name": "load_script",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        },
        "__load_script": {
            "name": "__load_script",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "marionette_sample-master/src/userprofile.py": {
        "profile_dir": {
            "name": "profile_dir",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    }
}
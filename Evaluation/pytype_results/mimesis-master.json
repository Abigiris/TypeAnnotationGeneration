{
    "mimesis-master/minifier.py": {
        "human_repr": {
            "name": "human_repr",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "float"
                ]
            }
        },
        "Minimizer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Minimizer.run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Minimizer.minify": {
            "name": "minify",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "mimesis-master/docs/conf.py": {},
    "mimesis-master/mimesis/compat.py": {},
    "mimesis-master/mimesis/enums.py": {
        "Locale.values": {
            "name": "values",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "mimesis-master/mimesis/exceptions.py": {
        "LocaleError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "Union[(str, mimesis.enums.Locale)]"
                ]
            }
        },
        "LocaleError.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaError.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NonEnumerableError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_obj": []
            }
        },
        "NonEnumerableError.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "FieldError.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/locales.py": {
        "validate_locale": {
            "name": "validate_locale",
            "location": 11,
            "return": [
                "mimesis.enums.Locale"
            ],
            "arguments": {
                "locale": [
                    "Union[(str, mimesis.enums.Locale)]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/random.py": {
        "get_random_item": {
            "name": "get_random_item",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "enum": [],
                "rnd": [
                    "Optional[Random]"
                ]
            }
        },
        "Random.randints": {
            "name": "randints",
            "location": 25,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ],
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "Random.urandom": {
            "name": "urandom",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "Random.generate_string": {
            "name": "generate_string",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "str_seq": [
                    "str"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "Random.custom_code": {
            "name": "custom_code",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "str"
                ],
                "char": [
                    "str"
                ],
                "digit": [
                    "str"
                ]
            }
        },
        "Random.uniform": {
            "name": "uniform",
            "location": 89,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "Random.randstr": {
            "name": "randstr",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "unique": [
                    "bool"
                ],
                "length": [
                    "Optional[int]"
                ]
            }
        },
        "Random.custom_code.random_int": {
            "name": "random_int",
            "location": 73,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "mimesis-master/mimesis/schema.py": {
        "BaseField.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "mimesis.enums.Locale"
                ],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ],
                "providers": [
                    "Optional[Sequence]"
                ]
            }
        },
        "BaseField.perform": {
            "name": "perform",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "key": [
                    "Optional[Callable[([Any], Any)]]"
                ]
            }
        },
        "BaseField.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__call__": {
            "name": "__call__",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Callable[([], Dict[(str, Any)])]"
                ]
            }
        },
        "Schema.to_csv": {
            "name": "to_csv",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "iterations": [
                    "int"
                ]
            }
        },
        "Schema.to_json": {
            "name": "to_json",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "iterations": [
                    "int"
                ]
            }
        },
        "Schema.to_pickle": {
            "name": "to_pickle",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "iterations": [
                    "int"
                ]
            }
        },
        "Schema.create": {
            "name": "create",
            "location": 199,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "iterations": [
                    "int"
                ]
            }
        },
        "Schema.loop": {
            "name": "loop",
            "location": 217,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.iterator": {
            "name": "iterator",
            "location": 253,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "iterations": [
                    "int"
                ]
            }
        },
        "BaseField.perform.tail_parser": {
            "name": "tail_parser",
            "location": 80,
            "return": [],
            "arguments": {
                "tails": [],
                "obj": []
            }
        }
    },
    "mimesis-master/mimesis/shortcuts.py": {
        "_get_translation_table": {
            "name": "_get_translation_table",
            "location": 13,
            "return": [],
            "arguments": {
                "locale": []
            }
        },
        "luhn_checksum": {
            "name": "luhn_checksum",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "str"
                ]
            }
        },
        "romanize": {
            "name": "romanize",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "locale": [
                    "Union[(str, mimesis.enums.Locale)]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/types.py": {},
    "mimesis-master/mimesis/__init__.py": {},
    "mimesis-master/mimesis/builtins/base.py": {
        "BaseSpecProvider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/da.py": {
        "DenmarkSpecProvider.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "DenmarkSpecProvider._calculate_century_selector": {
            "name": "_calculate_century_selector",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int"
                ]
            }
        },
        "DenmarkSpecProvider._calculate_checksum": {
            "name": "_calculate_checksum",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cpr_nr_no_checksum": [
                    "str"
                ]
            }
        },
        "DenmarkSpecProvider._generate_serial_checksum": {
            "name": "_generate_serial_checksum",
            "location": 74,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "cpr_century": [
                    "str"
                ]
            }
        },
        "DenmarkSpecProvider.cpr": {
            "name": "cpr",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/en.py": {
        "USASpecProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "USASpecProvider.tracking_number": {
            "name": "tracking_number",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str"
                ]
            }
        },
        "USASpecProvider.ssn": {
            "name": "ssn",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/it.py": {
        "ItalySpecProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "ItalySpecProvider.fiscal_code": {
            "name": "fiscal_code",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/builtins/nl.py": {
        "NetherlandsSpecProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "NetherlandsSpecProvider.bsn": {
            "name": "bsn",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetherlandsSpecProvider.burgerservicenummer": {
            "name": "burgerservicenummer",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetherlandsSpecProvider.bsn._is_valid_bsn": {
            "name": "_is_valid_bsn",
            "location": 33,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/pl.py": {
        "PolandSpecProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "PolandSpecProvider.nip": {
            "name": "nip",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolandSpecProvider.pesel": {
            "name": "pesel",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "birth_date": [
                    "Optional[datetime.datetime]"
                ],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "PolandSpecProvider.regon": {
            "name": "regon",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/pt_br.py": {
        "BrazilSpecProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "BrazilSpecProvider.cpf": {
            "name": "cpf",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "with_mask": [
                    "bool"
                ]
            }
        },
        "BrazilSpecProvider.cnpj": {
            "name": "cnpj",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "with_mask": [
                    "bool"
                ]
            }
        },
        "BrazilSpecProvider.cpf.get_verifying_digit_cpf": {
            "name": "get_verifying_digit_cpf",
            "location": 34,
            "return": [],
            "arguments": {
                "cpf": [],
                "peso": []
            }
        },
        "BrazilSpecProvider.cnpj.get_verifying_digit_cnpj": {
            "name": "get_verifying_digit_cnpj",
            "location": 72,
            "return": [],
            "arguments": {
                "cnpj": [],
                "peso": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/ru.py": {
        "RussiaSpecProvider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "RussiaSpecProvider.generate_sentence": {
            "name": "generate_sentence",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.patronymic": {
            "name": "patronymic",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "RussiaSpecProvider.passport_series": {
            "name": "passport_series",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "Optional[int]"
                ]
            }
        },
        "RussiaSpecProvider.passport_number": {
            "name": "passport_number",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.series_and_number": {
            "name": "series_and_number",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.snils": {
            "name": "snils",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.inn": {
            "name": "inn",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.ogrn": {
            "name": "ogrn",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.bic": {
            "name": "bic",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.kpp": {
            "name": "kpp",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RussiaSpecProvider.inn.control_sum": {
            "name": "control_sum",
            "location": 131,
            "return": [],
            "arguments": {
                "nums": [],
                "t": []
            }
        }
    },
    "mimesis-master/mimesis/builtins/uk.py": {
        "UkraineSpecProvider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "UkraineSpecProvider.patronymic": {
            "name": "patronymic",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/builtins/__init__.py": {},
    "mimesis-master/mimesis/data/__init__.py": {},
    "mimesis-master/mimesis/data/int/address.py": {},
    "mimesis-master/mimesis/data/int/code.py": {},
    "mimesis-master/mimesis/data/int/common.py": {},
    "mimesis-master/mimesis/data/int/cryptographic.py": {},
    "mimesis-master/mimesis/data/int/datetime.py": {},
    "mimesis-master/mimesis/data/int/development.py": {},
    "mimesis-master/mimesis/data/int/file.py": {},
    "mimesis-master/mimesis/data/int/finance.py": {},
    "mimesis-master/mimesis/data/int/hardware.py": {},
    "mimesis-master/mimesis/data/int/internet.py": {},
    "mimesis-master/mimesis/data/int/path.py": {},
    "mimesis-master/mimesis/data/int/payment.py": {},
    "mimesis-master/mimesis/data/int/person.py": {},
    "mimesis-master/mimesis/data/int/scientific.py": {},
    "mimesis-master/mimesis/data/int/text.py": {},
    "mimesis-master/mimesis/data/int/transport.py": {},
    "mimesis-master/mimesis/data/int/__init__.py": {},
    "mimesis-master/mimesis/providers/address.py": {
        "Address.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address._dd_to_dms": {
            "name": "_dd_to_dms",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "float"
                ],
                "_type": [
                    "str"
                ]
            }
        },
        "Address.street_number": {
            "name": "street_number",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "maximum": [
                    "int"
                ]
            }
        },
        "Address.street_name": {
            "name": "street_name",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.street_suffix": {
            "name": "street_suffix",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.address": {
            "name": "address",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.state": {
            "name": "state",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "abbr": [
                    "bool"
                ]
            }
        },
        "Address.region": {
            "name": "region",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.province": {
            "name": "province",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.federal_subject": {
            "name": "federal_subject",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.prefecture": {
            "name": "prefecture",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.postal_code": {
            "name": "postal_code",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.zip_code": {
            "name": "zip_code",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.country_code": {
            "name": "country_code",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "Optional[mimesis.enums.CountryCode]"
                ]
            }
        },
        "Address.country": {
            "name": "country",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.city": {
            "name": "city",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address._get_fs": {
            "name": "_get_fs",
            "location": 203,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "dms": [
                    "bool"
                ]
            }
        },
        "Address.latitude": {
            "name": "latitude",
            "location": 219,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "self": [],
                "dms": [
                    "bool"
                ]
            }
        },
        "Address.longitude": {
            "name": "longitude",
            "location": 227,
            "return": [
                "Union[(float, str)]"
            ],
            "arguments": {
                "self": [],
                "dms": [
                    "bool"
                ]
            }
        },
        "Address.coordinates": {
            "name": "coordinates",
            "location": 235,
            "return": [
                "Dict[(str, Union[(float, str)])]"
            ],
            "arguments": {
                "self": [],
                "dms": [
                    "bool"
                ]
            }
        },
        "Address.continent": {
            "name": "continent",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bool"
                ]
            }
        },
        "Address.calling_code": {
            "name": "calling_code",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/base.py": {
        "BaseProvider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.reseed": {
            "name": "reseed",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "BaseProvider.validate_enum": {
            "name": "validate_enum",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "enum": []
            }
        },
        "BaseProvider.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataProvider.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "mimesis.enums.Locale"
                ],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "BaseDataProvider._setup_locale": {
            "name": "_setup_locale",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "mimesis.enums.Locale"
                ]
            }
        },
        "BaseDataProvider.extract": {
            "name": "extract",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "List[str]"
                ],
                "default": []
            }
        },
        "BaseDataProvider._update_dict": {
            "name": "_update_dict",
            "location": 116,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "initial": [
                    "Dict[(str, Any)]"
                ],
                "other": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "BaseDataProvider._load_datafile": {
            "name": "_load_datafile",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "datafile": []
            }
        },
        "BaseDataProvider.get_current_locale": {
            "name": "get_current_locale",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataProvider._override_locale": {
            "name": "_override_locale",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "mimesis.enums.Locale"
                ]
            }
        },
        "BaseDataProvider.override_locale": {
            "name": "override_locale",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "BaseDataProvider.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataProvider._load_datafile.get_data": {
            "name": "get_data",
            "location": 148,
            "return": [],
            "arguments": {
                "locale_name": []
            }
        }
    },
    "mimesis-master/mimesis/providers/binaryfile.py": {
        "BinaryFile.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile._read_file": {
            "name": "_read_file",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile.video": {
            "name": "video",
            "location": 53,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile.audio": {
            "name": "audio",
            "location": 63,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile.document": {
            "name": "document",
            "location": 73,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile.image": {
            "name": "image",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryFile.compressed": {
            "name": "compressed",
            "location": 93,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/choice.py": {
        "Choice.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Optional[Sequence]"
                ],
                "length": [
                    "int"
                ],
                "unique": [
                    "bool"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/code.py": {
        "Code.locale_code": {
            "name": "locale_code",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Code.issn": {
            "name": "issn",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "str"
                ]
            }
        },
        "Code.isbn": {
            "name": "isbn",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "Optional[mimesis.enums.ISBNFormat]"
                ],
                "locale": [
                    "mimesis.enums.Locale"
                ]
            }
        },
        "Code.ean": {
            "name": "ean",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "Optional[mimesis.enums.EANFormat]"
                ]
            }
        },
        "Code.imei": {
            "name": "imei",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Code.pin": {
            "name": "pin",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "str"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/cryptographic.py": {
        "Cryptographic.uuid_object": {
            "name": "uuid_object",
            "location": 24,
            "return": [
                "_uuid.UUID"
            ],
            "arguments": {}
        },
        "Cryptographic.uuid": {
            "name": "uuid",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cryptographic.hash": {
            "name": "hash",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "Optional[mimesis.enums.Algorithm]"
                ]
            }
        },
        "Cryptographic.token_bytes": {
            "name": "token_bytes",
            "location": 57,
            "return": [
                "bytes"
            ],
            "arguments": {
                "entropy": [
                    "int"
                ]
            }
        },
        "Cryptographic.token_hex": {
            "name": "token_hex",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "entropy": [
                    "int"
                ]
            }
        },
        "Cryptographic.token_urlsafe": {
            "name": "token_urlsafe",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "entropy": [
                    "int"
                ]
            }
        },
        "Cryptographic.mnemonic_phrase": {
            "name": "mnemonic_phrase",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/date.py": {
        "Datetime.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.bulk_create_datetimes": {
            "name": "bulk_create_datetimes",
            "location": 34,
            "return": [
                "List[_datetime.datetime]"
            ],
            "arguments": {
                "date_start": [
                    "_datetime.datetime"
                ],
                "date_end": [
                    "_datetime.datetime"
                ]
            }
        },
        "Datetime.week_date": {
            "name": "week_date",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Datetime.day_of_week": {
            "name": "day_of_week",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "abbr": [
                    "bool"
                ]
            }
        },
        "Datetime.month": {
            "name": "month",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "abbr": [
                    "bool"
                ]
            }
        },
        "Datetime.year": {
            "name": "year",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int"
                ],
                "maximum": [
                    "int"
                ]
            }
        },
        "Datetime.century": {
            "name": "century",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.periodicity": {
            "name": "periodicity",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.date": {
            "name": "date",
            "location": 141,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Datetime.formatted_date": {
            "name": "formatted_date",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str"
                ]
            }
        },
        "Datetime.time": {
            "name": "time",
            "location": 169,
            "return": [
                "_datetime.time"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.formatted_time": {
            "name": "formatted_time",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str"
                ]
            }
        },
        "Datetime.day_of_month": {
            "name": "day_of_month",
            "location": 195,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.timezone": {
            "name": "timezone",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "Optional[mimesis.enums.TimezoneRegion]"
                ]
            }
        },
        "Datetime.gmt_offset": {
            "name": "gmt_offset",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datetime.datetime": {
            "name": "datetime",
            "location": 220,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "timezone": [
                    "Optional[str]"
                ]
            }
        },
        "Datetime.formatted_datetime": {
            "name": "formatted_datetime",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str"
                ]
            }
        },
        "Datetime.timestamp": {
            "name": "timestamp",
            "location": 261,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "posix": [
                    "bool"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/development.py": {
        "Development.software_license": {
            "name": "software_license",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Development.version": {
            "name": "version",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "calver": [
                    "bool"
                ],
                "pre_release": [
                    "bool"
                ]
            }
        },
        "Development.programming_language": {
            "name": "programming_language",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Development.os": {
            "name": "os",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Development.boolean": {
            "name": "boolean",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__sub": {
            "name": "__sub",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "File.extension": {
            "name": "extension",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "Optional[mimesis.enums.FileType]"
                ]
            }
        },
        "File.mime_type": {
            "name": "mime_type",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[mimesis.enums.MimeType]"
                ]
            }
        },
        "File.size": {
            "name": "size",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int"
                ],
                "maximum": [
                    "int"
                ]
            }
        },
        "File.file_name": {
            "name": "file_name",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_type": [
                    "Optional[mimesis.enums.FileType]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/finance.py": {
        "Finance.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.company": {
            "name": "company",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.company_type": {
            "name": "company_type",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "abbr": [
                    "bool"
                ]
            }
        },
        "Finance.currency_iso_code": {
            "name": "currency_iso_code",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "allow_random": [
                    "bool"
                ]
            }
        },
        "Finance.cryptocurrency_iso_code": {
            "name": "cryptocurrency_iso_code",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.currency_symbol": {
            "name": "currency_symbol",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.cryptocurrency_symbol": {
            "name": "cryptocurrency_symbol",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.price": {
            "name": "price",
            "location": 89,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "float"
                ],
                "maximum": [
                    "float"
                ]
            }
        },
        "Finance.price_in_btc": {
            "name": "price_in_btc",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "float"
                ],
                "maximum": [
                    "float"
                ]
            }
        },
        "Finance.stock_ticker": {
            "name": "stock_ticker",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.stock_name": {
            "name": "stock_name",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Finance.stock_exchange": {
            "name": "stock_exchange",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/food.py": {
        "Food.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Food._choice_from": {
            "name": "_choice_from",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Food.vegetable": {
            "name": "vegetable",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Food.fruit": {
            "name": "fruit",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Food.dish": {
            "name": "dish",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Food.spices": {
            "name": "spices",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Food.drink": {
            "name": "drink",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/generic.py": {
        "Generic.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "mimesis.enums.Locale"
                ],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "Generic.__getattr__": {
            "name": "__getattr__",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attrname": [
                    "str"
                ]
            }
        },
        "Generic.__dir__": {
            "name": "__dir__",
            "location": 91,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generic.reseed": {
            "name": "reseed",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[Union[(bytes, float, str)]]"
                ]
            }
        },
        "Generic.add_provider": {
            "name": "add_provider",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[mimesis.providers.base.BaseProvider]"
                ]
            }
        },
        "Generic.add_providers": {
            "name": "add_providers",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generic.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/hardware.py": {
        "Hardware.resolution": {
            "name": "resolution",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.screen_size": {
            "name": "screen_size",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.cpu": {
            "name": "cpu",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.cpu_frequency": {
            "name": "cpu_frequency",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.generation": {
            "name": "generation",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.cpu_model_code": {
            "name": "cpu_model_code",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.cpu_codename": {
            "name": "cpu_codename",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.ram_type": {
            "name": "ram_type",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.ram_size": {
            "name": "ram_size",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.ssd_or_hdd": {
            "name": "ssd_or_hdd",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.graphics": {
            "name": "graphics",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.manufacturer": {
            "name": "manufacturer",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hardware.phone_model": {
            "name": "phone_model",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/internet.py": {
        "Internet.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.content_type": {
            "name": "content_type",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mime_type": [
                    "Optional[mimesis.enums.MimeType]"
                ]
            }
        },
        "Internet.http_status_message": {
            "name": "http_status_message",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.http_status_code": {
            "name": "http_status_code",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.http_method": {
            "name": "http_method",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.ip_v4_object": {
            "name": "ip_v4_object",
            "location": 92,
            "return": [
                "ipaddress.IPv4Address"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.ip_v4_with_port": {
            "name": "ip_v4_with_port",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "port_range": [
                    "mimesis.enums.PortRange"
                ]
            }
        },
        "Internet.ip_v4": {
            "name": "ip_v4",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.ip_v6_object": {
            "name": "ip_v6_object",
            "location": 122,
            "return": [
                "ipaddress.IPv6Address"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.ip_v6": {
            "name": "ip_v6",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.mac_address": {
            "name": "mac_address",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.emoji": {
            "name": "emoji",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.stock_image": {
            "name": "stock_image",
            "location": 174,
            "return": [
                "Union[(bytes, str)]"
            ],
            "arguments": {
                "width": [
                    "Union[(int, str)]"
                ],
                "height": [
                    "Union[(int, str)]"
                ],
                "keywords": [
                    "Optional[Union[(List[str], Set[str], Tuple[(str, ...)])]]"
                ],
                "writable": [
                    "bool"
                ]
            }
        },
        "Internet.hashtags": {
            "name": "hashtags",
            "location": 210,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int"
                ]
            }
        },
        "Internet.hostname": {
            "name": "hostname",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tld_type": [
                    "Optional[mimesis.enums.TLDType]"
                ],
                "subdomains": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Internet.url": {
            "name": "url",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "Optional[mimesis.enums.URLScheme]"
                ],
                "port_range": [
                    "Optional[mimesis.enums.PortRange]"
                ],
                "tld_type": [
                    "Optional[mimesis.enums.TLDType]"
                ],
                "subdomains": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Internet.uri": {
            "name": "uri",
            "location": 271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "Optional[mimesis.enums.URLScheme]"
                ],
                "port_range": [
                    "Optional[mimesis.enums.PortRange]"
                ],
                "tld_type": [
                    "Optional[mimesis.enums.TLDType]"
                ],
                "subdomains": [
                    "Optional[List[str]]"
                ],
                "query_params_count": [
                    "Optional[int]"
                ]
            }
        },
        "Internet.query_string": {
            "name": "query_string",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Optional[int]"
                ]
            }
        },
        "Internet.query_parameters": {
            "name": "query_parameters",
            "location": 309,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Optional[int]"
                ]
            }
        },
        "Internet.top_level_domain": {
            "name": "top_level_domain",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tld_type": [
                    "Optional[mimesis.enums.TLDType]"
                ]
            }
        },
        "Internet.tld": {
            "name": "tld",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.user_agent": {
            "name": "user_agent",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Internet.port": {
            "name": "port",
            "location": 360,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "port_range": [
                    "mimesis.enums.PortRange"
                ]
            }
        },
        "Internet.slug": {
            "name": "slug",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parts_count": [
                    "Optional[int]"
                ]
            }
        },
        "Internet.query_parameters.pick_unique_words": {
            "name": "pick_unique_words",
            "location": 316,
            "return": [],
            "arguments": {
                "quantity": []
            }
        }
    },
    "mimesis-master/mimesis/providers/numeric.py": {
        "Numeric.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Numeric.increment": {
            "name": "increment",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "accumulator": [
                    "Optional[str]"
                ]
            }
        },
        "Numeric.float_number": {
            "name": "float_number",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float"
                ],
                "end": [
                    "float"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "Numeric.floats": {
            "name": "floats",
            "location": 70,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float"
                ],
                "end": [
                    "float"
                ],
                "n": [
                    "int"
                ],
                "precision": [
                    "int"
                ]
            }
        },
        "Numeric.integer_number": {
            "name": "integer_number",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "Numeric.integers": {
            "name": "integers",
            "location": 93,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Numeric.complex_number": {
            "name": "complex_number",
            "location": 109,
            "return": [
                "complex"
            ],
            "arguments": {
                "self": [],
                "start_real": [
                    "float"
                ],
                "end_real": [
                    "float"
                ],
                "start_imag": [
                    "float"
                ],
                "end_imag": [
                    "float"
                ],
                "precision_real": [
                    "int"
                ],
                "precision_imag": [
                    "int"
                ]
            }
        },
        "Numeric.complexes": {
            "name": "complexes",
            "location": 134,
            "return": [
                "List[complex]"
            ],
            "arguments": {
                "self": [],
                "start_real": [
                    "float"
                ],
                "end_real": [
                    "float"
                ],
                "start_imag": [
                    "float"
                ],
                "end_imag": [
                    "float"
                ],
                "precision_real": [
                    "int"
                ],
                "precision_imag": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Numeric.decimal_number": {
            "name": "decimal_number",
            "location": 171,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float"
                ],
                "end": [
                    "float"
                ]
            }
        },
        "Numeric.decimals": {
            "name": "decimals",
            "location": 180,
            "return": [
                "List[decimal.Decimal]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float"
                ],
                "end": [
                    "float"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Numeric.matrix": {
            "name": "matrix",
            "location": 192,
            "return": [
                "List[Union[(complex, float, int, decimal.Decimal)]]"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "num_type": [
                    "mimesis.enums.NumType"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/path.py": {
        "Path.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "str"
                ]
            }
        },
        "Path.root": {
            "name": "root",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.home": {
            "name": "home",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.user": {
            "name": "user",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.users_folder": {
            "name": "users_folder",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.dev_dir": {
            "name": "dev_dir",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.project_dir": {
            "name": "project_dir",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/payment.py": {
        "Payment.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.cid": {
            "name": "cid",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.paypal": {
            "name": "paypal",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.bitcoin_address": {
            "name": "bitcoin_address",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.ethereum_address": {
            "name": "ethereum_address",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.credit_card_network": {
            "name": "credit_card_network",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.credit_card_number": {
            "name": "credit_card_number",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "card_type": [
                    "Optional[mimesis.enums.CardType]"
                ]
            }
        },
        "Payment.credit_card_expiration_date": {
            "name": "credit_card_expiration_date",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int"
                ],
                "maximum": [
                    "int"
                ]
            }
        },
        "Payment.cvv": {
            "name": "cvv",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.credit_card_owner": {
            "name": "credit_card_owner",
            "location": 162,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/person.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.age": {
            "name": "age",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int"
                ],
                "maximum": [
                    "int"
                ]
            }
        },
        "Person.work_experience": {
            "name": "work_experience",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "working_start_age": [
                    "int"
                ]
            }
        },
        "Person.name": {
            "name": "name",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "Person.first_name": {
            "name": "first_name",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "Person.surname": {
            "name": "surname",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "Person.last_name": {
            "name": "last_name",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "Person.title": {
            "name": "title",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ],
                "title_type": [
                    "Optional[mimesis.enums.TitleType]"
                ]
            }
        },
        "Person.full_name": {
            "name": "full_name",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Person.username": {
            "name": "username",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "Optional[str]"
                ],
                "drange": [
                    "Tuple[(int, int)]"
                ]
            }
        },
        "Person.password": {
            "name": "password",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ],
                "hashed": [
                    "bool"
                ]
            }
        },
        "Person.email": {
            "name": "email",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "domains": [
                    "Optional[Sequence[str]]"
                ],
                "unique": [
                    "bool"
                ]
            }
        },
        "Person.gender": {
            "name": "gender",
            "location": 282,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "self": [],
                "iso5218": [
                    "bool"
                ],
                "symbol": [
                    "bool"
                ]
            }
        },
        "Person.sex": {
            "name": "sex",
            "location": 308,
            "return": [
                "Union[(int, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.height": {
            "name": "height",
            "location": 319,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "float"
                ],
                "maximum": [
                    "float"
                ]
            }
        },
        "Person.weight": {
            "name": "weight",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int"
                ],
                "maximum": [
                    "int"
                ]
            }
        },
        "Person.blood_type": {
            "name": "blood_type",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.occupation": {
            "name": "occupation",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.political_views": {
            "name": "political_views",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.worldview": {
            "name": "worldview",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.views_on": {
            "name": "views_on",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.nationality": {
            "name": "nationality",
            "location": 398,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gender": [
                    "Optional[mimesis.enums.Gender]"
                ]
            }
        },
        "Person.university": {
            "name": "university",
            "location": 416,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.academic_degree": {
            "name": "academic_degree",
            "location": 427,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.language": {
            "name": "language",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.telephone": {
            "name": "telephone",
            "location": 449,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "str"
                ],
                "placeholder": [
                    "str"
                ]
            }
        },
        "Person.identifier": {
            "name": "identifier",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "str"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/science.py": {
        "Science.rna_sequence": {
            "name": "rna_sequence",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "Science.dna_sequence": {
            "name": "dna_sequence",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "Science.measure_unit": {
            "name": "measure_unit",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[mimesis.enums.MeasureUnit]"
                ],
                "symbol": [
                    "bool"
                ]
            }
        },
        "Science.metric_prefix": {
            "name": "metric_prefix",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sign": [
                    "Optional[mimesis.enums.MetricPrefixSign]"
                ],
                "symbol": [
                    "bool"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/text.py": {
        "Text.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.alphabet": {
            "name": "alphabet",
            "location": 29,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "lower_case": [
                    "bool"
                ]
            }
        },
        "Text.level": {
            "name": "level",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.text": {
            "name": "text",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int"
                ]
            }
        },
        "Text.sentence": {
            "name": "sentence",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.title": {
            "name": "title",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.words": {
            "name": "words",
            "location": 74,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int"
                ]
            }
        },
        "Text.word": {
            "name": "word",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.swear_word": {
            "name": "swear_word",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.quote": {
            "name": "quote",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.color": {
            "name": "color",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text._hex_to_rgb": {
            "name": "_hex_to_rgb",
            "location": 130,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "color": [
                    "str"
                ]
            }
        },
        "Text.hex_color": {
            "name": "hex_color",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "safe": [
                    "bool"
                ]
            }
        },
        "Text.rgb_color": {
            "name": "rgb_color",
            "location": 154,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": [],
                "safe": [
                    "bool"
                ]
            }
        },
        "Text.answer": {
            "name": "answer",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mimesis-master/mimesis/providers/transport.py": {
        "Transport.truck": {
            "name": "truck",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model_mask": [
                    "str"
                ]
            }
        },
        "Transport.manufacturer": {
            "name": "manufacturer",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.car": {
            "name": "car",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.airplane": {
            "name": "airplane",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "model_mask": [
                    "str"
                ]
            }
        },
        "Transport.vehicle_registration_code": {
            "name": "vehicle_registration_code",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "Optional[mimesis.enums.Locale]"
                ]
            }
        }
    },
    "mimesis-master/mimesis/providers/__init__.py": {},
    "mimesis-master/tests/conftest.py": {
        "seed": {
            "name": "seed",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "generic": {
            "name": "generic",
            "location": 14,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "address": {
            "name": "address",
            "location": 19,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "finance": {
            "name": "finance",
            "location": 24,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "dt": {
            "name": "dt",
            "location": 29,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "food": {
            "name": "food",
            "location": 34,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "person": {
            "name": "person",
            "location": 39,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "text": {
            "name": "text",
            "location": 44,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "path": {
            "name": "path",
            "location": 49,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "mimesis-master/tests/test_locales.py": {
        "test_locale_enum": {
            "name": "test_locale_enum",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_locale_missing_locale": {
            "name": "test_validate_locale_missing_locale",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_locale_invalid_locale": {
            "name": "test_validate_locale_invalid_locale",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_locale": {
            "name": "test_validate_locale",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mimesis-master/tests/test_minifier.py": {
        "test_human_repr": {
            "name": "test_human_repr",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_human_repr_cant_handle_gigabytes": {
            "name": "test_human_repr_cant_handle_gigabytes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minimizer_minifies_file": {
            "name": "test_minimizer_minifies_file",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "disable_colorama_codes": {
            "name": "disable_colorama_codes",
            "location": 30,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_minimizer_reports_to_stdout": {
            "name": "test_minimizer_reports_to_stdout",
            "location": 41,
            "return": [],
            "arguments": {
                "capsys": [],
                "tmp_path": []
            }
        }
    },
    "mimesis-master/tests/test_random.py": {
        "random": {
            "name": "random",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_randstr_non_unique_with_same_seed": {
            "name": "test_randstr_non_unique_with_same_seed",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "random": []
            }
        },
        "test_randints": {
            "name": "test_randints",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "random": []
            }
        },
        "test_urandom": {
            "name": "test_urandom",
            "location": 40,
            "return": [],
            "arguments": {
                "random": [],
                "size": []
            }
        },
        "test_generate_string": {
            "name": "test_generate_string",
            "location": 54,
            "return": [],
            "arguments": {
                "random": [],
                "str_seq": [],
                "length": []
            }
        },
        "test_uniform": {
            "name": "test_uniform",
            "location": 67,
            "return": [],
            "arguments": {
                "random": [],
                "precision": []
            }
        },
        "test_custom_code": {
            "name": "test_custom_code",
            "location": 83,
            "return": [],
            "arguments": {
                "random": [],
                "mask": [],
                "digit": [],
                "char": []
            }
        },
        "test_custom_code_with_same_placeholders": {
            "name": "test_custom_code_with_same_placeholders",
            "location": 99,
            "return": [],
            "arguments": {
                "random": [],
                "mask": [],
                "digit": [],
                "char": []
            }
        },
        "test_custom_code_with_seed": {
            "name": "test_custom_code_with_seed",
            "location": 112,
            "return": [],
            "arguments": {
                "random": [],
                "seed": [],
                "expected": []
            }
        },
        "test_get_random_item": {
            "name": "test_get_random_item",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "random": []
            }
        },
        "test_randstr": {
            "name": "test_randstr",
            "location": 135,
            "return": [],
            "arguments": {
                "random": [],
                "length": []
            }
        },
        "test_randstr_no_length": {
            "name": "test_randstr_no_length",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "random": []
            }
        },
        "test_randstr_unique": {
            "name": "test_randstr_unique",
            "location": 155,
            "return": [],
            "arguments": {
                "random": [],
                "count": []
            }
        }
    },
    "mimesis-master/tests/test_schema.py": {
        "test_str": {
            "name": "test_str",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "field": []
            }
        },
        "default_field": {
            "name": "default_field",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "field": {
            "name": "field",
            "location": 28,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "modified_field": {
            "name": "modified_field",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_field": {
            "name": "test_field",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "field": []
            }
        },
        "test_field_with_custom_providers": {
            "name": "test_field_with_custom_providers",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "default_field": [],
                "modified_field": []
            }
        },
        "test_field_with_key_function": {
            "name": "test_field_with_key_function",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "field": []
            }
        },
        "test_field_raises_field_error": {
            "name": "test_field_raises_field_error",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "default_field": []
            }
        },
        "test_base_field": {
            "name": "test_base_field",
            "location": 70,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "schema": {
            "name": "schema",
            "location": 79,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "test_schema_raises_schema_error": {
            "name": "test_schema_raises_schema_error",
            "location": 101,
            "return": [],
            "arguments": {
                "invalid_schema": []
            }
        },
        "test_choice_field": {
            "name": "test_choice_field",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "field": []
            }
        },
        "test_schema_create": {
            "name": "test_schema_create",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_schema_iterator": {
            "name": "test_schema_iterator",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_schema_loop": {
            "name": "test_schema_loop",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_schema_to_csv": {
            "name": "test_schema_to_csv",
            "location": 158,
            "return": [],
            "arguments": {
                "schema": [],
                "iterations": []
            }
        },
        "test_schema_to_json": {
            "name": "test_schema_to_json",
            "location": 177,
            "return": [],
            "arguments": {
                "schema": [],
                "iterations": []
            }
        },
        "test_schema_to_pickle": {
            "name": "test_schema_to_pickle",
            "location": 193,
            "return": [],
            "arguments": {
                "schema": [],
                "iterations": []
            }
        }
    },
    "mimesis-master/tests/test_shortcuts.py": {
        "test_luhn_checksum": {
            "name": "test_luhn_checksum",
            "location": 15,
            "return": [],
            "arguments": {
                "number": [],
                "check_sum": []
            }
        },
        "test_romanize_russian_string": {
            "name": "test_romanize_russian_string",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_russian_mixed_text": {
            "name": "test_romanize_russian_mixed_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_russian_alphabet": {
            "name": "test_romanize_russian_alphabet",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_ukrainian_text": {
            "name": "test_romanize_ukrainian_text",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_kazakh_text": {
            "name": "test_romanize_kazakh_text",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_invalid_locale": {
            "name": "test_romanize_invalid_locale",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_unsupported_locale": {
            "name": "test_romanize_unsupported_locale",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_romanize_missing_positional_arguments": {
            "name": "test_romanize_missing_positional_arguments",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mimesis-master/tests/__init__.py": {},
    "mimesis-master/tests/test_builtins/__init__.py": {},
    "mimesis-master/tests/test_builtins/da/test_denmark_spec.py": {
        "denmark": {
            "name": "denmark",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_calculate_checksum": {
            "name": "test_calculate_checksum",
            "location": 27,
            "return": [],
            "arguments": {
                "denmark": [],
                "cpr_nr_no_checksum": [],
                "checksum": []
            }
        },
        "test_cpr": {
            "name": "test_cpr",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "denmark": []
            }
        },
        "test_calculate_century_selector": {
            "name": "test_calculate_century_selector",
            "location": 56,
            "return": [],
            "arguments": {
                "denmark": [],
                "year": [],
                "expected_values": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/da/__init__.py": {},
    "mimesis-master/tests/test_builtins/en/test_usa_spec.py": {
        "usa": {
            "name": "usa",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_usps_tracking_number": {
            "name": "test_usps_tracking_number",
            "location": 20,
            "return": [],
            "arguments": {
                "usa": [],
                "service": [],
                "length": []
            }
        },
        "test_ssn": {
            "name": "test_ssn",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "usa": [],
                "mocker": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/en/__init__.py": {},
    "mimesis-master/tests/test_builtins/it/test_italy_spec.py": {
        "italy": {
            "name": "italy",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_noun": {
            "name": "test_noun",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "italy": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/it/__init__.py": {},
    "mimesis-master/tests/test_builtins/nl/test_nl_spec.py": {
        "nl": {
            "name": "nl",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_bsn": {
            "name": "test_bsn",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "nl": []
            }
        },
        "test_burgerservicenummer": {
            "name": "test_burgerservicenummer",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "nl": []
            }
        },
        "test_nl_meta": {
            "name": "test_nl_meta",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mimesis-master/tests/test_builtins/nl/__init__.py": {},
    "mimesis-master/tests/test_builtins/pl/test_poland_spec.py": {
        "validate_nip": {
            "name": "validate_nip",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "nip": []
            }
        },
        "validate_pesel": {
            "name": "validate_pesel",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "pesel": []
            }
        },
        "validate_regon": {
            "name": "validate_regon",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "regon": []
            }
        },
        "pl": {
            "name": "pl",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_nip": {
            "name": "test_nip",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "pl": []
            }
        },
        "test_pesel": {
            "name": "test_pesel",
            "location": 66,
            "return": [],
            "arguments": {
                "pl": [],
                "gender": []
            }
        },
        "test_regon": {
            "name": "test_regon",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "pl": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/pl/__init__.py": {},
    "mimesis-master/tests/test_builtins/pt_br/test_brazil_spec.py": {
        "pt_br": {
            "name": "pt_br",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_cpf": {
            "name": "test_cpf",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "pt_br": []
            }
        },
        "test_cnpj": {
            "name": "test_cnpj",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "pt_br": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/pt_br/__init__.py": {},
    "mimesis-master/tests/test_builtins/ru/test_russia_spec.py": {
        "russia": {
            "name": "russia",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_passport_series": {
            "name": "test_passport_series",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_passport_series_parametrized": {
            "name": "test_passport_series_parametrized",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_passport_number": {
            "name": "test_passport_number",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_series_and_number": {
            "name": "test_series_and_number",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_patronymic": {
            "name": "test_patronymic",
            "location": 42,
            "return": [],
            "arguments": {
                "russia": [],
                "gender": []
            }
        },
        "test_generate_sentence": {
            "name": "test_generate_sentence",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_snils": {
            "name": "test_snils",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_inn": {
            "name": "test_inn",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_ogrn": {
            "name": "test_ogrn",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_bic": {
            "name": "test_bic",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        },
        "test_kpp": {
            "name": "test_kpp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "russia": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/ru/__init__.py": {},
    "mimesis-master/tests/test_builtins/uk/test_ukraine_spec.py": {
        "ukraine": {
            "name": "ukraine",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_patronymic": {
            "name": "test_patronymic",
            "location": 19,
            "return": [],
            "arguments": {
                "ukraine": [],
                "gender": []
            }
        }
    },
    "mimesis-master/tests/test_builtins/uk/__init__.py": {},
    "mimesis-master/tests/test_providers/patterns.py": {},
    "mimesis-master/tests/test_providers/test_address.py": {
        "test_dd_to_dms": {
            "name": "test_dd_to_dms",
            "location": 241,
            "return": [],
            "arguments": {
                "address": [],
                "fn_args": [],
                "dms": []
            }
        },
        "TestAddress._address": {
            "name": "_address",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_street_number": {
            "name": "test_street_number",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_address": []
            }
        },
        "TestAddress.test__get_fs": {
            "name": "test__get_fs",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "_address": [],
                "dms": []
            }
        },
        "TestAddress.test_latitude": {
            "name": "test_latitude",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_address": []
            }
        },
        "TestAddress.test_longitude": {
            "name": "test_longitude",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_address": []
            }
        },
        "TestAddress.test_coordinates": {
            "name": "test_coordinates",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_address": []
            }
        },
        "TestAddress.test_street_name": {
            "name": "test_street_name",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_street_suffix": {
            "name": "test_street_suffix",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_address": {
            "name": "test_address",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_state": {
            "name": "test_state",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "abbr": [],
                "key": []
            }
        },
        "TestAddress.test_state_aliases_abbreviated": {
            "name": "test_state_aliases_abbreviated",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "alias": [],
                "abbr": []
            }
        },
        "TestAddress.test_state_aliases": {
            "name": "test_state_aliases",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "alias": []
            }
        },
        "TestAddress.test_postal_code": {
            "name": "test_postal_code",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_zip_code": {
            "name": "test_zip_code",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_country": {
            "name": "test_country",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_country_code": {
            "name": "test_country_code",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "_address": [],
                "code": [],
                "length": []
            }
        },
        "TestAddress.test_city": {
            "name": "test_city",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_continent": {
            "name": "test_continent",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_calling_code": {
            "name": "test_calling_code",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_address": []
            }
        },
        "TestSeededAddress.a1": {
            "name": "a1",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededAddress.a2": {
            "name": "a2",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededAddress.test_street_number": {
            "name": "test_street_number",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_latitude": {
            "name": "test_latitude",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_longitude": {
            "name": "test_longitude",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_coordinates": {
            "name": "test_coordinates",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_street_name": {
            "name": "test_street_name",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_street_suffix": {
            "name": "test_street_suffix",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_address": {
            "name": "test_address",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_state": {
            "name": "test_state",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_postal_code": {
            "name": "test_postal_code",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_zip_code": {
            "name": "test_zip_code",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_country": {
            "name": "test_country",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_country_iso": {
            "name": "test_country_iso",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_city": {
            "name": "test_city",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_continent": {
            "name": "test_continent",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        },
        "TestSeededAddress.test_calling_code": {
            "name": "test_calling_code",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a1": [],
                "a2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_base.py": {
        "TestBase.base_data_provider": {
            "name": "base_data_provider",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_override_locale": {
            "name": "test_override_locale",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "locale": [],
                "new_locale": []
            }
        },
        "TestBase.test_override_missing_locale_argument": {
            "name": "test_override_missing_locale_argument",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_override_locale_independent": {
            "name": "test_override_locale_independent",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "provider": []
            }
        },
        "TestBase.test_load_datafile": {
            "name": "test_load_datafile",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "locale": [],
                "city": []
            }
        },
        "TestBase.test_load_datafile_raises": {
            "name": "test_load_datafile_raises",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "TestBase.test_extract": {
            "name": "test_extract",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_data_provider": []
            }
        },
        "TestBase.test_extract_missing_positional_arguments": {
            "name": "test_extract_missing_positional_arguments",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_data_provider": []
            }
        },
        "TestBase.test_update_dict": {
            "name": "test_update_dict",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_data_provider": []
            }
        },
        "TestBase.test_setup_locale": {
            "name": "test_setup_locale",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "base_data_provider": [],
                "inp": [],
                "out": []
            }
        },
        "TestBase.test_setup_locale_unsupported_locale": {
            "name": "test_setup_locale_unsupported_locale",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase.test_str": {
            "name": "test_str",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_data_provider": []
            }
        },
        "TestBase.test_validate_enum": {
            "name": "test_validate_enum",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "base_data_provider": [],
                "gender": [],
                "excepted": []
            }
        },
        "TestBase.test_get_current_locale": {
            "name": "test_get_current_locale",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "TestSeededBase._bases": {
            "name": "_bases",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededBase.test_base_random": {
            "name": "test_base_random",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_bases": []
            }
        },
        "TestSeededBase.test_per_instance_random": {
            "name": "test_per_instance_random",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_binary.py": {
        "TestBinaryFile.binary": {
            "name": "binary",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryFile.test_all_methods": {
            "name": "test_all_methods",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "method_name": [],
                "extensions": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_choice.py": {
        "choice": {
            "name": "choice",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_choice": {
            "name": "test_choice",
            "location": 24,
            "return": [],
            "arguments": {
                "choice": [],
                "items": [],
                "length": []
            }
        },
        "test_choice_unique": {
            "name": "test_choice_unique",
            "location": 38,
            "return": [],
            "arguments": {
                "choice": [],
                "items": []
            }
        },
        "test_choice_one_element": {
            "name": "test_choice_one_element",
            "location": 52,
            "return": [],
            "arguments": {
                "choice": [],
                "items": []
            }
        },
        "test_choice_seed": {
            "name": "test_choice_seed",
            "location": 58,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_choice_non_sequence_items": {
            "name": "test_choice_non_sequence_items",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "choice": []
            }
        },
        "test_choice_empty_items": {
            "name": "test_choice_empty_items",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "choice": []
            }
        },
        "test_choice_negative_length": {
            "name": "test_choice_negative_length",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "choice": []
            }
        },
        "test_choice_insufficient_unique": {
            "name": "test_choice_insufficient_unique",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "choice": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_code.py": {
        "TestCode.code": {
            "name": "code",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCode.test_str": {
            "name": "test_str",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_ean": {
            "name": "test_ean",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "fmt": [],
                "length": []
            }
        },
        "TestCode.test_ean_non_enum": {
            "name": "test_ean_non_enum",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_imei": {
            "name": "test_imei",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_pin": {
            "name": "test_pin",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_issn": {
            "name": "test_issn",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_locale_code": {
            "name": "test_locale_code",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestCode.test_isbn": {
            "name": "test_isbn",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "fmt": [],
                "length": [],
                "locale": []
            }
        },
        "TestCode.test_isbn_non_enum": {
            "name": "test_isbn_non_enum",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "TestSeededCode.c1": {
            "name": "c1",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededCode.c2": {
            "name": "c2",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededCode.test_ean": {
            "name": "test_ean",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCode.test_imei": {
            "name": "test_imei",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCode.test_pin": {
            "name": "test_pin",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCode.test_issn": {
            "name": "test_issn",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCode.test_locale_code": {
            "name": "test_locale_code",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCode.test_isbn": {
            "name": "test_isbn",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_cryptographic.py": {
        "TestCryptographic.crypto": {
            "name": "crypto",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCryptographic.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": []
            }
        },
        "TestCryptographic.test_uuid_object": {
            "name": "test_uuid_object",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": []
            }
        },
        "TestCryptographic.test_uuid": {
            "name": "test_uuid",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": []
            }
        },
        "TestCryptographic.test_hash": {
            "name": "test_hash",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": [],
                "algorithm": [],
                "length": []
            }
        },
        "TestCryptographic.test_hash_non_enum": {
            "name": "test_hash_non_enum",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": []
            }
        },
        "TestCryptographic.test_token_bytes": {
            "name": "test_token_bytes",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "crypto": [],
                "entropy": []
            }
        },
        "TestCryptographic.test_token_hex": {
            "name": "test_token_hex",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "crypto": [],
                "entropy": []
            }
        },
        "TestCryptographic.test_token_urlsafe": {
            "name": "test_token_urlsafe",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "crypto": [],
                "entropy": []
            }
        },
        "TestCryptographic.test_mnemonic_phrase": {
            "name": "test_mnemonic_phrase",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crypto": []
            }
        },
        "TestSeededCryptographic.c1": {
            "name": "c1",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededCryptographic.c2": {
            "name": "c2",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededCryptographic.test_hash": {
            "name": "test_hash",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        },
        "TestSeededCryptographic.test_mnemonic_phrase": {
            "name": "test_mnemonic_phrase",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c1": [],
                "c2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_datetime.py": {
        "TestDatetime._datetime": {
            "name": "_datetime",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDatetime.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_bulk_create_datetimes": {
            "name": "test_bulk_create_datetimes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": [],
                "days": [],
                "objects_count": []
            }
        },
        "TestDatetime.test_bulk_create_datetimes_error": {
            "name": "test_bulk_create_datetimes_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_year": {
            "name": "test_year",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_gmt_offset": {
            "name": "test_gmt_offset",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_day_of_month": {
            "name": "test_day_of_month",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_date": {
            "name": "test_date",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_formatted_date": {
            "name": "test_formatted_date",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_time": {
            "name": "test_time",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_formatted_time": {
            "name": "test_formatted_time",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_century": {
            "name": "test_century",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_day_of_week": {
            "name": "test_day_of_week",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_month": {
            "name": "test_month",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_periodicity": {
            "name": "test_periodicity",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestDatetime.test_timezone": {
            "name": "test_timezone",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": [],
                "region": []
            }
        },
        "TestDatetime.test_timezone_without_region": {
            "name": "test_timezone_without_region",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestDatetime.test_timestamp": {
            "name": "test_timestamp",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": [],
                "posix": [],
                "_type": []
            }
        },
        "TestDatetime.test_datetime": {
            "name": "test_datetime",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "_datetime": [],
                "start": [],
                "end": [],
                "timezone": []
            }
        },
        "TestDatetime.test_formatted_datetime": {
            "name": "test_formatted_datetime",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": [],
                "start": [],
                "end": []
            }
        },
        "TestDatetime.test_formatted_datetime_without_fmt": {
            "name": "test_formatted_datetime_without_fmt",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "dt": [],
                "fmt": []
            }
        },
        "TestDatetime.test_week_date": {
            "name": "test_week_date",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_datetime": []
            }
        },
        "TestSeededDatetime.d1": {
            "name": "d1",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededDatetime.d2": {
            "name": "d2",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededDatetime.test_year": {
            "name": "test_year",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_gmt_offset": {
            "name": "test_gmt_offset",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_day_of_month": {
            "name": "test_day_of_month",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_date": {
            "name": "test_date",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_formatted_date": {
            "name": "test_formatted_date",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_time": {
            "name": "test_time",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_formatted_time": {
            "name": "test_formatted_time",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_century": {
            "name": "test_century",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_day_of_week": {
            "name": "test_day_of_week",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_month": {
            "name": "test_month",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_periodicity": {
            "name": "test_periodicity",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_timezone": {
            "name": "test_timezone",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_timestamp": {
            "name": "test_timestamp",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_formatted_datetime": {
            "name": "test_formatted_datetime",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_week_date": {
            "name": "test_week_date",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        },
        "TestSeededDatetime.test_bulk_create_datetimes": {
            "name": "test_bulk_create_datetimes",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_development.py": {
        "TestDevelopment.dev": {
            "name": "dev",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDevelopment.test_str": {
            "name": "test_str",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestDevelopment.test_license": {
            "name": "test_license",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestDevelopment.test_version": {
            "name": "test_version",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestDevelopment.test_programming_language": {
            "name": "test_programming_language",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestDevelopment.test_os": {
            "name": "test_os",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestDevelopment.test_boolean": {
            "name": "test_boolean",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "TestSeededDevelopment.dv1": {
            "name": "dv1",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededDevelopment.dv2": {
            "name": "dv2",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededDevelopment.test_software_license": {
            "name": "test_software_license",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv1": [],
                "dv2": []
            }
        },
        "TestSeededDevelopment.test_version": {
            "name": "test_version",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv1": [],
                "dv2": []
            }
        },
        "TestSeededDevelopment.test_programming_language": {
            "name": "test_programming_language",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv1": [],
                "dv2": []
            }
        },
        "TestSeededDevelopment.test_os": {
            "name": "test_os",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv1": [],
                "dv2": []
            }
        },
        "TestSeededDevelopment.test_boolean": {
            "name": "test_boolean",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dv1": [],
                "dv2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_file.py": {
        "TestFile.file": {
            "name": "file",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFile.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TestFile.test_extension": {
            "name": "test_extension",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "extension": []
            }
        },
        "TestFile.test_mime_type": {
            "name": "test_mime_type",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "type_": []
            }
        },
        "TestFile.test_file_name": {
            "name": "test_file_name",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "file_type": []
            }
        },
        "TestFile.test_size": {
            "name": "test_size",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TestSeededFile.f1": {
            "name": "f1",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFile.f2": {
            "name": "f2",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFile.test_extension": {
            "name": "test_extension",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFile.test_mime_type": {
            "name": "test_mime_type",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFile.test_file_name": {
            "name": "test_file_name",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFile.test_size": {
            "name": "test_size",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_finance.py": {
        "TestFinance._finance": {
            "name": "_finance",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFinance.test_str": {
            "name": "test_str",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_stock_ticker": {
            "name": "test_stock_ticker",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_stock_name": {
            "name": "test_stock_name",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_stock_exchange": {
            "name": "test_stock_exchange",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_currency_iso_code": {
            "name": "test_currency_iso_code",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_cryptocurrency_iso_code": {
            "name": "test_cryptocurrency_iso_code",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_finance": []
            }
        },
        "TestFinance.test_currency_symbol": {
            "name": "test_currency_symbol",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_cryptocurrency_symbol": {
            "name": "test_cryptocurrency_symbol",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_company_type": {
            "name": "test_company_type",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": [],
                "abbr": [],
                "key": []
            }
        },
        "TestFinance.test_company": {
            "name": "test_company",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_price": {
            "name": "test_price",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finance": []
            }
        },
        "TestFinance.test_price_in_btc": {
            "name": "test_price_in_btc",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_finance": [],
                "minimum": [],
                "maximum": []
            }
        },
        "TestSeededFinance.f1": {
            "name": "f1",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFinance.f2": {
            "name": "f2",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFinance.test_stock_ticker": {
            "name": "test_stock_ticker",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_stock_name": {
            "name": "test_stock_name",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_stock_exchange": {
            "name": "test_stock_exchange",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_currency_iso_code": {
            "name": "test_currency_iso_code",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_cryptocurrency_iso_code": {
            "name": "test_cryptocurrency_iso_code",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_currency_symbol": {
            "name": "test_currency_symbol",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_cryptocurrency_symbol": {
            "name": "test_cryptocurrency_symbol",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_company_type": {
            "name": "test_company_type",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_company": {
            "name": "test_company",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_price": {
            "name": "test_price",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        },
        "TestSeededFinance.test_price_in_btc": {
            "name": "test_price_in_btc",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [],
                "f2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_food.py": {
        "TestFood.test_str": {
            "name": "test_str",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestFood.test_vegetable": {
            "name": "test_vegetable",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestFood.test_fruit": {
            "name": "test_fruit",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestFood.test_dish": {
            "name": "test_dish",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestFood.test_drink": {
            "name": "test_drink",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestFood.test_spices": {
            "name": "test_spices",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "food": []
            }
        },
        "TestSeededFood.fd1": {
            "name": "fd1",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFood.fd2": {
            "name": "fd2",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededFood.test_vegetable": {
            "name": "test_vegetable",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd1": [],
                "fd2": []
            }
        },
        "TestSeededFood.test_fruit": {
            "name": "test_fruit",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd1": [],
                "fd2": []
            }
        },
        "TestSeededFood.test_dish": {
            "name": "test_dish",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd1": [],
                "fd2": []
            }
        },
        "TestSeededFood.test_drink": {
            "name": "test_drink",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd1": [],
                "fd2": []
            }
        },
        "TestSeededFood.test_spices": {
            "name": "test_spices",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd1": [],
                "fd2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_generic.py": {
        "TestGeneric.test_reseed": {
            "name": "test_reseed",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_str": {
            "name": "test_str",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_person": {
            "name": "test_base_person",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_text": {
            "name": "test_base_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_payment": {
            "name": "test_base_payment",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_address": {
            "name": "test_base_address",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_food": {
            "name": "test_base_food",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_finance": {
            "name": "test_base_finance",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_code": {
            "name": "test_base_code",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_base_binary_file": {
            "name": "test_base_binary_file",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_bad_argument": {
            "name": "test_bad_argument",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_add_providers": {
            "name": "test_add_providers",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_add_provider": {
            "name": "test_add_provider",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestGeneric.test_dir": {
            "name": "test_dir",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generic": []
            }
        },
        "TestSeededGeneric.g1": {
            "name": "g1",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededGeneric.g2": {
            "name": "g2",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededGeneric.test_generic_address": {
            "name": "test_generic_address",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_finance": {
            "name": "test_generic_finance",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_code": {
            "name": "test_generic_code",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_cryptographic": {
            "name": "test_generic_cryptographic",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_datetime": {
            "name": "test_generic_datetime",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_development": {
            "name": "test_generic_development",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_file": {
            "name": "test_generic_file",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_food": {
            "name": "test_generic_food",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_hardware": {
            "name": "test_generic_hardware",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_internet": {
            "name": "test_generic_internet",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_numbers": {
            "name": "test_generic_numbers",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_path": {
            "name": "test_generic_path",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_payment": {
            "name": "test_generic_payment",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_person": {
            "name": "test_generic_person",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_science": {
            "name": "test_generic_science",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_text": {
            "name": "test_generic_text",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestSeededGeneric.test_generic_transport": {
            "name": "test_generic_transport",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g1": [],
                "g2": []
            }
        },
        "TestGeneric.test_add_providers.Provider1.one": {
            "name": "one",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "TestGeneric.test_add_providers.Provider2.two": {
            "name": "two",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "TestGeneric.test_add_providers.Provider3.three": {
            "name": "three",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "TestGeneric.test_add_providers.Provider4.empty": {
            "name": "empty",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "TestGeneric.test_add_providers.UnnamedProvider.nothing": {
            "name": "nothing",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "TestGeneric.test_add_provider.CustomProvider.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "seed": [],
                "a": [],
                "b": [],
                "c": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_hardware.py": {
        "TestHardware.hard": {
            "name": "hard",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHardware.test_str": {
            "name": "test_str",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_resolution": {
            "name": "test_resolution",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_screen_size": {
            "name": "test_screen_size",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_generation": {
            "name": "test_generation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_cpu_model_code": {
            "name": "test_cpu_model_code",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_cpu_frequency": {
            "name": "test_cpu_frequency",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_cpu": {
            "name": "test_cpu",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_cpu_codename": {
            "name": "test_cpu_codename",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_ram_type": {
            "name": "test_ram_type",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_ram_size": {
            "name": "test_ram_size",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_ssd_or_hdd": {
            "name": "test_ssd_or_hdd",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_graphics": {
            "name": "test_graphics",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_manufacturer": {
            "name": "test_manufacturer",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestHardware.test_phone_model": {
            "name": "test_phone_model",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hard": []
            }
        },
        "TestSeededHardware.h1": {
            "name": "h1",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededHardware.h2": {
            "name": "h2",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededHardware.test_resolution": {
            "name": "test_resolution",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_screen_size": {
            "name": "test_screen_size",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_generation": {
            "name": "test_generation",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_cpu_model_code": {
            "name": "test_cpu_model_code",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_cpu_frequency": {
            "name": "test_cpu_frequency",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_cpu": {
            "name": "test_cpu",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_cpu_codename": {
            "name": "test_cpu_codename",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_ram_type": {
            "name": "test_ram_type",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_ram_size": {
            "name": "test_ram_size",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_ssd_or_hdd": {
            "name": "test_ssd_or_hdd",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_graphics": {
            "name": "test_graphics",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_manufacturer": {
            "name": "test_manufacturer",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        },
        "TestSeededHardware.test_phone_model": {
            "name": "test_phone_model",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h1": [],
                "h2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_internet.py": {
        "TestInternet.net": {
            "name": "net",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInternet.test_str": {
            "name": "test_str",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_emoji": {
            "name": "test_emoji",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_hashtags": {
            "name": "test_hashtags",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_hostname": {
            "name": "test_hostname",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "subdomains": []
            }
        },
        "TestInternet.test_url": {
            "name": "test_url",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "scheme": []
            }
        },
        "TestInternet.test_url_with_port": {
            "name": "test_url_with_port",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "port": []
            }
        },
        "TestInternet.test_default": {
            "name": "test_default",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_uri_with_parameters": {
            "name": "test_uri_with_parameters",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "scheme": [],
                "port_range": [],
                "tld_type": [],
                "subdomains": [],
                "query_params_count": []
            }
        },
        "TestInternet.test_query_string": {
            "name": "test_query_string",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "length": []
            }
        },
        "TestInternet.test_query_string_raise_error_on_invalid_length": {
            "name": "test_query_string_raise_error_on_invalid_length",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_query_string_with_length_of_none": {
            "name": "test_query_string_with_length_of_none",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_query_parameters": {
            "name": "test_query_parameters",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "length": []
            }
        },
        "TestInternet.test_query_parameters_raise_error_on_invalid_length": {
            "name": "test_query_parameters_raise_error_on_invalid_length",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_query_parameters_with_length_of_none": {
            "name": "test_query_parameters_with_length_of_none",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_slug": {
            "name": "test_slug",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_user_agent": {
            "name": "test_user_agent",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_stock_image": {
            "name": "test_stock_image",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "net": [],
                "w": [],
                "h": [],
                "keywords": [],
                "writable": [],
                "res_type": []
            }
        },
        "TestInternet.test_ip_v4_object": {
            "name": "test_ip_v4_object",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_ip_v4": {
            "name": "test_ip_v4",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_ip_v4_with_port": {
            "name": "test_ip_v4_with_port",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "port_range": []
            }
        },
        "TestInternet.test_ip_v6_object": {
            "name": "test_ip_v6_object",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_ip_v6": {
            "name": "test_ip_v6",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_mac_address": {
            "name": "test_mac_address",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_http_method": {
            "name": "test_http_method",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_content_type": {
            "name": "test_content_type",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "mime_type": []
            }
        },
        "TestInternet.test_content_type_wrong_arg": {
            "name": "test_content_type_wrong_arg",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_http_status_code": {
            "name": "test_http_status_code",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_http_status_message": {
            "name": "test_http_status_message",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_top_level_domain": {
            "name": "test_top_level_domain",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "domain_type": []
            }
        },
        "TestInternet.test_top_level_domain_unsupported": {
            "name": "test_top_level_domain_unsupported",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": []
            }
        },
        "TestInternet.test_port": {
            "name": "test_port",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [],
                "port_range": [],
                "excepted": []
            }
        },
        "TestSeededInternet.i1": {
            "name": "i1",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededInternet.i2": {
            "name": "i2",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededInternet.test_emoji": {
            "name": "test_emoji",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_hashtags": {
            "name": "test_hashtags",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_hostname": {
            "name": "test_hostname",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_url": {
            "name": "test_url",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_user_agent": {
            "name": "test_user_agent",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_ip_v4": {
            "name": "test_ip_v4",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_ip_v4_with_port": {
            "name": "test_ip_v4_with_port",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_ip_v4_object": {
            "name": "test_ip_v4_object",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_ip_v6": {
            "name": "test_ip_v6",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_slug": {
            "name": "test_slug",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_query_string": {
            "name": "test_query_string",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_query_parameters": {
            "name": "test_query_parameters",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_ip_v6_object": {
            "name": "test_ip_v6_object",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_mac_address": {
            "name": "test_mac_address",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_http_method": {
            "name": "test_http_method",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_content_type": {
            "name": "test_content_type",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_http_status_code": {
            "name": "test_http_status_code",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_http_status_message": {
            "name": "test_http_status_message",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_top_level_domain": {
            "name": "test_top_level_domain",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        },
        "TestSeededInternet.test_port": {
            "name": "test_port",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i1": [],
                "i2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_numeric.py": {
        "TestNumbers.numeric": {
            "name": "numeric",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNumbers.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestNumbers.test_incremental": {
            "name": "test_incremental",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumbers.test_incremental_with_accumulator": {
            "name": "test_incremental_with_accumulator",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestNumbers.test_floats": {
            "name": "test_floats",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "start": [],
                "end": []
            }
        },
        "TestNumbers.test_integers": {
            "name": "test_integers",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "start": [],
                "end": []
            }
        },
        "TestNumbers.test_decimals": {
            "name": "test_decimals",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "start": [],
                "end": []
            }
        },
        "TestNumbers.test_complexes": {
            "name": "test_complexes",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "start_real": [],
                "end_real": [],
                "start_imag": [],
                "end_imag": []
            }
        },
        "TestNumbers.test_complex_number": {
            "name": "test_complex_number",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": [],
                "sr": [],
                "er": [],
                "si": [],
                "ei": [],
                "pr": [],
                "pi": []
            }
        },
        "TestNumbers.test_matrix": {
            "name": "test_matrix",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestNumbers.test_integer": {
            "name": "test_integer",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestNumbers.test_float": {
            "name": "test_float",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestNumbers.test_decimal": {
            "name": "test_decimal",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numeric": []
            }
        },
        "TestSeededNumbers.n1": {
            "name": "n1",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededNumbers.n2": {
            "name": "n2",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededNumbers.test_incremental": {
            "name": "test_incremental",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_floats": {
            "name": "test_floats",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_decimals": {
            "name": "test_decimals",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_integers": {
            "name": "test_integers",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_complexes": {
            "name": "test_complexes",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_matrix": {
            "name": "test_matrix",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_integer": {
            "name": "test_integer",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_float": {
            "name": "test_float",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_decimal": {
            "name": "test_decimal",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        },
        "TestSeededNumbers.test_complex_number": {
            "name": "test_complex_number",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [],
                "n2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_path.py": {
        "TestPath.test_root": {
            "name": "test_root",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.test_home": {
            "name": "test_home",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.test_user": {
            "name": "test_user",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.directory_separator": {
            "name": "directory_separator",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.test_users_folder": {
            "name": "test_users_folder",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.test_dev_dir": {
            "name": "test_dev_dir",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestPath.test_project_dir": {
            "name": "test_project_dir",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestSeededPath.p1": {
            "name": "p1",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPath.p2": {
            "name": "p2",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPath.test_root": {
            "name": "test_root",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPath.test_home": {
            "name": "test_home",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPath.test_user": {
            "name": "test_user",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPath.test_users_folder": {
            "name": "test_users_folder",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPath.test_dev_dir": {
            "name": "test_dev_dir",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPath.test_project_dir": {
            "name": "test_project_dir",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_payment.py": {
        "TestPayment.payment": {
            "name": "payment",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPayment.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_bitcoin": {
            "name": "test_bitcoin",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_ethereum_address": {
            "name": "test_ethereum_address",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_cvv": {
            "name": "test_cvv",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_credit_card_number": {
            "name": "test_credit_card_number",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": [],
                "card_type": []
            }
        },
        "TestPayment.test_expiration_date": {
            "name": "test_expiration_date",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_cid": {
            "name": "test_cid",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_paypal": {
            "name": "test_paypal",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestPayment.test_credit_card_owner": {
            "name": "test_credit_card_owner",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": [],
                "gender": []
            }
        },
        "TestPayment.test_credit_card_network": {
            "name": "test_credit_card_network",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payment": []
            }
        },
        "TestSeededPayment.p1": {
            "name": "p1",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPayment.p2": {
            "name": "p2",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPayment.test_bitcoin_address": {
            "name": "test_bitcoin_address",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_ethereum_address": {
            "name": "test_ethereum_address",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_cvv": {
            "name": "test_cvv",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_credit_card_number": {
            "name": "test_credit_card_number",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_credit_card_expiration_date": {
            "name": "test_credit_card_expiration_date",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_cid": {
            "name": "test_cid",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_paypal": {
            "name": "test_paypal",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_credit_card_owner": {
            "name": "test_credit_card_owner",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPayment.test_credit_card_network": {
            "name": "test_credit_card_network",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_person.py": {
        "TestPerson._person": {
            "name": "_person",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPerson.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_age": {
            "name": "test_age",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": [],
                "minimum": [],
                "maximum": []
            }
        },
        "TestPerson.test_age_store": {
            "name": "test_age_store",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_age_update": {
            "name": "test_age_update",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_work_experience": {
            "name": "test_work_experience",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_work_experience_store": {
            "name": "test_work_experience_store",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_work_experience_extreme": {
            "name": "test_work_experience_extreme",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_password": {
            "name": "test_password",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_username": {
            "name": "test_username",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": [],
                "mask": []
            }
        },
        "TestPerson.test_username_drange": {
            "name": "test_username_drange",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_username_unsupported_mask": {
            "name": "test_username_unsupported_mask",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_email": {
            "name": "test_email",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": [],
                "unique": []
            }
        },
        "TestPerson.test_height": {
            "name": "test_height",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_weight": {
            "name": "test_weight",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_blood_type": {
            "name": "test_blood_type",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_identifier": {
            "name": "test_identifier",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_name": {
            "name": "test_name",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": []
            }
        },
        "TestPerson.test_first_name": {
            "name": "test_first_name",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": []
            }
        },
        "TestPerson.test_name_with_none": {
            "name": "test_name_with_none",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_person": []
            }
        },
        "TestPerson.test_name_unexpected_gender": {
            "name": "test_name_unexpected_gender",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_telephone": {
            "name": "test_telephone",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_surname": {
            "name": "test_surname",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": []
            }
        },
        "TestPerson.test_full_name": {
            "name": "test_full_name",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": []
            }
        },
        "TestPerson.test_gender": {
            "name": "test_gender",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_sex": {
            "name": "test_sex",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_profession": {
            "name": "test_profession",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_university": {
            "name": "test_university",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_academic_degree": {
            "name": "test_academic_degree",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_language": {
            "name": "test_language",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_worldview": {
            "name": "test_worldview",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_views_on": {
            "name": "test_views_on",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_political_views": {
            "name": "test_political_views",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": []
            }
        },
        "TestPerson.test_title": {
            "name": "test_title",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": [],
                "title_type": []
            }
        },
        "TestPerson.test_nationality": {
            "name": "test_nationality",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [],
                "gender": []
            }
        },
        "TestSeededPerson.p1": {
            "name": "p1",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPerson.p2": {
            "name": "p2",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededPerson.test_age": {
            "name": "test_age",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_work_experience": {
            "name": "test_work_experience",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_password": {
            "name": "test_password",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_username": {
            "name": "test_username",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_email": {
            "name": "test_email",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_height": {
            "name": "test_height",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_weight": {
            "name": "test_weight",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_blood_type": {
            "name": "test_blood_type",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_identifier": {
            "name": "test_identifier",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_name": {
            "name": "test_name",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_first_name": {
            "name": "test_first_name",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_telephone": {
            "name": "test_telephone",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_surname": {
            "name": "test_surname",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_full_name": {
            "name": "test_full_name",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_gender": {
            "name": "test_gender",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_sex": {
            "name": "test_sex",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_occupation": {
            "name": "test_occupation",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_university": {
            "name": "test_university",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_academic_degree": {
            "name": "test_academic_degree",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_language": {
            "name": "test_language",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_worldview": {
            "name": "test_worldview",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_views_on": {
            "name": "test_views_on",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_political_views": {
            "name": "test_political_views",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_title": {
            "name": "test_title",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        },
        "TestSeededPerson.test_nationality": {
            "name": "test_nationality",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [],
                "p2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_science.py": {
        "TestScience.science": {
            "name": "science",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestScience.test_str": {
            "name": "test_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "science": []
            }
        },
        "TestScience.test_rna_sequence": {
            "name": "test_rna_sequence",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "science": []
            }
        },
        "TestScience.test_dna_sequence": {
            "name": "test_dna_sequence",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "science": []
            }
        },
        "TestScience.test_measure_unit": {
            "name": "test_measure_unit",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "science": [],
                "name": []
            }
        },
        "TestScience.test_prefix": {
            "name": "test_prefix",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "science": [],
                "sign": [],
                "symbol": []
            }
        },
        "TestSeededScience.s1": {
            "name": "s1",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededScience.s2": {
            "name": "s2",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededScience.test_rna_sequence": {
            "name": "test_rna_sequence",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s1": [],
                "s2": []
            }
        },
        "TestSeededScience.test_dna_sequence": {
            "name": "test_dna_sequence",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s1": [],
                "s2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_text.py": {
        "TestText._text": {
            "name": "_text",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestText.test_str": {
            "name": "test_str",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_hex_to_rgb": {
            "name": "test_hex_to_rgb",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": []
            }
        },
        "TestText.test_hex_color": {
            "name": "test_hex_color",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": [],
                "safe": []
            }
        },
        "TestText.test_rgb_color": {
            "name": "test_rgb_color",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_text": [],
                "safe": []
            }
        },
        "TestText.test_alphabet": {
            "name": "test_alphabet",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "case": []
            }
        },
        "TestText.test_sentence": {
            "name": "test_sentence",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_title": {
            "name": "test_title",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_text": {
            "name": "test_text",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_words": {
            "name": "test_words",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_word": {
            "name": "test_word",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_swear_word": {
            "name": "test_swear_word",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_quote": {
            "name": "test_quote",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_color": {
            "name": "test_color",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_level": {
            "name": "test_level",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestText.test_answer": {
            "name": "test_answer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestSeededText.t1": {
            "name": "t1",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededText.t2": {
            "name": "t2",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededText.test_hex_color": {
            "name": "test_hex_color",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_rgb_color": {
            "name": "test_rgb_color",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_alphabet": {
            "name": "test_alphabet",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_sentence": {
            "name": "test_sentence",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_title": {
            "name": "test_title",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_text": {
            "name": "test_text",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_words": {
            "name": "test_words",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_word": {
            "name": "test_word",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_swear_word": {
            "name": "test_swear_word",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_quote": {
            "name": "test_quote",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_color": {
            "name": "test_color",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_level": {
            "name": "test_level",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededText.test_answer": {
            "name": "test_answer",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        }
    },
    "mimesis-master/tests/test_providers/test_transport.py": {
        "TestTransport.transport": {
            "name": "transport",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTransport.test_str": {
            "name": "test_str",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TestTransport.test_truck": {
            "name": "test_truck",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TestTransport.test_car": {
            "name": "test_car",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TestTransport.test_manufacturer": {
            "name": "test_manufacturer",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TestTransport.test_airplane": {
            "name": "test_airplane",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TestTransport.test_vehicle_registration_code": {
            "name": "test_vehicle_registration_code",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "transport": [],
                "locale": []
            }
        },
        "TestSeededTransport.t1": {
            "name": "t1",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededTransport.t2": {
            "name": "t2",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "TestSeededTransport.test_truck": {
            "name": "test_truck",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededTransport.test_car": {
            "name": "test_car",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededTransport.test_manufacturer": {
            "name": "test_manufacturer",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededTransport.test_airplane": {
            "name": "test_airplane",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "TestSeededTransport.test_vehicle_registration_code": {
            "name": "test_vehicle_registration_code",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": [],
                "locale": []
            }
        }
    },
    "mimesis-master/tests/test_providers/__init__.py": {}
}
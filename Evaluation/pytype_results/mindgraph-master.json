{
    "mindgraph-master/setup.py": {},
    "mindgraph-master/mindgraph/graph.py": {
        "read_yaml": {
            "name": "read_yaml",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "priority": []
            }
        },
        "Task.append": {
            "name": "append",
            "location": 19,
            "return": [
                "Union[(Task, _T0)]"
            ],
            "arguments": {
                "self": [],
                "newtask": [
                    "_T0@@"
                ]
            }
        },
        "Task.pop": {
            "name": "pop",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Task.blockedby": {
            "name": "blockedby",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "Task.blocking": {
            "name": "blocking",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "Task.__getitem__": {
            "name": "__getitem__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task._format_tree": {
            "name": "_format_tree",
            "location": 57,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "Task._postorder": {
            "name": "_postorder",
            "location": 68,
            "return": [
                "Generator[(Tuple[(_T0, Task)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "_T0@@"
                ],
                "visited": [],
                "taskkey": []
            }
        },
        "Task.todo": {
            "name": "todo",
            "location": 95,
            "return": [
                "Generator[(Task, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.blockers": {
            "name": "blockers",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.name": {
            "name": "name",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Task.subtasks": {
            "name": "subtasks",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.priority": {
            "name": "priority",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Task.to_yaml": {
            "name": "to_yaml",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Project.__new__": {
            "name": "__new__",
            "location": 148,
            "return": [
                "Task"
            ],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Task.todo.taskkey": {
            "name": "taskkey",
            "location": 101,
            "return": [],
            "arguments": {
                "task": []
            }
        }
    },
    "mindgraph-master/mindgraph/mindgraph_cli.py": {
        "arg_parser": {
            "name": "arg_parser",
            "location": 8,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mindgraph-master/mindgraph/__init__.py": {},
    "mindgraph-master/test/test_mindgraph.py": {
        "project": {
            "name": "project",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "task_project": {
            "name": "task_project",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_todo_high_priorities_win": {
            "name": "test_todo_high_priorities_win",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": []
            }
        },
        "test_todo_blocking_tasks_win": {
            "name": "test_todo_blocking_tasks_win",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": []
            }
        },
        "test_postorder_default_priorities_ignored": {
            "name": "test_postorder_default_priorities_ignored",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "task_project": []
            }
        },
        "test_task_init_typeerror": {
            "name": "test_task_init_typeerror",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_task_append_task": {
            "name": "test_task_append_task",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_task_append": {
            "name": "test_task_append",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_dict_like_getter": {
            "name": "test_dict_like_getter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_task_pop": {
            "name": "test_task_pop",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_task_pop_fail1": {
            "name": "test_task_pop_fail1",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_task_append_TypeError": {
            "name": "test_task_append_TypeError",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blockedby": {
            "name": "test_blockedby",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_blockedby_TypeError": {
            "name": "test_blockedby_TypeError",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blocking": {
            "name": "test_blocking",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_blocking_TypeError": {
            "name": "test_blocking_TypeError",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_deep_repr": {
            "name": "test_deep_repr",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_priority_getter_setter": {
            "name": "test_priority_getter_setter",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_getter_setter": {
            "name": "test_name_getter_setter",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_yaml": {
            "name": "test_to_yaml",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "project": []
            }
        },
        "test_to_yaml_TypeError": {
            "name": "test_to_yaml_TypeError",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parser": {
            "name": "test_parser",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_main": {
            "name": "test_main",
            "location": 242,
            "return": [],
            "arguments": {
                "mock_read_yaml": [],
                "mock_arg_parse": [],
                "mock_file": []
            }
        }
    },
    "mindgraph-master/test/__init__.py": {}
}
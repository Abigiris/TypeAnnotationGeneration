{
    "minerva-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/config.py": {},
    "minerva-master/minerva/__init__.py": {},
    "minerva-master/minerva/__version__.py": {},
    "minerva-master/minerva/nlp/__init__.py": {},
    "minerva-master/minerva/nlp/wrappers/nltk.py": {
        "sent_tokenize": {
            "name": "sent_tokenize",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "txt": [],
                "language": []
            }
        },
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "txt": [],
                "language": []
            }
        },
        "pos_tag": {
            "name": "pos_tag",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "txt": [],
                "language": []
            }
        }
    },
    "minerva-master/minerva/nlp/wrappers/__init__.py": {},
    "minerva-master/minerva/text/base.py": {
        "Annotation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "score": []
            }
        },
        "Annotation.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Annotation.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TokenSpan.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "start_token": [],
                "end_token": [],
                "score": []
            }
        },
        "TokenSpan.start_token": {
            "name": "start_token",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_token": {
            "name": "end_token",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.start_index": {
            "name": "start_index",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_index": {
            "name": "end_index",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.text": {
            "name": "text",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "language": []
            }
        },
        "BaseEntity.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTextualEntity.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "index": [],
                "char_index": [],
                "language": [],
                "parent": []
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "index": [],
                "parent": [],
                "char_index": [],
                "language": []
            }
        },
        "Token.__contains__": {
            "name": "__contains__",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Token.__setitem__": {
            "name": "__setitem__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Token.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Token.__iter__": {
            "name": "__iter__",
            "location": 231,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__len__": {
            "name": "__len__",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "index": [],
                "parent": []
            }
        },
        "Sentence.add_annotation": {
            "name": "add_annotation",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "begin": [],
                "end": [],
                "score": []
            }
        },
        "Sentence.get_annotation": {
            "name": "get_annotation",
            "location": 280,
            "return": [
                "Optional[Union[(Annotation, List[TokenSpan])]]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Sentence.token_at_char": {
            "name": "token_at_char",
            "location": 303,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Sentence.__getitem__": {
            "name": "__getitem__",
            "location": 345,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Sentence.__iter__": {
            "name": "__iter__",
            "location": 348,
            "return": [
                "listiterator[Token]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__len__": {
            "name": "__len__",
            "location": 351,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "_id": [],
                "language": []
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 374,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 377,
            "return": [
                "listiterator[Sentence]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__len__": {
            "name": "__len__",
            "location": 380,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__str__": {
            "name": "__str__",
            "location": 383,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_id": [],
                "items": []
            }
        },
        "Corpus.add": {
            "name": "add",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Corpus.__add__": {
            "name": "__add__",
            "location": 400,
            "return": [
                "_TCorpus@@Corpus@@"
            ],
            "arguments": {
                "self": [
                    "_TCorpus@@Corpus@@"
                ],
                "other": []
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 404,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Corpus.__iter__": {
            "name": "__iter__",
            "location": 407,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__len__": {
            "name": "__len__",
            "location": 410,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__str__": {
            "name": "__str__",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/text/__init__.py": {},
    "minerva-master/minerva/utils/lazy.py": {
        "LazyLoader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "local_name": [],
                "parent_module_globals": [],
                "warning": []
            }
        },
        "LazyLoader._load": {
            "name": "_load",
            "location": 27,
            "return": [
                "module"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LazyLoader.__dir__": {
            "name": "__dir__",
            "location": 50,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/test/test_base.py": {
        "quotes_template": {
            "name": "quotes_template",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "contractions_template_en": {
            "name": "contractions_template_en",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "sample_text": {
            "name": "sample_text",
            "location": 45,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "sample_tokens": {
            "name": "sample_tokens",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "sample_pos_tags": {
            "name": "sample_pos_tags",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "lipsum_array": {
            "name": "lipsum_array",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "lipsum_txt": {
            "name": "lipsum_txt",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "sentence": {
            "name": "sentence",
            "location": 78,
            "return": [],
            "arguments": {
                "sample_text": []
            }
        },
        "test_tokenization": {
            "name": "test_tokenization",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [],
                "sample_text": [],
                "sample_tokens": []
            }
        },
        "test_document": {
            "name": "test_document",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": [],
                "lipsum_txt": []
            }
        },
        "test_corpus": {
            "name": "test_corpus",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": []
            }
        },
        "test_tags": {
            "name": "test_tags",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [],
                "sample_pos_tags": []
            }
        },
        "test_quotes_and_contraptions_en": {
            "name": "test_quotes_and_contraptions_en",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "quotes_template": [],
                "contractions_template_en": []
            }
        }
    }
}
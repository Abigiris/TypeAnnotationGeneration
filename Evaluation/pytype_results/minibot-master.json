{
    "minibot-master/setup.py": {},
    "minibot-master/minibot_server/app.py": {
        "CreateApp": {
            "name": "CreateApp",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "provider": []
            }
        },
        "OAuthRedirectHandler.initialize": {
            "name": "initialize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback_manager": []
            }
        },
        "OAuthRedirectHandler.get": {
            "name": "get",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StartAccountCreateHandler.initialize": {
            "name": "initialize",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback_manager": [],
                "creation_manager": []
            }
        },
        "CompleteAccountCreateHandler.initialize": {
            "name": "initialize",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "creation_manager": []
            }
        },
        "HelloWorldHandler.get": {
            "name": "get",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minibot-master/minibot_server/async_util.py": {
        "OneShot.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneShot.Send": {
            "name": "Send",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "OneShot.Cancel": {
            "name": "Cancel",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallbackSet.MakeCallback": {
            "name": "MakeCallback",
            "location": 46,
            "return": [
                "Tuple[(str, coroutine)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallbackSet.SendCallback": {
            "name": "SendCallback",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nonce": [],
                "value": []
            }
        }
    },
    "minibot-master/minibot_server/config.py": {
        "ReadTextFile": {
            "name": "ReadTextFile",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ParseConfigDoc": {
            "name": "ParseConfigDoc",
            "location": 17,
            "return": [
                "ConfigDoc"
            ],
            "arguments": {
                "doc": []
            }
        },
        "ParseSecretDoc": {
            "name": "ParseSecretDoc",
            "location": 28,
            "return": [
                "SecretDoc"
            ],
            "arguments": {
                "doc": []
            }
        },
        "ParseConfigFromHomeDir": {
            "name": "ParseConfigFromHomeDir",
            "location": 39,
            "return": [
                "MinibotConfig"
            ],
            "arguments": {}
        },
        "ParseConfigFromEtc": {
            "name": "ParseConfigFromEtc",
            "location": 57,
            "return": [
                "MinibotConfig"
            ],
            "arguments": {}
        },
        "ReadConfig": {
            "name": "ReadConfig",
            "location": 75,
            "return": [
                "MinibotConfig"
            ],
            "arguments": {}
        }
    },
    "minibot-master/minibot_server/irc.py": {
        "UnescapeTagValue": {
            "name": "UnescapeTagValue",
            "location": 33,
            "return": [
                "bytes"
            ],
            "arguments": {
                "tag_value": []
            }
        },
        "EscapeTagValue": {
            "name": "EscapeTagValue",
            "location": 59,
            "return": [
                "bytes"
            ],
            "arguments": {
                "tag_value": []
            }
        },
        "TestTwitchIrcMain": {
            "name": "TestTwitchIrcMain",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BytesMuncher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytestr": []
            }
        },
        "BytesMuncher.SplitToSpace": {
            "name": "SplitToSpace",
            "location": 13,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesMuncher.HasFirstChar": {
            "name": "HasFirstChar",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "firstchar": []
            }
        },
        "BytesMuncher.IsEmpty": {
            "name": "IsEmpty",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytesMuncher.Rest": {
            "name": "Rest",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.Parse": {
            "name": "Parse",
            "location": 79,
            "return": [
                "Message"
            ],
            "arguments": {
                "msg_data": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.ToWireFormat": {
            "name": "ToWireFormat",
            "location": 123,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloseableQueue.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maxsize": []
            }
        },
        "CloseableQueue.Close": {
            "name": "Close",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IrcClientChannel.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [],
                "writer": []
            }
        },
        "IrcClientChannel.Write": {
            "name": "Write",
            "location": 232,
            "return": [
                "asyncio.tasks.Task[None]"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "IrcClientChannel.CloseWrite": {
            "name": "CloseWrite",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minibot-master/minibot_server/oauth.py": {
        "SerdeJsonRequest": {
            "name": "SerdeJsonRequest",
            "location": 47,
            "return": [
                "RequestBody"
            ],
            "arguments": {
                "data": []
            }
        },
        "AuthToken.Bearer": {
            "name": "Bearer",
            "location": 28,
            "return": [
                "AuthToken"
            ],
            "arguments": {
                "token": []
            }
        },
        "AuthToken.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "token": []
            }
        },
        "AuthToken.HeaderValue": {
            "name": "HeaderValue",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseParser.ExpectedType": {
            "name": "ExpectedType",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseParser.ParseResponseBody": {
            "name": "ParseResponseBody",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [],
                "body": []
            }
        },
        "SerdeJsonResponseParser.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body_type": []
            }
        },
        "SerdeJsonResponseParser.ExpectedType": {
            "name": "ExpectedType",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerdeJsonResponseParser.ParseResponseBody": {
            "name": "ParseResponseBody",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content_type": [],
                "body": []
            }
        },
        "SimpleHttpClient.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": []
            }
        },
        "AccessToken.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [],
                "expires": []
            }
        },
        "AccessToken.Get": {
            "name": "Get",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current_time": []
            }
        },
        "RefreshableToken.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [],
                "refresh_token": []
            }
        },
        "RefreshableToken.TryGet": {
            "name": "TryGet",
            "location": 176,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current_time": []
            }
        },
        "OAuthProvider.AuthUrl": {
            "name": "AuthUrl",
            "location": 202,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthProvider.ExchangeCode": {
            "name": "ExchangeCode",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current_time": [],
                "code": []
            }
        },
        "OAuthProvider.GetTokenFromRefresh": {
            "name": "GetTokenFromRefresh",
            "location": 210,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "refresh_token": []
            }
        },
        "OAuthProviderImpl.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "provider": []
            }
        },
        "OAuthProviderImpl.AuthUrl": {
            "name": "AuthUrl",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthCallbackManager.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": []
            }
        }
    },
    "minibot-master/minibot_server/tokens.py": {
        "TokenStore.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenStore.CreateToken": {
            "name": "CreateToken",
            "location": 26,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "current_time": []
            }
        },
        "TokenStore.FindToken": {
            "name": "FindToken",
            "location": 33,
            "return": [
                "Optional[Token]"
            ],
            "arguments": {
                "self": [],
                "token_id": []
            }
        },
        "TokenStore.FindUserTokens": {
            "name": "FindUserTokens",
            "location": 36,
            "return": [
                "List[Token]"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "TokenStore.RevokeToken": {
            "name": "RevokeToken",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_id": []
            }
        },
        "TokenStore.RevokeUserTokens": {
            "name": "RevokeUserTokens",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        }
    },
    "minibot-master/minibot_server/users.py": {
        "TwitchUser.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "twitch_id": [],
                "token": []
            }
        },
        "User.AddBot": {
            "name": "AddBot",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "twitch_bot": []
            }
        },
        "UserStore.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserStore.CreateUser": {
            "name": "CreateUser",
            "location": 49,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "current_time": [],
                "twitch_user": []
            }
        },
        "UserStore.DeleteUser": {
            "name": "DeleteUser",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "UserStore.GetUser": {
            "name": "GetUser",
            "location": 73,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "UserStore.GetUserByTwitchId": {
            "name": "GetUserByTwitchId",
            "location": 79,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "twitch_id": []
            }
        }
    },
    "minibot-master/minibot_server/__init__.py": {
        "MakeRealOAuthProvider": {
            "name": "MakeRealOAuthProvider",
            "location": 11,
            "return": [
                "minibot_server.oauth.OAuthProviderImpl"
            ],
            "arguments": {
                "config": []
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DumbHandler.get": {
            "name": "get",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "main.loop_start": {
            "name": "loop_start",
            "location": 49,
            "return": [],
            "arguments": {
                "fut": []
            }
        }
    },
    "minibot-master/minibot_server/testing/async.py": {},
    "minibot-master/minibot_server/testing/oauth.py": {
        "FakeOAuthProvider.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeOAuthProvider.AuthUrl": {
            "name": "AuthUrl",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minibot-master/minibot_server/testing/__init__.py": {},
    "minibot-master/tests/test_oauth.py": {
        "OauthTest.get_app": {
            "name": "get_app",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minibot-master/tests/__init__.py": {}
}
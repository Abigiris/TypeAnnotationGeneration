{
    "minichain-master/chain/block.py": {
        "Block.__hash__": {
            "name": "__hash__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.calculate_hash": {
            "name": "calculate_hash",
            "location": 19,
            "return": [],
            "arguments": {
                "index": [],
                "prev_hash": [],
                "timestamp": [],
                "data": [],
                "nonce": [],
                "target": []
            }
        },
        "Block.validate_difficulty": {
            "name": "validate_difficulty",
            "location": 26,
            "return": [],
            "arguments": {
                "hash": [],
                "target": []
            }
        },
        "Block.deserialize": {
            "name": "deserialize",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "Block.serialize": {
            "name": "serialize",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid": {
            "name": "is_valid",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid_hash": {
            "name": "is_valid_hash",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.is_valid_difficulty": {
            "name": "is_valid_difficulty",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.recalculate_hash": {
            "name": "recalculate_hash",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/chain/blockchain.py": {
        "BlockChain.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "blocks": []
            }
        },
        "BlockChain.__len__": {
            "name": "__len__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BlockChain.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlockChain.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.are_blocks_adjacent": {
            "name": "are_blocks_adjacent",
            "location": 38,
            "return": [],
            "arguments": {
                "block": [],
                "prev_block": []
            }
        },
        "BlockChain.genesis": {
            "name": "genesis",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "BlockChain.deserialize": {
            "name": "deserialize",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "BlockChain.interval": {
            "name": "interval",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.latest_block": {
            "name": "latest_block",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.length": {
            "name": "length",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.serialize": {
            "name": "serialize",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.replace": {
            "name": "replace",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlockChain.retarget": {
            "name": "retarget",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.validate_blocks": {
            "name": "validate_blocks",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "BlockChain.is_valid_chain": {
            "name": "is_valid_chain",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockChain.generate_next": {
            "name": "generate_next",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BlockChain.is_next_block": {
            "name": "is_next_block",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "BlockChain.add_block": {
            "name": "add_block",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "BlockChain.mine": {
            "name": "mine",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "minichain-master/chain/mempool.py": {
        "get_mempool": {
            "name": "get_mempool",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "Mempool.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "transactions": []
            }
        },
        "Mempool.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mempool.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mempool.trim_txs": {
            "name": "trim_txs",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "block_txs": []
            }
        },
        "Mempool.is_double_spent": {
            "name": "is_double_spent",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "transaction": []
            }
        },
        "Mempool.add": {
            "name": "add",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "transaction": []
            }
        },
        "Mempool.remove": {
            "name": "remove",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "transaction": []
            }
        },
        "Mempool.serialize": {
            "name": "serialize",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mempool.deserialize": {
            "name": "deserialize",
            "location": 44,
            "return": [],
            "arguments": {
                "other": []
            }
        }
    },
    "minichain-master/chain/p2p.py": {
        "Message.get_latest_block": {
            "name": "get_latest_block",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Message.send_latest_block": {
            "name": "send_latest_block",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "block": []
            }
        },
        "Message.get_blocks": {
            "name": "get_blocks",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "start_index": [],
                "end_index": []
            }
        },
        "Message.send_blocks": {
            "name": "send_blocks",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "start_index": [],
                "end_index": [],
                "blocks": []
            }
        },
        "Message.get_blockchain": {
            "name": "get_blockchain",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Message.send_blockchain": {
            "name": "send_blockchain",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "blockchain": []
            }
        },
        "Message.get_transactions": {
            "name": "get_transactions",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Message.send_transactions": {
            "name": "send_transactions",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "transactions": []
            }
        },
        "UDPProtocal.get_refresh_ids": {
            "name": "get_refresh_ids",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "server": []
            }
        },
        "TCPProtocol.reply": {
            "name": "reply",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TCPProtocol.handle_request_latest_block": {
            "name": "handle_request_latest_block",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.handle_receive_latest_block": {
            "name": "handle_receive_latest_block",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "TCPProtocol.handle_request_blockchain": {
            "name": "handle_request_blockchain",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TCPProtocol.handle_receive_blockchain": {
            "name": "handle_receive_blockchain",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "blockchain": []
            }
        },
        "TCPProtocol.handle_message": {
            "name": "handle_message",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TCPProtocol.connection_made": {
            "name": "connection_made",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TCPProtocol.data_received": {
            "name": "data_received",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TCPProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "TCPClientProtocol.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "server": [],
                "data": []
            }
        },
        "TCPClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "TCPClientProtocol.data_received": {
            "name": "data_received",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TCPClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "P2PServer.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "ksize": [],
                "alpha": [],
                "node_id": [],
                "storage": [],
                "mining": []
            }
        },
        "P2PServer.listen": {
            "name": "listen",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "port": [],
                "interface": []
            }
        },
        "P2PServer.stop": {
            "name": "stop",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.refresh_table": {
            "name": "refresh_table",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.get_mempool": {
            "name": "get_mempool",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.read_blockchain": {
            "name": "read_blockchain",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.sync_blockchain": {
            "name": "sync_blockchain",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P2PServer.broadcast_message": {
            "name": "broadcast_message",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "P2PServer.get_peers": {
            "name": "get_peers",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/chain/transaction.py": {
        "TxIn.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "tx_index": [],
                "tx_hash": [],
                "amount": [],
                "pubkey": [],
                "signature": []
            }
        },
        "TxIn.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TxIn.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.signature": {
            "name": "signature",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.hash": {
            "name": "hash",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.valid": {
            "name": "valid",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.serialize": {
            "name": "serialize",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.calculate_hash": {
            "name": "calculate_hash",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxIn.sign": {
            "name": "sign",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TxIn.verify": {
            "name": "verify",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "quiet": []
            }
        },
        "TxIn.deserialize": {
            "name": "deserialize",
            "location": 86,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "TxOut.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "address": []
            }
        },
        "TxOut.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TxOut.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxOut.__hash__": {
            "name": "__hash__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxOut.amount": {
            "name": "amount",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxOut.address": {
            "name": "address",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxOut.serialize": {
            "name": "serialize",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TxOut.deserialize": {
            "name": "deserialize",
            "location": 119,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "inputs": [],
                "outputs": []
            }
        },
        "Transaction.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transaction.__repr__": {
            "name": "__repr__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__hash__": {
            "name": "__hash__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.reward": {
            "name": "reward",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.type": {
            "name": "type",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.inputs": {
            "name": "inputs",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.outputs": {
            "name": "outputs",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.hash": {
            "name": "hash",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.total_input": {
            "name": "total_input",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.total_output": {
            "name": "total_output",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.has_enough_balance": {
            "name": "has_enough_balance",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.fee": {
            "name": "fee",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.valid": {
            "name": "valid",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.has_same_inputs": {
            "name": "has_same_inputs",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Transaction.serialize": {
            "name": "serialize",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.calculate_hash": {
            "name": "calculate_hash",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.deserialize": {
            "name": "deserialize",
            "location": 219,
            "return": [],
            "arguments": {
                "other": []
            }
        }
    },
    "minichain-master/chain/wallet.py": {
        "Wallet.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        },
        "Wallet.get_public_key": {
            "name": "get_public_key",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wallet.get_private_key": {
            "name": "get_private_key",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "password": []
            }
        }
    },
    "minichain-master/chain/__init__.py": {},
    "minichain-master/chain/__main__.py": {},
    "minichain-master/chain/utils/elliptic.py": {
        "remove_0x": {
            "name": "remove_0x",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "decode_hex": {
            "name": "decode_hex",
            "location": 16,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "generate_keypair": {
            "name": "generate_keypair",
            "location": 20,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {}
        },
        "sign": {
            "name": "sign",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "priv_key": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "pub_key": [
                    "str"
                ],
                "sig": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "minichain-master/chain/utils/log.py": {
        "_stderr_supports_color": {
            "name": "_stderr_supports_color",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "LogFormatter.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [],
                "datefmt": [],
                "style": [],
                "color": [],
                "colors": []
            }
        },
        "LogFormatter.format": {
            "name": "format",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "minichain-master/chain/utils/__init__.py": {},
    "minichain-master/tests/test_blockchain.py": {
        "TestBlockChain.test_block": {
            "name": "test_block",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlockChain.test_blockchain": {
            "name": "test_blockchain",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/test_tx.py": {
        "TestTx.test_txin": {
            "name": "test_txin",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTx.test_txout": {
            "name": "test_txout",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTx.test_transaction": {
            "name": "test_transaction",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/test_utils.py": {
        "TestUtils.test_elliptic": {
            "name": "test_elliptic",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_log": {
            "name": "test_log",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minichain-master/tests/__init__.py": {
        "TestCase.assertSerializable": {
            "name": "assertSerializable",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "obj": [],
                "env": []
            }
        }
    }
}
{
    "ml_exercise-master/evaluator.py": {
        "run": {
            "name": "run",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": []
            }
        },
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "Evaluator.validate_config": {
            "name": "validate_config",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator._load_input_file": {
            "name": "_load_input_file",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_source": [
                    "dict"
                ]
            }
        },
        "Evaluator._load_input_database": {
            "name": "_load_input_database",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_source": [
                    "dict"
                ]
            }
        },
        "Evaluator.load_data": {
            "name": "load_data",
            "location": 68,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator._write_best_model_file": {
            "name": "_write_best_model_file",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_sink": [
                    "dict"
                ],
                "best_model": [
                    "dict"
                ]
            }
        },
        "Evaluator._write_best_model_database": {
            "name": "_write_best_model_database",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_sink": [
                    "dict"
                ],
                "best_model": [
                    "dict"
                ]
            }
        },
        "Evaluator.write_best_model": {
            "name": "write_best_model",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best_model": [
                    "dict"
                ]
            }
        },
        "Evaluator.run": {
            "name": "run",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml_exercise-master/exceptions.py": {},
    "ml_exercise-master/generate_models.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ml_exercise-master/model.py": {
        "TrainedModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "metadata": [
                    "dict"
                ]
            }
        },
        "TrainedModel.load": {
            "name": "load",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "TrainedModel.save": {
            "name": "save",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TrainedModel.predict": {
            "name": "predict",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TrainedModel.evaluate": {
            "name": "evaluate",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "expected_output": [],
                "metric": [
                    "str"
                ]
            }
        }
    }
}
{
    "monkq-master/setup.py": {
        "parse_requirements": {
            "name": "parse_requirements",
            "location": 35,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "monkq-master/docs/conf.py": {},
    "monkq-master/monkq/base_strategy.py": {
        "BaseStrategy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        }
    },
    "monkq-master/monkq/const.py": {},
    "monkq-master/monkq/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Context.setup_context": {
            "name": "setup_context",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.load_statistic": {
            "name": "load_statistic",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.load_trade_counter": {
            "name": "load_trade_counter",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context._import_cls_from_str": {
            "name": "_import_cls_from_str",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "Context.load_exchanges": {
            "name": "load_exchanges",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context._load_exchange": {
            "name": "_load_exchange",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "exchange_setting": []
            }
        },
        "Context.load_strategy": {
            "name": "load_strategy",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.load_target_cls": {
            "name": "load_target_cls",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "target_cls": []
            }
        },
        "Context.load_accounts": {
            "name": "load_accounts",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context._load_account": {
            "name": "_load_account",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "account_setting": []
            }
        }
    },
    "monkq-master/monkq/data.py": {
        "Point.value": {
            "name": "value",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessPoints.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProcessor.process_points": {
            "name": "process_points",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProcessor.process_one_point": {
            "name": "process_one_point",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "DataProcessor.do_all": {
            "name": "do_all",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProcessor.last": {
            "name": "last",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadProcess.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "DownloadProcess.process": {
            "name": "process",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadProcess.rollback": {
            "name": "rollback",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadProcess.get_start": {
            "name": "get_start",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "obj": []
            }
        }
    },
    "monkq-master/monkq/engine.py": {},
    "monkq-master/monkq/exception.py": {
        "HttpError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "body": [],
                "headers": [],
                "message": []
            }
        },
        "RateLimitError.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "body": [],
                "headers": [],
                "message": [],
                "ratelimit_reset": []
            }
        },
        "HttpAuthError.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [],
                "api_secret": []
            }
        }
    },
    "monkq-master/monkq/initer.py": {
        "Initer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Initer.init_kline_freq": {
            "name": "init_kline_freq",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq": [],
                "instrument": []
            }
        },
        "Initer.init_indicator": {
            "name": "init_indicator",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq": [],
                "instrument": [],
                "func": [],
                "store_key": [],
                "columns": []
            }
        },
        "Initer.history_kline": {
            "name": "history_kline",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "freq": [],
                "instrument": [],
                "count": []
            }
        },
        "Initer.history_indicator": {
            "name": "history_indicator",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "store_key": [],
                "count": []
            }
        }
    },
    "monkq-master/monkq/lazyhdf.py": {
        "LazyHDFTableStore.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hdf_path": []
            }
        },
        "LazyHDFTableStore.cached_table": {
            "name": "cached_table",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyHDFTableStore.get": {
            "name": "get",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "monkq-master/monkq/log.py": {},
    "monkq-master/monkq/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "Runner.lastly": {
            "name": "lastly",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/stat.py": {
        "Statistic.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Statistic.collect_account_info": {
            "name": "collect_account_info",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic.freq_collect_account": {
            "name": "freq_collect_account",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic.collect_order": {
            "name": "collect_order",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Statistic.collect_trade": {
            "name": "collect_trade",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        },
        "Statistic._pickle_obj": {
            "name": "_pickle_obj",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic.report": {
            "name": "report",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/strategy_cmd.py": {
        "runstrategy": {
            "name": "runstrategy",
            "location": 33,
            "return": [],
            "arguments": {
                "ctx": []
            }
        }
    },
    "monkq-master/monkq/ticker.py": {
        "FrequencyTicker.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": [],
                "frequency": []
            }
        },
        "FrequencyTicker.timer": {
            "name": "timer",
            "location": 48,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/tradecounter.py": {
        "TradeCounter.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stat": []
            }
        },
        "TradeCounter.match": {
            "name": "match",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_time": []
            }
        },
        "TradeCounter.submit_order": {
            "name": "submit_order",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "TradeCounter.cancel_order": {
            "name": "cancel_order",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "order_id": []
            }
        },
        "TradeCounter.amend_order": {
            "name": "amend_order",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "order_id": [],
                "quantity": [],
                "price": []
            }
        },
        "TradeCounter.open_orders": {
            "name": "open_orders",
            "location": 78,
            "return": [
                "dict_values[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/__init__.py": {},
    "monkq-master/monkq/__main__.py": {
        "cmd_main": {
            "name": "cmd_main",
            "location": 49,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "download": {
            "name": "download",
            "location": 59,
            "return": [],
            "arguments": {
                "ctx": [],
                "kind": [],
                "mode": [],
                "dst_dir": []
            }
        },
        "startstrategy": {
            "name": "startstrategy",
            "location": 76,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "directory": []
            }
        }
    },
    "monkq-master/monkq/analyse/__init__.py": {
        "Analyser.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_file": []
            }
        },
        "Analyser.accounts_info": {
            "name": "accounts_info",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyser.trades": {
            "name": "trades",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Analyser._account_to_df": {
            "name": "_account_to_df",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analyser.setup_data_loader": {
            "name": "setup_data_loader",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analyser.load_dataloader_cls": {
            "name": "load_dataloader_cls",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exchange_cls_entry": []
            }
        },
        "Analyser.fetch_kline": {
            "name": "fetch_kline",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "freq": [],
                "symbol": [],
                "start": [],
                "end": []
            }
        },
        "Analyser.plot_kline": {
            "name": "plot_kline",
            "location": 111,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "freq": [],
                "symbol": [],
                "start": [],
                "end": [],
                "alpha": [],
                "axes": []
            }
        },
        "Analyser.plot_indicator": {
            "name": "plot_indicator",
            "location": 124,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "freq": [],
                "symbol": [],
                "func": [],
                "columns": [],
                "start": [],
                "end": [],
                "axes": []
            }
        },
        "Analyser.plot_volume": {
            "name": "plot_volume",
            "location": 136,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "exchange": [],
                "freq": [],
                "symbol": [],
                "start": [],
                "end": [],
                "color": [],
                "alpha": [],
                "axes": []
            }
        },
        "Analyser.plot_account": {
            "name": "plot_account",
            "location": 147,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "Analyser.mark_trades": {
            "name": "mark_trades",
            "location": 154,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "axes": [],
                "start": [],
                "end": []
            }
        }
    },
    "monkq-master/monkq/assets/account.py": {
        "BaseAccount.__post_init__": {
            "name": "__post_init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccount.deal": {
            "name": "deal",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        },
        "BaseAccount.total_capital": {
            "name": "total_capital",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAccount.__getstate__": {
            "name": "__getstate__",
            "location": 61,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAccount.__setstate__": {
            "name": "__setstate__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "FutureAccount.position_margin": {
            "name": "position_margin",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount.order_margin": {
            "name": "order_margin",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount._order_margin": {
            "name": "_order_margin",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instrument": [],
                "orders": []
            }
        },
        "FutureAccount.unrealised_pnl": {
            "name": "unrealised_pnl",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount.margin_balance": {
            "name": "margin_balance",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount.total_capital": {
            "name": "total_capital",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount.available_balance": {
            "name": "available_balance",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureAccount.deal": {
            "name": "deal",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        }
    },
    "monkq-master/monkq/assets/const.py": {},
    "monkq-master/monkq/assets/instrument.py": {
        "Instrument.__getstate__": {
            "name": "__getstate__",
            "location": 51,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrument.create": {
            "name": "create",
            "location": 66,
            "return": [
                "_TInstrument@@Instrument@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInstrument]"
                ],
                "key_map": [],
                "values": [],
                "exchange": []
            }
        },
        "Instrument.state": {
            "name": "state",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instrument.last_price": {
            "name": "last_price",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureInstrument.__getstate__": {
            "name": "__getstate__",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerpetualInstrument.funding_rate": {
            "name": "funding_rate",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/assets/order.py": {
        "BaseOrder.order_status": {
            "name": "order_status",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseOrder.side": {
            "name": "side",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseOrder.deal": {
            "name": "deal",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        },
        "BaseOrder.remain_quantity": {
            "name": "remain_quantity",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitOrder.order_value": {
            "name": "order_value",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitOrder.remain_value": {
            "name": "remain_value",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureLimitOrder.direction": {
            "name": "direction",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureMarketOrder.direction": {
            "name": "direction",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/assets/positions.py": {
        "BasePosition.position_effect": {
            "name": "position_effect",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        },
        "BasePosition.deal": {
            "name": "deal",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trade": []
            }
        },
        "FutureBasePosition.direction": {
            "name": "direction",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.market_value": {
            "name": "market_value",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.open_value": {
            "name": "open_value",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.unrealised_pnl": {
            "name": "unrealised_pnl",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.min_open_maint_margin": {
            "name": "min_open_maint_margin",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.open_init_margin": {
            "name": "open_init_margin",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.min_last_maint_margin": {
            "name": "min_last_maint_margin",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.last_init_margin": {
            "name": "last_init_margin",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.maint_margin": {
            "name": "maint_margin",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.liq_price": {
            "name": "liq_price",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureBasePosition.bankruptcy_price": {
            "name": "bankruptcy_price",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossPosition.maint_margin": {
            "name": "maint_margin",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CrossPosition.leverage": {
            "name": "leverage",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossPosition.position_margin": {
            "name": "position_margin",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IsolatedPosition.maint_margin": {
            "name": "maint_margin",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IsolatedPosition.position_margin": {
            "name": "position_margin",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IsolatedPosition.leverage": {
            "name": "leverage",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IsolatedPosition.set_leverage": {
            "name": "set_leverage",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leverage": []
            }
        },
        "IsolatedPosition.set_maint_margin": {
            "name": "set_maint_margin",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FutureCrossIsolatePosition.maint_margin": {
            "name": "maint_margin",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FutureCrossIsolatePosition.position_margin": {
            "name": "position_margin",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureCrossIsolatePosition.leverage": {
            "name": "leverage",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureCrossIsolatePosition.set_leverage": {
            "name": "set_leverage",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leverage": []
            }
        },
        "FutureCrossIsolatePosition.set_maint_margin": {
            "name": "set_maint_margin",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FutureCrossIsolatePosition.set_cross": {
            "name": "set_cross",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureCrossIsolatePosition.is_isolated": {
            "name": "is_isolated",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositionManager.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "position_cls": [],
                "account": []
            }
        },
        "PositionManager.__missing__": {
            "name": "__missing__",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "monkq-master/monkq/assets/trade.py": {
        "Trade.side": {
            "name": "side",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.instrument": {
            "name": "instrument",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.order_id": {
            "name": "order_id",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.value": {
            "name": "value",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.commission": {
            "name": "commission",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trade.to_dict": {
            "name": "to_dict",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/assets/__init__.py": {},
    "monkq-master/monkq/config/default_settings.py": {},
    "monkq-master/monkq/config/global_settings.py": {},
    "monkq-master/monkq/config/__init__.py": {
        "gen_settings": {
            "name": "gen_settings",
            "location": 61,
            "return": [
                "Setting"
            ],
            "arguments": {}
        },
        "Setting.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/config/project_template/strategy.py": {},
    "monkq-master/monkq/config/project_template/__init__.py": {},
    "monkq-master/monkq/exchange/__init__.py": {},
    "monkq-master/monkq/exchange/base/info.py": {},
    "monkq-master/monkq/exchange/base/__init__.py": {
        "BaseExchange.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "name": [],
                "exchange_setting": []
            }
        },
        "BaseExchange.exchange_info": {
            "name": "exchange_info",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSimExchange.last_price": {
            "name": "last_price",
            "location": 124,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instrument": []
            }
        },
        "BaseSimExchange.match_open_orders": {
            "name": "match_open_orders",
            "location": 127,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSimExchange.get_open_orders": {
            "name": "get_open_orders",
            "location": 130,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "BaseSimExchange.all_data": {
            "name": "all_data",
            "location": 133,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "instrument": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/auth.py": {
        "generate_expires": {
            "name": "generate_expires",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "timestamp": [],
                "expire": []
            }
        },
        "generate_signature": {
            "name": "generate_signature",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "secret": [],
                "verb": [],
                "url": [],
                "nonce": [],
                "data": []
            }
        },
        "gen_header_dict": {
            "name": "gen_header_dict",
            "location": 58,
            "return": [
                "Dict[(str, Union[(str, _T0)])]"
            ],
            "arguments": {
                "api_key": [
                    "_T0@@"
                ],
                "api_secret": [],
                "verb": [],
                "url": [],
                "data": [],
                "now": [],
                "nonce": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/const.py": {},
    "monkq-master/monkq/exchange/bitmex/exchange.py": {
        "BitmexSimulateExchange.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "name": [],
                "exchange_setting": []
            }
        },
        "BitmexSimulateExchange.all_data": {
            "name": "all_data",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instrument": []
            }
        },
        "BitmexSimulateExchange.last_price": {
            "name": "last_price",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instrument": []
            }
        },
        "BitmexSimulateExchange.exchange_info": {
            "name": "exchange_info",
            "location": 82,
            "return": [
                "monkq.exchange.base.info.ExchangeInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitmexSimulateExchange.match_open_orders": {
            "name": "match_open_orders",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitmexSimulateExchange.get_open_orders": {
            "name": "get_open_orders",
            "location": 137,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "BitmexExchange.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "name": [],
                "exchange_setting": [],
                "loop": []
            }
        },
        "BitmexExchange.exchange_info": {
            "name": "exchange_info",
            "location": 230,
            "return": [
                "monkq.exchange.base.info.ExchangeInfo"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/http.py": {
        "BitMexHTTPInterface.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange_setting": [],
                "connector": [],
                "session": [],
                "ssl": [],
                "proxy": [],
                "loop": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/log.py": {},
    "monkq-master/monkq/exchange/bitmex/util.py": {},
    "monkq-master/monkq/exchange/bitmex/websocket.py": {
        "findItemByKeys": {
            "name": "findItemByKeys",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "keys": [],
                "table": [],
                "matchData": []
            }
        },
        "timestamp_update": {
            "name": "timestamp_update",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": []
            }
        },
        "timestamp_update.wrapped": {
            "name": "wrapped",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitmexWebsocket.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [],
                "loop": [],
                "session": [],
                "ws_url": [],
                "api_key": [],
                "api_secret": [],
                "ssl": [],
                "http_proxy": []
            }
        },
        "BitmexWebsocket.orders": {
            "name": "orders",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitmexWebsocket.recent_trades": {
            "name": "recent_trades",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitmexWebsocket.get_position": {
            "name": "get_position",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "BitmexWebsocket.get_quote": {
            "name": "get_quote",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "BitmexWebsocket.get_order_book": {
            "name": "get_order_book",
            "location": 197,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "BitmexWebsocket.error": {
            "name": "error",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "BitmexWebsocket._on_message": {
            "name": "_on_message",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/__init__.py": {},
    "monkq-master/monkq/exchange/bitmex/data/download.py": {
        "DatePoint.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "url": [],
                "dst_dir": []
            }
        },
        "DatePoint.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DatePoint.value": {
            "name": "value",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitMexProcessPoints.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": [],
                "link": [],
                "dst_dir": []
            }
        },
        "BitMexProcessPoints.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "Generator[(DatePoint, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitMexDownloader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [],
                "mode": [],
                "dst_dir": []
            }
        },
        "BitMexDownloader.init_kind": {
            "name": "init_kind",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [],
                "kind": []
            }
        },
        "BitMexDownloader.init_mode": {
            "name": "init_mode",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst_dir": []
            }
        },
        "BitMexDownloader.process_points": {
            "name": "process_points",
            "location": 132,
            "return": [
                "BitMexProcessPoints"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitMexDownloader.process_one_point": {
            "name": "process_one_point",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "StreamRequest._stream_requests": {
            "name": "_stream_requests",
            "location": 143,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "FileObjRequest._stream_requests": {
            "name": "_stream_requests",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "_HDFStream.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "_HDFStream.process": {
            "name": "process",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HDFStream.rollback": {
            "name": "rollback",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HDFStream.get_start": {
            "name": "get_start",
            "location": 198,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [],
                "dst_dir": []
            }
        },
        "RawStreamRequest.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "RawStreamRequest.process": {
            "name": "process",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawStreamRequest.rollback": {
            "name": "rollback",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawStreamRequest.get_start": {
            "name": "get_start",
            "location": 266,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [],
                "dst_dir": []
            }
        },
        "TarStreamRequest.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "SymbolsStreamRequest.get_start": {
            "name": "get_start",
            "location": 285,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [],
                "dst_dir": []
            }
        },
        "_CsvStreamRequest.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "cache_num": [],
                "chunk_process": [],
                "csv_reader": []
            }
        },
        "_CsvStreamRequest.setup": {
            "name": "setup",
            "location": 321,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.stream_decompress_requests": {
            "name": "stream_decompress_requests",
            "location": 324,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.process": {
            "name": "process",
            "location": 337,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.rollback": {
            "name": "rollback",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.cleanup": {
            "name": "cleanup",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.process_chunk": {
            "name": "process_chunk",
            "location": 362,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CsvStreamRequest.process_row": {
            "name": "process_row",
            "location": 365,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "_T0@@"
                ]
            }
        },
        "_FileStream.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "writer_cls": []
            }
        },
        "_FileStream.setup": {
            "name": "setup",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FileStream.process_row": {
            "name": "process_row",
            "location": 408,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "_T0@@"
                ]
            }
        },
        "_FileStream.rollback": {
            "name": "rollback",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FileStream.cleanup": {
            "name": "cleanup",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FileStream.get_start": {
            "name": "get_start",
            "location": 422,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "cls": [],
                "dst_dir": []
            }
        },
        "_ZipFileStream.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "writer_cls": []
            }
        },
        "_ZipFileStream.process_row": {
            "name": "process_row",
            "location": 441,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "_T0@@"
                ]
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/data/kline.py": {
        "KlinePoint.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "key": []
            }
        },
        "KlinePoint.value": {
            "name": "value",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitMexKlineProcessPoints.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_file": [],
                "output_file": []
            }
        },
        "BitMexKlineProcessPoints.__iter__": {
            "name": "__iter__",
            "location": 71,
            "return": [
                "Generator[(KlinePoint, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitMexKlineTransform.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dir": [],
                "output_dir": []
            }
        },
        "BitMexKlineTransform.process_points": {
            "name": "process_points",
            "location": 125,
            "return": [
                "BitMexKlineProcessPoints"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitMexKlineTransform.process_one_point": {
            "name": "process_one_point",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "BitMexKlineTransform.last": {
            "name": "last",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullFillPoint.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "instruemt_data": [],
                "key": []
            }
        },
        "FullFillPoint.value": {
            "name": "value",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KlineFullFileProcessPoints.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instrument_data": [],
                "kline_hdf_path": []
            }
        },
        "KlineFullFileProcessPoints.__iter__": {
            "name": "__iter__",
            "location": 191,
            "return": [
                "Generator[(FullFillPoint, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KlineFullFileProcessPoints.get_keys": {
            "name": "get_keys",
            "location": 196,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "KlineFullFill.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dir": []
            }
        },
        "KlineFullFill.reformat_instrument_data": {
            "name": "reformat_instrument_data",
            "location": 211,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KlineFullFill.process_points": {
            "name": "process_points",
            "location": 217,
            "return": [
                "KlineFullFileProcessPoints"
            ],
            "arguments": {
                "self": []
            }
        },
        "KlineFullFill.process_one_point": {
            "name": "process_one_point",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "KlineFullFill.get_start_end": {
            "name": "get_start_end",
            "location": 238,
            "return": [
                "Tuple[(datetime.datetime, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "df": []
            }
        },
        "KlineFullFill.last": {
            "name": "last",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/data/loader.py": {
        "BitmexDataloader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "BitmexDataloader.load_instruments": {
            "name": "load_instruments",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": []
            }
        },
        "BitmexDataloader.active_instruments": {
            "name": "active_instruments",
            "location": 113,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "date_time": []
            }
        },
        "BitmexDataloader.get_last_price": {
            "name": "get_last_price",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": [],
                "date_time": []
            }
        },
        "BitmexDataloader.get_kline": {
            "name": "get_kline",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": [],
                "date_time": [],
                "count": []
            }
        },
        "BitmexDataloader.all_data": {
            "name": "all_data",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "symbol": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/data/utils.py": {
        "_date_parse": {
            "name": "_date_parse",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "one": []
            }
        },
        "_side_converters": {
            "name": "_side_converters",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "side": []
            }
        },
        "_tick_direction": {
            "name": "_tick_direction",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "tick_direction": []
            }
        },
        "read_trade_tar": {
            "name": "read_trade_tar",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "with_detailed": [],
                "with_symbol": [],
                "index": []
            }
        },
        "read_quote_tar": {
            "name": "read_quote_tar",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "with_symbol": [],
                "index": []
            }
        },
        "trades_to_1m_kline": {
            "name": "trades_to_1m_kline",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": []
            }
        },
        "kline_from_list_of_dict": {
            "name": "kline_from_list_of_dict",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "fullfill_1m_kline_with_start_end": {
            "name": "fullfill_1m_kline_with_start_end",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": [],
                "start": [],
                "end": []
            }
        },
        "classify_df": {
            "name": "classify_df",
            "location": 189,
            "return": [
                "dict"
            ],
            "arguments": {
                "df": [],
                "column": [],
                "delete_column": []
            }
        },
        "check_1m_data_integrity": {
            "name": "check_1m_data_integrity",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "start": [],
                "end": []
            }
        }
    },
    "monkq-master/monkq/exchange/bitmex/data/__init__.py": {},
    "monkq-master/monkq/plugins/__init__.py": {},
    "monkq-master/monkq/utils/as_dict.py": {
        "base_order_to_dict": {
            "name": "base_order_to_dict",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "order": []
            }
        },
        "limit_order_to_dict": {
            "name": "limit_order_to_dict",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "order": []
            }
        },
        "market_order_to_dict": {
            "name": "market_order_to_dict",
            "location": 45,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "order": []
            }
        }
    },
    "monkq-master/monkq/utils/csv.py": {
        "CsvFileDefaultDict.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [],
                "fieldnames": []
            }
        },
        "CsvFileDefaultDict.__missing__": {
            "name": "__missing__",
            "location": 40,
            "return": [
                "csv.DictWriter"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CsvFileDefaultDict.close": {
            "name": "close",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvZipDefaultDict.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [],
                "fieldnames": [],
                "level": []
            }
        },
        "CsvZipDefaultDict.__missing__": {
            "name": "__missing__",
            "location": 64,
            "return": [
                "gzip.GzipFile"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CsvZipDefaultDict.writerow": {
            "name": "writerow",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "row": []
            }
        },
        "CsvZipDefaultDict.close": {
            "name": "close",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/monkq/utils/dataframe.py": {
        "is_datetime_not_remain": {
            "name": "is_datetime_not_remain",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "freq": []
            }
        },
        "make_datetime_exactly": {
            "name": "make_datetime_exactly",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "freq": [],
                "forward": []
            }
        },
        "kline_count_window": {
            "name": "kline_count_window",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "endtime": [],
                "count": []
            }
        },
        "kline_1m_to_freq": {
            "name": "kline_1m_to_freq",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "freq": []
            }
        },
        "kline_indicator": {
            "name": "kline_indicator",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "func": [],
                "columns": []
            }
        },
        "kline_time_window": {
            "name": "kline_time_window",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "df": [],
                "start_datetime": [],
                "end_datetime": []
            }
        },
        "_adjust_axe_timeaxis_view": {
            "name": "_adjust_axe_timeaxis_view",
            "location": 105,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "ax": [
                    "_T0@@"
                ]
            }
        },
        "plot_kline_candlestick": {
            "name": "plot_kline_candlestick",
            "location": 114,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "ax": [
                    "_T0@@"
                ],
                "df": [],
                "colordown": [],
                "colorup": [],
                "alpha": []
            }
        },
        "plot_indicator": {
            "name": "plot_indicator",
            "location": 173,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "ax": [
                    "_T0@@"
                ],
                "df": [],
                "alpha": []
            }
        },
        "plot_volume": {
            "name": "plot_volume",
            "location": 187,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "ax": [
                    "_T0@@"
                ],
                "kline": [],
                "color": [],
                "alpha": []
            }
        }
    },
    "monkq-master/monkq/utils/filefunc.py": {
        "assure_dir": {
            "name": "assure_dir",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": []
            }
        },
        "make_writable": {
            "name": "make_writable",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "monkq-master/monkq/utils/i18n.py": {
        "LazyTranslation.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyTranslation.setup": {
            "name": "setup",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": []
            }
        },
        "LazyTranslation.gettext": {
            "name": "gettext",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "monkq-master/monkq/utils/id.py": {
        "gen_unique_id": {
            "name": "gen_unique_id",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "monkq-master/monkq/utils/timefunc.py": {
        "utc_datetime": {
            "name": "utc_datetime",
            "location": 32,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "year": [],
                "month": [],
                "day": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": []
            }
        },
        "parse_datetime_str": {
            "name": "parse_datetime_str",
            "location": 37,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "datetime_str": []
            }
        },
        "is_aware_datetime": {
            "name": "is_aware_datetime",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": []
            }
        },
        "local_tz_offset": {
            "name": "local_tz_offset",
            "location": 47,
            "return": [
                "Optional[datetime.timedelta]"
            ],
            "arguments": {}
        }
    },
    "monkq-master/monkq/utils/__init__.py": {},
    "monkq-master/scripts/gen_translation.py": {},
    "monkq-master/tests/conftest.py": {
        "settings": {
            "name": "settings",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "exchange": {
            "name": "exchange",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "tem_data_dir": {
            "name": "tem_data_dir",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "monkq-master/tests/test_analyse.py": {
        "_override_result_setting": {
            "name": "_override_result_setting",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "setting": [],
                "key": [],
                "value": []
            }
        },
        "strategy_module": {
            "name": "strategy_module",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "analyse_result": {
            "name": "analyse_result",
            "location": 56,
            "return": [],
            "arguments": {
                "tem_data_dir": [],
                "strategy_module": []
            }
        },
        "test_analyse_plot_account": {
            "name": "test_analyse_plot_account",
            "location": 70,
            "return": [],
            "arguments": {
                "analyse_result": []
            }
        },
        "test_analyse_plot_kline": {
            "name": "test_analyse_plot_kline",
            "location": 79,
            "return": [],
            "arguments": {
                "analyse_result": []
            }
        },
        "test_analyse_plot_volume": {
            "name": "test_analyse_plot_volume",
            "location": 89,
            "return": [],
            "arguments": {
                "analyse_result": []
            }
        },
        "test_analyse_plot_indicator": {
            "name": "test_analyse_plot_indicator",
            "location": 99,
            "return": [],
            "arguments": {
                "analyse_result": []
            }
        },
        "test_analyse_mark_trades": {
            "name": "test_analyse_mark_trades",
            "location": 109,
            "return": [],
            "arguments": {
                "analyse_result": []
            }
        },
        "test_analyse_trades": {
            "name": "test_analyse_trades",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "analyse_result": []
            }
        }
    },
    "monkq-master/tests/test_cmd.py": {
        "test_download": {
            "name": "test_download",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_startstrategy": {
            "name": "test_startstrategy",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/test_config.py": {
        "test_settings": {
            "name": "test_settings",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_settings_default_value": {
            "name": "test_settings_default_value",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/test_initer.py": {
        "context": {
            "name": "context",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_initer": {
            "name": "test_initer",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_initer_not_exist": {
            "name": "test_initer_not_exist",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "monkq-master/tests/test_lazy_hdf_table.py": {
        "test_lazy_hdf_table": {
            "name": "test_lazy_hdf_table",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/test_runner.py": {
        "test_runner": {
            "name": "test_runner",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tem_data_dir": []
            }
        }
    },
    "monkq-master/tests/test_run_backtest.py": {
        "start_strategy_condition": {
            "name": "start_strategy_condition",
            "location": 92,
            "return": [],
            "arguments": {
                "tem_data_dir": []
            }
        },
        "test_run_1m_backtest": {
            "name": "test_run_1m_backtest",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "start_strategy_condition": []
            }
        }
    },
    "monkq-master/tests/test_stat.py": {
        "statistic_context": {
            "name": "statistic_context",
            "location": 18,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_statistic": {
            "name": "test_statistic",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "statistic_context": []
            }
        }
    },
    "monkq-master/tests/test_strategy_loader.py": {},
    "monkq-master/tests/test_ticker.py": {
        "test_1m_timer": {
            "name": "test_1m_timer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_1d_timer": {
            "name": "test_1d_timer",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timer_aware_timezone": {
            "name": "test_timer_aware_timezone",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timer_timeexception": {
            "name": "test_timer_timeexception",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/test_tradecounter.py": {
        "test_trader_counter": {
            "name": "test_trader_counter",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/tools.py": {
        "random_quote_frame": {
            "name": "random_quote_frame",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "length": [],
                "timestamp": []
            }
        },
        "random_trade_frame": {
            "name": "random_trade_frame",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "length": [],
                "timestamp": []
            }
        },
        "random_kline_data": {
            "name": "random_kline_data",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "length": [],
                "endtime": [],
                "freq": []
            }
        },
        "random_kline_data_with_start_end": {
            "name": "random_kline_data_with_start_end",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "start": [],
                "end": [],
                "freq": []
            }
        },
        "random_quote_hdf": {
            "name": "random_quote_hdf",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "length": []
            }
        },
        "random_trade_hdf": {
            "name": "random_trade_hdf",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "length": []
            }
        },
        "get_resource_path": {
            "name": "get_resource_path",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "monkq-master/tests/utils.py": {
        "random_string": {
            "name": "random_string",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "length": []
            }
        },
        "over_written_settings": {
            "name": "over_written_settings",
            "location": 39,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "add_path": {
            "name": "add_path",
            "location": 47,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "change_current_working_dir": {
            "name": "change_current_working_dir",
            "location": 55,
            "return": [],
            "arguments": {
                "target_dir": []
            }
        },
        "change_default_module_settings": {
            "name": "change_default_module_settings",
            "location": 63,
            "return": [],
            "arguments": {
                "module_setiings": []
            }
        }
    },
    "monkq-master/tests/__init__.py": {},
    "monkq-master/tests/assets/conftest.py": {
        "exchange": {
            "name": "exchange",
            "location": 41,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "base_account": {
            "name": "base_account",
            "location": 48,
            "return": [],
            "arguments": {
                "exchange": []
            }
        },
        "future_account": {
            "name": "future_account",
            "location": 53,
            "return": [],
            "arguments": {
                "exchange": []
            }
        },
        "instrument": {
            "name": "instrument",
            "location": 58,
            "return": [],
            "arguments": {
                "exchange": []
            }
        },
        "future_instrument": {
            "name": "future_instrument",
            "location": 74,
            "return": [],
            "arguments": {
                "exchange": []
            }
        },
        "future_instrument2": {
            "name": "future_instrument2",
            "location": 101,
            "return": [],
            "arguments": {
                "exchange": []
            }
        }
    },
    "monkq-master/tests/assets/test_account.py": {
        "test_future_account_deal": {
            "name": "test_future_account_deal",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": []
            }
        },
        "test_future_account_order_margin_two_direction": {
            "name": "test_future_account_order_margin_two_direction",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": []
            }
        },
        "test_future_account_order_margin_long_position": {
            "name": "test_future_account_order_margin_long_position",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": []
            }
        },
        "test_future_account_order_margin_short_position": {
            "name": "test_future_account_order_margin_short_position",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": []
            }
        },
        "test_future_account_order_margin_multiple_instruments": {
            "name": "test_future_account_order_margin_multiple_instruments",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_instrument2": []
            }
        },
        "test_future_accoutn_order_margin_leverage": {
            "name": "test_future_accoutn_order_margin_leverage",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": []
            }
        },
        "test_future_account_position_margin": {
            "name": "test_future_account_position_margin",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_instrument2": []
            }
        }
    },
    "monkq-master/tests/assets/test_instruments.py": {
        "test_instrument": {
            "name": "test_instrument",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": []
            }
        },
        "test_future_instrument": {
            "name": "test_future_instrument",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": []
            }
        },
        "test_instrument_pickle": {
            "name": "test_instrument_pickle",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": []
            }
        }
    },
    "monkq-master/tests/assets/test_order_trade.py": {
        "test_buy_order_trade": {
            "name": "test_buy_order_trade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": []
            }
        },
        "test_sell_order_trade": {
            "name": "test_sell_order_trade",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": []
            }
        },
        "test_future_limit_order": {
            "name": "test_future_limit_order",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_future_market_order": {
            "name": "test_future_market_order",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_order_pickle": {
            "name": "test_order_pickle",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_trade_pickle": {
            "name": "test_trade_pickle",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "future_instrument": [],
                "future_account": []
            }
        }
    },
    "monkq-master/tests/assets/test_positions.py": {
        "test_position_manager": {
            "name": "test_position_manager",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": [],
                "base_account": []
            }
        },
        "test_empty_position_deal": {
            "name": "test_empty_position_deal",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "instrument": [],
                "base_account": []
            }
        },
        "test_future_base_position": {
            "name": "test_future_base_position",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_cross_position": {
            "name": "test_cross_position",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_isolated_position": {
            "name": "test_isolated_position",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_account": []
            }
        },
        "test_cross_isolated_position": {
            "name": "test_cross_isolated_position",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "future_instrument": [],
                "future_account": []
            }
        }
    },
    "monkq-master/tests/assets/__init__.py": {},
    "monkq-master/tests/bitmex/conftest.py": {
        "instrument": {
            "name": "instrument",
            "location": 37,
            "return": [],
            "arguments": {
                "exchange": []
            }
        }
    },
    "monkq-master/tests/bitmex/test_auth.py": {
        "test_generate_expires": {
            "name": "test_generate_expires",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_signature": {
            "name": "test_generate_signature",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_header_dict": {
            "name": "test_gen_header_dict",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/bitmex/test_dataloader.py": {
        "instrument_dir": {
            "name": "instrument_dir",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_bitmex_dataloader_instruments": {
            "name": "test_bitmex_dataloader_instruments",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "exchange": [],
                "instrument_dir": []
            }
        },
        "test_bitmex_dataloader_kline_data": {
            "name": "test_bitmex_dataloader_kline_data",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "exchange": [],
                "tem_data_dir": []
            }
        }
    },
    "monkq-master/tests/bitmex/test_data_download.py": {
        "_mock_stream": {
            "name": "_mock_stream",
            "location": 78,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [
                    "Union[(MockQuoteZipFileStream, MockRawStreamRequest, MockSymbolsStream, MockTradeZipFileStream)]"
                ],
                "url": []
            }
        },
        "_mock_exception_stream": {
            "name": "_mock_exception_stream",
            "location": 90,
            "return": [
                "Generator[(Any, Any, nothing)]"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "test_datepoint": {
            "name": "test_datepoint",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitmex_process_points": {
            "name": "test_bitmex_process_points",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mkfile": {
            "name": "mkfile",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        },
        "test_bitmex_downloader": {
            "name": "test_bitmex_downloader",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitmexdownloader_do_all": {
            "name": "test_bitmexdownloader_do_all",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_symbols_stream_request": {
            "name": "test_symbols_stream_request",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raw_stream_request": {
            "name": "test_raw_stream_request",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raw_stream_request_exception": {
            "name": "test_raw_stream_request_exception",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trade_zip_file_stream": {
            "name": "test_trade_zip_file_stream",
            "location": 317,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_trade_zip_file_stream_exception": {
            "name": "test_trade_zip_file_stream_exception",
            "location": 345,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_quote_zip_file_stream": {
            "name": "test_quote_zip_file_stream",
            "location": 360,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_quote_zip_file_stream_exception": {
            "name": "test_quote_zip_file_stream_exception",
            "location": 388,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_quote_hdf_stream": {
            "name": "test_quote_hdf_stream",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quote_hdf_stream_exception": {
            "name": "test_quote_hdf_stream_exception",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trade_hdf_stream_exception": {
            "name": "test_trade_hdf_stream_exception",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trade_hdf_stream": {
            "name": "test_trade_hdf_stream",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockRawStreamRequest.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTradeZipFileStream.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockQuoteZipFileStream.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSymbolsStream.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "monkq-master/tests/bitmex/test_data_kline.py": {
        "compare_dataframe_time": {
            "name": "compare_dataframe_time",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "df1": [],
                "df2": [],
                "time": []
            }
        },
        "compare_dataframe_filled": {
            "name": "compare_dataframe_filled",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "df1": [],
                "time1": [],
                "df2": [],
                "time2": []
            }
        },
        "compare_datafrome_index": {
            "name": "compare_datafrome_index",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "df1": [],
                "df2": [],
                "index": []
            }
        },
        "asset_df_nan": {
            "name": "asset_df_nan",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "index": []
            }
        },
        "write_hdf": {
            "name": "write_hdf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "path": [],
                "key": []
            }
        },
        "test_trade_to_1m_kline": {
            "name": "test_trade_to_1m_kline",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_1m_data_integrity": {
            "name": "test_check_1m_data_integrity",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fullfill_kline_func": {
            "name": "test_fullfill_kline_func",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_BitMexKlineTransform_from_scratch": {
            "name": "test_BitMexKlineTransform_from_scratch",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_BitMexKlineTransform_with_data": {
            "name": "test_BitMexKlineTransform_with_data",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fullfill_kline": {
            "name": "test_fullfill_kline",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/bitmex/test_exchange.py": {
        "mock_httpinterface": {
            "name": "mock_httpinterface",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "monkq-master/tests/bitmex/test_http_interface.py": {},
    "monkq-master/tests/bitmex/test_utils.py": {
        "test_read_trade_tar": {
            "name": "test_read_trade_tar",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/bitmex/test_websocket.py": {
        "ret_data": {
            "name": "ret_data",
            "location": 44,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "test_bitmex_websocket_lost_connections": {
            "name": "test_bitmex_websocket_lost_connections",
            "location": 234,
            "return": [],
            "arguments": {}
        }
    },
    "monkq-master/tests/bitmex/__init__.py": {},
    "monkq-master/tests/context/test_context.py": {
        "test_context_load_default": {
            "name": "test_context_load_default",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_custom_setting": {
            "name": "test_context_custom_setting",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_load_strategy_error": {
            "name": "test_context_load_strategy_error",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_load_statistic_error": {
            "name": "test_context_load_statistic_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_load_trade_counter_error": {
            "name": "test_context_load_trade_counter_error",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_load_accounts_error": {
            "name": "test_context_load_accounts_error",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context_load_exchanges_error": {
            "name": "test_context_load_exchanges_error",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/context/__init__.py": {},
    "monkq-master/tests/context/exchange_mod/__init__.py": {},
    "monkq-master/tests/util/test_as_dict.py": {
        "test_base_order_to_dict": {
            "name": "test_base_order_to_dict",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tests_limit_order_to_dict": {
            "name": "tests_limit_order_to_dict",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_market_order_to_dict": {
            "name": "test_market_order_to_dict",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/util/test_dataframe.py": {
        "test_is_datetime_not_remain": {
            "name": "test_is_datetime_not_remain",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_datetime_exactly": {
            "name": "test_make_datetime_exactly",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_1m_dataframe_window": {
            "name": "test_1m_dataframe_window",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_5m_dataframe_window": {
            "name": "test_5m_dataframe_window",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_other_dataframe_window": {
            "name": "test_other_dataframe_window",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kline_1m_to_freq": {
            "name": "test_kline_1m_to_freq",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kline_indicator": {
            "name": "test_kline_indicator",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kline_time_window": {
            "name": "test_kline_time_window",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/util/test_i18n.py": {
        "test_lazytranslation_not_setting": {
            "name": "test_lazytranslation_not_setting",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lazytranslation": {
            "name": "test_lazytranslation",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/util/test_utils.py": {
        "test_assure_home": {
            "name": "test_assure_home",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_csv_file_defaultdict": {
            "name": "test_csv_file_defaultdict",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_csv_zip_default_dict": {
            "name": "test_csv_zip_default_dict",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aware_datetime": {
            "name": "test_aware_datetime",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_writeable": {
            "name": "test_make_writeable",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "monkq-master/tests/util/__init__.py": {}
}
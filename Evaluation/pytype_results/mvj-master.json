{
    "mvj-master/conftest.py": {
        "plot_search_test_data": {
            "name": "plot_search_test_data",
            "location": 38,
            "return": [],
            "arguments": {
                "plot_search_factory": [],
                "plot_search_type_factory": [],
                "plot_search_subtype_factory": [],
                "plot_search_stage_factory": [],
                "user_factory": []
            }
        },
        "lease_test_data": {
            "name": "lease_test_data",
            "location": 110,
            "return": [],
            "arguments": {
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "lease_area_factory": [],
                "lease_area_address_factory": []
            }
        },
        "plot_search_target": {
            "name": "plot_search_target",
            "location": 191,
            "return": [],
            "arguments": {
                "plan_unit_factory": [],
                "plot_search_target_factory": [],
                "lease_test_data": [],
                "plot_search_test_data": []
            }
        }
    },
    "mvj-master/manage.py": {},
    "mvj-master/batchrun/admin.py": {
        "JobRunLogAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "JobRunLogAdmin.content_preview": {
            "name": "content_preview",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "max_length": []
            }
        },
        "JobRunLogAdmin.get_downloadable_content": {
            "name": "get_downloadable_content",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "JobRunLogAdmin.get_downloadable_content_filename": {
            "name": "get_downloadable_content_filename",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "mvj-master/batchrun/admin_utils.py": {
        "ReadOnlyAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "ReadOnlyAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "ReadOnlyAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "PreciseTimeFormatter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "field_name": []
            }
        },
        "PreciseTimeFormatter.short_description": {
            "name": "short_description",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreciseTimeFormatter.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "WithDownloadableContent.download_content_url_name": {
            "name": "download_content_url_name",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WithDownloadableContent.get_urls": {
            "name": "get_urls",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithDownloadableContent.download_content": {
            "name": "download_content",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "WithDownloadableContent.download_content_view": {
            "name": "download_content_view",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "object_id": []
            }
        },
        "WithDownloadableContent.get_downloadable_content": {
            "name": "get_downloadable_content",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "WithDownloadableContent.get_downloadable_content_filename": {
            "name": "get_downloadable_content_filename",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "WithDownloadableContent.get_urls.wrap": {
            "name": "wrap",
            "location": 60,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "WithDownloadableContent.get_urls.wrap.wrapper": {
            "name": "wrapper",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "mvj-master/batchrun/constants.py": {},
    "mvj-master/batchrun/enums.py": {},
    "mvj-master/batchrun/fields.py": {
        "IntegerSetSpecifierField.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifierField.deconstruct": {
            "name": "deconstruct",
            "location": 25,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifierField.to_intset": {
            "name": "to_intset",
            "location": 40,
            "return": [
                "batchrun.intset.IntegerSetSpecifier"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntegerSetSpecifierField._validate_spec_syntax": {
            "name": "_validate_spec_syntax",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TextJSONField.db_type": {
            "name": "db_type",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        }
    },
    "mvj-master/batchrun/history_cleaning.py": {
        "perform_job_run_log_rotate_and_clean_up": {
            "name": "perform_job_run_log_rotate_and_clean_up",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": []
            }
        },
        "JobRunHistoryCleaner.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": []
            }
        },
        "JobRunHistoryCleaner.clean": {
            "name": "clean",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "actions": []
            }
        },
        "JobRunHistoryCleaner.collect_todo_actions": {
            "name": "collect_todo_actions",
            "location": 69,
            "return": [
                "Dict[(Any, set)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunHistoryCleaner._filter_runs_by_delay_field": {
            "name": "_filter_runs_by_delay_field",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "JobRunHistoryCleaner._execute_delete_runs": {
            "name": "_execute_delete_runs",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_ids": []
            }
        },
        "JobRunHistoryCleaner._jobrun_batches": {
            "name": "_jobrun_batches",
            "location": 131,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "JobRunHistoryCleaner._execute_delete_logs": {
            "name": "_execute_delete_logs",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_ids": []
            }
        },
        "JobRunHistoryCleaner._execute_compact_logs": {
            "name": "_execute_compact_logs",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_ids": []
            }
        }
    },
    "mvj-master/batchrun/intset.py": {
        "_parse_spec_as_ranges": {
            "name": "_parse_spec_as_ranges",
            "location": 181,
            "return": [
                "list"
            ],
            "arguments": {
                "spec": [],
                "min_value": [],
                "max_value": []
            }
        },
        "_parse_spec_part": {
            "name": "_parse_spec_part",
            "location": 185,
            "return": [
                "range"
            ],
            "arguments": {
                "part": [],
                "min_value": [],
                "max_value": []
            }
        },
        "_combine_ranges": {
            "name": "_combine_ranges",
            "location": 207,
            "return": [
                "list"
            ],
            "arguments": {
                "ranges": []
            }
        },
        "_range_limits_are_separate": {
            "name": "_range_limits_are_separate",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "ranges": []
            }
        },
        "IntegerSetSpecifier.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [],
                "min_value": [],
                "max_value": []
            }
        },
        "IntegerSetSpecifier.is_total": {
            "name": "is_total",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifier.simplify": {
            "name": "simplify",
            "location": 127,
            "return": [
                "_TIntegerSetSpecifier@@IntegerSetSpecifier@@"
            ],
            "arguments": {
                "self": [
                    "_TIntegerSetSpecifier@@IntegerSetSpecifier@@"
                ]
            }
        },
        "IntegerSetSpecifier.__iter__": {
            "name": "__iter__",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifier._iter_by_contains": {
            "name": "_iter_by_contains",
            "location": 149,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifier.__len__": {
            "name": "__len__",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifier.__contains__": {
            "name": "__contains__",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntegerSetSpecifier.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IntegerSetSpecifier.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerSetSpecifier.simplify._format_range": {
            "name": "_format_range",
            "location": 128,
            "return": [],
            "arguments": {
                "rng": []
            }
        }
    },
    "mvj-master/batchrun/job_launching.py": {
        "run_job": {
            "name": "run_job",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "job": []
            }
        },
        "JobRunLauncher.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_run": []
            }
        },
        "JobRunLauncher.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/job_running.py": {
        "execute_job_run": {
            "name": "execute_job_run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "job_run": []
            }
        },
        "OutputCollectorThread.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_run": [],
                "kind": [],
                "stream": []
            }
        },
        "OutputCollectorThread.run": {
            "name": "run",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogWriter.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_run": [],
                "kind": []
            }
        },
        "LogWriter.write": {
            "name": "write",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "mvj-master/batchrun/models.py": {
        "_get_default_job_history_retention_policy_pk": {
            "name": "_get_default_job_history_retention_policy_pk",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.get_command_line": {
            "name": "get_command_line",
            "location": 88,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "arguments": []
            }
        },
        "JobHistoryRetentionPolicy.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobHistoryRetentionPolicy.get_default": {
            "name": "get_default",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Job.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.get_command_line": {
            "name": "get_command_line",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timezone.__str__": {
            "name": "__str__",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timezone.clean": {
            "name": "clean",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledJob.__str__": {
            "name": "__str__",
            "location": 275,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledJob.recurrence_rule": {
            "name": "recurrence_rule",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScheduledJob.save": {
            "name": "save",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduledJob.update_run_queue": {
            "name": "update_run_queue",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_items_to_create": []
            }
        },
        "JobRunQuerySet.has_logs": {
            "name": "has_logs",
            "location": 328,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQuerySet.has_compacted_log": {
            "name": "has_compacted_log",
            "location": 333,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQuerySet.has_log_entries": {
            "name": "has_log_entries",
            "location": 336,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQuerySet.compact_logs": {
            "name": "compact_logs",
            "location": 340,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQuerySet.delete_logs": {
            "name": "delete_logs",
            "location": 351,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQuerySet.delete_with_logs": {
            "name": "delete_with_logs",
            "location": 364,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRun.__str__": {
            "name": "__str__",
            "location": 411,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRun.compact_logs": {
            "name": "compact_logs",
            "location": 414,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRun.delete_logs": {
            "name": "delete_logs",
            "location": 421,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunLogEntry.__str__": {
            "name": "__str__",
            "location": 470,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunLog.create_for_run_if_not_exists": {
            "name": "create_for_run_if_not_exists",
            "location": 509,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "cls": [],
                "run": []
            }
        },
        "JobRunLog.__iter__": {
            "name": "__iter__",
            "location": 532,
            "return": [
                "Generator[(JobRunLogEntry, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunLog.to_compact_log": {
            "name": "to_compact_log",
            "location": 553,
            "return": [
                "batchrun.compactor.compact_log.CompactLog"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQueueItemQuerySet.to_run": {
            "name": "to_run",
            "location": 565,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQueueItemQuerySet.remove_old_items": {
            "name": "remove_old_items",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "JobRunQueueItemQuerySet.refresh": {
            "name": "refresh",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunQueueItem.__str__": {
            "name": "__str__",
            "location": 602,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/model_mixins.py": {
        "CleansOnSave.save": {
            "name": "save",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/scheduler.py": {
        "run_scheduler_loop": {
            "name": "run_scheduler_loop",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "mvj-master/batchrun/scheduling.py": {
        "get_next_events": {
            "name": "get_next_events",
            "location": 68,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "rule": [],
                "start_time": []
            }
        },
        "_iter_dates_from": {
            "name": "_iter_dates_from",
            "location": 94,
            "return": [
                "Generator[(_datetime.date, Any, None)]"
            ],
            "arguments": {
                "rule": [],
                "start_date": []
            }
        },
        "_iter_times": {
            "name": "_iter_times",
            "location": 113,
            "return": [
                "Generator[(_datetime.time, Any, None)]"
            ],
            "arguments": {
                "rule": []
            }
        },
        "_get_possible_times": {
            "name": "_get_possible_times",
            "location": 119,
            "return": [
                "list"
            ],
            "arguments": {
                "rule": [],
                "naive_datetime": [],
                "tz": []
            }
        },
        "RecurrenceRule.create": {
            "name": "create",
            "location": 22,
            "return": [
                "_TRecurrenceRule@@RecurrenceRule@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRecurrenceRule]"
                ],
                "timezone": [],
                "years": [],
                "months": [],
                "days_of_month": []
            }
        },
        "RecurrenceRule.matches_datetime": {
            "name": "matches_datetime",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "RecurrenceRule.matches_date": {
            "name": "matches_date",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "RecurrenceRule.matches_weekday": {
            "name": "matches_weekday",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "RecurrenceRule.matches_time": {
            "name": "matches_time",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "RecurrenceRule.get_next_events": {
            "name": "get_next_events",
            "location": 64,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "start_time": []
            }
        }
    },
    "mvj-master/batchrun/utils.py": {
        "get_django_manage_py": {
            "name": "get_django_manage_py",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "max_depth": []
            }
        }
    },
    "mvj-master/batchrun/_times.py": {
        "make_aware": {
            "name": "make_aware",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": [],
                "tz": []
            }
        },
        "check_is_aware": {
            "name": "check_is_aware",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "dt": []
            }
        },
        "utc_now": {
            "name": "utc_now",
            "location": 20,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        }
    },
    "mvj-master/batchrun/__init__.py": {},
    "mvj-master/batchrun/api/urls.py": {},
    "mvj-master/batchrun/api/viewsets.py": {},
    "mvj-master/batchrun/api/__init__.py": {},
    "mvj-master/batchrun/compactor/compact_log.py": {
        "LogEntry.time": {
            "name": "time",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.kind": {
            "name": "kind",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.text": {
            "name": "text",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompactLog.from_log_entries": {
            "name": "from_log_entries",
            "location": 43,
            "return": [
                "_TCompactLog@@CompactLog@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCompactLog]"
                ],
                "entries": []
            }
        },
        "CompactLog.iterate_entries": {
            "name": "iterate_entries",
            "location": 60,
            "return": [
                "Generator[(LogEntryDatum, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompactLog.get_metadata": {
            "name": "get_metadata",
            "location": 68,
            "return": [
                "batchrun.compactor.metadata.LogEntryMetadata"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/compactor/metadata.py": {
        "LogEntryMetadata.deserialize": {
            "name": "deserialize",
            "location": 21,
            "return": [
                "_TLogEntryMetadata@@LogEntryMetadata@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLogEntryMetadata]"
                ],
                "data": []
            }
        },
        "LogEntryMetadata.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.first_timestamp": {
            "name": "first_timestamp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.last_timestamp": {
            "name": "last_timestamp",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.entry_count": {
            "name": "entry_count",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.error_count": {
            "name": "error_count",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.append_item": {
            "name": "append_item",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [],
                "kind": [],
                "length": []
            }
        },
        "LogEntryMetadata.items": {
            "name": "items",
            "location": 52,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntryMetadata.serialize": {
            "name": "serialize",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "time_precision": []
            }
        },
        "LogEntryMetadata._load_from_v1_data": {
            "name": "_load_from_v1_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LogEntryMetadata._get_entry_data": {
            "name": "_get_entry_data",
            "location": 96,
            "return": [
                "Tuple[(List[int], List[nothing], List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "time_precision": []
            }
        }
    },
    "mvj-master/batchrun/compactor/__init__.py": {},
    "mvj-master/batchrun/management/__init__.py": {},
    "mvj-master/batchrun/management/commands/batchrun_compact_log.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_ids": [],
                "dry_run": []
            }
        },
        "Command.process_job_run": {
            "name": "process_job_run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_id": [],
                "dry_run": []
            }
        }
    },
    "mvj-master/batchrun/management/commands/batchrun_execute_job_run.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/management/commands/batchrun_log_rotate.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dry_run": []
            }
        }
    },
    "mvj-master/batchrun/management/commands/batchrun_scheduler.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/management/commands/drop_old_log_entries.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/batchrun/management/commands/__init__.py": {},
    "mvj-master/batchrun/migrations/0001_initial.py": {},
    "mvj-master/batchrun/migrations/0002_add_safedelete_to_logs.py": {},
    "mvj-master/batchrun/migrations/0003_logentry_kind_1.py": {},
    "mvj-master/batchrun/migrations/0004_logentry_kind_2.py": {
        "fill_kind2_int_of_stderr_entries": {
            "name": "fill_kind2_int_of_stderr_entries",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "fill_kind_text_of_stderr_entries": {
            "name": "fill_kind_text_of_stderr_entries",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/batchrun/migrations/0005_logentry_kind_3.py": {},
    "mvj-master/batchrun/migrations/0006_remove_some_safedeletes.py": {},
    "mvj-master/batchrun/migrations/0007_logentry_meta.py": {},
    "mvj-master/batchrun/migrations/0008_jobrunlog.py": {},
    "mvj-master/batchrun/migrations/0009_jobhistoryretentionpolicy.py": {},
    "mvj-master/batchrun/migrations/0010_entry_data_to_text_json.py": {},
    "mvj-master/batchrun/migrations/0011_log_compact_function.py": {
        "RunSQLFromFile.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_file": [],
                "reverse_sql_file": []
            }
        },
        "RunSQLFromFile.sql": {
            "name": "sql",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RunSQLFromFile.reverse_sql": {
            "name": "reverse_sql",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RunSQLFromFile._read_file": {
            "name": "_read_file",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        }
    },
    "mvj-master/batchrun/migrations/__init__.py": {},
    "mvj-master/batchrun/tests/test_intset.py": {
        "test_can_be_constructed_from_valid_spec": {
            "name": "test_can_be_constructed_from_valid_spec",
            "location": 12,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_invalid_spec_raises": {
            "name": "test_invalid_spec_raises",
            "location": 40,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_can_be_constructed_with_min_equals_max": {
            "name": "test_can_be_constructed_with_min_equals_max",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_min_larger_than_max_raises": {
            "name": "test_min_larger_than_max_raises",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_spec_part_raises_on_invalid_spec_part": {
            "name": "test_parse_spec_part_raises_on_invalid_spec_part",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_range_in_spec_raises": {
            "name": "test_invalid_range_in_spec_raises",
            "location": 63,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_outside_values_in_spec_raises": {
            "name": "test_outside_values_in_spec_raises",
            "location": 70,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "test_parameters_available_as_properties": {
            "name": "test_parameters_available_as_properties",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_total": {
            "name": "test_is_total",
            "location": 105,
            "return": [],
            "arguments": {
                "spec": [],
                "minval": [],
                "maxval": [],
                "expected": []
            }
        },
        "test_simplify": {
            "name": "test_simplify",
            "location": 129,
            "return": [],
            "arguments": {
                "orig_spec": [],
                "simplified_spec": []
            }
        },
        "test_iter_returns_correct_values": {
            "name": "test_iter_returns_correct_values",
            "location": 156,
            "return": [],
            "arguments": {
                "spec": [],
                "minval": [],
                "maxval": [],
                "expected_values": []
            }
        },
        "test_iter_can_do_first_items_of_large_ranges_fast": {
            "name": "test_iter_can_do_first_items_of_large_ranges_fast",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_len": {
            "name": "test_len",
            "location": 180,
            "return": [],
            "arguments": {
                "spec": [],
                "minval": [],
                "maxval": [],
                "expected_values": []
            }
        },
        "test_bool": {
            "name": "test_bool",
            "location": 192,
            "return": [],
            "arguments": {
                "spec": [],
                "minval": [],
                "maxval": [],
                "expected_values": []
            }
        },
        "test_contains_works_as_expected": {
            "name": "test_contains_works_as_expected",
            "location": 210,
            "return": [],
            "arguments": {
                "spec": [],
                "minval": [],
                "maxval": [],
                "expected_values": []
            }
        },
        "test_contains_works_with_non_integer_values": {
            "name": "test_contains_works_with_non_integer_values",
            "location": 240,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_eq": {
            "name": "test_eq",
            "location": 267,
            "return": [],
            "arguments": {
                "a_spec": [],
                "a_min": [],
                "a_max": [],
                "b_spec": [],
                "b_min": [],
                "b_max": [],
                "expected": []
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/batchrun/tests/test_scheduling.py": {
        "rr": {
            "name": "rr",
            "location": 9,
            "return": [
                "batchrun.scheduling.RecurrenceRule"
            ],
            "arguments": {
                "time_spec": [],
                "weekdays": [],
                "tz": []
            }
        },
        "test_get_next_events": {
            "name": "test_get_next_events",
            "location": 232,
            "return": [],
            "arguments": {
                "case": []
            }
        },
        "test_get_next_events_count": {
            "name": "test_get_next_events_count",
            "location": 251,
            "return": [],
            "arguments": {
                "rule": [],
                "expected_count": []
            }
        },
        "test_get_next_events_iterating": {
            "name": "test_get_next_events_iterating",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/batchrun/tests/__init__.py": {},
    "mvj-master/credit_integration/admin.py": {},
    "mvj-master/credit_integration/apps.py": {},
    "mvj-master/credit_integration/enums.py": {},
    "mvj-master/credit_integration/mapper.py": {
        "map_credit_decision_status": {
            "name": "map_credit_decision_status",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "code": []
            }
        },
        "map_consumer_response": {
            "name": "map_consumer_response",
            "location": 15,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "json_data": [],
                "request": []
            }
        }
    },
    "mvj-master/credit_integration/models.py": {
        "CreditDecision.create_credit_decision_by_json": {
            "name": "create_credit_decision_by_json",
            "location": 118,
            "return": [],
            "arguments": {
                "json_data": [],
                "claimant": [],
                "customer": []
            }
        },
        "CreditDecision.get_credit_decision_queryset_by_customer": {
            "name": "get_credit_decision_queryset_by_customer",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "customer_id": [],
                "business_id": []
            }
        }
    },
    "mvj-master/credit_integration/permissions.py": {
        "SendCreditDecisionInquiryPermission.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "CreditDecisionViewPermission.has_permission": {
            "name": "has_permission",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        }
    },
    "mvj-master/credit_integration/requests.py": {
        "request_company_decision": {
            "name": "request_company_decision",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "business_id": [],
                "end_user": []
            }
        },
        "request_consumer_decision": {
            "name": "request_consumer_decision",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "identity_number": [],
                "end_user": []
            }
        },
        "_build_company_decision_url": {
            "name": "_build_company_decision_url",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_build_consumer_decision_url": {
            "name": "_build_consumer_decision_url",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_calculate_checksum": {
            "name": "_calculate_checksum",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [],
                "end_user": [],
                "timestamp": [],
                "key": []
            }
        },
        "_get_timestamp": {
            "name": "_get_timestamp",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mvj-master/credit_integration/serializers.py": {},
    "mvj-master/credit_integration/urls.py": {},
    "mvj-master/credit_integration/views.py": {
        "send_credit_decision_inquiry": {
            "name": "send_credit_decision_inquiry",
            "location": 26,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_credit_decisions": {
            "name": "get_credit_decisions",
            "location": 90,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_error_response": {
            "name": "_error_response",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "json_error": []
            }
        },
        "_get_company_decision": {
            "name": "_get_company_decision",
            "location": 126,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "business_id": [],
                "user": [],
                "contact": []
            }
        },
        "_get_consumer_decision": {
            "name": "_get_consumer_decision",
            "location": 150,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "identity_number": [],
                "user": []
            }
        },
        "_add_log": {
            "name": "_add_log",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "identification": [],
                "user": [],
                "text": []
            }
        }
    },
    "mvj-master/credit_integration/__init__.py": {},
    "mvj-master/credit_integration/migrations/0001_initial.py": {},
    "mvj-master/credit_integration/migrations/0002_reasons_can_be_empty.py": {},
    "mvj-master/credit_integration/migrations/0003_add_permission_for_decision_inquiry.py": {},
    "mvj-master/credit_integration/migrations/0004_set_operational_start_date_nullable.py": {},
    "mvj-master/credit_integration/migrations/0005_creditdecision_original_data.py": {},
    "mvj-master/credit_integration/migrations/0006_creditdecisionlog.py": {},
    "mvj-master/credit_integration/migrations/0007_add_verbose.py": {},
    "mvj-master/credit_integration/migrations/__init__.py": {},
    "mvj-master/credit_integration/tests/conftest.py": {
        "api_client": {
            "name": "api_client",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "mvj-master/credit_integration/tests/factories.py": {
        "CreditDecisionFactory.reasons": {
            "name": "reasons",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "create": [],
                "extracted": []
            }
        }
    },
    "mvj-master/credit_integration/tests/test_credit_decision.py": {
        "mock_return_company_json_data": {
            "name": "mock_return_company_json_data",
            "location": 12,
            "return": [
                "Dict[(str, Optional[Dict[(str, Optional[List[nothing]])]])]"
            ],
            "arguments": {
                "business_id": []
            }
        },
        "mock_return_consumer_json_data": {
            "name": "mock_return_consumer_json_data",
            "location": 142,
            "return": [
                "Dict[(str, Dict[(str, Optional[Union[(Dict[(str, Union[(str, Dict[(str, Optional[Union[(int, str, Dict[(str, Optional[Union[(str, List[Dict[(str, str)]])]])], List[nothing], _T0)]])])])], List[nothing])]])])]"
            ],
            "arguments": {
                "identity_number": [
                    "_T0@@"
                ]
            }
        },
        "test_get_credit_decisions_endpoint": {
            "name": "test_get_credit_decisions_endpoint",
            "location": 204,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": [],
                "credit_decision_reason_factory": [],
                "business_credit_decision_factory": []
            }
        },
        "test_get_credit_decisions_without_access_right": {
            "name": "test_get_credit_decisions_without_access_right",
            "location": 238,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": [],
                "credit_decision_reason_factory": [],
                "business_credit_decision_factory": []
            }
        },
        "test_send_credit_decision_inquiry_endpoint_with_business_id": {
            "name": "test_send_credit_decision_inquiry_endpoint_with_business_id",
            "location": 265,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        },
        "test_send_credit_decision_inquiry_endpoint_with_identity_number": {
            "name": "test_send_credit_decision_inquiry_endpoint_with_identity_number",
            "location": 317,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        },
        "test_send_credit_decision_inquiry_endpoint_with_person_contact": {
            "name": "test_send_credit_decision_inquiry_endpoint_with_person_contact",
            "location": 361,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": [],
                "contact_factory": []
            }
        },
        "test_send_credit_decision_inquiry_endpoint_without_access_right": {
            "name": "test_send_credit_decision_inquiry_endpoint_without_access_right",
            "location": 411,
            "return": [],
            "arguments": {
                "client": [],
                "user_factory": [],
                "credit_decision_reason_factory": [],
                "business_credit_decision_factory": []
            }
        }
    },
    "mvj-master/credit_integration/tests/test_smoke.py": {
        "test_smoke": {
            "name": "test_smoke",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/credit_integration/tests/__init__.py": {},
    "mvj-master/field_permissions/admin.py": {
        "FieldPermissionsAdminMixin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "FieldPermissionsAdminMixin.get_exclude": {
            "name": "get_exclude",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "FieldPermissionsAdminMixin.get_fields": {
            "name": "get_fields",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        }
    },
    "mvj-master/field_permissions/apps.py": {
        "FieldPermissionsConfig.ready": {
            "name": "ready",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/field_permissions/metadata.py": {
        "FieldPermissionsMetadataMixin.get_serializer_info": {
            "name": "get_serializer_info",
            "location": 10,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        }
    },
    "mvj-master/field_permissions/receivers.py": {
        "create_permissions": {
            "name": "create_permissions",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [],
                "verbosity": [],
                "interactive": [],
                "using": [],
                "apps": []
            }
        }
    },
    "mvj-master/field_permissions/registry.py": {
        "FieldPermissionsModelRegistry.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldPermissionsModelRegistry.register": {
            "name": "register",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "include_fields": [],
                "exclude_fields": []
            }
        },
        "FieldPermissionsModelRegistry.in_registry": {
            "name": "in_registry",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "FieldPermissionsModelRegistry.get_include_fields_for": {
            "name": "get_include_fields_for",
            "location": 30,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "FieldPermissionsModelRegistry.get_exclude_fields_for": {
            "name": "get_exclude_fields_for",
            "location": 39,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "FieldPermissionsModelRegistry.get_models": {
            "name": "get_models",
            "location": 48,
            "return": [
                "dict_keys[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldPermissionsModelRegistry.get_model_fields": {
            "name": "get_model_fields",
            "location": 51,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "klass": []
            }
        },
        "FieldPermissionsModelRegistry.get_field_permissions_for_model": {
            "name": "get_field_permissions_for_model",
            "location": 67,
            "return": [
                "List[Tuple[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "klass": []
            }
        }
    },
    "mvj-master/field_permissions/serializers.py": {
        "FieldPermissionsSerializerMixin.modify_fields_by_field_permissions": {
            "name": "modify_fields_by_field_permissions",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldPermissionsSerializerMixin.to_representation": {
            "name": "to_representation",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "mvj-master/field_permissions/viewsets.py": {
        "FieldPermissionsViewsetMixin.get_serializer": {
            "name": "get_serializer",
            "location": 2,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/field_permissions/__init__.py": {},
    "mvj-master/field_permissions/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/field_permissions/tests/test_registry.py": {
        "test_in_registry": {
            "name": "test_in_registry",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_not_in_registry": {
            "name": "test_not_in_registry",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_get_model_fields_all_fields": {
            "name": "test_get_model_fields_all_fields",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_get_model_fields_include_some_fields": {
            "name": "test_get_model_fields_include_some_fields",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_get_model_fields_exclude_some_fields": {
            "name": "test_get_model_fields_exclude_some_fields",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_get_field_permissions_for_model": {
            "name": "test_get_field_permissions_for_model",
            "location": 73,
            "return": [],
            "arguments": {}
        }
    },
    "mvj-master/field_permissions/tests/urls.py": {},
    "mvj-master/field_permissions/tests/__init__.py": {},
    "mvj-master/field_permissions/tests/dummy_app/models.py": {},
    "mvj-master/field_permissions/tests/dummy_app/__init__.py": {},
    "mvj-master/forms/admin.py": {
        "FieldTypeChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FieldChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SectionChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FormChoiceField.label_from_instance": {
            "name": "label_from_instance",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FieldModelAdmin.formfield_for_foreignkey": {
            "name": "formfield_for_foreignkey",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "db_field": [],
                "request": []
            }
        },
        "SectionModelAdmin.formfield_for_foreignkey": {
            "name": "formfield_for_foreignkey",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "db_field": [],
                "request": []
            }
        },
        "ChoiceModelAdmin.formfield_for_foreignkey": {
            "name": "formfield_for_foreignkey",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "db_field": [],
                "request": []
            }
        }
    },
    "mvj-master/forms/apps.py": {},
    "mvj-master/forms/enums.py": {},
    "mvj-master/forms/translation.py": {},
    "mvj-master/forms/utils.py": {
        "generate_unique_identifier": {
            "name": "generate_unique_identifier",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "klass": [],
                "field_name": [],
                "field_value": [],
                "max_length": []
            }
        },
        "clone_object": {
            "name": "clone_object",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [],
                "attrs": []
            }
        }
    },
    "mvj-master/forms/views.py": {},
    "mvj-master/forms/__init__.py": {},
    "mvj-master/forms/migrations/0001_initial.py": {},
    "mvj-master/forms/migrations/0002_add_translations.py": {},
    "mvj-master/forms/migrations/0003_answer_entry.py": {},
    "mvj-master/forms/migrations/0004_auto_20210915_1654.py": {},
    "mvj-master/forms/migrations/0005_entry_null_true.py": {},
    "mvj-master/forms/migrations/0006_form_state.py": {},
    "mvj-master/forms/migrations/0007_section_add_new_text_null.py": {},
    "mvj-master/forms/migrations/__init__.py": {},
    "mvj-master/forms/models/form.py": {
        "Form.clone": {
            "name": "clone",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.save": {
            "name": "save",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldType.save": {
            "name": "save",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.save": {
            "name": "save",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/forms/models/__init__.py": {},
    "mvj-master/forms/serializers/form.py": {
        "RecursiveSerializer.to_representation": {
            "name": "to_representation",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecursiveSerializer.to_internal_value": {
            "name": "to_internal_value",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FieldSerializer.create": {
            "name": "create",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "FieldSerializer.update": {
            "name": "update",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "SectionSerializer.create": {
            "name": "create",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "SectionSerializer.update_fields": {
            "name": "update_fields",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "fields": []
            }
        },
        "SectionSerializer.update_subsections": {
            "name": "update_subsections",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "subsections": []
            }
        },
        "SectionSerializer.update": {
            "name": "update",
            "location": 171,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "_T0@@"
                ],
                "validated_data": []
            }
        },
        "FormSerializer.get_sections": {
            "name": "get_sections",
            "location": 194,
            "return": [
                "dict"
            ],
            "arguments": {
                "instance": []
            }
        },
        "FormSerializer.to_representation": {
            "name": "to_representation",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "FormSerializer.filter_subsections": {
            "name": "filter_subsections",
            "location": 203,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "data": [
                    "_T0@@"
                ]
            }
        },
        "FormSerializer.update": {
            "name": "update",
            "location": 211,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "AnswerSerializer.create": {
            "name": "create",
            "location": 260,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "AnswerSerializer.update": {
            "name": "update",
            "location": 267,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "_T0@@"
                ],
                "validated_data": []
            }
        }
    },
    "mvj-master/forms/serializers/__init__.py": {},
    "mvj-master/forms/tests/conftest.py": {
        "basic_answer": {
            "name": "basic_answer",
            "location": 48,
            "return": [],
            "arguments": {
                "answer_factory": [],
                "entry_factory": [],
                "basic_template_form": [],
                "user_factory": []
            }
        },
        "basic_template_form": {
            "name": "basic_template_form",
            "location": 61,
            "return": [],
            "arguments": {
                "form_factory": [],
                "section_factory": [],
                "field_factory": [],
                "choice_factory": [],
                "basic_field_types": []
            }
        },
        "basic_template_form_with_required_fields": {
            "name": "basic_template_form_with_required_fields",
            "location": 357,
            "return": [],
            "arguments": {
                "basic_template_form": []
            }
        },
        "basic_field_types": {
            "name": "basic_field_types",
            "location": 370,
            "return": [],
            "arguments": {
                "field_type_factory": []
            }
        },
        "basic_form_data": {
            "name": "basic_form_data",
            "location": 393,
            "return": [],
            "arguments": {}
        },
        "basic_form": {
            "name": "basic_form",
            "location": 403,
            "return": [],
            "arguments": {
                "basic_template_form": []
            }
        }
    },
    "mvj-master/forms/tests/test_api.py": {
        "test_filter_form_is_template": {
            "name": "test_filter_form_is_template",
            "location": 10,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "form_factory": [],
                "admin_client": []
            }
        },
        "test_delete_form": {
            "name": "test_delete_form",
            "location": 31,
            "return": [],
            "arguments": {
                "admin_client": [],
                "basic_form": []
            }
        },
        "test_add_field_to_form": {
            "name": "test_add_field_to_form",
            "location": 38,
            "return": [],
            "arguments": {
                "admin_client": [],
                "basic_form": [],
                "basic_field_types": []
            }
        },
        "test_add_and_delete_section_to_form": {
            "name": "test_add_and_delete_section_to_form",
            "location": 62,
            "return": [],
            "arguments": {
                "admin_client": [],
                "basic_form": []
            }
        }
    },
    "mvj-master/forms/tests/test_models.py": {
        "test_section_identifier": {
            "name": "test_section_identifier",
            "location": 9,
            "return": [],
            "arguments": {
                "form_factory": [],
                "section_factory": []
            }
        },
        "test_linking_answer_to_form": {
            "name": "test_linking_answer_to_form",
            "location": 19,
            "return": [],
            "arguments": {
                "form_factory": [],
                "answer_factory": [],
                "user_factory": []
            }
        },
        "test_linking_entry_to_answer": {
            "name": "test_linking_entry_to_answer",
            "location": 27,
            "return": [],
            "arguments": {
                "form_factory": [],
                "answer_factory": [],
                "entry_factory": [],
                "user_factory": [],
                "field_factory": [],
                "field_type_factory": [],
                "section_factory": []
            }
        }
    },
    "mvj-master/forms/tests/test_serializers.py": {
        "find": {
            "name": "find",
            "location": 10,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "key": [],
                "dictionary": []
            }
        },
        "test_form_serializer": {
            "name": "test_form_serializer",
            "location": 24,
            "return": [],
            "arguments": {
                "basic_template_form": []
            }
        },
        "test_answer_serializer": {
            "name": "test_answer_serializer",
            "location": 32,
            "return": [],
            "arguments": {
                "basic_answer": []
            }
        },
        "test_entry_unique_validators": {
            "name": "test_entry_unique_validators",
            "location": 39,
            "return": [],
            "arguments": {
                "basic_answer": [],
                "entry_factory": []
            }
        },
        "test_all_required_fields_answered_validator": {
            "name": "test_all_required_fields_answered_validator",
            "location": 59,
            "return": [],
            "arguments": {
                "basic_template_form_with_required_fields": [],
                "admin_user": []
            }
        },
        "test_social_security_validator": {
            "name": "test_social_security_validator",
            "location": 84,
            "return": [],
            "arguments": {
                "basic_template_form": [],
                "admin_user": []
            }
        },
        "test_company_id_validator": {
            "name": "test_company_id_validator",
            "location": 116,
            "return": [],
            "arguments": {
                "basic_template_form": [],
                "admin_user": []
            }
        }
    },
    "mvj-master/forms/tests/test_utils.py": {
        "test_form_cloning": {
            "name": "test_form_cloning",
            "location": 8,
            "return": [],
            "arguments": {
                "basic_template_form": []
            }
        }
    },
    "mvj-master/forms/tests/__init__.py": {},
    "mvj-master/forms/validators/answer.py": {
        "FieldRegexValidator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "error_code": [],
                "identifier": []
            }
        },
        "FieldRegexValidator.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RequiredFormFieldValidator.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "mvj-master/forms/validators/__init__.py": {},
    "mvj-master/forms/viewsets/form.py": {
        "FormViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/admin.py": {
        "NoDeleteInlineFormSet.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "InvoiceInline.has_change_permission": {
            "name": "has_change_permission",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "InvoiceInline.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "InvoiceInline.lease": {
            "name": "lease",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "InvoiceInline.invoice_number": {
            "name": "invoice_number",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "InvoiceInline.due_date": {
            "name": "due_date",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LaskeExportLogAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "LaskeExportLogAdmin.has_change_permission": {
            "name": "has_change_permission",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "LaskeExportLogAdmin.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "LaskeExportLogAdmin.export_filename": {
            "name": "export_filename",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "mvj-master/laske_export/apps.py": {},
    "mvj-master/laske_export/enums.py": {},
    "mvj-master/laske_export/exporter.py": {
        "set_constant_laske_values": {
            "name": "set_constant_laske_values",
            "location": 28,
            "return": [],
            "arguments": {
                "sales_order": []
            }
        },
        "LaskeExporter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LaskeExporter._check_export_directory": {
            "name": "_check_export_directory",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LaskeExporter._check_settings": {
            "name": "_check_settings",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LaskeExporter.save_to_file": {
            "name": "save_to_file",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "xml_string": [],
                "filename": []
            }
        },
        "LaskeExporter.send": {
            "name": "send",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "LaskeExporter.write_to_output": {
            "name": "write_to_output",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "LaskeExporter.export_invoices": {
            "name": "export_invoices",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "invoices": []
            }
        },
        "LaskeExporter.export_land_use_agreement_invoices": {
            "name": "export_land_use_agreement_invoices",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "invoices": []
            }
        }
    },
    "mvj-master/laske_export/models.py": {},
    "mvj-master/laske_export/__init__.py": {},
    "mvj-master/laske_export/document/fields.py": {
        "recursive_members": {
            "name": "recursive_members",
            "location": 10,
            "return": [
                "list"
            ],
            "arguments": {
                "obj": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "field_type": [],
                "validators": [],
                "many": [],
                "required": []
            }
        },
        "Field._validate_value": {
            "name": "_validate_value",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.is_valid": {
            "name": "is_valid",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FieldGroup.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup._validate_fields": {
            "name": "_validate_fields",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup.get_fields": {
            "name": "get_fields",
            "location": 113,
            "return": [
                "collections.OrderedDict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup.get_fields_as_elements": {
            "name": "get_fields_as_elements",
            "location": 132,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup.to_etree": {
            "name": "to_etree",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup.to_xml_string": {
            "name": "to_xml_string",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "encoding": []
            }
        },
        "FieldGroup.validate": {
            "name": "validate",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldGroup.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/document/invoice_sales_order_adapter.py": {
        "InvoiceSalesOrderAdapter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "invoice": [],
                "sales_order": [],
                "receivable_type_rent": [],
                "receivable_type_collateral": []
            }
        },
        "InvoiceSalesOrderAdapter.get_bill_text": {
            "name": "get_bill_text",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_first_tenant": {
            "name": "get_first_tenant",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_contact_to_bill": {
            "name": "get_contact_to_bill",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_po_number": {
            "name": "get_po_number",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.set_dates": {
            "name": "set_dates",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.set_references": {
            "name": "set_references",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_line_items": {
            "name": "get_line_items",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_order_type": {
            "name": "get_order_type",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_original_order": {
            "name": "get_original_order",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.get_sales_office": {
            "name": "get_sales_office",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSalesOrderAdapter.set_values": {
            "name": "set_values",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/document/land_use_agreement_invoice_sales_order_adapter.py": {
        "LandUseAgreementInvoiceSalesOrderAdapter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "invoice": [],
                "sales_order": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.get_bill_text": {
            "name": "get_bill_text",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.get_order_party_contact": {
            "name": "get_order_party_contact",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.get_billing_party_contact": {
            "name": "get_billing_party_contact",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.set_dates": {
            "name": "set_dates",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.set_references": {
            "name": "set_references",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.get_line_items": {
            "name": "get_line_items",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.get_order_type": {
            "name": "get_order_type",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSalesOrderAdapter.set_values": {
            "name": "set_values",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/document/sales_order.py": {
        "Party.from_contact": {
            "name": "from_contact",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contact": []
            }
        },
        "SalesOrder.set_bill_texts_from_string": {
            "name": "set_bill_texts_from_string",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "mvj-master/laske_export/document/__init__.py": {},
    "mvj-master/laske_export/management/__init__.py": {},
    "mvj-master/laske_export/management/commands/get_payments_from_laske.py": {
        "get_import_dir": {
            "name": "get_import_dir",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "Command.download_payments_sftp": {
            "name": "download_payments_sftp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.download_payments_ftp": {
            "name": "download_payments_ftp",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.download_payments": {
            "name": "download_payments",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.check_import_directory": {
            "name": "check_import_directory",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.find_unimported_files": {
            "name": "find_unimported_files",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.get_payment_lines_from_file": {
            "name": "get_payment_lines_from_file",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/management/commands/send_invoices_to_laske.py": {
        "set_constant_laske_values": {
            "name": "set_constant_laske_values",
            "location": 21,
            "return": [],
            "arguments": {
                "sales_order": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/laske_export/management/commands/__init__.py": {},
    "mvj-master/laske_export/migrations/0001_initial.py": {},
    "mvj-master/laske_export/migrations/0002_auto_20191004_0950.py": {},
    "mvj-master/laske_export/migrations/0003_extend_laske_export_log_invoices.py": {},
    "mvj-master/laske_export/migrations/0004_rename_laske_export_log_invoices.py": {},
    "mvj-master/laske_export/migrations/0005_add_fields_to_laske_export_log_invoice_item.py": {},
    "mvj-master/laske_export/migrations/0006_laskeexportlog_land_use_agreement_invoices.py": {},
    "mvj-master/laske_export/migrations/__init__.py": {},
    "mvj-master/laske_export/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "laske_export_from_email": {
            "name": "laske_export_from_email",
            "location": 19,
            "return": [],
            "arguments": {
                "override_config": []
            }
        },
        "laske_export_announce_email": {
            "name": "laske_export_announce_email",
            "location": 25,
            "return": [],
            "arguments": {
                "override_config": []
            }
        }
    },
    "mvj-master/laske_export/tests/test_bill_text.py": {
        "test_one_primary_address_in_leasearea": {
            "name": "test_one_primary_address_in_leasearea",
            "location": 14,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "lease_area_factory": [],
                "lease_area_address_factory": []
            }
        },
        "test_one_nonprimary_address_in_leasearea": {
            "name": "test_one_nonprimary_address_in_leasearea",
            "location": 101,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "lease_area_factory": [],
                "lease_area_address_factory": []
            }
        },
        "test_one_primary_and_nonprimary_addresses_in_leasearea": {
            "name": "test_one_primary_and_nonprimary_addresses_in_leasearea",
            "location": 188,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "lease_area_factory": [],
                "lease_area_address_factory": []
            }
        }
    },
    "mvj-master/laske_export/tests/test_exporter.py": {
        "monkeypatch_session": {
            "name": "monkeypatch_session",
            "location": 16,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "monkeypatch_laske_exporter_send": {
            "name": "monkeypatch_laske_exporter_send",
            "location": 26,
            "return": [],
            "arguments": {
                "monkeypatch_session": []
            }
        },
        "monkeypatch_laske_exporter_send_with_error": {
            "name": "monkeypatch_laske_exporter_send_with_error",
            "location": 37,
            "return": [],
            "arguments": {
                "monkeypatch_session": []
            }
        },
        "billing_period": {
            "name": "billing_period",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "lease": {
            "name": "lease",
            "location": 52,
            "return": [],
            "arguments": {
                "lease_factory": []
            }
        },
        "invoice": {
            "name": "invoice",
            "location": 60,
            "return": [],
            "arguments": {
                "contact_factory": [],
                "invoice_factory": [],
                "lease": [],
                "billing_period": []
            }
        },
        "broken_invoice": {
            "name": "broken_invoice",
            "location": 81,
            "return": [],
            "arguments": {
                "contact_factory": [],
                "invoice_factory": [],
                "lease": [],
                "billing_period": []
            }
        },
        "send_invoices_to_laske_command": {
            "name": "send_invoices_to_laske_command",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "send_invoices_to_laske_command_handle": {
            "name": "send_invoices_to_laske_command_handle",
            "location": 110,
            "return": [],
            "arguments": {
                "broken_invoice": [],
                "invoice": [],
                "send_invoices_to_laske_command": [],
                "monkeypatch_laske_exporter_send": []
            }
        },
        "send_invoices_to_laske_command_handle_with_unexpected_error": {
            "name": "send_invoices_to_laske_command_handle_with_unexpected_error",
            "location": 121,
            "return": [],
            "arguments": {
                "broken_invoice": [],
                "invoice": [],
                "send_invoices_to_laske_command": [],
                "monkeypatch_laske_exporter_send_with_error": []
            }
        },
        "land_use_agreement_invoice": {
            "name": "land_use_agreement_invoice",
            "location": 132,
            "return": [],
            "arguments": {
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_invalid_export_invoice": {
            "name": "test_invalid_export_invoice",
            "location": 149,
            "return": [],
            "arguments": {
                "broken_invoice": [],
                "invoice": [],
                "land_use_agreement_invoice": [],
                "monkeypatch_laske_exporter_send": []
            }
        },
        "test_send_invoices_to_laske_command_handle": {
            "name": "test_send_invoices_to_laske_command_handle",
            "location": 177,
            "return": [],
            "arguments": {
                "broken_invoice": [],
                "send_invoices_to_laske_command_handle": []
            }
        },
        "test_send_invoices_to_laske_command_handle_with_unexpected_error": {
            "name": "test_send_invoices_to_laske_command_handle_with_unexpected_error",
            "location": 193,
            "return": [],
            "arguments": {
                "send_invoices_to_laske_command_handle_with_unexpected_error": []
            }
        },
        "monkeypatch_laske_exporter_send.laske_exporter_send": {
            "name": "laske_exporter_send",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "monkeypatch_laske_exporter_send_with_error.laske_exporter_send": {
            "name": "laske_exporter_send",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        }
    },
    "mvj-master/laske_export/tests/test_party.py": {
        "test_party_from_contact_person_name": {
            "name": "test_party_from_contact_person_name",
            "location": 74,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "first_name": [],
                "last_name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_party_from_contact_person_name_with_care_of": {
            "name": "test_party_from_contact_person_name_with_care_of",
            "location": 167,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "first_name": [],
                "last_name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_party_from_contact_person_name_with_long_care_of": {
            "name": "test_party_from_contact_person_name_with_long_care_of",
            "location": 263,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "first_name": [],
                "last_name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_party_from_contact_name": {
            "name": "test_party_from_contact_name",
            "location": 337,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_party_from_contact_name_with_care_of": {
            "name": "test_party_from_contact_name_with_care_of",
            "location": 398,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_party_from_contact_person_with_long_care_of": {
            "name": "test_party_from_contact_person_with_long_care_of",
            "location": 461,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "contact_factory": [],
                "name": [],
                "expected1": [],
                "expected2": [],
                "expected3": [],
                "expected4": []
            }
        },
        "test_invalid_party_contact": {
            "name": "test_invalid_party_contact",
            "location": 485,
            "return": [],
            "arguments": {}
        }
    },
    "mvj-master/laske_export/tests/test_ponumber.py": {
        "test_ponumber_from_single_tenant": {
            "name": "test_ponumber_from_single_tenant",
            "location": 13,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_ponumber_from_recipient_tenant": {
            "name": "test_ponumber_from_recipient_tenant",
            "location": 87,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_ponumber_from_all_tenants": {
            "name": "test_ponumber_from_all_tenants",
            "location": 185,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "rent_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        }
    },
    "mvj-master/laske_export/tests/__init__.py": {},
    "mvj-master/leasing/admin.py": {
        "AreaAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TenantContactAdmin.get_lease_identifier": {
            "name": "get_lease_identifier",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TenantContactAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TenantAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseIdentifierAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ContractAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DecisionAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InspectionAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RentAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BasisOfRentAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InfillDevelopmentCompensationLeaseAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceSetAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceNoteAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseAreaAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 606,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseStateLogAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PlanUnitAdmin.get_lease_identifier": {
            "name": "get_lease_identifier",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PlanUnitAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ReadOnlyTabularInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        },
        "ReadOnlyTabularInline.has_change_permission": {
            "name": "has_change_permission",
            "location": 675,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "obj": []
            }
        }
    },
    "mvj-master/leasing/api_functions.py": {
        "CalculateIncreaseWith360DayCalendar.post": {
            "name": "post",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CalculateIncreaseWith360DayCalendar.get": {
            "name": "get",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "CalculateIncreaseWith360DayCalendar.process_request": {
            "name": "process_request",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "data": []
            }
        }
    },
    "mvj-master/leasing/apps.py": {},
    "mvj-master/leasing/enums.py": {},
    "mvj-master/leasing/filters.py": {
        "CoalesceOrderingFilter.filter_queryset": {
            "name": "filter_queryset",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "queryset": [],
                "view": []
            }
        },
        "InvoiceFilter.filter_going_to_sap": {
            "name": "filter_going_to_sap",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "value": []
            }
        },
        "LandUseAgreementInvoiceFilter.filter_going_to_sap": {
            "name": "filter_going_to_sap",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [],
                "name": [],
                "value": []
            }
        }
    },
    "mvj-master/leasing/forms.py": {
        "CommaSeparatedChoiceField.to_python": {
            "name": "to_python",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CommaSeparatedChoiceField.validate": {
            "name": "validate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "mvj-master/leasing/laske.py": {
        "serialize_invoice": {
            "name": "serialize_invoice",
            "location": 10,
            "return": [
                "ElementTree.Element"
            ],
            "arguments": {
                "invoice": []
            }
        },
        "get_laske_value": {
            "name": "get_laske_value",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "get_laske_bill_text_elements": {
            "name": "get_laske_bill_text_elements",
            "location": 67,
            "return": [
                "List[ElementTree.Element]"
            ],
            "arguments": {
                "invoice": []
            }
        },
        "get_laske_parties": {
            "name": "get_laske_parties",
            "location": 111,
            "return": [
                "List[ElementTree.Element]"
            ],
            "arguments": {
                "invoice": []
            }
        },
        "serialize_contact": {
            "name": "serialize_contact",
            "location": 128,
            "return": [
                "ElementTree.Element"
            ],
            "arguments": {
                "contact": [],
                "tag_name": []
            }
        },
        "get_laske_line_item": {
            "name": "get_laske_line_item",
            "location": 190,
            "return": [
                "ElementTree.Element"
            ],
            "arguments": {
                "invoice": []
            }
        }
    },
    "mvj-master/leasing/metadata.py": {
        "FieldsMetadata.determine_metadata": {
            "name": "determine_metadata",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "serializer": []
            }
        },
        "FieldsMetadata.get_field_info": {
            "name": "get_field_info",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        }
    },
    "mvj-master/leasing/permissions.py": {
        "PerMethodPermission.get_required_permissions": {
            "name": "get_required_permissions",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "view": []
            }
        },
        "PerMethodPermission.has_permission": {
            "name": "has_permission",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "IsSameUser.has_object_permission": {
            "name": "has_object_permission",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        }
    },
    "mvj-master/leasing/renderers.py": {
        "BrowsableAPIRendererWithoutForms.get_context": {
            "name": "get_context",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowsableAPIRendererWithoutForms.get_rendered_html_form": {
            "name": "get_rendered_html_form",
            "location": 12,
            "return": [
                "Union[(bool, str)]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "view": [],
                "method": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/utils.py": {
        "days360": {
            "name": "days360",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "method_eu": []
            }
        },
        "calculate_increase_with_360_day_calendar": {
            "name": "calculate_increase_with_360_day_calendar",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "date1": [],
                "date2": [],
                "increase_percentage": [],
                "current_amount": []
            }
        }
    },
    "mvj-master/leasing/validators.py": {},
    "mvj-master/leasing/views.py": {
        "are_settings_available": {
            "name": "are_settings_available",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "required_settings": []
            }
        },
        "ktj_proxy": {
            "name": "ktj_proxy",
            "location": 36,
            "return": [],
            "arguments": {
                "request": [],
                "base_type": [],
                "print_type": []
            }
        },
        "CloudiaProxy.get_view_name": {
            "name": "get_view_name",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudiaProxy.get": {
            "name": "get",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [],
                "contract_id": [],
                "file_id": []
            }
        },
        "VirreProxy.get_view_name": {
            "name": "get_view_name",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirreProxy.get": {
            "name": "get",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [],
                "service": [],
                "business_id": []
            }
        }
    },
    "mvj-master/leasing/__init__.py": {},
    "mvj-master/leasing/calculation/explanation.py": {
        "ExplanationItem.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [],
                "date_ranges": [],
                "amount": []
            }
        },
        "ExplanationItem.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explanation.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explanation.add_item": {
            "name": "add_item",
            "location": 23,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "explanation_item": [
                    "_T0@@"
                ],
                "related_item": []
            }
        },
        "Explanation.add": {
            "name": "add",
            "location": 31,
            "return": [
                "ExplanationItem"
            ],
            "arguments": {
                "self": [],
                "subject": [],
                "date_ranges": [],
                "amount": [],
                "related_item": []
            }
        },
        "Explanation.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/calculation/index.py": {
        "int_floor": {
            "name": "int_floor",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "precision": []
            }
        },
        "IndexCalculation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [],
                "index": [],
                "index_type": [],
                "precision": [],
                "x_value": [],
                "y_value": []
            }
        },
        "IndexCalculation._add_ratio_explanation": {
            "name": "_add_ratio_explanation",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ratio": []
            }
        },
        "IndexCalculation.calculate_type_1_2_3_4": {
            "name": "calculate_type_1_2_3_4",
            "location": 46,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "index_value": [],
                "precision": [],
                "base": []
            }
        },
        "IndexCalculation.calculate_type_5_7": {
            "name": "calculate_type_5_7",
            "location": 55,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "index_value": [],
                "base": []
            }
        },
        "IndexCalculation.calculate_type_6": {
            "name": "calculate_type_6",
            "location": 62,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "index_value": [],
                "base": []
            }
        },
        "IndexCalculation.calculate_type_6_v2": {
            "name": "calculate_type_6_v2",
            "location": 116,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "index_value": [],
                "base": []
            }
        },
        "IndexCalculation.get_index_value": {
            "name": "get_index_value",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexCalculation.calculate": {
            "name": "calculate",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/calculation/result.py": {
        "CalculationNote.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "description": []
            }
        },
        "CalculationNote.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationAmount.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "date_range_start": [],
                "date_range_end": [],
                "amount": []
            }
        },
        "CalculationAmount.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationAmount.add_sub_amounts": {
            "name": "add_sub_amounts",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amounts": []
            }
        },
        "CalculationAmount.add_note": {
            "name": "add_note",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "note": []
            }
        },
        "CalculationAmount.get_total_amount": {
            "name": "get_total_amount",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "allow_negative": []
            }
        },
        "CalculationAmount.get_total_amounts_by_intended_uses": {
            "name": "get_total_amounts_by_intended_uses",
            "location": 63,
            "return": [
                "Union[(dict, _T0)]"
            ],
            "arguments": {
                "self": [],
                "totals": [
                    "_T0@@"
                ]
            }
        },
        "CalculationAmount.get_all_amounts": {
            "name": "get_all_amounts",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationAmount.get_explanation": {
            "name": "get_explanation",
            "location": 84,
            "return": [
                "leasing.calculation.explanation.ExplanationItem"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationResult.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "CalculationResult.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationResult.add_amount": {
            "name": "add_amount",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "CalculationResult.get_total_amount": {
            "name": "get_total_amount",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationResult.combine": {
            "name": "combine",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calculation_result": []
            }
        },
        "CalculationResult.get_total_amounts_by_intended_uses": {
            "name": "get_total_amounts_by_intended_uses",
            "location": 143,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationResult.get_all_amounts": {
            "name": "get_all_amounts",
            "location": 150,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculationResult.get_explanation": {
            "name": "get_explanation",
            "location": 157,
            "return": [
                "leasing.calculation.explanation.Explanation"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedInitialYearRentCalculationResult.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "FixedInitialYearRentCalculationResult.is_range_fully_applied": {
            "name": "is_range_fully_applied",
            "location": 179,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/calculation/__init__.py": {},
    "mvj-master/leasing/importer/area.py": {
        "AreaImporter.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "AreaImporter.add_arguments": {
            "name": "add_arguments",
            "location": 246,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "AreaImporter.read_options": {
            "name": "read_options",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "AreaImporter.execute": {
            "name": "execute",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/base.py": {
        "BaseImporter.add_arguments": {
            "name": "add_arguments",
            "location": 3,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "BaseImporter.read_options": {
            "name": "read_options",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "options": []
            }
        }
    },
    "mvj-master/leasing/importer/basis_of_rent.py": {
        "BasisOfRentImporter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "BasisOfRentImporter.add_arguments": {
            "name": "add_arguments",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "BasisOfRentImporter.read_options": {
            "name": "read_options",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "BasisOfRentImporter.execute": {
            "name": "execute",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/invoice_relations.py": {
        "InvoiceRelationsImporter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "InvoiceRelationsImporter.add_arguments": {
            "name": "add_arguments",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "InvoiceRelationsImporter.read_options": {
            "name": "read_options",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "InvoiceRelationsImporter.execute": {
            "name": "execute",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceRelationsImporter.update_credit_notes": {
            "name": "update_credit_notes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceRelationsImporter.update_interest_invoices": {
            "name": "update_interest_invoices",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/lease.py": {
        "LeaseImporter.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "LeaseImporter.add_arguments": {
            "name": "add_arguments",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "LeaseImporter.read_options": {
            "name": "read_options",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "LeaseImporter.execute": {
            "name": "execute",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseImporter.get_or_create_default_lessor": {
            "name": "get_or_create_default_lessor",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseImporter.import_leases": {
            "name": "import_leases",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/lease_area.py": {
        "LeaseAreaImporter.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "LeaseAreaImporter.add_arguments": {
            "name": "add_arguments",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "LeaseAreaImporter.read_options": {
            "name": "read_options",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "LeaseAreaImporter.execute": {
            "name": "execute",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/lease_relations.py": {
        "LeaseRelationsImporter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "LeaseRelationsImporter.add_arguments": {
            "name": "add_arguments",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "parser": []
            }
        },
        "LeaseRelationsImporter.read_options": {
            "name": "read_options",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "LeaseRelationsImporter.execute": {
            "name": "execute",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/importer/mappings.py": {},
    "mvj-master/leasing/importer/utils.py": {
        "expand_lease_identifier": {
            "name": "expand_lease_identifier",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "id": []
            }
        },
        "expanded_id_to_query": {
            "name": "expanded_id_to_query",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "expanded_id": [],
                "where": []
            }
        },
        "expanded_id_to_query_alku": {
            "name": "expanded_id_to_query_alku",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "expanded_id": [],
                "where": []
            }
        },
        "rows_to_dict_list": {
            "name": "rows_to_dict_list",
            "location": 53,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cursor": []
            }
        },
        "get_real_property_identifier": {
            "name": "get_real_property_identifier",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "get_unknown_contact": {
            "name": "get_unknown_contact",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_or_create_contact": {
            "name": "get_or_create_contact",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        },
        "get_import_user": {
            "name": "get_import_user",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "mvj-master/leasing/importer/__init__.py": {},
    "mvj-master/leasing/management/__init__.py": {},
    "mvj-master/leasing/management/commands/add_default_collection_letter_templates.py": {
        "IsReadableDirectory.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.check_is_directory_writable": {
            "name": "check_is_directory_writable",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/attach_areas.py": {
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/compare_rent_amounts.py": {
        "Command.handle": {
            "name": "handle",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/create_invoices.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/create_test_user_groups.py": {
        "Command.handle": {
            "name": "handle",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/import_collateral_excel_file.py": {
        "get_date_from_value": {
            "name": "get_date_from_value",
            "location": 22,
            "return": [],
            "arguments": {
                "date_value": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/import_index.py": {
        "get_values_from_row": {
            "name": "get_values_from_row",
            "location": 36,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 55,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/import_interest_rate.py": {
        "Command.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/import_leasehold_transfers.py": {
        "get_import_dir": {
            "name": "get_import_dir",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "get_name_from_xml_elem": {
            "name": "get_name_from_xml_elem",
            "location": 38,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "get_business_id_or_none_from_xml_elem": {
            "name": "get_business_id_or_none_from_xml_elem",
            "location": 60,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "get_national_id_or_none_from_xml_elem": {
            "name": "get_national_id_or_none_from_xml_elem",
            "location": 73,
            "return": [],
            "arguments": {
                "elem": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command._auth_get": {
            "name": "_auth_get",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Command._check_import_directory": {
            "name": "_check_import_directory",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command._handle_xml_file": {
            "name": "_handle_xml_file",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "xml_file": []
            }
        },
        "Command._handle_lease_properties": {
            "name": "_handle_lease_properties",
            "location": 225,
            "return": [],
            "arguments": {
                "transfer": [],
                "entry_xml": []
            }
        },
        "Command._handle_lease_parties": {
            "name": "_handle_lease_parties",
            "location": 238,
            "return": [],
            "arguments": {
                "transfer": [],
                "entry_xml": [],
                "transfer_shares_xml": []
            }
        }
    },
    "mvj-master/leasing/management/commands/index_rent_equalization.py": {
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/mvj_import.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": [],
                "no_color": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/payable_rent_calculation.py": {
        "Command.handle": {
            "name": "handle",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/set_ad_group_mappings.py": {
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/set_contact_cities_from_postcodes.py": {
        "read_post_codes": {
            "name": "read_post_codes",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "file": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/set_group_field_permissions.py": {
        "update": {
            "name": "update",
            "location": 537,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "d": [
                    "_T0@@"
                ],
                "u": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/set_group_model_permissions.py": {
        "Command.handle": {
            "name": "handle",
            "location": 1063,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/set_report_permissions.py": {
        "Command.handle": {
            "name": "handle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/update_detailed_plans.py": {
        "Command.handle": {
            "name": "handle",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/management/commands/__init__.py": {},
    "mvj-master/leasing/migrations/0001_initial.py": {},
    "mvj-master/leasing/migrations/0002_add_is_active_to_receivable_type.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0003_auto_20200213_1558.py": {},
    "mvj-master/leasing/migrations/0004_change_area_unit_as_required_to_leasebasisofrent.py": {},
    "mvj-master/leasing/migrations/0005_change_zone_as_enumfield_in_leasebasisofrent.py": {},
    "mvj-master/leasing/migrations/0006_increase_max_length_of_areatype_enumfield.py": {},
    "mvj-master/leasing/migrations/0007_add_business_id_validator.py": {},
    "mvj-master/leasing/migrations/0008_land_use_agreement.py": {},
    "mvj-master/leasing/migrations/0009_fix_land_use_agreement.py": {},
    "mvj-master/leasing/migrations/0010_add_plot_search_base.py": {},
    "mvj-master/leasing/migrations/0011_landuseagreementinvoice.py": {},
    "mvj-master/leasing/migrations/0012_fix_plot_search_stage.py": {},
    "mvj-master/leasing/migrations/0013_reform_area.py": {},
    "mvj-master/leasing/migrations/0014_add_lease_identifier_field.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 8,
            "return": [],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "reverse_func": {
            "name": "reverse_func",
            "location": 13,
            "return": [],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0015_planunit_plan_unit_status.py": {},
    "mvj-master/leasing/migrations/0016_land_use_agreement_add_fields.py": {},
    "mvj-master/leasing/migrations/0017_add_plot_search_target.py": {},
    "mvj-master/leasing/migrations/0018_transform_plan_unit_pending.py": {},
    "mvj-master/leasing/migrations/0019_planunittargets_unique_planunit.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "reverse_func": {
            "name": "reverse_func",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0020_add_master_field_to_land.py": {},
    "mvj-master/leasing/migrations/0021_reform_plot_search_types.py": {},
    "mvj-master/leasing/migrations/0022_require_plot_search_target_type.py": {},
    "mvj-master/leasing/migrations/0023_remove_area_deleted.py": {},
    "mvj-master/leasing/migrations/0024_landuseagreement_litigantcontact_as_m2m.py": {},
    "mvj-master/leasing/migrations/0025_landuseagreement_improvements.py": {},
    "mvj-master/leasing/migrations/0026_land_use_agreement_estate_remove_unique.py": {},
    "mvj-master/leasing/migrations/0027_change_rent_base_fields_required.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0028_modify_land_use_agreement_type.py": {},
    "mvj-master/leasing/migrations/0029_refactor_master_land_item.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0030_landuseagreement_plots.py": {},
    "mvj-master/leasing/migrations/0031_landuseagreementattachment.py": {},
    "mvj-master/leasing/migrations/0032_landuseagreement_refactor_fields.py": {},
    "mvj-master/leasing/migrations/0033_landuseagreementinvoice_credited_invoice.py": {},
    "mvj-master/leasing/migrations/0034_remove_char_null_landuseagreement.py": {},
    "mvj-master/leasing/migrations/0035_modify_landuseagreementcompensations.py": {},
    "mvj-master/leasing/migrations/0036_landuseagreementcompensationsunitprice.py": {},
    "mvj-master/leasing/migrations/0037_landuseagreementinvoice_interest_invoice_for.py": {},
    "mvj-master/leasing/migrations/0038_add_invoiceset_landuseagreement.py": {},
    "mvj-master/leasing/migrations/0039_landuseagreementinvoice_postpone_date.py": {},
    "mvj-master/leasing/migrations/0040_landuseagreementinvoice_notes.py": {},
    "mvj-master/leasing/migrations/0041_landuseagreementidentifier_identifier.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 6,
            "return": [],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "mvj-master/leasing/migrations/0042_change_definition_null_landuseagreement.py": {},
    "mvj-master/leasing/migrations/0043_change_management_selectable_landuseagreement.py": {},
    "mvj-master/leasing/migrations/0044_detailedplan.py": {},
    "mvj-master/leasing/migrations/0045_move_plotsearch_to_plotsearch_app.py": {},
    "mvj-master/leasing/migrations/0046_add_payable_rent_to_rent.py": {},
    "mvj-master/leasing/migrations/0047_update_paikkatietovipunen_vuokraalueet_view.py": {
        "RunSQLFromFile.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql_file": [],
                "reverse_sql_file": []
            }
        },
        "RunSQLFromFile.sql": {
            "name": "sql",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RunSQLFromFile.reverse_sql": {
            "name": "reverse_sql",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RunSQLFromFile._read_file": {
            "name": "_read_file",
            "location": 34,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        }
    },
    "mvj-master/leasing/migrations/__init__.py": {},
    "mvj-master/leasing/models/area.py": {
        "Area.get_land_identifier": {
            "name": "get_land_identifier",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Area.get_normalized_identifier": {
            "name": "get_normalized_identifier",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Area.get_denormalized_identifier": {
            "name": "get_denormalized_identifier",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/area_note.py": {},
    "mvj-master/leasing/models/basis_of_rent.py": {},
    "mvj-master/leasing/models/comment.py": {},
    "mvj-master/leasing/models/contact.py": {
        "Contact.__str__": {
            "name": "__str__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contact.get_name": {
            "name": "get_name",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contact.get_name_and_identifier": {
            "name": "get_name_and_identifier",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/contract.py": {},
    "mvj-master/leasing/models/debt_collection.py": {
        "get_collection_letter_file_upload_to": {
            "name": "get_collection_letter_file_upload_to",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "get_collection_court_decision_file_upload_to": {
            "name": "get_collection_court_decision_file_upload_to",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "CollectionLetterTemplate.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionLetterTemplate.render_document": {
            "name": "render_document",
            "location": 77,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "InterestRate.__str__": {
            "name": "__str__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/decision.py": {},
    "mvj-master/leasing/models/detailed_plan.py": {
        "DetailedPlan.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/email.py": {},
    "mvj-master/leasing/models/infill_development_compensation.py": {
        "get_attachment_file_upload_to": {
            "name": "get_attachment_file_upload_to",
            "location": 277,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "InfillDevelopmentCompensation.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/inspection.py": {
        "get_inspection_attachment_file_upload_to": {
            "name": "get_inspection_attachment_file_upload_to",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "instance": [],
                "filename": []
            }
        }
    },
    "mvj-master/leasing/models/invoice.py": {
        "ReceivableType.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSet.create_credit_invoiceset": {
            "name": "create_credit_invoiceset",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "receivable_type": [],
                "notes": []
            }
        },
        "InvoiceSet.create_credit_invoiceset_for_amount": {
            "name": "create_credit_invoiceset_for_amount",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "receivable_type": [],
                "notes": []
            }
        },
        "Invoice.__str__": {
            "name": "__str__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invoice.delete": {
            "name": "delete",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "force_policy": []
            }
        },
        "Invoice.update_amounts": {
            "name": "update_amounts",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invoice.create_credit_invoice": {
            "name": "create_credit_invoice",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "row_ids": [],
                "amount": [],
                "receivable_type": [],
                "notes": []
            }
        },
        "Invoice.get_fraction_for_receivable_type": {
            "name": "get_fraction_for_receivable_type",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "receivable_type": []
            }
        },
        "Invoice.calculate_penalty_interest": {
            "name": "calculate_penalty_interest",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "calculation_date": []
            }
        },
        "Invoice.is_same_recipient_and_tenants": {
            "name": "is_same_recipient_and_tenants",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "invoice": []
            }
        },
        "Invoice.generate_number": {
            "name": "generate_number",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BankHoliday.__str__": {
            "name": "__str__",
            "location": 800,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/land_area.py": {
        "get_attachment_file_upload_to": {
            "name": "get_attachment_file_upload_to",
            "location": 318,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "MasterLandItemMixin.get_tracker": {
            "name": "get_tracker",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MasterLandItemMixin.save": {
            "name": "save",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MasterLandItemMixin.get_master": {
            "name": "get_master",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MasterLandItemMixin.master_exists": {
            "name": "master_exists",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MasterLandItemMixin.is_master_newer": {
            "name": "is_master_newer",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Land.get_normalized_identifier": {
            "name": "get_normalized_identifier",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseArea.__str__": {
            "name": "__str__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlanUnitState.to_enum": {
            "name": "to_enum",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/land_use_agreement.py": {
        "get_attachment_file_upload_to": {
            "name": "get_attachment_file_upload_to",
            "location": 312,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "LandUseAgreementIdentifier.save": {
            "name": "save",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementIdentifier.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreement.__str__": {
            "name": "__str__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreement.create_identifier": {
            "name": "create_identifier",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreement.update_compensations": {
            "name": "update_compensations",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "compensations_data": []
            }
        },
        "LandUseAgreement.update_compensations_unit_prices": {
            "name": "update_compensations_unit_prices",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "unit_price_data": []
            }
        },
        "LandUseAgreement.save": {
            "name": "save",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementLitigantContact.__str__": {
            "name": "__str__",
            "location": 793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementReceivableType.__str__": {
            "name": "__str__",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSet.create_credit_invoiceset": {
            "name": "create_credit_invoiceset",
            "location": 835,
            "return": [],
            "arguments": {
                "self": [],
                "receivable_type": [],
                "notes": []
            }
        },
        "LandUseAgreementInvoiceSet.create_credit_invoiceset_for_amount": {
            "name": "create_credit_invoiceset_for_amount",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "receivable_type": [],
                "notes": []
            }
        },
        "LandUseAgreementInvoice.generate_number": {
            "name": "generate_number",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoice.update_amounts": {
            "name": "update_amounts",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceRow.update_amount": {
            "name": "update_amount",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/lease.py": {
        "LeaseType.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Municipality.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "District.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseIdentifier.save": {
            "name": "save",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseIdentifier.__str__": {
            "name": "__str__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseManager.full_select_related_and_prefetch_related": {
            "name": "full_select_related_and_prefetch_related",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseManager.succinct_select_related_and_prefetch_related": {
            "name": "succinct_select_related_and_prefetch_related",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseManager.get_by_identifier": {
            "name": "get_by_identifier",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Lease.__str__": {
            "name": "__str__",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lease.get_identifier_string": {
            "name": "get_identifier_string",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lease.create_identifier": {
            "name": "create_identifier",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lease.save": {
            "name": "save",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lease.get_due_dates_for_period": {
            "name": "get_due_dates_for_period",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Lease.get_tenant_shares_for_period": {
            "name": "get_tenant_shares_for_period",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "period_start_date": [],
                "period_end_date": []
            }
        },
        "Lease.get_lease_info_text": {
            "name": "get_lease_info_text",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "tenants": []
            }
        },
        "Lease.get_active_rents_on_period": {
            "name": "get_active_rents_on_period",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "Lease.get_all_billing_periods_for_year": {
            "name": "get_all_billing_periods_for_year",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "year": []
            }
        },
        "Lease.is_the_last_billing_period": {
            "name": "is_the_last_billing_period",
            "location": 845,
            "return": [],
            "arguments": {
                "self": [],
                "billing_period": []
            }
        },
        "Lease.calculate_rent_amount_for_period": {
            "name": "calculate_rent_amount_for_period",
            "location": 853,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Lease.calculate_rent_amount_for_year": {
            "name": "calculate_rent_amount_for_year",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "year": []
            }
        },
        "Lease.determine_payable_rents_and_periods": {
            "name": "determine_payable_rents_and_periods",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": [],
                "dry_run": [],
                "ignore_invoicing_date_after": []
            }
        },
        "Lease.calculate_invoices": {
            "name": "calculate_invoices",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "period_rents": []
            }
        },
        "Lease._year_rent_rounding_correction": {
            "name": "_year_rent_rounding_correction",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": [],
                "last_billing_period": [],
                "invoice_data": []
            }
        },
        "Lease.generate_first_invoices": {
            "name": "generate_first_invoices",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": [],
                "end_date": []
            }
        },
        "Lease.set_is_invoicing_enabled": {
            "name": "set_is_invoicing_enabled",
            "location": 1370,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lease.set_is_rent_info_complete": {
            "name": "set_is_rent_info_complete",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lease.is_empty": {
            "name": "is_empty",
            "location": 1392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lease._year_rent_rounding_correction.BogusItem.__init__": {
            "name": "__init__",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": []
            }
        }
    },
    "mvj-master/leasing/models/leasehold_transfer.py": {
        "LeaseholdTransferImportLog.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaseholdTransfer.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaseholdTransferProperty.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaseholdTransferParty.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/mixins.py": {
        "NameModel.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchivableModel.is_archived": {
            "name": "is_archived",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/rent.py": {
        "Rent.calculate_payable_rent": {
            "name": "calculate_payable_rent",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rent.is_seasonal": {
            "name": "is_seasonal",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rent.get_intended_uses_for_date_range": {
            "name": "get_intended_uses_for_date_range",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "Rent.clamp_date_range": {
            "name": "clamp_date_range",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "Rent.get_rent_adjustment_amount": {
            "name": "get_rent_adjustment_amount",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": [],
                "amount": [],
                "period": [],
                "dry_run": []
            }
        },
        "Rent.fixed_initial_year_rent_amount_for_date_range": {
            "name": "fixed_initial_year_rent_amount_for_date_range",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": [],
                "date_range_start": [],
                "date_range_end": [],
                "dry_run": []
            }
        },
        "Rent.contract_rent_amount_for_date_range": {
            "name": "contract_rent_amount_for_date_range",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": [],
                "date_range_start": [],
                "date_range_end": [],
                "dry_run": []
            }
        },
        "Rent.get_amount_for_date_range": {
            "name": "get_amount_for_date_range",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": [],
                "explain": [],
                "dry_run": []
            }
        },
        "Rent.get_applicable_adjustments": {
            "name": "get_applicable_adjustments",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "Rent.get_custom_due_dates_as_daymonths": {
            "name": "get_custom_due_dates_as_daymonths",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rent.get_due_dates_as_daymonths": {
            "name": "get_due_dates_as_daymonths",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rent.get_due_dates_for_period": {
            "name": "get_due_dates_for_period",
            "location": 662,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Rent.get_billing_period_from_due_date": {
            "name": "get_billing_period_from_due_date",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "due_date": []
            }
        },
        "Rent.get_all_billing_periods_for_year": {
            "name": "get_all_billing_periods_for_year",
            "location": 727,
            "return": [],
            "arguments": {
                "self": [],
                "year": []
            }
        },
        "Rent.is_the_last_billing_period": {
            "name": "is_the_last_billing_period",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "billing_period": []
            }
        },
        "Rent.split_range_by_cycle": {
            "name": "split_range_by_cycle",
            "location": 745,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "Rent.split_ranges_by_cycle": {
            "name": "split_ranges_by_cycle",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "ranges": []
            }
        },
        "Rent.get_rent_year_for_date": {
            "name": "get_rent_year_for_date",
            "location": 783,
            "return": [],
            "arguments": {
                "self": [],
                "the_date": []
            }
        },
        "Rent.get_index_for_date": {
            "name": "get_index_for_date",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "the_date": []
            }
        },
        "Rent.is_correct_index_for_date": {
            "name": "is_correct_index_for_date",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "the_date": []
            }
        },
        "Rent.is_active_on_period": {
            "name": "is_active_on_period",
            "location": 803,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "RentDueDate.as_daymonth": {
            "name": "as_daymonth",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedInitialYearRent.date_range": {
            "name": "date_range",
            "location": 878,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedInitialYearRent.get_amount_for_date_range": {
            "name": "get_amount_for_date_range",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "ContractRent.date_range": {
            "name": "date_range",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractRent._get_amount_for_date_range": {
            "name": "_get_amount_for_date_range",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": [],
                "amount_type": []
            }
        },
        "ContractRent.get_amount_for_date_range": {
            "name": "get_amount_for_date_range",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "ContractRent.get_base_amount_for_date_range": {
            "name": "get_base_amount_for_date_range",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "date_range_start": [],
                "date_range_end": []
            }
        },
        "RentAdjustment.date_range": {
            "name": "date_range",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RentAdjustment.get_amount_for_date_range": {
            "name": "get_amount_for_date_range",
            "location": 1159,
            "return": [],
            "arguments": {
                "self": [],
                "rent_amount": [],
                "date_range_start": [],
                "date_range_end": [],
                "update_amount_total": []
            }
        },
        "IndexManager.get_latest_for_date": {
            "name": "get_latest_for_date",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "the_date": []
            }
        },
        "IndexManager.get_latest_for_year": {
            "name": "get_latest_for_year",
            "location": 1386,
            "return": [],
            "arguments": {
                "self": [],
                "year": []
            }
        },
        "Index.__str__": {
            "name": "__str__",
            "location": 1424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseBasisOfRent.delete": {
            "name": "delete",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/tenant.py": {
        "Tenant.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tenant.get_tenantcontacts_for_period": {
            "name": "get_tenantcontacts_for_period",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "contact_type": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Tenant.get_tenant_tenantcontacts": {
            "name": "get_tenant_tenantcontacts",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Tenant.get_billing_tenantcontacts": {
            "name": "get_billing_tenantcontacts",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "Tenant.get_rent_share_by_intended_use": {
            "name": "get_rent_share_by_intended_use",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "intended_use": []
            }
        },
        "TenantContact.__str__": {
            "name": "__str__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TenantContact.date_range": {
            "name": "date_range",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/ui_data.py": {},
    "mvj-master/leasing/models/utils.py": {
        "get_range_overlap": {
            "name": "get_range_overlap",
            "location": 14,
            "return": [],
            "arguments": {
                "start1": [],
                "end1": [],
                "start2": [],
                "end2": []
            }
        },
        "get_range_overlap_and_remainder": {
            "name": "get_range_overlap_and_remainder",
            "location": 21,
            "return": [],
            "arguments": {
                "start1": [],
                "end1": [],
                "start2": [],
                "end2": []
            }
        },
        "get_last_date_of_month": {
            "name": "get_last_date_of_month",
            "location": 47,
            "return": [],
            "arguments": {
                "year": [],
                "month": []
            }
        },
        "get_spanned_months": {
            "name": "get_spanned_months",
            "location": 51,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": []
            }
        },
        "get_date_range_amount_from_monthly_amount": {
            "name": "get_date_range_amount_from_monthly_amount",
            "location": 61,
            "return": [],
            "arguments": {
                "monthly_amount": [],
                "date_range_start": [],
                "date_range_end": [],
                "real_month_lengths": []
            }
        },
        "fix_amount_for_overlap": {
            "name": "fix_amount_for_overlap",
            "location": 92,
            "return": [],
            "arguments": {
                "amount": [],
                "overlap": [],
                "remainders": []
            }
        },
        "get_billing_periods_for_year": {
            "name": "get_billing_periods_for_year",
            "location": 124,
            "return": [],
            "arguments": {
                "year": [],
                "periods_per_year": []
            }
        },
        "combine_ranges": {
            "name": "combine_ranges",
            "location": 140,
            "return": [],
            "arguments": {
                "ranges": []
            }
        },
        "normalize_identifier": {
            "name": "normalize_identifier",
            "location": 179,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "denormalize_identifier": {
            "name": "denormalize_identifier",
            "location": 198,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "subtract_range_from_range": {
            "name": "subtract_range_from_range",
            "location": 210,
            "return": [],
            "arguments": {
                "the_range": [],
                "subtract_range": []
            }
        },
        "subtract_ranges_from_ranges": {
            "name": "subtract_ranges_from_ranges",
            "location": 229,
            "return": [],
            "arguments": {
                "ranges": [],
                "subtract_ranges": []
            }
        },
        "split_date_range": {
            "name": "split_date_range",
            "location": 252,
            "return": [],
            "arguments": {
                "date_range": [],
                "count": []
            }
        },
        "_get_date_range_from_item": {
            "name": "_get_date_range_from_item",
            "location": 296,
            "return": [],
            "arguments": {
                "item": [],
                "fill_min_max_values": []
            }
        },
        "group_items_in_period_by_date_range": {
            "name": "group_items_in_period_by_date_range",
            "location": 314,
            "return": [],
            "arguments": {
                "items": [],
                "min_date": [],
                "max_date": []
            }
        },
        "get_monthly_amount_by_period_type": {
            "name": "get_monthly_amount_by_period_type",
            "location": 360,
            "return": [],
            "arguments": {
                "amount": [],
                "period_type": []
            }
        },
        "is_business_day": {
            "name": "is_business_day",
            "location": 371,
            "return": [],
            "arguments": {
                "the_date": []
            }
        },
        "get_next_business_day": {
            "name": "get_next_business_day",
            "location": 388,
            "return": [],
            "arguments": {
                "the_date": []
            }
        },
        "is_date_on_first_quarter": {
            "name": "is_date_on_first_quarter",
            "location": 400,
            "return": [],
            "arguments": {
                "the_date": []
            }
        },
        "recursive_get_related": {
            "name": "recursive_get_related",
            "location": 437,
            "return": [],
            "arguments": {
                "obj": [],
                "user": [],
                "parent_objs": [],
                "acc": []
            }
        },
        "normalize_property_identifier": {
            "name": "normalize_property_identifier",
            "location": 521,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "is_instance_empty": {
            "name": "is_instance_empty",
            "location": 549,
            "return": [],
            "arguments": {
                "instance": [],
                "skip_fields": []
            }
        },
        "DayMonth.from_date": {
            "name": "from_date",
            "location": 412,
            "return": [],
            "arguments": {
                "cls": [],
                "date_instance": []
            }
        },
        "DayMonth.from_datetime": {
            "name": "from_datetime",
            "location": 419,
            "return": [],
            "arguments": {
                "cls": [],
                "datetime_instance": []
            }
        },
        "DayMonth.asdict": {
            "name": "asdict",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/vat.py": {
        "VatManager.get_for_date": {
            "name": "get_for_date",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "the_date": []
            }
        },
        "Vat.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vat.clean": {
            "name": "clean",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/models/__init__.py": {},
    "mvj-master/leasing/report/excel.py": {
        "ExcelRow.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cells": []
            }
        },
        "ExcelCell.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [],
                "value": [],
                "format_type": []
            }
        },
        "ExcelCell.get_value": {
            "name": "get_value",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelCell.get_format_type": {
            "name": "get_format_type",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelCell.set_row": {
            "name": "set_row",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row_num": []
            }
        },
        "ExcelCell.set_first_data_row_num": {
            "name": "set_first_data_row_num",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row_num": []
            }
        },
        "PreviousRowsSumCell.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [],
                "count": [],
                "format_type": []
            }
        },
        "PreviousRowsSumCell.get_value": {
            "name": "get_value",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumCell.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column": [],
                "format_type": [],
                "target_ranges": []
            }
        },
        "SumCell.add_target_range": {
            "name": "add_target_range",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "range": []
            }
        },
        "SumCell.get_value": {
            "name": "get_value",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/report/forms.py": {
        "ReportFormBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/report/renderers.py": {
        "XLSXRenderer.render": {
            "name": "render",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "media_type": [],
                "renderer_context": []
            }
        }
    },
    "mvj-master/leasing/report/report_base.py": {
        "ReportBase.get_output_fields_metadata": {
            "name": "get_output_fields_metadata",
            "location": 75,
            "return": [
                "Dict[(nothing, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ReportBase.get_form": {
            "name": "get_form",
            "location": 86,
            "return": [
                "leasing.report.forms.ReportFormBase"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ReportBase.get_input_data": {
            "name": "get_input_data",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ReportBase.serialize_data": {
            "name": "serialize_data",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "report_data": []
            }
        },
        "ReportBase.get_response": {
            "name": "get_response",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ReportBase.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 124,
            "return": [
                "Type[leasing.report.serializers.ReportOutputSerializer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportBase.get_filename": {
            "name": "get_filename",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "ReportBase.get_output_field_attr": {
            "name": "get_output_field_attr",
            "location": 134,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "self": [],
                "field_name": [],
                "attr_name": [],
                "default": [
                    "_T2@@"
                ]
            }
        },
        "ReportBase.data_as_excel": {
            "name": "data_as_excel",
            "location": 145,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AsyncReportBase.get_output_fields_metadata": {
            "name": "get_output_fields_metadata",
            "location": 287,
            "return": [
                "Dict[(str, Dict[(str, Any)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AsyncReportBase.generate_report": {
            "name": "generate_report",
            "location": 290,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "input_data": []
            }
        },
        "AsyncReportBase.send_report": {
            "name": "send_report",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "AsyncReportBase.get_response": {
            "name": "get_response",
            "location": 314,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/serializers.py": {
        "ReportOutputSerializer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportOutputSerializer.update": {
            "name": "update",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "ReportOutputSerializer.create": {
            "name": "create",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "ReportOutputSerializer.get_fields": {
            "name": "get_fields",
            "location": 24,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/report/viewset.py": {
        "ReportViewSet.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportViewSet.list": {
            "name": "list",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "ReportViewSet.retrieve": {
            "name": "retrieve",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "report_type": [],
                "format": []
            }
        },
        "ReportViewSet.finalize_response": {
            "name": "finalize_response",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        },
        "ReportViewSet.options": {
            "name": "options",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/__init__.py": {},
    "mvj-master/leasing/report/invoice/collaterals_report.py": {
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 8,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "CollateralsReport.get_data": {
            "name": "get_data",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/invoices_in_period.py": {
        "get_lease_type": {
            "name": "get_lease_type",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 17,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_recipient_name": {
            "name": "get_recipient_name",
            "location": 21,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_recipient_address": {
            "name": "get_recipient_address",
            "location": 25,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "InvoicesInPeriodReport.get_data": {
            "name": "get_data",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "InvoicesInPeriodReport.get_response": {
            "name": "get_response",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/invoice_payments.py": {
        "get_invoice_number": {
            "name": "get_invoice_number",
            "location": 11,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "InvoicePaymentsReport.get_data": {
            "name": "get_data",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "InvoicePaymentsReport.get_response": {
            "name": "get_response",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/laske_invoice_count_report.py": {
        "LaskeInvoiceCountReport.get_data": {
            "name": "get_data",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/open_invoices_report.py": {
        "get_lease_type": {
            "name": "get_lease_type",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 19,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_recipient_name": {
            "name": "get_recipient_name",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_recipient_address": {
            "name": "get_recipient_address",
            "location": 27,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "OpenInvoicesReport.get_data": {
            "name": "get_data",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "OpenInvoicesReport.get_response": {
            "name": "get_response",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/rents_paid_by_contact.py": {
        "RentsPaidByContactReport.get_data": {
            "name": "get_data",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/invoice/__init__.py": {},
    "mvj-master/leasing/report/lease/decision_conditions_report.py": {
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 8,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_condition_type": {
            "name": "get_condition_type",
            "location": 12,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_area": {
            "name": "get_area",
            "location": 16,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_address": {
            "name": "get_address",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "DecisionConditionsReport.get_data": {
            "name": "get_data",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/extra_city_rent.py": {
        "get_recipient_address": {
            "name": "get_recipient_address",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_contract_number": {
            "name": "get_contract_number",
            "location": 31,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_area_identifier": {
            "name": "get_lease_area_identifier",
            "location": 42,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_address": {
            "name": "get_address",
            "location": 54,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_tenants": {
            "name": "get_tenants",
            "location": 70,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_total_area": {
            "name": "get_total_area",
            "location": 88,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "ExtraCityRentReport.get_data": {
            "name": "get_data",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "ExtraCityRentReport.get_response": {
            "name": "get_response",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/lease/index_adjusted_rents.py": {
        "IndexAdjustedRentChangeReport.get_data": {
            "name": "get_data",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/index_types.py": {
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 12,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_tenants": {
            "name": "get_tenants",
            "location": 16,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_area_id": {
            "name": "get_area_id",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_contract_number": {
            "name": "get_contract_number",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_area_address": {
            "name": "get_area_address",
            "location": 45,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_municipality": {
            "name": "get_municipality",
            "location": 57,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_start_date": {
            "name": "get_start_date",
            "location": 61,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_end_date": {
            "name": "get_end_date",
            "location": 65,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_intended_use": {
            "name": "get_intended_use",
            "location": 69,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_index_type": {
            "name": "get_index_type",
            "location": 74,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "IndexTypesReport.get_data": {
            "name": "get_data",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/invoicing_disabled_report.py": {
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 10,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "LeaseInvoicingDisabledReport.get_data": {
            "name": "get_data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/lease_count_report.py": {
        "LeaseCountReport.get_data": {
            "name": "get_data",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "LeaseCountReport.get_response": {
            "name": "get_response",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/report/lease/lease_statistic_report.py": {
        "get_type": {
            "name": "get_type",
            "location": 26,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 30,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_tenants": {
            "name": "get_tenants",
            "location": 34,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_address": {
            "name": "get_address",
            "location": 52,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_supportive_housing": {
            "name": "get_supportive_housing",
            "location": 68,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_notice_period": {
            "name": "get_notice_period",
            "location": 74,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_district": {
            "name": "get_district",
            "location": 80,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_preparer": {
            "name": "get_preparer",
            "location": 86,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_form_of_management": {
            "name": "get_form_of_management",
            "location": 92,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lessor": {
            "name": "get_lessor",
            "location": 98,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_form_of_regulation": {
            "name": "get_form_of_regulation",
            "location": 104,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_contract_number": {
            "name": "get_contract_number",
            "location": 110,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_matti_report": {
            "name": "get_matti_report",
            "location": 121,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_option_to_purchase": {
            "name": "get_option_to_purchase",
            "location": 133,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_lease_area_identifier": {
            "name": "get_lease_area_identifier",
            "location": 142,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_total_area": {
            "name": "get_total_area",
            "location": 154,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_re_lease": {
            "name": "get_re_lease",
            "location": 165,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_permitted_building_volume_residential": {
            "name": "get_permitted_building_volume_residential",
            "location": 172,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_permitted_building_volume_business": {
            "name": "get_permitted_building_volume_business",
            "location": 190,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_permitted_building_volume_total": {
            "name": "get_permitted_building_volume_total",
            "location": 208,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_get_rent_amount_for_year": {
            "name": "_get_rent_amount_for_year",
            "location": 224,
            "return": [],
            "arguments": {
                "obj": [],
                "year": []
            }
        },
        "get_rent_amount_residential": {
            "name": "get_rent_amount_residential",
            "location": 228,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_rent_amount_business": {
            "name": "get_rent_amount_business",
            "location": 242,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_total_rent_amount_for_year": {
            "name": "get_total_rent_amount_for_year",
            "location": 256,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_average_amount_per_area_residential": {
            "name": "get_average_amount_per_area_residential",
            "location": 261,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_average_amount_per_area_business": {
            "name": "get_average_amount_per_area_business",
            "location": 287,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "LeaseStatisticReport.get_data": {
            "name": "get_data",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        },
        "LeaseStatisticReport.generate_report": {
            "name": "generate_report",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/rent_forecast.py": {
        "RentForecastReport.get_data": {
            "name": "get_data",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/reservations.py": {
        "get_lease_id": {
            "name": "get_lease_id",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_area": {
            "name": "get_area",
            "location": 17,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_address": {
            "name": "get_address",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "get_reservation_procedure": {
            "name": "get_reservation_procedure",
            "location": 34,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "ReservationsReport.get_data": {
            "name": "get_data",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "input_data": []
            }
        }
    },
    "mvj-master/leasing/report/lease/__init__.py": {},
    "mvj-master/leasing/serializers/area_note.py": {},
    "mvj-master/leasing/serializers/auditlog.py": {
        "LogEntrySerializer.to_representation": {
            "name": "to_representation",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "mvj-master/leasing/serializers/basis_of_rent.py": {},
    "mvj-master/leasing/serializers/batchrun.py": {
        "ScheduledJobSerializer.get_next_run": {
            "name": "get_next_run",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "mvj-master/leasing/serializers/comment.py": {},
    "mvj-master/leasing/serializers/common.py": {},
    "mvj-master/leasing/serializers/contact.py": {},
    "mvj-master/leasing/serializers/contract.py": {},
    "mvj-master/leasing/serializers/debt_collection.py": {
        "CollectionCourtDecisionSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "CollectionLetterSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        }
    },
    "mvj-master/leasing/serializers/decision.py": {},
    "mvj-master/leasing/serializers/email.py": {},
    "mvj-master/leasing/serializers/explanation.py": {
        "RecursiveSerializer.to_representation": {
            "name": "to_representation",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SubjectSerializer.to_representation": {
            "name": "to_representation",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "DateRangeField.to_internal_value": {
            "name": "to_internal_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DateRangeField.to_representation": {
            "name": "to_representation",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "mvj-master/leasing/serializers/infill_development_compensation.py": {
        "InfillDevelopmentCompensationAttachmentSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        }
    },
    "mvj-master/leasing/serializers/inspection.py": {
        "InspectionAttachmentSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        }
    },
    "mvj-master/leasing/serializers/invoice.py": {
        "InvoiceNoteSerializer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        },
        "InvoiceNoteCreateUpdateSerializer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        },
        "InvoiceRowCreateUpdateSerializer.validate": {
            "name": "validate",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "InvoiceSerializerWithSuccinctLease.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        },
        "InvoiceCreateSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "InvoiceCreateSerializer.validate": {
            "name": "validate",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "InvoiceCreateSerializer.create": {
            "name": "create",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "InvoiceUpdateSerializer.update": {
            "name": "update",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "CreateChargeSerializer.__init__": {
            "name": "__init__",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        },
        "CreateChargeSerializer.to_representation": {
            "name": "to_representation",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "CreateChargeSerializer.validate": {
            "name": "validate",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CreateChargeSerializer.create": {
            "name": "create",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "mvj-master/leasing/serializers/land_area.py": {
        "PlanUnitSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "LeaseAreaAttachmentSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "FilterLeaseAreaPlotListSerializer.to_representation": {
            "name": "to_representation",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "mvj-master/leasing/serializers/land_use_agreement.py": {
        "LandUseAgreementAttachmentSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "LandUseAgreementUpdateSerializer.update": {
            "name": "update",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "LandUseAgreementInvoiceRowCreateUpdateSerializer.create": {
            "name": "create",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "LandUseAgreementInvoiceRowCreateUpdateSerializer.validate": {
            "name": "validate",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LandUseAgreementInvoiceCreateSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "LandUseAgreementInvoiceCreateSerializer.validate": {
            "name": "validate",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "LandUseAgreementInvoiceCreateSerializer.create": {
            "name": "create",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "LandUseAgreementInvoiceUpdateSerializer.update": {
            "name": "update",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "LandUseAgreementInvoiceSerializerWithSuccinctLease.__init__": {
            "name": "__init__",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "data": []
            }
        }
    },
    "mvj-master/leasing/serializers/lease.py": {
        "get_related_lease_predecessors": {
            "name": "get_related_lease_predecessors",
            "location": 297,
            "return": [],
            "arguments": {
                "to_lease_id": [],
                "accumulator": []
            }
        },
        "get_related_leases": {
            "name": "get_related_leases",
            "location": 325,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "RelatedLeaseSerializer.validate": {
            "name": "validate",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LeaseRetrieveSerializer.get_related_leases": {
            "name": "get_related_leases",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseRetrieveSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "LeaseRetrieveSerializer.get_infill_development_compensations": {
            "name": "get_infill_development_compensations",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseRetrieveSerializer.get_email_logs": {
            "name": "get_email_logs",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseRetrieveSerializer.get_area_notes": {
            "name": "get_area_notes",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseRetrieveSerializer.get_matching_basis_of_rents": {
            "name": "get_matching_basis_of_rents",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseUpdateSerializer.get_related_leases": {
            "name": "get_related_leases",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "LeaseCreateSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        }
    },
    "mvj-master/leasing/serializers/leasehold_transfer.py": {},
    "mvj-master/leasing/serializers/rent.py": {
        "FixedInitialYearRentSerializer.is_valid_end_date": {
            "name": "is_valid_end_date",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "rent": [],
                "end_date": []
            }
        },
        "FixedInitialYearRentSerializer.create": {
            "name": "create",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "FixedInitialYearRentSerializer.update": {
            "name": "update",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "ContractRentSerializer.to_internal_value": {
            "name": "to_internal_value",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RentAdjustmentCreateUpdateSerializer.validate": {
            "name": "validate",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RentSerializer.override_permission_check_field_name": {
            "name": "override_permission_check_field_name",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": []
            }
        },
        "RentCreateUpdateSerializer.validate": {
            "name": "validate",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LeaseBaseBasisOfRentCreateUpdateSerializer.validate": {
            "name": "validate",
            "location": 642,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LeaseSubBasisOfRentCreateUpdateSerializer.create": {
            "name": "create",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "LeaseSubBasisOfRentCreateUpdateSerializer.update": {
            "name": "update",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "LeaseSubBasisOfRentCreateUpdateSerializer.to_representation": {
            "name": "to_representation",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        }
    },
    "mvj-master/leasing/serializers/tenant.py": {},
    "mvj-master/leasing/serializers/ui_data.py": {},
    "mvj-master/leasing/serializers/utils.py": {
        "sync_new_items_to_manager": {
            "name": "sync_new_items_to_manager",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "new_items": [],
                "manager": [],
                "context": []
            }
        },
        "get_instance_from_default_manager": {
            "name": "get_instance_from_default_manager",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "pk": [],
                "model_class": []
            }
        },
        "serializer_data_differs": {
            "name": "serializer_data_differs",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "serializer": [],
                "original_serializer": []
            }
        },
        "check_perm": {
            "name": "check_perm",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "serializer": [],
                "instance": []
            }
        },
        "instance_create_or_update_related": {
            "name": "instance_create_or_update_related",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [],
                "related_name": [],
                "serializer_class": [],
                "validated_data": [],
                "context": []
            }
        },
        "InstanceDictPrimaryKeyRelatedField.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceDictPrimaryKeyRelatedField.to_representation": {
            "name": "to_representation",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "InstanceDictPrimaryKeyRelatedField.to_internal_value": {
            "name": "to_internal_value",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "InstanceDictPrimaryKeyRelatedField.get_choices": {
            "name": "get_choices",
            "location": 41,
            "return": [
                "Union[(collections.OrderedDict, Dict[(nothing, nothing)])]"
            ],
            "arguments": {
                "self": [],
                "cutoff": []
            }
        },
        "UpdateNestedMixin.extract_nested": {
            "name": "extract_nested",
            "location": 160,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "UpdateNestedMixin.save_nested": {
            "name": "save_nested",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "nested_data": [],
                "context": []
            }
        },
        "UpdateNestedMixin.create": {
            "name": "create",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "UpdateNestedMixin.update": {
            "name": "update",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "DayMonthField.to_internal_value": {
            "name": "to_internal_value",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DayMonthField.to_representation": {
            "name": "to_representation",
            "location": 215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "FileSerializerMixin.get_file_url": {
            "name": "get_file_url",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "FileSerializerMixin.get_file_filename": {
            "name": "get_file_filename",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "mvj-master/leasing/serializers/vat.py": {},
    "mvj-master/leasing/serializers/__init__.py": {},
    "mvj-master/leasing/tests/conftest.py": {
        "assert_count_equal": {
            "name": "assert_count_equal",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "django_db_setup": {
            "name": "django_db_setup",
            "location": 84,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "django_db_blocker": []
            }
        },
        "area_test_data": {
            "name": "area_test_data",
            "location": 346,
            "return": [],
            "arguments": {
                "area_factory": [],
                "area_source_factory": []
            }
        },
        "area_with_intersects_test_data": {
            "name": "area_with_intersects_test_data",
            "location": 378,
            "return": [],
            "arguments": {
                "area_test_data": [],
                "area_factory": []
            }
        },
        "invoices_test_data": {
            "name": "invoices_test_data",
            "location": 530,
            "return": [],
            "arguments": {
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "lease_data_dict_with_contacts": {
            "name": "lease_data_dict_with_contacts",
            "location": 605,
            "return": [],
            "arguments": {
                "contact_factory": []
            }
        },
        "land_use_agreement_test_data": {
            "name": "land_use_agreement_test_data",
            "location": 703,
            "return": [],
            "arguments": {
                "land_use_agreement_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": [],
                "land_use_agreement_type_factory": [],
                "land_use_agreement_status_factory": [],
                "land_use_agreement_definition_factory": [],
                "land_use_agreement_address_factory": [],
                "land_use_agreement_decision_factory": [],
                "land_use_agreement_litigant_factory": [],
                "land_use_agreement_litigant_contact_factory": [],
                "land_use_agreement_condition_factory": [],
                "land_use_agreement_condition_form_of_management_factory": [],
                "land_use_agreement_receivable_type_factory": [],
                "user_factory": [],
                "decision_maker_factory": [],
                "contract_factory": [],
                "municipality_factory": [],
                "district_factory": [],
                "contact_factory": []
            }
        },
        "assert_count_equal.do_test": {
            "name": "do_test",
            "location": 76,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "mvj-master/leasing/tests/test_forms.py": {
        "test_lease_search_form_no_fields_required": {
            "name": "test_lease_search_form_no_fields_required",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_lease_search_form_business_id": {
            "name": "test_lease_search_form_business_id",
            "location": 25,
            "return": [],
            "arguments": {
                "business_id": [],
                "expected": []
            }
        },
        "test_lease_search_form_tenantcontact_type_choices": {
            "name": "test_lease_search_form_tenantcontact_type_choices",
            "location": 62,
            "return": [],
            "arguments": {
                "tenantcontact_type": [],
                "expected": []
            }
        },
        "test_lease_search_form_lease_type_choices": {
            "name": "test_lease_search_form_lease_type_choices",
            "location": 73,
            "return": [],
            "arguments": {
                "lease_type": [],
                "expected": []
            }
        },
        "test_lease_search_form_lease_state_choices": {
            "name": "test_lease_search_form_lease_state_choices",
            "location": 95,
            "return": [],
            "arguments": {
                "lease_state": [],
                "expected": []
            }
        }
    },
    "mvj-master/leasing/tests/test_utils.py": {
        "test_days360_year": {
            "name": "test_days360_year",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_days360_leap_year": {
            "name": "test_days360_leap_year",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_increase_with_360_day_calendar": {
            "name": "test_calculate_increase_with_360_day_calendar",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/leasing/tests/test_validators.py": {
        "test_business_id_validator": {
            "name": "test_business_id_validator",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mvj-master/leasing/tests/__init__.py": {},
    "mvj-master/leasing/tests/api/test_create_charge.py": {
        "test_create_charge_one_tenant_one_row": {
            "name": "test_create_charge_one_tenant_one_row",
            "location": 11,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_charge_one_tenant_two_rows": {
            "name": "test_create_charge_one_tenant_two_rows",
            "location": 66,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_charge_three_tenants_one_row": {
            "name": "test_create_charge_three_tenants_one_row",
            "location": 123,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_charge_three_tenants_two_rows": {
            "name": "test_create_charge_three_tenants_two_rows",
            "location": 207,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_create_invoice.py": {
        "test_create_invoice": {
            "name": "test_create_invoice",
            "location": 15,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_invoice_before_tenant_contract_is_activated": {
            "name": "test_create_invoice_before_tenant_contract_is_activated",
            "location": 71,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_zero_sum_invoice_state_is_paid": {
            "name": "test_create_zero_sum_invoice_state_is_paid",
            "location": 128,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_invoice_for_tenant": {
            "name": "test_create_invoice_for_tenant",
            "location": 187,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_invoice_for_tenant_with_billing_contact": {
            "name": "test_create_invoice_for_tenant_with_billing_contact",
            "location": 244,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_invoice_tenant_not_in_lease": {
            "name": "test_create_invoice_tenant_not_in_lease",
            "location": 310,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_interest_invoice_fail": {
            "name": "test_create_interest_invoice_fail",
            "location": 381,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_create_lease.py": {
        "test_create_lease": {
            "name": "test_create_lease",
            "location": 12,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_data_dict_with_contacts": []
            }
        },
        "test_create_lease_relate_to_with_permission": {
            "name": "test_create_lease_relate_to_with_permission",
            "location": 45,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_create_lease_relate_to_without_permission": {
            "name": "test_create_lease_relate_to_without_permission",
            "location": 93,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_create_lease_with_basis_of_rents": {
            "name": "test_create_lease_with_basis_of_rents",
            "location": 137,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_data_dict_with_contacts": []
            }
        },
        "test_create_lease_with_basis_of_rents_fail_without_intended_use": {
            "name": "test_create_lease_with_basis_of_rents_fail_without_intended_use",
            "location": 153,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_data_dict_with_contacts": []
            }
        },
        "test_create_lease_with_basis_of_rents_fail_without_area": {
            "name": "test_create_lease_with_basis_of_rents_fail_without_area",
            "location": 169,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_data_dict_with_contacts": []
            }
        },
        "test_create_lease_with_basis_of_rents_fail_without_area_unit": {
            "name": "test_create_lease_with_basis_of_rents_fail_without_area_unit",
            "location": 185,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_data_dict_with_contacts": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_infill_development_compensation.py": {
        "test_upload_attachment": {
            "name": "test_upload_attachment",
            "location": 18,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_download_attachment": {
            "name": "test_download_attachment",
            "location": 49,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_invoice_credit.py": {
        "test_invoice_credit_rounding": {
            "name": "test_invoice_credit_rounding",
            "location": 16,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "tenant_factory": []
            }
        },
        "test_invoice_set_credit_rounding": {
            "name": "test_invoice_set_credit_rounding",
            "location": 76,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_land_use_agreement.py": {
        "test_list_land_use_agreements": {
            "name": "test_list_land_use_agreements",
            "location": 21,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_get_land_use_agreement": {
            "name": "test_get_land_use_agreement",
            "location": 32,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_update_land_use_agreement": {
            "name": "test_update_land_use_agreement",
            "location": 87,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "user_factory": []
            }
        },
        "test_create_land_use_agreement": {
            "name": "test_create_land_use_agreement",
            "location": 115,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "user_factory": []
            }
        },
        "test_create_land_use_agreement_w_two_addresses": {
            "name": "test_create_land_use_agreement_w_two_addresses",
            "location": 138,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "user_factory": []
            }
        },
        "test_land_use_agreement_retrieve_plots": {
            "name": "test_land_use_agreement_retrieve_plots",
            "location": 173,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "lease_factory": [],
                "lease_area_factory": [],
                "user_factory": [],
                "plot_factory": []
            }
        },
        "test_land_use_agreement_update_plots": {
            "name": "test_land_use_agreement_update_plots",
            "location": 213,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "lease_factory": [],
                "lease_area_factory": [],
                "user_factory": [],
                "plot_factory": []
            }
        },
        "test_update_land_use_agreement_compensations_without_existing_data": {
            "name": "test_update_land_use_agreement_compensations_without_existing_data",
            "location": 263,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "land_use_agreement_condition_form_of_management_factory": []
            }
        },
        "test_update_land_use_agreement_compensations": {
            "name": "test_update_land_use_agreement_compensations",
            "location": 323,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "land_use_agreement_compensations_factory": [],
                "land_use_agreement_compensations_unit_price_factory": [],
                "land_use_agreement_condition_form_of_management_factory": []
            }
        },
        "test_upload_attachment": {
            "name": "test_upload_attachment",
            "location": 419,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "user_factory": []
            }
        },
        "test_download_attachment": {
            "name": "test_download_attachment",
            "location": 447,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "client": [],
                "land_use_agreement_test_data": [],
                "user_factory": []
            }
        },
        "test_create_invoice": {
            "name": "test_create_invoice",
            "location": 506,
            "return": [],
            "arguments": {
                "contact_factory": [],
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_create_zero_sum_invoice_state_is_paid": {
            "name": "test_create_zero_sum_invoice_state_is_paid",
            "location": 548,
            "return": [],
            "arguments": {
                "contact_factory": [],
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_get_invoice_list": {
            "name": "test_get_invoice_list",
            "location": 592,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_get_invoice_detail": {
            "name": "test_get_invoice_detail",
            "location": 600,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": []
            }
        },
        "test_patch_invoice_change_one_row_amount": {
            "name": "test_patch_invoice_change_one_row_amount",
            "location": 609,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_other_row_amount": {
            "name": "test_patch_invoice_change_other_row_amount",
            "location": 672,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_two_row_amount": {
            "name": "test_patch_invoice_change_two_row_amount",
            "location": 749,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_with_invoiceset_change_row_amount": {
            "name": "test_patch_invoice_with_invoiceset_change_row_amount",
            "location": 826,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_set_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_delete_invoice_invoice_in_invoiceset": {
            "name": "test_delete_invoice_invoice_in_invoiceset",
            "location": 939,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_set_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_if_sent_to_sap": {
            "name": "test_patch_invoice_change_if_sent_to_sap",
            "location": 1029,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_credit_note_credited_invoice_outstanding_amount": {
            "name": "test_patch_credit_note_credited_invoice_outstanding_amount",
            "location": 1098,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_credit_note_dates_read_only": {
            "name": "test_patch_credit_note_dates_read_only",
            "location": 1177,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_add_payment": {
            "name": "test_patch_invoice_add_payment",
            "location": 1254,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_cannot_add_payment_if_sent_to_sap": {
            "name": "test_patch_invoice_cannot_add_payment_if_sent_to_sap",
            "location": 1306,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_existing_interest_row_success": {
            "name": "test_patch_invoice_existing_interest_row_success",
            "location": 1359,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_interest_row_fail": {
            "name": "test_patch_invoice_change_interest_row_fail",
            "location": 1429,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        },
        "test_patch_invoice_new_interest_row_fail": {
            "name": "test_patch_invoice_new_interest_row_fail",
            "location": 1482,
            "return": [],
            "arguments": {
                "admin_client": [],
                "land_use_agreement_test_data": [],
                "contact_factory": [],
                "land_use_agreement_invoice_factory": [],
                "land_use_agreement_invoice_row_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_lease_basis_of_rent_lock.py": {
        "test_lock_lease_basis_of_rent": {
            "name": "test_lock_lease_basis_of_rent",
            "location": 14,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "lease_basis_of_rent_factory": []
            }
        },
        "test_cannot_change_locked_lease_basis_of_rent": {
            "name": "test_cannot_change_locked_lease_basis_of_rent",
            "location": 71,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "lease_basis_of_rent_factory": []
            }
        },
        "test_cannot_unclock_locked_lease_basis_of_rent": {
            "name": "test_cannot_unclock_locked_lease_basis_of_rent",
            "location": 133,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "lease_basis_of_rent_factory": []
            }
        },
        "test_can_unclock_locked_lease_basis_of_rent": {
            "name": "test_can_unclock_locked_lease_basis_of_rent",
            "location": 194,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "lease_basis_of_rent_factory": []
            }
        },
        "test_cannot_remove_locked_lease_basis_of_rent": {
            "name": "test_cannot_remove_locked_lease_basis_of_rent",
            "location": 256,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "lease_basis_of_rent_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_lease_field_permissions.py": {
        "test_user_cant_view_any_fields": {
            "name": "test_user_cant_view_any_fields",
            "location": 10,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_superuser_can_view_all_fields": {
            "name": "test_superuser_can_view_all_fields",
            "location": 33,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_user_can_view_some_fields": {
            "name": "test_user_can_view_some_fields",
            "location": 56,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_user_cannot_modify_field": {
            "name": "test_user_cannot_modify_field",
            "location": 83,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_user_can_modify_field": {
            "name": "test_user_can_modify_field",
            "location": 112,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_lease_viewset.py": {
        "test_set_invoicing_state": {
            "name": "test_set_invoicing_state",
            "location": 25,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "value": [],
                "expected_value": [],
                "expected_code": []
            }
        },
        "test_set_rent_info_completion_state": {
            "name": "test_set_rent_info_completion_state",
            "location": 68,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "value": [],
                "expected_value": [],
                "expected_code": []
            }
        },
        "test_lease_details_contains_future_tenants": {
            "name": "test_lease_details_contains_future_tenants",
            "location": 96,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        },
        "test_copy_areas_to_contract": {
            "name": "test_copy_areas_to_contract",
            "location": 125,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plan_unit_factory": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_patch_decision.py": {
        "test_patch_decision_condition_cannot_change_fields": {
            "name": "test_patch_decision_condition_cannot_change_fields",
            "location": 13,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "condition_factory": [],
                "decision_factory": []
            }
        },
        "test_patch_decision_condition_can_change_some_fields": {
            "name": "test_patch_decision_condition_can_change_some_fields",
            "location": 72,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "condition_factory": [],
                "decision_factory": []
            }
        },
        "test_patch_decision_add_decision": {
            "name": "test_patch_decision_add_decision",
            "location": 139,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "condition_factory": [],
                "decision_factory": [],
                "permission_names": [],
                "expected_count": []
            }
        },
        "test_patch_decision_remove_decision": {
            "name": "test_patch_decision_remove_decision",
            "location": 209,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "condition_factory": [],
                "decision_factory": [],
                "permission_names": [],
                "expected_count": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_patch_invoice.py": {
        "test_patch_invoice_change_one_row_amount": {
            "name": "test_patch_invoice_change_one_row_amount",
            "location": 16,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_other_row_amount": {
            "name": "test_patch_invoice_change_other_row_amount",
            "location": 75,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_two_row_amount": {
            "name": "test_patch_invoice_change_two_row_amount",
            "location": 143,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_with_invoiceset_change_row_amount": {
            "name": "test_patch_invoice_with_invoiceset_change_row_amount",
            "location": 211,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_set_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_delete_invoice_invoice_in_invoiceset": {
            "name": "test_delete_invoice_invoice_in_invoiceset",
            "location": 299,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_set_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_if_sent_to_sap": {
            "name": "test_patch_invoice_change_if_sent_to_sap",
            "location": 360,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_cant_change_if_generated": {
            "name": "test_patch_invoice_cant_change_if_generated",
            "location": 425,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_credit_note_credited_invoice_outstanding_amount": {
            "name": "test_patch_credit_note_credited_invoice_outstanding_amount",
            "location": 487,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_credit_note_dates_read_only": {
            "name": "test_patch_credit_note_dates_read_only",
            "location": 549,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_add_payment": {
            "name": "test_patch_invoice_add_payment",
            "location": 622,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_generated_invoice_add_payment": {
            "name": "test_patch_generated_invoice_add_payment",
            "location": 668,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_cannot_add_payment_if_sent_to_sap": {
            "name": "test_patch_invoice_cannot_add_payment_if_sent_to_sap",
            "location": 718,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_existing_interest_row_success": {
            "name": "test_patch_invoice_existing_interest_row_success",
            "location": 765,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_change_interest_row_fail": {
            "name": "test_patch_invoice_change_interest_row_fail",
            "location": 824,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_patch_invoice_new_interest_row_fail": {
            "name": "test_patch_invoice_new_interest_row_fail",
            "location": 869,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_patch_lease.py": {
        "test_patch_lease_intended_use_note": {
            "name": "test_patch_lease_intended_use_note",
            "location": 12,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        },
        "test_remove_tenant": {
            "name": "test_remove_tenant",
            "location": 32,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "assert_count_equal": []
            }
        },
        "test_lease_area_addresses": {
            "name": "test_lease_area_addresses",
            "location": 67,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "assert_count_equal": []
            }
        },
        "test_patch_lease_is_invoicing_enabled_not_possible": {
            "name": "test_patch_lease_is_invoicing_enabled_not_possible",
            "location": 133,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        },
        "test_patch_lease_is_rent_info_complete_not_possible": {
            "name": "test_patch_lease_is_rent_info_complete_not_possible",
            "location": 157,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        },
        "test_patch_lease_basis_of_rents": {
            "name": "test_patch_lease_basis_of_rents",
            "location": 180,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_test_data": []
            }
        },
        "test_patch_lease_basis_of_rents_without_intended_use": {
            "name": "test_patch_lease_basis_of_rents_without_intended_use",
            "location": 199,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_test_data": []
            }
        },
        "test_patch_lease_basis_of_rents_predefined_area_unit": {
            "name": "test_patch_lease_basis_of_rents_predefined_area_unit",
            "location": 216,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "contact_factory": [],
                "lease_test_data": []
            }
        },
        "test_patch_lease_plan_units": {
            "name": "test_patch_lease_plan_units",
            "location": 249,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        },
        "test_validation_exception_on_planunit_delete_when_attached_to_plotsearch": {
            "name": "test_validation_exception_on_planunit_delete_when_attached_to_plotsearch",
            "location": 286,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "plot_search_test_data": [],
                "plot_search_target_factory": [],
                "plan_unit_factory": [],
                "lease_data_dict_with_contacts": []
            }
        },
        "test_patch_lease_has_contract_rent_base_amount_set": {
            "name": "test_patch_lease_has_contract_rent_base_amount_set",
            "location": 344,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_permissions.py": {
        "test_anonymous_user_cannot_view_lease": {
            "name": "test_anonymous_user_cannot_view_lease",
            "location": 7,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": []
            }
        },
        "test_user_without_permission_cant_view_lease": {
            "name": "test_user_without_permission_cant_view_lease",
            "location": 17,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_user_with_permission_can_view_lease": {
            "name": "test_user_with_permission_can_view_lease",
            "location": 35,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        },
        "test_field_permission": {
            "name": "test_field_permission",
            "location": 66,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": [],
                "field_permissions": [],
                "expected_keys": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_plan_unit.py": {
        "test_plan_unit_detail": {
            "name": "test_plan_unit_detail",
            "location": 6,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plan_unit_factory": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_plan_unit_list_with_identifiers.py": {
        "test_plan_unit_list_with_identifiers": {
            "name": "test_plan_unit_list_with_identifiers",
            "location": 8,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plan_unit_factory": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_rent_adjustment.py": {
        "test_create_total_amount_adjustment": {
            "name": "test_create_total_amount_adjustment",
            "location": 28,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "rent_factory": [],
                "decision_factory": [],
                "end_date": [],
                "expected_status_code": [],
                "expected_count": []
            }
        },
        "test_update_total_amount_adjustment": {
            "name": "test_update_total_amount_adjustment",
            "location": 98,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_test_data": [],
                "rent_factory": [],
                "decision_factory": [],
                "rent_adjustment_factory": [],
                "end_date": [],
                "expected_status_code": [],
                "expected_count": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_send_email.py": {
        "test_send_email": {
            "name": "test_send_email",
            "location": 14,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "lease_test_data": [],
                "user_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/api/test_uidata.py": {
        "test_create_own_uidata": {
            "name": "test_create_own_uidata",
            "location": 12,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": []
            }
        },
        "test_cant_create_others_uidata": {
            "name": "test_cant_create_others_uidata",
            "location": 40,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": []
            }
        },
        "test_can_create_global_uidata": {
            "name": "test_can_create_global_uidata",
            "location": 67,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": []
            }
        },
        "test_cant_create_global_uidata": {
            "name": "test_cant_create_global_uidata",
            "location": 95,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": []
            }
        },
        "test_can_edit_own_uidata": {
            "name": "test_can_edit_own_uidata",
            "location": 121,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        },
        "test_cant_edit_others_uidata": {
            "name": "test_cant_edit_others_uidata",
            "location": 151,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        },
        "test_can_edit_global_uidata": {
            "name": "test_can_edit_global_uidata",
            "location": 182,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        },
        "test_cant_edit_global_uidata": {
            "name": "test_cant_edit_global_uidata",
            "location": 212,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        },
        "test_delete_own_uidata": {
            "name": "test_delete_own_uidata",
            "location": 241,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        },
        "test_cant_delete_others_uidata": {
            "name": "test_cant_delete_others_uidata",
            "location": 262,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "client": [],
                "user_factory": [],
                "ui_data_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/management/commands/test_attach_areas.py": {
        "test_attach_areas_to_lease_areas": {
            "name": "test_attach_areas_to_lease_areas",
            "location": 11,
            "return": [],
            "arguments": {
                "lease_area_factory": [],
                "plan_unit_factory": [],
                "plot_factory": [],
                "area_with_intersects_test_data": [],
                "lease_test_data": []
            }
        },
        "test_plan_unit_updates_modified_at": {
            "name": "test_plan_unit_updates_modified_at",
            "location": 71,
            "return": [],
            "arguments": {
                "lease_area_factory": [],
                "plan_unit_factory": [],
                "area_with_intersects_test_data": [],
                "lease_test_data": [],
                "monkeypatch": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_calculate_invoices.py": {
        "test_calculate_invoices_no_rents": {
            "name": "test_calculate_invoices_no_rents",
            "location": 21,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_test_data": []
            }
        },
        "test_calculate_invoices_one_tenant": {
            "name": "test_calculate_invoices_one_tenant",
            "location": 28,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "tenant_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        },
        "test_calculate_invoices_two_tenants": {
            "name": "test_calculate_invoices_two_tenants",
            "location": 110,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "tenant_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        },
        "test_calculate_invoices_three_tenants": {
            "name": "test_calculate_invoices_three_tenants",
            "location": 213,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "assert_count_equal": [],
                "lease_factory": [],
                "tenant_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        },
        "test_calculate_invoices_seasonal": {
            "name": "test_calculate_invoices_seasonal",
            "location": 342,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_contact.py": {
        "test_contact_business_id_validator": {
            "name": "test_contact_business_id_validator",
            "location": 8,
            "return": [],
            "arguments": {
                "contact_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_invoice.py": {
        "test_create_credit_invoice_full": {
            "name": "test_create_credit_invoice_full",
            "location": 16,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_fails": {
            "name": "test_create_credit_invoice_fails",
            "location": 77,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_full_two_rows": {
            "name": "test_create_credit_invoice_full_two_rows",
            "location": 129,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_one_row_full": {
            "name": "test_create_credit_invoice_one_row_full",
            "location": 202,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_one_row_partly": {
            "name": "test_create_credit_invoice_one_row_partly",
            "location": 270,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_one_row_too_much": {
            "name": "test_create_credit_invoice_one_row_too_much",
            "location": 340,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_full_one_receivable_type": {
            "name": "test_create_credit_invoice_full_one_receivable_type",
            "location": 394,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoiceset_fails": {
            "name": "test_create_credit_invoiceset_fails",
            "location": 464,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": []
            }
        },
        "test_create_credit_invoiceset_full": {
            "name": "test_create_credit_invoiceset_full",
            "location": 559,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": []
            }
        },
        "test_create_credit_invoiceset_receivable_type": {
            "name": "test_create_credit_invoiceset_receivable_type",
            "location": 691,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": [],
                "tenant_factory": []
            }
        },
        "test_create_credit_invoiceset_receivable_type_partly": {
            "name": "test_create_credit_invoiceset_receivable_type_partly",
            "location": 821,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": [],
                "tenant_factory": []
            }
        },
        "test_create_credit_invoiceset_receivable_type_partly_no_tenants": {
            "name": "test_create_credit_invoiceset_receivable_type_partly_no_tenants",
            "location": 977,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_set_factory": []
            }
        },
        "test_create_credit_invoice_refunded_in_parts": {
            "name": "test_create_credit_invoice_refunded_in_parts",
            "location": 1121,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_too_much": {
            "name": "test_create_credit_invoice_too_much",
            "location": 1173,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_too_much_already_credited": {
            "name": "test_create_credit_invoice_too_much_already_credited",
            "location": 1218,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_create_credit_invoice_full_already_credited_partly": {
            "name": "test_create_credit_invoice_full_already_credited_partly",
            "location": 1269,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": []
            }
        },
        "test_outstanding_amount_after_partial_payment": {
            "name": "test_outstanding_amount_after_partial_payment",
            "location": 1316,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_outstanding_amount_after_one_full_payment": {
            "name": "test_outstanding_amount_after_one_full_payment",
            "location": 1368,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_outstanding_amount_after_multiple_payments_partial": {
            "name": "test_outstanding_amount_after_multiple_payments_partial",
            "location": 1420,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_outstanding_amount_after_multiple_payments_full": {
            "name": "test_outstanding_amount_after_multiple_payments_full",
            "location": 1478,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_outstanding_amount_with_collection_charge": {
            "name": "test_outstanding_amount_with_collection_charge",
            "location": 1536,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_outstanding_amount_with_collection_charge_one_payment": {
            "name": "test_outstanding_amount_with_collection_charge_one_payment",
            "location": 1583,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "invoice_payment_factory": []
            }
        },
        "test_calculate_penalty_amount": {
            "name": "test_calculate_penalty_amount",
            "location": 1636,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "invoice_factory": []
            }
        },
        "test_is_same_recipient_and_tenants": {
            "name": "test_is_same_recipient_and_tenants",
            "location": 1676,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "invoices_test_data": []
            }
        },
        "test_is_same_recipient_and_tenants_dict": {
            "name": "test_is_same_recipient_and_tenants_dict",
            "location": 1683,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "invoices_test_data": []
            }
        },
        "test_is_same_recipient_and_tenants2": {
            "name": "test_is_same_recipient_and_tenants2",
            "location": 1718,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "invoices_test_data": []
            }
        },
        "test_is_same_recipient_and_tenants3": {
            "name": "test_is_same_recipient_and_tenants3",
            "location": 1732,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "invoices_test_data": [],
                "contact_factory": []
            }
        },
        "test_is_same_recipient_and_tenants4": {
            "name": "test_is_same_recipient_and_tenants4",
            "location": 1752,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "invoices_test_data": [],
                "contact_factory": []
            }
        },
        "test_create_invoice_zero_amount_is_set_to_status_paid": {
            "name": "test_create_invoice_zero_amount_is_set_to_status_paid",
            "location": 1776,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        },
        "test_create_invoice_zero_row_sum_is_set_to_status_paid": {
            "name": "test_create_invoice_zero_row_sum_is_set_to_status_paid",
            "location": 1840,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "lease_factory": [],
                "tenant_factory": [],
                "tenant_rent_share_factory": [],
                "contact_factory": [],
                "tenant_contact_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_land_area.py": {
        "test_plan_unit_cannot_create_another_master_plan_unit": {
            "name": "test_plan_unit_cannot_create_another_master_plan_unit",
            "location": 5,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "plan_unit_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_lease.py": {
        "test_lease_manager_get_by_identifier_invalid": {
            "name": "test_lease_manager_get_by_identifier_invalid",
            "location": 20,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_test_data": []
            }
        },
        "test_lease_manager_get_by_identifier_does_not_exist": {
            "name": "test_lease_manager_get_by_identifier_does_not_exist",
            "location": 28,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_test_data": []
            }
        },
        "test_lease_manager_get_by_identifier": {
            "name": "test_lease_manager_get_by_identifier",
            "location": 38,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": []
            }
        },
        "test_lease_manager_get_by_identifier_zero_padded_sequence": {
            "name": "test_lease_manager_get_by_identifier_zero_padded_sequence",
            "location": 47,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": []
            }
        },
        "test_get_tenant_shares_for_period": {
            "name": "test_get_tenant_shares_for_period",
            "location": 58,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "assert_count_equal": []
            }
        },
        "test_get_tenant_shares_for_period_one_billing": {
            "name": "test_get_tenant_shares_for_period_one_billing",
            "location": 106,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "assert_count_equal": []
            }
        },
        "test_get_tenant_shares_for_period_change_tenant": {
            "name": "test_get_tenant_shares_for_period_change_tenant",
            "location": 162,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "assert_count_equal": []
            }
        },
        "test_get_tenant_shares_for_period_same_billing_contact_twice": {
            "name": "test_get_tenant_shares_for_period_same_billing_contact_twice",
            "location": 226,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "assert_count_equal": []
            }
        },
        "test_get_tenant_shares_for_period_same_contact_twice": {
            "name": "test_get_tenant_shares_for_period_same_contact_twice",
            "location": 279,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "assert_count_equal": []
            }
        },
        "test_calculate_invoices_invoice_note": {
            "name": "test_calculate_invoices_invoice_note",
            "location": 377,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "invoice_note_factory": [],
                "notes": [],
                "expected": []
            }
        },
        "test_is_empty_empty": {
            "name": "test_is_empty_empty",
            "location": 461,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": []
            }
        },
        "test_is_empty_one_field": {
            "name": "test_is_empty_one_field",
            "location": 468,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": []
            }
        },
        "test_is_empty_one_foreign": {
            "name": "test_is_empty_one_foreign",
            "location": 476,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": []
            }
        },
        "test_is_empty_one_relation": {
            "name": "test_is_empty_one_relation",
            "location": 487,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "decision_factory": []
            }
        },
        "test_is_empty_one_manytomany": {
            "name": "test_is_empty_one_manytomany",
            "location": 496,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "related_lease_factory": []
            }
        },
        "test_add_rounded_amount": {
            "name": "test_add_rounded_amount",
            "location": 506,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        },
        "test_add_rounded_amount_previous_invoices": {
            "name": "test_add_rounded_amount_previous_invoices",
            "location": 586,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "invoice_factory": [],
                "invoice_row_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_rent.py": {
        "test_fixed_get_due_dates_as_daymonths": {
            "name": "test_fixed_get_due_dates_as_daymonths",
            "location": 33,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_type": [],
                "due_dates_per_year": [],
                "expected": []
            }
        },
        "test_get_due_dates_for_period_fixed_middle": {
            "name": "test_get_due_dates_for_period_fixed_middle",
            "location": 110,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "due_dates_type": [],
                "due_dates_per_year": [],
                "start_date": [],
                "end_date": [],
                "expected": []
            }
        },
        "test_get_billing_period_from_due_date": {
            "name": "test_get_billing_period_from_due_date",
            "location": 186,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "due_dates_per_year": [],
                "due_date": [],
                "expected": []
            }
        },
        "test_get_billing_period_from_due_date_custom": {
            "name": "test_get_billing_period_from_due_date_custom",
            "location": 220,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_due_dates": [],
                "due_date": [],
                "expected": []
            }
        },
        "test_get_billing_period_from_due_date_seasonal": {
            "name": "test_get_billing_period_from_due_date_seasonal",
            "location": 253,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "due_date": [],
                "expected": []
            }
        },
        "test_get_billing_period_from_due_date_seasonal_fixed_due_date": {
            "name": "test_get_billing_period_from_due_date_seasonal_fixed_due_date",
            "location": 274,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": []
            }
        },
        "test_get_billing_period_from_due_date_seasonal_two_rents": {
            "name": "test_get_billing_period_from_due_date_seasonal_two_rents",
            "location": 307,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "due_date": [],
                "expected": []
            }
        },
        "test_index_get_latest_for_date": {
            "name": "test_index_get_latest_for_date",
            "location": 349,
            "return": [],
            "arguments": {
                "the_date": [],
                "expected": []
            }
        },
        "test_index_get_latest_for_year": {
            "name": "test_index_get_latest_for_year",
            "location": 370,
            "return": [],
            "arguments": {
                "year": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_empty": {
            "name": "test_get_amount_for_date_range_empty",
            "location": 381,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": []
            }
        },
        "test_get_amount_for_date_range_simple_contract": {
            "name": "test_get_amount_for_date_range_simple_contract",
            "location": 410,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "amount": [],
                "period": [],
                "expected": []
            }
        },
        "test_split_range_by_cycle": {
            "name": "test_split_range_by_cycle",
            "location": 498,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "range_start": [],
                "range_end": [],
                "expected": []
            }
        },
        "test_split_range_by_cycle_span_year_boundary": {
            "name": "test_split_range_by_cycle_span_year_boundary",
            "location": 560,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "cycle": [],
                "range_start": [],
                "range_end": [],
                "expected": []
            }
        },
        "test_split_ranges_by_cycle": {
            "name": "test_split_ranges_by_cycle",
            "location": 622,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "ranges": [],
                "expected": []
            }
        },
        "test_get_rent_year_for_date": {
            "name": "test_get_rent_year_for_date",
            "location": 660,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_cycle": [],
                "the_date": [],
                "expected": []
            }
        },
        "test_get_index_for_date": {
            "name": "test_get_index_for_date",
            "location": 698,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_cycle": [],
                "the_date": [],
                "expected": []
            }
        },
        "test_is_correct_index_for_date": {
            "name": "test_is_correct_index_for_date",
            "location": 799,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_cycle": [],
                "the_date": [],
                "index_year_month": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_simple_contract_april_to_march": {
            "name": "test_get_amount_for_date_range_simple_contract_april_to_march",
            "location": 829,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "amount": [],
                "period": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_contract_with_adjustment": {
            "name": "test_get_amount_for_date_range_contract_with_adjustment",
            "location": 1053,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": [],
                "adjustment_type": [],
                "adjustment_start_date": [],
                "adjustment_end_date": [],
                "adjustment_amount_type": [],
                "adjustment_amount": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_contract_with_adjustment_different_intended_use": {
            "name": "test_get_amount_for_date_range_contract_with_adjustment_different_intended_use",
            "location": 1102,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": []
            }
        },
        "test_get_amount_for_date_range_contract_with_fixed_initial": {
            "name": "test_get_amount_for_date_range_contract_with_fixed_initial",
            "location": 1190,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "fixed_initial_year_rent_factory": [],
                "fixed_initial_amount": [],
                "fixed_initial_start_date": [],
                "fixed_initial_end_date": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_contract_with_adjustment_and_fixed_initial": {
            "name": "test_get_amount_for_date_range_contract_with_adjustment_and_fixed_initial",
            "location": 1397,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": [],
                "adjustment_type": [],
                "adjustment_start_date": [],
                "adjustment_end_date": [],
                "adjustment_amount_type": [],
                "adjustment_amount": [],
                "fixed_initial_year_rent_factory": [],
                "fixed_initial_amount": [],
                "fixed_initial_start_date": [],
                "fixed_initial_end_date": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_two_contracts": {
            "name": "test_get_amount_for_date_range_two_contracts",
            "location": 1551,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "amount1": [],
                "period1": [],
                "start_date1": [],
                "end_date1": [],
                "amount2": [],
                "period2": [],
                "start_date2": [],
                "end_date2": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_two_contracts_with_adjustment": {
            "name": "test_get_amount_for_date_range_two_contracts_with_adjustment",
            "location": 2094,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": [],
                "intended_use1": [],
                "amount1": [],
                "period1": [],
                "start_date1": [],
                "end_date1": [],
                "intended_use2": [],
                "amount2": [],
                "period2": [],
                "start_date2": [],
                "end_date2": [],
                "adjustment_type": [],
                "adjustment_intended_use": [],
                "adjustment_start_date": [],
                "adjustment_end_date": [],
                "adjustment_amount_type": [],
                "adjustment_amount": [],
                "expected": []
            }
        },
        "test_adjustment_type_amount_total": {
            "name": "test_adjustment_type_amount_total",
            "location": 2185,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": [],
                "dry_run": [],
                "adjustment_type": [],
                "adjustment_amount": [],
                "expected_rent": [],
                "expected_amount_left": []
            }
        },
        "test_get_amount_for_date_range_adjustments_two_in_series": {
            "name": "test_get_amount_for_date_range_adjustments_two_in_series",
            "location": 2277,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "rent_adjustment_factory": [],
                "adjustment_start_date1": [],
                "adjustment_end_date1": [],
                "adjustment_type1": [],
                "adjustment_amount1": [],
                "adjustment_start_date2": [],
                "adjustment_end_date2": [],
                "adjustment_type2": [],
                "adjustment_amount2": [],
                "expected": []
            }
        },
        "test_get_amount_for_date_range_adjustments_two_in_series_fixed_initial_year_rent": {
            "name": "test_get_amount_for_date_range_adjustments_two_in_series_fixed_initial_year_rent",
            "location": 2379,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "fixed_initial_year_rent_factory": [],
                "rent_adjustment_factory": [],
                "adjustment_start_date1": [],
                "adjustment_end_date1": [],
                "adjustment_type1": [],
                "adjustment_amount1": [],
                "adjustment_start_date2": [],
                "adjustment_end_date2": [],
                "adjustment_type2": [],
                "adjustment_amount2": [],
                "expected": []
            }
        },
        "test_fixed_initial_year_rent_amount_for_date_range": {
            "name": "test_fixed_initial_year_rent_amount_for_date_range",
            "location": 2450,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "fixed_initial_year_rent_factory": [],
                "rent_adjustment_factory": [],
                "adjustment_start_date1": [],
                "adjustment_end_date1": [],
                "adjustment_type1": [],
                "adjustment_amount1": [],
                "expected": []
            }
        },
        "test_is_active_on_period": {
            "name": "test_is_active_on_period",
            "location": 2576,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_start_date": [],
                "rent_end_date": [],
                "period_start_date": [],
                "period_end_date": [],
                "expected": []
            }
        },
        "test_fixed_initial_year_rent_for_date_range_remaining_ranges": {
            "name": "test_fixed_initial_year_rent_for_date_range_remaining_ranges",
            "location": 2654,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "contract_rent_factory": [],
                "fixed_initial_year_rent_factory": [],
                "start_date1": [],
                "end_date1": [],
                "start_date2": [],
                "end_date2": [],
                "expected": []
            }
        },
        "test_is_the_last_billing_period": {
            "name": "test_is_the_last_billing_period",
            "location": 2799,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "rent_cycle": [],
                "due_dates_per_year": [],
                "billing_period": [],
                "expected": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_rent_rounding.py": {
        "test_add_rounded_amount": {
            "name": "test_add_rounded_amount",
            "location": 20,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "lease_factory": [],
                "contact_factory": [],
                "tenant_factory": [],
                "tenant_contact_factory": [],
                "tenant_rent_share_factory": [],
                "rent_factory": [],
                "contract_rent_factory": []
            }
        }
    },
    "mvj-master/leasing/tests/models/test_utils.py": {
        "test_get_overlap": {
            "name": "test_get_overlap",
            "location": 122,
            "return": [],
            "arguments": {
                "s1": [],
                "e1": [],
                "s2": [],
                "e2": [],
                "expected": []
            }
        },
        "test_get_billing_periods": {
            "name": "test_get_billing_periods",
            "location": 200,
            "return": [],
            "arguments": {
                "year": [],
                "periods_per_year": [],
                "expected": []
            }
        },
        "test_fix_amount_for_overlap": {
            "name": "test_fix_amount_for_overlap",
            "location": 215,
            "return": [],
            "arguments": {
                "amount": [],
                "overlap": [],
                "remainder": [],
                "expected": []
            }
        },
        "test_subtract_range_from_range": {
            "name": "test_subtract_range_from_range",
            "location": 279,
            "return": [],
            "arguments": {
                "range1": [],
                "subtract_range": [],
                "expected": []
            }
        },
        "test_subtract_ranges_from_ranges": {
            "name": "test_subtract_ranges_from_ranges",
            "location": 393,
            "return": [],
            "arguments": {
                "ranges": [],
                "subtract_ranges": [],
                "expected": []
            }
        },
        "test_combine_ranges": {
            "name": "test_combine_ranges",
            "location": 452,
            "return": [],
            "arguments": {
                "ranges": [],
                "expected": []
            }
        },
        "test_split_date_range": {
            "name": "test_split_date_range",
            "location": 514,
            "return": [],
            "arguments": {
                "date_range": [],
                "count": [],
                "expected": []
            }
        },
        "test_split_date_range_too_big_count": {
            "name": "test_split_date_range_too_big_count",
            "location": 518,
            "return": [],
            "arguments": {}
        },
        "test_is_business_day": {
            "name": "test_is_business_day",
            "location": 555,
            "return": [],
            "arguments": {
                "the_day": [],
                "expected": []
            }
        },
        "test_get_next_business_day": {
            "name": "test_get_next_business_day",
            "location": 585,
            "return": [],
            "arguments": {
                "the_day": [],
                "expected": []
            }
        },
        "test_is_date_on_first_quarter": {
            "name": "test_is_date_on_first_quarter",
            "location": 608,
            "return": [],
            "arguments": {
                "the_day": [],
                "expected": []
            }
        },
        "test_group_items_in_period_by_date_range": {
            "name": "test_group_items_in_period_by_date_range",
            "location": 728,
            "return": [],
            "arguments": {
                "items": [],
                "expected": []
            }
        },
        "test_group_items_in_period_with_nullable_date_model_fields": {
            "name": "test_group_items_in_period_with_nullable_date_model_fields",
            "location": 736,
            "return": [],
            "arguments": {
                "lease_test_data": [],
                "rent_factory": [],
                "decision_factory": [],
                "rent_adjustment_factory": []
            }
        },
        "test_normalize_property_identifier": {
            "name": "test_normalize_property_identifier",
            "location": 797,
            "return": [],
            "arguments": {
                "identifier": [],
                "expected": []
            }
        }
    },
    "mvj-master/leasing/tests/report/test_reports.py": {
        "use_q_cluster_testing": {
            "name": "use_q_cluster_testing",
            "location": 14,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_simple_async_report_send": {
            "name": "test_simple_async_report_send",
            "location": 25,
            "return": [],
            "arguments": {
                "rf": [],
                "admin_user": []
            }
        }
    },
    "mvj-master/leasing/viewsets/area_note.py": {
        "AreaNoteViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/auditlog.py": {
        "AuditLogView.get_view_name": {
            "name": "get_view_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogView.get_view_description": {
            "name": "get_view_description",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "AuditLogView.get": {
            "name": "get",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "AuditLogView.options": {
            "name": "options",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/viewsets/basis_of_rent.py": {
        "BasisOfRentViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasisOfRentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/batchrun.py": {},
    "mvj-master/leasing/viewsets/comment.py": {
        "CommentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/contact.py": {},
    "mvj-master/leasing/viewsets/contact_additional_views.py": {
        "ContactExistsView.get_view_name": {
            "name": "get_view_name",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactExistsView.get_view_description": {
            "name": "get_view_description",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "ContactExistsView.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        }
    },
    "mvj-master/leasing/viewsets/debt_collection.py": {
        "CollectionCourtDecisionViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionLetterViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CollectionNoteViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/decision.py": {
        "get_decision_from_query_params": {
            "name": "get_decision_from_query_params",
            "location": 34,
            "return": [],
            "arguments": {
                "query_params": []
            }
        },
        "DecisionViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecisionCopyToLeasesView.get_view_name": {
            "name": "get_view_name",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecisionCopyToLeasesView.get_view_description": {
            "name": "get_view_description",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "DecisionCopyToLeasesView.post": {
            "name": "post",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        }
    },
    "mvj-master/leasing/viewsets/email.py": {
        "SendEmailView.get_view_name": {
            "name": "get_view_name",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SendEmailView.get_view_description": {
            "name": "get_view_description",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "SendEmailView.post": {
            "name": "post",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "SendEmailView.options": {
            "name": "options",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/viewsets/infill_development_compensation.py": {
        "InfillDevelopmentCompensationViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfillDevelopmentCompensationViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfillDevelopmentCompensationAttachmentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/inspection.py": {
        "InspectionAttachmentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/invoice.py": {
        "InvoiceViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceViewSet.create": {
            "name": "create",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceViewSet.update": {
            "name": "update",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceViewSet.destroy": {
            "name": "destroy",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InvoiceNoteViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/invoice_additional_views.py": {
        "get_values_from_credit_request": {
            "name": "get_values_from_credit_request",
            "location": 19,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "get_object_from_query_params": {
            "name": "get_object_from_query_params",
            "location": 48,
            "return": [],
            "arguments": {
                "object_type": [],
                "query_params": []
            }
        },
        "InvoiceCalculatePenaltyInterestView.get_view_name": {
            "name": "get_view_name",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceCalculatePenaltyInterestView.get_view_description": {
            "name": "get_view_description",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "InvoiceCalculatePenaltyInterestView.get": {
            "name": "get",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "InvoiceCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "InvoiceCreditView.post": {
            "name": "post",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "InvoiceRowCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceRowCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "InvoiceRowCreditView.post": {
            "name": "post",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "InvoiceSetCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceSetCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "InvoiceSetCreditView.post": {
            "name": "post",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "InvoiceExportToLaskeView.get_view_name": {
            "name": "get_view_name",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvoiceExportToLaskeView.get_view_description": {
            "name": "get_view_description",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "InvoiceExportToLaskeView.post": {
            "name": "post",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        }
    },
    "mvj-master/leasing/viewsets/land_area.py": {
        "LeaseAreaAttachmentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlanUnitListWithIdentifiersViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotMasterIdentifierList.get_queryset": {
            "name": "get_queryset",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/land_use_agreement.py": {
        "get_object_from_query_params": {
            "name": "get_object_from_query_params",
            "location": 59,
            "return": [],
            "arguments": {
                "object_type": [],
                "query_params": []
            }
        },
        "get_values_from_credit_request": {
            "name": "get_values_from_credit_request",
            "location": 106,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "LandUseAgreementViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementAttachmentViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceViewSet.update": {
            "name": "update",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LandUseAgreementInvoiceViewSet.destroy": {
            "name": "destroy",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LandUseAgreementInvoiceCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LandUseAgreementInvoiceCreditView.post": {
            "name": "post",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LandUseAgreementInvoiceRowCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceRowCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LandUseAgreementInvoiceRowCreditView.post": {
            "name": "post",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LandUseAgreementInvoiceSetCreditView.get_view_name": {
            "name": "get_view_name",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceSetCreditView.get_view_description": {
            "name": "get_view_description",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LandUseAgreementInvoiceSetCreditView.post": {
            "name": "post",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LandUseAgreementInvoiceExportToLaskeView.get_view_name": {
            "name": "get_view_name",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LandUseAgreementInvoiceExportToLaskeView.get_view_description": {
            "name": "get_view_description",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LandUseAgreementInvoiceExportToLaskeView.post": {
            "name": "post",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        }
    },
    "mvj-master/leasing/viewsets/lease.py": {
        "LeaseViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseViewSet.perform_create": {
            "name": "perform_create",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "LeaseViewSet.create": {
            "name": "create",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseViewSet.destroy": {
            "name": "destroy",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/viewsets/leasehold_transfer.py": {
        "LeaseholdTransferViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/leasing/viewsets/lease_additional_views.py": {
        "interest_rates_to_strings": {
            "name": "interest_rates_to_strings",
            "location": 47,
            "return": [],
            "arguments": {
                "interest_rates": []
            }
        },
        "get_lease_from_query_params": {
            "name": "get_lease_from_query_params",
            "location": 230,
            "return": [],
            "arguments": {
                "query_params": []
            }
        },
        "LeaseCreateChargeViewSet.get_view_name": {
            "name": "get_view_name",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseCreateChargeViewSet.get_view_description": {
            "name": "get_view_description",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LeaseCreateChargeViewSet.create": {
            "name": "create",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseCreateCollectionLetterDocumentViewSet.get_view_name": {
            "name": "get_view_name",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseCreateCollectionLetterDocumentViewSet.create": {
            "name": "create",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LeaseRentForPeriodView.get_view_name": {
            "name": "get_view_name",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseRentForPeriodView.get_view_description": {
            "name": "get_view_description",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LeaseRentForPeriodView.get": {
            "name": "get",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LeaseBillingPeriodsView.get_view_name": {
            "name": "get_view_name",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseBillingPeriodsView.get": {
            "name": "get",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LeasePreviewInvoicesForYearView.get_view_name": {
            "name": "get_view_name",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeasePreviewInvoicesForYearView.get": {
            "name": "get",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LeaseCopyAreasToContractView.get_view_name": {
            "name": "get_view_name",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseCopyAreasToContractView.get_view_description": {
            "name": "get_view_description",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "LeaseCopyAreasToContractView.post": {
            "name": "post",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LeaseSetInvoicingStateView.get_view_name": {
            "name": "get_view_name",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseSetInvoicingStateView.post": {
            "name": "post",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LeaseSetRentInfoCompletionStateView.get_view_name": {
            "name": "get_view_name",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaseSetRentInfoCompletionStateView.post": {
            "name": "post",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        }
    },
    "mvj-master/leasing/viewsets/rent.py": {},
    "mvj-master/leasing/viewsets/ui_data.py": {
        "CanEditGlobalUiData.has_object_permission": {
            "name": "has_object_permission",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        },
        "UiDataViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UiDataViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UiDataViewSet.create": {
            "name": "create",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/leasing/viewsets/utils.py": {
        "integrityerror_exception_handler": {
            "name": "integrityerror_exception_handler",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "exc": [],
                "context": []
            }
        },
        "AuditLogMixin.initial": {
            "name": "initial",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtomicTransactionMixin.dispatch": {
            "name": "dispatch",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MultiPartJsonParser.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "media_type": [],
                "parser_context": []
            }
        },
        "FileMixin.create": {
            "name": "create",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FileMixin.update": {
            "name": "update",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FileMixin.download": {
            "name": "download",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "pk": []
            }
        }
    },
    "mvj-master/leasing/viewsets/vat.py": {},
    "mvj-master/leasing/viewsets/__init__.py": {},
    "mvj-master/mvj/settings.py": {
        "get_git_revision_hash": {
            "name": "get_git_revision_hash",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mvj-master/mvj/urls.py": {},
    "mvj-master/mvj/wsgi.py": {},
    "mvj-master/mvj/__init__.py": {},
    "mvj-master/plotsearch/admin.py": {
        "PlotSearchAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mvj-master/plotsearch/apps.py": {
        "PlotsearchConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/plotsearch/models.py": {
        "PlotSearch.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotSearchTarget.save": {
            "name": "save",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotSearchTarget.clean": {
            "name": "clean",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/plotsearch/serializers.py": {
        "PlotSearchTargetSerializer.get_lease_address": {
            "name": "get_lease_address",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PlotSearchTargetSerializer.get_master_plan_unit_id": {
            "name": "get_master_plan_unit_id",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PlotSearchTargetSerializer.get_is_master_plan_unit_deleted": {
            "name": "get_is_master_plan_unit_deleted",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PlotSearchTargetSerializer.get_message_label": {
            "name": "get_message_label",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PlotSearchTargetCreateUpdateSerializer.create": {
            "name": "create",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        },
        "PlotSearchTargetCreateUpdateSerializer.get_prev_links": {
            "name": "get_prev_links",
            "location": 169,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "PlotSearchTargetCreateUpdateSerializer.update": {
            "name": "update",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "PlotSearchUpdateSerializer.to_representation": {
            "name": "to_representation",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "PlotSearchUpdateSerializer.dict_to_instance": {
            "name": "dict_to_instance",
            "location": 292,
            "return": [],
            "arguments": {
                "dictionary": [],
                "model": []
            }
        },
        "PlotSearchUpdateSerializer.handle_targets": {
            "name": "handle_targets",
            "location": 303,
            "return": [],
            "arguments": {
                "targets": [],
                "instance": []
            }
        },
        "PlotSearchUpdateSerializer.update": {
            "name": "update",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "validated_data": []
            }
        },
        "PlotSearchCreateSerializer.handle_targets": {
            "name": "handle_targets",
            "location": 381,
            "return": [],
            "arguments": {
                "targets": [],
                "plot_search": []
            }
        },
        "PlotSearchCreateSerializer.create": {
            "name": "create",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": []
            }
        }
    },
    "mvj-master/plotsearch/signals.py": {
        "prepare_plan_unit_on_plot_search_target_save": {
            "name": "prepare_plan_unit_on_plot_search_target_save",
            "location": 8,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "post_delete_plan_unit_on_plot_search_target_delete": {
            "name": "post_delete_plan_unit_on_plot_search_target_delete",
            "location": 18,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "prepare_template_form_on_plot_search_save": {
            "name": "prepare_template_form_on_plot_search_save",
            "location": 23,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": []
            }
        }
    },
    "mvj-master/plotsearch/views.py": {
        "PlotSearchViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mvj-master/plotsearch/__init__.py": {},
    "mvj-master/plotsearch/migrations/0001_initial.py": {},
    "mvj-master/plotsearch/migrations/0002_plotsearch_form.py": {},
    "mvj-master/plotsearch/migrations/0003_plotsearch_decisions.py": {},
    "mvj-master/plotsearch/migrations/0004_targetinfolink.py": {},
    "mvj-master/plotsearch/migrations/0005_info_links_languages.py": {},
    "mvj-master/plotsearch/migrations/0006_plot_search_target_rel_name.py": {},
    "mvj-master/plotsearch/migrations/__init__.py": {},
    "mvj-master/plotsearch/tests/conftest.py": {
        "django_db_setup": {
            "name": "django_db_setup",
            "location": 8,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "django_db_blocker": []
            }
        }
    },
    "mvj-master/plotsearch/tests/__init__.py": {},
    "mvj-master/plotsearch/tests/api/test_plot_search.py": {
        "test_plot_search_detail": {
            "name": "test_plot_search_detail",
            "location": 20,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plan_unit_factory": [],
                "plot_search_test_data": [],
                "lease_test_data": []
            }
        },
        "test_plot_search_list": {
            "name": "test_plot_search_list",
            "location": 51,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": []
            }
        },
        "test_plot_search_create_simple": {
            "name": "test_plot_search_create_simple",
            "location": 61,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": []
            }
        },
        "test_plot_search_create": {
            "name": "test_plot_search_create",
            "location": 77,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "user_factory": [],
                "plan_unit_factory": []
            }
        },
        "test_plot_search_update": {
            "name": "test_plot_search_update",
            "location": 121,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "user_factory": [],
                "plan_unit_factory": []
            }
        },
        "test_plot_search_delete_target": {
            "name": "test_plot_search_delete_target",
            "location": 183,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "user_factory": [],
                "plan_unit_factory": []
            }
        },
        "test_plot_search_master_plan_unit_is_deleted": {
            "name": "test_plot_search_master_plan_unit_is_deleted",
            "location": 229,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "plan_unit_factory": []
            }
        },
        "test_plot_search_master_plan_unit_is_newer": {
            "name": "test_plot_search_master_plan_unit_is_newer",
            "location": 262,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "plan_unit_factory": []
            }
        },
        "test_plot_search_master_plan_unit_is_deleted_change_to_new": {
            "name": "test_plot_search_master_plan_unit_is_deleted_change_to_new",
            "location": 296,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "plan_unit_factory": []
            }
        },
        "test_attach_form_to_plot_search": {
            "name": "test_attach_form_to_plot_search",
            "location": 377,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "form_factory": []
            }
        },
        "test_attach_decision_to_plot_search": {
            "name": "test_attach_decision_to_plot_search",
            "location": 420,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_test_data": [],
                "lease_test_data": [],
                "decision_factory": []
            }
        },
        "test_add_target_info_link": {
            "name": "test_add_target_info_link",
            "location": 453,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_target": []
            }
        },
        "test_getting_and_editing_and_deleting_existing_info_link": {
            "name": "test_getting_and_editing_and_deleting_existing_info_link",
            "location": 481,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "admin_client": [],
                "plot_search_target": [],
                "info_link_factory": [],
                "plan_unit_factory": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/plotsearch/tests/models/test_plot_search_model.py": {
        "test_remove_plot_search_target_cascade_plan_unit": {
            "name": "test_remove_plot_search_target_cascade_plan_unit",
            "location": 11,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "plot_search_factory": [],
                "plot_search_target_factory": [],
                "lease_factory": [],
                "lease_area_factory": [],
                "plan_unit_factory": []
            }
        },
        "test_duplicate_plan_unit_on_plot_search_target_save": {
            "name": "test_duplicate_plan_unit_on_plot_search_target_save",
            "location": 51,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "plot_search_factory": [],
                "plot_search_target_factory": [],
                "lease_factory": [],
                "lease_area_factory": [],
                "plan_unit_factory": []
            }
        }
    },
    "mvj-master/plotsearch/tests/serializers/test_plot_search_serializer.py": {
        "test_plot_search_validation": {
            "name": "test_plot_search_validation",
            "location": 13,
            "return": [],
            "arguments": {
                "django_db_setup": [],
                "plot_search_test_data": [],
                "plan_unit_factory": [],
                "lease_test_data": []
            }
        }
    },
    "mvj-master/sanitizers/mvj.py": {
        "sanitize_address": {
            "name": "sanitize_address",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_address_if_exist": {
            "name": "sanitize_address_if_exist",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_business_id": {
            "name": "sanitize_business_id",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_business_id_if_exist": {
            "name": "sanitize_business_id_if_exist",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_city": {
            "name": "sanitize_city",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_city_if_exist": {
            "name": "sanitize_city_if_exist",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_company": {
            "name": "sanitize_company",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_company_if_exist": {
            "name": "sanitize_company_if_exist",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_email": {
            "name": "sanitize_email",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_email_if_exist": {
            "name": "sanitize_email_if_exist",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_first_name": {
            "name": "sanitize_first_name",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_first_name_if_exist": {
            "name": "sanitize_first_name_if_exist",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_generate_random_numbers": {
            "name": "sanitize_generate_random_numbers",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_generate_random_numbers_if_exist": {
            "name": "sanitize_generate_random_numbers_if_exist",
            "location": 71,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_last_name": {
            "name": "sanitize_last_name",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_last_name_if_exist": {
            "name": "sanitize_last_name_if_exist",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_national_identification_number": {
            "name": "sanitize_national_identification_number",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_national_identification_number_if_exist": {
            "name": "sanitize_national_identification_number_if_exist",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_name": {
            "name": "sanitize_name",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_paragraph": {
            "name": "sanitize_paragraph",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_paragraph_if_exist": {
            "name": "sanitize_paragraph_if_exist",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_phone_number": {
            "name": "sanitize_phone_number",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_phone_number_if_exist": {
            "name": "sanitize_phone_number_if_exist",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_postcode": {
            "name": "sanitize_postcode",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_postcode_if_exist": {
            "name": "sanitize_postcode_if_exist",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "sanitize_url": {
            "name": "sanitize_url",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "mvj-master/sanitizers/__init__.py": {},
    "mvj-master/users/admin.py": {},
    "mvj-master/users/apps.py": {},
    "mvj-master/users/models.py": {},
    "mvj-master/users/serializers.py": {},
    "mvj-master/users/views.py": {
        "UsersPermissions.get_view_name": {
            "name": "get_view_name",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersPermissions.get": {
            "name": "get",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "format": [],
                "contract_id": [],
                "file_id": []
            }
        }
    },
    "mvj-master/users/viewsets.py": {},
    "mvj-master/users/__init__.py": {},
    "mvj-master/users/migrations/0001_initial.py": {},
    "mvj-master/users/migrations/0002_auto_20180208_0853.py": {},
    "mvj-master/users/migrations/__init__.py": {},
    "mvj-master/utils/__init__.py": {},
    "mvj-master/utils/management/__init__.py": {},
    "mvj-master/utils/management/commands/app_makemessages.py": {
        "Command.handle": {
            "name": "handle",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
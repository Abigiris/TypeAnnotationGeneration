{
    "my_agents-master/setup.py": {},
    "my_agents-master/my_agents/comparison.py": {},
    "my_agents-master/my_agents/evaluate.py": {},
    "my_agents-master/my_agents/main.py": {},
    "my_agents-master/my_agents/vectorize_test.py": {},
    "my_agents-master/my_agents/agents/ddqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "hidden_layers": [
                    "list"
                ]
            }
        },
        "DDQNAgent.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ],
                "prebuilt_model": []
            }
        },
        "DDQNAgent.act": {
            "name": "act",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ]
            }
        },
        "DDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "np.ndarray"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "DDQNAgent.train": {
            "name": "train",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "DDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 115,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "actions": [
                    "np.ndarray"
                ],
                "rewards": [
                    "np.ndarray"
                ],
                "next_states": [
                    "np.ndarray"
                ],
                "dones": [
                    "np.ndarray"
                ]
            }
        },
        "DDQNAgent.Q": {
            "name": "Q",
            "location": 129,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "DDQNAgent.policy": {
            "name": "policy",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "DDQNAgent.V": {
            "name": "V",
            "location": 146,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "DDQNAgent.save": {
            "name": "save",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 158,
            "return": [
                "DDQNAgent"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/distributional_agent.py": {
        "build_distributional_network": {
            "name": "build_distributional_network",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "num_atoms": [
                    "int"
                ],
                "hidden_layers": [
                    "list"
                ]
            }
        },
        "DistributionalAgent.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "v_min": [
                    "float"
                ],
                "v_max": [
                    "float"
                ],
                "num_atoms": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ],
                "prebuilt_model": []
            }
        },
        "DistributionalAgent.act": {
            "name": "act",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.process_observation": {
            "name": "process_observation",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "np.ndarray"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "DistributionalAgent.train": {
            "name": "train",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "DistributionalAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributionalAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 116,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "actions": [
                    "np.ndarray"
                ],
                "rewards": [
                    "np.ndarray"
                ],
                "next_states": [
                    "np.ndarray"
                ],
                "dones": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.Z": {
            "name": "Z",
            "location": 149,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.Q": {
            "name": "Q",
            "location": 156,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.policy": {
            "name": "policy",
            "location": 168,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.V": {
            "name": "V",
            "location": 172,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DistributionalAgent.save": {
            "name": "save",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DistributionalAgent.from_h5": {
            "name": "from_h5",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "v_min": [
                    "float"
                ],
                "v_max": [
                    "float"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ]
            }
        },
        "DistributionalAgent.Distribution.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v_min": [
                    "float"
                ],
                "v_max": [
                    "float"
                ],
                "num_atoms": [
                    "int"
                ]
            }
        },
        "DistributionalAgent.Distribution.project_to_distribution": {
            "name": "project_to_distribution",
            "location": 54,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        }
    },
    "my_agents-master/my_agents/agents/dqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "hidden_layers": [
                    "list"
                ]
            }
        },
        "DQNAgent.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ],
                "prebuilt_model": []
            }
        },
        "DQNAgent.act": {
            "name": "act",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ]
            }
        },
        "DQNAgent.process_observation": {
            "name": "process_observation",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "np.ndarray"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "DQNAgent.train": {
            "name": "train",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "DQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 117,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "actions": [
                    "np.ndarray"
                ],
                "rewards": [
                    "np.ndarray"
                ],
                "next_states": [
                    "np.ndarray"
                ],
                "dones": [
                    "np.ndarray"
                ]
            }
        },
        "DQNAgent.Q": {
            "name": "Q",
            "location": 131,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DQNAgent.policy": {
            "name": "policy",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DQNAgent.V": {
            "name": "V",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ]
            }
        },
        "DQNAgent.save": {
            "name": "save",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DQNAgent.from_h5": {
            "name": "from_h5",
            "location": 156,
            "return": [
                "DQNAgent"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/nstep_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "hidden_layers": [
                    "list"
                ]
            }
        },
        "NStepDDQNAgent.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "update_horizon": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ],
                "prebuilt_model": []
            }
        },
        "NStepDDQNAgent.act": {
            "name": "act",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ]
            }
        },
        "NStepDDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "np.ndarray"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.train": {
            "name": "train",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "NStepDDQNAgent._sample_n_transitions": {
            "name": "_sample_n_transitions",
            "location": 113,
            "return": [
                "Tuple[(list, list, list, list, list, List[float])]"
            ],
            "arguments": {
                "self": [],
                "batch_size": []
            }
        },
        "NStepDDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NStepDDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 144,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "actions": [
                    "np.ndarray"
                ],
                "rewards": [
                    "np.ndarray"
                ],
                "next_states": [
                    "np.ndarray"
                ],
                "dones": [
                    "np.ndarray"
                ],
                "gammas": [
                    "np.ndarray"
                ]
            }
        },
        "NStepDDQNAgent.Q": {
            "name": "Q",
            "location": 159,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.policy": {
            "name": "policy",
            "location": 172,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.V": {
            "name": "V",
            "location": 176,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.save": {
            "name": "save",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "NStepDDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 188,
            "return": [
                "NStepDDQNAgent"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "update_horizon": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/prioritized_ddqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "hidden_layers": [
                    "list"
                ]
            }
        },
        "PrioritizedDDQNAgent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "state_shape": [
                    "tuple"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ],
                "prebuilt_model": []
            }
        },
        "PrioritizedDDQNAgent.act": {
            "name": "act",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ]
            }
        },
        "PrioritizedDDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "np.ndarray"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "np.ndarray"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.train": {
            "name": "train",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "PrioritizedDDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritizedDDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 111,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "actions": [
                    "np.ndarray"
                ],
                "rewards": [
                    "np.ndarray"
                ],
                "next_states": [
                    "np.ndarray"
                ],
                "dones": [
                    "np.ndarray"
                ]
            }
        },
        "PrioritizedDDQNAgent.Q": {
            "name": "Q",
            "location": 125,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.policy": {
            "name": "policy",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.V": {
            "name": "V",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "np.ndarray"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.save": {
            "name": "save",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "PrioritizedDDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 154,
            "return": [
                "PrioritizedDDQNAgent"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "gamma": [
                    "float"
                ],
                "target_update_freq": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/prioritized_memory.py": {
        "SumTree.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int"
                ]
            }
        },
        "SumTree.add": {
            "name": "add",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "priority": [],
                "data": []
            }
        },
        "SumTree.update": {
            "name": "update",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_index": [
                    "int"
                ],
                "priority": []
            }
        },
        "SumTree.get_leaf": {
            "name": "get_leaf",
            "location": 46,
            "return": [
                "Tuple[(int, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "SumTree.total_priority": {
            "name": "total_priority",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumTree.max_priority": {
            "name": "max_priority",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumTree.min_priority": {
            "name": "min_priority",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SumTree.__len__": {
            "name": "__len__",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritizedMemory.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int"
                ],
                "alpha": [
                    "float"
                ],
                "beta": [
                    "float"
                ],
                "max_error": [
                    "float"
                ]
            }
        },
        "PrioritizedMemory.store": {
            "name": "store",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": []
            }
        },
        "PrioritizedMemory.sample": {
            "name": "sample",
            "location": 110,
            "return": [
                "Tuple[(Any, list, Any)]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "PrioritizedMemory.batch_update": {
            "name": "batch_update",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree_idx": [
                    "np.ndarray"
                ],
                "abs_errors": [
                    "np.ndarray"
                ]
            }
        },
        "PrioritizedMemory.__len__": {
            "name": "__len__",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my_agents-master/my_agents/agents/table_agent.py": {
        "TableAgent.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int"
                ],
                "num_states": [
                    "int"
                ],
                "gamma": [
                    "float"
                ],
                "alpha": []
            }
        },
        "TableAgent.act": {
            "name": "act",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "tuple"
                ]
            }
        },
        "TableAgent.process_observation": {
            "name": "process_observation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "tuple"
                ],
                "action": [
                    "int"
                ],
                "reward": [
                    "float"
                ],
                "next_state": [
                    "tuple"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "TableAgent.train": {
            "name": "train",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int"
                ]
            }
        },
        "TableAgent.Q": {
            "name": "Q",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TableAgent.policy": {
            "name": "policy",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TableAgent.V": {
            "name": "V",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TableAgent.print_q_map": {
            "name": "print_q_map",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my_agents-master/my_agents/core/runner.py": {
        "constant_decay_epsilon": {
            "name": "constant_decay_epsilon",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "epoch": [
                    "int"
                ],
                "initial_epsilon": [
                    "float"
                ],
                "decay_rate": [
                    "float"
                ],
                "min_epsilon": [
                    "float"
                ]
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "serializer": [],
                "agent": [],
                "epsilon_policy": [],
                "training_period": [
                    "int"
                ],
                "max_episode_steps": [
                    "int"
                ]
            }
        },
        "Runner.warm_up": {
            "name": "warm_up",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_steps": [
                    "int"
                ]
            }
        },
        "Runner.train": {
            "name": "train",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "num_epochs": [
                    "int"
                ],
                "num_episodes": [
                    "int"
                ],
                "render_frequency": [
                    "int"
                ]
            }
        },
        "Runner.demonstrate": {
            "name": "demonstrate",
            "location": 69,
            "return": [
                "Tuple[(float, Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "num_episodes": [
                    "int"
                ]
            }
        },
        "Runner.render": {
            "name": "render",
            "location": 78,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.history": {
            "name": "history",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.run_episode": {
            "name": "run_episode",
            "location": 87,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "float"
                ],
                "training": [
                    "bool"
                ],
                "render": [
                    "bool"
                ]
            }
        },
        "Runner.run_epoch": {
            "name": "run_epoch",
            "location": 119,
            "return": [
                "Tuple[(float, list, List[int], int)]"
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "float"
                ],
                "num_episodes": [
                    "int"
                ],
                "training": [
                    "bool"
                ],
                "render_frequency": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/core/states.py": {
        "one_hot": {
            "name": "one_hot",
            "location": 3,
            "return": [
                "Any"
            ],
            "arguments": {
                "size": [],
                "idx": []
            }
        },
        "StateSerializer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_shape": [
                    "tuple"
                ]
            }
        },
        "StateSerializer.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "_T0"
                ]
            }
        },
        "StateSerializer.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "_T0"
                ]
            }
        },
        "StateSerializer.shape": {
            "name": "shape",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateSerializer.from_num_states": {
            "name": "from_num_states",
            "location": 35,
            "return": [
                "StateSerializer"
            ],
            "arguments": {
                "num_states": [
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/core/visualization.py": {
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "history": [
                    "list"
                ],
                "window": [
                    "int"
                ],
                "label": [],
                "axis": [],
                "show": [
                    "bool"
                ]
            }
        }
    }
}
{
    "network-checker-master/setup.py": {},
    "network-checker-master/networkcheck/db.py": {
        "std": {
            "name": "std",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "Std.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Std.step": {
            "name": "step",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Std.finalize": {
            "name": "finalize",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "clear": [],
                "create": []
            }
        },
        "Database.__enter__": {
            "name": "__enter__",
            "location": 45,
            "return": [
                "_TDatabase@@Database@@"
            ],
            "arguments": {
                "self": [
                    "_TDatabase@@Database@@"
                ]
            }
        },
        "Database.__exit__": {
            "name": "__exit__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.setup": {
            "name": "setup",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.reset": {
            "name": "reset",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.drop_table": {
            "name": "drop_table",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [],
                "table_name": []
            }
        },
        "Database.create_tables": {
            "name": "create_tables",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": []
            }
        },
        "Database.upload_results": {
            "name": "upload_results",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": []
            }
        },
        "Database.response_times": {
            "name": "response_times",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "Database.gaps": {
            "name": "gaps",
            "location": 162,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "Database.cursor": {
            "name": "cursor",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "network-checker-master/networkcheck/logging.py": {},
    "network-checker-master/networkcheck/runs_ping.py": {
        "RunsPing.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "number": []
            }
        },
        "RunsPing.perform": {
            "name": "perform",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "host": [],
                "number": []
            }
        },
        "RunsPing.run": {
            "name": "run",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunsPing.successful_pings": {
            "name": "successful_pings",
            "location": 49,
            "return": [
                "Dict[(str, Optional[Union[(str, networkcheck.types.SummaryResult, List[networkcheck.types.PingResult])]])]"
            ],
            "arguments": {
                "p": []
            }
        },
        "RunsPing.failed_pings": {
            "name": "failed_pings",
            "location": 83,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        }
    },
    "network-checker-master/networkcheck/server.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ReverseProxied.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "ReverseProxied.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": []
            }
        },
        "main.index": {
            "name": "index",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "main.response_times": {
            "name": "response_times",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "main.response_times_limited": {
            "name": "response_times_limited",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "main.gaps": {
            "name": "gaps",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "main.gaps_limited": {
            "name": "gaps_limited",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "network-checker-master/networkcheck/types.py": {
        "PingResult.from_matchresult": {
            "name": "from_matchresult",
            "location": 21,
            "return": [
                "_TPingResult@@PingResult@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPingResult]"
                ],
                "match": []
            }
        },
        "SummaryResult.from_matchresult": {
            "name": "from_matchresult",
            "location": 39,
            "return": [
                "_TSummaryResult@@SummaryResult@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSummaryResult]"
                ],
                "match": []
            }
        }
    },
    "network-checker-master/networkcheck/upload.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-checker-master/networkcheck/version.py": {},
    "network-checker-master/networkcheck/__init__.py": {},
    "network-checker-master/testing/test_parsing.py": {
        "macos_process": {
            "name": "macos_process",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "rpi_output": {
            "name": "rpi_output",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "TestOutputParsing.test_parse_macos_output": {
            "name": "test_parse_macos_output",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "macos_process": []
            }
        },
        "TestOutputParsing.test_parse_rpi_output": {
            "name": "test_parse_rpi_output",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpi_output": []
            }
        }
    }
}
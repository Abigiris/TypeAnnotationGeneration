{
    "neuralmonkey-experiments-master/docs/source/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "neuralmonkey-experiments-master/lib/__init__.py": {},
    "neuralmonkey-experiments-master/lib/subword_nmt/apply_bpe.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 53,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_pairs": {
            "name": "get_pairs",
            "location": 76,
            "return": [
                "Set[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "word": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "orig": [],
                "bpe_codes": [],
                "cache": []
            }
        },
        "BPE.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "codes": [],
                "separator": []
            }
        },
        "BPE.segment": {
            "name": "segment",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        }
    },
    "neuralmonkey-experiments-master/lib/subword_nmt/bpe_toy.py": {
        "get_stats": {
            "name": "get_stats",
            "location": 21,
            "return": [
                "collections.defaultdict[(Tuple[(Any, Any)], Any)]"
            ],
            "arguments": {
                "vocab": []
            }
        },
        "merge_vocab": {
            "name": "merge_vocab",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pair": [],
                "v_in": []
            }
        }
    },
    "neuralmonkey-experiments-master/lib/subword_nmt/chrF.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 30,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "extract_ngrams": {
            "name": "extract_ngrams",
            "location": 63,
            "return": [
                "collections.defaultdict[(int, Any)]"
            ],
            "arguments": {
                "words": [],
                "max_length": [],
                "spaces": []
            }
        },
        "get_correct": {
            "name": "get_correct",
            "location": 79,
            "return": [
                "Tuple[(_T2, _T3)]"
            ],
            "arguments": {
                "ngrams_ref": [],
                "ngrams_test": [],
                "correct": [
                    "_T2"
                ],
                "total": [
                    "_T3"
                ]
            }
        },
        "f1": {
            "name": "f1",
            "location": 90,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "correct": [],
                "total_hyp": [],
                "total_ref": [],
                "max_length": [],
                "beta": [],
                "smooth": []
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "neuralmonkey-experiments-master/lib/subword_nmt/get_vocab.py": {},
    "neuralmonkey-experiments-master/lib/subword_nmt/learn_bpe.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 33,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "get_vocabulary": {
            "name": "get_vocabulary",
            "location": 55,
            "return": [
                "Counter"
            ],
            "arguments": {
                "fobj": []
            }
        },
        "update_pair_statistics": {
            "name": "update_pair_statistics",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "pair": [],
                "changed": [],
                "stats": [],
                "indices": []
            }
        },
        "get_pair_statistics": {
            "name": "get_pair_statistics",
            "location": 116,
            "return": [
                "Tuple[(collections.defaultdict[(Tuple[(Any, Any)], Any)], collections.defaultdict[(Tuple[(Any, Any)], Any)])]"
            ],
            "arguments": {
                "vocab": []
            }
        },
        "replace_pair": {
            "name": "replace_pair",
            "location": 135,
            "return": [
                "List[Tuple[(Any, Tuple[(str, ...)], Any, Any)]]"
            ],
            "arguments": {
                "pair": [],
                "vocab": [],
                "indices": []
            }
        },
        "prune_stats": {
            "name": "prune_stats",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "stats": [],
                "big_stats": [],
                "threshold": []
            }
        }
    },
    "neuralmonkey-experiments-master/lib/subword_nmt/segment-char-ngrams.py": {
        "create_parser": {
            "name": "create_parser",
            "location": 21,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/lib/subword_nmt/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/checking.py": {
        "check_dataset_and_coders": {
            "name": "check_dataset_and_coders",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "runners": [
                    "Iterable[neuralmonkey.runners.base_runner.BaseRunner]"
                ]
            }
        },
        "assert_shape": {
            "name": "assert_shape",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor": [],
                "expected_shape": [
                    "List[Optional[int]]"
                ]
            }
        },
        "assert_same_shape": {
            "name": "assert_same_shape",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor_a": [],
                "tensor_b": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/checkpython.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/dataset.py": {
        "from_files": {
            "name": "from_files",
            "location": 325,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "lazy": [
                    "bool"
                ],
                "preprocessors": [
                    "List[Tuple[(str, str, Callable)]]"
                ]
            }
        },
        "_get_name_from_paths": {
            "name": "_get_name_from_paths",
            "location": 391,
            "return": [
                "str"
            ],
            "arguments": {
                "series_paths": [
                    "Dict[(str, Tuple[(List[str], Callable[([List[str]], Any)])])]"
                ]
            }
        },
        "_get_series_paths_and_readers": {
            "name": "_get_series_paths_and_readers",
            "location": 408,
            "return": [
                "Dict[(str, Tuple[(List[str], Callable[([List[str]], Any)])])]"
            ],
            "arguments": {
                "series_config": [
                    "Dict[(str, Union[(Callable[([Dataset], Iterable)], str, List[str], Tuple[(Union[(str, List[str])], Callable[([List[str]], Any)])])])]"
                ]
            }
        },
        "_get_series_outputs": {
            "name": "_get_series_outputs",
            "location": 460,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "series_config": [
                    "Dict[(str, Union[(Callable[([Dataset], Iterable)], str, List[str], Tuple[(Union[(str, List[str])], Callable[([List[str]], Any)])])])]"
                ]
            }
        },
        "_preprocessed_datasets": {
            "name": "_preprocessed_datasets",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": [
                    "Dataset"
                ],
                "series_config": [
                    "Dict[(str, Union[(Callable[([Dataset], Iterable)], str, List[str], Tuple[(Union[(str, List[str])], Callable[([List[str]], Any)])])])]"
                ]
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "series": [
                    "Dict[(str, list)]"
                ],
                "series_outputs": [
                    "Dict[(str, str)]"
                ],
                "preprocessors": [
                    "List[Tuple[(str, str, Callable)]]"
                ]
            }
        },
        "Dataset._check_series_lengths": {
            "name": "_check_series_lengths",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.has_series": {
            "name": "has_series",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Dataset.get_series": {
            "name": "get_series",
            "location": 113,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "allow_none": [
                    "bool"
                ]
            }
        },
        "Dataset.series_ids": {
            "name": "series_ids",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.shuffle": {
            "name": "shuffle",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.batch_serie": {
            "name": "batch_serie",
            "location": 146,
            "return": [
                "Iterable[Iterable]"
            ],
            "arguments": {
                "self": [],
                "serie_name": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Dataset.batch_dataset": {
            "name": "batch_dataset",
            "location": 166,
            "return": [
                "Iterable[Dataset]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "Dataset.add_series": {
            "name": "add_series",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "series": [
                    "list"
                ]
            }
        },
        "Dataset.subset": {
            "name": "subset",
            "location": 192,
            "return": [
                "_TDataset"
            ],
            "arguments": {
                "self": [
                    "_TDataset"
                ],
                "start": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "LazyDataset.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "series_paths_and_readers": [
                    "Dict[(str, Tuple[(List[str], Callable[([List[str]], Any)])])]"
                ],
                "series_outputs": [
                    "Dict[(str, str)]"
                ],
                "preprocessors": [
                    "List[Tuple[(str, str, Callable)]]"
                ]
            }
        },
        "LazyDataset.has_series": {
            "name": "has_series",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "LazyDataset.get_series": {
            "name": "get_series",
            "location": 263,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "allow_none": [
                    "bool"
                ]
            }
        },
        "LazyDataset.shuffle": {
            "name": "shuffle",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyDataset.series_ids": {
            "name": "series_ids",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyDataset.add_series": {
            "name": "add_series",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "series": [
                    "Iterable"
                ]
            }
        },
        "LazyDataset.subset": {
            "name": "subset",
            "location": 312,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decorators.py": {
        "tensor": {
            "name": "tensor",
            "location": 6,
            "return": [
                "property"
            ],
            "arguments": {
                "func": []
            }
        },
        "tensor.decorate": {
            "name": "decorate",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/experiment.py": {
        "create_config": {
            "name": "create_config",
            "location": 315,
            "return": [
                "neuralmonkey.config.configuration.Configuration"
            ],
            "arguments": {
                "train_mode": [
                    "bool"
                ]
            }
        },
        "save_git_info": {
            "name": "save_git_info",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "git_commit_file": [
                    "str"
                ],
                "git_diff_file": [
                    "str"
                ],
                "branch": [
                    "str"
                ],
                "repo_dir": [
                    "str"
                ]
            }
        },
        "visualize_embeddings": {
            "name": "visualize_embeddings",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "sequences": [
                    "List[neuralmonkey.model.sequence.EmbeddedFactorSequence]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "Experiment.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": [
                    "str"
                ],
                "train_mode": [
                    "bool"
                ],
                "overwrite_output_dir": [
                    "bool"
                ],
                "config_changes": [
                    "List[str]"
                ]
            }
        },
        "Experiment.build_model": {
            "name": "build_model",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.train": {
            "name": "train",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.load_variables": {
            "name": "load_variables",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_files": [
                    "List[str]"
                ]
            }
        },
        "Experiment.run_model": {
            "name": "run_model",
            "location": 207,
            "return": [
                "Tuple[(List[neuralmonkey.runners.base_runner.ExecutionResult], Dict[(str, list)])]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "write_out": [
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "log_progress": [
                    "int"
                ]
            }
        },
        "Experiment.evaluate": {
            "name": "evaluate",
            "location": 238,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "write_out": [
                    "bool"
                ],
                "batch_size": [
                    "int"
                ],
                "log_progress": [
                    "int"
                ]
            }
        },
        "Experiment.get_path": {
            "name": "get_path",
            "location": 271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "cont_index": [
                    "int"
                ]
            }
        },
        "Experiment.update_initializers": {
            "name": "update_initializers",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initializers": [
                    "Iterable[Tuple[(str, Callable)]]"
                ]
            }
        },
        "Experiment.get_initializer": {
            "name": "get_initializer",
            "location": 289,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "Experiment._check_unused_initializers": {
            "name": "_check_unused_initializers",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.get_current": {
            "name": "get_current",
            "location": 310,
            "return": [
                "_TExperiment"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExperiment]"
                ]
            }
        },
        "_DummyExperiment.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DummyExperiment.update_initializers": {
            "name": "update_initializers",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initializers": [
                    "Iterable[Tuple[(str, Callable)]]"
                ]
            }
        },
        "_DummyExperiment.get_initializer": {
            "name": "get_initializer",
            "location": 375,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "var_name": [
                    "str"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "_DummyExperiment._warn": {
            "name": "_warn",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/functions.py": {
        "inverse_sigmoid_decay": {
            "name": "inverse_sigmoid_decay",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "param": [],
                "rate": [],
                "min_value": [
                    "float"
                ],
                "max_value": [
                    "float"
                ],
                "name": [
                    "Optional[str]"
                ],
                "dtype": []
            }
        },
        "piecewise_function": {
            "name": "piecewise_function",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "param": [],
                "values": [],
                "changepoints": [],
                "name": [],
                "dtype": []
            }
        },
        "noam_decay": {
            "name": "noam_decay",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "learning_rate": [
                    "float"
                ],
                "model_dimension": [
                    "int"
                ],
                "warmup_steps": [
                    "int"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/learning_utils.py": {
        "training_loop": {
            "name": "training_loop",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tf_manager": [
                    "neuralmonkey.tf_manager.TensorFlowManager"
                ],
                "epochs": [
                    "int"
                ],
                "trainer": [
                    "neuralmonkey.trainers.generic_trainer.GenericTrainer"
                ],
                "batch_size": [
                    "int"
                ],
                "log_directory": [
                    "str"
                ],
                "evaluators": [
                    "List[tuple]"
                ],
                "runners": [
                    "List[neuralmonkey.runners.base_runner.BaseRunner]"
                ],
                "train_dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "val_dataset": [
                    "Union[(neuralmonkey.dataset.Dataset, List[neuralmonkey.dataset.Dataset])]"
                ],
                "test_datasets": [
                    "Optional[List[neuralmonkey.dataset.Dataset]]"
                ],
                "logging_period": [
                    "Union[(int, str)]"
                ],
                "validation_period": [
                    "Union[(int, str)]"
                ],
                "val_preview_input_series": [
                    "Optional[List[str]]"
                ],
                "val_preview_output_series": [
                    "Optional[List[str]]"
                ],
                "val_preview_num_examples": [
                    "int"
                ],
                "train_start_offset": [
                    "int"
                ],
                "runners_batch_size": [
                    "Optional[int]"
                ],
                "initial_variables": [
                    "Optional[Union[(str, List[str])]]"
                ],
                "postprocess": [
                    "Optional[List[Tuple[(str, Callable)]]]"
                ]
            }
        },
        "_is_logging_time": {
            "name": "_is_logging_time",
            "location": 307,
            "return": [
                "bool"
            ],
            "arguments": {
                "step": [
                    "int"
                ],
                "logging_period_batch": [
                    "int"
                ],
                "last_log_time": [
                    "float"
                ],
                "logging_period_time": [
                    "int"
                ]
            }
        },
        "_resolve_period": {
            "name": "_resolve_period",
            "location": 314,
            "return": [
                "Tuple[(Optional[_T0], Optional[float])]"
            ],
            "arguments": {
                "period": [
                    "_T0"
                ]
            }
        },
        "_check_series_collisions": {
            "name": "_check_series_collisions",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "runners": [
                    "List[neuralmonkey.runners.base_runner.BaseRunner]"
                ],
                "postprocess": [
                    "Optional[List[Tuple[(str, Callable)]]]"
                ]
            }
        },
        "run_on_dataset": {
            "name": "run_on_dataset",
            "location": 361,
            "return": [
                "Tuple[(List[neuralmonkey.runners.base_runner.ExecutionResult], Dict[(str, list)])]"
            ],
            "arguments": {
                "tf_manager": [
                    "neuralmonkey.tf_manager.TensorFlowManager"
                ],
                "runners": [
                    "List[neuralmonkey.runners.base_runner.BaseRunner]"
                ],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "postprocess": [
                    "Optional[List[Tuple[(str, Callable)]]]"
                ],
                "write_out": [
                    "bool"
                ],
                "batch_size": [
                    "Optional[int]"
                ],
                "log_progress": [
                    "int"
                ]
            }
        },
        "evaluation": {
            "name": "evaluation",
            "location": 438,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "evaluators": [],
                "dataset": [],
                "runners": [],
                "execution_results": [],
                "result_data": []
            }
        },
        "_log_continuous_evaluation": {
            "name": "_log_continuous_evaluation",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "tb_writer": [],
                "main_metric": [
                    "str"
                ],
                "eval_result": [
                    "Dict[(str, float)]"
                ],
                "seen_instances": [
                    "int"
                ],
                "epoch": [
                    "int"
                ],
                "max_epochs": [
                    "int"
                ],
                "execution_results": [
                    "List[neuralmonkey.runners.base_runner.ExecutionResult]"
                ],
                "train": [
                    "bool"
                ],
                "dataset_name": [
                    "str"
                ]
            }
        },
        "_format_evaluation_line": {
            "name": "_format_evaluation_line",
            "location": 510,
            "return": [
                "str"
            ],
            "arguments": {
                "evaluation_res": [
                    "Dict[(str, float)]"
                ],
                "main_metric": [
                    "str"
                ]
            }
        },
        "print_final_evaluation": {
            "name": "print_final_evaluation",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "eval_result": [
                    "Dict[(str, float)]"
                ]
            }
        },
        "_data_item_to_str": {
            "name": "_data_item_to_str",
            "location": 537,
            "return": [
                "str"
            ],
            "arguments": {
                "item": []
            }
        },
        "_print_examples": {
            "name": "_print_examples",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "outputs": [
                    "Dict[(str, list)]"
                ],
                "val_preview_input_series": [
                    "Optional[List[str]]"
                ],
                "val_preview_output_series": [
                    "Optional[List[str]]"
                ],
                "num_examples": []
            }
        },
        "_skip_lines": {
            "name": "_skip_lines",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "start_offset": [
                    "int"
                ],
                "batched_datasets": [
                    "Iterable[neuralmonkey.dataset.Dataset]"
                ]
            }
        },
        "_log_model_variables": {
            "name": "_log_model_variables",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "var_list": [
                    "list"
                ]
            }
        },
        "_print_examples.print_line": {
            "name": "print_line",
            "location": 605,
            "return": [],
            "arguments": {
                "prefix": [],
                "color": [],
                "content": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/logging.py": {
        "Logging._get_time": {
            "name": "_get_time",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Logging.set_log_file": {
            "name": "set_log_file",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Logging.log_print": {
            "name": "log_print",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Logging.log": {
            "name": "log",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "color": [
                    "str"
                ]
            }
        },
        "Logging.notice": {
            "name": "notice",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "Logging.warn": {
            "name": "warn",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "Logging.print_header": {
            "name": "print_header",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Logging.debug": {
            "name": "debug",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "label": [
                    "Optional[str]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/run.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tf_manager.py": {
        "_feed_dicts": {
            "name": "_feed_dicts",
            "location": 292,
            "return": [
                "dict"
            ],
            "arguments": {
                "dataset": [],
                "coders": [],
                "train": []
            }
        },
        "get_default_tf_manager": {
            "name": "get_default_tf_manager",
            "location": 306,
            "return": [
                "TensorFlowManager"
            ],
            "arguments": {}
        },
        "TensorFlowManager.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_sessions": [
                    "int"
                ],
                "num_threads": [
                    "int"
                ],
                "save_n_best": [
                    "int"
                ],
                "minimize_metric": [
                    "bool"
                ],
                "variable_files": [
                    "Optional[List[str]]"
                ],
                "gpu_allow_growth": [
                    "bool"
                ],
                "per_process_gpu_memory_fraction": [
                    "float"
                ],
                "enable_tf_debug": [
                    "bool"
                ]
            }
        },
        "TensorFlowManager._is_better": {
            "name": "_is_better",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        },
        "TensorFlowManager._argworst": {
            "name": "_argworst",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "List[float]"
                ]
            }
        },
        "TensorFlowManager._update_best_vars": {
            "name": "_update_best_vars",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var_index": [
                    "int"
                ]
            }
        },
        "TensorFlowManager.init_saving": {
            "name": "init_saving",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vars_prefix": [
                    "str"
                ]
            }
        },
        "TensorFlowManager.validation_hook": {
            "name": "validation_hook",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "float"
                ],
                "epoch": [
                    "int"
                ],
                "batch": [
                    "int"
                ]
            }
        },
        "TensorFlowManager._run_executables": {
            "name": "_run_executables",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch": [],
                "executables": [],
                "train": []
            }
        },
        "TensorFlowManager.execute": {
            "name": "execute",
            "location": 210,
            "return": [
                "List[neuralmonkey.runners.base_runner.ExecutionResult]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "execution_scripts": [],
                "train": [],
                "compute_losses": [],
                "summaries": [],
                "batch_size": [],
                "log_progress": [
                    "int"
                ]
            }
        },
        "TensorFlowManager.save": {
            "name": "save",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_files": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "TensorFlowManager.restore": {
            "name": "restore",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_files": [
                    "Union[(str, List[str])]"
                ]
            }
        },
        "TensorFlowManager.restore_best_vars": {
            "name": "restore_best_vars",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowManager.initialize_model_parts": {
            "name": "initialize_model_parts",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runners": [],
                "save": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tf_utils.py": {
        "_get_current_experiment": {
            "name": "_get_current_experiment",
            "location": 9,
            "return": [
                "neuralmonkey.experiment.Experiment"
            ],
            "arguments": {}
        },
        "update_initializers": {
            "name": "update_initializers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "initializers": [
                    "Iterable[Tuple[(str, Callable)]]"
                ]
            }
        },
        "get_initializer": {
            "name": "get_initializer",
            "location": 19,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "var_name": [
                    "str"
                ],
                "default": [
                    "Callable"
                ]
            }
        },
        "get_variable": {
            "name": "get_variable",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "shape": [
                    "List[Optional[int]]"
                ],
                "dtype": [],
                "initializer": [
                    "Callable"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/train.py": {
        "_main": {
            "name": "_main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/vocabulary.py": {
        "_is_special_token": {
            "name": "_is_special_token",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "from_file": {
            "name": "from_file",
            "location": 52,
            "return": [
                "Vocabulary"
            ],
            "arguments": {}
        },
        "from_wordlist": {
            "name": "from_wordlist",
            "location": 57,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "contains_header": [
                    "bool"
                ],
                "contains_frequencies": [
                    "bool"
                ]
            }
        },
        "from_nematus_json": {
            "name": "from_nematus_json",
            "location": 114,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "max_size": [
                    "int"
                ],
                "pad_to_max_size": [
                    "bool"
                ]
            }
        },
        "from_dataset": {
            "name": "from_dataset",
            "location": 144,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "datasets": [
                    "List[neuralmonkey.dataset.Dataset]"
                ],
                "series_ids": [
                    "List[str]"
                ],
                "max_size": [
                    "int"
                ],
                "save_file": [
                    "str"
                ],
                "overwrite": [
                    "bool"
                ],
                "min_freq": [
                    "Optional[int]"
                ],
                "unk_sample_prob": [
                    "float"
                ]
            }
        },
        "from_bpe": {
            "name": "from_bpe",
            "location": 204,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "initialize_vocabulary": {
            "name": "initialize_vocabulary",
            "location": 243,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "datasets": [
                    "List[neuralmonkey.dataset.Dataset]"
                ],
                "series_ids": [
                    "List[str]"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenized_text": [
                    "List[str]"
                ],
                "unk_sample_prob": [
                    "float"
                ]
            }
        },
        "Vocabulary.__len__": {
            "name": "__len__",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.__contains__": {
            "name": "__contains__",
            "location": 320,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Vocabulary.add_word": {
            "name": "add_word",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ],
                "occurences": [
                    "int"
                ]
            }
        },
        "Vocabulary.add_tokenized_text": {
            "name": "add_tokenized_text",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenized_text": [
                    "List[str]"
                ]
            }
        },
        "Vocabulary.get_word_index": {
            "name": "get_word_index",
            "location": 353,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str"
                ]
            }
        },
        "Vocabulary.get_unk_sampled_word_index": {
            "name": "get_unk_sampled_word_index",
            "location": 367,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Vocabulary.truncate": {
            "name": "truncate",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "Vocabulary.truncate_by_min_freq": {
            "name": "truncate_by_min_freq",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_freq": [
                    "int"
                ]
            }
        },
        "Vocabulary.sentences_to_tensor": {
            "name": "sentences_to_tensor",
            "location": 454,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[List[str]]"
                ],
                "max_len": [
                    "int"
                ],
                "pad_to_max_len": [
                    "bool"
                ],
                "train_mode": [
                    "bool"
                ],
                "add_start_symbol": [
                    "bool"
                ],
                "add_end_symbol": [
                    "bool"
                ]
            }
        },
        "Vocabulary.vectors_to_sentences": {
            "name": "vectors_to_sentences",
            "location": 529,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "vectors": [
                    "Union[(np.ndarray, List[np.ndarray])]"
                ]
            }
        },
        "Vocabulary.save_wordlist": {
            "name": "save_wordlist",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "overwrite": [
                    "bool"
                ],
                "save_frequencies": [
                    "bool"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "Vocabulary.log_sample": {
            "name": "log_sample",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/attention/base_attention.py": {
        "empty_attention_loop_state": {
            "name": "empty_attention_loop_state",
            "location": 42,
            "return": [
                "AttentionLoopStateTA"
            ],
            "arguments": {}
        },
        "get_attention_states": {
            "name": "get_attention_states",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ]
            }
        },
        "get_attention_mask": {
            "name": "get_attention_mask",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ]
            }
        },
        "BaseAttention.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "BaseAttention.histories": {
            "name": "histories",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAttention.attention": {
            "name": "attention",
            "location": 113,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [],
                "step": []
            }
        },
        "BaseAttention.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAttention.finalize_loop": {
            "name": "finalize_loop",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": []
            }
        },
        "BaseAttention.feed_dict": {
            "name": "feed_dict",
            "location": 129,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "BaseAttention.context_vector_size": {
            "name": "context_vector_size",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseAttention.visualize_attention": {
            "name": "visualize_attention",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/combination.py": {
        "_sentinel": {
            "name": "_sentinel",
            "location": 294,
            "return": [
                "Any"
            ],
            "arguments": {
                "state": [],
                "prev_state": [],
                "input_": []
            }
        },
        "MultiAttention.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "attention_state_size": [
                    "int"
                ],
                "share_attn_projections": [
                    "bool"
                ],
                "use_sentinels": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "MultiAttention.attention": {
            "name": "attention",
            "location": 56,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [],
                "step": []
            }
        },
        "MultiAttention.attn_size": {
            "name": "attn_size",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiAttention._vector_logit": {
            "name": "_vector_logit",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "projected_decoder_state": [],
                "vector_value": [],
                "scope": [
                    "str"
                ]
            }
        },
        "FlatMultiAttention.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoders": [
                    "List[Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]]"
                ],
                "attention_state_size": [
                    "int"
                ],
                "share_attn_projections": [
                    "bool"
                ],
                "use_sentinels": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "FlatMultiAttention.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 172,
            "return": [
                "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatMultiAttention.get_encoder_projections": {
            "name": "get_encoder_projections",
            "location": 175,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "FlatMultiAttention.context_vector_size": {
            "name": "context_vector_size",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlatMultiAttention.attention": {
            "name": "attention",
            "location": 212,
            "return": [
                "Tuple[(Any, neuralmonkey.attention.base_attention.AttentionLoopStateTA)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ],
                "step": []
            }
        },
        "FlatMultiAttention._tile_encoders_for_beamsearch": {
            "name": "_tile_encoders_for_beamsearch",
            "location": 265,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "projected_sentinel": []
            }
        },
        "FlatMultiAttention._renorm_softmax": {
            "name": "_renorm_softmax",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "logits": []
            }
        },
        "FlatMultiAttention.finalize_loop": {
            "name": "finalize_loop",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ]
            }
        },
        "HierarchicalMultiAttention.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "attentions": [
                    "List[neuralmonkey.attention.base_attention.BaseAttention]"
                ],
                "attention_state_size": [
                    "int"
                ],
                "use_sentinels": [
                    "bool"
                ],
                "share_attn_projections": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "HierarchicalMultiAttention.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 352,
            "return": [
                "HierarchicalLoopState"
            ],
            "arguments": {
                "self": []
            }
        },
        "HierarchicalMultiAttention.attention": {
            "name": "attention",
            "location": 359,
            "return": [
                "Tuple[(Any, HierarchicalLoopState)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [
                    "HierarchicalLoopState"
                ],
                "step": []
            }
        },
        "HierarchicalMultiAttention.finalize_loop": {
            "name": "finalize_loop",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": []
            }
        },
        "HierarchicalMultiAttention.context_vector_size": {
            "name": "context_vector_size",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/coverage.py": {
        "CoverageAttention.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "state_size": [
                    "int"
                ],
                "max_fertility": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "CoverageAttention.get_energies": {
            "name": "get_energies",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "weights_in_time": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/feed_forward.py": {
        "Attention.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "state_size": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "Attention.attention_states": {
            "name": "attention_states",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.attention_mask": {
            "name": "attention_mask",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.context_vector_size": {
            "name": "context_vector_size",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.state_size": {
            "name": "state_size",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.query_projection_matrix": {
            "name": "query_projection_matrix",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.key_projection_matrix": {
            "name": "key_projection_matrix",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.similarity_bias_vector": {
            "name": "similarity_bias_vector",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.projection_bias_vector": {
            "name": "projection_bias_vector",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.bias_term": {
            "name": "bias_term",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention._att_states_reshaped": {
            "name": "_att_states_reshaped",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.hidden_features": {
            "name": "hidden_features",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attention.get_energies": {
            "name": "get_energies",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "_": []
            }
        },
        "Attention.attention": {
            "name": "attention",
            "location": 124,
            "return": [
                "Tuple[(Any, neuralmonkey.attention.base_attention.AttentionLoopStateTA)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ],
                "step": []
            }
        },
        "Attention.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 163,
            "return": [
                "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attention.finalize_loop": {
            "name": "finalize_loop",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/scaled_dot_product.py": {
        "split_for_heads": {
            "name": "split_for_heads",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "n_heads": [
                    "int"
                ],
                "head_dim": [
                    "int"
                ]
            }
        },
        "mask_weights": {
            "name": "mask_weights",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "weights_4d": [],
                "mask": []
            }
        },
        "mask_future": {
            "name": "mask_future",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "energies": []
            }
        },
        "attention": {
            "name": "attention",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "queries": [],
                "keys": [],
                "values": [],
                "keys_mask": [],
                "num_heads": [
                    "int"
                ],
                "dropout_callback": [
                    "Callable[([Any], Any)]"
                ],
                "masked": [
                    "bool"
                ]
            }
        },
        "empty_multi_head_loop_state": {
            "name": "empty_multi_head_loop_state",
            "location": 202,
            "return": [
                "MultiHeadLoopStateTA"
            ],
            "arguments": {
                "num_heads": [
                    "int"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "n_heads": [
                    "int"
                ],
                "keys_encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "values_encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "MultiHeadAttention.attention": {
            "name": "attention",
            "location": 245,
            "return": [
                "Tuple[(Any, MultiHeadLoopStateTA)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [
                    "MultiHeadLoopStateTA"
                ],
                "step": []
            }
        },
        "MultiHeadAttention.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 299,
            "return": [
                "MultiHeadLoopStateTA"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.finalize_loop": {
            "name": "finalize_loop",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": [
                    "MultiHeadLoopStateTA"
                ]
            }
        },
        "MultiHeadAttention.context_vector_size": {
            "name": "context_vector_size",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.visualize_attention": {
            "name": "visualize_attention",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ScaledDotProdAttention.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "keys_encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "values_encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/stateful_context.py": {
        "StatefulContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "neuralmonkey.model.stateful.Stateful"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "StatefulContext.attention_states": {
            "name": "attention_states",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulContext.attention_mask": {
            "name": "attention_mask",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulContext.context_vector_size": {
            "name": "context_vector_size",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulContext.state_size": {
            "name": "state_size",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulContext.attention": {
            "name": "attention",
            "location": 58,
            "return": [
                "Tuple[(Any, neuralmonkey.attention.base_attention.AttentionLoopStateTA)]"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "decoder_prev_state": [],
                "decoder_input": [],
                "loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ],
                "step": []
            }
        },
        "StatefulContext.initial_loop_state": {
            "name": "initial_loop_state",
            "location": 74,
            "return": [
                "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatefulContext.finalize_loop": {
            "name": "finalize_loop",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "last_loop_state": [
                    "neuralmonkey.attention.base_attention.AttentionLoopStateTA"
                ]
            }
        },
        "StatefulContext.visualize_attention": {
            "name": "visualize_attention",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/attention/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/config/builder.py": {
        "build_object": {
            "name": "build_object",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "all_dicts": [
                    "Dict[(str, Any)]"
                ],
                "existing_objects": [
                    "Dict[(str, Any)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "instantiate_class": {
            "name": "instantiate_class",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "all_dicts": [
                    "Dict[(str, Any)]"
                ],
                "existing_objects": [
                    "Dict[(str, Any)]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "build_config": {
            "name": "build_config",
            "location": 190,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "config_dicts": [
                    "Dict[(str, Any)]"
                ],
                "ignore_names": [
                    "Set[str]"
                ],
                "warn_unused": [
                    "bool"
                ]
            }
        },
        "ClassSymbol.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "ClassSymbol.create": {
            "name": "create",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectRef.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ]
            }
        },
        "ObjectRef.bind": {
            "name": "bind",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ObjectRef.target": {
            "name": "target",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/config/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.add_argument": {
            "name": "add_argument",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "required": [
                    "bool"
                ],
                "default": [],
                "cond": [
                    "Callable[([Any], bool)]"
                ]
            }
        },
        "Configuration.ignore_argument": {
            "name": "ignore_argument",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Configuration.make_namespace": {
            "name": "make_namespace",
            "location": 48,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": [],
                "d_obj": []
            }
        },
        "Configuration.load_file": {
            "name": "load_file",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "changes": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Configuration.build_model": {
            "name": "build_model",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "warn_unused": []
            }
        },
        "Configuration._check_loaded_conf": {
            "name": "_check_loaded_conf",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.save_file": {
            "name": "save_file",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/config/exceptions.py": {
        "IniError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int"
                ],
                "message": [
                    "str"
                ],
                "original_exc": [
                    "Optional[Exception]"
                ]
            }
        },
        "IniError.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigInvalidValueException.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "message": [
                    "str"
                ]
            }
        },
        "ConfigInvalidValueException.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigBuildException.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_name": [
                    "str"
                ],
                "original_exception": [
                    "Exception"
                ]
            }
        },
        "ConfigBuildException.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/config/parsing.py": {
        "_keyval_parser_dict": {
            "name": "_keyval_parser_dict",
            "location": 39,
            "return": [
                "Dict[(Any, Callable)]"
            ],
            "arguments": {}
        },
        "_split_on_commas": {
            "name": "_split_on_commas",
            "location": 69,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_parse_string": {
            "name": "_parse_string",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "vars_dict": [
                    "VarsDict"
                ]
            }
        },
        "_parse_list": {
            "name": "_parse_list",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "vars_dict": [
                    "VarsDict"
                ]
            }
        },
        "_parse_tuple": {
            "name": "_parse_tuple",
            "location": 123,
            "return": [
                "tuple"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "vars_dict": [
                    "VarsDict"
                ]
            }
        },
        "_parse_class_name": {
            "name": "_parse_class_name",
            "location": 132,
            "return": [
                "neuralmonkey.config.builder.ClassSymbol"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "vars_dict": [
                    "VarsDict"
                ]
            }
        },
        "_parse_value": {
            "name": "_parse_value",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "vars_dict": [
                    "VarsDict"
                ]
            }
        },
        "_parse_ini": {
            "name": "_parse_ini",
            "location": 156,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "config_file": [
                    "Iterable[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "_apply_change": {
            "name": "_apply_change",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "config_dict": [
                    "Dict[(str, Any)]"
                ],
                "setting": [
                    "str"
                ]
            }
        },
        "parse_file": {
            "name": "parse_file",
            "location": 196,
            "return": [
                "Tuple[(Dict[(str, Any)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "config_file": [
                    "Iterable[str]"
                ],
                "changes": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "config_dict": [
                    "Dict[(str, Any)]"
                ],
                "config_file": [
                    "IO[str]"
                ]
            }
        },
        "VarsDict.__missing__": {
            "name": "__missing__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "parse_file.parse_section": {
            "name": "parse_section",
            "location": 212,
            "return": [],
            "arguments": {
                "section": [],
                "output_dict": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/config/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/decoders/autoregressive.py": {
        "extend_namedtuple": {
            "name": "extend_namedtuple",
            "location": 24,
            "return": [
                "type"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "parent": [
                    "type"
                ],
                "fields": [
                    "List[Tuple[(str, type)]]"
                ]
            }
        },
        "AutoregressiveDecoder.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "max_output_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "embedding_size": [
                    "int"
                ],
                "embeddings_source": [
                    "neuralmonkey.model.sequence.EmbeddedSequence"
                ],
                "tie_embeddings": [
                    "bool"
                ],
                "label_smoothing": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "AutoregressiveDecoder.batch_size": {
            "name": "batch_size",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.decoding_w": {
            "name": "decoding_w",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.decoding_b": {
            "name": "decoding_b",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.embedding_matrix": {
            "name": "embedding_matrix",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.get_logits": {
            "name": "get_logits",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AutoregressiveDecoder.train_loop_result": {
            "name": "train_loop_result",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.train_logits": {
            "name": "train_logits",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.train_output_states": {
            "name": "train_output_states",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.train_logprobs": {
            "name": "train_logprobs",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.train_xents": {
            "name": "train_xents",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.train_loss": {
            "name": "train_loss",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.cost": {
            "name": "cost",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_loop_result": {
            "name": "runtime_loop_result",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_logits": {
            "name": "runtime_logits",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_output_states": {
            "name": "runtime_output_states",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_mask": {
            "name": "runtime_mask",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.decoded": {
            "name": "decoded",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_xents": {
            "name": "runtime_xents",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_loss": {
            "name": "runtime_loss",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.runtime_logprobs": {
            "name": "runtime_logprobs",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.output_dimension": {
            "name": "output_dimension",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.get_initial_loop_state": {
            "name": "get_initial_loop_state",
            "location": 289,
            "return": [
                "LoopState"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.loop_continue_criterion": {
            "name": "loop_continue_criterion",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveDecoder.get_body": {
            "name": "get_body",
            "location": 336,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "train_mode": [
                    "bool"
                ],
                "sample": [
                    "bool"
                ]
            }
        },
        "AutoregressiveDecoder.finalize_loop": {
            "name": "finalize_loop",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "final_loop_state": [
                    "LoopState"
                ],
                "train_mode": [
                    "bool"
                ]
            }
        },
        "AutoregressiveDecoder.decoding_loop": {
            "name": "decoding_loop",
            "location": 351,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "train_mode": [
                    "bool"
                ],
                "sample": [
                    "bool"
                ]
            }
        },
        "AutoregressiveDecoder.feed_dict": {
            "name": "feed_dict",
            "location": 387,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/beam_search_decoder.py": {
        "BeamSearchDecoder.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parent_decoder": [
                    "neuralmonkey.decoders.autoregressive.AutoregressiveDecoder"
                ],
                "beam_size": [
                    "int"
                ],
                "length_normalization": [
                    "float"
                ],
                "max_steps": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "BeamSearchDecoder.batch_size": {
            "name": "batch_size",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.beam_size": {
            "name": "beam_size",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.vocabulary": {
            "name": "vocabulary",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.search_state": {
            "name": "search_state",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.decoder_state": {
            "name": "decoder_state",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.max_steps": {
            "name": "max_steps",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.get_initial_loop_state": {
            "name": "get_initial_loop_state",
            "location": 141,
            "return": [
                "BeamSearchLoopState"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder._decoding_loop": {
            "name": "_decoding_loop",
            "location": 175,
            "return": [
                "BeamSearchOutput"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.get_body": {
            "name": "get_body",
            "location": 231,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchDecoder.feed_dict": {
            "name": "feed_dict",
            "location": 442,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "BeamSearchDecoder._length_penalty": {
            "name": "_length_penalty",
            "location": 451,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lengths": []
            }
        },
        "BeamSearchDecoder._decoding_loop.cond": {
            "name": "cond",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "BeamSearchDecoder.get_body.body": {
            "name": "body",
            "location": 236,
            "return": [],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoders": [
                    "List[neuralmonkey.model.stateful.Stateful]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "layers": [
                    "List[int]"
                ],
                "activation_fn": [
                    "Callable[([Any], Any)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "Classifier.train_mode": {
            "name": "train_mode",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.gt_inputs": {
            "name": "gt_inputs",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier._mlp": {
            "name": "_mlp",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.loss_with_gt_ins": {
            "name": "loss_with_gt_ins",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.loss_with_decoded_ins": {
            "name": "loss_with_decoded_ins",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.cost": {
            "name": "cost",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decoded_seq": {
            "name": "decoded_seq",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decoded_logits": {
            "name": "decoded_logits",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.runtime_logprobs": {
            "name": "runtime_logprobs",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.train_loss": {
            "name": "train_loss",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.runtime_loss": {
            "name": "runtime_loss",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.decoded": {
            "name": "decoded",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Classifier.feed_dict": {
            "name": "feed_dict",
            "location": 128,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/ctc_decoder.py": {
        "CTCDecoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "neuralmonkey.model.stateful.TemporalStateful"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "merge_repeated_targets": [
                    "bool"
                ],
                "merge_repeated_outputs": [
                    "bool"
                ],
                "beam_width": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "CTCDecoder.train_targets": {
            "name": "train_targets",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.train_mode": {
            "name": "train_mode",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.decoded": {
            "name": "decoded",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.train_loss": {
            "name": "train_loss",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.runtime_loss": {
            "name": "runtime_loss",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.cost": {
            "name": "cost",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.logits": {
            "name": "logits",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CTCDecoder.feed_dict": {
            "name": "feed_dict",
            "location": 125,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/decoder.py": {
        "Decoder.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoders": [
                    "List[neuralmonkey.model.stateful.Stateful]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "max_output_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "embedding_size": [
                    "int"
                ],
                "embeddings_source": [
                    "neuralmonkey.model.sequence.EmbeddedSequence"
                ],
                "tie_embeddings": [
                    "bool"
                ],
                "label_smoothing": [
                    "float"
                ],
                "rnn_size": [
                    "int"
                ],
                "output_projection": [
                    "Union[(Callable[([Any, Any, list, Any], Any)], Tuple[(Callable[([Any, Any, list, Any], Any)], int)])]"
                ],
                "encoder_projection": [
                    "Callable[([Any, int, List[neuralmonkey.model.stateful.Stateful]], Any)]"
                ],
                "attentions": [
                    "List[neuralmonkey.attention.base_attention.BaseAttention]"
                ],
                "attention_on_input": [
                    "bool"
                ],
                "rnn_cell": [
                    "str"
                ],
                "conditional_gru": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "Decoder.initial_state": {
            "name": "initial_state",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.output_dimension": {
            "name": "output_dimension",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder._get_rnn_cell": {
            "name": "_get_rnn_cell",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder._get_conditional_gru_cell": {
            "name": "_get_conditional_gru_cell",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.embed_input_symbol": {
            "name": "embed_input_symbol",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.input_plus_attention": {
            "name": "input_plus_attention",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.get_body": {
            "name": "get_body",
            "location": 244,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "train_mode": [
                    "bool"
                ],
                "sample": [
                    "bool"
                ]
            }
        },
        "Decoder.get_initial_loop_state": {
            "name": "get_initial_loop_state",
            "location": 364,
            "return": [
                "neuralmonkey.decoders.autoregressive.LoopState"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.finalize_loop": {
            "name": "finalize_loop",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "final_loop_state": [
                    "neuralmonkey.decoders.autoregressive.LoopState"
                ],
                "train_mode": [
                    "bool"
                ]
            }
        },
        "Decoder.get_body.body": {
            "name": "body",
            "location": 248,
            "return": [],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/encoder_projection.py": {
        "empty_initial_state": {
            "name": "empty_initial_state",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "train_mode": [],
                "rnn_size": [
                    "int"
                ],
                "encoders": [
                    "List[neuralmonkey.model.stateful.Stateful]"
                ]
            }
        },
        "linear_encoder_projection": {
            "name": "linear_encoder_projection",
            "location": 47,
            "return": [
                "Callable[([Any, int, List[neuralmonkey.model.stateful.Stateful]], Any)]"
            ],
            "arguments": {
                "dropout_keep_prob": [
                    "float"
                ]
            }
        },
        "concat_encoder_projection": {
            "name": "concat_encoder_projection",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "train_mode": [],
                "rnn_size": [
                    "int"
                ],
                "encoders": [
                    "List[neuralmonkey.model.stateful.Stateful]"
                ]
            }
        },
        "nematus_projection": {
            "name": "nematus_projection",
            "location": 98,
            "return": [
                "Callable[([Any, int, List[neuralmonkey.model.stateful.Stateful]], Any)]"
            ],
            "arguments": {
                "dropout_keep_prob": [
                    "float"
                ]
            }
        },
        "linear_encoder_projection.func": {
            "name": "func",
            "location": 59,
            "return": [],
            "arguments": {
                "train_mode": [],
                "rnn_size": [],
                "encoders": []
            }
        },
        "nematus_projection.func": {
            "name": "func",
            "location": 110,
            "return": [],
            "arguments": {
                "train_mode": [],
                "rnn_size": [],
                "encoders": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/output_projection.py": {
        "_legacy_linear": {
            "name": "_legacy_linear",
            "location": 35,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "output_size": [
                    "int"
                ]
            }
        },
        "_legacy_relu": {
            "name": "_legacy_relu",
            "location": 55,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "output_size": [
                    "int"
                ]
            }
        },
        "nematus_output": {
            "name": "nematus_output",
            "location": 76,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "output_size": [
                    "int"
                ],
                "activation_fn": [
                    "Callable[([Any], Any)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ]
            }
        },
        "nonlinear_output": {
            "name": "nonlinear_output",
            "location": 120,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "output_size": [
                    "int"
                ],
                "activation_fn": [
                    "Callable[([Any], Any)]"
                ]
            }
        },
        "maxout_output": {
            "name": "maxout_output",
            "location": 136,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "maxout_size": [
                    "int"
                ]
            }
        },
        "mlp_output": {
            "name": "mlp_output",
            "location": 162,
            "return": [
                "Tuple[(Callable[([Any, Any, list, Any], Any)], int)]"
            ],
            "arguments": {
                "layer_sizes": [
                    "List[int]"
                ],
                "activation": [
                    "Callable[([Any], Any)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ]
            }
        },
        "_legacy_linear._projection": {
            "name": "_projection",
            "location": 46,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "train_mode": []
            }
        },
        "_legacy_relu._projection": {
            "name": "_projection",
            "location": 66,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "train_mode": []
            }
        },
        "nematus_output._projection": {
            "name": "_projection",
            "location": 91,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "train_mode": []
            }
        },
        "nonlinear_output._projection": {
            "name": "_projection",
            "location": 127,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "train_mode": []
            }
        },
        "maxout_output._projection": {
            "name": "_projection",
            "location": 155,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "_": []
            }
        },
        "mlp_output._projection": {
            "name": "_projection",
            "location": 178,
            "return": [],
            "arguments": {
                "prev_state": [],
                "prev_output": [],
                "ctx_tensors": [],
                "train_mode": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/sequence_labeler.py": {
        "SequenceLabeler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "Union[(neuralmonkey.encoders.facebook_conv.SentenceEncoder, neuralmonkey.encoders.recurrent.RecurrentEncoder)]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SequenceLabeler.train_targets": {
            "name": "train_targets",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.train_weights": {
            "name": "train_weights",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.train_mode": {
            "name": "train_mode",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.decoding_w": {
            "name": "decoding_w",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.decoding_b": {
            "name": "decoding_b",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.decoding_residual_w": {
            "name": "decoding_residual_w",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.logits": {
            "name": "logits",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.logprobs": {
            "name": "logprobs",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.decoded": {
            "name": "decoded",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.cost": {
            "name": "cost",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.train_loss": {
            "name": "train_loss",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.runtime_loss": {
            "name": "runtime_loss",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceLabeler.feed_dict": {
            "name": "feed_dict",
            "location": 131,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/sequence_regressor.py": {
        "SequenceRegressor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoders": [
                    "List[neuralmonkey.model.stateful.Stateful]"
                ],
                "data_id": [
                    "str"
                ],
                "layers": [
                    "List[int]"
                ],
                "activation_fn": [
                    "Callable[([Any], Any)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "dimension": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SequenceRegressor.train_mode": {
            "name": "train_mode",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.train_inputs": {
            "name": "train_inputs",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor._mlp_input": {
            "name": "_mlp_input",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor._mlp_output": {
            "name": "_mlp_output",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.predictions": {
            "name": "predictions",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.cost": {
            "name": "cost",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.train_loss": {
            "name": "train_loss",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.runtime_loss": {
            "name": "runtime_loss",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.decoded": {
            "name": "decoded",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceRegressor.feed_dict": {
            "name": "feed_dict",
            "location": 95,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/transformer.py": {
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "encoder": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "ff_hidden_size": [
                    "int"
                ],
                "n_heads_self": [
                    "int"
                ],
                "n_heads_enc": [
                    "int"
                ],
                "depth": [
                    "int"
                ],
                "max_output_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "embedding_size": [
                    "int"
                ],
                "embeddings_source": [
                    "neuralmonkey.model.sequence.EmbeddedSequence"
                ],
                "tie_embeddings": [
                    "bool"
                ],
                "label_smoothing": [
                    "float"
                ],
                "attention_dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ]
            }
        },
        "TransformerDecoder.output_dimension": {
            "name": "output_dimension",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.embed_inputs": {
            "name": "embed_inputs",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "TransformerDecoder.embedded_train_inputs": {
            "name": "embedded_train_inputs",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.masked_self_attention": {
            "name": "masked_self_attention",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "prev_layer": [
                    "neuralmonkey.encoders.transformer.TransformerLayer"
                ]
            }
        },
        "TransformerDecoder.encoder_attention": {
            "name": "encoder_attention",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "queries": []
            }
        },
        "TransformerDecoder.layer": {
            "name": "layer",
            "location": 185,
            "return": [
                "neuralmonkey.encoders.transformer.TransformerLayer"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "inputs": [],
                "mask": []
            }
        },
        "TransformerDecoder.train_logits": {
            "name": "train_logits",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.get_initial_loop_state": {
            "name": "get_initial_loop_state",
            "location": 254,
            "return": [
                "neuralmonkey.decoders.autoregressive.LoopState"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.get_body": {
            "name": "get_body",
            "location": 289,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "train_mode": [
                    "bool"
                ],
                "sample": [
                    "bool"
                ]
            }
        },
        "TransformerDecoder.get_body.body": {
            "name": "body",
            "location": 293,
            "return": [],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/word_alignment_decoder.py": {
        "WordAlignmentDecoder.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "neuralmonkey.encoders.recurrent.RecurrentEncoder"
                ],
                "decoder": [
                    "neuralmonkey.decoders.decoder.Decoder"
                ],
                "data_id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "WordAlignmentDecoder.ref_alignment": {
            "name": "ref_alignment",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordAlignmentDecoder.alignment_target": {
            "name": "alignment_target",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordAlignmentDecoder._make_decoder": {
            "name": "_make_decoder",
            "location": 65,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "runtime_mode": []
            }
        },
        "WordAlignmentDecoder.cost": {
            "name": "cost",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordAlignmentDecoder.feed_dict": {
            "name": "feed_dict",
            "location": 94,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/decoders/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/encoders/attentive.py": {
        "AttentiveEncoder.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "Union[(neuralmonkey.model.stateful.SpatialStateful, neuralmonkey.model.stateful.TemporalStateful)]"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_heads": [
                    "int"
                ],
                "output_size": [
                    "int"
                ],
                "state_proj_size": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "AttentiveEncoder.attention_weights": {
            "name": "attention_weights",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentiveEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentiveEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentiveEncoder.output": {
            "name": "output",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentiveEncoder.get_dependencies": {
            "name": "get_dependencies",
            "location": 107,
            "return": [
                "Set[neuralmonkey.model.model_part.ModelPart]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttentiveEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 117,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/cnn_encoder.py": {
        "plain_convolution": {
            "name": "plain_convolution",
            "location": 214,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "prev_layer": [],
                "prev_mask": [],
                "specification": [
                    "Tuple[(str, int, int, str, int)]"
                ],
                "batch_norm_callback": [
                    "Callable[([Any], Any)]"
                ],
                "layer_num": [
                    "int"
                ]
            }
        },
        "residual_block": {
            "name": "residual_block",
            "location": 249,
            "return": [
                "Tuple[(Any, Any, int)]"
            ],
            "arguments": {
                "prev_layer": [],
                "prev_mask": [],
                "prev_channels": [
                    "int"
                ],
                "specification": [
                    "Tuple[(str, int, int)]"
                ],
                "batch_norm_callback": [
                    "Callable[([Any], Any)]"
                ],
                "layer_num": [
                    "int"
                ]
            }
        },
        "pooling": {
            "name": "pooling",
            "location": 294,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "prev_layer": [],
                "prev_mask": [],
                "specification": [
                    "Tuple[(str, int, int, str)]"
                ],
                "layer_num": [
                    "int"
                ]
            }
        },
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "data_id": [
                    "str"
                ],
                "convolutions": [
                    "List[Tuple[(Union[(int, str)], ...)]]"
                ],
                "image_height": [
                    "int"
                ],
                "image_width": [
                    "int"
                ],
                "pixel_dim": [
                    "int"
                ],
                "fully_connected": [
                    "List[int]"
                ],
                "batch_normalize": [
                    "bool"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "CNNEncoder.train_mode": {
            "name": "train_mode",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.image_input": {
            "name": "image_input",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.image_mask": {
            "name": "image_mask",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.batch_norm_callback": {
            "name": "batch_norm_callback",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "layer_output": []
            }
        },
        "CNNEncoder.image_processing_layers": {
            "name": "image_processing_layers",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.spatial_states": {
            "name": "spatial_states",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.spatial_mask": {
            "name": "spatial_mask",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.output": {
            "name": "output",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 198,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "CNNTemporalView.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "cnn": [
                    "CNNEncoder"
                ]
            }
        },
        "CNNTemporalView.output": {
            "name": "output",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNTemporalView.temporal_states": {
            "name": "temporal_states",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNTemporalView.temporal_mask": {
            "name": "temporal_mask",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNNTemporalView.feed_dict": {
            "name": "feed_dict",
            "location": 361,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "CNNTemporalView.get_dependencies": {
            "name": "get_dependencies",
            "location": 364,
            "return": [
                "Set[neuralmonkey.model.model_part.ModelPart]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/facebook_conv.py": {
        "SentenceEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "neuralmonkey.model.sequence.EmbeddedSequence"
                ],
                "conv_features": [
                    "int"
                ],
                "encoder_layers": [
                    "int"
                ],
                "kernel_width": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SentenceEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder.output": {
            "name": "output",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder.order_embeddings": {
            "name": "order_embeddings",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder.ordered_embedded_inputs": {
            "name": "ordered_embedded_inputs",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder._residual_conv": {
            "name": "_residual_conv",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "input_signals": [],
                "name": [
                    "str"
                ]
            }
        },
        "SentenceEncoder.train_mode": {
            "name": "train_mode",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 125,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/imagenet_encoder.py": {
        "get_alexnet": {
            "name": "get_alexnet",
            "location": 30,
            "return": [
                "ImageNetSpec"
            ],
            "arguments": {}
        },
        "get_vgg_by_type": {
            "name": "get_vgg_by_type",
            "location": 39,
            "return": [
                "Callable[([], ImageNetSpec)]"
            ],
            "arguments": {
                "vgg_type": [
                    "str"
                ]
            }
        },
        "get_resnet_by_type": {
            "name": "get_resnet_by_type",
            "location": 58,
            "return": [
                "Callable[([], ImageNetSpec)]"
            ],
            "arguments": {
                "resnet_type": [
                    "str"
                ]
            }
        },
        "get_vgg_by_type.get_vgg": {
            "name": "get_vgg",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "get_resnet_by_type.get_resnet": {
            "name": "get_resnet",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "ImageNet.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "data_id": [
                    "str"
                ],
                "network_type": [
                    "str"
                ],
                "slim_models_path": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "spatial_layer": [
                    "str"
                ],
                "encoded_layer": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "ImageNet.input_image": {
            "name": "input_image",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageNet.spatial_states": {
            "name": "spatial_states",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageNet.spatial_mask": {
            "name": "spatial_mask",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageNet.output": {
            "name": "output",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageNet._init_saver": {
            "name": "_init_saver",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageNet.feed_dict": {
            "name": "feed_dict",
            "location": 216,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/numpy_encoder.py": {
        "VectorEncoder.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "dimension": [
                    "int"
                ],
                "data_id": [
                    "str"
                ],
                "output_shape": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "VectorEncoder.output": {
            "name": "output",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 58,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "PostCNNImageEncoder.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_shape": [
                    "List[int]"
                ],
                "output_shape": [
                    "int"
                ],
                "data_id": [
                    "str"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "PostCNNImageEncoder.output": {
            "name": "output",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostCNNImageEncoder.spatial_states": {
            "name": "spatial_states",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostCNNImageEncoder.spatial_mask": {
            "name": "spatial_mask",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostCNNImageEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 112,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/pooling.py": {
        "SequencePooling.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "neuralmonkey.model.stateful.TemporalStateful"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SequencePooling.get_dependencies": {
            "name": "get_dependencies",
            "location": 37,
            "return": [
                "Set[neuralmonkey.model.model_part.ModelPart]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequencePooling.feed_dict": {
            "name": "feed_dict",
            "location": 47,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "SequenceMaxPooling.output": {
            "name": "output",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceAveragePooling.output": {
            "name": "output",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/raw_rnn_encoder.py": {
        "_make_rnn_spec": {
            "name": "_make_rnn_spec",
            "location": 25,
            "return": [
                "RNNSpec"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "direction": [
                    "str"
                ],
                "cell_type": [
                    "str"
                ]
            }
        },
        "_make_rnn_cell": {
            "name": "_make_rnn_cell",
            "location": 31,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "spec": [
                    "RNNSpec"
                ]
            }
        },
        "RawRNNEncoder.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "data_id": [
                    "str"
                ],
                "input_size": [
                    "int"
                ],
                "rnn_layers": [
                    "List[Tuple[(Union[(int, str)], ...)]]"
                ],
                "max_input_len": [
                    "Optional[int]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "RawRNNEncoder.output": {
            "name": "output",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawRNNEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawRNNEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawRNNEncoder._create_input_placeholders": {
            "name": "_create_input_placeholders",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawRNNEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 170,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "_make_rnn_cell.cell": {
            "name": "cell",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "RawRNNEncoder.__init__.reverse_states": {
            "name": "reverse_states",
            "location": 96,
            "return": [],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/recurrent.py": {
        "_make_rnn_spec": {
            "name": "_make_rnn_spec",
            "location": 37,
            "return": [
                "RNNSpec"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "direction": [
                    "str"
                ],
                "cell_type": [
                    "str"
                ]
            }
        },
        "_make_rnn_cell": {
            "name": "_make_rnn_cell",
            "location": 55,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "spec": [
                    "RNNSpec"
                ]
            }
        },
        "rnn_layer": {
            "name": "rnn_layer",
            "location": 60,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "rnn_input": [],
                "lengths": [],
                "rnn_spec": [
                    "RNNSpec"
                ]
            }
        },
        "RecurrentEncoder.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "neuralmonkey.model.stateful.TemporalStateful"
                ],
                "rnn_size": [
                    "int"
                ],
                "rnn_cell": [
                    "str"
                ],
                "rnn_direction": [
                    "str"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "RecurrentEncoder.rnn_input": {
            "name": "rnn_input",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.rnn": {
            "name": "rnn",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.output": {
            "name": "output",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.get_dependencies": {
            "name": "get_dependencies",
            "location": 171,
            "return": [
                "Set[neuralmonkey.model.model_part.ModelPart]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 182,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "SentenceEncoder.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "embedding_size": [
                    "int"
                ],
                "rnn_size": [
                    "int"
                ],
                "rnn_cell": [
                    "str"
                ],
                "rnn_direction": [
                    "str"
                ],
                "max_input_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ],
                "embedding_initializer": [
                    "Callable"
                ]
            }
        },
        "FactoredEncoder.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabularies": [
                    "List[neuralmonkey.vocabulary.Vocabulary]"
                ],
                "data_ids": [
                    "List[str]"
                ],
                "embedding_sizes": [
                    "List[int]"
                ],
                "rnn_size": [
                    "int"
                ],
                "rnn_cell": [
                    "str"
                ],
                "rnn_direction": [
                    "str"
                ],
                "max_input_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ],
                "input_initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "DeepSentenceEncoder.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "embedding_size": [
                    "int"
                ],
                "rnn_sizes": [
                    "List[int]"
                ],
                "rnn_directions": [
                    "List[str]"
                ],
                "rnn_cell": [
                    "str"
                ],
                "max_input_len": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ],
                "embedding_initializer": [
                    "Callable"
                ]
            }
        },
        "DeepSentenceEncoder.rnn": {
            "name": "rnn",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/sentence_cnn_encoder.py": {
        "SentenceCNNEncoder.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "neuralmonkey.model.sequence.Sequence"
                ],
                "segment_size": [
                    "int"
                ],
                "highway_depth": [
                    "int"
                ],
                "rnn_size": [
                    "int"
                ],
                "filters": [
                    "List[Tuple[(int, int)]]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "use_noisy_activations": [
                    "bool"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SentenceCNNEncoder.train_mode": {
            "name": "train_mode",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.cnn_encoded": {
            "name": "cnn_encoded",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.highway_layer": {
            "name": "highway_layer",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.bidirectional_rnn": {
            "name": "bidirectional_rnn",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.output": {
            "name": "output",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.rnn_cells": {
            "name": "rnn_cells",
            "location": 202,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceCNNEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 212,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/sequence_cnn_encoder.py": {
        "SequenceCNNEncoder.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "embedding_size": [
                    "int"
                ],
                "filters": [
                    "List[Tuple[(int, int)]]"
                ],
                "max_input_len": [
                    "Optional[int]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "Optional[str]"
                ],
                "load_checkpoint": [
                    "Optional[str]"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "SequenceCNNEncoder.train_mode": {
            "name": "train_mode",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceCNNEncoder.inputs": {
            "name": "inputs",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceCNNEncoder.input_mask": {
            "name": "input_mask",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceCNNEncoder.embedded_inputs": {
            "name": "embedded_inputs",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceCNNEncoder.output": {
            "name": "output",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequenceCNNEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 118,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/transformer.py": {
        "position_signal": {
            "name": "position_signal",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "dimension": [
                    "int"
                ],
                "length": []
            }
        },
        "TransformerLayer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "states": [],
                "mask": []
            }
        },
        "TransformerLayer.temporal_states": {
            "name": "temporal_states",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerLayer.temporal_mask": {
            "name": "temporal_mask",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "input_sequence": [
                    "neuralmonkey.model.stateful.TemporalStateful"
                ],
                "ff_hidden_size": [
                    "int"
                ],
                "depth": [
                    "int"
                ],
                "n_heads": [
                    "int"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "attention_dropout_keep_prob": [
                    "float"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ]
            }
        },
        "TransformerEncoder.output": {
            "name": "output",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.encoder_inputs": {
            "name": "encoder_inputs",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.self_attention": {
            "name": "self_attention",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "prev_layer": [
                    "TransformerLayer"
                ]
            }
        },
        "TransformerEncoder.layer": {
            "name": "layer",
            "location": 145,
            "return": [
                "TransformerLayer"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "TransformerEncoder.temporal_states": {
            "name": "temporal_states",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.temporal_mask": {
            "name": "temporal_mask",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.feed_dict": {
            "name": "feed_dict",
            "location": 190,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/encoders/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/accuracy.py": {
        "AccuracyEvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AccuracyEvaluator.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[list]"
                ],
                "references": [
                    "List[list]"
                ]
            }
        },
        "AccuracyEvaluator.compare_scores": {
            "name": "compare_scores",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        },
        "AccuracySeqLevelEvaluator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AccuracySeqLevelEvaluator.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "list"
                ],
                "references": [
                    "list"
                ]
            }
        },
        "AccuracySeqLevelEvaluator.compare_scores": {
            "name": "compare_scores",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/average.py": {
        "AverageEvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AverageEvaluator.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[float]"
                ],
                "_": [
                    "list"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/beer.py": {
        "BeerWrapper.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "BeerWrapper.serialize_to_bytes": {
            "name": "serialize_to_bytes",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "BeerWrapper.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/bleu.py": {
        "BLEUEvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "deduplicate": [
                    "bool"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "BLEUEvaluator.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        },
        "BLEUEvaluator.ngram_counts": {
            "name": "ngram_counts",
            "location": 30,
            "return": [
                "Counter"
            ],
            "arguments": {
                "sentence": [
                    "List[str]"
                ],
                "n": [
                    "int"
                ],
                "lowercase": [
                    "bool"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "BLEUEvaluator.merge_max_counters": {
            "name": "merge_max_counters",
            "location": 54,
            "return": [
                "Counter"
            ],
            "arguments": {
                "counters": [
                    "List[Counter]"
                ]
            }
        },
        "BLEUEvaluator.modified_ngram_precision": {
            "name": "modified_ngram_precision",
            "location": 65,
            "return": [
                "Tuple[(float, int)]"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references_list": [
                    "List[List[List[str]]]"
                ],
                "n": [
                    "int"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "BLEUEvaluator.effective_reference_length": {
            "name": "effective_reference_length",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references_list": [
                    "List[List[List[str]]]"
                ]
            }
        },
        "BLEUEvaluator.minimum_reference_length": {
            "name": "minimum_reference_length",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references_list": [
                    "List[List[str]]"
                ]
            }
        },
        "BLEUEvaluator.bleu": {
            "name": "bleu",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[List[str]]]"
                ],
                "ngrams": [
                    "int"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "BLEUEvaluator.deduplicate_sentences": {
            "name": "deduplicate_sentences",
            "location": 206,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "BLEUEvaluator.compare_scores": {
            "name": "compare_scores",
            "location": 223,
            "return": [
                "int"
            ],
            "arguments": {
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/bleu_ref.py": {
        "BLEUReferenceImplWrapper.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [],
                "name": [],
                "encoding": []
            }
        },
        "BLEUReferenceImplWrapper.serialize_to_bytes": {
            "name": "serialize_to_bytes",
            "location": 19,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "BLEUReferenceImplWrapper.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/chrf.py": {
        "ChrFEvaluator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "beta": [
                    "float"
                ],
                "ignored_symbols": [
                    "Optional[List[str]]"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "ChrFEvaluator.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        },
        "ChrFEvaluator._get_ngrams": {
            "name": "_get_ngrams",
            "location": 92,
            "return": [
                "List[Dict[(str, int)]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [],
                "n": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/edit_distance.py": {
        "EditDistanceEvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "EditDistanceEvaluator.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        },
        "EditDistanceEvaluator.ratio": {
            "name": "ratio",
            "location": 17,
            "return": [
                "float"
            ],
            "arguments": {
                "str1": [
                    "str"
                ],
                "str2": [
                    "str"
                ]
            }
        },
        "EditDistanceEvaluator.compare_scores": {
            "name": "compare_scores",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/f1_bio.py": {
        "F1Evaluator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "F1Evaluator.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        },
        "F1Evaluator.chunk2set": {
            "name": "chunk2set",
            "location": 23,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "seq": [
                    "List[str]"
                ]
            }
        },
        "F1Evaluator.f1_score": {
            "name": "f1_score",
            "location": 46,
            "return": [
                "float"
            ],
            "arguments": {
                "decoded": [
                    "List[str]"
                ],
                "reference": [
                    "List[str]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/gleu.py": {
        "GLEUEvaluator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "deduplicate": [
                    "bool"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        },
        "GLEUEvaluator.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        },
        "GLEUEvaluator.total_precision_recall": {
            "name": "total_precision_recall",
            "location": 43,
            "return": [
                "Tuple[(float, float)]"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references_list": [
                    "List[List[List[str]]]"
                ],
                "ngrams": [
                    "int"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "GLEUEvaluator.gleu": {
            "name": "gleu",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "hypotheses": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[List[str]]]"
                ],
                "ngrams": [
                    "int"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/mse.py": {
        "MeanSquaredErrorEvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MeanSquaredErrorEvaluator.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[float]]"
                ],
                "references": [
                    "List[List[float]]"
                ]
            }
        },
        "MeanSquaredErrorEvaluator.compare_scores": {
            "name": "compare_scores",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "score1": [
                    "float"
                ],
                "score2": [
                    "float"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/multeval.py": {
        "MultEvalWrapper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapper": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "metric": [
                    "str"
                ],
                "language": [
                    "str"
                ]
            }
        },
        "MultEvalWrapper.serialize_to_bytes": {
            "name": "serialize_to_bytes",
            "location": 36,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "MultEvalWrapper.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "List[List[str]]"
                ],
                "references": [
                    "List[List[str]]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/ter.py": {
        "TEREvaluator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TEREvaluator.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [],
                "references": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/wer.py": {
        "WEREvaluator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WEREvaluator.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "decoded": [
                    "Iterable[list]"
                ],
                "references": [
                    "Iterable[list]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/evaluators/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/logbook/logbook.py": {
        "root_dir": {
            "name": "root_dir",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file": {
            "name": "get_file",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": []
            }
        },
        "index": {
            "name": "index",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "list_experiments": {
            "name": "list_experiments",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "get_experiment": {
            "name": "get_experiment",
            "location": 57,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_ansiconv_css": {
            "name": "get_ansiconv_css",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "get_resource": {
            "name": "get_resource",
            "location": 82,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/model/gradient_blocking.py": {
        "StatefulView.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocked_object": [
                    "neuralmonkey.model.stateful.Stateful"
                ]
            }
        },
        "StatefulView.output": {
            "name": "output",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStatefulView.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocked_object": [
                    "neuralmonkey.model.stateful.TemporalStateful"
                ]
            }
        },
        "TemporalStatefulView.temporal_states": {
            "name": "temporal_states",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStatefulView.temporal_mask": {
            "name": "temporal_mask",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialStatefulView.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocked_object": [
                    "neuralmonkey.model.stateful.SpatialStateful"
                ]
            }
        },
        "SpatialStatefulView.spatial_states": {
            "name": "spatial_states",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialStatefulView.spatial_mask": {
            "name": "spatial_mask",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStatefulWithOutputView.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocked_object": [
                    "neuralmonkey.model.stateful.TemporalStatefulWithOutput"
                ]
            }
        },
        "SpatialStatefulWithOutputView.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocked_object": [
                    "neuralmonkey.model.stateful.SpatialStatefulWithOutput"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/model/model_part.py": {
        "ModelPart.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "ModelPart.name": {
            "name": "name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPart.use_scope": {
            "name": "use_scope",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelPart.get_dependencies": {
            "name": "get_dependencies",
            "location": 58,
            "return": [
                "Set[ModelPart]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelPart.feed_dict": {
            "name": "feed_dict",
            "location": 91,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "ModelPart._init_saver": {
            "name": "_init_saver",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelPart.save": {
            "name": "save",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "ModelPart.load": {
            "name": "load",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/model/sequence.py": {
        "Sequence.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "max_length": [
                    "int"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "EmbeddedFactorSequence.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabularies": [
                    "List[neuralmonkey.vocabulary.Vocabulary]"
                ],
                "data_ids": [
                    "List[str]"
                ],
                "embedding_sizes": [
                    "List[int]"
                ],
                "max_length": [
                    "int"
                ],
                "add_start_symbol": [
                    "bool"
                ],
                "add_end_symbol": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "EmbeddedFactorSequence.tb_embedding_visualization": {
            "name": "tb_embedding_visualization",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "str"
                ],
                "prj": []
            }
        },
        "EmbeddedFactorSequence.embedding_matrices": {
            "name": "embedding_matrices",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedFactorSequence.temporal_states": {
            "name": "temporal_states",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedFactorSequence.temporal_mask": {
            "name": "temporal_mask",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedFactorSequence.feed_dict": {
            "name": "feed_dict",
            "location": 174,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "EmbeddedSequence.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "data_id": [
                    "str"
                ],
                "embedding_size": [
                    "int"
                ],
                "max_length": [
                    "int"
                ],
                "add_start_symbol": [
                    "bool"
                ],
                "add_end_symbol": [
                    "bool"
                ],
                "save_checkpoint": [
                    "str"
                ],
                "load_checkpoint": [
                    "str"
                ],
                "initializers": [
                    "List[Tuple[(str, Callable)]]"
                ]
            }
        },
        "EmbeddedSequence.inputs": {
            "name": "inputs",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedSequence.embedding_matrix": {
            "name": "embedding_matrix",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedSequence.vocabulary": {
            "name": "vocabulary",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedSequence.data_id": {
            "name": "data_id",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/model/stateful.py": {
        "Stateful.output": {
            "name": "output",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStateful.temporal_states": {
            "name": "temporal_states",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStateful.temporal_mask": {
            "name": "temporal_mask",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStateful.lengths": {
            "name": "lengths",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalStateful.dimension": {
            "name": "dimension",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialStateful.spatial_states": {
            "name": "spatial_states",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialStateful.spatial_mask": {
            "name": "spatial_mask",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpatialStateful.dimension": {
            "name": "dimension",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/model/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/nn/highway.py": {
        "highway": {
            "name": "highway",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "activation": [],
                "scope": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/mlp.py": {
        "MultilayerPerceptron.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mlp_input": [],
                "layer_configuration": [
                    "List[int]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "output_size": [
                    "int"
                ],
                "train_mode": [],
                "activation_fn": [
                    "Callable[([Any], Any)]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "MultilayerPerceptron.softmax": {
            "name": "softmax",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultilayerPerceptron.classification": {
            "name": "classification",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/noisy_gru_cell.py": {
        "noisy_activation": {
            "name": "noisy_activation",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "generic": [],
                "linearized": [],
                "training": [],
                "alpha": [
                    "float"
                ],
                "c": [
                    "float"
                ]
            }
        },
        "noisy_sigmoid": {
            "name": "noisy_sigmoid",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "training": []
            }
        },
        "noisy_tanh": {
            "name": "noisy_tanh",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "training": []
            }
        },
        "NoisyGRUCell.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_units": [
                    "int"
                ],
                "training": []
            }
        },
        "NoisyGRUCell.output_size": {
            "name": "output_size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoisyGRUCell.state_size": {
            "name": "state_size",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoisyGRUCell.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": [],
                "scope": []
            }
        },
        "noisy_sigmoid.lin_sigmoid": {
            "name": "lin_sigmoid",
            "location": 96,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "noisy_sigmoid.hard_sigmoid": {
            "name": "hard_sigmoid",
            "location": 99,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "noisy_tanh.hard_tanh": {
            "name": "hard_tanh",
            "location": 105,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/ortho_gru_cell.py": {
        "orthogonal_initializer": {
            "name": "orthogonal_initializer",
            "location": 4,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "orthogonal_initializer.func": {
            "name": "func",
            "location": 20,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "partition_info": []
            }
        },
        "OrthoGRUCell.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_units": [],
                "activation": [],
                "reuse": []
            }
        },
        "OrthoGRUCell.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": [],
                "scope": []
            }
        },
        "NematusGRUCell.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_size": [],
                "use_state_bias": [],
                "use_input_bias": []
            }
        },
        "NematusGRUCell.call": {
            "name": "call",
            "location": 73,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/pervasive_dropout_wrapper.py": {
        "PervasiveDropoutWrapper.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [],
                "mask": [],
                "scale": []
            }
        },
        "PervasiveDropoutWrapper.state_size": {
            "name": "state_size",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PervasiveDropoutWrapper.output_size": {
            "name": "output_size",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PervasiveDropoutWrapper.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": [],
                "scope": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/projection.py": {
        "maxout": {
            "name": "maxout",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "inputs": [],
                "size": [
                    "int"
                ],
                "scope": [
                    "str"
                ]
            }
        },
        "multilayer_projection": {
            "name": "multilayer_projection",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_": [],
                "layer_sizes": [
                    "List[int]"
                ],
                "train_mode": [],
                "activation": [
                    "Callable[([Any], Any)]"
                ],
                "dropout_keep_prob": [
                    "float"
                ],
                "scope": [
                    "str"
                ]
            }
        },
        "glu": {
            "name": "glu",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_": [],
                "gating_fn": [
                    "Callable[([Any], Any)]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/utils.py": {
        "dropout": {
            "name": "dropout",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "variable": [],
                "keep_prob": [
                    "float"
                ],
                "train_mode": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/nn/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/processors/alignment.py": {
        "WordAlignmentPreprocessor.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_len": [],
                "target_len": [],
                "dtype": [],
                "normalize": [],
                "zero_based": []
            }
        },
        "WordAlignmentPreprocessor.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "List[str]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/bpe.py": {
        "BPEPreprocessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merge_file": [
                    "str"
                ],
                "separator": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "BPEPreprocessor.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "List[str]"
                ]
            }
        },
        "BPEPostprocessor.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "separator": [
                    "str"
                ]
            }
        },
        "BPEPostprocessor.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "decoded_sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "BPEPostprocessor.decode": {
            "name": "decode",
            "location": 55,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "List[str]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/editops.py": {
        "convert_to_edits": {
            "name": "convert_to_edits",
            "location": 68,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "List[str]"
                ],
                "target": [
                    "List[str]"
                ]
            }
        },
        "reconstruct": {
            "name": "reconstruct",
            "location": 106,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "List[str]"
                ],
                "edits": [
                    "List[str]"
                ]
            }
        },
        "Preprocess.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str"
                ],
                "target_id": [
                    "str"
                ]
            }
        },
        "Preprocess.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "Iterable[List[str]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ]
            }
        },
        "Postprocess.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str"
                ],
                "edits_id": [
                    "str"
                ],
                "result_postprocess": [
                    "Callable[([Iterable[List[str]]], Iterable[List[str]])]"
                ]
            }
        },
        "Postprocess._do_postprocess": {
            "name": "_do_postprocess",
            "location": 36,
            "return": [
                "Iterable[List[str]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "generated_series": [
                    "Dict[(str, Iterable)]"
                ]
            }
        },
        "Postprocess.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "Iterable[List[str]]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "neuralmonkey.dataset.Dataset"
                ],
                "generated_series": [
                    "Dict[(str, Iterable)]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/german.py": {
        "GermanPreprocessor.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compounding": [],
                "contracting": [],
                "pronouns": []
            }
        },
        "GermanPreprocessor.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "GermanPostprocessor.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compounding": [],
                "contracting": [],
                "pronouns": []
            }
        },
        "GermanPostprocessor.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "decoded_sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "GermanPostprocessor.decode": {
            "name": "decode",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/helpers.py": {
        "preprocess_char_based": {
            "name": "preprocess_char_based",
            "location": 4,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "sentence": [
                    "List[str]"
                ]
            }
        },
        "postprocess_char_based": {
            "name": "postprocess_char_based",
            "location": 9,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "untruecase": {
            "name": "untruecase",
            "location": 20,
            "return": [
                "Generator[(List[str], None, None)]"
            ],
            "arguments": {
                "sentences": [
                    "List[List[str]]"
                ]
            }
        },
        "pipeline": {
            "name": "pipeline",
            "location": 29,
            "return": [
                "Callable"
            ],
            "arguments": {
                "processors": [
                    "List[Callable]"
                ]
            }
        },
        "pipeline.process": {
            "name": "process",
            "location": 32,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/speech.py": {
        "SpeechFeaturesPreprocessor": {
            "name": "SpeechFeaturesPreprocessor",
            "location": 10,
            "return": [
                "Callable"
            ],
            "arguments": {
                "feature_type": [
                    "str"
                ],
                "delta_order": [
                    "int"
                ],
                "delta_window": [
                    "int"
                ]
            }
        },
        "_fbank": {
            "name": "_fbank",
            "location": 52,
            "return": [
                "np.ndarray"
            ],
            "arguments": {}
        },
        "SpeechFeaturesPreprocessor.preprocess": {
            "name": "preprocess",
            "location": 40,
            "return": [],
            "arguments": {
                "audio": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/processors/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/readers/audio_reader.py": {
        "audio_reader": {
            "name": "audio_reader",
            "location": 17,
            "return": [
                "Callable"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "audio_format": [
                    "str"
                ]
            }
        },
        "_load_wav": {
            "name": "_load_wav",
            "location": 47,
            "return": [
                "Audio"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_load_sph": {
            "name": "_load_sph",
            "location": 52,
            "return": [
                "Audio"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "audio_reader.load": {
            "name": "load",
            "location": 37,
            "return": [],
            "arguments": {
                "list_files": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/readers/image_reader.py": {
        "image_reader": {
            "name": "image_reader",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "prefix": [],
                "pad_w": [
                    "Optional[int]"
                ],
                "pad_h": [
                    "Optional[int]"
                ],
                "rescale_w": [
                    "bool"
                ],
                "rescale_h": [
                    "bool"
                ],
                "keep_aspect_ratio": [
                    "bool"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "imagenet_reader": {
            "name": "imagenet_reader",
            "location": 88,
            "return": [
                "Callable"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "target_width": [
                    "int"
                ],
                "target_height": [
                    "int"
                ],
                "vgg_normalization": [
                    "bool"
                ],
                "zero_one_normalization": [
                    "bool"
                ]
            }
        },
        "_rescale_or_crop": {
            "name": "_rescale_or_crop",
            "location": 156,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "image": [
                    "Image.Image"
                ],
                "pad_w": [
                    "int"
                ],
                "pad_h": [
                    "int"
                ],
                "rescale_w": [
                    "bool"
                ],
                "rescale_h": [
                    "bool"
                ],
                "keep_aspect_ratio": [
                    "bool"
                ]
            }
        },
        "_crop": {
            "name": "_crop",
            "location": 182,
            "return": [
                "Image.Image"
            ],
            "arguments": {
                "image": [
                    "Image.Image"
                ],
                "pad_w": [
                    "int"
                ],
                "pad_h": [
                    "int"
                ]
            }
        },
        "_pad": {
            "name": "_pad",
            "location": 195,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "image": [
                    "np.ndarray"
                ],
                "pad_w": [
                    "int"
                ],
                "pad_h": [
                    "int"
                ],
                "channels": [
                    "int"
                ]
            }
        },
        "image_reader.load": {
            "name": "load",
            "location": 47,
            "return": [],
            "arguments": {
                "list_files": []
            }
        },
        "imagenet_reader.load": {
            "name": "load",
            "location": 114,
            "return": [],
            "arguments": {
                "list_files": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/readers/numpy_reader.py": {
        "numpy_reader": {
            "name": "numpy_reader",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "files": [
                    "List[str]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/readers/plain_text_reader.py": {
        "string_reader": {
            "name": "string_reader",
            "location": 17,
            "return": [
                "Callable[([List[str]], Iterable[str])]"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ]
            }
        },
        "tokenized_text_reader": {
            "name": "tokenized_text_reader",
            "location": 33,
            "return": [
                "Callable[([List[str]], Iterable[List[str]])]"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ]
            }
        },
        "column_separated_reader": {
            "name": "column_separated_reader",
            "location": 43,
            "return": [
                "Callable[([List[str]], Iterable[List[str]])]"
            ],
            "arguments": {
                "column": [
                    "int"
                ],
                "delimiter": [
                    "str"
                ],
                "quotechar": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "csv_reader": {
            "name": "csv_reader",
            "location": 80,
            "return": [
                "Callable[([List[str]], Iterable[List[str]])]"
            ],
            "arguments": {
                "column": [
                    "int"
                ]
            }
        },
        "tsv_reader": {
            "name": "tsv_reader",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "column": [
                    "int"
                ]
            }
        },
        "string_reader.reader": {
            "name": "reader",
            "location": 19,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "tokenized_text_reader.reader": {
            "name": "reader",
            "location": 35,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "column_separated_reader.reader": {
            "name": "reader",
            "location": 51,
            "return": [],
            "arguments": {
                "files": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/readers/string_vector_reader.py": {
        "get_string_vector_reader": {
            "name": "get_string_vector_reader",
            "location": 6,
            "return": [
                "Callable[([List[str]], Iterable[List[np.ndarray]])]"
            ],
            "arguments": {
                "dtype": [
                    "type"
                ],
                "columns": [
                    "int"
                ]
            }
        },
        "get_string_vector_reader.process_line": {
            "name": "process_line",
            "location": 8,
            "return": [],
            "arguments": {
                "line": [],
                "lineno": [],
                "path": []
            }
        },
        "get_string_vector_reader.reader": {
            "name": "reader",
            "location": 16,
            "return": [],
            "arguments": {
                "files": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/readers/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/runners/base_runner.py": {
        "reduce_execution_results": {
            "name": "reduce_execution_results",
            "location": 57,
            "return": [
                "ExecutionResult"
            ],
            "arguments": {
                "execution_results": [
                    "List[ExecutionResult]"
                ]
            }
        },
        "Executable.next_to_execute": {
            "name": "next_to_execute",
            "location": 23,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Executable.collect_results": {
            "name": "collect_results",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "BaseRunner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "MP"
                ]
            }
        },
        "BaseRunner.get_executable": {
            "name": "get_executable",
            "location": 42,
            "return": [
                "Executable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "BaseRunner.decoder_data_id": {
            "name": "decoder_data_id",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRunner.loss_names": {
            "name": "loss_names",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/beamsearch_runner.py": {
        "beam_search_runner_range": {
            "name": "beam_search_runner_range",
            "location": 232,
            "return": [
                "List[BeamSearchRunner]"
            ],
            "arguments": {
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.beam_search_decoder.BeamSearchDecoder"
                ],
                "max_rank": [
                    "int"
                ],
                "postprocess": [
                    "Callable[([List[str]], List[str])]"
                ]
            }
        },
        "BeamSearchExecutable.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int"
                ],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "num_sessions": [
                    "int"
                ],
                "decoder": [
                    "neuralmonkey.decoders.beam_search_decoder.BeamSearchDecoder"
                ],
                "postprocess": [
                    "Optional[Callable]"
                ]
            }
        },
        "BeamSearchExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 48,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchExecutable.collect_results": {
            "name": "collect_results",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "BeamSearchExecutable.prepare_results": {
            "name": "prepare_results",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchRunner.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.beam_search_decoder.BeamSearchDecoder"
                ],
                "rank": [
                    "int"
                ],
                "postprocess": [
                    "Callable[([List[str]], List[str])]"
                ]
            }
        },
        "BeamSearchRunner.get_executable": {
            "name": "get_executable",
            "location": 213,
            "return": [
                "BeamSearchExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "BeamSearchRunner.loss_names": {
            "name": "loss_names",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchRunner.decoder_data_id": {
            "name": "decoder_data_id",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/label_runner.py": {
        "LabelRunExecutable.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(Any, Union[(float, np.ndarray)])]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "postprocess": [
                    "Optional[Callable[([List[List[str]]], List[List[str]])]]"
                ]
            }
        },
        "LabelRunExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 31,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelRunExecutable.collect_results": {
            "name": "collect_results",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "LabelRunner.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.sequence_labeler.SequenceLabeler"
                ],
                "postprocess": [
                    "Callable[([List[List[str]]], List[List[str]])]"
                ]
            }
        },
        "LabelRunner.get_executable": {
            "name": "get_executable",
            "location": 84,
            "return": [
                "LabelRunExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "LabelRunner.loss_names": {
            "name": "loss_names",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/logits_runner.py": {
        "LogitsExecutable.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(Any, Union[(float, np.ndarray)])]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "normalize": [
                    "bool"
                ],
                "pick_index": [
                    "Optional[int]"
                ]
            }
        },
        "LogitsExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 32,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogitsExecutable.collect_results": {
            "name": "collect_results",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "LogitsRunner.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.classifier.Classifier"
                ],
                "normalize": [
                    "bool"
                ],
                "pick_index": [
                    "int"
                ],
                "pick_value": [
                    "str"
                ]
            }
        },
        "LogitsRunner.get_executable": {
            "name": "get_executable",
            "location": 120,
            "return": [
                "LogitsExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "LogitsRunner.loss_names": {
            "name": "loss_names",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/perplexity_runner.py": {
        "PerplexityExecutable.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "xent_op": []
            }
        },
        "PerplexityExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 22,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerplexityExecutable.collect_results": {
            "name": "collect_results",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "PerplexityRunner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.autoregressive.AutoregressiveDecoder"
                ]
            }
        },
        "PerplexityRunner.get_executable": {
            "name": "get_executable",
            "location": 48,
            "return": [
                "PerplexityExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "PerplexityRunner.loss_names": {
            "name": "loss_names",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/plain_runner.py": {
        "PlainExecutable.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(Any, Union[(float, numpy.ndarray)])]"
                ],
                "num_sessions": [
                    "int"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "postprocess": [
                    "Callable[([List[List[str]]], List[List[str]])]"
                ]
            }
        },
        "PlainExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 38,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, numpy.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainExecutable.collect_results": {
            "name": "collect_results",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "PlainRunner.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "Union[(neuralmonkey.decoders.autoregressive.AutoregressiveDecoder, neuralmonkey.decoders.classifier.Classifier, neuralmonkey.decoders.ctc_decoder.CTCDecoder, neuralmonkey.decoders.sequence_labeler.SequenceLabeler)]"
                ],
                "postprocess": [
                    "Callable[([List[List[str]]], List[List[str]])]"
                ]
            }
        },
        "PlainRunner.get_executable": {
            "name": "get_executable",
            "location": 77,
            "return": [
                "PlainExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "PlainRunner.loss_names": {
            "name": "loss_names",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/regression_runner.py": {
        "RegressionRunExecutable.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(str, Any)]"
                ],
                "postprocess": [
                    "Callable[([List[float]], List[float])]"
                ]
            }
        },
        "RegressionRunExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 29,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionRunExecutable.collect_results": {
            "name": "collect_results",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "RegressionRunner.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "neuralmonkey.decoders.sequence_regressor.SequenceRegressor"
                ],
                "postprocess": [
                    "Callable[([List[float]], List[float])]"
                ]
            }
        },
        "RegressionRunner.get_executable": {
            "name": "get_executable",
            "location": 69,
            "return": [
                "neuralmonkey.runners.base_runner.Executable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "RegressionRunner.loss_names": {
            "name": "loss_names",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/representation_runner.py": {
        "RepresentationExecutable.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prev_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "encoded": [],
                "used_session": [
                    "int"
                ]
            }
        },
        "RepresentationExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 23,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, numpy.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepresentationExecutable.collect_results": {
            "name": "collect_results",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "RepresentationRunner.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "encoder": [
                    "neuralmonkey.model.model_part.ModelPart"
                ],
                "attribute": [
                    "str"
                ],
                "used_session": [
                    "int"
                ]
            }
        },
        "RepresentationRunner.get_executable": {
            "name": "get_executable",
            "location": 71,
            "return": [
                "RepresentationExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "RepresentationRunner.loss_names": {
            "name": "loss_names",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/runner.py": {
        "GreedyRunExecutable.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(Any, Union[(float, np.ndarray)])]"
                ],
                "vocabulary": [
                    "neuralmonkey.vocabulary.Vocabulary"
                ],
                "postprocess": [
                    "Optional[Callable[([List[List[str]]], List[List[str]])]]"
                ]
            }
        },
        "GreedyRunExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 34,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, np.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreedyRunExecutable.collect_results": {
            "name": "collect_results",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "GreedyRunner.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "decoder": [
                    "Union[(neuralmonkey.decoders.autoregressive.AutoregressiveDecoder, neuralmonkey.decoders.classifier.Classifier)]"
                ],
                "postprocess": [
                    "Callable[([List[List[str]]], List[List[str]])]"
                ]
            }
        },
        "GreedyRunner.get_executable": {
            "name": "get_executable",
            "location": 86,
            "return": [
                "GreedyRunExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "GreedyRunner.loss_names": {
            "name": "loss_names",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/word_alignment_runner.py": {
        "WordAlignmentRunnerExecutable.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [
                    "Set[neuralmonkey.model.model_part.ModelPart]"
                ],
                "fetches": [
                    "Dict[(Any, Union[(float, numpy.ndarray)])]"
                ]
            }
        },
        "WordAlignmentRunnerExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 23,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, numpy.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WordAlignmentRunnerExecutable.collect_results": {
            "name": "collect_results",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        },
        "WordAlignmentRunner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_series": [
                    "str"
                ],
                "attention": [
                    "neuralmonkey.attention.base_attention.BaseAttention"
                ],
                "decoder": [
                    "neuralmonkey.decoders.decoder.Decoder"
                ]
            }
        },
        "WordAlignmentRunner.get_executable": {
            "name": "get_executable",
            "location": 48,
            "return": [
                "WordAlignmentRunnerExecutable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [
                    "bool"
                ],
                "summaries": [
                    "bool"
                ],
                "num_sessions": [
                    "int"
                ]
            }
        },
        "WordAlignmentRunner.loss_names": {
            "name": "loss_names",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/runners/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/server/server.py": {
        "root_dir": {
            "name": "root_dir",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file": {
            "name": "get_file",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": []
            }
        },
        "run": {
            "name": "run",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": []
            }
        },
        "index": {
            "name": "index",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "post_request": {
            "name": "post_request",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_bleu.py": {
        "TestBLEU.test_empty_decoded": {
            "name": "test_empty_decoded",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_empty_reference": {
            "name": "test_empty_reference",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_identical": {
            "name": "test_identical",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_empty_sentence": {
            "name": "test_empty_sentence",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_bleu": {
            "name": "test_bleu",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_config.py": {
        "test_splitter_gen": {
            "name": "test_splitter_gen",
            "location": 42,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "TestParsing.test_splitter_bad_brackets": {
            "name": "test_splitter_bad_brackets",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParsing.test_parse_value_int": {
            "name": "test_parse_value_int",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParsing.test_parse_value_float": {
            "name": "test_parse_value_float",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParsing.test_parse_value_string": {
            "name": "test_parse_value_string",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_splitter_gen.test_case_fun": {
            "name": "test_case_fun",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_dataset.py": {
        "TestDataset.test_nonexistent_file": {
            "name": "test_nonexistent_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_lazy_dataset": {
            "name": "test_lazy_dataset",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_glob": {
            "name": "test_glob",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataset.test_lazy_dataset.reader": {
            "name": "reader",
            "location": 24,
            "return": [],
            "arguments": {
                "files": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_decoder.py": {
        "TestDecoder.test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_max_output_len": {
            "name": "test_max_output_len",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dropout": {
            "name": "test_dropout",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_embedding_size": {
            "name": "test_embedding_size",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_tie_embeddings": {
            "name": "test_tie_embeddings",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_cell_type": {
            "name": "test_cell_type",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_encoders_init.py": {
        "traverse_combinations": {
            "name": "traverse_combinations",
            "location": 115,
            "return": [
                "Iterable[Dict[(str, Any)]]"
            ],
            "arguments": {
                "params": [
                    "Dict[(str, list)]"
                ],
                "partial_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "TestEncodersInit._run_constructors": {
            "name": "_run_constructors",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder_type": [],
                "good_params": [],
                "bad_params": []
            }
        },
        "TestEncodersInit.test_sentence_encoder": {
            "name": "test_sentence_encoder",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodersInit.test_sentence_cnn_encoder": {
            "name": "test_sentence_cnn_encoder",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodersInit.test_vector_encoder": {
            "name": "test_vector_encoder",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodersInit.test_post_cnn_encoder": {
            "name": "test_post_cnn_encoder",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_eval_wrappers.py": {
        "TestExternalEvaluators.test_multeval_bleu": {
            "name": "test_multeval_bleu",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalEvaluators.test_multeval_ter": {
            "name": "test_multeval_ter",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalEvaluators.test_multeval_meteor": {
            "name": "test_multeval_meteor",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalEvaluators.test_beer": {
            "name": "test_beer",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalEvaluators.test_gleu": {
            "name": "test_gleu",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalEvaluators.test_f1": {
            "name": "test_f1",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyEvaluator.setUp": {
            "name": "setUp",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyEvaluator.test_word_level_acc": {
            "name": "test_word_level_acc",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccuracyEvaluator.test_seq_level_acc": {
            "name": "test_seq_level_acc",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_functions.py": {
        "TestPiecewiseFunction.test_piecewise_constant": {
            "name": "test_piecewise_constant",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_model_part.py": {
        "Test.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_nn_utils.py": {
        "TestDropout.test_invalid_keep_prob": {
            "name": "test_invalid_keep_prob",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDropout.test_keep_prob": {
            "name": "test_keep_prob",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDropout.test_train_false": {
            "name": "test_train_false",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_readers.py": {
        "_make_file": {
            "name": "_make_file",
            "location": 39,
            "return": [
                "tempfile._TemporaryFileWrapper[str]"
            ],
            "arguments": {
                "from_var": []
            }
        },
        "TestStringVectorReader.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringVectorReader.test_reader": {
            "name": "test_reader",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringVectorReader.test_columns": {
            "name": "test_columns",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringVectorReader.tearDown": {
            "name": "tearDown",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_ter.py": {
        "TestBLEU.test_empty_decoded": {
            "name": "test_empty_decoded",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_empty_reference": {
            "name": "test_empty_reference",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_identical": {
            "name": "test_identical",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_empty_sentence": {
            "name": "test_empty_sentence",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBLEU.test_ter": {
            "name": "test_ter",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/test_vocabulary.py": {
        "TestVocabulary.test_all_words_in": {
            "name": "test_all_words_in",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_unknown_word": {
            "name": "test_unknown_word",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_padding": {
            "name": "test_padding",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_weights": {
            "name": "test_weights",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_there_and_back_self": {
            "name": "test_there_and_back_self",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_min_freq": {
            "name": "test_min_freq",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_count_fail": {
            "name": "test_count_fail",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/tests/__init__.py": {},
    "neuralmonkey-experiments-master/neuralmonkey/trainers/bandit_trainer.py": {
        "reinforce_score": {
            "name": "reinforce_score",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "reward": [],
                "baseline": [],
                "decoded": [],
                "logits": []
            }
        },
        "expected_loss_objective": {
            "name": "expected_loss_objective",
            "location": 59,
            "return": [
                "neuralmonkey.trainers.generic_trainer.Objective"
            ],
            "arguments": {
                "decoder": [
                    "neuralmonkey.decoders.decoder.Decoder"
                ],
                "reward_function": [
                    "Callable[([np.ndarray, np.ndarray], np.ndarray)]"
                ],
                "control_variate": [
                    "str"
                ]
            }
        },
        "expected_loss_objective._score_with_reward_function": {
            "name": "_score_with_reward_function",
            "location": 82,
            "return": [],
            "arguments": {
                "references": [],
                "hypotheses": []
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/trainers/cross_entropy_trainer.py": {
        "xent_objective": {
            "name": "xent_objective",
            "location": 10,
            "return": [
                "neuralmonkey.trainers.generic_trainer.Objective"
            ],
            "arguments": {
                "decoder": [],
                "weight": []
            }
        },
        "CrossEntropyTrainer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decoders": [
                    "list"
                ],
                "decoder_weights": [
                    "list"
                ],
                "l1_weight": [
                    "float"
                ],
                "l2_weight": [
                    "float"
                ],
                "clip_norm": [
                    "float"
                ],
                "optimizer": [],
                "var_scopes": [
                    "List[str]"
                ],
                "var_collection": [
                    "str"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/trainers/generic_trainer.py": {
        "_sum_gradients": {
            "name": "_sum_gradients",
            "location": 148,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "gradients_list": [
                    "List[List[Tuple[(Any, Any)]]]"
                ]
            }
        },
        "_scale_gradients": {
            "name": "_scale_gradients",
            "location": 160,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "gradients": [
                    "List[Tuple[(Any, Any)]]"
                ],
                "weight": []
            }
        },
        "GenericTrainer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objectives": [
                    "List[Objective]"
                ],
                "l1_weight": [
                    "float"
                ],
                "l2_weight": [
                    "float"
                ],
                "clip_norm": [
                    "float"
                ],
                "optimizer": [],
                "var_scopes": [
                    "List[str]"
                ],
                "var_collection": [
                    "str"
                ]
            }
        },
        "GenericTrainer._get_gradients": {
            "name": "_get_gradients",
            "location": 131,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "GenericTrainer.get_executable": {
            "name": "get_executable",
            "location": 135,
            "return": [
                "neuralmonkey.runners.base_runner.Executable"
            ],
            "arguments": {
                "self": [],
                "compute_losses": [],
                "summaries": [],
                "num_sessions": []
            }
        },
        "TrainExecutable.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_coders": [],
                "num_sessions": [],
                "train_op": [],
                "losses": [],
                "scalar_summaries": [],
                "histogram_summaries": []
            }
        },
        "TrainExecutable.next_to_execute": {
            "name": "next_to_execute",
            "location": 187,
            "return": [
                "Tuple[(Set[neuralmonkey.model.model_part.ModelPart], Union[(dict, list)], List[Dict[(Any, Union[(float, int, numpy.ndarray)])]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainExecutable.collect_results": {
            "name": "collect_results",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[dict]"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/trainers/self_critical_objective.py": {
        "reinforce_score": {
            "name": "reinforce_score",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "reward": [],
                "baseline": [],
                "decoded": [],
                "logits": []
            }
        },
        "self_critical_objective": {
            "name": "self_critical_objective",
            "location": 56,
            "return": [
                "neuralmonkey.trainers.generic_trainer.Objective"
            ],
            "arguments": {
                "decoder": [
                    "neuralmonkey.decoders.decoder.Decoder"
                ],
                "reward_function": [
                    "Callable[([np.ndarray, np.ndarray], np.ndarray)]"
                ],
                "weight": [
                    "float"
                ]
            }
        },
        "sentence_bleu": {
            "name": "sentence_bleu",
            "location": 112,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "references": [
                    "np.ndarray"
                ],
                "hypotheses": [
                    "np.ndarray"
                ]
            }
        },
        "sentence_gleu": {
            "name": "sentence_gleu",
            "location": 153,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "references": [
                    "np.ndarray"
                ],
                "hypotheses": [
                    "np.ndarray"
                ]
            }
        },
        "_count_matching_n_grams": {
            "name": "_count_matching_n_grams",
            "location": 191,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "ref": [
                    "np.ndarray"
                ],
                "hyp": [
                    "np.ndarray"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "_get_n_grams": {
            "name": "_get_n_grams",
            "location": 216,
            "return": [
                "Iterable[np.ndarray]"
            ],
            "arguments": {
                "indices": [
                    "np.ndarray"
                ],
                "order": [
                    "int"
                ]
            }
        }
    },
    "neuralmonkey-experiments-master/neuralmonkey/trainers/__init__.py": {},
    "neuralmonkey-experiments-master/scripts/avg_checkpoints.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/build_config.py": {
        "_patch_config_builder": {
            "name": "_patch_config_builder",
            "location": 17,
            "return": [
                "Tuple[(Set[str], List[nothing])]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_patch_config_builder.get_class_name": {
            "name": "get_class_name",
            "location": 21,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "_patch_config_builder.build_object": {
            "name": "build_object",
            "location": 30,
            "return": [],
            "arguments": {
                "value": [],
                "all_dicts": [],
                "existing_objects": [],
                "depth": []
            }
        }
    },
    "neuralmonkey-experiments-master/scripts/caffe_image_features.py": {
        "crop_image": {
            "name": "crop_image",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "target_height": [],
                "target_width": []
            }
        },
        "shape": {
            "name": "shape",
            "location": 83,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "string": []
            }
        },
        "CNN.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deploy": [],
                "model": [],
                "mean": [],
                "batch_size": [],
                "width": [],
                "height": []
            }
        },
        "CNN.get_net": {
            "name": "get_net",
            "location": 49,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CNN.get_features": {
            "name": "get_features",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "image_list": [],
                "layers": [],
                "layer_sizes": []
            }
        }
    },
    "neuralmonkey-experiments-master/scripts/column_selector.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/decompound_truecased.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/estimate_scheduled_sampling.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/import_nematus.py": {
        "log": {
            "name": "log",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "color": [
                    "str"
                ]
            }
        },
        "check_shape": {
            "name": "check_shape",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "var1_tf": [],
                "var2_np": [
                    "np.ndarray"
                ]
            }
        },
        "emb_fix_dim1": {
            "name": "emb_fix_dim1",
            "location": 35,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "variables": [
                    "List[np.ndarray]"
                ]
            }
        },
        "emb_fix": {
            "name": "emb_fix",
            "location": 39,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "variables": [
                    "List[np.ndarray]"
                ],
                "dim": [
                    "int"
                ]
            }
        },
        "sum_vars": {
            "name": "sum_vars",
            "location": 72,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "variables": [
                    "List[np.ndarray]"
                ]
            }
        },
        "concat_vars": {
            "name": "concat_vars",
            "location": 76,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "variables": [
                    "List[np.ndarray]"
                ]
            }
        },
        "squeeze": {
            "name": "squeeze",
            "location": 80,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "variables": [
                    "List[np.ndarray]"
                ]
            }
        },
        "load_nematus_json": {
            "name": "load_nematus_json",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "build_encoder": {
            "name": "build_encoder",
            "location": 205,
            "return": [
                "Tuple[(neuralmonkey.encoders.recurrent.RecurrentEncoder, str)]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "build_attention": {
            "name": "build_attention",
            "location": 242,
            "return": [
                "Tuple[(neuralmonkey.attention.feed_forward.Attention, str)]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "encoder": [
                    "neuralmonkey.encoders.recurrent.RecurrentEncoder"
                ]
            }
        },
        "build_decoder": {
            "name": "build_decoder",
            "location": 282,
            "return": [
                "Tuple[(neuralmonkey.decoders.decoder.Decoder, str)]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "attention": [
                    "neuralmonkey.attention.feed_forward.Attention"
                ],
                "encoder": [
                    "neuralmonkey.encoders.recurrent.RecurrentEncoder"
                ]
            }
        },
        "build_model": {
            "name": "build_model",
            "location": 315,
            "return": [
                "Tuple[(neuralmonkey.encoders.recurrent.RecurrentEncoder, neuralmonkey.attention.feed_forward.Attention, neuralmonkey.decoders.decoder.Decoder, str)]"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "load_nematus_file": {
            "name": "load_nematus_file",
            "location": 326,
            "return": [
                "Dict[(str, np.ndarray)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "assign_vars": {
            "name": "assign_vars",
            "location": 333,
            "return": [
                "list"
            ],
            "arguments": {
                "variables": [
                    "Dict[(str, np.ndarray)]"
                ]
            }
        },
        "write_config": {
            "name": "write_config",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "experiment_dir": [
                    "str"
                ],
                "ini": [
                    "str"
                ]
            }
        },
        "prepare_output_dir": {
            "name": "prepare_output_dir",
            "location": 429,
            "return": [
                "bool"
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/max_column_finder.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/postedit_prepare_data.py": {
        "load_tokenized": {
            "name": "load_tokenized",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "text_file": [],
                "preprocess": []
            }
        },
        "convert_to_edits": {
            "name": "convert_to_edits",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "source": [],
                "target": []
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/postedit_reconstruct_data.py": {
        "reconstruct": {
            "name": "reconstruct",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "source": [],
                "edits": []
            }
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/prepare_str_images.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/speech_features.py": {
        "try_parse_number": {
            "name": "try_parse_number",
            "location": 20,
            "return": [
                "Union[(float, int, str)]"
            ],
            "arguments": {
                "str_value": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/tf_save_images.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "neuralmonkey-experiments-master/scripts/tokenize_data.py": {
        "get_decompounder": {
            "name": "get_decompounder",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "normalize_quotes": {
            "name": "normalize_quotes",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "token": []
            }
        }
    }
}
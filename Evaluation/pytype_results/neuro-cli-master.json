{
    "neuro-cli-master/build-tools/cli-command-checks.py": {
        "check_commands_tree": {
            "name": "check_commands_tree",
            "location": 63,
            "return": [],
            "arguments": {
                "parent_ctx": [],
                "command": [],
                "stack": [],
                "checkers": []
            }
        },
        "main": {
            "name": "main",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "CommandChecker.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "CommandChecker._add_error": {
            "name": "_add_error",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "CommandChecker.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "name": []
            }
        },
        "ShortDocLen.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "len_limit": [],
                "errors": []
            }
        },
        "ShortDocLen.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "name": []
            }
        },
        "UniqueShortDocInGroup.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "UniqueShortDocInGroup.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "name": []
            }
        }
    },
    "neuro-cli-master/build-tools/cli-help-generator.py": {
        "parse_doc": {
            "name": "parse_doc",
            "location": 33,
            "return": [],
            "arguments": {
                "ctx": [],
                "command": [],
                "stack": []
            }
        },
        "parse_command": {
            "name": "parse_command",
            "location": 60,
            "return": [],
            "arguments": {
                "parent_ctx": [],
                "command": [],
                "stack": []
            }
        },
        "generate_markdown": {
            "name": "generate_markdown",
            "location": 89,
            "return": [],
            "arguments": {
                "info": [],
                "header_prefix": []
            }
        },
        "generate_command_markdown": {
            "name": "generate_command_markdown",
            "location": 181,
            "return": [],
            "arguments": {
                "info": [],
                "header_prefix": []
            }
        },
        "main": {
            "name": "main",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "generate_markdown.simple_escape_line": {
            "name": "simple_escape_line",
            "location": 90,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "generate_markdown.escape": {
            "name": "escape",
            "location": 99,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "generate_markdown.escape_cell": {
            "name": "escape_cell",
            "location": 112,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "neuro-cli-master/build-tools/garbage-files-generator.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "generate_data": {
            "name": "generate_data",
            "location": 23,
            "return": [],
            "arguments": {
                "total_size": [],
                "files_count": [],
                "branching_factor": [],
                "output_dir": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "_parse_size": {
            "name": "_parse_size",
            "location": 101,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "_parse_dir_path": {
            "name": "_parse_dir_path",
            "location": 109,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "neuro-cli-master/build-tools/site-help-generator.py": {
        "_process_help": {
            "name": "_process_help",
            "location": 20,
            "return": [],
            "arguments": {
                "help": []
            }
        },
        "gen_command": {
            "name": "gen_command",
            "location": 24,
            "return": [],
            "arguments": {
                "out": [],
                "cmd": [],
                "parent_ctx": []
            }
        },
        "simple_escape_line": {
            "name": "simple_escape_line",
            "location": 101,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 113,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "escape_cell": {
            "name": "escape_cell",
            "location": 127,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "gen_group": {
            "name": "gen_group",
            "location": 133,
            "return": [],
            "arguments": {
                "group": [],
                "target_path": [],
                "parent_ctx": []
            }
        },
        "gen_shortcuts": {
            "name": "gen_shortcuts",
            "location": 182,
            "return": [],
            "arguments": {
                "commands": [],
                "target_path": [],
                "ctx": []
            }
        },
        "gen_topics": {
            "name": "gen_topics",
            "location": 204,
            "return": [],
            "arguments": {
                "target_path": [],
                "ctx": []
            }
        },
        "gen_summary": {
            "name": "gen_summary",
            "location": 212,
            "return": [],
            "arguments": {
                "target_path": [],
                "groups": [],
                "ctx": []
            }
        },
        "main": {
            "name": "main",
            "location": 240,
            "return": [],
            "arguments": {
                "target_dir": []
            }
        }
    },
    "neuro-cli-master/build-tools/version.py": {
        "find_root": {
            "name": "find_root",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "read_version": {
            "name": "read_version",
            "location": 98,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "main": {
            "name": "main",
            "location": 118,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "check": {
            "name": "check",
            "location": 131,
            "return": [],
            "arguments": {
                "cfg": []
            }
        },
        "update": {
            "name": "update",
            "location": 144,
            "return": [],
            "arguments": {
                "cfg": []
            }
        },
        "VersionProcessor.read": {
            "name": "read",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "VersionProcessor.write": {
            "name": "write",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "version": []
            }
        },
        "InitVP.read": {
            "name": "read",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "InitVP.write": {
            "name": "write",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "version": []
            }
        },
        "SetupVP.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "replace_sdk": []
            }
        },
        "SetupVP.read": {
            "name": "read",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "SetupVP.write": {
            "name": "write",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "version": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/setup.py": {},
    "neuro-cli-master/neuro-cli/src/neuro_cli/admin.py": {
        "admin": {
            "name": "admin",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "_parse_finite_decimal": {
            "name": "_parse_finite_decimal",
            "location": 633,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_parse_credits_value": {
            "name": "_parse_credits_value",
            "location": 643,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_parse_jobs_value": {
            "name": "_parse_jobs_value",
            "location": 649,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_update_presets_and_fetch._print": {
            "name": "_print",
            "location": 885,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/ael.py": {
        "_has_detach": {
            "name": "_has_detach",
            "location": 433,
            "return": [],
            "arguments": {
                "keys": [],
                "term": []
            }
        },
        "_create_interruption_dialog": {
            "name": "_create_interruption_dialog",
            "location": 612,
            "return": [],
            "arguments": {}
        },
        "AttachHelper.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_process_resizing.resize": {
            "name": "resize",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "_process_stdin_tty.read_ready": {
            "name": "read_ready",
            "location": 447,
            "return": [],
            "arguments": {}
        },
        "_process_stdin_non_tty.read_ready": {
            "name": "read_ready",
            "location": 556,
            "return": [],
            "arguments": {}
        },
        "_create_interruption_dialog.nothing": {
            "name": "nothing",
            "location": 617,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "_create_interruption_dialog.kill": {
            "name": "kill",
            "location": 623,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "_create_interruption_dialog.detach": {
            "name": "detach",
            "location": 629,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "_create_interruption_dialog._": {
            "name": "_",
            "location": 633,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "_process_ctrl_c.on_signal": {
            "name": "on_signal",
            "location": 657,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/alias.py": {
        "_parse_options": {
            "name": "_parse_options",
            "location": 171,
            "return": [],
            "arguments": {
                "descr": []
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 211,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "_validate_exec": {
            "name": "_validate_exec",
            "location": 273,
            "return": [],
            "arguments": {
                "cmd": [],
                "options": [],
                "args": []
            }
        },
        "_longest": {
            "name": "_longest",
            "location": 302,
            "return": [],
            "arguments": {
                "opts": []
            }
        },
        "_process_param": {
            "name": "_process_param",
            "location": 308,
            "return": [],
            "arguments": {
                "param": [],
                "val": []
            }
        },
        "InternalAlias.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "alias": []
            }
        },
        "InternalAlias.invoke": {
            "name": "invoke",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "InternalAlias.get_short_help_str": {
            "name": "get_short_help_str",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "InternalAlias.format_help": {
            "name": "format_help",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "ExternalAlias.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "alias": []
            }
        },
        "ExternalAlias.invoke": {
            "name": "invoke",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalAlias._build_simplified": {
            "name": "_build_simplified",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalAlias._build_pattern": {
            "name": "_build_pattern",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExternalAlias.get_short_help_str": {
            "name": "get_short_help_str",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "ExternalAlias.format_help_text": {
            "name": "format_help_text",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/asyncio_utils.py": {
        "_exception_handler": {
            "name": "_exception_handler",
            "location": 91,
            "return": [],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "_cancel_all_tasks": {
            "name": "_cancel_all_tasks",
            "location": 106,
            "return": [],
            "arguments": {
                "loop": []
            }
        },
        "setup_child_watcher": {
            "name": "setup_child_watcher",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "asyncgeneratorcontextmanager": {
            "name": "asyncgeneratorcontextmanager",
            "location": 294,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "main": []
            }
        },
        "Runner.__enter__": {
            "name": "__enter__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.__exit__": {
            "name": "__exit__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "_compute_returncode": {
            "name": "_compute_returncode",
            "location": 235,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "_AsyncIteratorAndContextManager.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "gen": []
            }
        },
        "_AsyncIteratorAndContextManager.__aiter__": {
            "name": "__aiter__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncIteratorAndContextManager.__anext__": {
            "name": "__anext__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "asyncgeneratorcontextmanager.wrapper": {
            "name": "wrapper",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "ThreadedChildWatcher.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadedChildWatcher.close": {
            "name": "close",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadedChildWatcher.__enter__": {
            "name": "__enter__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadedChildWatcher.__exit__": {
            "name": "__exit__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "ThreadedChildWatcher.__del__": {
            "name": "__del__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "_warn": []
            }
        },
        "ThreadedChildWatcher.add_child_handler": {
            "name": "add_child_handler",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "pid": [],
                "callback": []
            }
        },
        "ThreadedChildWatcher.remove_child_handler": {
            "name": "remove_child_handler",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "pid": []
            }
        },
        "ThreadedChildWatcher.attach_loop": {
            "name": "attach_loop",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "ThreadedChildWatcher._do_waitpid": {
            "name": "_do_waitpid",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "expected_pid": [],
                "callback": [],
                "args": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/blob_storage.py": {
        "blob_storage": {
            "name": "blob_storage",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "make_bucket_getter": {
            "name": "make_bucket_getter",
            "location": 984,
            "return": [],
            "arguments": {
                "client": [],
                "cluster_name": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/click_types.py": {
        "_complete_clusters": {
            "name": "_complete_clusters",
            "location": 120,
            "return": [],
            "arguments": {
                "client": [],
                "prefix": [],
                "incomplete": []
            }
        },
        "_complete_id_name": {
            "name": "_complete_id_name",
            "location": 639,
            "return": [],
            "arguments": {
                "id": [],
                "name": [],
                "incomplete": []
            }
        },
        "_merge_autocompletion_args": {
            "name": "_merge_autocompletion_args",
            "location": 1046,
            "return": [],
            "arguments": {
                "args": [],
                "incomplete": []
            }
        },
        "setup_shell_completion": {
            "name": "setup_shell_completion",
            "location": 1176,
            "return": [],
            "arguments": {}
        },
        "AsyncType.convert": {
            "name": "convert",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "AsyncType.shell_complete": {
            "name": "shell_complete",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "param": [],
                "incomplete": []
            }
        },
        "LocalImageType.convert": {
            "name": "convert",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "RemoteImageType.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "tag_option": []
            }
        },
        "RemoteTaglessImageType.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "tag_option": []
            }
        },
        "LocalRemotePortParamType.convert": {
            "name": "convert",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "MemoryType.convert": {
            "name": "convert",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "JobNameType.convert": {
            "name": "convert",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "DiskNameType.convert": {
            "name": "convert",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "BucketNameType.convert": {
            "name": "convert",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "JobColumnsType.convert": {
            "name": "convert",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "TopColumnsType.convert": {
            "name": "convert",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "PresetType._get_presets": {
            "name": "_get_presets",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "client": []
            }
        },
        "ClusterType.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "allow_unknown": []
            }
        },
        "OrgType.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "allow_unknown": []
            }
        },
        "URLCompleter.get_completions": {
            "name": "get_completions",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "root": [],
                "incomplete": []
            }
        },
        "PathURLCompleter.__init__": {
            "name": "__init__",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "complete_dir": [],
                "complete_file": []
            }
        },
        "PathURLCompleter._split_uri": {
            "name": "_split_uri",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "incomplete": []
            }
        },
        "PathURLCompleter._make_item": {
            "name": "_make_item",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "name": [],
                "is_dir": []
            }
        },
        "PathURLCompleter._iter_dir": {
            "name": "_iter_dir",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "uri": []
            }
        },
        "PlatformURIType.__init__": {
            "name": "__init__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewZshComplete.format_completion": {
            "name": "format_completion",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NewBashComplete.get_completion_args": {
            "name": "get_completion_args",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NewBashComplete.format_completion": {
            "name": "format_completion",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "UnionType.__init__": {
            "name": "__init__",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PathURLCompleter.DirEntry.name": {
            "name": "name",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathURLCompleter.DirEntry.is_dir": {
            "name": "is_dir",
            "location": 718,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/completion.py": {
        "completion": {
            "name": "completion",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/config.py": {
        "config": {
            "name": "config",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "_print_welcome": {
            "name": "_print_welcome",
            "location": 62,
            "return": [],
            "arguments": {
                "root": [],
                "url": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/const.py": {},
    "neuro-cli-master/neuro-cli/src/neuro_cli/defaults.py": {},
    "neuro-cli-master/neuro-cli/src/neuro_cli/disks.py": {
        "disk": {
            "name": "disk",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/docker_credential_helper.py": {
        "error": {
            "name": "error",
            "location": 10,
            "return": [],
            "arguments": {
                "message": [],
                "exit_code": []
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/file_logging.py": {
        "get_handler": {
            "name": "get_handler",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_log_file_path": {
            "name": "get_log_file_path",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "_get_handler": {
            "name": "_get_handler",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "_do_rotation": {
            "name": "_do_rotation",
            "location": 36,
            "return": [],
            "arguments": {
                "delay": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/image.py": {
        "image": {
            "name": "image",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/job.py": {
        "job": {
            "name": "job",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "_parse_cmd": {
            "name": "_parse_cmd",
            "location": 1320,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "calc_statuses": {
            "name": "calc_statuses",
            "location": 1337,
            "return": [],
            "arguments": {
                "status": [],
                "all": []
            }
        },
        "_parse_date": {
            "name": "_parse_date",
            "location": 1378,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_check_tty": {
            "name": "_check_tty",
            "location": 1395,
            "return": [],
            "arguments": {
                "root": [],
                "tty": []
            }
        },
        "_job_to_cli_args": {
            "name": "_job_to_cli_args",
            "location": 1403,
            "return": [],
            "arguments": {
                "job": []
            }
        },
        "_fix_cmd": {
            "name": "_fix_cmd",
            "location": 1470,
            "return": [],
            "arguments": {
                "cmd_name": [],
                "tmpl": [],
                "cmd": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/log_formatter.py": {
        "ConsoleHandler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "color": [],
                "show_traceback": []
            }
        },
        "ConsoleHandler.handle": {
            "name": "handle",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ConsoleHandler.emit": {
            "name": "emit",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ConsoleHandler.setConsole": {
            "name": "setConsole",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "ConsoleHandler.get_level_message": {
            "name": "get_level_message",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/main.py": {
        "setup_stdout": {
            "name": "setup_stdout",
            "location": 53,
            "return": [],
            "arguments": {
                "errors": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 67,
            "return": [],
            "arguments": {
                "verbosity": [],
                "color": [],
                "show_traceback": []
            }
        },
        "print_options": {
            "name": "print_options",
            "location": 340,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 468,
            "return": [],
            "arguments": {
                "ctx": [],
                "verbose": [],
                "quiet": [],
                "neuromation_config": [],
                "show_traceback": [],
                "color": [],
                "disable_pypi_version_check": [],
                "network_timeout": [],
                "trace": [],
                "x_trace_all": [],
                "hide_token": [],
                "skip_stats": [],
                "iso_datetime_format": []
            }
        },
        "_err_to_str": {
            "name": "_err_to_str",
            "location": 544,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "main": {
            "name": "main",
            "location": 551,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "MainGroup.make_context": {
            "name": "make_context",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "info_name": [],
                "args": [],
                "parent": []
            }
        },
        "MainGroup.resolve_command": {
            "name": "resolve_command",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "args": []
            }
        },
        "MainGroup._format_group": {
            "name": "_format_group",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "grp": [],
                "formatter": []
            }
        },
        "MainGroup.format_commands": {
            "name": "format_commands",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "MainGroup.format_options": {
            "name": "format_options",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "MainGroup.get_command": {
            "name": "get_command",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "cmd_name": []
            }
        },
        "MainGroup.list_commands": {
            "name": "list_commands",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "MainGroup._pre_load": {
            "name": "_pre_load",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/parse_utils.py": {
        "parse_memory": {
            "name": "parse_memory",
            "location": 24,
            "return": [],
            "arguments": {
                "memory": []
            }
        },
        "_get_column": {
            "name": "_get_column",
            "location": 148,
            "return": [],
            "arguments": {
                "id": [],
                "columns_map": [],
                "fmt": []
            }
        },
        "_get": {
            "name": "_get",
            "location": 169,
            "return": [],
            "arguments": {
                "dct": [],
                "name": [],
                "fmt": [],
                "converter": [],
                "default": []
            }
        },
        "_justify": {
            "name": "_justify",
            "location": 186,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "_max_width": {
            "name": "_max_width",
            "location": 193,
            "return": [],
            "arguments": {
                "widths": [],
                "indent": []
            }
        },
        "_parse_columns": {
            "name": "_parse_columns",
            "location": 206,
            "return": [],
            "arguments": {
                "fmt": [],
                "columns_map": [],
                "default_fmt": []
            }
        },
        "get_default_ps_columns": {
            "name": "get_default_ps_columns",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "get_default_top_columns": {
            "name": "get_default_top_columns",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "parse_ps_columns": {
            "name": "parse_ps_columns",
            "location": 275,
            "return": [],
            "arguments": {
                "fmt": []
            }
        },
        "parse_top_columns": {
            "name": "parse_top_columns",
            "location": 279,
            "return": [],
            "arguments": {
                "fmt": []
            }
        },
        "parse_sort_keys": {
            "name": "parse_sort_keys",
            "location": 339,
            "return": [],
            "arguments": {
                "fmt": []
            }
        },
        "parse_timedelta": {
            "name": "parse_timedelta",
            "location": 363,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "serialize_timedelta": {
            "name": "serialize_timedelta",
            "location": 384,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "InvertKey.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "InvertKey.__lt__": {
            "name": "__lt__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvertKey.__gt__": {
            "name": "__gt__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvertKey.__le__": {
            "name": "__le__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvertKey.__ge__": {
            "name": "__ge__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvertKey.__eq__": {
            "name": "__eq__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvertKey.__ne__": {
            "name": "__ne__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/plugin.py": {
        "get_neuro_cli_txt": {
            "name": "get_neuro_cli_txt",
            "location": 10,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        },
        "get_certifi_txt": {
            "name": "get_certifi_txt",
            "location": 24,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 28,
            "return": [],
            "arguments": {
                "manager": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/root.py": {
        "MaybePager.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "MaybePager.show": {
            "name": "show",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Root.__post_init__": {
            "name": "__post_init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.close": {
            "name": "close",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.run": {
            "name": "run",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "main": []
            }
        },
        "Root.quiet": {
            "name": "quiet",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.terminal_size": {
            "name": "terminal_size",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.timeout": {
            "name": "timeout",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.client": {
            "name": "client",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.factory": {
            "name": "factory",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root._create_trace_config": {
            "name": "_create_trace_config",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root._print_trace": {
            "name": "_print_trace",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "Root._process_chunk": {
            "name": "_process_chunk",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "chunk": [],
                "printable": []
            }
        },
        "Root._sanitize_header_value": {
            "name": "_sanitize_header_value",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Root._sanitize_token": {
            "name": "_sanitize_token",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Root._find_all_tokens": {
            "name": "_find_all_tokens",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Root.soft_reset_tty": {
            "name": "soft_reset_tty",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.status": {
            "name": "status",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Root.pager": {
            "name": "pager",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Root.print": {
            "name": "print",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/secrets.py": {
        "secret": {
            "name": "secret",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 120,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/service_accounts.py": {
        "service_account": {
            "name": "service_account",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/share.py": {
        "acl": {
            "name": "acl",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "_permission_key": {
            "name": "_permission_key",
            "location": 181,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "_shared_permission_key": {
            "name": "_shared_permission_key",
            "location": 185,
            "return": [],
            "arguments": {
                "share": []
            }
        },
        "_fmt_action": {
            "name": "_fmt_action",
            "location": 196,
            "return": [],
            "arguments": {
                "action": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/stats.py": {
        "ensure_schema": {
            "name": "ensure_schema",
            "location": 42,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "add_usage": {
            "name": "add_usage",
            "location": 74,
            "return": [],
            "arguments": {
                "db": [],
                "cmd": [],
                "args": []
            }
        },
        "select_oldest": {
            "name": "select_oldest",
            "location": 84,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "delete_oldest": {
            "name": "delete_oldest",
            "location": 104,
            "return": [],
            "arguments": {
                "db": [],
                "old": []
            }
        },
        "make_record": {
            "name": "make_record",
            "location": 108,
            "return": [],
            "arguments": {
                "uid": [],
                "url": [],
                "cmd": [],
                "args": [],
                "version": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/storage.py": {
        "storage": {
            "name": "storage",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "filter_option": {
            "name": "filter_option",
            "location": 268,
            "return": [],
            "arguments": {
                "optname": [],
                "varname": [],
                "is_exclude": [],
                "help": []
            }
        },
        "FileFilterParserOption.process": {
            "name": "process",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "state": []
            }
        },
        "FileFilterOption.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileFilterOption.add_to_parser": {
            "name": "add_to_parser",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "ctx": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/topics.py": {
        "command": {
            "name": "command",
            "location": 26,
            "return": [],
            "arguments": {
                "name": [],
                "cls": []
            }
        },
        "group": {
            "name": "group",
            "location": 54,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "topics": {
            "name": "topics",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "Command.format_help": {
            "name": "format_help",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "Command.get_short_help_str": {
            "name": "get_short_help_str",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "Group.command": {
            "name": "command",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.group": {
            "name": "group",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.command.decorator": {
            "name": "decorator",
            "location": 36,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Group.group.decorator": {
            "name": "decorator",
            "location": 46,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/utils.py": {
        "_wrap_async_callback": {
            "name": "_wrap_async_callback",
            "location": 100,
            "return": [],
            "arguments": {
                "callback": [],
                "init_client": []
            }
        },
        "split_examples": {
            "name": "split_examples",
            "location": 142,
            "return": [],
            "arguments": {
                "help": []
            }
        },
        "format_example": {
            "name": "format_example",
            "location": 146,
            "return": [],
            "arguments": {
                "example": [],
                "formatter": []
            }
        },
        "_collect_params": {
            "name": "_collect_params",
            "location": 243,
            "return": [],
            "arguments": {
                "cmd": [],
                "ctx": []
            }
        },
        "command": {
            "name": "command",
            "location": 301,
            "return": [],
            "arguments": {
                "name": [],
                "cls": []
            }
        },
        "group": {
            "name": "group",
            "location": 335,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "print_help": {
            "name": "print_help",
            "location": 341,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "alias": {
            "name": "alias",
            "location": 370,
            "return": [],
            "arguments": {
                "origin": [],
                "name": []
            }
        },
        "option": {
            "name": "option",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "argument": {
            "name": "argument",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "volume_to_verbose_str": {
            "name": "volume_to_verbose_str",
            "location": 415,
            "return": [],
            "arguments": {
                "volume": []
            }
        },
        "parse_resource_for_sharing": {
            "name": "parse_resource_for_sharing",
            "location": 575,
            "return": [],
            "arguments": {
                "uri": [],
                "root": []
            }
        },
        "parse_file_resource": {
            "name": "parse_file_resource",
            "location": 589,
            "return": [],
            "arguments": {
                "uri": [],
                "root": []
            }
        },
        "parse_secret_resource": {
            "name": "parse_secret_resource",
            "location": 599,
            "return": [],
            "arguments": {
                "uri": [],
                "root": []
            }
        },
        "parse_permission_action": {
            "name": "parse_permission_action",
            "location": 606,
            "return": [],
            "arguments": {
                "action": []
            }
        },
        "parse_org_name": {
            "name": "parse_org_name",
            "location": 616,
            "return": [],
            "arguments": {
                "org": [],
                "root": []
            }
        },
        "format_size": {
            "name": "format_size",
            "location": 620,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "pager_maybe": {
            "name": "pager_maybe",
            "location": 626,
            "return": [],
            "arguments": {
                "lines": [],
                "tty": [],
                "terminal_size": []
            }
        },
        "_wrap_async_callback.wrapper": {
            "name": "wrapper",
            "location": 109,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "HelpFormatter.write_usage": {
            "name": "write_usage",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "prog": [],
                "args": [],
                "prefix": []
            }
        },
        "HelpFormatter.write_heading": {
            "name": "write_heading",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "heading": []
            }
        },
        "Context.make_formatter": {
            "name": "make_formatter",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuroClickMixin.get_params": {
            "name": "get_params",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "NeuroClickMixin.get_help_option": {
            "name": "get_help_option",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "NeuroClickMixin.get_short_help_str": {
            "name": "get_short_help_str",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "NeuroClickMixin.format_help_text": {
            "name": "format_help_text",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "NeuroClickMixin.make_context": {
            "name": "make_context",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "info_name": [],
                "args": [],
                "parent": []
            }
        },
        "NeuroGroupMixin.format_options": {
            "name": "format_options",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "formatter": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "init_client": [],
                "wrap_async": []
            }
        },
        "Command.invoke": {
            "name": "invoke",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Group.command": {
            "name": "command",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.group": {
            "name": "group",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.invoke": {
            "name": "invoke",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "DeprecatedGroup.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [],
                "name": []
            }
        },
        "DeprecatedGroup.get_command": {
            "name": "get_command",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "cmd_name": []
            }
        },
        "DeprecatedGroup.list_commands": {
            "name": "list_commands",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuroClickMixin.get_params.sort_key": {
            "name": "sort_key",
            "location": 165,
            "return": [],
            "arguments": {
                "opt": []
            }
        },
        "NeuroClickMixin.get_help_option.show_help": {
            "name": "show_help",
            "location": 176,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "Group.command.decorator": {
            "name": "decorator",
            "location": 311,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Group.group.decorator": {
            "name": "decorator",
            "location": 321,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/__init__.py": {},
    "neuro-cli-master/neuro-cli/src/neuro_cli/__main__.py": {},
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/admin.py": {
        "_format_node_pools": {
            "name": "_format_node_pools",
            "location": 220,
            "return": [],
            "arguments": {
                "node_pools": []
            }
        },
        "_format_storage": {
            "name": "_format_storage",
            "location": 269,
            "return": [],
            "arguments": {
                "storage": []
            }
        },
        "_is_scalable": {
            "name": "_is_scalable",
            "location": 294,
            "return": [],
            "arguments": {
                "node_pools": []
            }
        },
        "_has_preemptible": {
            "name": "_has_preemptible",
            "location": 301,
            "return": [],
            "arguments": {
                "node_pools": []
            }
        },
        "_has_idle": {
            "name": "_has_idle",
            "location": 308,
            "return": [],
            "arguments": {
                "node_pools": []
            }
        },
        "_gpu": {
            "name": "_gpu",
            "location": 315,
            "return": [],
            "arguments": {
                "node_pool": []
            }
        },
        "ClusterUserFormatter.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "clusters_users": []
            }
        },
        "OrgUserFormatter.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "org_users": []
            }
        },
        "OrgClustersFormatter.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "org_clusters": []
            }
        },
        "OrgClusterFormatter.__call__": {
            "name": "__call__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "org_cluster": []
            }
        },
        "ClustersFormatter.__call__": {
            "name": "__call__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "clusters": []
            }
        },
        "OrgsFormatter.__call__": {
            "name": "__call__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "orgs": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/blob_storage.py": {
        "get_file_type": {
            "name": "get_file_type",
            "location": 17,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "BaseBlobFormatter.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "SimpleBlobFormatter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "color": [],
                "uri_formatter": []
            }
        },
        "SimpleBlobFormatter.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LongBlobFormatter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "human_readable": [],
                "color": [],
                "uri_formatter": []
            }
        },
        "LongBlobFormatter.to_row": {
            "name": "to_row",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LongBlobFormatter.to_row_bucket": {
            "name": "to_row_bucket",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LongBlobFormatter.to_row_blob": {
            "name": "to_row_blob",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LongBlobFormatter.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/buckets.py": {
        "BaseBucketsFormatter.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": []
            }
        },
        "SimpleBucketsFormatter.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": []
            }
        },
        "BucketsFormatter.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": [],
                "datetime_formatter": []
            }
        },
        "BucketsFormatter._bucket_to_table_row": {
            "name": "_bucket_to_table_row",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": []
            }
        },
        "BucketsFormatter.__call__": {
            "name": "__call__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": []
            }
        },
        "BucketFormatter.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": [],
                "datetime_formatter": []
            }
        },
        "BucketFormatter.__call__": {
            "name": "__call__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "credentials": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/bucket_credentials.py": {
        "BucketCredentialsFormatter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "get_bucket": []
            }
        },
        "BucketCredentialFormatter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "get_bucket": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/config.py": {
        "_format_presets": {
            "name": "_format_presets",
            "location": 103,
            "return": [],
            "arguments": {
                "presets": [],
                "available_jobs_counts": []
            }
        },
        "format_quota_details": {
            "name": "format_quota_details",
            "location": 174,
            "return": [],
            "arguments": {
                "quota": []
            }
        },
        "ConfigFormatter.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "available_jobs_counts": [],
                "quota": [],
                "org_quota": []
            }
        },
        "AdminQuotaFormatter.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "quota": []
            }
        },
        "BalanceFormatter.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "balance": []
            }
        },
        "ClustersFormatter.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "clusters": [],
                "default_cluster": [],
                "default_org": []
            }
        },
        "AliasesFormatter.__call__": {
            "name": "__call__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "aliases": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/disks.py": {
        "format_disk_timeout_unused": {
            "name": "format_disk_timeout_unused",
            "location": 113,
            "return": [],
            "arguments": {
                "timeout_unused": []
            }
        },
        "BaseDisksFormatter.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "jobs": []
            }
        },
        "SimpleDisksFormatter.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "disks": []
            }
        },
        "DisksFormatter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": [],
                "datetime_formatter": []
            }
        },
        "DisksFormatter._disk_to_table_row": {
            "name": "_disk_to_table_row",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "disk": []
            }
        },
        "DisksFormatter.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "disks": []
            }
        },
        "DiskFormatter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": [],
                "datetime_formatter": []
            }
        },
        "DiskFormatter.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "disk": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/images.py": {
        "DockerImageProgress.create": {
            "name": "create",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "console": [],
                "quiet": []
            }
        },
        "DockerImageProgress.close": {
            "name": "close",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerImageProgress.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DockerImageProgress.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "DockerImageProgress._shorten_container_hash": {
            "name": "_shorten_container_hash",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "QuietDockerImageProgress.pull": {
            "name": "pull",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "QuietDockerImageProgress.push": {
            "name": "push",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "QuietDockerImageProgress.step": {
            "name": "step",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "QuietDockerImageProgress.close": {
            "name": "close",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuietDockerImageProgress.save": {
            "name": "save",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "QuietDockerImageProgress.commit_started": {
            "name": "commit_started",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "QuietDockerImageProgress.commit_finished": {
            "name": "commit_finished",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "DetailedDockerImageProgress.push": {
            "name": "push",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.pull": {
            "name": "pull",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.step": {
            "name": "step",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.save": {
            "name": "save",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.commit_started": {
            "name": "commit_started",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.commit_finished": {
            "name": "commit_finished",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DetailedDockerImageProgress.close": {
            "name": "close",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamDockerImageProgress.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "StreamDockerImageProgress.push": {
            "name": "push",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.pull": {
            "name": "pull",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.step": {
            "name": "step",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.save": {
            "name": "save",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.commit_started": {
            "name": "commit_started",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.commit_finished": {
            "name": "commit_finished",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamDockerImageProgress.close": {
            "name": "close",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseImagesFormatter.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "image_formatter": []
            }
        },
        "BaseImagesFormatter.__call__": {
            "name": "__call__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "QuietImagesFormatter.__call__": {
            "name": "__call__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "ShortImagesFormatter.__call__": {
            "name": "__call__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "LongImagesFormatter.__call__": {
            "name": "__call__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "images": []
            }
        },
        "BaseTagsFormatter._build_table_for": {
            "name": "_build_table_for",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTagsFormatter.__call__": {
            "name": "__call__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "tags": []
            }
        },
        "ShortTagsFormatter.__call__": {
            "name": "__call__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "tags": []
            }
        },
        "LongTagsFormatter.__call__": {
            "name": "__call__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "tags": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/jobs.py": {
        "fmt_status": {
            "name": "fmt_status",
            "location": 52,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "get_lifespan_ends": {
            "name": "get_lifespan_ends",
            "location": 57,
            "return": [],
            "arguments": {
                "job": []
            }
        },
        "format_life_span": {
            "name": "format_life_span",
            "location": 290,
            "return": [],
            "arguments": {
                "life_span": []
            }
        },
        "_format_row": {
            "name": "_format_row",
            "location": 465,
            "return": [],
            "arguments": {
                "columns": [],
                "get": []
            }
        },
        "_add_columns": {
            "name": "_add_columns",
            "location": 562,
            "return": [],
            "arguments": {
                "table": [],
                "columns": []
            }
        },
        "JobStatusFormatter.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": [],
                "datetime_formatter": []
            }
        },
        "JobStatusFormatter.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "job_status": []
            }
        },
        "LifeSpanUpdateFormatter.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "datetime_formatter": []
            }
        },
        "LifeSpanUpdateFormatter.__call__": {
            "name": "__call__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "job_status": []
            }
        },
        "JobTelemetryFormatter.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "console": [],
                "username": [],
                "sort_keys": [],
                "columns": [],
                "image_formatter": [],
                "datetime_formatter": [],
                "maxrows": []
            }
        },
        "JobTelemetryFormatter.update": {
            "name": "update",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "job": [],
                "info": []
            }
        },
        "JobTelemetryFormatter.remove": {
            "name": "remove",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": []
            }
        },
        "JobTelemetryFormatter.render": {
            "name": "render",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobTelemetryFormatter.process_renderables": {
            "name": "process_renderables",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "renderables": []
            }
        },
        "JobTelemetryFormatter.__enter__": {
            "name": "__enter__",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobTelemetryFormatter.__exit__": {
            "name": "__exit__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BaseJobsFormatter.__call__": {
            "name": "__call__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "jobs": []
            }
        },
        "SimpleJobsFormatter.__call__": {
            "name": "__call__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "jobs": []
            }
        },
        "TabularJobRow.from_job": {
            "name": "from_job",
            "location": 434,
            "return": [],
            "arguments": {
                "cls": [],
                "job": [],
                "username": [],
                "image_formatter": [],
                "datetime_formatter": []
            }
        },
        "TabularJobRow.to_list": {
            "name": "to_list",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "TabularJobsFormatter.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "columns": [],
                "image_formatter": [],
                "datetime_formatter": []
            }
        },
        "TabularJobsFormatter.__call__": {
            "name": "__call__",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "jobs": []
            }
        },
        "JobStartProgress.create": {
            "name": "create",
            "location": 520,
            "return": [],
            "arguments": {
                "cls": [],
                "console": [],
                "quiet": []
            }
        },
        "JobStartProgress.begin": {
            "name": "begin",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStartProgress.step": {
            "name": "step",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStartProgress.end": {
            "name": "end",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStartProgress._get_status_reason_message": {
            "name": "_get_status_reason_message",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStartProgress._get_status_description_message": {
            "name": "_get_status_description_message",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStartProgress.__enter__": {
            "name": "__enter__",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStartProgress.__exit__": {
            "name": "__exit__",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "DetailedJobStartProgress.__init__": {
            "name": "__init__",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "DetailedJobStartProgress.begin": {
            "name": "begin",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStartProgress.step": {
            "name": "step",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStartProgress.end": {
            "name": "end",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStartProgress.process_renderables": {
            "name": "process_renderables",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "renderables": []
            }
        },
        "DetailedJobStartProgress.__enter__": {
            "name": "__enter__",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DetailedJobStartProgress.__exit__": {
            "name": "__exit__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "StreamJobStartProgress.__init__": {
            "name": "__init__",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "StreamJobStartProgress.begin": {
            "name": "begin",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "StreamJobStartProgress.step": {
            "name": "step",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "StreamJobStartProgress.end": {
            "name": "end",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.create": {
            "name": "create",
            "location": 713,
            "return": [],
            "arguments": {
                "cls": [],
                "console": [],
                "quiet": []
            }
        },
        "JobStopProgress.__init__": {
            "name": "__init__",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStopProgress.kill": {
            "name": "kill",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.detach": {
            "name": "detach",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.step": {
            "name": "step",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.tick": {
            "name": "tick",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.timeout": {
            "name": "timeout",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobStopProgress.__enter__": {
            "name": "__enter__",
            "location": 745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStopProgress.__exit__": {
            "name": "__exit__",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "DetailedJobStopProgress.__init__": {
            "name": "__init__",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "DetailedJobStopProgress._hint": {
            "name": "_hint",
            "location": 764,
            "return": [],
            "arguments": {
                "self": [],
                "hints": []
            }
        },
        "DetailedJobStopProgress.detach": {
            "name": "detach",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStopProgress.kill": {
            "name": "kill",
            "location": 783,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStopProgress.tick": {
            "name": "tick",
            "location": 793,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStopProgress.timeout": {
            "name": "timeout",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "DetailedJobStopProgress.process_renderables": {
            "name": "process_renderables",
            "location": 824,
            "return": [],
            "arguments": {
                "self": [],
                "renderables": []
            }
        },
        "DetailedJobStopProgress.__enter__": {
            "name": "__enter__",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DetailedJobStopProgress.__exit__": {
            "name": "__exit__",
            "location": 841,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "StreamJobStopProgress.__init__": {
            "name": "__init__",
            "location": 853,
            "return": [],
            "arguments": {
                "self": [],
                "console": []
            }
        },
        "StreamJobStopProgress.detach": {
            "name": "detach",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "StreamJobStopProgress.kill": {
            "name": "kill",
            "location": 861,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "StreamJobStopProgress.tick": {
            "name": "tick",
            "location": 864,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "StreamJobStopProgress.timeout": {
            "name": "timeout",
            "location": 867,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "ExecStopProgress.create": {
            "name": "create",
            "location": 880,
            "return": [],
            "arguments": {
                "cls": [],
                "console": [],
                "quiet": [],
                "job_id": []
            }
        },
        "ExecStopProgress.__init__": {
            "name": "__init__",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": []
            }
        },
        "ExecStopProgress.__call__": {
            "name": "__call__",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "running": []
            }
        },
        "ExecStopProgress.tick": {
            "name": "tick",
            "location": 901,
            "return": [],
            "arguments": {
                "self": [],
                "running": []
            }
        },
        "ExecStopProgress.timeout": {
            "name": "timeout",
            "location": 904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecStopProgress.__enter__": {
            "name": "__enter__",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecStopProgress.__exit__": {
            "name": "__exit__",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "DetailedExecStopProgress.__init__": {
            "name": "__init__",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "console": [],
                "job_id": []
            }
        },
        "DetailedExecStopProgress.tick": {
            "name": "tick",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "running": []
            }
        },
        "DetailedExecStopProgress.timeout": {
            "name": "timeout",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DetailedExecStopProgress.process_renderables": {
            "name": "process_renderables",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "renderables": []
            }
        },
        "DetailedExecStopProgress.__enter__": {
            "name": "__enter__",
            "location": 963,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DetailedExecStopProgress.__exit__": {
            "name": "__exit__",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "StreamExecStopProgress.__init__": {
            "name": "__init__",
            "location": 980,
            "return": [],
            "arguments": {
                "self": [],
                "console": [],
                "job_id": []
            }
        },
        "StreamExecStopProgress.tick": {
            "name": "tick",
            "location": 985,
            "return": [],
            "arguments": {
                "self": [],
                "running": []
            }
        },
        "StreamExecStopProgress.timeout": {
            "name": "timeout",
            "location": 988,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobTelemetryFormatter.render.get": {
            "name": "get",
            "location": 354,
            "return": [],
            "arguments": {
                "id": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/secrets.py": {
        "BaseSecretsFormatter.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "secrets": []
            }
        },
        "SimpleSecretsFormatter.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "secrets": []
            }
        },
        "SecretsFormatter.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "uri_formatter": []
            }
        },
        "SecretsFormatter._secret_to_table_row": {
            "name": "_secret_to_table_row",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "secret": []
            }
        },
        "SecretsFormatter.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "secrets": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/service_accounts.py": {
        "service_account_token_fmtr": {
            "name": "service_account_token_fmtr",
            "location": 82,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "BaseServiceAccountsFormatter.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "accounts": []
            }
        },
        "SimpleServiceAccountsFormatter.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "accounts": []
            }
        },
        "ServiceAccountsFormatter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "datetime_formatter": []
            }
        },
        "ServiceAccountsFormatter._account_to_table_row": {
            "name": "_account_to_table_row",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "ServiceAccountsFormatter.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "accounts": []
            }
        },
        "ServiceAccountFormatter.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "datetime_formatter": []
            }
        },
        "ServiceAccountFormatter.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "account": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/storage.py": {
        "chunks": {
            "name": "chunks",
            "location": 54,
            "return": [],
            "arguments": {
                "list": [],
                "size": []
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 61,
            "return": [],
            "arguments": {
                "columns": []
            }
        },
        "get_painter": {
            "name": "get_painter",
            "location": 433,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "create_storage_progress": {
            "name": "create_storage_progress",
            "location": 592,
            "return": [],
            "arguments": {
                "root": [],
                "show_progress": []
            }
        },
        "format_url": {
            "name": "format_url",
            "location": 605,
            "return": [],
            "arguments": {
                "root": [],
                "url": []
            }
        },
        "BasePainter.paint": {
            "name": "paint",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "type": []
            }
        },
        "NonePainter.paint": {
            "name": "paint",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "type": []
            }
        },
        "GnuPainter.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "ls_colors": []
            }
        },
        "GnuPainter._defaults": {
            "name": "_defaults",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GnuPainter._parse_ls_colors": {
            "name": "_parse_ls_colors",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "ls_colors": []
            }
        },
        "GnuPainter.paint": {
            "name": "paint",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "type": []
            }
        },
        "BSDPainter.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "lscolors": []
            }
        },
        "BSDPainter._parse_lscolors": {
            "name": "_parse_lscolors",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "lscolors": []
            }
        },
        "BSDPainter.paint": {
            "name": "paint",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "type": []
            }
        },
        "BaseFilesFormatter.__call__": {
            "name": "__call__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "LongFilesFormatter.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "human_readable": [],
                "color": []
            }
        },
        "LongFilesFormatter._columns_for_file": {
            "name": "_columns_for_file",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LongFilesFormatter.__call__": {
            "name": "__call__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "SimpleFilesFormatter.__init__": {
            "name": "__init__",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "color": []
            }
        },
        "SimpleFilesFormatter.__call__": {
            "name": "__call__",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "VerticalColumnsFilesFormatter.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "color": []
            }
        },
        "VerticalColumnsFilesFormatter.__call__": {
            "name": "__call__",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "FilesSorter.key": {
            "name": "key",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeleteProgress.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "DeleteProgress.fmt_url": {
            "name": "fmt_url",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "type": []
            }
        },
        "DeleteProgress.delete": {
            "name": "delete",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StorageProgressContextManager.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "progress": []
            }
        },
        "StorageProgressContextManager.begin": {
            "name": "begin",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "StorageProgressContextManager.__enter__": {
            "name": "__enter__",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StorageProgressContextManager.__exit__": {
            "name": "__exit__",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BaseStorageProgress.begin": {
            "name": "begin",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "BaseStorageProgress.end": {
            "name": "end",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamProgress.__init__": {
            "name": "__init__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "StreamProgress.fmt_url": {
            "name": "fmt_url",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "type": []
            }
        },
        "StreamProgress.begin": {
            "name": "begin",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "StreamProgress.start": {
            "name": "start",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamProgress.complete": {
            "name": "complete",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamProgress.step": {
            "name": "step",
            "location": 640,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamProgress.enter": {
            "name": "enter",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamProgress.leave": {
            "name": "leave",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamProgress.fail": {
            "name": "fail",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.__init__": {
            "name": "__init__",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "TTYProgress._refresh": {
            "name": "_refresh",
            "location": 691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTYProgress.fmt_url": {
            "name": "fmt_url",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "type": []
            }
        },
        "TTYProgress.fmt_str": {
            "name": "fmt_str",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "type": []
            }
        },
        "TTYProgress.begin": {
            "name": "begin",
            "location": 715,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "TTYProgress.end": {
            "name": "end",
            "location": 721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTYProgress.enter": {
            "name": "enter",
            "location": 726,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.leave": {
            "name": "leave",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.start": {
            "name": "start",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.step": {
            "name": "step",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.complete": {
            "name": "complete",
            "location": 751,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TTYProgress.fail": {
            "name": "fail",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TreeFormatter.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeFormatter.__call__": {
            "name": "__call__",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "TreeFormatter.listdir": {
            "name": "listdir",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "TreeFormatter.pre": {
            "name": "pre",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeFormatter.ident": {
            "name": "ident",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "last": []
            }
        },
        "TreeFormatter._size": {
            "name": "_size",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "TreeFormatter._human_readable": {
            "name": "_human_readable",
            "location": 859,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "TreeFormatter._none": {
            "name": "_none",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "DiskUsageFormatter.__call__": {
            "name": "__call__",
            "location": 867,
            "return": [],
            "arguments": {
                "self": [],
                "usage": []
            }
        },
        "GnuPainter._parse_ls_colors.process": {
            "name": "process",
            "location": 156,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/utils.py": {
        "uri_formatter": {
            "name": "uri_formatter",
            "location": 14,
            "return": [],
            "arguments": {
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "image_formatter": {
            "name": "image_formatter",
            "location": 40,
            "return": [],
            "arguments": {
                "uri_formatter": []
            }
        },
        "format_timedelta": {
            "name": "format_timedelta",
            "location": 51,
            "return": [],
            "arguments": {
                "delta": []
            }
        },
        "format_datetime_iso": {
            "name": "format_datetime_iso",
            "location": 71,
            "return": [],
            "arguments": {
                "when": []
            }
        },
        "format_datetime_human": {
            "name": "format_datetime_human",
            "location": 79,
            "return": [],
            "arguments": {
                "when": []
            }
        },
        "get_datetime_formatter": {
            "name": "get_datetime_formatter",
            "location": 142,
            "return": [],
            "arguments": {
                "use_iso_format": []
            }
        },
        "yes": {
            "name": "yes",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "no": {
            "name": "no",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "uri_formatter.formatter": {
            "name": "formatter",
            "location": 17,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "image_formatter.formatter": {
            "name": "formatter",
            "location": 41,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "DatetimeFormatter.__call__": {
            "name": "__call__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "when": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/src/neuro_cli/formatters/__init__.py": {},
    "neuro-cli-master/neuro-cli/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 18,
            "return": [],
            "arguments": {
                "parser": [],
                "pluginmanager": []
            }
        },
        "token": {
            "name": "token",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "auth_config": {
            "name": "auth_config",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "cluster_config": {
            "name": "cluster_config",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "make_client": {
            "name": "make_client",
            "location": 98,
            "return": [],
            "arguments": {
                "token": [],
                "auth_config": [],
                "tmp_path": []
            }
        },
        "make_client.go": {
            "name": "go",
            "location": 101,
            "return": [],
            "arguments": {
                "url_str": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/__init__.py": {},
    "neuro-cli-master/neuro-cli/tests/e2e/conftest.py": {
        "run_async": {
            "name": "run_async",
            "location": 104,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "nmrc_path": {
            "name": "nmrc_path",
            "location": 796,
            "return": [],
            "arguments": {
                "tmp_path_factory": [],
                "request": []
            }
        },
        "_get_nmrc_path": {
            "name": "_get_nmrc_path",
            "location": 811,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "require_admin": []
            }
        },
        "helper": {
            "name": "helper",
            "location": 839,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "nmrc_path": []
            }
        },
        "generate_random_file": {
            "name": "generate_random_file",
            "location": 850,
            "return": [],
            "arguments": {
                "path": [],
                "size": []
            }
        },
        "static_path": {
            "name": "static_path",
            "location": 866,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "data": {
            "name": "data",
            "location": 871,
            "return": [],
            "arguments": {
                "static_path": []
            }
        },
        "data2": {
            "name": "data2",
            "location": 878,
            "return": [],
            "arguments": {
                "static_path": []
            }
        },
        "data3": {
            "name": "data3",
            "location": 885,
            "return": [],
            "arguments": {
                "static_path": []
            }
        },
        "nested_data": {
            "name": "nested_data",
            "location": 892,
            "return": [],
            "arguments": {
                "static_path": []
            }
        },
        "_tmp_bucket_create": {
            "name": "_tmp_bucket_create",
            "location": 901,
            "return": [],
            "arguments": {
                "tmp_path_factory": [],
                "request": []
            }
        },
        "tmp_bucket": {
            "name": "tmp_bucket",
            "location": 921,
            "return": [],
            "arguments": {
                "_tmp_bucket_create": []
            }
        },
        "secret_job": {
            "name": "secret_job",
            "location": 935,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "disk_factory": {
            "name": "disk_factory",
            "location": 988,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "make_image_name": {
            "name": "make_image_name",
            "location": 1011,
            "return": [],
            "arguments": {}
        },
        "drop_old_test_images": {
            "name": "drop_old_test_images",
            "location": 1017,
            "return": [],
            "arguments": {}
        },
        "test_user_names": {
            "name": "test_user_names",
            "location": 1041,
            "return": [],
            "arguments": {}
        },
        "cached_property": {
            "name": "cached_property",
            "location": 69,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "run_async.wrapper": {
            "name": "wrapper",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "Helper.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "nmrc_path": [],
                "tmp_path": []
            }
        },
        "Helper.close": {
            "name": "close",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.username": {
            "name": "username",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.cluster_name": {
            "name": "cluster_name",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.org_name": {
            "name": "org_name",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.cluster_uri_base": {
            "name": "cluster_uri_base",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.registry_name_base": {
            "name": "registry_name_base",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.token": {
            "name": "token",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.registry_url": {
            "name": "registry_url",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.tmpstorage": {
            "name": "tmpstorage",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Helper.make_uri": {
            "name": "make_uri",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Helper.hash_hex": {
            "name": "hash_hex",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Helper._default_args": {
            "name": "_default_args",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "verbosity": [],
                "network_timeout": []
            }
        },
        "Helper.run_cli": {
            "name": "run_cli",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "arguments": []
            }
        },
        "Helper.run_cli_run_job": {
            "name": "run_cli_run_job",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "arguments": []
            }
        },
        "Helper.find_job_id": {
            "name": "find_job_id",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Helper.pexpect": {
            "name": "pexpect",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "arguments": []
            }
        },
        "Helper.autocomplete": {
            "name": "autocomplete",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "arguments": []
            }
        },
        "Helper.parse_completions": {
            "name": "parse_completions",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "secret_job.go": {
            "name": "go",
            "location": 936,
            "return": [],
            "arguments": {
                "http_port": [],
                "http_auth": [],
                "description": []
            }
        },
        "disk_factory._make_disk": {
            "name": "_make_disk",
            "location": 990,
            "return": [],
            "arguments": {
                "storage": [],
                "name": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e.py": {
        "test_print_version": {
            "name": "test_print_version",
            "location": 9,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_print_options": {
            "name": "test_print_options",
            "location": 18,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_print_config": {
            "name": "test_print_config",
            "location": 25,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_print_config_token": {
            "name": "test_print_config_token",
            "location": 32,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_print_get_clusters": {
            "name": "test_print_get_clusters",
            "location": 39,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_root_trace_hide_token_default_true": {
            "name": "test_root_trace_hide_token_default_true",
            "location": 47,
            "return": [],
            "arguments": {
                "helper": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_admin.py": {
        "make_cluster_name": {
            "name": "make_cluster_name",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "drop_old_clusters": {
            "name": "drop_old_clusters",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "tmp_test_cluster": {
            "name": "tmp_test_cluster",
            "location": 53,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_list_clusters": {
            "name": "test_list_clusters",
            "location": 67,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": []
            }
        },
        "test_list_cluster_users_admin_only": {
            "name": "test_list_cluster_users_admin_only",
            "location": 73,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": []
            }
        },
        "test_list_cluster_users_added_members": {
            "name": "test_list_cluster_users_added_members",
            "location": 81,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_add_cluster_user_already_exists": {
            "name": "test_add_cluster_user_already_exists",
            "location": 99,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_add_cluster_user_does_not_exist": {
            "name": "test_add_cluster_user_does_not_exist",
            "location": 116,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": []
            }
        },
        "test_add_cluster_user_invalid_role": {
            "name": "test_add_cluster_user_invalid_role",
            "location": 130,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_remove_cluster_user_remove_oneself": {
            "name": "test_remove_cluster_user_remove_oneself",
            "location": 148,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": []
            }
        },
        "test_remove_cluster_user_does_not_exist": {
            "name": "test_remove_cluster_user_does_not_exist",
            "location": 163,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": []
            }
        },
        "test_cluster_user_default_unlimited_quota": {
            "name": "test_cluster_user_default_unlimited_quota",
            "location": 174,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_cluster_level_defaults": {
            "name": "test_cluster_level_defaults",
            "location": 185,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_cluster_user_set_quota_during_add": {
            "name": "test_cluster_user_set_quota_during_add",
            "location": 208,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_cluster_user_default_set_balance_and_quota": {
            "name": "test_cluster_user_default_set_balance_and_quota",
            "location": 231,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "test_cluster_user_default_set_balance_and_quota_to_unlimited": {
            "name": "test_cluster_user_default_set_balance_and_quota_to_unlimited",
            "location": 246,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "test_user_names": []
            }
        },
        "tmp_test_org": {
            "name": "tmp_test_org",
            "location": 275,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_list_orgs": {
            "name": "test_list_orgs",
            "location": 285,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": []
            }
        },
        "test_list_org_users_admin_only": {
            "name": "test_list_org_users_admin_only",
            "location": 291,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": []
            }
        },
        "test_list_org_users_added_members": {
            "name": "test_list_org_users_added_members",
            "location": 299,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": [],
                "test_user_names": []
            }
        },
        "test_add_org_user_already_exists": {
            "name": "test_add_org_user_already_exists",
            "location": 317,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": [],
                "test_user_names": []
            }
        },
        "test_add_org_user_does_not_exist": {
            "name": "test_add_org_user_does_not_exist",
            "location": 332,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": []
            }
        },
        "test_add_org_user_invalid_role": {
            "name": "test_add_org_user_invalid_role",
            "location": 344,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": [],
                "test_user_names": []
            }
        },
        "test_remove_org_user_remove_oneself": {
            "name": "test_remove_org_user_remove_oneself",
            "location": 362,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": []
            }
        },
        "test_remove_org_user_does_not_exist": {
            "name": "test_remove_org_user_does_not_exist",
            "location": 370,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": []
            }
        },
        "test_list_org_clusters": {
            "name": "test_list_org_clusters",
            "location": 380,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": [],
                "tmp_test_cluster": []
            }
        },
        "test_remove_org_cluster": {
            "name": "test_remove_org_cluster",
            "location": 393,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org": [],
                "tmp_test_cluster": []
            }
        },
        "tmp_test_org_cluster": {
            "name": "tmp_test_org_cluster",
            "location": 405,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "tmp_test_org": []
            }
        },
        "test_list_org_cluster_users_added_members": {
            "name": "test_list_org_cluster_users_added_members",
            "location": 419,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": [],
                "test_user_names": []
            }
        },
        "test_remove_org_cluster_user_remove_oneself": {
            "name": "test_remove_org_cluster_user_remove_oneself",
            "location": 444,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": []
            }
        },
        "test_add_org_cluster_user_non_org_user_fails": {
            "name": "test_add_org_cluster_user_non_org_user_fails",
            "location": 469,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": [],
                "test_user_names": []
            }
        },
        "test_org_cluster_user_default_unlimited_quota": {
            "name": "test_org_cluster_user_default_unlimited_quota",
            "location": 492,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": [],
                "test_user_names": []
            }
        },
        "test_org_cluster_user_set_quota_during_add": {
            "name": "test_org_cluster_user_set_quota_during_add",
            "location": 510,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": [],
                "test_user_names": []
            }
        },
        "test_org_cluster_user_default_set_balance_and_quota": {
            "name": "test_org_cluster_user_default_set_balance_and_quota",
            "location": 540,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_org_cluster": [],
                "test_user_names": []
            }
        },
        "test_org_cluster_default_unlimited_quota": {
            "name": "test_org_cluster_default_unlimited_quota",
            "location": 582,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "tmp_test_org": []
            }
        },
        "test_org_cluster_set_quota_during_add": {
            "name": "test_org_cluster_set_quota_during_add",
            "location": 597,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "tmp_test_org": []
            }
        },
        "test_org_cluster_set_balance_and_quota": {
            "name": "test_org_cluster_set_balance_and_quota",
            "location": 623,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "tmp_test_org": []
            }
        },
        "test_org_cluster_set_balance_and_quota_to_unlimited": {
            "name": "test_org_cluster_set_balance_and_quota_to_unlimited",
            "location": 651,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_test_cluster": [],
                "tmp_test_org": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_blob_storage.py": {
        "test_e2e_blob_storage_upload_download": {
            "name": "test_e2e_blob_storage_upload_download",
            "location": 18,
            "return": [],
            "arguments": {
                "data": [],
                "tmp_path": [],
                "helper": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_ls_buckets": {
            "name": "test_e2e_blob_storage_ls_buckets",
            "location": 35,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_ls_blobs_empty_bucket": {
            "name": "test_e2e_blob_storage_ls_blobs_empty_bucket",
            "location": 42,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_copy_file_implicit_directory": {
            "name": "test_e2e_blob_storage_copy_file_implicit_directory",
            "location": 51,
            "return": [],
            "arguments": {
                "helper": [],
                "data": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_copy_file_explicit_directory": {
            "name": "test_e2e_blob_storage_copy_file_explicit_directory",
            "location": 66,
            "return": [],
            "arguments": {
                "helper": [],
                "data": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_copy_file_to_folder_key": {
            "name": "test_e2e_blob_storage_copy_file_to_folder_key",
            "location": 81,
            "return": [],
            "arguments": {
                "helper": [],
                "data": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_copy_no_sources_no_destination": {
            "name": "test_e2e_blob_storage_copy_no_sources_no_destination",
            "location": 108,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_blob_storage_copy_no_sources": {
            "name": "test_e2e_blob_storage_copy_no_sources",
            "location": 115,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_blob_storage_copy_no_sources_target_directory": {
            "name": "test_e2e_blob_storage_copy_no_sources_target_directory",
            "location": 122,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_blob_storage_copy_target_directory_no_target_directory": {
            "name": "test_e2e_blob_storage_copy_target_directory_no_target_directory",
            "location": 129,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_blob_storage_copy_no_target_directory_extra_operand": {
            "name": "test_e2e_blob_storage_copy_no_target_directory_extra_operand",
            "location": 138,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_blob_storage_copy_recursive_folder": {
            "name": "test_e2e_blob_storage_copy_recursive_folder",
            "location": 147,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_copy_recursive_file": {
            "name": "test_e2e_blob_storage_copy_recursive_file",
            "location": 169,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_glob_copy": {
            "name": "test_e2e_blob_storage_glob_copy",
            "location": 188,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_cp_filter": {
            "name": "test_e2e_blob_storage_cp_filter",
            "location": 226,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_rm_file": {
            "name": "test_e2e_blob_storage_rm_file",
            "location": 287,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_e2e_blob_storage_rm_dir": {
            "name": "test_e2e_blob_storage_rm_dir",
            "location": 303,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        },
        "test_blob_autocomplete": {
            "name": "test_blob_autocomplete",
            "location": 324,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": [],
                "tmp_bucket": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_disks.py": {
        "test_create_get_list_delete": {
            "name": "test_create_get_list_delete",
            "location": 9,
            "return": [],
            "arguments": {
                "helper": [],
                "disk_factory": []
            }
        },
        "test_delete_multiple_disks": {
            "name": "test_delete_multiple_disks",
            "location": 35,
            "return": [],
            "arguments": {
                "helper": [],
                "disk_factory": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_images.py": {
        "parse_docker_ls_output": {
            "name": "parse_docker_ls_output",
            "location": 19,
            "return": [],
            "arguments": {
                "docker_ls_output": []
            }
        },
        "tag": {
            "name": "tag",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_images_complete_lifecycle": {
            "name": "test_images_complete_lifecycle",
            "location": 55,
            "return": [],
            "arguments": {
                "request": [],
                "helper": [],
                "image": [],
                "tag": [],
                "event_loop": [],
                "docker": []
            }
        },
        "test_image_tags": {
            "name": "test_image_tags",
            "location": 130,
            "return": [],
            "arguments": {
                "request": [],
                "helper": [],
                "image": [],
                "tag": [],
                "event_loop": [],
                "docker": []
            }
        },
        "test_docker_helper": {
            "name": "test_docker_helper",
            "location": 270,
            "return": [],
            "arguments": {
                "request": [],
                "helper": [],
                "image": [],
                "tag": [],
                "nmrc_path": [],
                "monkeypatch": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_jobs.py": {
        "strip_ansi": {
            "name": "strip_ansi",
            "location": 45,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_job_run": {
            "name": "test_job_run",
            "location": 54,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_rerun": {
            "name": "test_job_rerun",
            "location": 117,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_description": {
            "name": "test_job_description",
            "location": 144,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_filter_by_date_range": {
            "name": "test_job_filter_by_date_range",
            "location": 185,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_filter_by_tag": {
            "name": "test_job_filter_by_tag",
            "location": 213,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_kill_non_existing": {
            "name": "test_job_kill_non_existing",
            "location": 239,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_no_env": {
            "name": "test_e2e_no_env",
            "location": 253,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_env": {
            "name": "test_e2e_env",
            "location": 272,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_env_from_local": {
            "name": "test_e2e_env_from_local",
            "location": 291,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_multiple_env": {
            "name": "test_e2e_multiple_env",
            "location": 311,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_multiple_env_from_file": {
            "name": "test_e2e_multiple_env_from_file",
            "location": 339,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_ssh_exec_true": {
            "name": "test_e2e_ssh_exec_true",
            "location": 377,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_false": {
            "name": "test_e2e_ssh_exec_false",
            "location": 402,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_no_cmd": {
            "name": "test_e2e_ssh_exec_no_cmd",
            "location": 422,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_echo": {
            "name": "test_e2e_ssh_exec_echo",
            "location": 440,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_tty": {
            "name": "test_e2e_ssh_exec_tty",
            "location": 470,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_no_job": {
            "name": "test_e2e_ssh_exec_no_job",
            "location": 489,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_ssh_exec_dead_job": {
            "name": "test_e2e_ssh_exec_dead_job",
            "location": 505,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_save": {
            "name": "test_job_save",
            "location": 526,
            "return": [],
            "arguments": {
                "request": [],
                "helper": [],
                "docker": []
            }
        },
        "test_job_submit_http_auth": {
            "name": "test_job_submit_http_auth",
            "location": 675,
            "return": [],
            "arguments": {
                "helper": [],
                "secret_job": []
            }
        },
        "test_job_run_exit_code": {
            "name": "test_job_run_exit_code",
            "location": 730,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_pass_config": {
            "name": "test_pass_config",
            "location": 749,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_submit_bad_http_auth": {
            "name": "test_job_submit_bad_http_auth",
            "location": 770,
            "return": [],
            "arguments": {
                "helper": [],
                "http_auth": []
            }
        },
        "fakebrowser": {
            "name": "fakebrowser",
            "location": 780,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_job_browse": {
            "name": "test_job_browse",
            "location": 785,
            "return": [],
            "arguments": {
                "helper": [],
                "fakebrowser": []
            }
        },
        "test_job_run_browse": {
            "name": "test_job_run_browse",
            "location": 798,
            "return": [],
            "arguments": {
                "helper": [],
                "fakebrowser": []
            }
        },
        "test_job_run_share": {
            "name": "test_job_run_share",
            "location": 808,
            "return": [],
            "arguments": {
                "helper": [],
                "fakebrowser": []
            }
        },
        "test_job_submit_no_detach_failure": {
            "name": "test_job_submit_no_detach_failure",
            "location": 833,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_run_no_detach_browse_failure": {
            "name": "test_job_run_no_detach_browse_failure",
            "location": 844,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_run_volume_all": {
            "name": "test_job_run_volume_all",
            "location": 857,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_run_volume_all_and_another": {
            "name": "test_job_run_volume_all_and_another",
            "location": 876,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "try_job_top": {
            "name": "try_job_top",
            "location": 884,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_job_top": {
            "name": "test_e2e_job_top",
            "location": 909,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_job_top_filtering": {
            "name": "test_e2e_job_top_filtering",
            "location": 932,
            "return": [],
            "arguments": {
                "helper": [],
                "event_loop": []
            }
        },
        "test_e2e_job_top_default_format": {
            "name": "test_e2e_job_top_default_format",
            "location": 1000,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_job_top_format": {
            "name": "test_e2e_job_top_format",
            "location": 1012,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_restart_failing": {
            "name": "test_e2e_restart_failing",
            "location": 1024,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_job_run_stdout": {
            "name": "test_job_run_stdout",
            "location": 1060,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_attach_tty": {
            "name": "test_job_attach_tty",
            "location": 1083,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_secret_env": {
            "name": "test_job_secret_env",
            "location": 1118,
            "return": [],
            "arguments": {
                "helper": [],
                "secret": []
            }
        },
        "test_job_secret_file": {
            "name": "test_job_secret_file",
            "location": 1143,
            "return": [],
            "arguments": {
                "helper": [],
                "secret": []
            }
        },
        "secret": {
            "name": "secret",
            "location": 1170,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_working_dir": {
            "name": "test_job_working_dir",
            "location": 1185,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_job_disk_volume": {
            "name": "test_job_disk_volume",
            "location": 1206,
            "return": [],
            "arguments": {
                "helper": [],
                "disk_factory": []
            }
        },
        "test_job_disk_volume_named": {
            "name": "test_job_disk_volume_named",
            "location": 1235,
            "return": [],
            "arguments": {
                "helper": [],
                "disk_factory": []
            }
        },
        "test_e2e_job_top_filtering._check1": {
            "name": "_check1",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "test_e2e_job_top_filtering._check2": {
            "name": "_check2",
            "location": 953,
            "return": [],
            "arguments": {}
        },
        "test_e2e_job_top_filtering._check3": {
            "name": "_check3",
            "location": 959,
            "return": [],
            "arguments": {}
        },
        "test_e2e_job_top_filtering._check4": {
            "name": "_check4",
            "location": 968,
            "return": [],
            "arguments": {}
        },
        "test_e2e_job_top_filtering._check5": {
            "name": "_check5",
            "location": 977,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_secrets.py": {
        "secret_name": {
            "name": "secret_name",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_create_list_delete": {
            "name": "test_create_list_delete",
            "location": 16,
            "return": [],
            "arguments": {
                "helper": [],
                "secret_name": []
            }
        },
        "test_create_from_file_list_delete": {
            "name": "test_create_from_file_list_delete",
            "location": 37,
            "return": [],
            "arguments": {
                "request": [],
                "helper": [],
                "secret_name": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_share.py": {
        "revoke": {
            "name": "revoke",
            "location": 10,
            "return": [],
            "arguments": {
                "helper": [],
                "uri": [],
                "username": []
            }
        },
        "test_grant_complete_lifecycle": {
            "name": "test_grant_complete_lifecycle",
            "location": 18,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_revoke_no_effect": {
            "name": "test_revoke_no_effect",
            "location": 97,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_grant_image_no_tag": {
            "name": "test_grant_image_no_tag",
            "location": 107,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_grant_image_with_tag_fails": {
            "name": "test_grant_image_with_tag_fails",
            "location": 127,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_list_role": {
            "name": "test_list_role",
            "location": 138,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_list_role_forbidden": {
            "name": "test_list_role_forbidden",
            "location": 149,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_add_grant_remove_role": {
            "name": "test_add_grant_remove_role",
            "location": 157,
            "return": [],
            "arguments": {
                "request": [],
                "helper": []
            }
        },
        "test_list_roles": {
            "name": "test_list_roles",
            "location": 206,
            "return": [],
            "arguments": {
                "helper": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/test_e2e_storage.py": {
        "test_e2e_storage": {
            "name": "test_e2e_storage",
            "location": 21,
            "return": [],
            "arguments": {
                "data": [],
                "tmp_path": [],
                "helper": []
            }
        },
        "test_empty_directory_ls_output": {
            "name": "test_empty_directory_ls_output",
            "location": 54,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_ls_directory_itself": {
            "name": "test_ls_directory_itself",
            "location": 62,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_mkdir": {
            "name": "test_e2e_mkdir",
            "location": 70,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_copy_local_file_to_platform_directory": {
            "name": "test_copy_local_file_to_platform_directory",
            "location": 97,
            "return": [],
            "arguments": {
                "helper": [],
                "data2": []
            }
        },
        "test_copy_local_file_to_platform_directory_explicit": {
            "name": "test_copy_local_file_to_platform_directory_explicit",
            "location": 110,
            "return": [],
            "arguments": {
                "helper": [],
                "data2": []
            }
        },
        "test_copy_local_single_file_to_platform_file": {
            "name": "test_copy_local_single_file_to_platform_file",
            "location": 125,
            "return": [],
            "arguments": {
                "helper": [],
                "data": []
            }
        },
        "test_copy_local_single_file_to_platform_file_explicit": {
            "name": "test_copy_local_single_file_to_platform_file_explicit",
            "location": 142,
            "return": [],
            "arguments": {
                "helper": [],
                "data2": []
            }
        },
        "test_copy_local_to_platform_single_file_3": {
            "name": "test_copy_local_to_platform_single_file_3",
            "location": 169,
            "return": [],
            "arguments": {
                "helper": [],
                "data": []
            }
        },
        "test_e2e_copy_non_existing_platform_to_non_existing_local": {
            "name": "test_e2e_copy_non_existing_platform_to_non_existing_local",
            "location": 188,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_copy_non_existing_platform_to_____existing_local": {
            "name": "test_e2e_copy_non_existing_platform_to_____existing_local",
            "location": 204,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_copy_no_sources_no_destination": {
            "name": "test_e2e_copy_no_sources_no_destination",
            "location": 213,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_copy_no_sources": {
            "name": "test_e2e_copy_no_sources",
            "location": 220,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_copy_no_sources_target_directory": {
            "name": "test_e2e_copy_no_sources_target_directory",
            "location": 227,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_copy_target_directory_no_target_directory": {
            "name": "test_e2e_copy_target_directory_no_target_directory",
            "location": 234,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_copy_no_target_directory_extra_operand": {
            "name": "test_e2e_copy_no_target_directory_extra_operand",
            "location": 243,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_copy_and_remove_multiple_files": {
            "name": "test_copy_and_remove_multiple_files",
            "location": 254,
            "return": [],
            "arguments": {
                "helper": [],
                "data2": [],
                "data3": [],
                "tmp_path": []
            }
        },
        "test_e2e_copy_recursive_to_platform": {
            "name": "test_e2e_copy_recursive_to_platform",
            "location": 304,
            "return": [],
            "arguments": {
                "helper": [],
                "nested_data": [],
                "tmp_path": []
            }
        },
        "test_e2e_copy_recursive_file": {
            "name": "test_e2e_copy_recursive_file",
            "location": 332,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_e2e_rename": {
            "name": "test_e2e_rename",
            "location": 350,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_to_directory": {
            "name": "test_e2e_move_to_directory",
            "location": 365,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_to_directory_explicitly": {
            "name": "test_e2e_move_to_directory_explicitly",
            "location": 382,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_content_to_directory": {
            "name": "test_e2e_move_content_to_directory",
            "location": 400,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_no_sources_no_destination": {
            "name": "test_e2e_move_no_sources_no_destination",
            "location": 417,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_no_sources": {
            "name": "test_e2e_move_no_sources",
            "location": 424,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_no_sources_target_directory": {
            "name": "test_e2e_move_no_sources_target_directory",
            "location": 431,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_target_directory_no_target_directory": {
            "name": "test_e2e_move_target_directory_no_target_directory",
            "location": 438,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_move_no_target_directory_extra_operand": {
            "name": "test_e2e_move_no_target_directory_extra_operand",
            "location": 454,
            "return": [],
            "arguments": {
                "helper": []
            }
        },
        "test_e2e_glob": {
            "name": "test_e2e_glob",
            "location": 470,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "helper": []
            }
        },
        "test_e2e_no_glob": {
            "name": "test_e2e_no_glob",
            "location": 526,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "helper": []
            }
        },
        "test_e2e_cp_filter": {
            "name": "test_e2e_cp_filter",
            "location": 566,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "helper": []
            }
        },
        "test_e2e_ls_skip_hidden": {
            "name": "test_e2e_ls_skip_hidden",
            "location": 625,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "helper": []
            }
        },
        "test_e2e_ls_show_hidden": {
            "name": "test_e2e_ls_show_hidden",
            "location": 642,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "helper": []
            }
        },
        "test_tree": {
            "name": "test_tree",
            "location": 659,
            "return": [],
            "arguments": {
                "helper": [],
                "data": [],
                "tmp_path": []
            }
        },
        "test_storage_autocomplete_remote": {
            "name": "test_storage_autocomplete_remote",
            "location": 695,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        },
        "test_storage_autocomplete_local": {
            "name": "test_storage_autocomplete_local",
            "location": 735,
            "return": [],
            "arguments": {
                "helper": [],
                "tmp_path": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/e2e/utils.py": {},
    "neuro-cli-master/neuro-cli/tests/e2e/__init__.py": {},
    "neuro-cli-master/neuro-cli/tests/unit/conftest.py": {
        "nmrc_path": {
            "name": "nmrc_path",
            "location": 29,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "token": [],
                "auth_config": []
            }
        },
        "create_root": {
            "name": "create_root",
            "location": 97,
            "return": [],
            "arguments": {
                "config_path": []
            }
        },
        "root": {
            "name": "root",
            "location": 121,
            "return": [],
            "arguments": {
                "nmrc_path": []
            }
        },
        "root_no_logged_in": {
            "name": "root_no_logged_in",
            "location": 129,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "run_cli": {
            "name": "run_cli",
            "location": 138,
            "return": [],
            "arguments": {
                "nmrc_path": [],
                "capfd": [],
                "tmp_path": []
            }
        },
        "click_tty_emulation": {
            "name": "click_tty_emulation",
            "location": 170,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "pytest_assertrepr_compare": {
            "name": "pytest_assertrepr_compare",
            "location": 354,
            "return": [],
            "arguments": {
                "config": [],
                "op": [],
                "left": [],
                "right": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 365,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_terminal_summary": {
            "name": "pytest_terminal_summary",
            "location": 370,
            "return": [],
            "arguments": {
                "terminalreporter": []
            }
        },
        "rich_cmp": {
            "name": "rich_cmp",
            "location": 377,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "new_console": {
            "name": "new_console",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "run_cli._run_cli": {
            "name": "_run_cli",
            "location": 141,
            "return": [],
            "arguments": {
                "arguments": []
            }
        },
        "Guard.__eq__": {
            "name": "__eq__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RichComparator.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "RichComparator.mkref": {
            "name": "mkref",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "index": []
            }
        },
        "RichComparator.rel": {
            "name": "rel",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "RichComparator.check_io": {
            "name": "check_io",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "file": []
            }
        },
        "RichComparator.check": {
            "name": "check",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "buf": []
            }
        },
        "RichComparator.read_file": {
            "name": "read_file",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "RichComparator.read_ref": {
            "name": "read_ref",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "RichComparator.write_file": {
            "name": "write_file",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "buf": []
            }
        },
        "RichComparator.write_ref": {
            "name": "write_ref",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "buf": []
            }
        },
        "RichComparator.summary": {
            "name": "summary",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RichComparator.diff": {
            "name": "diff",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "lft": [],
                "rgt": []
            }
        },
        "rich_cmp.comparator": {
            "name": "comparator",
            "location": 378,
            "return": [],
            "arguments": {
                "src": [],
                "ref": []
            }
        },
        "new_console.factory": {
            "name": "factory",
            "location": 422,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/script.py": {},
    "neuro-cli-master/neuro-cli/tests/unit/test_admin.py": {
        "mock_create_cluster_user": {
            "name": "mock_create_cluster_user",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_add_cluster_user_print_result": {
            "name": "test_add_cluster_user_print_result",
            "location": 55,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_cluster_user_with_credits": {
            "name": "test_add_cluster_user_with_credits",
            "location": 74,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_cluster_user_with_jobs": {
            "name": "test_add_cluster_user_with_jobs",
            "location": 108,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_set_user_credits": {
            "name": "test_set_user_credits",
            "location": 142,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_user_credits": {
            "name": "test_add_user_credits",
            "location": 193,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_set_user_quota": {
            "name": "test_set_user_quota",
            "location": 243,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_remove_cluster_user_print_result": {
            "name": "test_remove_cluster_user_print_result",
            "location": 287,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_show_cluster_config_options": {
            "name": "test_show_cluster_config_options",
            "location": 309,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_resource_preset": {
            "name": "test_add_resource_preset",
            "location": 326,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_existing_resource_preset_not_allowed": {
            "name": "test_add_existing_resource_preset_not_allowed",
            "location": 385,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_update_resource_preset": {
            "name": "test_update_resource_preset",
            "location": 414,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_add_resource_preset_print_result": {
            "name": "test_add_resource_preset_print_result",
            "location": 451,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_remove_resource_preset_print_result": {
            "name": "test_remove_resource_preset_print_result",
            "location": 481,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_remove_resource_preset_not_exists": {
            "name": "test_remove_resource_preset_not_exists",
            "location": 511,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_ael.py": {
        "test_detach_short": {
            "name": "test_detach_short",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_detach_not_present": {
            "name": "test_detach_not_present",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_detach_with_other_symbols": {
            "name": "test_detach_with_other_symbols",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_detach_reversed": {
            "name": "test_detach_reversed",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_detach_present_at_the_end": {
            "name": "test_detach_present_at_the_end",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_detach_present_in_the_middle": {
            "name": "test_detach_present_in_the_middle",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_alias.py": {
        "script": {
            "name": "script",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_unknown_command": {
            "name": "test_unknown_command",
            "location": 23,
            "return": [],
            "arguments": {
                "run_cli": []
            }
        },
        "test_external_alias_exitcode": {
            "name": "test_external_alias_exitcode",
            "location": 795,
            "return": [],
            "arguments": {
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "test_external_alias_simplified": {
            "name": "test_external_alias_simplified",
            "location": 1042,
            "return": [],
            "arguments": {
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestInternalAlias.test_internal_alias_simple": {
            "name": "test_internal_alias_simple",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestInternalAlias.test_internal_alias_refers_to_unknown": {
            "name": "test_internal_alias_refers_to_unknown",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestInternalAlias.test_internal_alias_help": {
            "name": "test_internal_alias_help",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestInternalAlias.test_internal_alias_help_custom_msg": {
            "name": "test_internal_alias_help_custom_msg",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_no_arg": {
            "name": "test_external_alias_no_arg",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_no_arg_help": {
            "name": "test_external_alias_no_arg_help",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_no_arg_help_custom_msg": {
            "name": "test_external_alias_no_arg_help_custom_msg",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_arg": {
            "name": "test_external_alias_arg",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_arg_help": {
            "name": "test_external_alias_arg_help",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_arg_help_fix_casing": {
            "name": "test_external_alias_arg_help_fix_casing",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_two_arg2": {
            "name": "test_external_alias_two_arg2",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_two_arg2_help": {
            "name": "test_external_alias_two_arg2_help",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_arg_provided": {
            "name": "test_external_alias_optional_arg_provided",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_arg_missed": {
            "name": "test_external_alias_optional_arg_missed",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_arg_help": {
            "name": "test_external_alias_optional_arg_help",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_multiple_arg_provided": {
            "name": "test_external_alias_multiple_arg_provided",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_multiple_arg_help": {
            "name": "test_external_alias_multiple_arg_help",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_multiple_arg_provided": {
            "name": "test_external_alias_optional_multiple_arg_provided",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_multiple_arg_missed": {
            "name": "test_external_alias_optional_multiple_arg_missed",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_optional_multiple_arg_help": {
            "name": "test_external_alias_optional_multiple_arg_help",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasArgs.test_external_alias_three_args_regular_multiple_optional_help": {
            "name": "test_external_alias_three_args_regular_multiple_optional_help",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_flag_help_without_help_str": {
            "name": "test_external_alias_option_flag_help_without_help_str",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_flag_help_with_help_str": {
            "name": "test_external_alias_option_flag_help_with_help_str",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_flag_short_long_help_with_help_str": {
            "name": "test_external_alias_option_flag_short_long_help_with_help_str",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_short_long_help_with_help_str": {
            "name": "test_external_alias_option_short_long_help_with_help_str",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_metaval_lowercased": {
            "name": "test_external_alias_option_metaval_lowercased",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_short_long_help_with_help_str_inversed_order": {
            "name": "test_external_alias_option_short_long_help_with_help_str_inversed_order",
            "location": 642,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_flag_short": {
            "name": "test_external_alias_option_call_flag_short",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_flag_long": {
            "name": "test_external_alias_option_call_flag_long",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_flag_unset": {
            "name": "test_external_alias_option_call_flag_unset",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_value": {
            "name": "test_external_alias_option_call_value",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_value_multiple": {
            "name": "test_external_alias_option_call_value_multiple",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasOptions.test_external_alias_option_call_flag_multiple": {
            "name": "test_external_alias_option_call_flag_multiple",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": [],
                "script": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_long_option_not_identifier": {
            "name": "test_external_alias_long_option_not_identifier",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_short_option_not_identifier": {
            "name": "test_external_alias_short_option_not_identifier",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_option_meta_not_identifier": {
            "name": "test_external_alias_option_meta_not_identifier",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_empty_substitution": {
            "name": "test_external_alias_empty_substitution",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_uppercased_parameter": {
            "name": "test_external_alias_uppercased_parameter",
            "location": 869,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_invalid_parameter_name": {
            "name": "test_external_alias_invalid_parameter_name",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_unknown_parameter": {
            "name": "test_external_alias_unknown_parameter",
            "location": 891,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_overlapped_args_and_options": {
            "name": "test_external_alias_overlapped_args_and_options",
            "location": 913,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_nested_args_brackets": {
            "name": "test_external_alias_nested_args_brackets",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_missing_open_bracket": {
            "name": "test_external_alias_missing_open_bracket",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_missing_argument_inside_brackets": {
            "name": "test_external_alias_missing_argument_inside_brackets",
            "location": 963,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_ellipsis_should_follow_arg": {
            "name": "test_external_alias_ellipsis_should_follow_arg",
            "location": 974,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_ellipsis_inside_brackets": {
            "name": "test_external_alias_ellipsis_inside_brackets",
            "location": 987,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_successive_ellipsis": {
            "name": "test_external_alias_successive_ellipsis",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_missing_close_bracket1": {
            "name": "test_external_alias_missing_close_bracket1",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        },
        "TestExternalAliasParseErrors.test_external_alias_missing_close_bracket2": {
            "name": "test_external_alias_missing_close_bracket2",
            "location": 1028,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "nmrc_path": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_click_types.py": {
        "test_local_remote_port_param_type_valid": {
            "name": "test_local_remote_port_param_type_valid",
            "location": 20,
            "return": [],
            "arguments": {
                "arg": [],
                "val": []
            }
        },
        "test_local_remote_port_param_type_invalid": {
            "name": "test_local_remote_port_param_type_invalid",
            "location": 39,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "test_merge_autocompletion_args": {
            "name": "test_merge_autocompletion_args",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "TestJobNameType.test_ok": {
            "name": "test_ok",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobNameType.test_too_short": {
            "name": "test_too_short",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobNameType.test_too_long": {
            "name": "test_too_long",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobNameType.test_invalid_pattern": {
            "name": "test_invalid_pattern",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_click_utils.py": {
        "test_print_hidden": {
            "name": "test_print_hidden",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group": {
            "name": "test_print_deprecated_group",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group_content": {
            "name": "test_print_deprecated_group_content",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_no_help": {
            "name": "test_print_deprecated_no_help",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_with_help": {
            "name": "test_print_deprecated_with_help",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_print_help_with_examples": {
            "name": "test_print_help_with_examples",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_print_hidden.sub_command": {
            "name": "sub_command",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_print_hidden.main": {
            "name": "main",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group.sub_command": {
            "name": "sub_command",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group.main": {
            "name": "main",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group_content.sub_command": {
            "name": "sub_command",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_print_deprecated_group_content.main": {
            "name": "main",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_config.py": {
        "test_prompt_cluster": {
            "name": "test_prompt_cluster",
            "location": 25,
            "return": [],
            "arguments": {
                "make_client": []
            }
        },
        "test_prompt_cluster_default": {
            "name": "test_prompt_cluster_default",
            "location": 99,
            "return": [],
            "arguments": {
                "make_client": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_docker_helper.py": {
        "config": {
            "name": "config",
            "location": 26,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "run_dch": {
            "name": "run_dch",
            "location": 34,
            "return": [],
            "arguments": {
                "capfd": [],
                "monkeypatch": [],
                "tmp_path": [],
                "nmrc_path": []
            }
        },
        "run_dch._run_dch": {
            "name": "_run_dch",
            "location": 35,
            "return": [],
            "arguments": {
                "arguments": []
            }
        },
        "TestCli.test_path_not_exists": {
            "name": "test_path_not_exists",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": []
            }
        },
        "TestCli.test_path_is_not_dir": {
            "name": "test_path_is_not_dir",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": []
            }
        },
        "TestCli.test_path_from_env": {
            "name": "test_path_from_env",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": [],
                "monkeypatch": [],
                "config": []
            }
        },
        "TestCli.test_new_file": {
            "name": "test_new_file",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": [],
                "config": []
            }
        },
        "TestCli.test_merge_file_without_helpers": {
            "name": "test_merge_file_without_helpers",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": [],
                "config": []
            }
        },
        "TestCli.test_merge_file_with_existing_helpers": {
            "name": "test_merge_file_with_existing_helpers",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": [],
                "config": []
            }
        },
        "TestCli.test_success_output_message": {
            "name": "test_success_output_message",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "run_cli": [],
                "tmp_path": [],
                "config": []
            }
        },
        "TestHelper.test_no_params_use": {
            "name": "test_no_params_use",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "run_dch": []
            }
        },
        "TestHelper.test_too_mach_params": {
            "name": "test_too_mach_params",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "run_dch": []
            }
        },
        "TestHelper.test_unknown_operation": {
            "name": "test_unknown_operation",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "run_dch": []
            }
        },
        "TestHelper.test_store_operation": {
            "name": "test_store_operation",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "run_dch": []
            }
        },
        "TestHelper.test_get_operation": {
            "name": "test_get_operation",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "run_dch": [],
                "monkeypatch": [],
                "config": [],
                "token": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_job.py": {
        "test_calc_statuses__contains_all": {
            "name": "test_calc_statuses__contains_all",
            "location": 50,
            "return": [],
            "arguments": {
                "statuses": []
            }
        },
        "test_calc_statuses__all_statuses_true": {
            "name": "test_calc_statuses__all_statuses_true",
            "location": 58,
            "return": [],
            "arguments": {
                "capsys": [],
                "caplog": []
            }
        },
        "test_calc_statuses__all_statuses_true__quiet_mode": {
            "name": "test_calc_statuses__all_statuses_true__quiet_mode",
            "location": 70,
            "return": [],
            "arguments": {
                "capsys": [],
                "caplog": []
            }
        },
        "test_calc_statuses__all_statuses_false": {
            "name": "test_calc_statuses__all_statuses_false",
            "location": 80,
            "return": [],
            "arguments": {
                "capsys": [],
                "caplog": []
            }
        },
        "test_calc_statuses__check_defaults__all_statuses_false": {
            "name": "test_calc_statuses__check_defaults__all_statuses_false",
            "location": 91,
            "return": [],
            "arguments": {
                "capsys": [],
                "caplog": []
            }
        },
        "test_calc_statuses__check_defaults__all_statuses_true": {
            "name": "test_calc_statuses__check_defaults__all_statuses_true",
            "location": 105,
            "return": [],
            "arguments": {
                "capsys": [],
                "caplog": []
            }
        },
        "test_build_env_blank_lines": {
            "name": "test_build_env_blank_lines",
            "location": 115,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_build_env_comments": {
            "name": "test_build_env_comments",
            "location": 124,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_build_env_multiple_files": {
            "name": "test_build_env_multiple_files",
            "location": 133,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_build_env_override_literals": {
            "name": "test_build_env_override_literals",
            "location": 147,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_build_env_override_literal_and_file": {
            "name": "test_build_env_override_literal_and_file",
            "location": 155,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_build_env_override_same_file": {
            "name": "test_build_env_override_same_file",
            "location": 166,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_build_env_override_different_files": {
            "name": "test_build_env_override_different_files",
            "location": 179,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "root": []
            }
        },
        "test_extract_secret_env": {
            "name": "test_extract_secret_env",
            "location": 192,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_cmd_single": {
            "name": "test_parse_cmd_single",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_parse_cmd_multiple": {
            "name": "test_parse_cmd_multiple",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_job_to_args_simple": {
            "name": "test_job_to_args_simple",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "test_job_to_args_drop_env_when_pass_config": {
            "name": "test_job_to_args_drop_env_when_pass_config",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "test_job_to_args_complex": {
            "name": "test_job_to_args_complex",
            "location": 357,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_parse_utils.py": {
        "test_parse_memory": {
            "name": "test_parse_memory",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_default": {
            "name": "test_parse_ps_columns_default",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_parse_top_columns_default": {
            "name": "test_parse_top_columns_default",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_short": {
            "name": "test_parse_ps_columns_short",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_id": {
            "name": "test_parse_ps_columns_id",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_partial": {
            "name": "test_parse_ps_columns_partial",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_sep": {
            "name": "test_parse_ps_columns_sep",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_title_with_spaces": {
            "name": "test_parse_ps_columns_title_with_spaces",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_props_full": {
            "name": "test_parse_ps_columns_props_full",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_props_subset": {
            "name": "test_parse_ps_columns_props_subset",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_props_width": {
            "name": "test_parse_ps_columns_props_width",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_multi_id": {
            "name": "test_parse_ps_columns_multi_id",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_multi_id_props_full": {
            "name": "test_parse_ps_columns_multi_id_props_full",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_invalid_format": {
            "name": "test_parse_ps_columns_invalid_format",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_unknown": {
            "name": "test_parse_ps_columns_unknown",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_invalid_property": {
            "name": "test_parse_ps_columns_invalid_property",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_parse_ps_columns_ambigous": {
            "name": "test_parse_ps_columns_ambigous",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_parse_sort_keys": {
            "name": "test_parse_sort_keys",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_zero": {
            "name": "test_parse_timedelta_valid_zero",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_all_groups_no_spaces": {
            "name": "test_parse_timedelta_valid_all_groups_no_spaces",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_all_groups_spaces_around": {
            "name": "test_parse_timedelta_valid_all_groups_spaces_around",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_some_groups_1": {
            "name": "test_parse_timedelta_valid_some_groups_1",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_some_groups_2": {
            "name": "test_parse_timedelta_valid_some_groups_2",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_valid_some_groups_3": {
            "name": "test_parse_timedelta_valid_some_groups_3",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_invalid_empty": {
            "name": "test_parse_timedelta_invalid_empty",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_invalid": {
            "name": "test_parse_timedelta_invalid",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_parse_timedelta_invalid_negative": {
            "name": "test_parse_timedelta_invalid_negative",
            "location": 241,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_root.py": {
        "root_uninitialized": {
            "name": "root_uninitialized",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_timeout": {
            "name": "test_timeout",
            "location": 37,
            "return": [],
            "arguments": {
                "root_uninitialized": []
            }
        },
        "TestTokenSanitization.test_sanitize_header_value_single_token": {
            "name": "test_sanitize_header_value_single_token",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "root_uninitialized": [],
                "auth": []
            }
        },
        "TestTokenSanitization.test_sanitize_header_value_many_tokens": {
            "name": "test_sanitize_header_value_many_tokens",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "root_uninitialized": [],
                "auth": []
            }
        },
        "TestTokenSanitization.test_sanitize_header_value_not_a_token": {
            "name": "test_sanitize_header_value_not_a_token",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "root_uninitialized": [],
                "auth": []
            }
        },
        "TestTokenSanitization.test_sanitize_token_replaced_overall": {
            "name": "test_sanitize_token_replaced_overall",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "root_uninitialized": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_secrets.py": {
        "test_read_data_str": {
            "name": "test_read_data_str",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_read_data_file": {
            "name": "test_read_data_file",
            "location": 10,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_shell_completion.py": {
        "_default_args": {
            "name": "_default_args",
            "location": 60,
            "return": [],
            "arguments": {
                "verbosity": [],
                "network_timeout": [],
                "nmrc_path": []
            }
        },
        "autocomplete": {
            "name": "autocomplete",
            "location": 78,
            "return": [],
            "arguments": {
                "run_cli": [],
                "nmrc_path": [],
                "monkeypatch": [],
                "arguments": []
            }
        },
        "run_autocomplete": {
            "name": "run_autocomplete",
            "location": 112,
            "return": [],
            "arguments": {
                "run_cli": [],
                "nmrc_path": [],
                "monkeypatch": []
            }
        },
        "test_file_autocomplete": {
            "name": "test_file_autocomplete",
            "location": 127,
            "return": [],
            "arguments": {
                "run_autocomplete": [],
                "tmp_path": []
            }
        },
        "test_file_autocomplete_default": {
            "name": "test_file_autocomplete_default",
            "location": 168,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_file_autocomplete_root": {
            "name": "test_file_autocomplete_root",
            "location": 187,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_storage_autocomplete": {
            "name": "test_storage_autocomplete",
            "location": 199,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_blob_autocomplete": {
            "name": "test_blob_autocomplete",
            "location": 312,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "make_job": {
            "name": "make_job",
            "location": 508,
            "return": [],
            "arguments": {
                "job_id": [],
                "name": [],
                "owner": [],
                "cluster_name": []
            }
        },
        "test_job_autocomplete": {
            "name": "test_job_autocomplete",
            "location": 544,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_image_autocomplete": {
            "name": "test_image_autocomplete",
            "location": 675,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_nonascii_image_autocomplete": {
            "name": "test_nonascii_image_autocomplete",
            "location": 859,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_image_tag_autocomplete": {
            "name": "test_image_tag_autocomplete",
            "location": 959,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_disk_autocomplete": {
            "name": "test_disk_autocomplete",
            "location": 1034,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_bucket_autocomplete": {
            "name": "test_bucket_autocomplete",
            "location": 1116,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_service_account_autocomplete": {
            "name": "test_service_account_autocomplete",
            "location": 1216,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "test_bucket_credential_autocomplete": {
            "name": "test_bucket_credential_autocomplete",
            "location": 1255,
            "return": [],
            "arguments": {
                "run_autocomplete": []
            }
        },
        "run_autocomplete.autocompleter": {
            "name": "autocompleter",
            "location": 113,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_storage_autocomplete.is_dir": {
            "name": "is_dir",
            "location": 212,
            "return": [],
            "arguments": {
                "uri": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_stats.py": {
        "db": {
            "name": "db",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "check_tables": {
            "name": "check_tables",
            "location": 28,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_ensure_schema_empty": {
            "name": "test_ensure_schema_empty",
            "location": 39,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_ensure_schema_invalid": {
            "name": "test_ensure_schema_invalid",
            "location": 44,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_add_usage": {
            "name": "test_add_usage",
            "location": 50,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_select_oldest": {
            "name": "test_select_oldest",
            "location": 72,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_delete_oldest": {
            "name": "test_delete_oldest",
            "location": 91,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "test_make_record_cli": {
            "name": "test_make_record_cli",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_make_record_web_shell": {
            "name": "test_make_record_web_shell",
            "location": 122,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_storage.py": {},
    "neuro-cli-master/neuro-cli/tests/unit/test_storage_progress.py": {
        "time_ctl": {
            "name": "time_ctl",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_format_url_storage": {
            "name": "test_format_url_storage",
            "location": 48,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_format_url_file": {
            "name": "test_format_url_file",
            "location": 53,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "make_root": {
            "name": "make_root",
            "location": 66,
            "return": [],
            "arguments": {
                "new_console": [],
                "nmrc_path": []
            }
        },
        "test_progress_factory_none": {
            "name": "test_progress_factory_none",
            "location": 101,
            "return": [],
            "arguments": {
                "make_root": []
            }
        },
        "test_progress_factory_verbose": {
            "name": "test_progress_factory_verbose",
            "location": 107,
            "return": [],
            "arguments": {
                "make_root": []
            }
        },
        "test_progress_factory_percent": {
            "name": "test_progress_factory_percent",
            "location": 113,
            "return": [],
            "arguments": {
                "make_root": []
            }
        },
        "test_progress": {
            "name": "test_progress",
            "location": 127,
            "return": [],
            "arguments": {
                "color": [],
                "tty": [],
                "verbose": [],
                "show_progress": [],
                "make_root": [],
                "rich_cmp": [],
                "time_ctl": []
            }
        },
        "test_fail": {
            "name": "test_fail",
            "location": 180,
            "return": [],
            "arguments": {
                "color": [],
                "tty": [],
                "verbose": [],
                "show_progress": [],
                "rich_cmp": [],
                "make_root": [],
                "time_ctl": []
            }
        },
        "test_nested": {
            "name": "test_nested",
            "location": 211,
            "return": [],
            "arguments": {
                "color": [],
                "tty": [],
                "verbose": [],
                "show_progress": [],
                "rich_cmp": [],
                "make_root": [],
                "time_ctl": []
            }
        },
        "test_delete_progress": {
            "name": "test_delete_progress",
            "location": 285,
            "return": [],
            "arguments": {
                "color": [],
                "tty": [],
                "verbose": [],
                "rich_cmp": [],
                "make_root": [],
                "time_ctl": []
            }
        },
        "TimeCtl.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeCtl.tick": {
            "name": "tick",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "delta": []
            }
        },
        "TimeCtl.get_time": {
            "name": "get_time",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_root.make": {
            "name": "make",
            "location": 72,
            "return": [],
            "arguments": {
                "color": [],
                "tty": [],
                "verbose": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/test_utils.py": {
        "_job_entry": {
            "name": "_job_entry",
            "location": 31,
            "return": [],
            "arguments": {
                "job_id": [],
                "cluster_name": [],
                "owner": [],
                "org_name": []
            }
        },
        "_check_params": {
            "name": "_check_params",
            "location": 73,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_parse_file_resource_no_scheme": {
            "name": "test_parse_file_resource_no_scheme",
            "location": 648,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_file_resource_unsupported_scheme": {
            "name": "test_parse_file_resource_unsupported_scheme",
            "location": 655,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_file_resource_user_less": {
            "name": "test_parse_file_resource_user_less",
            "location": 662,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_file_resource_with_user": {
            "name": "test_parse_file_resource_with_user",
            "location": 669,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_file_resource_with_tilde": {
            "name": "test_parse_file_resource_with_tilde",
            "location": 680,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_image_no_tag": {
            "name": "test_parse_resource_for_sharing_image_no_tag",
            "location": 685,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_image_non_ascii": {
            "name": "test_parse_resource_for_sharing_image_non_ascii",
            "location": 693,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_image_percent_encoded": {
            "name": "test_parse_resource_for_sharing_image_percent_encoded",
            "location": 702,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_image_with_tag_fail": {
            "name": "test_parse_resource_for_sharing_image_with_tag_fail",
            "location": 711,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_all_user_images": {
            "name": "test_parse_resource_for_sharing_all_user_images",
            "location": 717,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "_test_parse_resource_for_sharing_all_cluster_images": {
            "name": "_test_parse_resource_for_sharing_all_cluster_images",
            "location": 723,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_no_scheme": {
            "name": "test_parse_resource_for_sharing_no_scheme",
            "location": 729,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_unsupported_scheme": {
            "name": "test_parse_resource_for_sharing_unsupported_scheme",
            "location": 734,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_user_less": {
            "name": "test_parse_resource_for_sharing_user_less",
            "location": 743,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_with_user": {
            "name": "test_parse_resource_for_sharing_with_user",
            "location": 750,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_with_tilde": {
            "name": "test_parse_resource_for_sharing_with_tilde",
            "location": 763,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_resource_for_sharing_with_tilde_relative": {
            "name": "test_parse_resource_for_sharing_with_tilde_relative",
            "location": 768,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "test_parse_permission_action_read_lowercase": {
            "name": "test_parse_permission_action_read_lowercase",
            "location": 773,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_read": {
            "name": "test_parse_permission_action_read",
            "location": 778,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_write_lowercase": {
            "name": "test_parse_permission_action_write_lowercase",
            "location": 783,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_write": {
            "name": "test_parse_permission_action_write",
            "location": 788,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_manage_lowercase": {
            "name": "test_parse_permission_action_manage_lowercase",
            "location": 793,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_manage": {
            "name": "test_parse_permission_action_manage",
            "location": 798,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_wrong_string": {
            "name": "test_parse_permission_action_wrong_string",
            "location": 803,
            "return": [],
            "arguments": {}
        },
        "test_parse_permission_action_wrong_empty": {
            "name": "test_parse_permission_action_wrong_empty",
            "location": 810,
            "return": [],
            "arguments": {}
        },
        "test_pager_maybe_no_tty": {
            "name": "test_pager_maybe_no_tty",
            "location": 817,
            "return": [],
            "arguments": {}
        },
        "test_pager_maybe_terminal_larger": {
            "name": "test_pager_maybe_terminal_larger",
            "location": 833,
            "return": [],
            "arguments": {}
        },
        "test_pager_maybe_terminal_smaller": {
            "name": "test_pager_maybe_terminal_smaller",
            "location": 849,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/__init__.py": {},
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_admin_formatters.py": {
        "TestClusterUserFormatter.test_cluster_list": {
            "name": "test_cluster_list",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter._create_node_pool": {
            "name": "_create_node_pool",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "disk_type": [],
                "is_scalable": [],
                "is_gpu": [],
                "is_preemptible": [],
                "has_idle": []
            }
        },
        "TestClustersFormatter.test_cluster_list": {
            "name": "test_cluster_list",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter.test_cluster_with_on_prem_cloud_provider_list": {
            "name": "test_cluster_with_on_prem_cloud_provider_list",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter.test_cluster_with_cloud_provider_storage_list": {
            "name": "test_cluster_with_cloud_provider_storage_list",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter.test_cluster_with_cloud_provider_storage_without_size_list": {
            "name": "test_cluster_with_cloud_provider_storage_without_size_list",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter.test_cluster_with_cloud_provider_with_minimum_node_pool_properties_list": {
            "name": "test_cluster_with_cloud_provider_with_minimum_node_pool_properties_list",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestClustersFormatter.test_cluster_with_cloud_provider_with_maximum_node_pool_properties_list": {
            "name": "test_cluster_with_cloud_provider_with_maximum_node_pool_properties_list",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestOrgClusterFormatter.test_org_cluster_formatter": {
            "name": "test_org_cluster_formatter",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestOrgClusterFormatter.test_org_cluster_formatter_no_quota": {
            "name": "test_org_cluster_formatter_no_quota",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_blob_formatters.py": {
        "TestBlobFormatter.test_long_formatter": {
            "name": "test_long_formatter",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "formatter": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_buckets.py": {
        "test_bucket_formatter": {
            "name": "test_bucket_formatter",
            "location": 16,
            "return": [],
            "arguments": {
                "rich_cmp": []
            }
        },
        "test_bucket_formatter_with_org": {
            "name": "test_bucket_formatter_with_org",
            "location": 31,
            "return": [],
            "arguments": {
                "rich_cmp": []
            }
        },
        "buckets_list": {
            "name": "buckets_list",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_buckets_formatter_simple": {
            "name": "test_buckets_formatter_simple",
            "location": 93,
            "return": [],
            "arguments": {
                "buckets_list": [],
                "rich_cmp": []
            }
        },
        "test_buckets_formatter_short": {
            "name": "test_buckets_formatter_short",
            "location": 98,
            "return": [],
            "arguments": {
                "buckets_list": [],
                "rich_cmp": []
            }
        },
        "test_buckets_formatter_long": {
            "name": "test_buckets_formatter_long",
            "location": 103,
            "return": [],
            "arguments": {
                "buckets_list": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_bucket_credentials.py": {
        "credentials_list_fixture": {
            "name": "credentials_list_fixture",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_config_formatters.py": {
        "test_format_quota_details": {
            "name": "test_format_quota_details",
            "location": 34,
            "return": [],
            "arguments": {
                "quota": [],
                "expected": []
            }
        },
        "TestAdminQuotaFormatter.test_output": {
            "name": "test_output",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestAdminQuotaFormatter.test_output_no_quota": {
            "name": "test_output_no_quota",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestAdminQuotaFormatter.test_output_zeroes": {
            "name": "test_output_zeroes",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestBalanceFormatter.test_output": {
            "name": "test_output",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestBalanceFormatter.test_output_no_quota": {
            "name": "test_output_no_quota",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestBalanceFormatter.test_output_rounding": {
            "name": "test_output_rounding",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_disks.py": {
        "test_disk_formatter": {
            "name": "test_disk_formatter",
            "location": 17,
            "return": [],
            "arguments": {
                "rich_cmp": []
            }
        },
        "disks_list": {
            "name": "disks_list",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_disks_formatter_simple": {
            "name": "test_disks_formatter_simple",
            "location": 78,
            "return": [],
            "arguments": {
                "disks_list": [],
                "rich_cmp": []
            }
        },
        "test_disks_formatter_short": {
            "name": "test_disks_formatter_short",
            "location": 83,
            "return": [],
            "arguments": {
                "disks_list": [],
                "rich_cmp": []
            }
        },
        "test_disks_formatter_long": {
            "name": "test_disks_formatter_long",
            "location": 88,
            "return": [],
            "arguments": {
                "disks_list": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_images_formatters.py": {
        "TestDockerImageProgress.test_quiet_pull": {
            "name": "test_quiet_pull",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_quiet_push": {
            "name": "test_quiet_push",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_quiet_save": {
            "name": "test_quiet_save",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_quiet_commit_started": {
            "name": "test_quiet_commit_started",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_quiet_commit_finished": {
            "name": "test_quiet_commit_finished",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_no_tty_pull": {
            "name": "test_no_tty_pull",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_no_tty_push": {
            "name": "test_no_tty_push",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_no_tty_save": {
            "name": "test_no_tty_save",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_no_tty_commit_started": {
            "name": "test_no_tty_commit_started",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_no_tty_commit_finished": {
            "name": "test_no_tty_commit_finished",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_tty_pull": {
            "name": "test_tty_pull",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_tty_push": {
            "name": "test_tty_push",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_tty_save": {
            "name": "test_tty_save",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_tty_commit_started": {
            "name": "test_tty_commit_started",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestDockerImageProgress.test_tty_commit_finished": {
            "name": "test_tty_commit_finished",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_jobs_formatters.py": {
        "_format_datetime_human": {
            "name": "_format_datetime_human",
            "location": 58,
            "return": [],
            "arguments": {
                "when": [],
                "precise": []
            }
        },
        "datetime_formatter": {
            "name": "datetime_formatter",
            "location": 63,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "new_console": {
            "name": "new_console",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "job_descr_no_name": {
            "name": "job_descr_no_name",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "job_descr": {
            "name": "job_descr",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "new_console.factory": {
            "name": "factory",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "TestJobStartProgress.make_job": {
            "name": "make_job",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "reason": []
            }
        },
        "TestJobStartProgress.test_quiet": {
            "name": "test_quiet",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_no_tty_begin": {
            "name": "test_no_tty_begin",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_no_tty_begin_with_name": {
            "name": "test_no_tty_begin_with_name",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_no_tty_step": {
            "name": "test_no_tty_step",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_no_tty_end": {
            "name": "test_no_tty_end",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_tty_begin": {
            "name": "test_tty_begin",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_tty_begin_with_name": {
            "name": "test_tty_begin_with_name",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_tty_step": {
            "name": "test_tty_step",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": [],
                "monkeypatch": []
            }
        },
        "TestJobStartProgress.test_tty_end": {
            "name": "test_tty_end",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobStartProgress.test_tty_end_with_life_span": {
            "name": "test_tty_end_with_life_span",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "new_console": []
            }
        },
        "TestJobOutputFormatter.test_job_with_name": {
            "name": "test_job_with_name",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_org_urls": {
            "name": "test_job_with_org_urls",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_tags": {
            "name": "test_job_with_tags",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_tags_wrap_tags": {
            "name": "test_job_with_tags_wrap_tags",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_life_span_with_value": {
            "name": "test_job_with_life_span_with_value",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_life_span_without_value": {
            "name": "test_job_with_life_span_without_value",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_restart_policy": {
            "name": "test_job_with_restart_policy",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_pending_job": {
            "name": "test_pending_job",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_pending_job_no_reason": {
            "name": "test_pending_job_no_reason",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_pending_job_with_reason": {
            "name": "test_pending_job_with_reason",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_pending_job_no_description": {
            "name": "test_pending_job_no_description",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_running_job": {
            "name": "test_running_job",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_running_job_with_status_items": {
            "name": "test_running_job_with_status_items",
            "location": 777,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_running_named_job": {
            "name": "test_running_named_job",
            "location": 838,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_entrypoint": {
            "name": "test_job_with_entrypoint",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_environment": {
            "name": "test_job_with_environment",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_volumes_short": {
            "name": "test_job_with_volumes_short",
            "location": 971,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_volumes_long": {
            "name": "test_job_with_volumes_long",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_secrets_short": {
            "name": "test_job_with_secrets_short",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_disk_volumes_short": {
            "name": "test_job_with_disk_volumes_short",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_working_dir": {
            "name": "test_job_with_working_dir",
            "location": 1237,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_preset_name": {
            "name": "test_job_with_preset_name",
            "location": 1287,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_on_preemptible_node": {
            "name": "test_job_on_preemptible_node",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_org_name": {
            "name": "test_job_with_org_name",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobOutputFormatter.test_job_with_partial_credits": {
            "name": "test_job_with_partial_credits",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestJobTelemetryFormatter.test_format_telemetry_no_gpu": {
            "name": "test_format_telemetry_no_gpu",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": [],
                "job_descr": [],
                "rich_cmp": [],
                "new_console": [],
                "datetime_formatter": []
            }
        },
        "TestJobTelemetryFormatter.test_format_telemetry_seq": {
            "name": "test_format_telemetry_seq",
            "location": 1476,
            "return": [],
            "arguments": {
                "self": [],
                "job_descr": [],
                "rich_cmp": [],
                "new_console": [],
                "datetime_formatter": []
            }
        },
        "TestJobTelemetryFormatter.test_format_telemetry_multiple_jobs": {
            "name": "test_format_telemetry_multiple_jobs",
            "location": 1512,
            "return": [],
            "arguments": {
                "self": [],
                "job_descr": [],
                "rich_cmp": [],
                "new_console": [],
                "datetime_formatter": []
            }
        },
        "TestJobTelemetryFormatter.test_format_telemetry_limited_height": {
            "name": "test_format_telemetry_limited_height",
            "location": 1565,
            "return": [],
            "arguments": {
                "self": [],
                "job_descr": [],
                "rich_cmp": [],
                "new_console": [],
                "datetime_formatter": []
            }
        },
        "TestJobTelemetryFormatter.test_format_telemetry_with_gpu": {
            "name": "test_format_telemetry_with_gpu",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "job_descr": [],
                "rich_cmp": [],
                "new_console": [],
                "datetime_formatter": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta": {
            "name": "test_format_timedelta",
            "location": 1635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_no_days": {
            "name": "test_format_timedelta_no_days",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_no_hours": {
            "name": "test_format_timedelta_no_hours",
            "location": 1643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_no_minutes": {
            "name": "test_format_timedelta_no_minutes",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_no_seconds": {
            "name": "test_format_timedelta_no_seconds",
            "location": 1651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_overfill": {
            "name": "test_format_timedelta_overfill",
            "location": 1655,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_zero": {
            "name": "test_format_timedelta_zero",
            "location": 1660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJobStatusFormatter.test_format_timedelta_negative": {
            "name": "test_format_timedelta_negative",
            "location": 1664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleJobsFormatter.test_empty": {
            "name": "test_empty",
            "location": 1671,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestSimpleJobsFormatter.test_list": {
            "name": "test_list",
            "location": 1675,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestTabularJobRow._job_descr_with_status": {
            "name": "_job_descr_with_status",
            "location": 1730,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "status": [],
                "image": [],
                "name": []
            }
        },
        "TestTabularJobRow.test_with_job_name": {
            "name": "test_with_job_name",
            "location": 1765,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobRow.test_without_job_name": {
            "name": "test_without_job_name",
            "location": 1776,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobRow.test_status_date_relation": {
            "name": "test_status_date_relation",
            "location": 1797,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "date": [],
                "color": [],
                "root": []
            }
        },
        "TestTabularJobRow.test_image_from_registry_parsing_short": {
            "name": "test_image_from_registry_parsing_short",
            "location": 1813,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobRow.test_image_from_registry_parsing_long": {
            "name": "test_image_from_registry_parsing_long",
            "location": 1831,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_empty": {
            "name": "test_empty",
            "location": 1861,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_short_cells": {
            "name": "test_short_cells",
            "location": 1873,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "owner_name": [],
                "owner_printed": [],
                "rich_cmp": []
            }
        },
        "TestTabularJobsFormatter.test_wide_cells": {
            "name": "test_wide_cells",
            "location": 1917,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "owner_name": [],
                "owner_printed": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_custom_columns": {
            "name": "test_custom_columns",
            "location": 2002,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_life_span": {
            "name": "test_life_span",
            "location": 2041,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_dates": {
            "name": "test_dates",
            "location": 2085,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestTabularJobsFormatter.test_working_dir": {
            "name": "test_working_dir",
            "location": 2152,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_preset": {
            "name": "test_preset",
            "location": 2196,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        },
        "TestTabularJobsFormatter.test_org_name": {
            "name": "test_org_name",
            "location": 2238,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "datetime_formatter": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_secrets.py": {
        "secrets_list": {
            "name": "secrets_list",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_secrets_formatter_simple": {
            "name": "test_secrets_formatter_simple",
            "location": 34,
            "return": [],
            "arguments": {
                "secrets_list": [],
                "rich_cmp": []
            }
        },
        "test_secrets_formatter_short": {
            "name": "test_secrets_formatter_short",
            "location": 39,
            "return": [],
            "arguments": {
                "secrets_list": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_service_accounts.py": {
        "test_service_account_formatter": {
            "name": "test_service_account_formatter",
            "location": 16,
            "return": [],
            "arguments": {
                "rich_cmp": []
            }
        },
        "service_accounts_list": {
            "name": "service_accounts_list",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_service_accounts_formatter_simple": {
            "name": "test_service_accounts_formatter_simple",
            "location": 67,
            "return": [],
            "arguments": {
                "service_accounts_list": [],
                "rich_cmp": []
            }
        },
        "test_disks_formatter": {
            "name": "test_disks_formatter",
            "location": 74,
            "return": [],
            "arguments": {
                "service_accounts_list": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_storage_formatters.py": {
        "TestNonePainter.test_simple": {
            "name": "test_simple",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestGnuPainter.test_color_parsing_simple": {
            "name": "test_color_parsing_simple",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGnuPainter.test_color_parsing_escaped_simple": {
            "name": "test_color_parsing_escaped_simple",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "escaped": [],
                "result": []
            }
        },
        "TestGnuPainter.test_color_parsing_escaped_octal": {
            "name": "test_color_parsing_escaped_octal",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "escaped": [],
                "result": []
            }
        },
        "TestGnuPainter.test_color_parsing_escaped_hex": {
            "name": "test_color_parsing_escaped_hex",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "escaped": [],
                "result": []
            }
        },
        "TestGnuPainter.test_color_parsing_carret": {
            "name": "test_color_parsing_carret",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "escaped": [],
                "result": []
            }
        },
        "TestGnuPainter.test_color_parsing_carret_incorrect": {
            "name": "test_color_parsing_carret_incorrect",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "escaped": []
            }
        },
        "TestGnuPainter.test_coloring": {
            "name": "test_coloring",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": [],
                "ls_colors": []
            }
        },
        "TestBSDPainter.test_color_parsing": {
            "name": "test_color_parsing",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBSDPainter.test_coloring": {
            "name": "test_coloring",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "ls_colors": [],
                "rich_cmp": []
            }
        },
        "TestPainterFactory.test_detection": {
            "name": "test_detection",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestFilesFormatter.test_formatter_with_all_entities": {
            "name": "test_formatter_with_all_entities",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "rich_cmp": []
            }
        },
        "TestFilesFormatter.test_formatter_with_empty_files": {
            "name": "test_formatter_with_empty_files",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "rich_cmp": []
            }
        },
        "TestFilesFormatter.test_sorter": {
            "name": "test_sorter",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUsageFormatter.test_formatter": {
            "name": "test_formatter",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestUsageFormatter.test_path_formatter": {
            "name": "test_path_formatter",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        },
        "TestUsageFormatter.test_org_formatter": {
            "name": "test_org_formatter",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "rich_cmp": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/test_utils.py": {
        "test_uri_formatter_without_org": {
            "name": "test_uri_formatter_without_org",
            "location": 10,
            "return": [],
            "arguments": {
                "scheme": []
            }
        },
        "test_uri_formatter_with_org": {
            "name": "test_uri_formatter_with_org",
            "location": 35,
            "return": [],
            "arguments": {
                "scheme": []
            }
        },
        "test_global_uri_formatter": {
            "name": "test_global_uri_formatter",
            "location": 71,
            "return": [],
            "arguments": {
                "org_name": []
            }
        },
        "test_uri_formatter_special_chars_without_org": {
            "name": "test_uri_formatter_special_chars_without_org",
            "location": 78,
            "return": [],
            "arguments": {
                "scheme": []
            }
        },
        "test_uri_formatter_special_chars_with_org": {
            "name": "test_uri_formatter_special_chars_with_org",
            "location": 106,
            "return": [],
            "arguments": {
                "scheme": []
            }
        }
    },
    "neuro-cli-master/neuro-cli/tests/unit/formatters/__init__.py": {},
    "neuro-cli-master/neuro-sdk/setup.py": {},
    "neuro-cli-master/neuro-sdk/docs/conf.py": {},
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_abc.py": {
        "AbstractFileProgress.start": {
            "name": "start",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractFileProgress.complete": {
            "name": "complete",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractFileProgress.step": {
            "name": "step",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractRecursiveFileProgress.enter": {
            "name": "enter",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractRecursiveFileProgress.leave": {
            "name": "leave",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractRecursiveFileProgress.fail": {
            "name": "fail",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDeleteProgress.delete": {
            "name": "delete",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.pull": {
            "name": "pull",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.push": {
            "name": "push",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.step": {
            "name": "step",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.save": {
            "name": "save",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.commit_started": {
            "name": "commit_started",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AbstractDockerImageProgress.commit_finished": {
            "name": "commit_finished",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_admin.py": {
        "_cluster_from_api": {
            "name": "_cluster_from_api",
            "location": 182,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_node_pool_from_api": {
            "name": "_node_pool_from_api",
            "location": 210,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_storage_from_api": {
            "name": "_storage_from_api",
            "location": 226,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_storage_instance_from_api": {
            "name": "_storage_instance_from_api",
            "location": 233,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_serialize_resource_preset": {
            "name": "_serialize_resource_preset",
            "location": 237,
            "return": [],
            "arguments": {
                "name": [],
                "preset": []
            }
        },
        "_Admin.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": []
            }
        },
        "_Admin._admin_url": {
            "name": "_admin_url",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_azure_bucket_provider.py": {
        "AzureProvider.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "container_client": [],
                "bucket": []
            }
        },
        "AzureProvider.__init__._extract_date": {
            "name": "_extract_date",
            "location": 36,
            "return": [],
            "arguments": {
                "resp": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_buckets.py": {
        "BucketFS.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "provider": []
            }
        },
        "BucketFS.bucket": {
            "name": "bucket",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketFS._as_file_key": {
            "name": "_as_file_key",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BucketFS._as_dir_key": {
            "name": "_as_dir_key",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BucketFS.to_url": {
            "name": "to_url",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BucketFS.parent": {
            "name": "parent",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BucketFS.name": {
            "name": "name",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BucketFS.child": {
            "name": "child",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "child": []
            }
        },
        "Buckets.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": [],
                "parser": []
            }
        },
        "Buckets._parse_bucket_payload": {
            "name": "_parse_bucket_payload",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Buckets._parse_bucket_credentials_payload": {
            "name": "_parse_bucket_credentials_payload",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Buckets._get_buckets_url": {
            "name": "_get_buckets_url",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        },
        "Buckets._parse_persistent_credentials_payload": {
            "name": "_parse_persistent_credentials_payload",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Buckets._get_persistent_credentials_url": {
            "name": "_get_persistent_credentials_url",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_bucket_base.py": {
        "BucketEntry.name": {
            "name": "name",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketEntry.uri": {
            "name": "uri",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketEntry.is_file": {
            "name": "is_file",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketEntry.is_dir": {
            "name": "is_dir",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobObject.is_file": {
            "name": "is_file",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobObject.is_dir": {
            "name": "is_dir",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobCommonPrefix.is_file": {
            "name": "is_file",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlobCommonPrefix.is_dir": {
            "name": "is_dir",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketProvider.create": {
            "name": "create",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "bucket": [],
                "_get_credentials": []
            }
        },
        "BucketProvider.list_blobs": {
            "name": "list_blobs",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "recursive": [],
                "limit": []
            }
        },
        "BucketProvider.fetch_blob": {
            "name": "fetch_blob",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "offset": []
            }
        },
        "Bucket.uri": {
            "name": "uri",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.get_key_for_uri": {
            "name": "get_key_for_uri",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "MeasureTimeDiffMixin.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeasureTimeDiffMixin._wrap_api_call": {
            "name": "_wrap_api_call",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "_make_call": [],
                "get_date": []
            }
        },
        "MeasureTimeDiffMixin._wrap_api_call_ctx_manager": {
            "name": "_wrap_api_call_ctx_manager",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "_make_call": [],
                "get_date": []
            }
        },
        "MeasureTimeDiffMixin._wrap_api_call_ctx_manager._average": {
            "name": "_average",
            "location": 225,
            "return": [],
            "arguments": {
                "cur_approx": [],
                "new_val": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "path": [],
                "trace_id": [],
                "trace_sampled": [],
                "plugin_manager": []
            }
        },
        "Client.closed": {
            "name": "closed",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.username": {
            "name": "username",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.cluster_name": {
            "name": "cluster_name",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.presets": {
            "name": "presets",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.config": {
            "name": "config",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.jobs": {
            "name": "jobs",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.storage": {
            "name": "storage",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.users": {
            "name": "users",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.images": {
            "name": "images",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.secrets": {
            "name": "secrets",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.disks": {
            "name": "disks",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.service_accounts": {
            "name": "service_accounts",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.buckets": {
            "name": "buckets",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.parse": {
            "name": "parse",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.version_checker": {
            "name": "version_checker",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_config.py": {
        "_load_user_config": {
            "name": "_load_user_config",
            "location": 316,
            "return": [],
            "arguments": {
                "plugin_manager": [],
                "path": []
            }
        },
        "_open_db_rw": {
            "name": "_open_db_rw",
            "location": 342,
            "return": [],
            "arguments": {
                "path": [],
                "suppress_errors": []
            }
        },
        "_open_db_ro": {
            "name": "_open_db_ro",
            "location": 368,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_load": {
            "name": "_load",
            "location": 408,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_load_recovery_data": {
            "name": "_load_recovery_data",
            "location": 450,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_deserialize_auth_config": {
            "name": "_deserialize_auth_config",
            "location": 481,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_deserialize_clusters": {
            "name": "_deserialize_clusters",
            "location": 498,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_deserialize_resource_preset": {
            "name": "_deserialize_resource_preset",
            "location": 521,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_deserialize_auth_token": {
            "name": "_deserialize_auth_token",
            "location": 538,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_save_auth_token": {
            "name": "_save_auth_token",
            "location": 547,
            "return": [],
            "arguments": {
                "db": [],
                "token": []
            }
        },
        "_save": {
            "name": "_save",
            "location": 556,
            "return": [],
            "arguments": {
                "config": [],
                "path": [],
                "suppress_errors": []
            }
        },
        "_serialize_auth_config": {
            "name": "_serialize_auth_config",
            "location": 602,
            "return": [],
            "arguments": {
                "auth_config": []
            }
        },
        "_serialize_clusters": {
            "name": "_serialize_clusters",
            "location": 620,
            "return": [],
            "arguments": {
                "clusters": []
            }
        },
        "_serialize_resource_preset": {
            "name": "_serialize_resource_preset",
            "location": 642,
            "return": [],
            "arguments": {
                "name": [],
                "preset": []
            }
        },
        "_merge_user_configs": {
            "name": "_merge_user_configs",
            "location": 657,
            "return": [],
            "arguments": {
                "older": [],
                "newer": []
            }
        },
        "_check_sections": {
            "name": "_check_sections",
            "location": 680,
            "return": [],
            "arguments": {
                "config": [],
                "valid_names": [],
                "filename": []
            }
        },
        "_check_item": {
            "name": "_check_item",
            "location": 698,
            "return": [],
            "arguments": {
                "val": [],
                "validator": [],
                "full_name": [],
                "filename": []
            }
        },
        "_check_section": {
            "name": "_check_section",
            "location": 726,
            "return": [],
            "arguments": {
                "config": [],
                "section": [],
                "params": [],
                "filename": []
            }
        },
        "_validate_user_config": {
            "name": "_validate_user_config",
            "location": 746,
            "return": [],
            "arguments": {
                "plugin_manager": [],
                "config": [],
                "filename": [],
                "allow_cluster_name": [],
                "allow_org_name": []
            }
        },
        "_validate_alias": {
            "name": "_validate_alias",
            "location": 798,
            "return": [],
            "arguments": {
                "key": [],
                "value": [],
                "filename": []
            }
        },
        "_load_file": {
            "name": "_load_file",
            "location": 805,
            "return": [],
            "arguments": {
                "plugin_manager": [],
                "filename": []
            }
        },
        "_load_schema": {
            "name": "_load_schema",
            "location": 826,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_check_db": {
            "name": "_check_db",
            "location": 840,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_init_db_maybe": {
            "name": "_init_db_maybe",
            "location": 849,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "path": [],
                "plugin_manager": []
            }
        },
        "Config._load": {
            "name": "_load",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._config_data": {
            "name": "_config_data",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.username": {
            "name": "username",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.presets": {
            "name": "presets",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.clusters": {
            "name": "clusters",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.cluster_name": {
            "name": "cluster_name",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._get_user_cluster_name": {
            "name": "_get_user_cluster_name",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.cluster_orgs": {
            "name": "cluster_orgs",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.org_name": {
            "name": "org_name",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._get_user_org_name": {
            "name": "_get_user_org_name",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._cluster": {
            "name": "_cluster",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.get_cluster": {
            "name": "get_cluster",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        },
        "Config.api_url": {
            "name": "api_url",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.admin_url": {
            "name": "admin_url",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.service_accounts_url": {
            "name": "service_accounts_url",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.monitoring_url": {
            "name": "monitoring_url",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.storage_url": {
            "name": "storage_url",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.registry_url": {
            "name": "registry_url",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.secrets_url": {
            "name": "secrets_url",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.disk_api_url": {
            "name": "disk_api_url",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.bucket_api_url": {
            "name": "bucket_api_url",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._get_user_config": {
            "name": "_get_user_config",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config._open_db": {
            "name": "_open_db",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "suppress_errors": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_config_factory.py": {
        "_make_session": {
            "name": "_make_session",
            "location": 43,
            "return": [],
            "arguments": {
                "timeout": [],
                "trace_configs": []
            }
        },
        "Factory.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "trace_configs": [],
                "trace_id": [],
                "trace_sampled": []
            }
        },
        "Factory.path": {
            "name": "path",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factory.is_config_present": {
            "name": "is_config_present",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Factory._gen_config": {
            "name": "_gen_config",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "server_config": [],
                "token": [],
                "url": []
            }
        },
        "Factory._save": {
            "name": "_save",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_core.py": {
        "_ensure_schema": {
            "name": "_ensure_schema",
            "location": 212,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_save_cookies": {
            "name": "_save_cookies",
            "location": 236,
            "return": [],
            "arguments": {
                "db": [],
                "cookies": []
            }
        },
        "_load_cookies": {
            "name": "_load_cookies",
            "location": 261,
            "return": [],
            "arguments": {
                "db": []
            }
        },
        "_make_cookie": {
            "name": "_make_cookie",
            "location": 282,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "domain": [],
                "path": []
            }
        },
        "_Core.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "trace_id": [],
                "trace_sampled": []
            }
        },
        "_Core._post_init": {
            "name": "_post_init",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "_Core._save_cookies": {
            "name": "_save_cookies",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "_Core.timeout": {
            "name": "timeout",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Core.session": {
            "name": "session",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Core._raise_error": {
            "name": "_raise_error",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [],
                "err_text": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_disks.py": {
        "Disk.uri": {
            "name": "uri",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Disks.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": []
            }
        },
        "Disks._parse_disk_payload": {
            "name": "_parse_disk_payload",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "Disks._get_disks_url": {
            "name": "_get_disks_url",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_errors.py": {
        "StdStreamError.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "exit_code": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_file_filter.py": {
        "_has_magic": {
            "name": "_has_magic",
            "location": 70,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_glob_safe_prefix": {
            "name": "_glob_safe_prefix",
            "location": 74,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "_isrecursive": {
            "name": "_isrecursive",
            "location": 78,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 82,
            "return": [],
            "arguments": {
                "pat": []
            }
        },
        "_strip_trailing_spaces": {
            "name": "_strip_trailing_spaces",
            "location": 159,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 176,
            "return": [],
            "arguments": {
                "pathname": []
            }
        },
        "FileFilter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "FileFilter.read_from_buffer": {
            "name": "read_from_buffer",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "prefix": [],
                "prefix2": []
            }
        },
        "FileFilter.read_from_file": {
            "name": "read_from_file",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "prefix": [],
                "prefix2": []
            }
        },
        "FileFilter.append": {
            "name": "append",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": [],
                "pattern": [],
                "prefix": [],
                "prefix2": []
            }
        },
        "FileFilter.exclude": {
            "name": "exclude",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "prefix": [],
                "prefix2": []
            }
        },
        "FileFilter.include": {
            "name": "include",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "prefix": [],
                "prefix2": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_file_utils.py": {
        "FileSystem.read_chunks": {
            "name": "read_chunks",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "offset": []
            }
        },
        "FileSystem.iter_dir": {
            "name": "iter_dir",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "FileSystem.to_url": {
            "name": "to_url",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "FileSystem.parent": {
            "name": "parent",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "FileSystem.name": {
            "name": "name",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "FileSystem.child": {
            "name": "child",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "child": []
            }
        },
        "LocalFS.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalFS.to_url": {
            "name": "to_url",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "LocalFS.parent": {
            "name": "parent",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "LocalFS.name": {
            "name": "name",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "LocalFS.child": {
            "name": "child",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "child": []
            }
        },
        "FileTransferer.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "src_fs": [],
                "dst_fs": []
            }
        },
        "FileTransferer._check_continue_possible": {
            "name": "_check_continue_possible",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "continue_": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_gcs_bucket_provider.py": {
        "AutoRefreshingGCSToken.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoRefreshingGCSToken._refresh_required": {
            "name": "_refresh_required",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuroAutoRefreshingGCSToken.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "initial_credentials": [],
                "get_credentials": []
            }
        },
        "NeuroAutoRefreshingGCSToken._parse_credentials": {
            "name": "_parse_credentials",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "credentials": []
            }
        },
        "NeuroAutoRefreshingGCSToken._refresh_required": {
            "name": "_refresh_required",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServiceAccountRefreshingGCSToken.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "key_data_json_b64": [],
                "request": []
            }
        },
        "ServiceAccountRefreshingGCSToken._refresh_required": {
            "name": "_refresh_required",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GCSProvider.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "token": [],
                "bucket": [],
                "gcs_bucket_name": []
            }
        },
        "GCSProvider._parse_obj": {
            "name": "_parse_obj",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GCSProvider.__init__._extract_date": {
            "name": "_extract_date",
            "location": 125,
            "return": [],
            "arguments": {
                "resp": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_images.py": {
        "_try_parse_image_progress_step": {
            "name": "_try_parse_image_progress_step",
            "location": 254,
            "return": [],
            "arguments": {
                "obj": [],
                "target_image_tag": []
            }
        },
        "_raise_on_error_chunk": {
            "name": "_raise_on_error_chunk",
            "location": 277,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Images.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": [],
                "parse": []
            }
        },
        "Images._get_image_url": {
            "name": "_get_image_url",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "remote": []
            }
        },
        "Images._docker": {
            "name": "_docker",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Images._validate_image_for_tags": {
            "name": "_validate_image_for_tags",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_DummyProgress.pull": {
            "name": "pull",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_DummyProgress.push": {
            "name": "push",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_DummyProgress.step": {
            "name": "step",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_DummyProgress.save": {
            "name": "save",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_DummyProgress.commit_started": {
            "name": "commit_started",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "_DummyProgress.commit_finished": {
            "name": "commit_finished",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_jobs.py": {
        "_load_chunk": {
            "name": "_load_chunk",
            "location": 825,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "_parse_commit_started_chunk": {
            "name": "_parse_commit_started_chunk",
            "location": 829,
            "return": [],
            "arguments": {
                "job_id": [],
                "obj": [],
                "parse": []
            }
        },
        "_parse_commit_finished_chunk": {
            "name": "_parse_commit_finished_chunk",
            "location": 841,
            "return": [],
            "arguments": {
                "job_id": [],
                "obj": []
            }
        },
        "_raise_for_invalid_commit_chunk": {
            "name": "_raise_for_invalid_commit_chunk",
            "location": 848,
            "return": [],
            "arguments": {
                "obj": [],
                "expect_started": []
            }
        },
        "_resources_to_api": {
            "name": "_resources_to_api",
            "location": 862,
            "return": [],
            "arguments": {
                "resources": []
            }
        },
        "_resources_from_api": {
            "name": "_resources_from_api",
            "location": 880,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_http_port_to_api": {
            "name": "_http_port_to_api",
            "location": 897,
            "return": [],
            "arguments": {
                "port": []
            }
        },
        "_http_port_from_api": {
            "name": "_http_port_from_api",
            "location": 901,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_container_from_api": {
            "name": "_container_from_api",
            "location": 907,
            "return": [],
            "arguments": {
                "data": [],
                "cluster_name": [],
                "parse": []
            }
        },
        "_container_to_api": {
            "name": "_container_to_api",
            "location": 933,
            "return": [],
            "arguments": {
                "config": [],
                "image": [],
                "entrypoint": [],
                "command": [],
                "working_dir": [],
                "http": [],
                "env": [],
                "volumes": [],
                "secret_env": [],
                "secret_files": [],
                "disk_volumes": [],
                "tty": [],
                "shm": []
            }
        },
        "_calc_status": {
            "name": "_calc_status",
            "location": 985,
            "return": [],
            "arguments": {
                "stat": []
            }
        },
        "_job_status_item_from_api": {
            "name": "_job_status_item_from_api",
            "location": 993,
            "return": [],
            "arguments": {
                "res": []
            }
        },
        "_job_description_from_api": {
            "name": "_job_description_from_api",
            "location": 1003,
            "return": [],
            "arguments": {
                "res": [],
                "parse": []
            }
        },
        "_job_to_api": {
            "name": "_job_to_api",
            "location": 1074,
            "return": [],
            "arguments": {
                "cluster_name": [],
                "name": [],
                "preset_name": [],
                "tags": [],
                "description": [],
                "pass_config": [],
                "wait_for_jobs_quota": [],
                "schedule_timeout": [],
                "restart_policy": [],
                "life_span": [],
                "privileged": [],
                "org_name": [],
                "priority": []
            }
        },
        "_job_telemetry_from_api": {
            "name": "_job_telemetry_from_api",
            "location": 1116,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_volume_to_api": {
            "name": "_volume_to_api",
            "location": 1126,
            "return": [],
            "arguments": {
                "volume": [],
                "config": []
            }
        },
        "_secret_file_to_api": {
            "name": "_secret_file_to_api",
            "location": 1138,
            "return": [],
            "arguments": {
                "secret_file": [],
                "config": []
            }
        },
        "_disk_volume_to_api": {
            "name": "_disk_volume_to_api",
            "location": 1148,
            "return": [],
            "arguments": {
                "volume": [],
                "config": []
            }
        },
        "_volume_from_api": {
            "name": "_volume_from_api",
            "location": 1160,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_secret_file_from_api": {
            "name": "_secret_file_from_api",
            "location": 1169,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_disk_volume_from_api": {
            "name": "_disk_volume_from_api",
            "location": 1175,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_parse_datetime": {
            "name": "_parse_datetime",
            "location": 1192,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "Resources.memory_mb": {
            "name": "memory_mb",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.is_pending": {
            "name": "is_pending",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.is_running": {
            "name": "is_running",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.is_finished": {
            "name": "is_finished",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.items": {
            "name": "items",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "JobStatus.active_items": {
            "name": "active_items",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "JobStatus.finished_items": {
            "name": "finished_items",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "JobStatusHistory.changed_at": {
            "name": "changed_at",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobRestartPolicy.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobRestartPolicy.__repr__": {
            "name": "__repr__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobTelemetry.memory": {
            "name": "memory",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobTelemetry.gpu_memory": {
            "name": "gpu_memory",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdStream.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "ws": []
            }
        },
        "Jobs.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": [],
                "parse": []
            }
        },
        "Jobs._get_monitoring_url": {
            "name": "_get_monitoring_url",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_login.py": {
        "urlsafe_unpadded_b64encode": {
            "name": "urlsafe_unpadded_b64encode",
            "location": 42,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "create_auth_code_app": {
            "name": "create_auth_code_app",
            "location": 203,
            "return": [],
            "arguments": {
                "code": [],
                "redirect_url": []
            }
        },
        "create_standalone_token": {
            "name": "create_standalone_token",
            "location": 490,
            "return": [],
            "arguments": {}
        },
        "AuthCode.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "callback_url": []
            }
        },
        "AuthCode.verifier": {
            "name": "verifier",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthCode.challenge": {
            "name": "challenge",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthCode.challenge_method": {
            "name": "challenge_method",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthCode.set_value": {
            "name": "set_value",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AuthCode.callback_url": {
            "name": "callback_url",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AuthCode.set_exception": {
            "name": "set_exception",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "AuthCode.cancel": {
            "name": "cancel",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthCodeCallbackClient.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "client_id": [],
                "audience": []
            }
        },
        "WebBrowserAuthCodeCallbackClient.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "client_id": [],
                "audience": [],
                "show_browser_cb": []
            }
        },
        "HeadlessAuthCodeCallbackClient.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "client_id": [],
                "audience": [],
                "get_auth_code_cb": []
            }
        },
        "AuthCodeCallbackHandler.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "code": [],
                "redirect_url": []
            }
        },
        "_AuthToken.is_expired": {
            "name": "is_expired",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AuthToken.username": {
            "name": "username",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AuthToken.create": {
            "name": "create",
            "location": 268,
            "return": [],
            "arguments": {
                "cls": [],
                "token": [],
                "expires_in": [],
                "refresh_token": [],
                "expiration_ratio": []
            }
        },
        "_AuthToken.create_non_expiring": {
            "name": "create_non_expiring",
            "location": 287,
            "return": [],
            "arguments": {
                "cls": [],
                "token": []
            }
        },
        "AuthTokenClient.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "url": [],
                "client_id": []
            }
        },
        "_AuthConfig.callback_host": {
            "name": "callback_host",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AuthConfig.callback_ports": {
            "name": "callback_ports",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AuthConfig.create": {
            "name": "create",
            "location": 393,
            "return": [],
            "arguments": {
                "cls": [],
                "auth_url": [],
                "token_url": [],
                "logout_url": [],
                "client_id": [],
                "audience": [],
                "headless_callback_url": [],
                "success_redirect_url": [],
                "callback_urls": []
            }
        },
        "BaseNegotiator.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "config": []
            }
        },
        "AuthNegotiator.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "config": [],
                "show_browser_cb": []
            }
        },
        "HeadlessNegotiator.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "config": [],
                "get_auth_code_cb": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_parser.py": {
        "_read_lines": {
            "name": "_read_lines",
            "location": 346,
            "return": [],
            "arguments": {
                "env_file": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Parser._parse_generic_volume": {
            "name": "_parse_generic_volume",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "volume": [],
                "allow_rw_spec": [],
                "resource_name": []
            }
        },
        "Parser.volume": {
            "name": "volume",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "volume": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "Parser._build_volumes": {
            "name": "_build_volumes",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "input_volumes": [],
                "cluster_name": []
            }
        },
        "Parser._build_secret_files": {
            "name": "_build_secret_files",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "input_volumes": [],
                "cluster_name": []
            }
        },
        "Parser._parse_secret_resource": {
            "name": "_parse_secret_resource",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "Parser._build_disk_volumes": {
            "name": "_build_disk_volumes",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "input_volumes": [],
                "cluster_name": []
            }
        },
        "Parser._parse_disk_resource": {
            "name": "_parse_disk_resource",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "Parser._get_image_parser": {
            "name": "_get_image_parser",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "Parser.local_image": {
            "name": "local_image",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "Parser.remote_image": {
            "name": "remote_image",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "Parser._local_to_remote_image": {
            "name": "_local_to_remote_image",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "cluster_name": []
            }
        },
        "Parser._remote_to_local_image": {
            "name": "_remote_to_local_image",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "Parser.envs": {
            "name": "envs",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "env": [],
                "env_file": [],
                "cluster_name": []
            }
        },
        "Parser._build_env": {
            "name": "_build_env",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "env": [],
                "env_file": []
            }
        },
        "Parser._extract_secret_env": {
            "name": "_extract_secret_env",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "env_dict": [],
                "cluster_name": []
            }
        },
        "Parser.volumes": {
            "name": "volumes",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "volume": [],
                "cluster_name": []
            }
        },
        "Parser.uri_to_str": {
            "name": "uri_to_str",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Parser.str_to_uri": {
            "name": "str_to_uri",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "id_or_name_or_uri": []
            }
        },
        "Parser.uri_to_path": {
            "name": "uri_to_path",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Parser.path_to_uri": {
            "name": "path_to_uri",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Parser.normalize_uri": {
            "name": "normalize_uri",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Parser._short": {
            "name": "_short",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_parsing_utils.py": {
        "_get_url_authority": {
            "name": "_get_url_authority",
            "location": 360,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "RemoteImage._is_in_neuro_registry": {
            "name": "_is_in_neuro_registry",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.new_neuro_image": {
            "name": "new_neuro_image",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "registry": []
            }
        },
        "RemoteImage.new_external_image": {
            "name": "new_external_image",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "registry": []
            }
        },
        "RemoteImage.__post_init__": {
            "name": "__post_init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.as_docker_url": {
            "name": "as_docker_url",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "with_scheme": []
            }
        },
        "RemoteImage.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.__rich__": {
            "name": "__rich__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalImage.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalImage.__rich__": {
            "name": "__rich__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ImageNameParser.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "default_user": [],
                "default_cluster": [],
                "default_org": [],
                "registry_urls": []
            }
        },
        "_ImageNameParser.parse_as_local_image": {
            "name": "parse_as_local_image",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser.parse_as_neuro_image": {
            "name": "parse_as_neuro_image",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser.parse_remote": {
            "name": "parse_remote",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ImageNameParser.convert_to_neuro_image": {
            "name": "convert_to_neuro_image",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser.convert_to_local_image": {
            "name": "convert_to_local_image",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser.has_tag": {
            "name": "has_tag",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser._validate_image_name": {
            "name": "_validate_image_name",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser._parse_as_local_image": {
            "name": "_parse_as_local_image",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser._parse_as_neuro_image": {
            "name": "_parse_as_neuro_image",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "default_tag": []
            }
        },
        "_ImageNameParser._find_by_registry": {
            "name": "_find_by_registry",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_ImageNameParser._split_image_name": {
            "name": "_split_image_name",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "image": [],
                "default_tag": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_plugins.py": {
        "ConfigBuilder.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigBuilder._define_param": {
            "name": "_define_param",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": [],
                "type": [],
                "scope": []
            }
        },
        "ConfigBuilder._get_spec": {
            "name": "_get_spec",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "ConfigBuilder.define_int": {
            "name": "define_int",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_bool": {
            "name": "define_bool",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_str": {
            "name": "define_str",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_float": {
            "name": "define_float",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_int_list": {
            "name": "define_int_list",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_bool_list": {
            "name": "define_bool_list",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_str_list": {
            "name": "define_str_list",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "ConfigBuilder.define_float_list": {
            "name": "define_float_list",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "section": [],
                "name": []
            }
        },
        "VersionChecker.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionChecker.register": {
            "name": "register",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "update_text": []
            }
        },
        "PluginManager.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.config": {
            "name": "config",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.version_checker": {
            "name": "version_checker",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_rewrite.py": {
        "rewrite_module": {
            "name": "rewrite_module",
            "location": 6,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_s3_bucket_provider.py": {
        "ProgressManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressManager.with_progress": {
            "name": "with_progress",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "upload_id": [],
                "progress": []
            }
        },
        "ProgressManager.patch_client": {
            "name": "patch_client",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "S3Provider.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "bucket": [],
                "bucket_name": []
            }
        },
        "S3Provider.__init__._extract_date": {
            "name": "_extract_date",
            "location": 84,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "S3Provider.create._credentials_to_meta": {
            "name": "_credentials_to_meta",
            "location": 108,
            "return": [],
            "arguments": {
                "credentials": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_secrets.py": {
        "Secret.uri": {
            "name": "uri",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Secrets.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": []
            }
        },
        "Secrets._get_secrets_url": {
            "name": "_get_secrets_url",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_server_cfg.py": {
        "_parse_cluster_config": {
            "name": "_parse_cluster_config",
            "location": 53,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "_parse_clusters": {
            "name": "_parse_clusters",
            "location": 88,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "Preset.memory_mb": {
            "name": "memory_mb",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_service_accounts.py": {
        "ServiceAccounts.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": []
            }
        },
        "ServiceAccounts._parse_account_payload": {
            "name": "_parse_account_payload",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_storage.py": {
        "_has_magic": {
            "name": "_has_magic",
            "location": 939,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_ishidden": {
            "name": "_ishidden",
            "location": 943,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_isrecursive": {
            "name": "_isrecursive",
            "location": 947,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "_file_status_from_api_ls": {
            "name": "_file_status_from_api_ls",
            "location": 951,
            "return": [],
            "arguments": {
                "base_uri": [],
                "values": []
            }
        },
        "_file_status_from_api_stat": {
            "name": "_file_status_from_api_stat",
            "location": 968,
            "return": [],
            "arguments": {
                "cluster_name": [],
                "values": []
            }
        },
        "_disk_usage_from_api": {
            "name": "_disk_usage_from_api",
            "location": 986,
            "return": [],
            "arguments": {
                "cluster_name": [],
                "org_name": [],
                "uri": [],
                "values": []
            }
        },
        "_parse_content_range": {
            "name": "_parse_content_range",
            "location": 1002,
            "return": [],
            "arguments": {
                "rng_str": []
            }
        },
        "load_parent_ignore_files": {
            "name": "load_parent_ignore_files",
            "location": 1060,
            "return": [],
            "arguments": {
                "filter": [],
                "ignore_file_names": [],
                "path": [],
                "rel_path": []
            }
        },
        "FileStatus.is_file": {
            "name": "is_file",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileStatus.is_dir": {
            "name": "is_dir",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileStatus.is_symlink": {
            "name": "is_symlink",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileStatus.name": {
            "name": "name",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Storage.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": []
            }
        },
        "Storage._normalize_uri": {
            "name": "_normalize_uri",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Storage._get_storage_url": {
            "name": "_get_storage_url",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Storage._set_time_diff": {
            "name": "_set_time_diff",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "request_time": [],
                "resp": []
            }
        },
        "Storage._check_upload": {
            "name": "_check_upload",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "local": [],
                "remote": [],
                "update": [],
                "continue_": []
            }
        },
        "Storage._check_download": {
            "name": "_check_download",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "local": [],
                "remote": [],
                "update": [],
                "continue_": []
            }
        },
        "Storage._create_disk_usage_uri": {
            "name": "_create_disk_usage_uri",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "Storage.check_for_server_error": {
            "name": "check_for_server_error",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "server_message": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_tracing.py": {
        "gen_trace_id": {
            "name": "gen_trace_id",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "_gen_span_id": {
            "name": "_gen_span_id",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "_update_headers": {
            "name": "_update_headers",
            "location": 39,
            "return": [],
            "arguments": {
                "headers": [],
                "trace_id": [],
                "span_id": [],
                "sampled": []
            }
        },
        "_make_trace_config": {
            "name": "_make_trace_config",
            "location": 71,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_url_utils.py": {
        "uri_from_cli": {
            "name": "uri_from_cli",
            "location": 13,
            "return": [],
            "arguments": {
                "path_or_uri": [],
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "_check_scheme": {
            "name": "_check_scheme",
            "location": 61,
            "return": [],
            "arguments": {
                "scheme": [],
                "allowed": []
            }
        },
        "normalize_storage_path_uri": {
            "name": "normalize_storage_path_uri",
            "location": 77,
            "return": [],
            "arguments": {
                "uri": [],
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "normalize_secret_uri": {
            "name": "normalize_secret_uri",
            "location": 88,
            "return": [],
            "arguments": {
                "uri": [],
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "normalize_disk_uri": {
            "name": "normalize_disk_uri",
            "location": 99,
            "return": [],
            "arguments": {
                "uri": [],
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "_normalize_uri": {
            "name": "_normalize_uri",
            "location": 110,
            "return": [],
            "arguments": {
                "uri": [],
                "username": [],
                "cluster_name": [],
                "org_name": []
            }
        },
        "normalize_local_path_uri": {
            "name": "normalize_local_path_uri",
            "location": 134,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "_extract_path": {
            "name": "_extract_path",
            "location": 155,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "_check_uri": {
            "name": "_check_uri",
            "location": 164,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "_check_uri_str": {
            "name": "_check_uri_str",
            "location": 183,
            "return": [],
            "arguments": {
                "uri": [],
                "scheme": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_users.py": {
        "_permission_to_api": {
            "name": "_permission_to_api",
            "location": 181,
            "return": [],
            "arguments": {
                "perm": []
            }
        },
        "Users.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": [],
                "admin": []
            }
        },
        "Users._get_user_url": {
            "name": "_get_user_url",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_utils.py": {
        "asyncgeneratorcontextmanager": {
            "name": "asyncgeneratorcontextmanager",
            "location": 116,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "flat": {
            "name": "flat",
            "location": 203,
            "return": [],
            "arguments": {
                "sql": []
            }
        },
        "find_project_root": {
            "name": "find_project_root",
            "location": 208,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "queue_calls": {
            "name": "queue_calls",
            "location": 232,
            "return": [],
            "arguments": {
                "any_obj": [],
                "allow_any_for_none": []
            }
        },
        "_AsyncIteratorAndContextManager.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "gen": []
            }
        },
        "_AsyncIteratorAndContextManager.__aiter__": {
            "name": "__aiter__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncIteratorAndContextManager.__anext__": {
            "name": "__anext__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "asyncgeneratorcontextmanager.wrapper": {
            "name": "wrapper",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "NoPublicConstructor.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoPublicConstructor._create": {
            "name": "_create",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ContextManager.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "_ContextManager.__await__": {
            "name": "__await__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "retries.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "attempts": [],
                "logger": []
            }
        },
        "retries.reset": {
            "name": "reset",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "retries.__iter__": {
            "name": "__iter__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NoopProxy.__getattr__": {
            "name": "__getattr__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "aclosing.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "queue_calls.Proxy.__getattr__": {
            "name": "__getattr__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_SupportsAclose.aclose": {
            "name": "aclose",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/_version_utils.py": {
        "_parse_date": {
            "name": "_parse_date",
            "location": 180,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_parse_max_version": {
            "name": "_parse_max_version",
            "location": 185,
            "return": [],
            "arguments": {
                "pypi_response": []
            }
        },
        "_parse_version_upload_time": {
            "name": "_parse_version_upload_time",
            "location": 193,
            "return": [],
            "arguments": {
                "pypi_response": [],
                "target_version": []
            }
        },
        "VersionChecker.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "core": [],
                "config": [],
                "plugin_manager": []
            }
        },
        "VersionChecker._ensure_schema": {
            "name": "_ensure_schema",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "VersionChecker._read_package": {
            "name": "_read_package",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "db": [],
                "package": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/src/neuro_sdk/__init__.py": {
        "get": {
            "name": "get",
            "location": 236,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/conftest.py": {
        "token": {
            "name": "token",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "auth_config": {
            "name": "auth_config",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "cluster_config": {
            "name": "cluster_config",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "make_client": {
            "name": "make_client",
            "location": 84,
            "return": [],
            "arguments": {
                "token": [],
                "auth_config": [],
                "tmp_path": []
            }
        },
        "make_client.go": {
            "name": "go",
            "location": 87,
            "return": [],
            "arguments": {
                "url_str": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_admin.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_blob_storage.py": {
        "mock_bucket": {
            "name": "mock_bucket",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "mock_bucket_provider": {
            "name": "mock_bucket_provider",
            "location": 115,
            "return": [],
            "arguments": {
                "mock_bucket": []
            }
        },
        "bucket_fs": {
            "name": "bucket_fs",
            "location": 120,
            "return": [],
            "arguments": {
                "mock_bucket_provider": []
            }
        },
        "MockBucketProvider.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": []
            }
        },
        "MockBucketProvider.create": {
            "name": "create",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "bucket": [],
                "_get_credentials": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_buckets.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_bucket_persistent_credentials.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_client.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_config.py": {
        "plugin_manager": {
            "name": "plugin_manager",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "multiple_clusters_config": {
            "name": "multiple_clusters_config",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "TestMergeUserConfigs.test_empty_dicts": {
            "name": "test_empty_dicts",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeUserConfigs.test_empty_newer": {
            "name": "test_empty_newer",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeUserConfigs.test_empty_older": {
            "name": "test_empty_older",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeUserConfigs.test_not_overlapped": {
            "name": "test_not_overlapped",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMergeUserConfigs.test_merge_subdicts": {
            "name": "test_merge_subdicts",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserConfigValidators.test_unsupported_section": {
            "name": "test_unsupported_section",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserConfigValidators.test_section_is_not_dict": {
            "name": "test_section_is_not_dict",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUserConfigValidators.test_invalid_alias_name": {
            "name": "test_invalid_alias_name",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_invalid_alias_type": {
            "name": "test_invalid_alias_type",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_extra_session_param": {
            "name": "test_extra_session_param",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_invalid_param_type": {
            "name": "test_invalid_param_type",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_invalid_complex_type": {
            "name": "test_invalid_complex_type",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_invalid_complex_item_type": {
            "name": "test_invalid_complex_item_type",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        },
        "TestUserConfigValidators.test_not_allowed_cluster_name": {
            "name": "test_not_allowed_cluster_name",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "plugin_manager": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_config_factory.py": {
        "tmp_home": {
            "name": "tmp_home",
            "location": 33,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "monkeypatch": []
            }
        },
        "config_dir": {
            "name": "config_dir",
            "location": 44,
            "return": [],
            "arguments": {
                "tmp_home": [],
                "token": [],
                "auth_config": [],
                "cluster_config": []
            }
        },
        "_create_config": {
            "name": "_create_config",
            "location": 52,
            "return": [],
            "arguments": {
                "nmrc_path": [],
                "token": [],
                "auth_config": [],
                "cluster_config": []
            }
        },
        "TestLoginPassedConfig.make_conf_data": {
            "name": "make_conf_data",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "mock_for_login": []
            }
        },
        "TestLoginPassedConfig.set_conf_to_env": {
            "name": "set_conf_to_env",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "make_conf_data": []
            }
        },
        "TestLoginPassedConfig.make_conf_data._make_config": {
            "name": "_make_config",
            "location": 338,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "TestLoginPassedConfig.set_conf_to_env._set_env": {
            "name": "_set_env",
            "location": 352,
            "return": [],
            "arguments": {
                "token": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_core.py": {
        "test_load_cookies_no_table": {
            "name": "test_load_cookies_no_table",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_load_cookies_incorrect_schema": {
            "name": "test_load_cookies_incorrect_schema",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_load_cookies_valid": {
            "name": "test_load_cookies_valid",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "test_save_load_multiple_cookies": {
            "name": "test_save_load_multiple_cookies",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_save_load_multiple_cookies_last_stamps": {
            "name": "test_save_load_multiple_cookies_last_stamps",
            "location": 234,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_disks.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_file_filter.py": {
        "test_translate": {
            "name": "test_translate",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_translate_recursive": {
            "name": "test_translate_recursive",
            "location": 162,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_file_utils.py": {
        "src_dir": {
            "name": "src_dir",
            "location": 27,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "dst_dir": {
            "name": "dst_dir",
            "location": 32,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "transferer": {
            "name": "transferer",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_transfer_dir_progress._check_progress": {
            "name": "_check_progress",
            "location": 281,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "test_transfer_dir_progress.MockProgress.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transfer_dir_progress.MockProgress.enter": {
            "name": "enter",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_transfer_dir_progress.MockProgress.leave": {
            "name": "leave",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_transfer_dir_progress.MockProgress.fail": {
            "name": "fail",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_transfer_dir_progress.MockProgress.start": {
            "name": "start",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_transfer_dir_progress.MockProgress.complete": {
            "name": "complete",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_transfer_dir_progress.MockProgress.step": {
            "name": "step",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_images.py": {
        "patch_docker_host": {
            "name": "patch_docker_host",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "TestImageParser.test_has_tag_ok": {
            "name": "test_has_tag_ok",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "TestImageParser.test_has_tag_no_tag": {
            "name": "test_has_tag_no_tag",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_no_tag_with_slash": {
            "name": "test_has_tag_no_tag_with_slash",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_empty_tag": {
            "name": "test_has_tag_empty_tag",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_empty_tag_with_slash": {
            "name": "test_has_tag_empty_tag_with_slash",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_empty_image_name": {
            "name": "test_has_tag_empty_image_name",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_too_many_tags": {
            "name": "test_has_tag_too_many_tags",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_has_tag_lstrip": {
            "name": "test_has_tag_lstrip",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_get_registry_hostname": {
            "name": "test_get_registry_hostname",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "registry_url": []
            }
        },
        "TestImageParser.test_get_registry_hostname_with_port": {
            "name": "test_get_registry_hostname_with_port",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "registry_url": []
            }
        },
        "TestImageParser.test_get_registry_hostname__bad_url_empty_hostname": {
            "name": "test_get_registry_hostname__bad_url_empty_hostname",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "registry_url": []
            }
        },
        "TestImageParser.test_split_image_name_no_tag": {
            "name": "test_split_image_name_no_tag",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_tag": {
            "name": "test_split_image_name_with_tag",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_empty_tag": {
            "name": "test_split_image_name_empty_tag",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_two_tags": {
            "name": "test_split_image_name_two_tags",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_registry_port_no_tag": {
            "name": "test_split_image_name_with_registry_port_no_tag",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_registry_port_with_tag": {
            "name": "test_split_image_name_with_registry_port_with_tag",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_registry_port_two_tags": {
            "name": "test_split_image_name_with_registry_port_two_tags",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_registry_port_empty_tag": {
            "name": "test_split_image_name_with_registry_port_empty_tag",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_split_image_name_with_registry_port_slash_in_tag": {
            "name": "test_split_image_name_with_registry_port_slash_in_tag",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__no_image_name": {
            "name": "test_parse_as_neuro_image__no_image_name",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestImageParser.test_parse_as_local_image_empty_fail": {
            "name": "test_parse_as_local_image_empty_fail",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_dash_fail": {
            "name": "test_parse_as_local_image_dash_fail",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_with_image_scheme_fail": {
            "name": "test_parse_as_local_image_with_image_scheme_fail",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_with_other_scheme_fail": {
            "name": "test_parse_as_local_image_with_other_scheme_fail",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_no_tag": {
            "name": "test_parse_as_local_image_no_tag",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_with_tag": {
            "name": "test_parse_as_local_image_with_tag",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_special_chars": {
            "name": "test_parse_as_local_image_special_chars",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image_2_tag_fail": {
            "name": "test_parse_as_local_image_2_tag_fail",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_query__fail": {
            "name": "test_parse_as_neuro_image__with_query__fail",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_fragment__fail": {
            "name": "test_parse_as_neuro_image__with_fragment__fail",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_user__fail": {
            "name": "test_parse_as_neuro_image__with_user__fail",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_password__fail": {
            "name": "test_parse_as_neuro_image__with_password__fail",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_empty_password__fail": {
            "name": "test_parse_as_neuro_image__with_empty_password__fail",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__with_port__fail": {
            "name": "test_parse_as_neuro_image__with_port__fail",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_empty__fail": {
            "name": "test_parse_as_neuro_image_empty__fail",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_dash__fail": {
            "name": "test_parse_as_neuro_image_dash__fail",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_fail",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_invalid_scheme_1_fail": {
            "name": "test_parse_as_neuro_image_invalid_scheme_1_fail",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_invalid_scheme_2_fail": {
            "name": "test_parse_as_neuro_image_invalid_scheme_2_fail",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_default_org_no_org": {
            "name": "test_parse_as_neuro_image_with_default_org_no_org",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_default_org_no_cluster_no_org": {
            "name": "test_parse_as_neuro_image_with_default_org_no_cluster_no_org",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_default_org_no_cluster_no_user": {
            "name": "test_parse_as_neuro_image_with_default_org_no_cluster_no_user",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_default_org_same_org": {
            "name": "test_parse_as_neuro_image_with_default_org_same_org",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_default_org_other_org": {
            "name": "test_parse_as_neuro_image_with_default_org_other_org",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_without_default_org_with_org": {
            "name": "test_parse_as_neuro_image_without_default_org_with_org",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_with_cluster_with_user_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_with_cluster_with_user_with_tag",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_with_cluster_with_user_with_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_with_cluster_with_user_with_tag_2",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_with_cluster_with_user_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_with_cluster_with_user_no_tag",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_with_cluster_with_user_no_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_with_cluster_with_user_no_tag_2",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_unknown_cluster": {
            "name": "test_parse_as_neuro_image_with_scheme_unknown_cluster",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_no_tag",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_no_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_no_tag_2",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_with_tag",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_with_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_no_slash_no_cluster_no_user_with_tag_2",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_name_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_name_no_tag",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_tag",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_tag_2",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_name_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_no_name_with_tag",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_with_tag",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_with_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_1_slash_no_cluster_with_tag_2",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_2_slash_cluster_user_no_name_no_tag_fail": {
            "name": "test_parse_as_neuro_image_with_scheme_2_slash_cluster_user_no_name_no_tag_fail",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_2_slash_cluster_no_user_with_tag_fail": {
            "name": "test_parse_as_neuro_image_with_scheme_2_slash_cluster_no_user_with_tag_fail",
            "location": 594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_name_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_name_no_tag",
            "location": 601,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_tag",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_tag_2",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_name_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_no_name_with_tag",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_with_tag",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_with_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_3_slash_no_cluster_with_tag_2",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_name_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_name_with_tag",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_with_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_with_tag",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_with_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_with_tag_2",
            "location": 684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_name_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_name_no_tag",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_tag": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_tag",
            "location": 705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_tag_2": {
            "name": "test_parse_as_neuro_image_with_scheme_4_slash_no_cluster_no_tag_2",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_scheme_special_chars": {
            "name": "test_parse_as_neuro_image_with_scheme_special_chars",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_no_slash_no_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_no_slash_no_tag_fail",
            "location": 734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_no_slash_with_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_no_slash_with_tag_fail",
            "location": 739,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_1_slash_no_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_1_slash_no_tag_fail",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_1_slash_with_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_1_slash_with_tag_fail",
            "location": 749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_2_slash_no_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_2_slash_no_tag_fail",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_2_slash_with_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_2_slash_with_tag_fail",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_3_slash_no_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_3_slash_no_tag_fail",
            "location": 764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_registry_prefix": {
            "name": "test_parse_as_neuro_image_with_registry_prefix",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_with_registry_prefix_special_chars": {
            "name": "test_parse_as_neuro_image_with_registry_prefix_special_chars",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_no_scheme_3_slash_with_tag_fail": {
            "name": "test_parse_as_neuro_image_no_scheme_3_slash_with_tag_fail",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_allow_tag_false_with_scheme_no_tag": {
            "name": "test_parse_as_neuro_image_allow_tag_false_with_scheme_no_tag",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_allow_tag_false_no_scheme_no_tag": {
            "name": "test_parse_as_neuro_image_allow_tag_false_no_scheme_no_tag",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_allow_tag_false_no_scheme_with_tag": {
            "name": "test_parse_as_neuro_image_allow_tag_false_no_scheme_with_tag",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image_allow_tag_false_with_scheme_lstrip": {
            "name": "test_parse_as_neuro_image_allow_tag_false_with_scheme_lstrip",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_local_image": {
            "name": "test_convert_to_local_image",
            "location": 817,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_neuro_image": {
            "name": "test_convert_to_neuro_image",
            "location": 829,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_neuro_image_with_defualt_org": {
            "name": "test_convert_to_neuro_image_with_defualt_org",
            "location": 841,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_neuro_image__neuro_registry": {
            "name": "test_convert_to_neuro_image__neuro_registry",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_neuro_image__neuro_registry__no_user": {
            "name": "test_convert_to_neuro_image__neuro_registry__no_user",
            "location": 865,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_convert_to_neuro_image__neuro_registry__no_path": {
            "name": "test_convert_to_neuro_image__neuro_registry__no_path",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__ambiguous_case__fail": {
            "name": "test_parse_as_neuro_image__ambiguous_case__fail",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image__ambiguous_case__fail": {
            "name": "test_parse_as_local_image__ambiguous_case__fail",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__numeric_name": {
            "name": "test_parse_as_neuro_image__numeric_name",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image__neuro_registry": {
            "name": "test_parse_as_local_image__neuro_registry",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_local_image__registry_has_port__neuro_registry": {
            "name": "test_parse_as_local_image__registry_has_port__neuro_registry",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__registry_has_port__neuro_image": {
            "name": "test_parse_as_neuro_image__registry_has_port__neuro_image",
            "location": 931,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__registry_has_port__image_in_good_repo": {
            "name": "test_parse_as_neuro_image__registry_has_port__image_in_good_repo",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_as_neuro_image__registry_has_port__image_in_bad_repo": {
            "name": "test_parse_as_neuro_image__registry_has_port__image_in_bad_repo",
            "location": 967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_remote__registry_has_port__neuro_image": {
            "name": "test_parse_remote__registry_has_port__neuro_image",
            "location": 978,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_remote__registry_has_port__image_in_good_repo": {
            "name": "test_parse_remote__registry_has_port__image_in_good_repo",
            "location": 996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestImageParser.test_parse_remote__registry_has_port__image_in_other_repo": {
            "name": "test_parse_remote__registry_has_port__image_in_other_repo",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_str_in_neuro_registry_tag_none": {
            "name": "test_as_str_in_neuro_registry_tag_none",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_str_in_neuro_registry_tag_yes": {
            "name": "test_as_str_in_neuro_registry_tag_yes",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_str_in_neuro_registry_tag_special_chars": {
            "name": "test_as_str_in_neuro_registry_tag_special_chars",
            "location": 1056,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_str_not_in_neuro_registry_tag_none": {
            "name": "test_as_str_not_in_neuro_registry_tag_none",
            "location": 1071,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_str_not_in_neuro_registry_tag_yes": {
            "name": "test_as_str_not_in_neuro_registry_tag_yes",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_docker_url_in_neuro_registry": {
            "name": "test_as_docker_url_in_neuro_registry",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRemoteImage.test_as_docker_url_not_in_neuro_registry": {
            "name": "test_as_docker_url_not_in_neuro_registry",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_jobs.py": {
        "test_resources_default": {
            "name": "test_resources_default",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "create_job_response": {
            "name": "create_job_response",
            "location": 2116,
            "return": [],
            "arguments": {
                "id": [],
                "status": [],
                "owner": [],
                "name": [],
                "org_name": [],
                "image": [],
                "tags": [],
                "total_price_credits": [],
                "price_credits_per_hour": []
            }
        },
        "test__calc_status_known": {
            "name": "test__calc_status_known",
            "location": 2767,
            "return": [],
            "arguments": {}
        },
        "test__calc_status_unknown": {
            "name": "test__calc_status_unknown",
            "location": 2771,
            "return": [],
            "arguments": {}
        },
        "test_job_top.get_data_chunk": {
            "name": "get_data_chunk",
            "location": 186,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "test_job_top.get_job_telemetry": {
            "name": "get_job_telemetry",
            "location": 195,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_login.py": {
        "auth_client_id": {
            "name": "auth_client_id",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "TestAuthToken.test_is_not_expired": {
            "name": "test_is_not_expired",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthToken.test_is_expired": {
            "name": "test_is_expired",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestAuthHandler.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "client_id": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_login_utils.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_parser.py": {
        "test_get_url_authority_with_explicit_port": {
            "name": "test_get_url_authority_with_explicit_port",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_get_url_authority_with_implicit_port": {
            "name": "test_get_url_authority_with_implicit_port",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_get_url_authority_without_port": {
            "name": "test_get_url_authority_without_port",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_get_url_authority_without_host": {
            "name": "test_get_url_authority_without_host",
            "location": 187,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_plugins.py": {
        "test_config_builder": {
            "name": "test_config_builder",
            "location": 22,
            "return": [],
            "arguments": {
                "define_method_name": [],
                "expected_type": []
            }
        },
        "test_cannot_config_parameter_under_alias_section": {
            "name": "test_cannot_config_parameter_under_alias_section",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_cannot_add_parameter_twice": {
            "name": "test_cannot_add_parameter_twice",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_public_names.py": {
        "test_public_version": {
            "name": "test_public_version",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_module_for_public_names": {
            "name": "test_module_for_public_names",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_retry.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_secrets.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_service_accounts.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_storage.py": {
        "calc_diff": {
            "name": "calc_diff",
            "location": 38,
            "return": [],
            "arguments": {
                "dcmp": []
            }
        },
        "small_block_size": {
            "name": "small_block_size",
            "location": 52,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "storage_path": {
            "name": "storage_path",
            "location": 59,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "zero_time_threshold": {
            "name": "zero_time_threshold",
            "location": 1880,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_storage_filestatus.py": {
        "test_from_api": {
            "name": "test_from_api",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_file": {
            "name": "test_file",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_is_dir": {
            "name": "test_is_dir",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_is_symlink": {
            "name": "test_is_symlink",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_uri_ls": {
            "name": "test_uri_ls",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_uri_stat": {
            "name": "test_uri_stat",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_uri_stat_user_home": {
            "name": "test_uri_stat_user_home",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_uri_stat_cluster_only": {
            "name": "test_uri_stat_cluster_only",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_uri_forbidden_symbols": {
            "name": "test_uri_forbidden_symbols",
            "location": 150,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_tools.py": {
        "project_root": {
            "name": "project_root",
            "location": 13,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_find_root_in_root_dir": {
            "name": "test_find_root_in_root_dir",
            "location": 21,
            "return": [],
            "arguments": {
                "project_root": []
            }
        },
        "test_find_root_in_subdir": {
            "name": "test_find_root_in_subdir",
            "location": 30,
            "return": [],
            "arguments": {
                "project_root": []
            }
        },
        "test_find_root_uses_path_argument": {
            "name": "test_find_root_uses_path_argument",
            "location": 40,
            "return": [],
            "arguments": {
                "project_root": []
            }
        },
        "test_find_root_not_in_project": {
            "name": "test_find_root_not_in_project",
            "location": 49,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_queue_calls_saves_args.Foo.bar": {
            "name": "bar",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_queue_calls_multiple_calls.Foo.bar": {
            "name": "bar",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_url_utils.py": {
        "fake_homedir": {
            "name": "fake_homedir",
            "location": 25,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "pwd": {
            "name": "pwd",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_relative_path": {
            "name": "test_uri_from_cli_relative_path",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_path": {
            "name": "test_uri_from_cli_absolute_path",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_relative_path_special_chars": {
            "name": "test_uri_from_cli_relative_path_special_chars",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_path_special_chars": {
            "name": "test_uri_from_cli_absolute_path_special_chars",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_path_with_tilde": {
            "name": "test_uri_from_cli_path_with_tilde",
            "location": 59,
            "return": [],
            "arguments": {
                "fake_homedir": []
            }
        },
        "test_uri_from_cli_path_with_tilde_unknown_user": {
            "name": "test_uri_from_cli_path_with_tilde_unknown_user",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_tilde_only": {
            "name": "test_uri_from_cli_tilde_only",
            "location": 73,
            "return": [],
            "arguments": {
                "fake_homedir": []
            }
        },
        "test_uri_from_cli_relative_file_uri": {
            "name": "test_uri_from_cli_relative_file_uri",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_file_uri": {
            "name": "test_uri_from_cli_absolute_file_uri",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_relative_file_uri_special_chars": {
            "name": "test_uri_from_cli_relative_file_uri_special_chars",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_file_uri_special_chars": {
            "name": "test_uri_from_cli_absolute_file_uri_special_chars",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_relative_storage_uri": {
            "name": "test_uri_from_cli_relative_storage_uri",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_storage_uri": {
            "name": "test_uri_from_cli_absolute_storage_uri",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_absolute_storage_uri_special_chars": {
            "name": "test_uri_from_cli_absolute_storage_uri_special_chars",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_uri_from_cli_numberic_path": {
            "name": "test_uri_from_cli_numberic_path",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_normalized_path": {
            "name": "test_normalized_path",
            "location": 550,
            "return": [],
            "arguments": {}
        }
    },
    "neuro-cli-master/neuro-sdk/tests/test_users.py": {},
    "neuro-cli-master/neuro-sdk/tests/test_version_check.py": {
        "tls_certificate_authority": {
            "name": "tls_certificate_authority",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "tls_certificate": {
            "name": "tls_certificate",
            "location": 151,
            "return": [],
            "arguments": {
                "tls_certificate_authority": []
            }
        },
        "ssl_ctx": {
            "name": "ssl_ctx",
            "location": 156,
            "return": [],
            "arguments": {
                "tls_certificate": []
            }
        },
        "client_ssl_ctx": {
            "name": "client_ssl_ctx",
            "location": 163,
            "return": [],
            "arguments": {
                "tls_certificate_authority": []
            }
        },
        "get_neuro_cli_txt": {
            "name": "get_neuro_cli_txt",
            "location": 237,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        },
        "pypi_server": {
            "name": "pypi_server",
            "location": 261,
            "return": [],
            "arguments": {
                "fake_pypi": []
            }
        },
        "FakeResolver.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "fakes": []
            }
        },
        "FakePyPI.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "ssl_context": []
            }
        }
    },
    "neuro-cli-master/neuro-sdk/tests/__init__.py": {}
}
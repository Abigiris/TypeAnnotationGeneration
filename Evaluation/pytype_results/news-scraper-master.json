{
    "news-scraper-master/download_newspaper_corpora.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "news-scraper-master/main.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "news-scraper-master/app/config.py": {
        "MQConfig.URI": {
            "name": "URI",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "news-scraper-master/app/models.py": {
        "wrap_key_error": {
            "name": "wrap_key_error",
            "location": 212,
            "return": [
                "ValueError"
            ],
            "arguments": {
                "error": []
            }
        },
        "new_value_error": {
            "name": "new_value_error",
            "location": 216,
            "return": [
                "ValueError"
            ],
            "arguments": {
                "message": []
            }
        },
        "DTO.asdict": {
            "name": "asdict",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DTO.fromdict": {
            "name": "fromdict",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "Subject.describe": {
            "name": "describe",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subject.asdict": {
            "name": "asdict",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subject.fromdict": {
            "name": "fromdict",
            "location": 52,
            "return": [
                "_TSubject@@Subject@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubject]"
                ],
                "raw": []
            }
        },
        "Referer.asdict": {
            "name": "asdict",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Referer.fromdict": {
            "name": "fromdict",
            "location": 80,
            "return": [
                "_TReferer@@Referer@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TReferer]"
                ],
                "raw": []
            }
        },
        "Article.describe": {
            "name": "describe",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.asdict": {
            "name": "asdict",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Article.fromdict": {
            "name": "fromdict",
            "location": 118,
            "return": [
                "_TArticle@@Article@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArticle]"
                ],
                "raw": []
            }
        },
        "ScrapeTarget.is_scraped": {
            "name": "is_scraped",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeTarget.article": {
            "name": "article",
            "location": 149,
            "return": [
                "Article"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeTarget.asdict": {
            "name": "asdict",
            "location": 164,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapeTarget.fromdict": {
            "name": "fromdict",
            "location": 175,
            "return": [
                "_TScrapeTarget@@ScrapeTarget@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScrapeTarget]"
                ],
                "raw": []
            }
        },
        "ScrapedArticle.asdict": {
            "name": "asdict",
            "location": 194,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrapedArticle.fromdict": {
            "name": "fromdict",
            "location": 202,
            "return": [
                "_TScrapedArticle@@ScrapedArticle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScrapedArticle]"
                ],
                "raw": []
            }
        }
    },
    "news-scraper-master/app/util.py": {
        "wrap_error_message": {
            "name": "wrap_error_message",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "error": [],
                "id": []
            }
        },
        "date_to_str": {
            "name": "date_to_str",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "date": []
            }
        },
        "str_to_date": {
            "name": "str_to_date",
            "location": 35,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "date_str": []
            }
        }
    },
    "news-scraper-master/app/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scraper": [],
                "scorer": [],
                "mq_client": []
            }
        },
        "Worker.handle_scrape_target": {
            "name": "handle_scrape_target",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "channel": [],
                "mq_method": []
            }
        },
        "Worker._scrape_and_rank": {
            "name": "_scrape_and_rank",
            "location": 44,
            "return": [
                "app.models.ScrapedArticle"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        }
    },
    "news-scraper-master/app/__init__.py": {},
    "news-scraper-master/app/service/heartbeat.py": {
        "emit_heartbeats": {
            "name": "emit_heartbeats",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "checker": []
            }
        },
        "_run_heartbeats_in_background": {
            "name": "_run_heartbeats_in_background",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "config": [],
                "checker": []
            }
        }
    },
    "news-scraper-master/app/service/mq_clients.py": {
        "MessageHandler.handle_scrape_target": {
            "name": "handle_scrape_target",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "channel": [],
                "mq_method": []
            }
        },
        "MQClient.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "channel": []
            }
        },
        "MQClient.send": {
            "name": "send",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scraped_article": []
            }
        },
        "MQClient.ack": {
            "name": "ack",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "method": []
            }
        },
        "MQClient.reject": {
            "name": "reject",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "method": []
            }
        },
        "MQConsumer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "channel": [],
                "handler": []
            }
        },
        "MQConsumer.start": {
            "name": "start",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQConsumer._handle_message": {
            "name": "_handle_message",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "method": [],
                "properties": [],
                "body": []
            }
        },
        "MQConsumer._reject_message": {
            "name": "_reject_message",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "MQConnectionChecker.is_connected": {
            "name": "is_connected",
            "location": 99,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "health_target": []
            }
        },
        "MQConnectionFactory.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MQConnectionFactory.__del__": {
            "name": "__del__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQConnectionFactory.get_channel": {
            "name": "get_channel",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQConnectionFactory.is_connected": {
            "name": "is_connected",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "health_target": []
            }
        }
    },
    "news-scraper-master/app/service/scoring_service.py": {
        "flatten_lists": {
            "name": "flatten_lists",
            "location": 110,
            "return": [
                "list"
            ],
            "arguments": {
                "base_list": []
            }
        },
        "join_strings": {
            "name": "join_strings",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "words": []
            }
        },
        "ScoringService.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoringService.score": {
            "name": "score",
            "location": 29,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "self": [],
                "article": [],
                "subjects": [
                    "_T1@@"
                ]
            }
        },
        "ScoringService._calc_scores": {
            "name": "_calc_scores",
            "location": 41,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "article": [],
                "subjects": []
            }
        },
        "ScoringService._build_tfidf_matrix": {
            "name": "_build_tfidf_matrix",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "article": [],
                "subjects": []
            }
        },
        "CorpusReader.read": {
            "name": "read",
            "location": 75,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader.get_stopwords": {
            "name": "get_stopwords",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CorpusReader._parse_file": {
            "name": "_parse_file",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fileid": []
            }
        },
        "CorpusReader._get_brown_fileids": {
            "name": "_get_brown_fileids",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "news-scraper-master/app/service/scraping_service.py": {
        "ScrapingService.get_article": {
            "name": "get_article",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        }
    },
    "news-scraper-master/app/service/__init__.py": {},
    "news-scraper-master/tests/test_models.py": {
        "test_subject": {
            "name": "test_subject",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_article": {
            "name": "test_article",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_target": {
            "name": "test_scrape_target",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_scrape_target": {
            "name": "test_invalid_scrape_target",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scrape_target_to_article_conversion": {
            "name": "test_scrape_target_to_article_conversion",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scraped_article_serialization": {
            "name": "test_scraped_article_serialization",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_failing_scraped_article_serialization": {
            "name": "test_failing_scraped_article_serialization",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "news-scraper-master/tests/__init__.py": {},
    "news-scraper-master/tests/service/test_corpus_reader.py": {
        "test_get_corpus": {
            "name": "test_get_corpus",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_stopwords": {
            "name": "test_get_stopwords",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flatten_list": {
            "name": "test_flatten_list",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_strings": {
            "name": "test_join_strings",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "news-scraper-master/tests/service/test_scoring_service.py": {
        "test_scoring_service": {
            "name": "test_scoring_service",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_article_body": {
            "name": "read_article_body",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    }
}
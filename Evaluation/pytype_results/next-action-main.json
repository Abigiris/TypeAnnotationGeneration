{
    "next-action-main/.vulture-whitelist.py": {},
    "next-action-main/setup.py": {},
    "next-action-main/ci/sonarqube_token.py": {},
    "next-action-main/docs/update_readme.py": {
        "do_command": {
            "name": "do_command",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "line": []
            }
        },
        "create_toc": {
            "name": "create_toc",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "lines": [],
                "toc_header": [],
                "min_level": [],
                "max_level": []
            }
        },
        "update_readme": {
            "name": "update_readme",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StateMachine.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toc": [],
                "toc_header": []
            }
        },
        "StateMachine.default": {
            "name": "default",
            "location": 55,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StateMachine.in_console": {
            "name": "in_console",
            "location": 64,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StateMachine.start_toc": {
            "name": "start_toc",
            "location": 85,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StateMachine.print_toc": {
            "name": "print_toc",
            "location": 90,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StateMachine.write_lines": {
            "name": "write_lines",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        }
    },
    "next-action-main/next_action/pick_action.py": {
        "sort_key": {
            "name": "sort_key",
            "location": 11,
            "return": [
                "Tuple[(Any, Any, Any, int)]"
            ],
            "arguments": {
                "task": []
            }
        },
        "next_actions": {
            "name": "next_actions",
            "location": 17,
            "return": [
                "todotxt.tasks.Tasks"
            ],
            "arguments": {
                "tasks": [],
                "arguments": []
            }
        }
    },
    "next-action-main/next_action/__init__.py": {
        "next_action": {
            "name": "next_action",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "next-action-main/next_action/arguments/config.py": {
        "read_config_file": {
            "name": "read_config_file",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": [],
                "default_filename": [],
                "error": []
            }
        },
        "write_config_file": {
            "name": "write_config_file",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "validate_config_file": {
            "name": "validate_config_file",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "config_filename": [],
                "error": []
            }
        },
        "flatten_errors": {
            "name": "flatten_errors",
            "location": 116,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "error_message": [
                    "_T0@@"
                ]
            }
        },
        "flatten_errors.flatten_dict": {
            "name": "flatten_dict",
            "location": 118,
            "return": [],
            "arguments": {
                "error_dict": []
            }
        },
        "flatten_errors.flatten_list": {
            "name": "flatten_list",
            "location": 122,
            "return": [],
            "arguments": {
                "error_list": []
            }
        }
    },
    "next-action-main/next_action/arguments/parser.py": {
        "filter_type": {
            "name": "filter_type",
            "location": 248,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "date_type": {
            "name": "date_type",
            "location": 255,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "number_type": {
            "name": "number_type",
            "location": 269,
            "return": [
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "subset": {
            "name": "subset",
            "location": 280,
            "return": [
                "set"
            ],
            "arguments": {
                "filters": [],
                "prefix": []
            }
        },
        "NextActionArgumentParser.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "NextActionArgumentParser.add_optional_arguments": {
            "name": "add_optional_arguments",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "NextActionArgumentParser.add_configuration_options": {
            "name": "add_configuration_options",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextActionArgumentParser.add_input_options": {
            "name": "add_input_options",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextActionArgumentParser.add_output_options": {
            "name": "add_output_options",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextActionArgumentParser.add_number_options": {
            "name": "add_number_options",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextActionArgumentParser.add_filter_arguments": {
            "name": "add_filter_arguments",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextActionArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 141,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.parse_remaining_args": {
            "name": "parse_remaining_args",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.validate_arguments": {
            "name": "validate_arguments",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.process_config_file": {
            "name": "process_config_file",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.insert_config": {
            "name": "insert_config",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.insert_configured_filters": {
            "name": "insert_configured_filters",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "namespace": []
            }
        },
        "NextActionArgumentParser.arguments_not_specified": {
            "name": "arguments_not_specified",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "NextActionArgumentParser.fix_filenames": {
            "name": "fix_filenames",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "CapitalisedHelpFormatter.add_usage": {
            "name": "add_usage",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "usage": [],
                "actions": [],
                "groups": [],
                "prefix": []
            }
        }
    },
    "next-action-main/next_action/arguments/__init__.py": {
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 11,
            "return": [
                "Tuple[(next_action.arguments.parser.NextActionArgumentParser, argparse.Namespace)]"
            ],
            "arguments": {
                "version": []
            }
        }
    },
    "next-action-main/next_action/output/color.py": {
        "lexer": {
            "name": "lexer",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "formatter": {
            "name": "formatter",
            "location": 16,
            "return": [],
            "arguments": {
                "style": []
            }
        },
        "colorize": {
            "name": "colorize",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "todotxt": [],
                "namespace": []
            }
        }
    },
    "next-action-main/next_action/output/reference.py": {
        "reference": {
            "name": "reference",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "namespace": []
            }
        }
    },
    "next-action-main/next_action/output/url.py": {
        "open_urls": {
            "name": "open_urls",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tasks": []
            }
        }
    },
    "next-action-main/next_action/output/warning.py": {
        "invalid_arguments": {
            "name": "invalid_arguments",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "namespace": [],
                "tasks": []
            }
        }
    },
    "next-action-main/next_action/output/__init__.py": {
        "render_blocked_tasks": {
            "name": "render_blocked_tasks",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [],
                "namespace": [],
                "level": []
            }
        },
        "render_task": {
            "name": "render_task",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "namespace": [],
                "level": []
            }
        },
        "render_tasks": {
            "name": "render_tasks",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "tasks": [],
                "namespace": []
            }
        },
        "render_grouped_tasks": {
            "name": "render_grouped_tasks",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "tasks": [],
                "namespace": []
            }
        },
        "render_nothing_todo": {
            "name": "render_nothing_todo",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "tasks": [],
                "namespace": []
            }
        },
        "render_next_action": {
            "name": "render_next_action",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "next_actions": [],
                "tasks": [],
                "namespace": []
            }
        },
        "render_arguments": {
            "name": "render_arguments",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "argument_type": [],
                "tasks": []
            }
        }
    },
    "next-action-main/next_action/todotxt/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "todo_txt": [],
                "filename": [],
                "line_number": []
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_hidden": {
            "name": "is_hidden",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.contexts": {
            "name": "contexts",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.projects": {
            "name": "projects",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.priority": {
            "name": "priority",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.priority_at_least": {
            "name": "priority_at_least",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "min_priority": []
            }
        },
        "Task.creation_date": {
            "name": "creation_date",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.threshold_date": {
            "name": "threshold_date",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.due_date": {
            "name": "due_date",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.is_due": {
            "name": "is_due",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "due_date": []
            }
        },
        "Task.is_future": {
            "name": "is_future",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_overdue": {
            "name": "is_overdue",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.is_blocked": {
            "name": "is_blocked",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.set_is_blocked": {
            "name": "set_is_blocked",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.blocked_tasks": {
            "name": "blocked_tasks",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.add_blocked_task": {
            "name": "add_blocked_task",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "Task.child_ids": {
            "name": "child_ids",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.parent_ids": {
            "name": "parent_ids",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.task_id": {
            "name": "task_id",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.urls": {
            "name": "urls",
            "location": 129,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__prefixed_items": {
            "name": "__prefixed_items",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Task.__find_keyed_date": {
            "name": "__find_keyed_date",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Task.__create_date": {
            "name": "__create_date",
            "location": 143,
            "return": [],
            "arguments": {
                "match": []
            }
        }
    },
    "next-action-main/next_action/todotxt/tasks.py": {
        "Tasks.contexts": {
            "name": "contexts",
            "location": 13,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tasks.projects": {
            "name": "projects",
            "location": 17,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tasks.priorities": {
            "name": "priorities",
            "location": 21,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/next_action/todotxt/__init__.py": {
        "uncompleted_task_on": {
            "name": "uncompleted_task_on",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "line": []
            }
        },
        "unblocked_tasks": {
            "name": "unblocked_tasks",
            "location": 16,
            "return": [
                "list"
            ],
            "arguments": {
                "tasks": []
            }
        },
        "read_todotxt_files": {
            "name": "read_todotxt_files",
            "location": 33,
            "return": [
                "next_action.todotxt.tasks.Tasks"
            ],
            "arguments": {
                "filenames": []
            }
        }
    },
    "next-action-main/tests/create_random_todo_txt.py": {
        "random_bool": {
            "name": "random_bool",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "random_string": {
            "name": "random_string",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "context": {
            "name": "context",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "prio": {
            "name": "prio",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "due_date": {
            "name": "due_date",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "task_id": {
            "name": "task_id",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "index": []
            }
        },
        "create_random_todo_txt": {
            "name": "create_random_todo_txt",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "next-action-main/tests/__init__.py": {},
    "next-action-main/tests/features/environment.py": {
        "before_all": {
            "name": "before_all",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "before_scenario": {
            "name": "before_scenario",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "scenario": []
            }
        },
        "after_all": {
            "name": "after_all",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "before_all.run_next_action": {
            "name": "run_next_action",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "next-action-main/tests/features/steps/config.py": {
        "config_file": {
            "name": "config_file",
            "location": 10,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "temporary_filename": {
            "name": "temporary_filename",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "context": [],
                "filename": []
            }
        },
        "generate_config_file": {
            "name": "generate_config_file",
            "location": 40,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "non_existing_config_file": {
            "name": "non_existing_config_file",
            "location": 46,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "unreadable_config_file": {
            "name": "unreadable_config_file",
            "location": 52,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "empty_config_file": {
            "name": "empty_config_file",
            "location": 59,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "cli_argument": {
            "name": "cli_argument",
            "location": 66,
            "return": [],
            "arguments": {
                "context": [],
                "argument": [],
                "value": []
            }
        },
        "cli_option": {
            "name": "cli_option",
            "location": 72,
            "return": [],
            "arguments": {
                "context": [],
                "option": []
            }
        },
        "cli_filter_option": {
            "name": "cli_filter_option",
            "location": 78,
            "return": [],
            "arguments": {
                "context": [],
                "filter_type": []
            }
        },
        "check_default_config": {
            "name": "check_default_config",
            "location": 85,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_config_argument": {
            "name": "check_config_argument",
            "location": 96,
            "return": [],
            "arguments": {
                "context": [],
                "argument": [],
                "value": []
            }
        },
        "check_config_option": {
            "name": "check_config_option",
            "location": 102,
            "return": [],
            "arguments": {
                "context": [],
                "option": []
            }
        },
        "check_config_filter": {
            "name": "check_config_filter",
            "location": 108,
            "return": [],
            "arguments": {
                "context": [],
                "filter_type": []
            }
        },
        "non_existing_config_file_error": {
            "name": "non_existing_config_file_error",
            "location": 115,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "parse_config_file_error": {
            "name": "parse_config_file_error",
            "location": 121,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "invalid_config_file_error": {
            "name": "invalid_config_file_error",
            "location": 127,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "next-action-main/tests/features/steps/show_next_action.py": {
        "relative_date": {
            "name": "relative_date",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "days": []
            }
        },
        "today": {
            "name": "today",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "tomorrow": {
            "name": "tomorrow",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "yesterday": {
            "name": "yesterday",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "empty_todotxt": {
            "name": "empty_todotxt",
            "location": 34,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "unreadable_todotxt": {
            "name": "unreadable_todotxt",
            "location": 41,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "todotxt": {
            "name": "todotxt",
            "location": 48,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "named_todotxt": {
            "name": "named_todotxt",
            "location": 56,
            "return": [],
            "arguments": {
                "context": [],
                "filename": []
            }
        },
        "next_action": {
            "name": "next_action",
            "location": 64,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_from_file": {
            "name": "next_action_from_file",
            "location": 69,
            "return": [],
            "arguments": {
                "context": [],
                "filename": []
            }
        },
        "next_action_due": {
            "name": "next_action_due",
            "location": 76,
            "return": [],
            "arguments": {
                "context": [],
                "due_date": []
            }
        },
        "next_action_over_due": {
            "name": "next_action_over_due",
            "location": 82,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_with_min_prio": {
            "name": "next_action_with_min_prio",
            "location": 88,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_with_a_prio": {
            "name": "next_action_with_a_prio",
            "location": 94,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_with_invalid_prio": {
            "name": "next_action_with_invalid_prio",
            "location": 100,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_ungrouped": {
            "name": "next_action_ungrouped",
            "location": 106,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_groupby": {
            "name": "next_action_groupby",
            "location": 112,
            "return": [],
            "arguments": {
                "context": [],
                "groupby": []
            }
        },
        "next_action_with_blocked_tasks": {
            "name": "next_action_with_blocked_tasks",
            "location": 118,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_with_a_style": {
            "name": "next_action_with_a_style",
            "location": 124,
            "return": [],
            "arguments": {
                "context": [],
                "style": []
            }
        },
        "next_action_with_invalid_arg": {
            "name": "next_action_with_invalid_arg",
            "location": 130,
            "return": [],
            "arguments": {
                "context": [],
                "argument": []
            }
        },
        "next_action_ref_line_number": {
            "name": "next_action_ref_line_number",
            "location": 138,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_ref_always": {
            "name": "next_action_ref_always",
            "location": 144,
            "return": [],
            "arguments": {
                "context": [],
                "reference": []
            }
        },
        "next_action_at_context": {
            "name": "next_action_at_context",
            "location": 150,
            "return": [],
            "arguments": {
                "context": [],
                "contexts": []
            }
        },
        "next_action_invalid_argument": {
            "name": "next_action_invalid_argument",
            "location": 157,
            "return": [],
            "arguments": {
                "context": [],
                "argument_type": []
            }
        },
        "next_action_extra_tokens": {
            "name": "next_action_extra_tokens",
            "location": 168,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "next_action_c_or_p_in_and_ex": {
            "name": "next_action_c_or_p_in_and_ex",
            "location": 174,
            "return": [],
            "arguments": {
                "context": [],
                "context_or_project": []
            }
        },
        "next_action_not_at_context": {
            "name": "next_action_not_at_context",
            "location": 181,
            "return": [],
            "arguments": {
                "context": [],
                "contexts": []
            }
        },
        "next_action_for_project": {
            "name": "next_action_for_project",
            "location": 188,
            "return": [],
            "arguments": {
                "context": [],
                "projects": []
            }
        },
        "next_action_not_for_project": {
            "name": "next_action_not_for_project",
            "location": 195,
            "return": [],
            "arguments": {
                "context": [],
                "projects": []
            }
        },
        "ask_next_actions": {
            "name": "ask_next_actions",
            "location": 202,
            "return": [],
            "arguments": {
                "context": [],
                "number": []
            }
        },
        "ask_for_list_of_arguments": {
            "name": "ask_for_list_of_arguments",
            "location": 208,
            "return": [],
            "arguments": {
                "context": [],
                "argument_type": []
            }
        },
        "next_action_open_url": {
            "name": "next_action_open_url",
            "location": 216,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "nothing_todo": {
            "name": "nothing_todo",
            "location": 222,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_line_number": {
            "name": "check_line_number",
            "location": 228,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_reference": {
            "name": "check_reference",
            "location": 234,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_does_not_reference": {
            "name": "check_does_not_reference",
            "location": 240,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_named_next_action": {
            "name": "show_named_next_action",
            "location": 246,
            "return": [],
            "arguments": {
                "context": [],
                "action": []
            }
        },
        "show_next_action_at_contexts": {
            "name": "show_next_action_at_contexts",
            "location": 252,
            "return": [],
            "arguments": {
                "context": [],
                "contexts": []
            }
        },
        "show_next_not_at_contexts": {
            "name": "show_next_not_at_contexts",
            "location": 259,
            "return": [],
            "arguments": {
                "context": [],
                "contexts": []
            }
        },
        "show_next_action_for_projects": {
            "name": "show_next_action_for_projects",
            "location": 266,
            "return": [],
            "arguments": {
                "context": [],
                "projects": []
            }
        },
        "show_next_action_at_home": {
            "name": "show_next_action_at_home",
            "location": 273,
            "return": [],
            "arguments": {
                "context": [],
                "projects": []
            }
        },
        "show_blocked_task": {
            "name": "show_blocked_task",
            "location": 280,
            "return": [],
            "arguments": {
                "context": [],
                "task": []
            }
        },
        "show_next_action_due_tomorrow": {
            "name": "show_next_action_due_tomorrow",
            "location": 286,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_next_action_over_due": {
            "name": "show_next_action_over_due",
            "location": 292,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_next_action_with_min_prio": {
            "name": "show_next_action_with_min_prio",
            "location": 298,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_next_action_with_a_prio": {
            "name": "show_next_action_with_a_prio",
            "location": 305,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_next_actions": {
            "name": "show_next_actions",
            "location": 312,
            "return": [],
            "arguments": {
                "context": [],
                "number": [],
                "actions": []
            }
        },
        "invalid_number_error_message": {
            "name": "invalid_number_error_message",
            "location": 319,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "invalid_priority_error_message": {
            "name": "invalid_priority_error_message",
            "location": 325,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "show_next_action_with_style": {
            "name": "show_next_action_with_style",
            "location": 331,
            "return": [],
            "arguments": {
                "context": [],
                "style": []
            }
        },
        "show_next_actions_grouped_by": {
            "name": "show_next_actions_grouped_by",
            "location": 339,
            "return": [],
            "arguments": {
                "context": [],
                "groupby": []
            }
        },
        "show_list_of_arguments": {
            "name": "show_list_of_arguments",
            "location": 347,
            "return": [],
            "arguments": {
                "context": [],
                "argument_type": [],
                "arguments": []
            }
        },
        "unrecognized_arg_error_message": {
            "name": "unrecognized_arg_error_message",
            "location": 357,
            "return": [],
            "arguments": {
                "context": [],
                "argument": []
            }
        },
        "invalid_argument_error_message": {
            "name": "invalid_argument_error_message",
            "location": 363,
            "return": [],
            "arguments": {
                "context": [],
                "argument": []
            }
        },
        "c_or_p_in_and_ex_error_message": {
            "name": "c_or_p_in_and_ex_error_message",
            "location": 373,
            "return": [],
            "arguments": {
                "context": [],
                "context_or_project": []
            }
        },
        "unreadable_file_error_message": {
            "name": "unreadable_file_error_message",
            "location": 381,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "open_url": {
            "name": "open_url",
            "location": 387,
            "return": [],
            "arguments": {
                "context": [],
                "url": [],
                "task": []
            }
        }
    },
    "next-action-main/tests/features/steps/version.py": {
        "argument_version": {
            "name": "argument_version",
            "location": 10,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "argument_help": {
            "name": "argument_help",
            "location": 16,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_version_number": {
            "name": "check_version_number",
            "location": 22,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "next-action-main/tests/unittests/fixtures.py": {
        "TestCaseWithNamespace.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/test_cli.py": {
        "CLITest.test_empty_task_file": {
            "name": "test_empty_task_file",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_one_task": {
            "name": "test_one_task",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_context": {
            "name": "test_context",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_project": {
            "name": "test_project",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_missing_file": {
            "name": "test_missing_file",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": [],
                "mock_file_open": []
            }
        },
        "CLITest.test_help": {
            "name": "test_help",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_version": {
            "name": "test_version",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_number": {
            "name": "test_number",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_ignore_empty_lines": {
            "name": "test_ignore_empty_lines",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_show_all_actions": {
            "name": "test_show_all_actions",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_reading_stdin": {
            "name": "test_reading_stdin",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": [],
                "mock_stdin_readline": []
            }
        },
        "CLITest.test_reading_two_files": {
            "name": "test_reading_two_files",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_reference_filename": {
            "name": "test_reference_filename",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_unknown_context": {
            "name": "test_unknown_context",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_unknown_project": {
            "name": "test_unknown_project",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_list_contexts": {
            "name": "test_list_contexts",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_list_projects": {
            "name": "test_list_projects",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_list_excluded_contexts": {
            "name": "test_list_excluded_contexts",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_list_excluded_projects": {
            "name": "test_list_excluded_projects",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_list_priorities": {
            "name": "test_list_priorities",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": []
            }
        },
        "CLITest.test_one_task_with_url": {
            "name": "test_one_task_with_url",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stdout_write": [],
                "mock_webbrowser_open": []
            }
        }
    },
    "next-action-main/tests/unittests/test_pick_action.py": {
        "PickActionTest.test_no_tasks": {
            "name": "test_no_tasks",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_one_task": {
            "name": "test_one_task",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_multiple_tasks": {
            "name": "test_multiple_tasks",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_higher_prio_goes_first": {
            "name": "test_higher_prio_goes_first",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_creation_dates": {
            "name": "test_creation_dates",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_priority_and_creation_date": {
            "name": "test_priority_and_creation_date",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_due_dates": {
            "name": "test_due_dates",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_due_and_creation_dates": {
            "name": "test_due_and_creation_dates",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_project": {
            "name": "test_project",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickActionTest.test_projects": {
            "name": "test_projects",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_context": {
            "name": "test_context",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_contexts": {
            "name": "test_contexts",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_excluded_context": {
            "name": "test_excluded_context",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_excluded_contexts": {
            "name": "test_excluded_contexts",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_not_excluded_context": {
            "name": "test_not_excluded_context",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_project": {
            "name": "test_project",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_excluded_project": {
            "name": "test_excluded_project",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_excluded_projects": {
            "name": "test_excluded_projects",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_not_excluded_project": {
            "name": "test_not_excluded_project",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTasksTest.test_project_and_context": {
            "name": "test_project_and_context",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoredTasksTest.test_ignore_future_task": {
            "name": "test_ignore_future_task",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoredTasksTest.test_only_future_tasks": {
            "name": "test_only_future_tasks",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueAndOverdueTasks.setUp": {
            "name": "setUp",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueAndOverdueTasks.test_overdue_tasks": {
            "name": "test_overdue_tasks",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueAndOverdueTasks.test_due_tasks": {
            "name": "test_due_tasks",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueAndOverdueTasks.test_any_due_tasks": {
            "name": "test_any_due_tasks",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinimimPriorityTest.test_priority": {
            "name": "test_priority",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockedTasksTest.test_due_date_of_blocked_task": {
            "name": "test_due_date_of_blocked_task",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockedTasksTest.test_priority_of_blocked_task": {
            "name": "test_priority_of_blocked_task",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/__init__.py": {},
    "next-action-main/tests/unittests/arguments/test_config.py": {
        "ConfigTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.assert_parse_error": {
            "name": "assert_parse_error",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "error_message": [],
                "mock_stderr_write": []
            }
        },
        "ReadConfigFileTest.test_empty_file": {
            "name": "test_empty_file",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadConfigFileTest.test_missing_default_config": {
            "name": "test_missing_default_config",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "mock_file_open": []
            }
        },
        "ReadConfigFileTest.test_invalid_document": {
            "name": "test_invalid_document",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadConfigFileTest.test_no_file_key": {
            "name": "test_no_file_key",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadConfigFileTest.test_error_opening": {
            "name": "test_error_opening",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "mock_file_open": []
            }
        },
        "ReadConfigFileTest.test_error_parsing": {
            "name": "test_error_parsing",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "mock_file_open": []
            }
        },
        "ReadConfigFileTest.test_file_not_found": {
            "name": "test_file_not_found",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "mock_file_open": []
            }
        },
        "ReadConfigFileTest.test_skip_config": {
            "name": "test_skip_config",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "mock_file_open": []
            }
        },
        "WriteConfigFileTest.setUp": {
            "name": "setUp",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.assert_config": {
            "name": "assert_config",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "mock_stdout_write": []
            }
        },
        "WriteConfigFileTest.test_default_file": {
            "name": "test_default_file",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_with_args": {
            "name": "test_with_args",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_multiple_files": {
            "name": "test_multiple_files",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_show_all": {
            "name": "test_show_all",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_priority": {
            "name": "test_priority",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_blocked": {
            "name": "test_blocked",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_line_number": {
            "name": "test_line_number",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_groupby": {
            "name": "test_groupby",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_read_config": {
            "name": "test_read_config",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WriteConfigFileTest.test_ignore_config": {
            "name": "test_ignore_config",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_invalid_filename": {
            "name": "test_invalid_filename",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_valid_and_invalid": {
            "name": "test_valid_and_invalid",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_valid_file": {
            "name": "test_valid_file",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_valid_files": {
            "name": "test_valid_files",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_cli_takes_precedence": {
            "name": "test_cli_takes_precedence",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_invalid_number": {
            "name": "test_invalid_number",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_zero": {
            "name": "test_zero",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_valid_number": {
            "name": "test_valid_number",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_cli_takes_precedence": {
            "name": "test_cli_takes_precedence",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_all_true": {
            "name": "test_all_true",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_all_false": {
            "name": "test_all_false",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_all_and_number": {
            "name": "test_all_and_number",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_argument_nr_overrides": {
            "name": "test_argument_nr_overrides",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_argument_all_overrides": {
            "name": "test_argument_all_overrides",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigStyleTest.test_valid_style": {
            "name": "test_valid_style",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigStyleTest.test_override_style": {
            "name": "test_override_style",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigStyleTest.test_cancel_style": {
            "name": "test_cancel_style",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigStyleTest.test_invalid_style": {
            "name": "test_invalid_style",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityTest.test_valid_priority": {
            "name": "test_valid_priority",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityTest.test_override_priority": {
            "name": "test_override_priority",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityTest.test_override_short": {
            "name": "test_override_short",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityTest.test_cancel_priority": {
            "name": "test_cancel_priority",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PriorityTest.test_invalid_priority": {
            "name": "test_invalid_priority",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LineNumberTest.test_valid_line_number": {
            "name": "test_valid_line_number",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LineNumberTest.test_override": {
            "name": "test_override",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LineNumberTest.test_invalid_line_number": {
            "name": "test_invalid_line_number",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_valid_reference": {
            "name": "test_valid_reference",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_override": {
            "name": "test_override",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_invalid_reference": {
            "name": "test_invalid_reference",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_valid_group": {
            "name": "test_valid_group",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_override": {
            "name": "test_override",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_invalid_group": {
            "name": "test_invalid_group",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_project": {
            "name": "test_project",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_projects": {
            "name": "test_projects",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_context": {
            "name": "test_context",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_contexts": {
            "name": "test_contexts",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_context_list": {
            "name": "test_context_list",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_excluded_project": {
            "name": "test_excluded_project",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_excluded_context": {
            "name": "test_excluded_context",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_same_project": {
            "name": "test_same_project",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_inverse_project": {
            "name": "test_inverse_project",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_ignore_project_not_context": {
            "name": "test_ignore_project_not_context",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_invalid_filter_list": {
            "name": "test_invalid_filter_list",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FiltersTest.test_invalid_filter_string": {
            "name": "test_invalid_filter_string",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockedTest.test_blocked": {
            "name": "test_blocked",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockedTest.test_override": {
            "name": "test_override",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockedTest.test_invalid_blocked_value": {
            "name": "test_invalid_blocked_value",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpenUrlsTest.test_open_urls": {
            "name": "test_open_urls",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpenUrlsTest.test_override": {
            "name": "test_override",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpenUrlsTest.test_invalid_open_urls_value": {
            "name": "test_invalid_open_urls_value",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/arguments/test_parser.py": {
        "ParserTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.assert_system_exit": {
            "name": "assert_system_exit",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stderr_write": [],
                "error_message": []
            }
        },
        "NoArgumentTest.test_filters": {
            "name": "test_filters",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoArgumentTest.test_filename": {
            "name": "test_filename",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoArgumentTest.test_style": {
            "name": "test_style",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_filename_argument": {
            "name": "test_filename_argument",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_home_folder_argument": {
            "name": "test_home_folder_argument",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_long_filename_argument": {
            "name": "test_long_filename_argument",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_add_default_filename": {
            "name": "test_add_default_filename",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_default_and_non_default": {
            "name": "test_default_and_non_default",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilenameTest.test_add_filename_twice": {
            "name": "test_add_filename_twice",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_one_context": {
            "name": "test_one_context",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_multiple_contexts": {
            "name": "test_multiple_contexts",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_empty_context": {
            "name": "test_empty_context",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_exclude_context": {
            "name": "test_exclude_context",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_include_exclude_context": {
            "name": "test_include_exclude_context",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_invalid_extra_argument": {
            "name": "test_invalid_extra_argument",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_one_project": {
            "name": "test_one_project",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_multiple_projects": {
            "name": "test_multiple_projects",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_empty_project": {
            "name": "test_empty_project",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_exclude_project": {
            "name": "test_exclude_project",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_include_exclude_project": {
            "name": "test_include_exclude_project",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_empty_excluded_project": {
            "name": "test_empty_excluded_project",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "FilterArgumentTest.test_contexts_and_projects": {
            "name": "test_contexts_and_projects",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_project_after_excluded": {
            "name": "test_project_after_excluded",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FilterArgumentTest.test_faulty_option": {
            "name": "test_faulty_option",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "NumberTest.test_default_number": {
            "name": "test_default_number",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_number": {
            "name": "test_number",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_faulty_number": {
            "name": "test_faulty_number",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "NumberTest.test_negative_number": {
            "name": "test_negative_number",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "NumberTest.test_all_actions": {
            "name": "test_all_actions",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberTest.test_all_and_number": {
            "name": "test_all_and_number",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "DueDateTest.test_default": {
            "name": "test_default",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_no_due_date": {
            "name": "test_no_due_date",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_due_date": {
            "name": "test_due_date",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_relative_due_date": {
            "name": "test_relative_due_date",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_faulty_date": {
            "name": "test_faulty_date",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "DueDateTest.test_invalid_date": {
            "name": "test_invalid_date",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "DueDateTest.test_too_long": {
            "name": "test_too_long",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "DueDateTest.test_extra_tokens": {
            "name": "test_extra_tokens",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        },
        "ReferenceTest.test_default": {
            "name": "test_default",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_multiple": {
            "name": "test_multiple",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_always": {
            "name": "test_always",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_never": {
            "name": "test_never",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_faulty_date": {
            "name": "test_faulty_date",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "mock_stderr_write": []
            }
        }
    },
    "next-action-main/tests/unittests/arguments/__init__.py": {},
    "next-action-main/tests/unittests/output/test_color.py": {
        "ColorizeTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorizeTest.test_no_style": {
            "name": "test_no_style",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorizeTest.test_default_style": {
            "name": "test_default_style",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColorizeTest.test_strip_added_linebreak": {
            "name": "test_strip_added_linebreak",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/output/test_reference.py": {
        "ReferenceTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_line_number": {
            "name": "test_line_number",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_line_number_and_filename": {
            "name": "test_line_number_and_filename",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_always": {
            "name": "test_always",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_never": {
            "name": "test_never",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceTest.test_multiple": {
            "name": "test_multiple",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/output/test_render.py": {
        "RenderNextActionTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_line_number": {
            "name": "test_line_number",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_reference_always": {
            "name": "test_reference_always",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_reference_multiple": {
            "name": "test_reference_multiple",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_reference_never": {
            "name": "test_reference_never",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_line_number_and_filename": {
            "name": "test_line_number_and_filename",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_groupby_context": {
            "name": "test_groupby_context",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_groupby_project": {
            "name": "test_groupby_project",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_groupby_priority": {
            "name": "test_groupby_priority",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_groupby_due_date": {
            "name": "test_groupby_due_date",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderNextActionTest.test_groupby_source": {
            "name": "test_groupby_source",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderBlockedNextActionTest.setUp": {
            "name": "setUp",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderBlockedNextActionTest.test_blocked": {
            "name": "test_blocked",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderBlockedNextActionTest.test_blocked_multiple": {
            "name": "test_blocked_multiple",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderBlockedNextActionTest.test_blocked_recursive": {
            "name": "test_blocked_recursive",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderArgumentsTest.test_arguments": {
            "name": "test_arguments",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderArgumentsTest.test_groupby": {
            "name": "test_groupby",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "RenderArgumentsTest.test_reference": {
            "name": "test_reference",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "RenderArgumentsTest.test_style": {
            "name": "test_style",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "RenderArgumentsTest.test_priority_no_prios": {
            "name": "test_priority_no_prios",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "RenderArgumentsTest.test_priority": {
            "name": "test_priority",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        }
    },
    "next-action-main/tests/unittests/output/test_url.py": {
        "TestOpenUrls.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenUrls.test_url": {
            "name": "test_url",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": []
            }
        },
        "TestOpenUrls.test_multiple_urls": {
            "name": "test_multiple_urls",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": []
            }
        },
        "TestOpenUrls.test_multiple_urls_in_one_task": {
            "name": "test_multiple_urls_in_one_task",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_open": []
            }
        }
    },
    "next-action-main/tests/unittests/output/test_warning.py": {
        "InvalidArgumentsTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_no_args_and_no_tasks": {
            "name": "test_no_args_and_no_tasks",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_context": {
            "name": "test_missing_context",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_contexts": {
            "name": "test_missing_contexts",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_project": {
            "name": "test_missing_project",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_projects": {
            "name": "test_missing_projects",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_excluded_context": {
            "name": "test_missing_excluded_context",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_excluded_project": {
            "name": "test_missing_excluded_project",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_missing_context_project": {
            "name": "test_missing_context_project",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidArgumentsTest.test_present_context": {
            "name": "test_present_context",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/output/__init__.py": {},
    "next-action-main/tests/unittests/todotxt/test_read_todotxt_files.py": {
        "ReadTodoTxtFilesTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_skip_completed_tasks": {
            "name": "test_skip_completed_tasks",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_skip_empty_lines": {
            "name": "test_skip_empty_lines",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_skip_blocked_before": {
            "name": "test_skip_blocked_before",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_skip_blocked_after": {
            "name": "test_skip_blocked_after",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_missing_before_task": {
            "name": "test_missing_before_task",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadTodoTxtFilesTest.test_missing_after_task": {
            "name": "test_missing_after_task",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/todotxt/test_task.py": {
        "TodoTest.test_task_text": {
            "name": "test_task_text",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoTest.test_task_repr": {
            "name": "test_task_repr",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_no_context": {
            "name": "test_no_context",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_one_context": {
            "name": "test_one_context",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_two_contexts": {
            "name": "test_two_contexts",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_no_space_before_at_sign": {
            "name": "test_no_space_before_at_sign",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_at_start_of_line": {
            "name": "test_at_start_of_line",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoContextTest.test_brackets": {
            "name": "test_brackets",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "brackets": []
            }
        },
        "TaskProjectTest.test_no_projects": {
            "name": "test_no_projects",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskProjectTest.test_one_project": {
            "name": "test_one_project",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskProjectTest.test_two_projects": {
            "name": "test_two_projects",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskProjectTest.test_no_space_before_at_sign": {
            "name": "test_no_space_before_at_sign",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskProjectTest.test_at_start_of_line": {
            "name": "test_at_start_of_line",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskProjectTest.test_brackets": {
            "name": "test_brackets",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "brackets": []
            }
        },
        "TaskPriorityTest.test_no_priority": {
            "name": "test_no_priority",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskPriorityTest.test_priorities": {
            "name": "test_priorities",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskPriorityTest.test_faulty_priorities": {
            "name": "test_faulty_priorities",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskPriorityTest.test_priority_at_least": {
            "name": "test_priority_at_least",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskPriorityTest.test_blocking": {
            "name": "test_blocking",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskPriorityTest.test_blocking_multiple": {
            "name": "test_blocking_multiple",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_no_creation_date": {
            "name": "test_no_creation_date",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_creation_date": {
            "name": "test_creation_date",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_creation_date_after_priority": {
            "name": "test_creation_date_after_priority",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_invalid_creation_date": {
            "name": "test_invalid_creation_date",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_no_space_after": {
            "name": "test_no_space_after",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_single_digits": {
            "name": "test_single_digits",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreationDateTest.test_is_future_task": {
            "name": "test_is_future_task",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThresholdDateTest.test_no_threshold": {
            "name": "test_no_threshold",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThresholdDateTest.test_past_threshold": {
            "name": "test_past_threshold",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThresholdDateTest.test_future_threshold": {
            "name": "test_future_threshold",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThresholdDateTest.test_threshold_today": {
            "name": "test_threshold_today",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_no_due_date": {
            "name": "test_no_due_date",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_past_due_date": {
            "name": "test_past_due_date",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_future_due_date": {
            "name": "test_future_due_date",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_due_today": {
            "name": "test_due_today",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_invalid_date": {
            "name": "test_invalid_date",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_no_space_after": {
            "name": "test_no_space_after",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_single_digits": {
            "name": "test_single_digits",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "due_date": []
            }
        },
        "DueDateTest.test_is_due": {
            "name": "test_is_due",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_blocking": {
            "name": "test_blocking",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DueDateTest.test_blocking_multiple": {
            "name": "test_blocking_multiple",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.setUp": {
            "name": "setUp",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.test_unblocked_task": {
            "name": "test_unblocked_task",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.test_set_blocked": {
            "name": "test_set_blocked",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.test_blocked_tasks": {
            "name": "test_blocked_tasks",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.test_block_self": {
            "name": "test_block_self",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenciesTest.test_block_self_indirectly": {
            "name": "test_block_self_indirectly",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskHiddenessTest.test_visible_task": {
            "name": "test_visible_task",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskHiddenessTest.test_hidden_task": {
            "name": "test_hidden_task",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskURLsTest.test_no_urls": {
            "name": "test_no_urls",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskURLsTest.test_one_url": {
            "name": "test_one_url",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskURLsTest.test_multiple_urls": {
            "name": "test_multiple_urls",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskURLsTest.test_weird_urls": {
            "name": "test_weird_urls",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/todotxt/test_tasks.py": {
        "ContextsTest.test_no_tasks": {
            "name": "test_no_tasks",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextsTest.test_task_without_context": {
            "name": "test_task_without_context",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextsTest.test_task_with_context": {
            "name": "test_task_with_context",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextsTest.test_task_with_contexts": {
            "name": "test_task_with_contexts",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextsTest.test_tasks_with_contexts": {
            "name": "test_tasks_with_contexts",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsTest.test_no_tasks": {
            "name": "test_no_tasks",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsTest.test_task_without_project": {
            "name": "test_task_without_project",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsTest.test_task_with_project": {
            "name": "test_task_with_project",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsTest.test_task_with_projects": {
            "name": "test_task_with_projects",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsTest.test_tasks_with_projects": {
            "name": "test_tasks_with_projects",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritiesTest.test_no_tasks": {
            "name": "test_no_tasks",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritiesTest.test_task_without_priority": {
            "name": "test_task_without_priority",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritiesTest.test_task_with_priority": {
            "name": "test_task_with_priority",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritiesTest.test_tasks_with_priorities": {
            "name": "test_tasks_with_priorities",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "next-action-main/tests/unittests/todotxt/__init__.py": {}
}
{
    "nlp-toolkit-master/setup.py": {},
    "nlp-toolkit-master/nlp_toolkit/__init__.py": {},
    "nlp-toolkit-master/nlp_toolkit/tools/farasa.py": {
        "Farasa.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "singelton": []
            }
        },
        "Farasa.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "singelton": []
            }
        },
        "Farasa.tag_pos": {
            "name": "tag_pos",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Farasa.merge_iffix": {
            "name": "merge_iffix",
            "location": 107,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "_T0@@"
                ]
            }
        },
        "Farasa.filter_pos": {
            "name": "filter_pos",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "parts_of_speech_to_keep": []
            }
        },
        "Farasa.lemmetize": {
            "name": "lemmetize",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Farasa.segment": {
            "name": "segment",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Farasa._get_named_entities": {
            "name": "_get_named_entities",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "lemmatize": []
            }
        },
        "Farasa.get_named_entities": {
            "name": "get_named_entities",
            "location": 216,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "lemmatize": []
            }
        },
        "Farasa.diacritize": {
            "name": "diacritize",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "keep_original_diacritics": []
            }
        },
        "Farasa.__launch_java_gateway": {
            "name": "__launch_java_gateway",
            "location": 239,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/similarity.py": {
        "WMDSimilarityClustering.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stop_words": [],
                "word_embeddings": []
            }
        },
        "WMDSimilarityClustering.preprocess_document": {
            "name": "preprocess_document",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "WMDSimilarityClustering.preprocess_documents": {
            "name": "preprocess_documents",
            "location": 52,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "documents": []
            }
        },
        "WMDSimilarityClustering.tokenize": {
            "name": "tokenize",
            "location": 70,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "WMDSimilarityClustering.fit": {
            "name": "fit",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [],
                "preprocess": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/summarization.py": {
        "summarize": {
            "name": "summarize",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": [],
                "ratio": []
            }
        },
        "extract_keywords": {
            "name": "extract_keywords",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": [],
                "pos_filter": [],
                "top_n": []
            }
        },
        "extract_entities": {
            "name": "extract_entities",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/topic_model.py": {
        "load_topic_model": {
            "name": "load_topic_model",
            "location": 29,
            "return": [],
            "arguments": {
                "model_id": []
            }
        },
        "infer_topic": {
            "name": "infer_topic",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "model_id": [],
                "document": []
            }
        },
        "TopicModel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos_to_use": [],
                "stop_words": [],
                "min_df": [],
                "max_df": [],
                "num_workers": []
            }
        },
        "TopicModel._init_pool": {
            "name": "_init_pool",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TopicModel.preprocess_document": {
            "name": "preprocess_document",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "TopicModel._unit_of_work": {
            "name": "_unit_of_work",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pos_to_use": [],
                "document": []
            }
        },
        "TopicModel.preprocess_documents": {
            "name": "preprocess_documents",
            "location": 143,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "documents": []
            }
        },
        "TopicModel.tokenize": {
            "name": "tokenize",
            "location": 173,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "TopicModel.create_trigrams": {
            "name": "create_trigrams",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "TopicModel.build_vocab": {
            "name": "build_vocab",
            "location": 196,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "self": [],
                "documents_tokens": []
            }
        },
        "TopicModel.fit": {
            "name": "fit",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [],
                "preprocess": [],
                "passes": [],
                "random_state": [],
                "num_topics": [],
                "chunksize": []
            }
        },
        "TopicModel.predict": {
            "name": "predict",
            "location": 268,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "document": [],
                "topics_map": [],
                "num_topics": []
            }
        },
        "TopicModel.load": {
            "name": "load",
            "location": 301,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": []
            }
        },
        "TopicModel.save": {
            "name": "save",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/utils.py": {
        "remove_extra_spaces": {
            "name": "remove_extra_spaces",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "_preprocess_arabic_text": {
            "name": "_preprocess_arabic_text",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [],
                "remove_non_arabic": [],
                "remove_punctuation": [],
                "remove_numbers": [],
                "remove_emails_urls_html": [],
                "remove_hashtags_mentions": []
            }
        },
        "preprorcess_arabic_text": {
            "name": "preprorcess_arabic_text",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "setup_logger": {
            "name": "setup_logger",
            "location": 145,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [],
                "level": []
            }
        },
        "load_stop_words": {
            "name": "load_stop_words",
            "location": 171,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "preprorcess_arabic_text.wrapper": {
            "name": "wrapper",
            "location": 131,
            "return": [],
            "arguments": {
                "wrapped": [],
                "instance": [],
                "args": [],
                "kwargs": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/word_embedding.py": {
        "WordEmbedding.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WordEmbedding.get_word_vector": {
            "name": "get_word_vector",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "WordEmbedding.create_ngrams": {
            "name": "create_ngrams",
            "location": 29,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "tokens": [],
                "nrange": []
            }
        },
        "WordEmbedding.create_valid_trigrams": {
            "name": "create_valid_trigrams",
            "location": 40,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordEmbedding.encode_document": {
            "name": "encode_document",
            "location": 62,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordEmbedding.get_distance": {
            "name": "get_distance",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "document1": [],
                "document2": []
            }
        }
    },
    "nlp-toolkit-master/nlp_toolkit/tools/__init__.py": {}
}
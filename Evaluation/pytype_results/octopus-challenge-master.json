{
    "octopus-challenge-master/run_app.py": {},
    "octopus-challenge-master/run_celery.py": {},
    "octopus-challenge-master/backend/app.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_app": {
            "name": "make_app",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "run_app": {
            "name": "run_app",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "octopus-challenge-master/backend/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.export": {
            "name": "export",
            "location": 46,
            "return": [
                "Dict[(str, Union[(bytes, int, str)])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "octopus-challenge-master/backend/crypto.py": {
        "Encryptor.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "salt": []
            }
        },
        "Encryptor.generate_keys": {
            "name": "generate_keys",
            "location": 31,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "private_key_b": []
            }
        },
        "Encryptor.encrypt": {
            "name": "encrypt",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Encryptor.decrypt": {
            "name": "decrypt",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Encryptor.salted_hash": {
            "name": "salted_hash",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "octopus-challenge-master/backend/handlers.py": {
        "MainHandler.get": {
            "name": "get",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisHandler.get": {
            "name": "get",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "AnalysisHandler.post": {
            "name": "post",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokensHandler.get": {
            "name": "get",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "octopus-challenge-master/backend/helpers.py": {
        "parse_pagination": {
            "name": "parse_pagination",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "arg": []
            }
        },
        "retry": {
            "name": "retry",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "operation": [],
                "errors": [],
                "times": []
            }
        }
    },
    "octopus-challenge-master/backend/jobs.py": {
        "frequency_analysis": {
            "name": "frequency_analysis",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "store_in_db": {
            "name": "store_in_db",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "counts": []
            }
        },
        "sentiment_analysis": {
            "name": "sentiment_analysis",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "octopus-challenge-master/backend/models.py": {
        "URL.get_by_hash": {
            "name": "get_by_hash",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "enc": []
            }
        },
        "URL.new": {
            "name": "new",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "enc": []
            }
        },
        "Token.batch_update": {
            "name": "batch_update",
            "location": 66,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "counts": [],
                "enc": []
            }
        },
        "Token.update_count": {
            "name": "update_count",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "count": [],
                "enc": []
            }
        },
        "Token.get_page": {
            "name": "get_page",
            "location": 100,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "cls": [],
                "page": [],
                "size": [],
                "enc": []
            }
        },
        "Token.decrypt": {
            "name": "decrypt",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "enc": []
            }
        }
    },
    "octopus-challenge-master/backend/nlp.py": {
        "is_word": {
            "name": "is_word",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": []
            }
        },
        "tokenize_text": {
            "name": "tokenize_text",
            "location": 33,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "text": []
            }
        },
        "get_frequent_tokens": {
            "name": "get_frequent_tokens",
            "location": 49,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "text": [],
                "top_n": []
            }
        }
    },
    "octopus-challenge-master/backend/schemas.py": {},
    "octopus-challenge-master/backend/scraping.py": {
        "fetch_page_text": {
            "name": "fetch_page_text",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "url": []
            }
        }
    },
    "octopus-challenge-master/backend/__init__.py": {},
    "octopus-challenge-master/tests/test_config.py": {
        "test_init_config": {
            "name": "test_init_config",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_export": {
            "name": "test_export",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "octopus-challenge-master/tests/test_crypto.py": {
        "TestEncryptor.test_init": {
            "name": "test_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncryptor.test_generate_keys": {
            "name": "test_generate_keys",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncryptor.test_encrypt_and_decrypt": {
            "name": "test_encrypt_and_decrypt",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncryptor.test_salted_hash": {
            "name": "test_salted_hash",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "octopus-challenge-master/tests/test_handlers.py": {
        "TestMainHandler.get_app": {
            "name": "get_app",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMainHandler.test_get_ok": {
            "name": "test_get_ok",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysisHandler.get_app": {
            "name": "get_app",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysisHandler.test_get_missing_task_id": {
            "name": "test_get_missing_task_id",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysisHandler.test_get_task_not_ready": {
            "name": "test_get_task_not_ready",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "celery_mock": []
            }
        },
        "TestAnalysisHandler.test_get_task_ready": {
            "name": "test_get_task_ready",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "celery_mock": []
            }
        },
        "TestAnalysisHandler.test_get_task_failure": {
            "name": "test_get_task_failure",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "celery_mock": []
            }
        },
        "TestAnalysisHandler.test_post_task_malformed_payload": {
            "name": "test_post_task_malformed_payload",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysisHandler.test_post_task": {
            "name": "test_post_task",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "celery_mock": [],
                "freq_analysis_mock": []
            }
        },
        "TestTokensHandler.get_app": {
            "name": "get_app",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokensHandler.test_get_": {
            "name": "test_get_",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_token": []
            }
        }
    },
    "octopus-challenge-master/tests/test_helpers.py": {
        "test_parse_pagination": {
            "name": "test_parse_pagination",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRetry.test_returns_result": {
            "name": "test_returns_result",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_time": []
            }
        },
        "TestRetry.test_raises_error": {
            "name": "test_raises_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_time": []
            }
        }
    },
    "octopus-challenge-master/tests/test_jobs.py": {
        "test_frequency_analysis": {
            "name": "test_frequency_analysis",
            "location": 9,
            "return": [],
            "arguments": {
                "mock_store_in_db": [],
                "mock_fetch_page": []
            }
        },
        "TestStoreInDB.setup_class": {
            "name": "setup_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestStoreInDB.test_store_in_db_existing": {
            "name": "test_store_in_db_existing",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TokenMock": [],
                "URLMock": []
            }
        },
        "TestStoreInDB.test_store_in_db_new": {
            "name": "test_store_in_db_new",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "TokenMock": [],
                "URLMock": []
            }
        },
        "TestStoreInDB.teardown_class": {
            "name": "teardown_class",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "octopus-challenge-master/tests/test_models.py": {
        "TestURL.setup_class": {
            "name": "setup_class",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestURL.teardown_class": {
            "name": "teardown_class",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestURL.test_get_by_hash_nonexistent": {
            "name": "test_get_by_hash_nonexistent",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURL.test_get_by_hash": {
            "name": "test_get_by_hash",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURL.test_new": {
            "name": "test_new",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.setup_class": {
            "name": "setup_class",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestToken.teardown_class": {
            "name": "teardown_class",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestToken.test_update_new_token": {
            "name": "test_update_new_token",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_updating_existing_token": {
            "name": "test_updating_existing_token",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_batch_update": {
            "name": "test_batch_update",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_get_page": {
            "name": "test_get_page",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToken.test_decrypt": {
            "name": "test_decrypt",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "octopus-challenge-master/tests/test_nlp.py": {
        "TestIsWord.test_is_word": {
            "name": "test_is_word",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsWord.test_is_not_word": {
            "name": "test_is_not_word",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizeText.test_tokenize_text": {
            "name": "test_tokenize_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFrequenTokens.test_get_frequent_tokens": {
            "name": "test_get_frequent_tokens",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFrequenTokens.test_ntop": {
            "name": "test_ntop",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "octopus-challenge-master/tests/test_scraping.py": {
        "test_fetch_page_text": {
            "name": "test_fetch_page_text",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_fetch_page_remove_script": {
            "name": "test_fetch_page_remove_script",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_fetch_retriable": {
            "name": "test_fetch_retriable",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_http_error": {
            "name": "test_http_error",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "octopus-challenge-master/tests/__init__.py": {}
}
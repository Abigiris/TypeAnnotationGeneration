{
    "oozie-to-airflow-master/setup.py": {},
    "oozie-to-airflow-master/o2a/definitions.py": {},
    "oozie-to-airflow-master/o2a/o2a.py": {
        "get_o2a_validate_workflows_script": {
            "name": "get_o2a_validate_workflows_script",
            "location": 44,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 132,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/__init__.py": {},
    "oozie-to-airflow-master/o2a/converter/constants.py": {},
    "oozie-to-airflow-master/o2a/converter/exceptions.py": {},
    "oozie-to-airflow-master/o2a/converter/mappers.py": {},
    "oozie-to-airflow-master/o2a/converter/oozie_converter.py": {
        "OozieConverter.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dag_name": [
                    "str"
                ],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ],
                "action_mapper": [
                    "Dict[(str, Type[o2a.mappers.action_mapper.ActionMapper])]"
                ],
                "renderer": [
                    "o2a.converter.renderers.BaseRenderer"
                ],
                "transformers": [
                    "List[o2a.transformers.base_transformer.BaseWorkflowTransformer]"
                ],
                "user": [
                    "str"
                ],
                "initial_props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "OozieConverter.retrieve_lib_jar_libraries": {
            "name": "retrieve_lib_jar_libraries",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.recreate_output_directory": {
            "name": "recreate_output_directory",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.convert": {
            "name": "convert",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_subworkflow": []
            }
        },
        "OozieConverter.convert_nodes": {
            "name": "convert_nodes",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter._get_task_group_type": {
            "name": "_get_task_group_type",
            "location": 142,
            "return": [
                "Type[o2a.converter.task_group.TaskGroup]"
            ],
            "arguments": {
                "oozie_node": [
                    "o2a.converter.oozie_node.OozieNode"
                ]
            }
        },
        "OozieConverter.convert_dependencies": {
            "name": "convert_dependencies",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.convert_relations": {
            "name": "convert_relations",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.add_state_handlers": {
            "name": "add_state_handlers",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.copy_extra_assets": {
            "name": "copy_extra_assets",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Dict[(str, o2a.converter.oozie_node.OozieNode)]"
                ]
            }
        },
        "OozieConverter.apply_preconvert_transformers": {
            "name": "apply_preconvert_transformers",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieConverter.apply_postconvert_transformers": {
            "name": "apply_postconvert_transformers",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/oozie_node.py": {
        "OozieNode.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "o2a.mappers.base_mapper.BaseMapper"
                ],
                "tasks": [],
                "relations": []
            }
        },
        "OozieNode.name": {
            "name": "name",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OozieNode.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieNode.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OozieActionNode.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OozieControlNode.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/property_parser.py": {
        "PropertyParser.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PropertyParser.parse_property": {
            "name": "parse_property",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyParser.read_config_replace_el": {
            "name": "read_config_replace_el",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyParser.read_and_update_job_properties_replace_el": {
            "name": "read_and_update_job_properties_replace_el",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/relation.py": {},
    "oozie-to-airflow-master/o2a/converter/renderers.py": {
        "BaseRenderer.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_directory_path": [],
                "schedule_interval": [],
                "start_days_ago": []
            }
        },
        "BaseRenderer.create_workflow_file": {
            "name": "create_workflow_file",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "BaseRenderer.create_subworkflow_file": {
            "name": "create_subworkflow_file",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PythonRenderer.create_workflow_file": {
            "name": "create_workflow_file",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PythonRenderer.create_subworkflow_file": {
            "name": "create_subworkflow_file",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PythonRenderer._create_file": {
            "name": "_create_file",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file_name": [],
                "template_name": [
                    "str"
                ],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PythonRenderer._render_content": {
            "name": "_render_content",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template_name": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PythonRenderer._remove_unused_imports": {
            "name": "_remove_unused_imports",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_name": []
            }
        },
        "PythonRenderer._format_with_black": {
            "name": "_format_with_black",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_name": []
            }
        },
        "PythonRenderer._sort_imports": {
            "name": "_sort_imports",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_name": []
            }
        },
        "DotRenderer.create_workflow_file": {
            "name": "create_workflow_file",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "DotRenderer.create_subworkflow_file": {
            "name": "create_subworkflow_file",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "DotRenderer._create_file": {
            "name": "_create_file",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_file_name": [],
                "template_name": [
                    "str"
                ],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "DotRenderer._render_content": {
            "name": "_render_content",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {
                "template_name": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ],
                "template_name": [
                    "str"
                ],
                "trigger_rule": [
                    "str"
                ],
                "template_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Task.rendered_template": {
            "name": "rendered_template",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/task_group.py": {
        "TaskGroup.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tasks": [],
                "relations": [],
                "downstream_names": [],
                "error_downstream_name": [],
                "dependencies": []
            }
        },
        "TaskGroup.first_task_id": {
            "name": "first_task_id",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.last_task_id_of_ok_flow": {
            "name": "last_task_id_of_ok_flow",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.last_task_id_of_error_flow": {
            "name": "last_task_id_of_error_flow",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.add_state_handler_if_needed": {
            "name": "add_state_handler_if_needed",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.all_tasks": {
            "name": "all_tasks",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskGroup.__eq__": {
            "name": "__eq__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/workflow.py": {
        "Workflow.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "task_group_relations": [
                    "Set[o2a.converter.relation.Relation]"
                ],
                "nodes": [
                    "Dict[(str, o2a.converter.oozie_node.OozieNode)]"
                ],
                "task_groups": [
                    "Dict[(str, o2a.converter.task_group.TaskGroup)]"
                ],
                "dependencies": [
                    "Set[str]"
                ]
            }
        },
        "Workflow.get_nodes_by_type": {
            "name": "get_nodes_by_type",
            "location": 63,
            "return": [
                "List[o2a.converter.oozie_node.OozieNode]"
            ],
            "arguments": {
                "self": [],
                "mapper_type": [
                    "type"
                ]
            }
        },
        "Workflow.find_upstream_nodes": {
            "name": "find_upstream_nodes",
            "location": 66,
            "return": [
                "List[o2a.converter.oozie_node.OozieNode]"
            ],
            "arguments": {
                "self": [],
                "target_node": []
            }
        },
        "Workflow.find_upstream_task_group": {
            "name": "find_upstream_task_group",
            "location": 73,
            "return": [
                "List[o2a.converter.task_group.TaskGroup]"
            ],
            "arguments": {
                "self": [],
                "target_task_group": []
            }
        },
        "Workflow.get_task_group_without_upstream": {
            "name": "get_task_group_without_upstream",
            "location": 83,
            "return": [
                "List[o2a.converter.task_group.TaskGroup]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.get_task_group_without_ok_downstream": {
            "name": "get_task_group_without_ok_downstream",
            "location": 91,
            "return": [
                "List[o2a.converter.task_group.TaskGroup]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.get_task_group_without_error_downstream": {
            "name": "get_task_group_without_error_downstream",
            "location": 98,
            "return": [
                "List[o2a.converter.task_group.TaskGroup]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.remove_node": {
            "name": "remove_node",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_to_delete": [
                    "o2a.converter.oozie_node.OozieNode"
                ]
            }
        },
        "Workflow.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.__eq__": {
            "name": "__eq__",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/workflow_xml_parser.py": {
        "WorkflowXmlParser.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "action_mapper": [
                    "Dict[(str, Type[o2a.mappers.action_mapper.ActionMapper])]"
                ],
                "renderer": [
                    "o2a.converter.renderers.BaseRenderer"
                ],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "transformers": [
                    "List[o2a.transformers.base_transformer.BaseWorkflowTransformer]"
                ]
            }
        },
        "WorkflowXmlParser.parse_kill_node": {
            "name": "parse_kill_node",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kill_node": [
                    "ET.Element"
                ]
            }
        },
        "WorkflowXmlParser.parse_end_node": {
            "name": "parse_end_node",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "end_node": []
            }
        },
        "WorkflowXmlParser.parse_fork_node": {
            "name": "parse_fork_node",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "fork_node": []
            }
        },
        "WorkflowXmlParser.parse_join_node": {
            "name": "parse_join_node",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "join_node": []
            }
        },
        "WorkflowXmlParser.parse_decision_node": {
            "name": "parse_decision_node",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decision_node": []
            }
        },
        "WorkflowXmlParser.parse_action_node": {
            "name": "parse_action_node",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_node": [
                    "ET.Element"
                ]
            }
        },
        "WorkflowXmlParser.parse_start_node": {
            "name": "parse_start_node",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_node": []
            }
        },
        "WorkflowXmlParser.parse_node": {
            "name": "parse_node",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "node": []
            }
        },
        "WorkflowXmlParser.parse_workflow": {
            "name": "parse_workflow",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/converter/__init__.py": {},
    "oozie-to-airflow-master/o2a/mappers/action_mapper.py": {
        "ActionMapper.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "input_directory_path": [
                    "str"
                ]
            }
        },
        "ActionMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionMapper._parse_config": {
            "name": "_parse_config",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionMapper.prepend_task": {
            "name": "prepend_task",
            "location": 77,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "task_to_prepend": [
                    "o2a.converter.task.Task"
                ],
                "tasks": [
                    "List[o2a.converter.task.Task]"
                ],
                "relations": [
                    "List[o2a.converter.relation.Relation]"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/base_mapper.py": {
        "BaseMapper.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "BaseMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 37,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMapper.required_imports": {
            "name": "required_imports",
            "location": 43,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMapper.copy_extra_assets": {
            "name": "copy_extra_assets",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ]
            }
        },
        "BaseMapper.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMapper.__eq__": {
            "name": "__eq__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/decision_mapper.py": {
        "DecisionMapper.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "DecisionMapper._get_cases": {
            "name": "_get_cases",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 80,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionMapper.required_imports": {
            "name": "required_imports",
            "location": 91,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/distcp_mapper.py": {
        "DistCpMapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "DistCpMapper._parse_args": {
            "name": "_parse_args",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistCpMapper._get_distcp_command": {
            "name": "_get_distcp_command",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistCpMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistCpMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 69,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistCpMapper.required_imports": {
            "name": "required_imports",
            "location": 82,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/dummy_mapper.py": {
        "DummyMapper.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "Optional[o2a.o2a_libs.property_utils.PropertySet]"
                ]
            }
        },
        "DummyMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 43,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyMapper.required_imports": {
            "name": "required_imports",
            "location": 48,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/email_mapper.py": {
        "EmailMapper.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "EmailMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 47,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMapper.required_imports": {
            "name": "required_imports",
            "location": 64,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMapper.__extract_email_data": {
            "name": "__extract_email_data",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/end_mapper.py": {},
    "oozie-to-airflow-master/o2a/mappers/fork_mapper.py": {},
    "oozie-to-airflow-master/o2a/mappers/fs_mapper.py": {
        "prepare_mkdir_command": {
            "name": "prepare_mkdir_command",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "prepare_delete_command": {
            "name": "prepare_delete_command",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "prepare_move_command": {
            "name": "prepare_move_command",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "prepare_chmod_command": {
            "name": "prepare_chmod_command",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "prepare_touchz_command": {
            "name": "prepare_touchz_command",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "prepare_chgrp_command": {
            "name": "prepare_chgrp_command",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "FsMapper.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "FsMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapper.parse_tasks": {
            "name": "parse_tasks",
            "location": 125,
            "return": [
                "List[o2a.converter.task.Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 144,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapper.required_imports": {
            "name": "required_imports",
            "location": 147,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapper.parse_fs_operation": {
            "name": "parse_fs_operation",
            "location": 150,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "node": [
                    "xml.etree.ElementTree.Element"
                ],
                "operation_nodes_count": [
                    "int"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/git_mapper.py": {
        "prepare_git_command": {
            "name": "prepare_git_command",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "git_uri": [
                    "str"
                ],
                "git_branch": [
                    "Optional[str]"
                ],
                "destination_path": [
                    "str"
                ],
                "key_path": [
                    "Optional[str]"
                ]
            }
        },
        "GitMapper.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "GitMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 83,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitMapper.required_imports": {
            "name": "required_imports",
            "location": 102,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/hive_mapper.py": {
        "HiveMapper.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "HiveMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiveMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 74,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiveMapper.copy_extra_assets": {
            "name": "copy_extra_assets",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ]
            }
        },
        "HiveMapper.required_imports": {
            "name": "required_imports",
            "location": 103,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/java_mapper.py": {
        "JavaMapper.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "jar_files": [
                    "List[str]"
                ]
            }
        },
        "JavaMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 71,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaMapper.required_imports": {
            "name": "required_imports",
            "location": 91,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaMapper._get_jar_files_in_hdfs_full_paths": {
            "name": "_get_jar_files_in_hdfs_full_paths",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaMapper._extract_java_data": {
            "name": "_extract_java_data",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/join_mapper.py": {
        "JoinMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 30,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/kill_mapper.py": {},
    "oozie-to-airflow-master/o2a/mappers/mapreduce_mapper.py": {
        "MapReduceMapper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "MapReduceMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapReduceMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 57,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapReduceMapper._validate_paths": {
            "name": "_validate_paths",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "input_directory_path": [],
                "output_directory_path": []
            }
        },
        "MapReduceMapper.required_imports": {
            "name": "required_imports",
            "location": 83,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/pig_mapper.py": {
        "PigMapper.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "PigMapper._parse_oozie_node": {
            "name": "_parse_oozie_node",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 60,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigMapper._add_symlinks": {
            "name": "_add_symlinks",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_pig_file": []
            }
        },
        "PigMapper.copy_extra_assets": {
            "name": "copy_extra_assets",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ]
            }
        },
        "PigMapper._copy_pig_script_with_path_injection": {
            "name": "_copy_pig_script_with_path_injection",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_pig_file_path": [],
                "source_pig_file_path": []
            }
        },
        "PigMapper._validate_paths": {
            "name": "_validate_paths",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "input_directory_path": [],
                "output_directory_path": []
            }
        },
        "PigMapper.required_imports": {
            "name": "required_imports",
            "location": 107,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/shell_mapper.py": {
        "ShellMapper.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "ShellMapper._parse_oozie_node": {
            "name": "_parse_oozie_node",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 56,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellMapper.required_imports": {
            "name": "required_imports",
            "location": 71,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/spark_mapper.py": {
        "SparkMapper.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "ET.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "SparkMapper.on_parse_node": {
            "name": "on_parse_node",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkMapper._parse_spark_opts": {
            "name": "_parse_spark_opts",
            "location": 80,
            "return": [
                "dict"
            ],
            "arguments": {
                "spark_opts_node": [
                    "ET.Element"
                ]
            }
        },
        "SparkMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 112,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkMapper.required_imports": {
            "name": "required_imports",
            "location": 134,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/ssh_mapper.py": {
        "SSHMapper.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "SSHMapper.get_command": {
            "name": "get_command",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHMapper.get_host_key": {
            "name": "get_host_key",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 77,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHMapper.required_imports": {
            "name": "required_imports",
            "location": 96,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/start_mapper.py": {},
    "oozie-to-airflow-master/o2a/mappers/subworkflow_mapper.py": {
        "SubworkflowMapper.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "name": [
                    "str"
                ],
                "dag_name": [
                    "str"
                ],
                "input_directory_path": [
                    "str"
                ],
                "output_directory_path": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "action_mapper": [
                    "Dict[(str, Type[o2a.mappers.action_mapper.ActionMapper])]"
                ],
                "renderer": [
                    "o2a.converter.renderers.BaseRenderer"
                ],
                "transformers": [
                    "List[o2a.transformers.base_transformer.BaseWorkflowTransformer]"
                ]
            }
        },
        "SubworkflowMapper._parse_oozie_node": {
            "name": "_parse_oozie_node",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubworkflowMapper.get_child_props": {
            "name": "get_child_props",
            "location": 92,
            "return": [
                "o2a.o2a_libs.property_utils.PropertySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubworkflowMapper.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 101,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubworkflowMapper.required_imports": {
            "name": "required_imports",
            "location": 108,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/mappers/__init__.py": {},
    "oozie-to-airflow-master/o2a/mappers/extensions/prepare_mapper_extension.py": {
        "PrepareMapperExtension.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "o2a.mappers.base_mapper.BaseMapper"
                ]
            }
        },
        "PrepareMapperExtension.has_prepare": {
            "name": "has_prepare",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareMapperExtension.get_prepare_task": {
            "name": "get_prepare_task",
            "location": 39,
            "return": [
                "Optional[o2a.converter.task.Task]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareMapperExtension.parse_prepare_node": {
            "name": "parse_prepare_node",
            "location": 51,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/el_fs_functions.py": {
        "_pig_job_executor": {
            "name": "_pig_job_executor",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "is_dir": {
            "name": "is_dir",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "dir_size": {
            "name": "dir_size",
            "location": 91,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "file_size": {
            "name": "file_size",
            "location": 107,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "block_size": {
            "name": "block_size",
            "location": 122,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/el_parser.py": {
        "_parser": {
            "name": "_parser",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "_camel_to_snake": {
            "name": "_camel_to_snake",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_translate_binary_operator": {
            "name": "_translate_binary_operator",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": []
            }
        },
        "_translate_ternary": {
            "name": "_translate_ternary",
            "location": 163,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "tree": [],
                "functions_module": [
                    "str"
                ]
            }
        },
        "_translate_token": {
            "name": "_translate_token",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "token": []
            }
        },
        "_translate_tail": {
            "name": "_translate_tail",
            "location": 232,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [],
                "f_mod": [
                    "str"
                ]
            }
        },
        "_unpack_identifier": {
            "name": "_unpack_identifier",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "_get_args": {
            "name": "_get_args",
            "location": 243,
            "return": [
                "tuple"
            ],
            "arguments": {
                "tree": [],
                "fun_mod": [
                    "str"
                ]
            }
        },
        "_translate_function": {
            "name": "_translate_function",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [],
                "f_mod": [
                    "str"
                ]
            }
        },
        "_translate_el": {
            "name": "_translate_el",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "tree": [],
                "functions_module": [
                    "str"
                ]
            }
        },
        "_purify": {
            "name": "_purify",
            "location": 302,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "expression": [
                    "str"
                ],
                "functions_module": [
                    "str"
                ],
                "quote": [
                    "bool"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/el_wf_functions.py": {
        "_reverse_task_map": {
            "name": "_reverse_task_map",
            "location": 26,
            "return": [
                "dict"
            ],
            "arguments": {
                "task_map": [
                    "dict"
                ]
            }
        },
        "conf": {
            "name": "conf",
            "location": 40,
            "return": [],
            "arguments": {
                "context": [],
                "key": []
            }
        },
        "user": {
            "name": "user",
            "location": 54,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "last_error_node": {
            "name": "last_error_node",
            "location": 80,
            "return": [],
            "arguments": {
                "context": [],
                "session": []
            }
        },
        "app_path": {
            "name": "app_path",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "group": {
            "name": "group",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "callback": {
            "name": "callback",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "state_variable": []
            }
        },
        "transition": {
            "name": "transition",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "error_code": {
            "name": "error_code",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "error_message": {
            "name": "error_message",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "run": {
            "name": "run",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "action_data": {
            "name": "action_data",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "action_external_id": {
            "name": "action_external_id",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "action_tracker_uri": {
            "name": "action_tracker_uri",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "action_external_status": {
            "name": "action_external_status",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/functions.py": {
        "first_not_null": {
            "name": "first_not_null",
            "location": 30,
            "return": [
                "Union[(str, _T0, _T1)]"
            ],
            "arguments": {
                "str_one": [
                    "_T0"
                ],
                "str_two": [
                    "_T1"
                ]
            }
        },
        "replace_all": {
            "name": "replace_all",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "src_string": [],
                "regex": [],
                "replacement": []
            }
        },
        "append_all": {
            "name": "append_all",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "src_str": [],
                "append": [],
                "delimiter": []
            }
        },
        "url_encode": {
            "name": "url_encode",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "src_str": []
            }
        },
        "timestamp": {
            "name": "timestamp",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "to_json_str": {
            "name": "to_json_str",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "py_map": [
                    "dict"
                ]
            }
        },
        "to_properties_str": {
            "name": "to_properties_str",
            "location": 109,
            "return": [
                "dict"
            ],
            "arguments": {
                "py_map": [
                    "dict"
                ]
            }
        },
        "to_configuration_str": {
            "name": "to_configuration_str",
            "location": 116,
            "return": [
                "dict"
            ],
            "arguments": {
                "py_map": [
                    "dict"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "str1": [
                    "str"
                ],
                "str2": [
                    "str"
                ]
            }
        },
        "trim": {
            "name": "trim",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "src_str": [
                    "str"
                ]
            }
        },
        "evaluate_function": {
            "name": "evaluate_function",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "args": [
                    "tuple"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/property_utils.py": {
        "PropertySet.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_properties": [
                    "Dict[(str, str)]"
                ],
                "config": [
                    "Dict[(str, str)]"
                ],
                "action_node_properties": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "PropertySet.xml_escaped": {
            "name": "xml_escaped",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropertySet.merged": {
            "name": "merged",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PropertySet.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertySet.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/o2a_libs/__init__.py": {},
    "oozie-to-airflow-master/o2a/transformers/add_node_notificaton_transformer.py": {
        "AddNodeNotificationTransformer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformer.process_workflow_after_convert_nodes": {
            "name": "process_workflow_after_convert_nodes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "AddNodeNotificationTransformer.add_all_notifications": {
            "name": "add_all_notifications",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "AddNodeNotificationTransformer._add_status": {
            "name": "_add_status",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_group": [],
                "workflow": [],
                "upstream": []
            }
        },
        "AddNodeNotificationTransformer._add_transition": {
            "name": "_add_transition",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downstream_name": [],
                "task_group": [],
                "workflow": []
            }
        },
        "AddNodeNotificationTransformer._add_transition_and_status": {
            "name": "_add_transition_and_status",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downstream_name": [],
                "task_group": [],
                "workflow": []
            }
        },
        "AddNodeNotificationTransformer._create_status_notification_task_group": {
            "name": "_create_status_notification_task_group",
            "location": 130,
            "return": [
                "o2a.converter.task_group.StatusNotificationTaskGroup"
            ],
            "arguments": {
                "url_template": [],
                "task_name": [],
                "node_name": [],
                "status": []
            }
        },
        "AddNodeNotificationTransformer._create_transition_notification_task_group": {
            "name": "_create_transition_notification_task_group",
            "location": 149,
            "return": [
                "o2a.converter.task_group.TransitionNotificationTaskGroup"
            ],
            "arguments": {
                "url_template": [],
                "task_name": [],
                "node_name": [],
                "status": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/add_workflow_notificaton_transformer.py": {
        "AddWorkflowNotificationTransformer.process_workflow_after_convert_nodes": {
            "name": "process_workflow_after_convert_nodes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "AddWorkflowNotificationTransformer._add_start_task_group": {
            "name": "_add_start_task_group",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "notification_url": [],
                "workflow": []
            }
        },
        "AddWorkflowNotificationTransformer._add_end_success_task_group": {
            "name": "_add_end_success_task_group",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "notification_url": [],
                "workflow": []
            }
        },
        "AddWorkflowNotificationTransformer._add_end_fail_task_group": {
            "name": "_add_end_fail_task_group",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "notification_url": [],
                "workflow": []
            }
        },
        "AddWorkflowNotificationTransformer._create_notification_task_group": {
            "name": "_create_notification_task_group",
            "location": 86,
            "return": [
                "o2a.converter.task_group.TaskGroup"
            ],
            "arguments": {
                "url_template": [],
                "start_task_name": [],
                "status": [],
                "error_code": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/base_transformer.py": {
        "BaseWorkflowTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "BaseWorkflowTransformer.process_workflow_after_convert_nodes": {
            "name": "process_workflow_after_convert_nodes",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_end_transformer.py": {
        "RemoveEndTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_fork_transformer.py": {
        "RemoveForkTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_inaccessible_node_transformer.py": {
        "RemoveInaccessibleNodeTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "RemoveInaccessibleNodeTransformer._find_accessible_nodes": {
            "name": "_find_accessible_nodes",
            "location": 41,
            "return": [
                "dict_values[o2a.converter.oozie_node.OozieNode]"
            ],
            "arguments": {
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        },
        "RemoveInaccessibleNodeTransformer._find_accessible_nodes.visit_node": {
            "name": "visit_node",
            "location": 48,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_join_transformer.py": {
        "RemoveJoinTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_kill_transformer.py": {
        "RemoveKillTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/remove_start_transformer.py": {
        "RemoveStartTransformer.process_workflow_after_parse_workflow_xml": {
            "name": "process_workflow_after_parse_workflow_xml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workflow": [
                    "o2a.converter.workflow.Workflow"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/transformers/__init__.py": {},
    "oozie-to-airflow-master/o2a/utils/config_extractors.py": {
        "extract_properties_from_configuration_node": {
            "name": "extract_properties_from_configuration_node",
            "location": 32,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "config_node": [
                    "ET.Element"
                ]
            }
        },
        "extract_properties_from_job_xml_nodes": {
            "name": "extract_properties_from_job_xml_nodes",
            "location": 65,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "job_xml_nodes": [
                    "List[ET.Element]"
                ],
                "input_directory_path": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/constants.py": {},
    "oozie-to-airflow-master/o2a/utils/el_utils.py": {
        "strip_el": {
            "name": "strip_el",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "el_function": [
                    "str"
                ]
            }
        },
        "extract_evaluate_properties": {
            "name": "extract_evaluate_properties",
            "location": 40,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "properties_file": [
                    "Optional[str]"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "_evaluate_properties_line": {
            "name": "_evaluate_properties_line",
            "location": 78,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "known_values": [
                    "dict"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "comma_separated_string_to_list": {
            "name": "comma_separated_string_to_list",
            "location": 97,
            "return": [
                "Union[(str, List[str])]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "_resolve_name_node": {
            "name": "_resolve_name_node",
            "location": 106,
            "return": [
                "Tuple[(Optional[str], int)]"
            ],
            "arguments": {
                "translation": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "normalize_path": {
            "name": "normalize_path",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "allow_no_schema": [],
                "translated": []
            }
        },
        "replace_url_el": {
            "name": "replace_url_el",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ],
                "allow_no_schema": []
            }
        },
        "escape_string_with_python_escapes": {
            "name": "escape_string_with_python_escapes",
            "location": 177,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "string_to_escape": [
                    "Optional[str]"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/file_archive_extractors.py": {
        "split_by_hash_sign": {
            "name": "split_by_hash_sign",
            "location": 43,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "HdfsPathProcessor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "HdfsPathProcessor.check_path_for_comma": {
            "name": "check_path_for_comma",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "HdfsPathProcessor.preprocess_path_to_hdfs": {
            "name": "preprocess_path_to_hdfs",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileExtractor.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "FileExtractor.parse_node": {
            "name": "parse_node",
            "location": 67,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileExtractor.add_file": {
            "name": "add_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_file_path": [
                    "str"
                ]
            }
        },
        "ArchiveExtractor.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_node": [
                    "xml.etree.ElementTree.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "ArchiveExtractor.parse_node": {
            "name": "parse_node",
            "location": 101,
            "return": [
                "Tuple[(List[str], List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveExtractor._check_archive_extensions": {
            "name": "_check_archive_extensions",
            "location": 109,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "oozie_archive_path": [
                    "str"
                ]
            }
        },
        "ArchiveExtractor.add_archive": {
            "name": "add_archive",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oozie_archive_path": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/file_utils.py": {
        "get_lib_files": {
            "name": "get_lib_files",
            "location": 21,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "library_folder_path": [
                    "str"
                ],
                "extension": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/param_extractor.py": {
        "extract_param_values_from_action_node": {
            "name": "extract_param_values_from_action_node",
            "location": 24,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "oozie_node": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/python_serializer.py": {
        "serialize": {
            "name": "serialize",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "serializable_obj": []
            }
        },
        "serialize.serialize_recursively": {
            "name": "serialize_recursively",
            "location": 40,
            "return": [],
            "arguments": {
                "target": [],
                "markers": []
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/relation_utils.py": {
        "chain": {
            "name": "chain",
            "location": 23,
            "return": [
                "List[o2a.converter.relation.Relation]"
            ],
            "arguments": {
                "ops": [
                    "Sequence[o2a.converter.task.Task]"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/template_utils.py": {
        "render_template": {
            "name": "render_template",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "template_name": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/variable_name_utils.py": {
        "convert_to_python_variable": {
            "name": "convert_to_python_variable",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/xml_utils.py": {
        "find_node_by_name": {
            "name": "find_node_by_name",
            "location": 29,
            "return": [
                "ET.Element"
            ],
            "arguments": {
                "root": [],
                "name": []
            }
        },
        "find_node_by_tag": {
            "name": "find_node_by_tag",
            "location": 49,
            "return": [
                "Optional[ET.Element]"
            ],
            "arguments": {
                "root": [],
                "tag": []
            }
        },
        "find_nodes_by_tag": {
            "name": "find_nodes_by_tag",
            "location": 61,
            "return": [
                "List[ET.Element]"
            ],
            "arguments": {
                "root": [],
                "tag": []
            }
        },
        "find_nodes_by_attribute": {
            "name": "find_nodes_by_attribute",
            "location": 69,
            "return": [
                "List[ET.Element]"
            ],
            "arguments": {
                "root": [],
                "attr": [],
                "val": [],
                "tag": []
            }
        },
        "get_tag_el_text": {
            "name": "get_tag_el_text",
            "location": 89,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "root": [
                    "ET.Element"
                ],
                "tag": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "get_tags_el_array_from_text": {
            "name": "get_tags_el_array_from_text",
            "location": 104,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "root": [
                    "ET.Element"
                ],
                "tag": [
                    "str"
                ]
            }
        }
    },
    "oozie-to-airflow-master/o2a/utils/__init__.py": {},
    "oozie-to-airflow-master/tests/test_templates.py": {
        "mutate": {
            "name": "mutate",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parent": [
                    "Dict[(str, Any)]"
                ],
                "mutations": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_value_by_path": {
            "name": "get_value_by_path",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "target": [],
                "path": [
                    "List[Union[(int, str)]]"
                ]
            }
        },
        "set_value_by_path": {
            "name": "set_value_by_path",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [],
                "path": [
                    "List[Union[(int, str)]]"
                ],
                "value": []
            }
        },
        "DecisionTemplateTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "DummyTemplateTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "FsOpTempalteTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsOpTempalteTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "GitTemplateTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "GitTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "HiveTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HiveTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "HiveTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "KillTemplateTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KillTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "MapReduceTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapReduceTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "MapReduceTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "PigTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PigTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "PigTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "PrepareTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "ShellTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "SparkTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "SparkTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "SshTemplateTestCase.test_minimal_green_path": {
            "name": "test_minimal_green_path",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SshTemplateTestCase.test_optional_parameters": {
            "name": "test_optional_parameters",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "SshTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "SubwfTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubwfTemplateTestCase.test_escape_character": {
            "name": "test_escape_character",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "mutation": []
            }
        },
        "WorkflowTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubWorkflowTemplateTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCases.BaseTemplateTestCase.assertValidPython": {
            "name": "assertValidPython",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "BaseTestCases.BaseTemplateTestCase.test_all_template_parameters_must_be_correlated_with_output": {
            "name": "test_all_template_parameters_must_be_correlated_with_output",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCases.BaseTemplateTestCase.test_all_template_parameters_must_be_correlated_with_output.walk_recursively_and_mutate": {
            "name": "walk_recursively_and_mutate",
            "location": 148,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "oozie-to-airflow-master/tests/__init__.py": {},
    "oozie-to-airflow-master/tests/converter/test_oozie_converter.py": {
        "TestOozieConverter.test_parse_args_input_output_file": {
            "name": "test_parse_args_input_output_file",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_parse_args_user": {
            "name": "test_parse_args_user",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_convert": {
            "name": "test_convert",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_parser_mock": []
            }
        },
        "TestOozieConverter.test_convert_as_subworkflow": {
            "name": "test_convert_as_subworkflow",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_parser_mock": []
            }
        },
        "TestOozieConverter.test_convert_nodes": {
            "name": "test_convert_nodes",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_apply_preconvert_transformers": {
            "name": "test_apply_preconvert_transformers",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_apply_postconvert_transformers": {
            "name": "test_apply_postconvert_transformers",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_copy_extra_assets": {
            "name": "test_copy_extra_assets",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_convert_relations": {
            "name": "test_convert_relations",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter.test_add_error_handlers": {
            "name": "test_add_error_handlers",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOozieConverter._create_converter": {
            "name": "_create_converter",
            "location": 234,
            "return": [
                "o2a.converter.oozie_converter.OozieConverter"
            ],
            "arguments": {}
        },
        "TestOozieConverter._create_workflow": {
            "name": "_create_workflow",
            "location": 245,
            "return": [
                "o2a.converter.workflow.Workflow"
            ],
            "arguments": {
                "nodes": [],
                "task_groups": []
            }
        },
        "TestOozieConverter._create_task": {
            "name": "_create_task",
            "location": 261,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        },
        "TestOozieConvertByExamples.test_should_convert_demo_workflow": {
            "name": "test_should_convert_demo_workflow",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/converter/test_renderers.py": {
        "_create_workflow": {
            "name": "_create_workflow",
            "location": 33,
            "return": [
                "o2a.converter.workflow.Workflow"
            ],
            "arguments": {}
        },
        "PythonRendererTestCase.test_create_workflow_file_should_create_file": {
            "name": "test_create_workflow_file_should_create_file",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": [],
                "sort_file_moc": [],
                "fix_file_mock": [],
                "black_mock": []
            }
        },
        "PythonRendererTestCase.test_create_workflow_file_should_render_template": {
            "name": "test_create_workflow_file_should_render_template",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": [],
                "sort_file_moc": [],
                "fix_file_mock": [],
                "black_mock": []
            }
        },
        "PythonRendererTestCase.test_create_subworkflow_file_should_be_render_template_with_different_template": {
            "name": "test_create_subworkflow_file_should_be_render_template_with_different_template",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": [],
                "sort_file_moc": [],
                "fix_file_mock": [],
                "black_mock": []
            }
        },
        "PythonRendererTestCase.test_create_workflow_file_should_format_file": {
            "name": "test_create_workflow_file_should_format_file",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": [],
                "sort_file_mock": [],
                "autoflake_fix_file_mock": [],
                "black_mock": []
            }
        },
        "PythonRendererTestCase._create_renderer": {
            "name": "_create_renderer",
            "location": 151,
            "return": [
                "o2a.converter.renderers.PythonRenderer"
            ],
            "arguments": {}
        },
        "PythonRendererTestCase._create_workflow": {
            "name": "_create_workflow",
            "location": 157,
            "return": [
                "o2a.converter.workflow.Workflow"
            ],
            "arguments": {}
        },
        "DotRendererTestCase.test_create_workflow_file_should_create_file": {
            "name": "test_create_workflow_file_should_create_file",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": []
            }
        },
        "DotRendererTestCase.test_create_workflow_file_should_render_template": {
            "name": "test_create_workflow_file_should_render_template",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": []
            }
        },
        "DotRendererTestCase.test_create_subworkflow_file_should_be_render_template_with_the_same_template": {
            "name": "test_create_subworkflow_file_should_be_render_template_with_the_same_template",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "open_mock": [],
                "render_template_mock": []
            }
        },
        "DotRendererTestCase._create_renderer": {
            "name": "_create_renderer",
            "location": 213,
            "return": [
                "o2a.converter.renderers.DotRenderer"
            ],
            "arguments": {}
        }
    },
    "oozie-to-airflow-master/tests/converter/test_task_groups.py": {
        "TestTaskGroup.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskGroup.test_add_downstream_node_name": {
            "name": "test_add_downstream_node_name",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskGroup.test_set_downstream_error_node_name": {
            "name": "test_set_downstream_error_node_name",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParserNodeMultipleOperators.test_first_task_id": {
            "name": "test_first_task_id",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParserNodeMultipleOperators.test_last_task_id_of_error_flow": {
            "name": "test_last_task_id_of_error_flow",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParserNodeMultipleOperators.test_last_task_id_of_ok_flow": {
            "name": "test_last_task_id_of_ok_flow",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParserNodeMultipleOperators._get_dummy_task": {
            "name": "_get_dummy_task",
            "location": 61,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        },
        "TestParserNodeMultipleOperators._get_tasks": {
            "name": "_get_tasks",
            "location": 65,
            "return": [
                "List[o2a.converter.task.Task]"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "oozie-to-airflow-master/tests/converter/test_workflow_xml_parser.py": {
        "TestWorkflowXmlParser.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowXmlParser.test_parse_kill_node": {
            "name": "test_parse_kill_node",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_end_node": {
            "name": "test_parse_end_node",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_fork_node": {
            "name": "test_parse_fork_node",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "parse_node_mock": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_join_node": {
            "name": "test_parse_join_node",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_decision_node": {
            "name": "test_parse_decision_node",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_start_node": {
            "name": "test_parse_start_node",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "uuid_mock": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_action_node_ssh": {
            "name": "test_parse_action_node_ssh",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_action_node_pig_with_file_and_archive": {
            "name": "test_parse_action_node_pig_with_file_and_archive",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowXmlParser.test_parse_mapreduce_node": {
            "name": "test_parse_mapreduce_node",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWorkflowXmlParser.test_parse_action_node_unknown": {
            "name": "test_parse_action_node_unknown",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "on_parse_node_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_action": {
            "name": "test_parse_node_action",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "action_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_start": {
            "name": "test_parse_node_start",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "start_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_kill": {
            "name": "test_parse_node_kill",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "kill_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_end": {
            "name": "test_parse_node_end",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "end_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_fork": {
            "name": "test_parse_node_fork",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "fork_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_join": {
            "name": "test_parse_node_join",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "join_mock": []
            }
        },
        "TestWorkflowXmlParser.test_parse_node_decision": {
            "name": "test_parse_node_decision",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "decision_mock": []
            }
        },
        "TestOozieExamples.test_parse_workflow_examples": {
            "name": "test_parse_workflow_examples",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "case": [],
                "_": []
            }
        }
    },
    "oozie-to-airflow-master/tests/converter/__init__.py": {},
    "oozie-to-airflow-master/tests/mappers/test_action_mapper.py": {
        "ActionMapperTestImpl.to_tasks_and_relations": {
            "name": "to_tasks_and_relations",
            "location": 33,
            "return": [
                "Tuple[(List[o2a.converter.task.Task], List[o2a.converter.relation.Relation])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionMapperTestImpl.required_imports": {
            "name": "required_imports",
            "location": 39,
            "return": [
                "Set[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionMapper.test_prepend_task_no_tasks": {
            "name": "test_prepend_task_no_tasks",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionMapper.test_prepend_task_empty_relations": {
            "name": "test_prepend_task_empty_relations",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionMapper.test_prepend_task_some_relations": {
            "name": "test_prepend_task_some_relations",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionMapper.test_parse_job_xml_and_configuration_minimal_green_path": {
            "name": "test_parse_job_xml_and_configuration_minimal_green_path",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "extract_properties_from_configuration_node_mock": [],
                "extract_properties_from_job_xml_nodes_mock": []
            }
        },
        "TestActionMapper.test_parse_job_xml_and_configuration_minimal_green_path_precedense": {
            "name": "test_parse_job_xml_and_configuration_minimal_green_path_precedense",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "extract_properties_from_configuration_node_mock": [],
                "extract_properties_from_job_xml_nodes_mock": []
            }
        },
        "TestActionMapper.test_parse_job_xml_and_configuration_minimal_green_path_without_job_xml": {
            "name": "test_parse_job_xml_and_configuration_minimal_green_path_without_job_xml",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "extract_properties_from_configuration_node_mock": [],
                "extract_properties_from_job_xml_nodes_mock": []
            }
        },
        "TestActionMapper._get_action_mapper": {
            "name": "_get_action_mapper",
            "location": 178,
            "return": [
                "ActionMapperTestImpl"
            ],
            "arguments": {
                "action_node": [
                    "ET.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_archive_extractor.py": {
        "TestArchiveExtractor.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_add_relative_archive": {
            "name": "test_add_relative_archive",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_add_absolute_archive": {
            "name": "test_add_absolute_archive",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_add_multiple_archives": {
            "name": "test_add_multiple_archives",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_add_hash_archives": {
            "name": "test_add_hash_archives",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_add_archive_extra_hash": {
            "name": "test_add_archive_extra_hash",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchiveExtractor.test_replace_el": {
            "name": "test_replace_el",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_base_mapper.py": {
        "TestBaseMapper.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_decision_mapper.py": {
        "TestDecisionMapper.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecisionMapper.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecisionMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecisionMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecisionMapper._get_decision_mapper": {
            "name": "_get_decision_mapper",
            "location": 77,
            "return": [
                "decision_mapper.DecisionMapper"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_distcp_mapper.py": {
        "_get_distcp_mapper": {
            "name": "_get_distcp_mapper",
            "location": 167,
            "return": [
                "o2a.mappers.distcp_mapper.DistCpMapper"
            ],
            "arguments": {
                "distcp_node": [
                    "ET.Element"
                ],
                "job_properties": [
                    "Dict[(str, str)]"
                ],
                "config": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "TestDistCpMapper.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDistCpMapper.test_setup": {
            "name": "test_setup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDistCpMapper.test_task_and_relations": {
            "name": "test_task_and_relations",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDistCpMapperNoPrepare.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDistCpMapperNoPrepare.test_setup": {
            "name": "test_setup",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDistCpMapperNoPrepare.test_task_and_relations_no_prepare": {
            "name": "test_task_and_relations_no_prepare",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_dummy_mapper.py": {
        "TestDummyMapper.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDummyMapper.test_convert_tasks_and_relations": {
            "name": "test_convert_tasks_and_relations",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDummyMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDummyMapper._get_dummy_mapper": {
            "name": "_get_dummy_mapper",
            "location": 46,
            "return": [
                "dummy_mapper.DummyMapper"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_email_mapper.py": {
        "TestEmailMapper.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMapper.test_init": {
            "name": "test_init",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMapper.test_arguments_are_parsed_correctly": {
            "name": "test_arguments_are_parsed_correctly",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMapper._get_email_mapper": {
            "name": "_get_email_mapper",
            "location": 93,
            "return": [
                "email_mapper.EmailMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_file_extractor.py": {
        "TestFileExtractor.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_add_relative_file": {
            "name": "test_add_relative_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_add_absolute_file": {
            "name": "test_add_absolute_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_add_multiple_files": {
            "name": "test_add_multiple_files",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_add_hash_files": {
            "name": "test_add_hash_files",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_add_file_extra_hash": {
            "name": "test_add_file_extra_hash",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileExtractor.test_replace_el": {
            "name": "test_replace_el",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_fs_mapper.py": {
        "_get_fs_mapper": {
            "name": "_get_fs_mapper",
            "location": 486,
            "return": [
                "fs_mapper.FsMapper"
            ],
            "arguments": {
                "oozie_node": []
            }
        },
        "PrepareCommandsTest.test_prepare_mkdir_command": {
            "name": "test_prepare_mkdir_command",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "PrepareCommandsTest.test_prepare_delete_command": {
            "name": "test_prepare_delete_command",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "PrepareCommandsTest.test_prepare_move_command": {
            "name": "test_prepare_move_command",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "PrepareCommandsTest.test_prepare_chmod_command": {
            "name": "test_prepare_chmod_command",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "PrepareCommandsTest.test_prepare_touchz_command": {
            "name": "test_prepare_touchz_command",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "PrepareCommandsTest.test_prepare_chgrp_command": {
            "name": "test_prepare_chgrp_command",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "xml": [],
                "command": []
            }
        },
        "FsMapperSingleTestCase.setUp": {
            "name": "setUp",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperSingleTestCase.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperSingleTestCase.test_required_imports": {
            "name": "test_required_imports",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperEmptyTestCase.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperEmptyTestCase.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperEmptyTestCase.test_required_imports": {
            "name": "test_required_imports",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperComplexTestCase.setUp": {
            "name": "setUp",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperComplexTestCase.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsMapperComplexTestCase.test_required_imports": {
            "name": "test_required_imports",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_git_mapper.py": {
        "PrepareGitCommandTestCase.test_green_path": {
            "name": "test_green_path",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareGitCommandTestCase.test_should_escape_special_characters": {
            "name": "test_should_escape_special_characters",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareGitCommandTestCase.test_without_branch": {
            "name": "test_without_branch",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareGitCommandTestCase.test_without_key_path": {
            "name": "test_without_key_path",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitMapper.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitMapper.test_convert_to_text_with_prepare_node": {
            "name": "test_convert_to_text_with_prepare_node",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitMapper.test_convert_to_text_without_prepare_node": {
            "name": "test_convert_to_text_without_prepare_node",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitMapper._get_git_mapper": {
            "name": "_get_git_mapper",
            "location": 201,
            "return": [
                "git_mapper.GitMapper"
            ],
            "arguments": {
                "spark_node": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_hive_mapper.py": {
        "TestHiveMapper.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_to_tasks_and_relations_should_parse_query_element": {
            "name": "test_to_tasks_and_relations_should_parse_query_element",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_to_tasks_and_relations_should_parse_script_element": {
            "name": "test_to_tasks_and_relations_should_parse_script_element",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_to_tasks_and_relations_should_parse_prepare_element": {
            "name": "test_to_tasks_and_relations_should_parse_prepare_element",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_to_tasks_and_relations_should_parse_file_elements": {
            "name": "test_to_tasks_and_relations_should_parse_file_elements",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_to_tasks_and_relations_should_parse_archive_element": {
            "name": "test_to_tasks_and_relations_should_parse_archive_element",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_on_parse_should_raise_exception_missing_query_or_script": {
            "name": "test_on_parse_should_raise_exception_missing_query_or_script",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_on_parse_should_raise_exception_when_query_and_script_are_set_at_the_same_time": {
            "name": "test_on_parse_should_raise_exception_when_query_and_script_are_set_at_the_same_time",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHiveMapper._get_hive_mapper": {
            "name": "_get_hive_mapper",
            "location": 329,
            "return": [
                "hive_mapper.HiveMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_java_mapper.py": {
        "TestJavaMapper.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_arguments_are_parsed_correctly_without_jar_files": {
            "name": "test_arguments_are_parsed_correctly_without_jar_files",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_arguments_are_parsed_correctly_with_multiple_opts": {
            "name": "test_arguments_are_parsed_correctly_with_multiple_opts",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_arguments_are_parsed_correctly_with_jar_files": {
            "name": "test_arguments_are_parsed_correctly_with_jar_files",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_mapred_ops_append_list_mapred_child": {
            "name": "test_mapred_ops_append_list_mapred_child",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_mapred_ops_append_list_mapreduce_map": {
            "name": "test_mapred_ops_append_list_mapreduce_map",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJavaMapper._get_java_mapper": {
            "name": "_get_java_mapper",
            "location": 274,
            "return": [
                "java_mapper.JavaMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": [],
                "single_opts": [
                    "bool"
                ],
                "jar_files": [
                    "List[str]"
                ]
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_mapreduce_mapper.py": {
        "TestMapReduceMapper.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapper.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapper.test_on_parse_node": {
            "name": "test_on_parse_node",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapper._get_mapreduce_mapper": {
            "name": "_get_mapreduce_mapper",
            "location": 249,
            "return": [
                "mapreduce_mapper.MapReduceMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        },
        "TestMapReduceMapperNoPrepare.setUp": {
            "name": "setUp",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapperNoPrepare.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapperNoPrepare.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapperNoPrepare.test_required_imports": {
            "name": "test_required_imports",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapReduceMapperNoPrepare._get_mapreduce_mapper": {
            "name": "_get_mapreduce_mapper",
            "location": 346,
            "return": [
                "mapreduce_mapper.MapReduceMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_pig_mapper.py": {
        "TestPigMapper.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPigMapper.test_create_mapper_no_jinja": {
            "name": "test_create_mapper_no_jinja",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPigMapper.test_create_mapper_jinja": {
            "name": "test_create_mapper_jinja",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPigMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPigMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPigMapper._get_pig_mapper": {
            "name": "_get_pig_mapper",
            "location": 169,
            "return": [
                "pig_mapper.PigMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_shell_mapper.py": {
        "TestShellMapper.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShellMapper.test_create_mapper_no_jinja": {
            "name": "test_create_mapper_no_jinja",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShellMapper.test_create_mapper_jinja": {
            "name": "test_create_mapper_jinja",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShellMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShellMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShellMapper._get_shell_mapper": {
            "name": "_get_shell_mapper",
            "location": 132,
            "return": [
                "shell_mapper.ShellMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_spark_mapper.py": {
        "TestSparkMapperWithPrepare.test_create_mapper": {
            "name": "test_create_mapper",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkMapperWithPrepare.test_to_tasks_and_relations_with_prepare_node": {
            "name": "test_to_tasks_and_relations_with_prepare_node",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkMapperWithPrepare.test_to_tasks_and_relations_without_prepare_node": {
            "name": "test_to_tasks_and_relations_without_prepare_node",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkMapperWithPrepare.test_required_imports": {
            "name": "test_required_imports",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkMapperWithPrepare._get_spark_mapper": {
            "name": "_get_spark_mapper",
            "location": 174,
            "return": [
                "spark_mapper.SparkMapper"
            ],
            "arguments": {
                "spark_node": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_ssh_mapper.py": {
        "TestSSHMapper.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSHMapper.test_create_mapper_no_jinja": {
            "name": "test_create_mapper_no_jinja",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSHMapper.test_create_mapper_jinja": {
            "name": "test_create_mapper_jinja",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSHMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSHMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSSHMapper._get_ssh_mapper": {
            "name": "_get_ssh_mapper",
            "location": 90,
            "return": [
                "ssh_mapper.SSHMapper"
            ],
            "arguments": {
                "self": [],
                "job_properties": [],
                "config": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/test_subworkflow_mapper.py": {
        "TestSubworkflowMapper.setUpClass": {
            "name": "setUpClass",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestSubworkflowMapper.tearDown": {
            "name": "tearDown",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubworkflowMapper.test_create_mapper_jinja": {
            "name": "test_create_mapper_jinja",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "parse_els": []
            }
        },
        "TestSubworkflowMapper.test_create_mapper_jinja_no_propagate": {
            "name": "test_create_mapper_jinja_no_propagate",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "parse_els": []
            }
        },
        "TestSubworkflowMapper.test_to_tasks_and_relations": {
            "name": "test_to_tasks_and_relations",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "parse_els": []
            }
        },
        "TestSubworkflowMapper.test_required_imports": {
            "name": "test_required_imports",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubworkflowMapper._get_subwf_mapper": {
            "name": "_get_subwf_mapper",
            "location": 124,
            "return": [
                "subworkflow_mapper.SubworkflowMapper"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/__init__.py": {},
    "oozie-to-airflow-master/tests/mappers/extensions/test_prepare_mapper_extension.py": {
        "TestPrepareMapperExtension.get_mapper_extension": {
            "name": "get_mapper_extension",
            "location": 35,
            "return": [
                "o2a.mappers.extensions.prepare_mapper_extension.PrepareMapperExtension"
            ],
            "arguments": {
                "node": [
                    "ET.Element"
                ],
                "props": [
                    "o2a.o2a_libs.property_utils.PropertySet"
                ]
            }
        },
        "TestPrepareMapperExtension.test_with_prepare": {
            "name": "test_with_prepare",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrepareMapperExtension.test_no_prepare": {
            "name": "test_no_prepare",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrepareMapperExtension.test_empty_prepare": {
            "name": "test_empty_prepare",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/mappers/extensions/__init__.py": {},
    "oozie-to-airflow-master/tests/o2a_libs/test_el_fs_functions.py": {
        "TestFsFunctions.test_pig_job_executor_success": {
            "name": "test_pig_job_executor_success",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_pig_job_executor_fail": {
            "name": "test_pig_job_executor_fail",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_exists": {
            "name": "test_exists",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_is_dir": {
            "name": "test_is_dir",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_dir_size": {
            "name": "test_dir_size",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_file_size": {
            "name": "test_file_size",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        },
        "TestFsFunctions.test_block_size": {
            "name": "test_block_size",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "mock_pipe": []
            }
        }
    },
    "oozie-to-airflow-master/tests/o2a_libs/test_el_parser.py": {
        "TestElParser.test_translations": {
            "name": "test_translations",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "output_sentence": [],
                "input_sentence": []
            }
        },
        "TestElParser.test_rendering": {
            "name": "test_rendering",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "input_sentence": [],
                "translation": [],
                "output_sentence": [],
                "kwargs": []
            }
        },
        "TestElParser.test_error_rendering": {
            "name": "test_error_rendering",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "translation": [],
                "input_sentence": [],
                "kwargs": []
            }
        }
    },
    "oozie-to-airflow-master/tests/o2a_libs/test_functions.py": {
        "TestFunctions.test_first_not_null": {
            "name": "test_first_not_null",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "str_one": [],
                "str_two": []
            }
        },
        "TestFunctions.test_concat": {
            "name": "test_concat",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "str_one": [],
                "str_two": []
            }
        },
        "TestFunctions.test_replace_all": {
            "name": "test_replace_all",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "src_str": [],
                "regex": [],
                "replacement": []
            }
        },
        "TestFunctions.test_append_all": {
            "name": "test_append_all",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "src_str": [],
                "append": [],
                "delimiter": []
            }
        },
        "TestFunctions.test_trim": {
            "name": "test_trim",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "src_str": []
            }
        },
        "TestFunctions.test_urlencode": {
            "name": "test_urlencode",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "src_str": []
            }
        },
        "TestFunctions.test_to_json_str": {
            "name": "test_to_json_str",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "src_str": []
            }
        },
        "TestFunctions.test_reverse_map": {
            "name": "test_reverse_map",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/o2a_libs/test_property_utils.py": {
        "TestPropertySet.test_xml_escaping": {
            "name": "test_xml_escaping",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/o2a_libs/__init__.py": {},
    "oozie-to-airflow-master/tests/script_tests/test_git.py": {
        "GitTestCase.test_success_execution": {
            "name": "test_success_execution",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTestCase.test_success_execution_with_ssh_key": {
            "name": "test_success_execution_with_ssh_key",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTestCase.test_success_execution_with_custom_branch": {
            "name": "test_success_execution_with_custom_branch",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitTestCase.test_required_parameters": {
            "name": "test_required_parameters",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        }
    },
    "oozie-to-airflow-master/tests/script_tests/test_prepare.py": {
        "PrepareTestCase._assert_make": {
            "name": "_assert_make",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "dir_name": []
            }
        },
        "PrepareTestCase._assert_delete": {
            "name": "_assert_delete",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "dir_name": []
            }
        },
        "PrepareTestCase.test_success_execution": {
            "name": "test_success_execution",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareTestCase.test_success_with_many_params": {
            "name": "test_success_with_many_params",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrepareTestCase.test_required_parameters": {
            "name": "test_required_parameters",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        }
    },
    "oozie-to-airflow-master/tests/script_tests/utils.py": {
        "mock_app.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "mock_app.__enter__": {
            "name": "__enter__",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_app.__exit__": {
            "name": "__exit__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exception_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exception_value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "ShellScriptTestCase.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellScriptTestCase.tearDown": {
            "name": "tearDown",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellScriptTestCase.get_command_calls": {
            "name": "get_command_calls",
            "location": 81,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellScriptTestCase.run_bash_command": {
            "name": "run_bash_command",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "command": []
            }
        }
    },
    "oozie-to-airflow-master/tests/script_tests/__init.__.py": {},
    "oozie-to-airflow-master/tests/transformers/test_add_node_notification_transformer.py": {
        "new_task": {
            "name": "new_task",
            "location": 32,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        },
        "AddNodeNotificationTransformerTest.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_do_nothing_when_notification_url_not_configured": {
            "name": "test_should_do_nothing_when_notification_url_not_configured",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_add_status_notification_to_single_action_task_group": {
            "name": "test_should_add_status_notification_to_single_action_task_group",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_add_transition_and_status_between_two_action_task_groups": {
            "name": "test_should_add_transition_and_status_between_two_action_task_groups",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_add_transition_between_action_and_control_task_groups": {
            "name": "test_should_add_transition_between_action_and_control_task_groups",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_add_transition_between_two_control_task_groups": {
            "name": "test_should_add_transition_between_two_control_task_groups",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_add_transition_and_status_between_control_and_action_task_groups": {
            "name": "test_should_add_transition_and_status_between_control_and_action_task_groups",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_handle_fork_type_case": {
            "name": "test_should_handle_fork_type_case",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddNodeNotificationTransformerTest.test_should_handle_join_type_case": {
            "name": "test_should_handle_join_type_case",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_add_workflow_notification_transformer.py": {
        "AddWorkflowNotificationTransformerTest.test_should_do_nothing_when_notification_url_not_configured": {
            "name": "test_should_do_nothing_when_notification_url_not_configured",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddWorkflowNotificationTransformerTest.test_should_add_start_workflow_node": {
            "name": "test_should_add_start_workflow_node",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddWorkflowNotificationTransformerTest.test_should_add_end_success_workflow_node": {
            "name": "test_should_add_end_success_workflow_node",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddWorkflowNotificationTransformerTest.test_should_add_end_fail_workflow_node": {
            "name": "test_should_add_end_fail_workflow_node",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_inaccessible_node_transformer.py": {
        "RemoveInaccessibleNodeTransformerTest.test_should_keep_connected_nodes_in_correct_flow": {
            "name": "test_should_keep_connected_nodes_in_correct_flow",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveInaccessibleNodeTransformerTest.test_should_keep_connected_nodes_in_error_state": {
            "name": "test_should_keep_connected_nodes_in_error_state",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveInaccessibleNodeTransformerTest.test_should_remove_inaccessible_node": {
            "name": "test_should_remove_inaccessible_node",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveInaccessibleNodeTransformerTest.test_should_remove_group_of_inaccessible_nodes": {
            "name": "test_should_remove_group_of_inaccessible_nodes",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveInaccessibleNodeTransformerTest._get_dummy_task": {
            "name": "_get_dummy_task",
            "location": 244,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_remove_end_transformer.py": {
        "RemoveEndTransformerTest.test_should_remove_end_node": {
            "name": "test_should_remove_end_node",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveEndTransformerTest.test_should_not_remove_end_node_when_connected_with_decision": {
            "name": "test_should_not_remove_end_node_when_connected_with_decision",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveEndTransformerTest._get_dummy_task": {
            "name": "_get_dummy_task",
            "location": 85,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_remove_fork_transformer.py": {
        "RemoveForkTransformerTest.test_should_remove_join_node_when_it_does_not_have_upstream_nodes": {
            "name": "test_should_remove_join_node_when_it_does_not_have_upstream_nodes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveForkTransformerTest.test_should_keep_fork_node_when_it_have_upstream_nodes": {
            "name": "test_should_keep_fork_node_when_it_have_upstream_nodes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveForkTransformerTest.test_should_remove_multiple_fork_nodes": {
            "name": "test_should_remove_multiple_fork_nodes",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_remove_join_transformer.py": {
        "RemoveJoinTransformerTest.test_should_remove_join_node_when_it_does_not_have_downstream_nodes": {
            "name": "test_should_remove_join_node_when_it_does_not_have_downstream_nodes",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveJoinTransformerTest.test_should_keep_join_node_when_it_have_downstream_nodes": {
            "name": "test_should_keep_join_node_when_it_have_downstream_nodes",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveJoinTransformerTest.test_should_remove_multiple_join_nodes": {
            "name": "test_should_remove_multiple_join_nodes",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_remove_kill_transformer.py": {
        "RemoveKillTransformerTest.test_should_remove_node_in_error_flow": {
            "name": "test_should_remove_node_in_error_flow",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveKillTransformerTest.test_should_keep_node_in_correct_flow": {
            "name": "test_should_keep_node_in_correct_flow",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/test_remove_start_transformer.py": {
        "RemoveEndTransformerTest.test_should_remove_start_node": {
            "name": "test_should_remove_start_node",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveEndTransformerTest._get_dummy_task": {
            "name": "_get_dummy_task",
            "location": 52,
            "return": [
                "o2a.converter.task.Task"
            ],
            "arguments": {
                "task_id": []
            }
        }
    },
    "oozie-to-airflow-master/tests/transformers/__init__.py": {},
    "oozie-to-airflow-master/tests/utils/test_config_extractors.py": {
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_miniaml_green_path": {
            "name": "test_extract_properties_from_configuration_node_miniaml_green_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_when_empty": {
            "name": "test_extract_properties_from_configuration_node_when_empty",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_should_el_replace": {
            "name": "test_extract_properties_from_configuration_node_should_el_replace",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_should_raise_exception_when_name_element_is_missing": {
            "name": "test_extract_properties_from_configuration_node_should_raise_exception_when_name_element_is_missing",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_should_raise_exception_when_value_element_is_missing": {
            "name": "test_extract_properties_from_configuration_node_should_raise_exception_when_value_element_is_missing",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_should_raise_exception_when_name_element_is_empty": {
            "name": "test_extract_properties_from_configuration_node_should_raise_exception_when_name_element_is_empty",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_configuration_node_should_raise_exception_when_value_element_is_empty": {
            "name": "test_extract_properties_from_configuration_node_should_raise_exception_when_value_element_is_empty",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_job_xml_nodes_minimal_green_path": {
            "name": "test_extract_properties_from_job_xml_nodes_minimal_green_path",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "parse_mock": []
            }
        },
        "ConfigExtractorsModuleTestCase.test_extract_properties_from_job_xml_nodes_should_parse_multie_elements": {
            "name": "test_extract_properties_from_job_xml_nodes_should_parse_multie_elements",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "parse_mock": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_el_utils.py": {
        "TestELUtils.test_parse_els_no_file": {
            "name": "test_parse_els_no_file",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_parse_els_file": {
            "name": "test_parse_els_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_parse_els_file_list": {
            "name": "test_parse_els_file_list",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_parse_els_multiple_line_with_back_references": {
            "name": "test_parse_els_multiple_line_with_back_references",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_normalize_path_green_path": {
            "name": "test_normalize_path_green_path",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_path": [],
                "expected_result": []
            }
        },
        "TestELUtils.test_normalize_path_with_allow_no_schema": {
            "name": "test_normalize_path_with_allow_no_schema",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_path": [],
                "expected_result": []
            }
        },
        "TestELUtils.test_normalize_path_red_path": {
            "name": "test_normalize_path_red_path",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_path": []
            }
        },
        "TestELUtils.test_normalize_path_red_path_allowed_no_schema": {
            "name": "test_normalize_path_red_path_allowed_no_schema",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_path": []
            }
        },
        "TestELUtils.test_replace_url_el_green_path": {
            "name": "test_replace_url_el_green_path",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "oozie_url": [],
                "expected_result": []
            }
        },
        "TestELUtils.test_escape_python_string": {
            "name": "test_escape_python_string",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "input_string": [],
                "expected_string": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_param_extractor.py": {
        "ParamExtractorModuleTestCase.test_extract_param_values_from_action_node_should_return_empty_dict_when_not_found": {
            "name": "test_extract_param_values_from_action_node_should_return_empty_dict_when_not_found",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamExtractorModuleTestCase.test_extract_param_values_from_action_node_should_parse_single_value": {
            "name": "test_extract_param_values_from_action_node_should_parse_single_value",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamExtractorModuleTestCase.test_extract_param_values_from_action_node_should_parse_multiple_value": {
            "name": "test_extract_param_values_from_action_node_should_parse_multiple_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamExtractorModuleTestCase.test_extract_param_values_from_action_node_should_support_el_value": {
            "name": "test_extract_param_values_from_action_node_should_support_el_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_python_serializer.py": {
        "PythonSerializerModule.test_should_serialize_none": {
            "name": "test_should_serialize_none",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_str": {
            "name": "test_should_serialize_str",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_true": {
            "name": "test_should_serialize_true",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_false": {
            "name": "test_should_serialize_false",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_empty_list": {
            "name": "test_should_serialize_empty_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_complex_list": {
            "name": "test_should_serialize_complex_list",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_list_of_string": {
            "name": "test_should_serialize_list_of_string",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_empty_dict": {
            "name": "test_should_serialize_empty_dict",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_simple_dict": {
            "name": "test_should_serialize_simple_dict",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_complex_dict": {
            "name": "test_should_serialize_complex_dict",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_empty_set": {
            "name": "test_should_serialize_empty_set",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_simple_set": {
            "name": "test_should_serialize_simple_set",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_complex_set": {
            "name": "test_should_serialize_complex_set",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_empty_tuple": {
            "name": "test_should_serialize_empty_tuple",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_simple_tuple": {
            "name": "test_should_serialize_simple_tuple",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_serialize_complex_tuple": {
            "name": "test_should_serialize_complex_tuple",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_detect_circular_imports": {
            "name": "test_should_detect_circular_imports",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonSerializerModule.test_should_raise_exception_on_invalid_type": {
            "name": "test_should_raise_exception_on_invalid_type",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_relation_utils.py": {
        "chainTestCase.test_empty": {
            "name": "test_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "chainTestCase.test_one": {
            "name": "test_one",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "chainTestCase.test_multiple": {
            "name": "test_multiple",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_variable_name_utils.py": {
        "ConvertToPythonVariableTestCase.test_should_keep_original_when_its_not_required": {
            "name": "test_should_keep_original_when_its_not_required",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertToPythonVariableTestCase.test_should_replace_invalid_characters_to_underscore": {
            "name": "test_should_replace_invalid_characters_to_underscore",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "input_text": [],
                "expected_output": []
            }
        },
        "ConvertToPythonVariableTestCase.test_should_remove_leading_invalid_characters": {
            "name": "test_should_remove_leading_invalid_characters",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/test_xml_utils.py": {
        "TestELUtils.test_find_node_by_name": {
            "name": "test_find_node_by_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_node_by_name_not_found": {
            "name": "test_find_node_by_name_not_found",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_node_by_name_multiple": {
            "name": "test_find_node_by_name_multiple",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_tag": {
            "name": "test_find_nodes_by_tag",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_tag_none": {
            "name": "test_find_nodes_by_tag_none",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_tag_multiple": {
            "name": "test_find_nodes_by_tag_multiple",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_attribute_found_no_tag": {
            "name": "test_find_nodes_by_attribute_found_no_tag",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_attribute_found_tag": {
            "name": "test_find_nodes_by_attribute_found_tag",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestELUtils.test_find_nodes_by_attribute_found_none": {
            "name": "test_find_nodes_by_attribute_found_none",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oozie-to-airflow-master/tests/utils/__init__.py": {}
}
{
    "orion-master/main.py": {},
    "orion-master/dags/data_getter.py": {},
    "orion-master/dags/__init__.py": {},
    "orion-master/Dashboard/plotly_commandline_example.py": {},
    "orion-master/DataGetters/reddit_task.py": {
        "_get_hash": {
            "name": "_get_hash",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "item": []
            }
        },
        "_update_record": {
            "name": "_update_record",
            "location": 24,
            "return": [
                "Optional[_T1]"
            ],
            "arguments": {
                "old": [],
                "new": [
                    "_T1"
                ]
            }
        },
        "_save_comments": {
            "name": "_save_comments",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "items": []
            }
        },
        "_reddit_conn": {
            "name": "_reddit_conn",
            "location": 71,
            "return": [
                "DataGetters.reddit.core.Reddit"
            ],
            "arguments": {}
        },
        "_main_loop": {
            "name": "_main_loop",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "reddit": [
                    "DataGetters.reddit.core.Reddit"
                ],
                "headlines": [
                    "DataGetters.reddit.models.thingamajig.ThingAMaJig"
                ],
                "comments": [
                    "DataGetters.reddit.models.thingamajig.ThingAMaJig"
                ],
                "SLEEP": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "orion-master/DataGetters/track_bitso.py": {
        "save": {
            "name": "save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "collection_name": [
                    "str"
                ],
                "data": [
                    "dict"
                ]
            }
        },
        "save_ticker": {
            "name": "save_ticker",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "int"
                ]
            }
        },
        "save_order_book": {
            "name": "save_order_book",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "int"
                ]
            }
        },
        "save_trades": {
            "name": "save_trades",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "int"
                ]
            }
        },
        "save_bitso_records": {
            "name": "save_bitso_records",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main_bitso": {
            "name": "main_bitso",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "orion-master/DataGetters/__init__.py": {},
    "orion-master/DataGetters/bitso/api.py": {
        "get_btc_data": {
            "name": "get_btc_data",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "service": [
                    "str"
                ],
                "params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_ticker": {
            "name": "get_ticker",
            "location": 21,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_order_book": {
            "name": "get_order_book",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "get_trades": {
            "name": "get_trades",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "orion-master/DataGetters/bitso/__init__.py": {},
    "orion-master/DataGetters/reddit/core.py": {
        "Reddit.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "DataGetters.reddit.models.credentials.Credentials"
                ]
            }
        },
        "Reddit._user_agent": {
            "name": "_user_agent",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit._header": {
            "name": "_header",
            "location": 24,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": [],
                "include_token": [
                    "bool"
                ]
            }
        },
        "Reddit._auth": {
            "name": "_auth",
            "location": 33,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit._request": {
            "name": "_request",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "data": [
                    "dict"
                ],
                "method": [
                    "str"
                ]
            }
        },
        "Reddit._is_logged": {
            "name": "_is_logged",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit.login": {
            "name": "login",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reddit.headlines": {
            "name": "headlines",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "subreddit": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "sort": [
                    "str"
                ]
            }
        },
        "Reddit.comments": {
            "name": "comments",
            "location": 73,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "subreddit": [
                    "str"
                ],
                "comment_id": [
                    "str"
                ],
                "limit": [
                    "int"
                ]
            }
        }
    },
    "orion-master/DataGetters/reddit/__init__.py": {},
    "orion-master/DataGetters/reddit/models/credentials.py": {
        "Credentials.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ],
                "app_id": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "Credentials.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "orion-master/DataGetters/reddit/models/thingamajig.py": {
        "ThingAMaJig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "ThingAMaJig._append_items_from_list": {
            "name": "_append_items_from_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "obj": []
            }
        },
        "ThingAMaJig._keep_keys": {
            "name": "_keep_keys",
            "location": 44,
            "return": [
                "List[Union[(list, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ThingAMaJig._dict_to_object": {
            "name": "_dict_to_object",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ThingAMaJig.embody": {
            "name": "embody",
            "location": 68,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "orion-master/DataGetters/reddit/models/__init__.py": {},
    "orion-master/DataModels/sentiment.py": {
        "save_object": {
            "name": "save_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "filename": []
            }
        },
        "predictions": {
            "name": "predictions",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": []
            }
        },
        "cost": {
            "name": "cost",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "predictions": []
            }
        },
        "optimizer": {
            "name": "optimizer",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "learning_rate": []
            }
        },
        "validation": {
            "name": "validation",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "predictions": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "state": []
            }
        },
        "train": {
            "name": "train",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "orion-master/DataModels/__init__.py": {},
    "orion-master/ml/__init__.py": {},
    "orion-master/ml/data/core.py": {
        "get_batches": {
            "name": "get_batches",
            "location": 13,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "batch_size": []
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.label_encoding": {
            "name": "label_encoding",
            "location": 31,
            "return": [
                "Counter[nothing]"
            ],
            "arguments": {
                "self": [],
                "labels": [],
                "steps": []
            }
        },
        "Data.separate_data": {
            "name": "separate_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_len": [],
                "split_frac_training": [],
                "split_frac_test_val": []
            }
        },
        "Data.training_data": {
            "name": "training_data",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.test_data": {
            "name": "test_data",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.validation_data": {
            "name": "validation_data",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data2.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data2.no_punctuation": {
            "name": "no_punctuation",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Data2._map_to_integers": {
            "name": "_map_to_integers",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "words": []
            }
        },
        "Data2.preprocessing": {
            "name": "preprocessing",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "orion-master/ml/data/__init__.py": {},
    "orion-master/ml/network/cell.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_units": [],
                "activation": [],
                "weights_init_fn": [],
                "name": []
            }
        },
        "Layer._get_gradient_fn": {
            "name": "_get_gradient_fn",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "activation": []
            }
        },
        "Layer._apply_gradient": {
            "name": "_apply_gradient",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "gradient_output": [],
                "output_min_1": []
            }
        },
        "Layer.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Layer.size": {
            "name": "size",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer.activation": {
            "name": "activation",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "activation": []
            }
        },
        "Layer.update_layer": {
            "name": "update_layer",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "b": []
            }
        },
        "Layer.build": {
            "name": "build",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "Layer.apply_layer": {
            "name": "apply_layer",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Layer.back": {
            "name": "back",
            "location": 87,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "output": [],
                "output_min_1": []
            }
        },
        "LSTMCell.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_units": [],
                "forget_bias": [],
                "activation": [],
                "weights_init_fn": [],
                "name": []
            }
        },
        "LSTMCell.__deep_copy__": {
            "name": "__deep_copy__",
            "location": 129,
            "return": [
                "_TLSTMCell"
            ],
            "arguments": {
                "self": [
                    "_TLSTMCell"
                ],
                "memo": []
            }
        },
        "LSTMCell._apply_gradient": {
            "name": "_apply_gradient",
            "location": 137,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "gradient_output": [],
                "output_min_1": []
            }
        },
        "LSTMCell.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "Tuple[(Any, ml.network.state.State)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": []
            }
        },
        "LSTMCell.zero_state": {
            "name": "zero_state",
            "location": 145,
            "return": [
                "ml.network.state.State"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "dtype": []
            }
        },
        "LSTMCell.build": {
            "name": "build",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "LSTMCell._gate": {
            "name": "_gate",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "i": [],
                "s_h": [],
                "b": []
            }
        },
        "LSTMCell.apply_layer": {
            "name": "apply_layer",
            "location": 191,
            "return": [
                "Tuple[(Any, ml.network.state.State)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": []
            }
        },
        "LSTMCell.back": {
            "name": "back",
            "location": 213,
            "return": [
                "Tuple[(Any, ml.network.state.State, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "output": [],
                "output_min_1": [],
                "state": []
            }
        },
        "LSTMCell.update_layer": {
            "name": "update_layer",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "b": []
            }
        },
        "DropOutCell.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [],
                "input_prob": [],
                "output_prob": [],
                "state_prob": []
            }
        },
        "DropOutCell.zero_state": {
            "name": "zero_state",
            "location": 280,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "dtype": []
            }
        },
        "DropOutCell.size": {
            "name": "size",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DropOutCell.activation": {
            "name": "activation",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DropOutCell.should_dropout": {
            "name": "should_dropout",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": []
            }
        },
        "DropOutCell._dropout": {
            "name": "_dropout",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "keep_prob": []
            }
        },
        "DropOutCell.__call__": {
            "name": "__call__",
            "location": 304,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "state": []
            }
        },
        "DropOutCell.__deep_copy__": {
            "name": "__deep_copy__",
            "location": 316,
            "return": [
                "_TDropOutCell"
            ],
            "arguments": {
                "self": [
                    "_TDropOutCell"
                ],
                "memo": []
            }
        },
        "DropOutCell.back": {
            "name": "back",
            "location": 324,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "output": [],
                "output_min_1": [],
                "state": []
            }
        },
        "DropOutCell.update_layer": {
            "name": "update_layer",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w": [],
                "b": []
            }
        },
        "DropOutCell.update_props": {
            "name": "update_props",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_prob": [],
                "output_prob": [],
                "state_prob": []
            }
        },
        "MultiRNNCell.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [],
                "cell": []
            }
        },
        "MultiRNNCell.__iter__": {
            "name": "__iter__",
            "location": 345,
            "return": [
                "_TMultiRNNCell"
            ],
            "arguments": {
                "self": [
                    "_TMultiRNNCell"
                ]
            }
        },
        "MultiRNNCell.__next__": {
            "name": "__next__",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiRNNCell.__len__": {
            "name": "__len__",
            "location": 357,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiRNNCell.__reversed__": {
            "name": "__reversed__",
            "location": 360,
            "return": [
                "reversed"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiRNNCell.zero_state": {
            "name": "zero_state",
            "location": 363,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "batch_size": [],
                "dtype": []
            }
        }
    },
    "orion-master/ml/network/embedding.py": {
        "Embedding.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition_strategy": []
            }
        },
        "Embedding._ps_mod": {
            "name": "_ps_mod",
            "location": 9,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "ids": [],
                "num_partitions": []
            }
        },
        "Embedding.scalar_partition": {
            "name": "scalar_partition",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Embedding.vector_partition": {
            "name": "vector_partition",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "partition": [],
                "ids_shape": []
            }
        },
        "Embedding.look_up": {
            "name": "look_up",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lookup_table": [],
                "ids": []
            }
        }
    },
    "orion-master/ml/network/lstm.py": {
        "LSTM.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_prob": [],
                "output_prob": [],
                "state_prob": [],
                "do_dropout": []
            }
        },
        "LSTM._validate_prob": {
            "name": "_validate_prob",
            "location": 24,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "_T0"
                ]
            }
        },
        "LSTM.training": {
            "name": "training",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LSTM.inputs": {
            "name": "inputs",
            "location": 43,
            "return": [
                "Tuple[(ml.network.matrix.Matrix, ml.network.matrix.Matrix)]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "labels": []
            }
        },
        "LSTM.embedding": {
            "name": "embedding",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shape": [],
                "inputs": []
            }
        },
        "LSTM.layers": {
            "name": "layers",
            "location": 55,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "lstm_size": [],
                "lstm_layers": [],
                "batch_size": [],
                "activation": []
            }
        },
        "LSTM.fully_connected": {
            "name": "fully_connected",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "output_units": [],
                "activation": []
            }
        },
        "LSTM.create_network": {
            "name": "create_network",
            "location": 80,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "cells": [],
                "inputs": [],
                "initial_state": []
            }
        },
        "LSTM.forward": {
            "name": "forward",
            "location": 109,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "embed": [],
                "state": []
            }
        },
        "LSTM.back": {
            "name": "back",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "loss": [],
                "outputs": [],
                "predictions": [],
                "states": [],
                "embed": []
            }
        }
    },
    "orion-master/ml/network/matrix.py": {
        "InitFn.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_fn": []
            }
        },
        "InitFn.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shape": [],
                "dtype": []
            }
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": [],
                "shape": [],
                "name": [],
                "init_fn": []
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__rmul__": {
            "name": "__rmul__",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ufunc": [],
                "method": []
            }
        },
        "Matrix.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Matrix._get_shape": {
            "name": "_get_shape",
            "location": 82,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "Matrix.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Matrix.shape": {
            "name": "shape",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dtype": {
            "name": "dtype",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.ndim": {
            "name": "ndim",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.size": {
            "name": "size",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.value": {
            "name": "value",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.T": {
            "name": "T",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.flatten": {
            "name": "flatten",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Matrix.argmax": {
            "name": "argmax",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.reverse": {
            "name": "reverse",
            "location": 142,
            "return": [
                "_TMatrix"
            ],
            "arguments": {
                "self": [
                    "_TMatrix"
                ]
            }
        }
    },
    "orion-master/ml/network/state.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [],
                "h": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "orion-master/ml/network/__init__.py": {},
    "orion-master/ml/ops/activation.py": {
        "Activation.get_derivative": {
            "name": "get_derivative",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "fn": []
            }
        },
        "Sigmoid.logistic": {
            "name": "logistic",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "Sigmoid.logistic_derivative": {
            "name": "logistic_derivative",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "Hyperbolic.tanh": {
            "name": "tanh",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "Hyperbolic.tanh_derivative": {
            "name": "tanh_derivative",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "ReLU.noisy": {
            "name": "noisy",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "ReLU.noisy_derivative": {
            "name": "noisy_derivative",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "Softmax.probability": {
            "name": "probability",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "Softmax.derivative": {
            "name": "derivative",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "z": []
            }
        }
    },
    "orion-master/ml/ops/array.py": {
        "change_mayor": {
            "name": "change_mayor",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "_broadcast_attempt": {
            "name": "_broadcast_attempt",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "broadcast_attempt": {
            "name": "broadcast_attempt",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "axis": []
            }
        }
    },
    "orion-master/ml/ops/loss.py": {
        "cross_entropy": {
            "name": "cross_entropy",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": [],
                "q": [],
                "estimate": []
            }
        },
        "softmax_cross_entropy": {
            "name": "softmax_cross_entropy",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "labels": [],
                "logits": []
            }
        }
    },
    "orion-master/ml/ops/training.py": {
        "Adam.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta1": [],
                "beta2": [],
                "epsilon": []
            }
        },
        "Adam._update_moment": {
            "name": "_update_moment",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "decay_rate": [],
                "moment": [],
                "gradient": []
            }
        },
        "Adam._correct_moment": {
            "name": "_correct_moment",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "decay_rate": [],
                "moment": []
            }
        },
        "Adam._update_parameter": {
            "name": "_update_parameter",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [],
                "unit_m_w": [],
                "unit_v_w": [],
                "unit_m_b": [],
                "unit_v_b": []
            }
        },
        "Adam.minimize": {
            "name": "minimize",
            "location": 34,
            "return": [
                "Tuple[(_T5, _T6, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "error": [],
                "output": [],
                "output_1": [],
                "cell": [],
                "state": [],
                "m": [
                    "_T5"
                ],
                "v": [
                    "_T6"
                ]
            }
        }
    },
    "orion-master/ml/ops/__init__.py": {},
    "orion-master/utils/addfunc.py": {
        "add_class_method": {
            "name": "add_class_method",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "add_class_method.decorator": {
            "name": "decorator",
            "location": 5,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "add_class_method.decorator.wrapper": {
            "name": "wrapper",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "orion-master/utils/logger.py": {
        "getLogger": {
            "name": "getLogger",
            "location": 9,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "orion-master/utils/mongo.py": {
        "delete_item_s_in_collection": {
            "name": "delete_item_s_in_collection",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [],
                "items": []
            }
        },
        "get_collection": {
            "name": "get_collection",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "db": [],
                "name": []
            }
        },
        "get_connection": {
            "name": "get_connection",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "orion-master/utils/request.py": {
        "Method.validate": {
            "name": "validate",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "method": []
            }
        },
        "Request.run": {
            "name": "run",
            "location": 29,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "str"
                ],
                "method": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "headers": [
                    "Dict[(str, str)]"
                ],
                "auth": [
                    "Tuple[(str, str)]"
                ],
                "time_out": [
                    "int"
                ]
            }
        }
    },
    "orion-master/utils/__init__.py": {}
}
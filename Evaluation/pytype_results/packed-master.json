{
    "packed-master/setup.py": {
        "find_required": {
            "name": "find_required",
            "location": 4,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "find_dev_required": {
            "name": "find_dev_required",
            "location": 9,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "packed-master/packed/_packable.py": {
        "Packable.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": []
            }
        },
        "Packable.__call__": {
            "name": "__call__",
            "location": 12,
            "return": [
                "Union[(Callable[([Any], Any)], _T0)]"
            ],
            "arguments": {
                "self": [],
                "cls_or_name": [
                    "_T0@@"
                ]
            }
        },
        "Packable.__call__.wrapped": {
            "name": "wrapped",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "packed-master/packed/_packer.py": {
        "Packer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolver": []
            }
        },
        "Packer._pack": {
            "name": "_pack",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "packable": []
            }
        },
        "Packer.pack": {
            "name": "pack",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "packable": []
            }
        },
        "Packer._unpack": {
            "name": "_unpack",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "packed": [],
                "ext_resolvers": []
            }
        },
        "Packer.unpack": {
            "name": "unpack",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "packed": [],
                "ext_resolvers": []
            }
        }
    },
    "packed-master/packed/_resolver.py": {
        "Resolver.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolver.register": {
            "name": "register",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "Resolver.resolve_type": {
            "name": "resolve_type",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Resolver.resolve_name": {
            "name": "resolve_name",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        }
    },
    "packed-master/packed/_version.py": {},
    "packed-master/packed/__init__.py": {
        "pack": {
            "name": "pack",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "packable": []
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "packed": [],
                "ext_resolvers": []
            }
        }
    },
    "packed-master/tests/test_compatibility.py": {
        "test_backward_compatibility": {
            "name": "test_backward_compatibility",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_compatibility": {
            "name": "test_forward_compatibility",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CustomClassV1.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "CustomClassV1.__packed__": {
            "name": "__packed__",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomClassV1.__unpacked__": {
            "name": "__unpacked__",
            "location": 14,
            "return": [
                "_TCustomClassV1@@CustomClassV1@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCustomClassV1]"
                ]
            }
        },
        "CustomClassV2.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "new_field": []
            }
        },
        "CustomClassV2.__packed__": {
            "name": "__packed__",
            "location": 23,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomClassV2.__unpacked__": {
            "name": "__unpacked__",
            "location": 27,
            "return": [
                "_TCustomClassV2@@CustomClassV2@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCustomClassV2]"
                ]
            }
        }
    },
    "packed-master/tests/test_exported_interfaces.py": {
        "test_exported_interfaces": {
            "name": "test_exported_interfaces",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exported_interfaces.CustomClass.__packed__": {
            "name": "__packed__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "packed-master/tests/test_packable.py": {
        "resolver_": {
            "name": "resolver_",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_packable": {
            "name": "test_packable",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_packable_with_custom_name": {
            "name": "test_packable_with_custom_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "packed-master/tests/test_packer.py": {
        "resolver": {
            "name": "resolver",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "packer": {
            "name": "packer",
            "location": 17,
            "return": [],
            "arguments": {
                "resolver": []
            }
        },
        "test_pack": {
            "name": "test_pack",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_inherited": {
            "name": "test_pack_inherited",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_unregistered": {
            "name": "test_pack_unregistered",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pack_without_packed_method": {
            "name": "test_pack_without_packed_method",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack": {
            "name": "test_unpack",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_with_ext_resolver": {
            "name": "test_unpack_with_ext_resolver",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_with_ext_resolvers": {
            "name": "test_unpack_with_ext_resolvers",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unpack_native_types": {
            "name": "test_unpack_native_types",
            "location": 150,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_unpack_with_ext_resolver.resolver": {
            "name": "resolver",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_unpack_with_ext_resolvers.resolver": {
            "name": "resolver",
            "location": 131,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_pack.CustomClass.__packed__": {
            "name": "__packed__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_pack_inherited.ParentClass.__packed__": {
            "name": "__packed__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_pack_unregistered.CustomClass.__packed__": {
            "name": "__packed__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_unpack.CustomClass.__packed__": {
            "name": "__packed__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_unpack_with_ext_resolver.CustomClass.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_unpack_with_ext_resolver.CustomClass.__packed__": {
            "name": "__packed__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_unpack_with_ext_resolvers.ChildClass.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_unpack_with_ext_resolvers.ChildClass.__packed__": {
            "name": "__packed__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "packed-master/tests/test_resolver.py": {
        "resolver": {
            "name": "resolver",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_register": {
            "name": "test_register",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_already_registered": {
            "name": "test_register_already_registered",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_already_registered_with_custom_name": {
            "name": "test_register_already_registered_with_custom_name",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_type": {
            "name": "test_resolve_type",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_type_with_custom_name": {
            "name": "test_resolve_type_with_custom_name",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_type_without_register": {
            "name": "test_resolve_type_without_register",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_name": {
            "name": "test_resolve_name",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_custom_name": {
            "name": "test_resolve_custom_name",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_name_without_register": {
            "name": "test_resolve_name_without_register",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "packed-master/tests/__init__.py": {},
    "packed-master/tests/_test_utils/steps.py": {
        "Context.__enter__": {
            "name": "__enter__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__exit__": {
            "name": "__exit__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "_TContext@@Context@@"
            ],
            "arguments": {
                "self": [
                    "_TContext@@Context@@"
                ]
            }
        }
    }
}
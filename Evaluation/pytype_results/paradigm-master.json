{
    "paradigm-master/setup.py": {},
    "paradigm-master/paradigm/catalog.py": {
        "is_attribute": {
            "name": "is_attribute",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "Path"
                ]
            }
        },
        "paths_factory": {
            "name": "paths_factory",
            "location": 77,
            "return": [
                "Iterable[Path]"
            ],
            "arguments": {
                "object_": [
                    "Union[(types.BuiltinFunctionType, types.MethodDescriptorType, Callable)]"
                ]
            }
        },
        "from_module": {
            "name": "from_module",
            "location": 105,
            "return": [
                "Path"
            ],
            "arguments": {
                "object_": [
                    "module"
                ]
            }
        },
        "from_relative_file_path": {
            "name": "from_relative_file_path",
            "location": 109,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "from_string": {
            "name": "from_string",
            "location": 131,
            "return": [
                "Path"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "module_name_factory": {
            "name": "module_name_factory",
            "location": 138,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "module_name_from_string": {
            "name": "module_name_from_string",
            "location": 148,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "module_name_from_class_or_function": {
            "name": "module_name_from_class_or_function",
            "location": 174,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "module_name_from_method_descriptor": {
            "name": "module_name_from_method_descriptor",
            "location": 185,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "is_package": {
            "name": "is_package",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "module_path": [
                    "Path"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.parts": {
            "name": "parts",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Path"
                ]
            }
        },
        "Path.__hash__": {
            "name": "__hash__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.join": {
            "name": "join",
            "location": 54,
            "return": [
                "_TPath"
            ],
            "arguments": {
                "self": [
                    "_TPath"
                ],
                "other": [
                    "_TPath"
                ]
            }
        },
        "Path.parent": {
            "name": "parent",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.with_parent": {
            "name": "with_parent",
            "location": 63,
            "return": [
                "_TPath"
            ],
            "arguments": {
                "self": [
                    "_TPath"
                ],
                "parent": [
                    "_TPath"
                ]
            }
        },
        "Path.is_child_of": {
            "name": "is_child_of",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Path"
                ]
            }
        },
        "from_relative_file_path.to_module_name": {
            "name": "to_module_name",
            "location": 114,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "paths_factory.to_path": {
            "name": "to_path",
            "location": 89,
            "return": [],
            "arguments": {
                "object_name": []
            }
        }
    },
    "paradigm-master/paradigm/file_system.py": {
        "find_files": {
            "name": "find_files",
            "location": 14,
            "return": [
                "Iterator[pathlib.Path]"
            ],
            "arguments": {
                "directory": [
                    "pathlib.Path"
                ]
            }
        },
        "find_files.to_paths": {
            "name": "to_paths",
            "location": 15,
            "return": [],
            "arguments": {
                "root": [],
                "files": []
            }
        }
    },
    "paradigm-master/paradigm/hints.py": {},
    "paradigm-master/paradigm/models.py": {
        "to_parameters_by_kind": {
            "name": "to_parameters_by_kind",
            "location": 76,
            "return": [
                "Dict[(Parameter.Kind, List[Parameter])]"
            ],
            "arguments": {
                "parameters": [
                    "Iterable[Parameter]"
                ]
            }
        },
        "to_parameters_by_name": {
            "name": "to_parameters_by_name",
            "location": 84,
            "return": [
                "Dict[(str, Parameter)]"
            ],
            "arguments": {
                "parameters": [
                    "Iterable[Parameter]"
                ]
            }
        },
        "all_parameters_has_defaults": {
            "name": "all_parameters_has_defaults",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "parameters": [
                    "Iterable[Parameter]"
                ]
            }
        },
        "_bind_positionals": {
            "name": "_bind_positionals",
            "location": 270,
            "return": [
                "Tuple[(Parameter, ...)]"
            ],
            "arguments": {
                "parameters": [
                    "Tuple[(Parameter, ...)]"
                ],
                "args": [
                    "Tuple[(Domain, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Domain)]"
                ]
            }
        },
        "_bind_keywords": {
            "name": "_bind_keywords",
            "location": 301,
            "return": [
                "Tuple[(Parameter, ...)]"
            ],
            "arguments": {
                "parameters": [
                    "Tuple[(Parameter, ...)]"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Parameter"
                ]
            }
        },
        "Parameter.__hash__": {
            "name": "__hash__",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.all_set": {
            "name": "all_set",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.expects": {
            "name": "expects",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.bind": {
            "name": "bind",
            "location": 109,
            "return": [
                "_TBase"
            ],
            "arguments": {
                "self": [
                    "_TBase"
                ]
            }
        },
        "Plain.__new__": {
            "name": "__new__",
            "location": 117,
            "return": [
                "_TPlain"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPlain]"
                ]
            }
        },
        "Plain.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plain.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Base"
                ]
            }
        },
        "Plain.__hash__": {
            "name": "__hash__",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plain.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plain.parameters_by_kind": {
            "name": "parameters_by_kind",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Plain.all_set": {
            "name": "all_set",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plain.expects": {
            "name": "expects",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plain.bind": {
            "name": "bind",
            "location": 260,
            "return": [
                "Base"
            ],
            "arguments": {
                "self": []
            }
        },
        "_bind_positionals.is_positional": {
            "name": "is_positional",
            "location": 275,
            "return": [],
            "arguments": {
                "parameter": []
            }
        },
        "Overloaded.__new__": {
            "name": "__new__",
            "location": 333,
            "return": [
                "Base"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Overloaded.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.__eq__": {
            "name": "__eq__",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Base"
                ]
            }
        },
        "Overloaded.__hash__": {
            "name": "__hash__",
            "location": 354,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.__str__": {
            "name": "__str__",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.all_set": {
            "name": "all_set",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.expects": {
            "name": "expects",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.bind": {
            "name": "bind",
            "location": 370,
            "return": [
                "Base"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.Kind.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.Kind.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Overloaded.__init__.flatten": {
            "name": "flatten",
            "location": 341,
            "return": [],
            "arguments": {
                "signature": []
            }
        }
    },
    "paradigm-master/paradigm/modules.py": {
        "safe_import": {
            "name": "safe_import",
            "location": 7,
            "return": [
                "Optional[module]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "paradigm-master/paradigm/namespaces.py": {
        "from_module_path": {
            "name": "from_module_path",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "object_": [
                    "catalog.Path"
                ]
            }
        },
        "from_module": {
            "name": "from_module",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "object_": [
                    "module"
                ]
            }
        },
        "contains": {
            "name": "contains",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "Dict[(str, Any)]"
                ],
                "path": [
                    "catalog.Path"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "namespace": [
                    "Dict[(str, Any)]"
                ],
                "path": [
                    "catalog.Path"
                ]
            }
        }
    },
    "paradigm-master/paradigm/signatures.py": {
        "factory": {
            "name": "factory",
            "location": 33,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "from_callable": {
            "name": "from_callable",
            "location": 38,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "from_raw_signature": {
            "name": "from_raw_signature",
            "location": 43,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "from_partial": {
            "name": "from_partial",
            "location": 236,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "slice_parameters": {
            "name": "slice_parameters",
            "location": 241,
            "return": [],
            "arguments": {
                "signature": [],
                "slice_": []
            }
        },
        "slice_plain_parameters": {
            "name": "slice_plain_parameters",
            "location": 248,
            "return": [],
            "arguments": {
                "signature": [],
                "slice_": []
            }
        },
        "slice_overloaded_parameters": {
            "name": "slice_overloaded_parameters",
            "location": 254,
            "return": [],
            "arguments": {
                "signature": [],
                "slice_": []
            }
        },
        "to_max_parameters_count": {
            "name": "to_max_parameters_count",
            "location": 262,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "to_max_plain_parameters_count": {
            "name": "to_max_plain_parameters_count",
            "location": 268,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "to_max_overloaded_parameters_count": {
            "name": "to_max_overloaded_parameters_count",
            "location": 273,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "from_raw_signature.normalize_parameter": {
            "name": "normalize_parameter",
            "location": 44,
            "return": [],
            "arguments": {
                "raw_parameter": []
            }
        },
        "from_class": {
            "name": "from_class",
            "location": 111,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "find_initializer_or_constructor": {
            "name": "find_initializer_or_constructor",
            "location": 65,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "class_": [
                    "type"
                ]
            }
        },
        "with_typeshed": {
            "name": "with_typeshed",
            "location": 79,
            "return": [
                "Callable[([Callable], paradigm.models.Base)]"
            ],
            "arguments": {
                "function": [
                    "Callable[([Callable], paradigm.models.Base)]"
                ]
            }
        },
        "to_signature": {
            "name": "to_signature",
            "location": 151,
            "return": [
                "Tuple[(int, Optional[paradigm.models.Base])]"
            ],
            "arguments": {
                "object_path": [
                    "catalog.Path"
                ],
                "module_path": [
                    "catalog.Path"
                ]
            }
        },
        "from_ast": {
            "name": "from_ast",
            "location": 164,
            "return": [
                "paradigm.models.Base"
            ],
            "arguments": {
                "signature_ast": [
                    "ast3.arguments"
                ]
            }
        },
        "to_positional_parameters": {
            "name": "to_positional_parameters",
            "location": 174,
            "return": [
                "Iterable[paradigm.models.Parameter]"
            ],
            "arguments": {
                "signature_ast": [
                    "ast3.arguments"
                ]
            }
        },
        "to_keyword_parameters": {
            "name": "to_keyword_parameters",
            "location": 187,
            "return": [
                "Iterable[paradigm.models.Parameter]"
            ],
            "arguments": {
                "signature_ast": [
                    "ast3.arguments"
                ]
            }
        },
        "to_variadic_positional_parameter": {
            "name": "to_variadic_positional_parameter",
            "location": 196,
            "return": [
                "Optional[paradigm.models.Parameter]"
            ],
            "arguments": {
                "signature_ast": [
                    "ast3.arguments"
                ]
            }
        },
        "to_variadic_keyword_parameter": {
            "name": "to_variadic_keyword_parameter",
            "location": 206,
            "return": [
                "Optional[paradigm.models.Parameter]"
            ],
            "arguments": {
                "signature_ast": [
                    "ast3.arguments"
                ]
            }
        },
        "to_parameter": {
            "name": "to_parameter",
            "location": 216,
            "return": [
                "paradigm.models.Parameter"
            ],
            "arguments": {
                "parameter_ast": [
                    "ast3.arg"
                ],
                "default_ast": [
                    "Optional[ast3.expr]"
                ]
            }
        },
        "with_typeshed.wrapped": {
            "name": "wrapped",
            "location": 82,
            "return": [],
            "arguments": {
                "object_": []
            }
        }
    },
    "paradigm-master/paradigm/sources.py": {
        "factory": {
            "name": "factory",
            "location": 20,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "from_module": {
            "name": "from_module",
            "location": 26,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "from_module_path": {
            "name": "from_module_path",
            "location": 34,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "generate_stubs_cache_items": {
            "name": "generate_stubs_cache_items",
            "location": 46,
            "return": [
                "Iterable[Tuple[(catalog.Path, pathlib.Path)]]"
            ],
            "arguments": {
                "root": [
                    "pathlib.Path"
                ]
            }
        },
        "is_stub": {
            "name": "is_stub",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "generate_stubs_cache_items.is_supported_version_directory": {
            "name": "is_supported_version_directory",
            "location": 50,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "generate_stubs_cache_items.to_versions": {
            "name": "to_versions",
            "location": 56,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "generate_stubs_cache_items.get_system_version": {
            "name": "get_system_version",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "generate_stubs_cache_items.module_full_name_factory": {
            "name": "module_full_name_factory",
            "location": 80,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "generate_stubs_cache_items.to_directory_items": {
            "name": "to_directory_items",
            "location": 88,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "generate_stubs_cache_items.to_directories_items": {
            "name": "to_directories_items",
            "location": 98,
            "return": [],
            "arguments": {
                "paths": []
            }
        },
        "generate_stubs_cache_items.to_versions.to_version": {
            "name": "to_version",
            "location": 62,
            "return": [],
            "arguments": {
                "raw_version": []
            }
        },
        "generate_stubs_cache_items.module_full_name_factory.to_module_path": {
            "name": "to_module_path",
            "location": 81,
            "return": [],
            "arguments": {
                "stub": []
            }
        },
        "generate_stubs_cache_items.to_directory_items.to_directory_item": {
            "name": "to_directory_item",
            "location": 93,
            "return": [],
            "arguments": {
                "stub": []
            }
        }
    },
    "paradigm-master/paradigm/__init__.py": {},
    "paradigm-master/paradigm/arboretum/base.py": {
        "to_functions_defs": {
            "name": "to_functions_defs",
            "location": 19,
            "return": [
                "Tuple[(int, List[ast3.AST])]"
            ],
            "arguments": {
                "object_path": [
                    "catalog.Path"
                ],
                "module_path": [
                    "catalog.Path"
                ]
            }
        }
    },
    "paradigm-master/paradigm/arboretum/construction.py": {
        "from_source_path": {
            "name": "from_source_path",
            "location": 6,
            "return": [
                "ast3.Module"
            ],
            "arguments": {
                "object_": [
                    "pathlib.Path"
                ]
            }
        },
        "from_node": {
            "name": "from_node",
            "location": 10,
            "return": [
                "ast3.Module"
            ],
            "arguments": {
                "object_": [
                    "ast3.AST"
                ]
            }
        }
    },
    "paradigm-master/paradigm/arboretum/conversion.py": {
        "to_typed_to_plain_visitor": {
            "name": "to_typed_to_plain_visitor",
            "location": 17,
            "return": [
                "Callable[([ast3.NodeTransformer, ast3.AST], Optional[_ast.AST])]"
            ],
            "arguments": {
                "cls": [
                    "Type[ast3.AST]"
                ]
            }
        },
        "to_subclasses": {
            "name": "to_subclasses",
            "location": 40,
            "return": [
                "Iterable[Type[Domain]]"
            ],
            "arguments": {
                "cls": [
                    "Type[Domain]"
                ]
            }
        },
        "to_typed_to_plain_visitor.visit": {
            "name": "visit",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TypedToPlain.__getattr__": {
            "name": "__getattr__",
            "location": 50,
            "return": [
                "Callable[([ast3.NodeTransformer, ast3.AST], Optional[_ast.AST])]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TypedToPlain.generic_visit": {
            "name": "generic_visit",
            "location": 53,
            "return": [
                "ast3.AST"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.AST"
                ]
            }
        },
        "to_typed_to_plain_visitor.deleter": {
            "name": "deleter",
            "location": 27,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "to_typed_to_plain_visitor.passer": {
            "name": "passer",
            "location": 22,
            "return": [],
            "arguments": {
                "_": [],
                "node": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/data_access.py": {
        "search_nodes": {
            "name": "search_nodes",
            "location": 9,
            "return": [
                "List[Union[(catalog.Path, typed_ast.ast3.AST)]]"
            ],
            "arguments": {
                "path": [
                    "catalog.Path"
                ]
            }
        }
    },
    "paradigm-master/paradigm/arboretum/evaluation.py": {
        "evaluate_node": {
            "name": "evaluate_node",
            "location": 21,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_name": {
            "name": "evaluate_name",
            "location": 30,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_ellipsis_or_num": {
            "name": "evaluate_ellipsis_or_num",
            "location": 38,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_name_constant": {
            "name": "evaluate_name_constant",
            "location": 46,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_attribute": {
            "name": "evaluate_attribute",
            "location": 54,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_subscript": {
            "name": "evaluate_subscript",
            "location": 65,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "evaluate_call": {
            "name": "evaluate_call",
            "location": 75,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_named_tuple_definition": {
            "name": "is_named_tuple_definition",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "ast3.Call"
                ]
            }
        },
        "is_overloaded_function": {
            "name": "is_overloaded_function",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "ast3.FunctionDef"
                ]
            }
        },
        "any_path_has_origin": {
            "name": "any_path_has_origin",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "to_actual_path": {
            "name": "to_actual_path",
            "location": 175,
            "return": [
                "catalog.Path"
            ],
            "arguments": {
                "node": [
                    "ast3.alias"
                ]
            }
        },
        "to_alias_path": {
            "name": "to_alias_path",
            "location": 179,
            "return": [
                "catalog.Path"
            ],
            "arguments": {
                "node": [
                    "ast3.alias"
                ]
            }
        },
        "to_alias_string": {
            "name": "to_alias_string",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "ast3.alias"
                ]
            }
        },
        "evaluate_call.field_to_parameter": {
            "name": "field_to_parameter",
            "location": 85,
            "return": [],
            "arguments": {
                "field_node": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/examination.py": {
        "conduct": {
            "name": "conduct",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "ast3.AST"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.visit_Import": {
            "name": "visit_Import",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Import"
                ]
            }
        },
        "Registry.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ImportFrom"
                ]
            }
        },
        "Registry.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.FunctionDef"
                ]
            }
        },
        "Registry.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ClassDef"
                ]
            }
        },
        "Registry.visit_Assign": {
            "name": "visit_Assign",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Assign"
                ]
            }
        },
        "Registry.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.AnnAssign"
                ]
            }
        },
        "Registry.batch_register": {
            "name": "batch_register",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "nodes": [
                    "List[Union[(catalog.Path, ast3.AST)]]"
                ]
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "node": [
                    "Union[(catalog.Path, ast3.AST)]"
                ]
            }
        },
        "Registry.evaluator": {
            "name": "evaluator",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/execution.py": {
        "execute": {
            "name": "execute",
            "location": 12,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "execute_statement": {
            "name": "execute_statement",
            "location": 21,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "execute_tree": {
            "name": "execute_tree",
            "location": 31,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/hints.py": {},
    "paradigm-master/paradigm/arboretum/leveling.py": {
        "to_parent_module_path": {
            "name": "to_parent_module_path",
            "location": 50,
            "return": [
                "catalog.Path"
            ],
            "arguments": {
                "object_": [
                    "ast3.ImportFrom"
                ]
            }
        },
        "evaluate_expression": {
            "name": "evaluate_expression",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": [
                    "ast3.expr"
                ]
            }
        },
        "expression_to_assignment": {
            "name": "expression_to_assignment",
            "location": 161,
            "return": [
                "ast3.Assign"
            ],
            "arguments": {
                "node": [
                    "ast3.expr"
                ]
            }
        },
        "to_flat_root": {
            "name": "to_flat_root",
            "location": 172,
            "return": [
                "ast3.Module"
            ],
            "arguments": {
                "module_path": [
                    "catalog.Path"
                ]
            }
        },
        "flatten_root": {
            "name": "flatten_root",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "module_root": [
                    "ast3.Module"
                ]
            }
        },
        "flatten_imports": {
            "name": "flatten_imports",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "module_root": [
                    "ast3.Module"
                ]
            }
        },
        "flatten_ifs": {
            "name": "flatten_ifs",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "module_root": [
                    "ast3.Module"
                ]
            }
        },
        "node_has_name": {
            "name": "node_has_name",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "ast3.AST"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "node_to_names": {
            "name": "node_to_names",
            "location": 230,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "class_def_or_function_def_to_name": {
            "name": "class_def_or_function_def_to_name",
            "location": 236,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "import_or_import_from_to_name": {
            "name": "import_or_import_from_to_name",
            "location": 242,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "left_search_within_children": {
            "name": "left_search_within_children",
            "location": 249,
            "return": [
                "Iterable"
            ],
            "arguments": {
                "node": [
                    "ast3.AST"
                ],
                "condition": [
                    "Callable[([ast3.AST], bool)]"
                ]
            }
        },
        "right_search_within_children": {
            "name": "right_search_within_children",
            "location": 260,
            "return": [
                "Generator[(ast3.AST, Any, None)]"
            ],
            "arguments": {
                "node": [],
                "condition": []
            }
        },
        "ImportsRectifier.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_path": [
                    "catalog.Path"
                ]
            }
        },
        "ImportsRectifier.visit_Import": {
            "name": "visit_Import",
            "location": 30,
            "return": [
                "Iterable[ast3.Import]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Import"
                ]
            }
        },
        "ImportsRectifier.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 34,
            "return": [
                "Iterable[ast3.ImportFrom]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ImportFrom"
                ]
            }
        },
        "ImportsRectifier.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 46,
            "return": [
                "ast3.FunctionDef"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.FunctionDef"
                ]
            }
        },
        "NamespaceUpdater.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceUpdater.visit_Import": {
            "name": "visit_Import",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Import"
                ]
            }
        },
        "NamespaceUpdater.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ImportFrom"
                ]
            }
        },
        "NamespaceUpdater.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ClassDef"
                ]
            }
        },
        "NamespaceUpdater.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.FunctionDef"
                ]
            }
        },
        "NamespaceUpdater.resolve_path": {
            "name": "resolve_path",
            "location": 115,
            "return": [
                "catalog.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "catalog.Path"
                ]
            }
        },
        "IfsRectifier.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfsRectifier.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 129,
            "return": [
                "ast3.FunctionDef"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.FunctionDef"
                ]
            }
        },
        "IfsRectifier.visit_If": {
            "name": "visit_If",
            "location": 132,
            "return": [
                "Iterable[ast3.AST]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.If"
                ]
            }
        }
    },
    "paradigm-master/paradigm/arboretum/logical.py": {
        "are_similar": {
            "name": "are_similar",
            "location": 19,
            "return": [],
            "arguments": {
                "left_object": [],
                "right_object": []
            }
        },
        "are_lists_similar": {
            "name": "are_lists_similar",
            "location": 24,
            "return": [],
            "arguments": {
                "left_object": [],
                "right_object": []
            }
        },
        "are_dicts_similar": {
            "name": "are_dicts_similar",
            "location": 33,
            "return": [],
            "arguments": {
                "left_object": [],
                "right_object": []
            }
        },
        "are_nodes_similar": {
            "name": "are_nodes_similar",
            "location": 46,
            "return": [],
            "arguments": {
                "left_object": [],
                "right_object": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/reduction.py": {
        "factory": {
            "name": "factory",
            "location": 20,
            "return": [
                "Callable[([ast3.AST], None)]"
            ],
            "arguments": {}
        },
        "complete_new_style_class_bases": {
            "name": "complete_new_style_class_bases",
            "location": 27,
            "return": [
                "List[ast3.Expr]"
            ],
            "arguments": {
                "bases": [
                    "List[ast3.expr]"
                ]
            }
        },
        "is_module_path": {
            "name": "is_module_path",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_path": [
                    "catalog.Path"
                ]
            }
        },
        "Reducer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reducer.visit_Import": {
            "name": "visit_Import",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Import"
                ]
            }
        },
        "Reducer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ImportFrom"
                ]
            }
        },
        "Reducer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ClassDef"
                ]
            }
        },
        "Reducer.batch_register": {
            "name": "batch_register",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "nodes": [
                    "List[Union[(catalog.Path, ast3.AST)]]"
                ]
            }
        },
        "Reducer.batch_register_if_not_found": {
            "name": "batch_register_if_not_found",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "nodes": [
                    "List[Union[(catalog.Path, ast3.AST)]]"
                ]
            }
        },
        "Reducer.evaluator": {
            "name": "evaluator",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "paradigm-master/paradigm/arboretum/scoping.py": {
        "to_children_scope": {
            "name": "to_children_scope",
            "location": 10,
            "return": [
                "Dict[(catalog.Path, List[Union[(catalog.Path, typed_ast.ast3.AST)]])]"
            ],
            "arguments": {
                "path": [
                    "catalog.Path"
                ]
            }
        },
        "populate": {
            "name": "populate",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "module_path": [
                    "catalog.Path"
                ]
            }
        },
        "factory": {
            "name": "factory",
            "location": 34,
            "return": [
                "Dict[(catalog.Path, List[Union[(catalog.Path, typed_ast.ast3.AST)]])]"
            ],
            "arguments": {
                "module_path": [
                    "catalog.Path"
                ]
            }
        }
    },
    "paradigm-master/paradigm/arboretum/__init__.py": {},
    "paradigm-master/paradigm/definitions/base.py": {
        "is_supported": {
            "name": "is_supported",
            "location": 26,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "find_stdlib_modules_names": {
            "name": "find_stdlib_modules_names",
            "location": 34,
            "return": [
                "Iterable[str]"
            ],
            "arguments": {
                "directory_path": [
                    "pathlib.Path"
                ]
            }
        },
        "is_module_supported": {
            "name": "is_module_supported",
            "location": 57,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "is_source_path_supported": {
            "name": "is_source_path_supported",
            "location": 66,
            "return": [],
            "arguments": {
                "source_path": []
            }
        },
        "is_module_path_supported": {
            "name": "is_module_path_supported",
            "location": 80,
            "return": [],
            "arguments": {
                "module_path": []
            }
        },
        "find_spec": {
            "name": "find_spec",
            "location": 96,
            "return": [
                "Optional[importlib.machinery.ModuleSpec]"
            ],
            "arguments": {
                "module_path": [
                    "catalog.Path"
                ]
            }
        },
        "is_built_in_function_supported": {
            "name": "is_built_in_function_supported",
            "location": 106,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "is_class_supported": {
            "name": "is_class_supported",
            "location": 114,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "has_supported_python_source_file": {
            "name": "has_supported_python_source_file",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "module"
                ]
            }
        },
        "is_stdlib_object": {
            "name": "is_stdlib_object",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": []
            }
        },
        "is_stdlib_callable_supported": {
            "name": "is_stdlib_callable_supported",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "callable_": [
                    "Callable"
                ]
            }
        },
        "is_not_private": {
            "name": "is_not_private",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": [
                    "Union[(types.BuiltinFunctionType, types.MethodDescriptorType, Callable)]"
                ]
            }
        },
        "has_module": {
            "name": "has_module",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": []
            }
        },
        "find_stdlib_modules_names.is_stdlib_module_path": {
            "name": "is_stdlib_module_path",
            "location": 38,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "is_function_supported": {
            "name": "is_function_supported",
            "location": 129,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "is_method_descriptor_supported": {
            "name": "is_method_descriptor_supported",
            "location": 135,
            "return": [],
            "arguments": {
                "object_": []
            }
        },
        "is_wrapper_descriptor_supported": {
            "name": "is_wrapper_descriptor_supported",
            "location": 142,
            "return": [],
            "arguments": {
                "object_": []
            }
        }
    },
    "paradigm-master/paradigm/definitions/unsupported.py": {},
    "paradigm-master/paradigm/definitions/utils.py": {
        "_add": {
            "name": "_add",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "set_": [
                    "set"
                ],
                "module_name": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_add_module": {
            "name": "_add_module",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "set_": [
                    "set"
                ],
                "module_name": [
                    "str"
                ]
            }
        },
        "_search_by_path": {
            "name": "_search_by_path",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "module": [
                    "module"
                ],
                "path": [
                    "catalog.Path"
                ]
            }
        },
        "_to_callables": {
            "name": "_to_callables",
            "location": 45,
            "return": [
                "Iterable[Callable]"
            ],
            "arguments": {
                "object_": [
                    "Union[(module, type)]"
                ]
            }
        },
        "_to_contents": {
            "name": "_to_contents",
            "location": 49,
            "return": [
                "list"
            ],
            "arguments": {
                "object_": [
                    "Union[(module, type)]"
                ]
            }
        },
        "_update": {
            "name": "_update",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "set_": [
                    "set"
                ],
                "module_name": [
                    "str"
                ],
                "names": [
                    "Iterable[str]"
                ]
            }
        },
        "_update_modules": {
            "name": "_update_modules",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "set_": [
                    "set"
                ],
                "modules_names": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "paradigm-master/paradigm/definitions/__init__.py": {},
    "paradigm-master/tests/configs.py": {},
    "paradigm-master/tests/conftest.py": {},
    "paradigm-master/tests/utils.py": {
        "equivalence": {
            "name": "equivalence",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "left_statement": [
                    "bool"
                ],
                "right_statement": [
                    "bool"
                ]
            }
        },
        "implication": {
            "name": "implication",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "antecedent": [
                    "bool"
                ],
                "consequent": [
                    "bool"
                ]
            }
        },
        "negate": {
            "name": "negate",
            "location": 28,
            "return": [
                "Callable[(..., bool)]"
            ],
            "arguments": {
                "predicate": [
                    "Callable[(..., bool)]"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 35,
            "return": [
                "Callable[([Tuple[(Domain, ...)]], Range)]"
            ],
            "arguments": {
                "function": [
                    "Callable[(..., Range)]"
                ]
            }
        },
        "round_trip_pickle": {
            "name": "round_trip_pickle",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "object_": []
            }
        },
        "negate.negated": {
            "name": "negated",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "pack.packed": {
            "name": "packed",
            "location": 36,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "paradigm-master/tests/__init__.py": {},
    "paradigm-master/tests/catalog_tests/strategies.py": {},
    "paradigm-master/tests/catalog_tests/test_is_attribute.py": {
        "test_relation_to_parent": {
            "name": "test_relation_to_parent",
            "location": 9,
            "return": [],
            "arguments": {
                "object_path": []
            }
        }
    },
    "paradigm-master/tests/catalog_tests/__init__.py": {},
    "paradigm-master/tests/definitions_tests/strategies.py": {
        "to_non_python_file": {
            "name": "to_non_python_file",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        }
    },
    "paradigm-master/tests/definitions_tests/test_is_module_path_supported.py": {
        "test_relation_with_find_spec": {
            "name": "test_relation_with_find_spec",
            "location": 12,
            "return": [],
            "arguments": {
                "module_path": []
            }
        }
    },
    "paradigm-master/tests/definitions_tests/test_is_source_path_supported.py": {
        "test_non_existent_file_path": {
            "name": "test_non_existent_file_path",
            "location": 12,
            "return": [],
            "arguments": {
                "non_existent_file_path": []
            }
        },
        "test_non_python_file_path": {
            "name": "test_non_python_file_path",
            "location": 17,
            "return": [],
            "arguments": {
                "file": []
            }
        }
    },
    "paradigm-master/tests/definitions_tests/__init__.py": {},
    "paradigm-master/tests/models_tests/test_all_set.py": {
        "test_relation_with_expects": {
            "name": "test_relation_with_expects",
            "location": 13,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_unexpected_args": {
            "name": "test_unexpected_args",
            "location": 18,
            "return": [],
            "arguments": {
                "signature_with_unexpected_args": []
            }
        },
        "test_unexpected_kwargs": {
            "name": "test_unexpected_kwargs",
            "location": 26,
            "return": [],
            "arguments": {
                "signature_with_unexpected_kwargs": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_bind.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 17,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_expected_args": {
            "name": "test_expected_args",
            "location": 24,
            "return": [],
            "arguments": {
                "signature_with_expected_args": []
            }
        },
        "test_expected_kwargs": {
            "name": "test_expected_kwargs",
            "location": 35,
            "return": [],
            "arguments": {
                "signature_with_expected_kwargs": []
            }
        },
        "signature_parameters_has_defaults": {
            "name": "signature_parameters_has_defaults",
            "location": 47,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "plain_signature_parameters_has_defaults": {
            "name": "plain_signature_parameters_has_defaults",
            "location": 55,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "overloaded_signature_parameters_has_defaults": {
            "name": "overloaded_signature_parameters_has_defaults",
            "location": 63,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_unexpected_args": {
            "name": "test_unexpected_args",
            "location": 73,
            "return": [],
            "arguments": {
                "signature_with_unexpected_args": []
            }
        },
        "test_unexpected_kwargs": {
            "name": "test_unexpected_kwargs",
            "location": 82,
            "return": [],
            "arguments": {
                "signature_with_unexpected_kwargs": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_equality.py": {
        "test_reflexivity": {
            "name": "test_reflexivity",
            "location": 9,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_symmetry": {
            "name": "test_symmetry",
            "location": 14,
            "return": [],
            "arguments": {
                "signature": [],
                "other_signature": []
            }
        },
        "test_transitivity": {
            "name": "test_transitivity",
            "location": 21,
            "return": [],
            "arguments": {
                "signature": [],
                "other_signature": [],
                "another_signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_expects.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_expected_args": {
            "name": "test_expected_args",
            "location": 25,
            "return": [],
            "arguments": {
                "signature_with_expected_kwargs": []
            }
        },
        "test_unexpected_args": {
            "name": "test_unexpected_args",
            "location": 33,
            "return": [],
            "arguments": {
                "signature_with_unexpected_args": []
            }
        },
        "test_unexpected_kwargs": {
            "name": "test_unexpected_kwargs",
            "location": 41,
            "return": [],
            "arguments": {
                "signature_with_unexpected_kwargs": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_hash.py": {
        "test_relation_with_equality": {
            "name": "test_relation_with_equality",
            "location": 9,
            "return": [],
            "arguments": {
                "signature": [],
                "other_signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_pickle.py": {
        "test_models": {
            "name": "test_models",
            "location": 11,
            "return": [],
            "arguments": {
                "parameter": [],
                "plain_signature": [],
                "overloaded_signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_repr.py": {
        "test_type": {
            "name": "test_type",
            "location": 9,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_plain": {
            "name": "test_plain",
            "location": 16,
            "return": [],
            "arguments": {
                "plain_signature": []
            }
        },
        "test_nesting": {
            "name": "test_nesting",
            "location": 24,
            "return": [],
            "arguments": {
                "overloaded_signature": []
            }
        },
        "test_evaluation": {
            "name": "test_evaluation",
            "location": 32,
            "return": [],
            "arguments": {
                "signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/test_str.py": {
        "test_type": {
            "name": "test_type",
            "location": 8,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "test_plain": {
            "name": "test_plain",
            "location": 15,
            "return": [],
            "arguments": {
                "plain_signature": []
            }
        },
        "test_nesting": {
            "name": "test_nesting",
            "location": 23,
            "return": [],
            "arguments": {
                "overloaded_signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/__init__.py": {},
    "paradigm-master/tests/models_tests/strategies/base.py": {
        "is_signature_empty": {
            "name": "is_signature_empty",
            "location": 44,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "is_plain_signature_empty": {
            "name": "is_plain_signature_empty",
            "location": 50,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "is_overloaded_signature_empty": {
            "name": "is_overloaded_signature_empty",
            "location": 55,
            "return": [],
            "arguments": {
                "signature": []
            }
        }
    },
    "paradigm-master/tests/models_tests/strategies/factories.py": {
        "to_parameters": {
            "name": "to_parameters",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "to_plain_signatures": {
            "name": "to_plain_signatures",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "to_overloaded_signatures": {
            "name": "to_overloaded_signatures",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "bases": []
            }
        },
        "to_signature_with_unexpected_args": {
            "name": "to_signature_with_unexpected_args",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_signature_with_unexpected_kwargs": {
            "name": "to_signature_with_unexpected_kwargs",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_signature_with_expected_args": {
            "name": "to_signature_with_expected_args",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_signature_with_expected_kwargs": {
            "name": "to_signature_with_expected_kwargs",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_expected_args": {
            "name": "to_expected_args",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_expected_kwargs": {
            "name": "to_expected_kwargs",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_unexpected_args": {
            "name": "to_unexpected_args",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "to_unexpected_kwargs": {
            "name": "to_unexpected_kwargs",
            "location": 183,
            "return": [
                "Any"
            ],
            "arguments": {
                "signature": [
                    "paradigm.models.Base"
                ]
            }
        },
        "signature_to_max_positionals_count": {
            "name": "signature_to_max_positionals_count",
            "location": 194,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "signature_to_min_positionals_count": {
            "name": "signature_to_min_positionals_count",
            "location": 200,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "plain_signature_to_positionals_count": {
            "name": "plain_signature_to_positionals_count",
            "location": 207,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "overloaded_signature_to_max_positionals_count": {
            "name": "overloaded_signature_to_max_positionals_count",
            "location": 216,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "overloaded_signature_to_min_positionals_count": {
            "name": "overloaded_signature_to_min_positionals_count",
            "location": 223,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "signature_to_keywords_intersection": {
            "name": "signature_to_keywords_intersection",
            "location": 230,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "signature_to_keywords_union": {
            "name": "signature_to_keywords_union",
            "location": 237,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "plain_signature_to_keywords": {
            "name": "plain_signature_to_keywords",
            "location": 244,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "overloaded_signature_to_keywords_intersection": {
            "name": "overloaded_signature_to_keywords_intersection",
            "location": 253,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "overloaded_signature_to_keywords_union": {
            "name": "overloaded_signature_to_keywords_union",
            "location": 270,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "to_parameters.normalize_mapping": {
            "name": "normalize_mapping",
            "location": 35,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "to_plain_signatures.extend": {
            "name": "extend",
            "location": 74,
            "return": [],
            "arguments": {
                "draw": [],
                "base": []
            }
        },
        "overloaded_signature_to_keywords_intersection.intersect": {
            "name": "intersect",
            "location": 258,
            "return": [],
            "arguments": {
                "left_dictionary": [],
                "right_dictionary": []
            }
        },
        "overloaded_signature_to_keywords_union.unite": {
            "name": "unite",
            "location": 275,
            "return": [],
            "arguments": {
                "left_dictionary": [],
                "right_dictionary": []
            }
        },
        "to_plain_signatures.extend.is_kind_valid": {
            "name": "is_kind_valid",
            "location": 82,
            "return": [],
            "arguments": {
                "parameter": []
            }
        },
        "to_plain_signatures.extend.normalize": {
            "name": "normalize",
            "location": 88,
            "return": [],
            "arguments": {
                "parameter": []
            }
        }
    },
    "paradigm-master/tests/models_tests/strategies/__init__.py": {},
    "paradigm-master/tests/namespaces_tests/strategies.py": {
        "to_namespaces_with_non_empty_objects_paths": {
            "name": "to_namespaces_with_non_empty_objects_paths",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "namespace": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "paradigm-master/tests/namespaces_tests/test_contains.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 12,
            "return": [],
            "arguments": {
                "namespace_with_object_path": []
            }
        }
    },
    "paradigm-master/tests/namespaces_tests/test_from_module_path.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [],
            "arguments": {
                "module_path": []
            }
        }
    },
    "paradigm-master/tests/namespaces_tests/__init__.py": {},
    "paradigm-master/tests/signatures_tests/strategies.py": {
        "to_inner_callables": {
            "name": "to_inner_callables",
            "location": 23,
            "return": [
                "list"
            ],
            "arguments": {
                "objects": [
                    "List[Union[(module, type)]]"
                ]
            }
        },
        "is_method_descriptor": {
            "name": "is_method_descriptor",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": []
            }
        },
        "is_wrapper_descriptor": {
            "name": "is_wrapper_descriptor",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "object_": []
            }
        }
    },
    "paradigm-master/tests/signatures_tests/test_factory.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 29,
            "return": [],
            "arguments": {
                "built_in_function": [],
                "class_": [],
                "function": [],
                "method": [],
                "method_descriptor": [],
                "wrapper_descriptor": [],
                "partial_callable": [],
                "top_coverage_callable": []
            }
        },
        "test_overloaded": {
            "name": "test_overloaded",
            "location": 53,
            "return": [],
            "arguments": {
                "callable_": []
            }
        },
        "test_fail": {
            "name": "test_fail",
            "location": 63,
            "return": [],
            "arguments": {
                "callable_": []
            }
        }
    },
    "paradigm-master/tests/signatures_tests/__init__.py": {},
    "paradigm-master/tests/sources_tests/strategies.py": {
        "is_python_module": {
            "name": "is_python_module",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "module"
                ]
            }
        },
        "is_python_package": {
            "name": "is_python_package",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": [
                    "module"
                ]
            }
        }
    },
    "paradigm-master/tests/sources_tests/test_from_module.py": {
        "test_plain_module": {
            "name": "test_plain_module",
            "location": 12,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "test_package": {
            "name": "test_package",
            "location": 22,
            "return": [],
            "arguments": {
                "package": []
            }
        }
    },
    "paradigm-master/tests/sources_tests/__init__.py": {},
    "paradigm-master/tests/strategies/catalog.py": {},
    "paradigm-master/tests/strategies/utils.py": {
        "to_homogeneous_tuples": {
            "name": "to_homogeneous_tuples",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "elements": []
            }
        },
        "to_valid_length": {
            "name": "to_valid_length",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "parts": [
                    "List[str]"
                ]
            }
        },
        "is_valid_source": {
            "name": "is_valid_source",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "paradigm-master/tests/strategies/__init__.py": {}
}
{
    "patchwork-master/patchwork/actions.py": {
        "Action.execute": {
            "name": "execute",
            "location": 9,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "context": []
            }
        },
        "Scratch.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scratch_text": []
            }
        },
        "Scratch.execute": {
            "name": "execute",
            "location": 33,
            "return": [
                "Tuple[(patchwork.context.Context, List[nothing])]"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "context": []
            }
        },
        "AskSubquestion.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_text": []
            }
        },
        "AskSubquestion.execute": {
            "name": "execute",
            "location": 77,
            "return": [
                "Tuple[(patchwork.context.Context, List[patchwork.context.Context])]"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "context": []
            }
        },
        "Reply.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reply_text": []
            }
        },
        "Reply.execute": {
            "name": "execute",
            "location": 135,
            "return": [
                "Tuple[(None, List[patchwork.context.Context])]"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "context": []
            }
        },
        "Unlock.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unlock_text": []
            }
        },
        "Unlock.execute": {
            "name": "execute",
            "location": 173,
            "return": [
                "Tuple[(None, List[patchwork.context.Context])]"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "context": []
            }
        }
    },
    "patchwork-master/patchwork/context.py": {
        "_can_advance_promise": {
            "name": "_can_advance_promise",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "db": [],
                "wsaddr": [],
                "promise": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_link": [],
                "db": [],
                "unlocked_locations": [],
                "parent": []
            }
        },
        "Context.to_dry": {
            "name": "to_dry",
            "location": 62,
            "return": [
                "DryContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.from_dry": {
            "name": "from_dry",
            "location": 66,
            "return": [
                "_TContext@@Context@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContext]"
                ],
                "dry_context": [],
                "db": []
            }
        },
        "Context._name_pointers": {
            "name": "_name_pointers",
            "location": 70,
            "return": [
                "Tuple[(Dict[(Any, str)], Dict[(str, Any)])]"
            ],
            "arguments": {
                "self": [],
                "workspace_link": [],
                "db": []
            }
        },
        "Context.unlocked_locations_from_workspace": {
            "name": "unlocked_locations_from_workspace",
            "location": 99,
            "return": [
                "Set[_T0]"
            ],
            "arguments": {
                "self": [],
                "workspace_link": [
                    "_T0@@"
                ],
                "db": []
            }
        },
        "Context.name_pointers_for_workspace": {
            "name": "name_pointers_for_workspace",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "workspace_link": [],
                "db": []
            }
        },
        "Context.to_str": {
            "name": "to_str",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Context.is_own_ancestor": {
            "name": "is_own_ancestor",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Context.can_advance_promise": {
            "name": "can_advance_promise",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "promise": []
            }
        },
        "Context.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__hash__": {
            "name": "__hash__",
            "location": 168,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__eq__": {
            "name": "__eq__",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Context._name_pointers.assign": {
            "name": "assign",
            "location": 78,
            "return": [],
            "arguments": {
                "link": [],
                "string": []
            }
        }
    },
    "patchwork-master/patchwork/datastore.py": {
        "Address.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Address.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datastore.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datastore.dereference": {
            "name": "dereference",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "Datastore.canonicalize": {
            "name": "canonicalize",
            "location": 37,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "_T0@@"
                ]
            }
        },
        "Datastore.make_promise": {
            "name": "make_promise",
            "location": 45,
            "return": [
                "Address"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datastore.register_promisee": {
            "name": "register_promisee",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "promisee": []
            }
        },
        "Datastore.get_promisees": {
            "name": "get_promisees",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "Datastore.resolve_promise": {
            "name": "resolve_promise",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "content": []
            }
        },
        "Datastore.insert": {
            "name": "insert",
            "location": 67,
            "return": [
                "Address"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Datastore.is_fulfilled": {
            "name": "is_fulfilled",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TransactionAccumulator.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "TransactionAccumulator.dereference": {
            "name": "dereference",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TransactionAccumulator.canonicalize": {
            "name": "canonicalize",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TransactionAccumulator.make_promise": {
            "name": "make_promise",
            "location": 121,
            "return": [
                "Address"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionAccumulator.register_promisee": {
            "name": "register_promisee",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "promisee": []
            }
        },
        "TransactionAccumulator.get_promisees": {
            "name": "get_promisees",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TransactionAccumulator.resolve_promise": {
            "name": "resolve_promise",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "content": []
            }
        },
        "TransactionAccumulator.insert": {
            "name": "insert",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TransactionAccumulator.is_fulfilled": {
            "name": "is_fulfilled",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TransactionAccumulator.commit": {
            "name": "commit",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "patchwork-master/patchwork/hypertext.py": {
        "visit_unlocked_region": {
            "name": "visit_unlocked_region",
            "location": 10,
            "return": [
                "Generator[(_T1, Any, None)]"
            ],
            "arguments": {
                "template_link": [],
                "workspace_link": [
                    "_T1@@"
                ],
                "db": [],
                "unlocked_locations": []
            }
        },
        "Hypertext.links": {
            "name": "links",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hypertext.to_str": {
            "name": "to_str",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "display_map": []
            }
        },
        "Hypertext.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hypertext.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hypertext.__hash__": {
            "name": "__hash__",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawHypertext.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunks": []
            }
        },
        "RawHypertext.links": {
            "name": "links",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawHypertext.to_str": {
            "name": "to_str",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "display_map": []
            }
        },
        "Workspace.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "question_link": [],
                "answer_promise": [],
                "final_workspace_promise": [],
                "scratchpad_link": [],
                "subquestions": [],
                "predecessor_link": []
            }
        },
        "Workspace.links": {
            "name": "links",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.to_str": {
            "name": "to_str",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "display_map": []
            }
        }
    },
    "patchwork-master/patchwork/interface.py": {
        "UserInterface.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "UserInterface.update_prompt": {
            "name": "update_prompt",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserInterface.precmd": {
            "name": "precmd",
            "location": 27,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "_T0@@"
                ]
            }
        },
        "UserInterface.emptyline": {
            "name": "emptyline",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserInterface.postcmd": {
            "name": "postcmd",
            "location": 34,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "stop": [
                    "_T0@@"
                ],
                "line": []
            }
        },
        "UserInterface._do": {
            "name": "_do",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "prefix": [],
                "action": []
            }
        },
        "UserInterface.do_ask": {
            "name": "do_ask",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "UserInterface.do_reply": {
            "name": "do_reply",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "UserInterface.do_unlock": {
            "name": "do_unlock",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "UserInterface.do_scratch": {
            "name": "do_scratch",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "UserInterface.do_exit": {
            "name": "do_exit",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    },
    "patchwork-master/patchwork/main.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "patchwork-master/patchwork/scheduling.py": {
        "next_truthy": {
            "name": "next_truthy",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterator": [],
                "default": []
            }
        },
        "Automator.can_handle": {
            "name": "can_handle",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Automator.handle": {
            "name": "handle",
            "location": 94,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Memoizer.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoizer.remember": {
            "name": "remember",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "action": []
            }
        },
        "Memoizer.forget": {
            "name": "forget",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Memoizer.can_handle": {
            "name": "can_handle",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Memoizer.handle": {
            "name": "handle",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "Scheduler.ask_root_question": {
            "name": "ask_root_question",
            "location": 139,
            "return": [
                "Tuple[(patchwork.context.Context, Any)]"
            ],
            "arguments": {
                "self": [],
                "contents": []
            }
        },
        "Scheduler.resolve_action": {
            "name": "resolve_action",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "starting_context": [],
                "action": []
            }
        },
        "Scheduler.choose_context": {
            "name": "choose_context",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "promise": []
            }
        },
        "Scheduler.relinquish_context": {
            "name": "relinquish_context",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": []
            }
        },
        "Session.__enter__": {
            "name": "__enter__",
            "location": 215,
            "return": [
                "_TSession@@Session@@"
            ],
            "arguments": {
                "self": [
                    "_TSession@@Session@@"
                ]
            }
        },
        "Session.__exit__": {
            "name": "__exit__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.act": {
            "name": "act",
            "location": 224,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "RootQuestionSession.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler": [],
                "question": []
            }
        },
        "RootQuestionSession.choose_promise": {
            "name": "choose_promise",
            "location": 247,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "RootQuestionSession.format_root_answer": {
            "name": "format_root_answer",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootQuestionSession.act": {
            "name": "act",
            "location": 297,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        }
    },
    "patchwork-master/patchwork/text_manipulation.py": {
        "subnode": {
            "name": "subnode",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "recursively_create_hypertext": {
            "name": "recursively_create_hypertext",
            "location": 28,
            "return": [
                "patchwork.hypertext.RawHypertext"
            ],
            "arguments": {
                "pieces": [],
                "db": [],
                "pointer_link_map": []
            }
        },
        "recursively_insert_hypertext": {
            "name": "recursively_insert_hypertext",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": [],
                "db": [],
                "pointer_link_map": []
            }
        },
        "insert_raw_hypertext": {
            "name": "insert_raw_hypertext",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "content": [],
                "db": [],
                "pointer_link_map": []
            }
        },
        "create_raw_hypertext": {
            "name": "create_raw_hypertext",
            "location": 65,
            "return": [
                "patchwork.hypertext.RawHypertext"
            ],
            "arguments": {
                "content": [],
                "db": [],
                "pointer_link_map": []
            }
        },
        "make_link_texts": {
            "name": "make_link_texts",
            "location": 74,
            "return": [
                "Dict[(_T0, str)]"
            ],
            "arguments": {
                "root_link": [
                    "_T0@@"
                ],
                "db": [],
                "unlocked_locations": [],
                "pointer_names": []
            }
        }
    },
    "patchwork-master/patchwork/__init__.py": {},
    "patchwork-master/tests/test_basic.py": {
        "TestBasic.testRecursion": {
            "name": "testRecursion",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.testRootReplyWithPointers": {
            "name": "testRootReplyWithPointers",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.testNonRootPromise": {
            "name": "testNonRootPromise",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.testUnlockWorkspace": {
            "name": "testUnlockWorkspace",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.testUnlockedLockedPointer": {
            "name": "testUnlockedLockedPointer",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasic.testEqualStringRepresentation": {
            "name": "testEqualStringRepresentation",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "patchwork-master/tests/test_laziness.py": {
        "LazinessTest.testLaziness": {
            "name": "testLaziness",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "patchwork-master/tests/__init__.py": {}
}
{
    "peakina/cache.py": {
        "Cache.get_cache": {
            "name": "get_cache",
            "location": 25,
            "return": [
                "Cache"
            ],
            "arguments": {
                "kind": [
                    "CacheEnum"
                ]
            }
        },
        "Cache.should_invalidate": {
            "name": "should_invalidate",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Cache.get": {
            "name": "get",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "mtime": [],
                "expire": []
            }
        },
        "Cache.set": {
            "name": "set",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [],
                "mtime": []
            }
        },
        "Cache.delete": {
            "name": "delete",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "InMemoryCache.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryCache.get": {
            "name": "get",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "mtime": [],
                "expire": []
            }
        },
        "InMemoryCache.set": {
            "name": "set",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [],
                "mtime": []
            }
        },
        "InMemoryCache.delete": {
            "name": "delete",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "HDFCache.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_dir": []
            }
        },
        "HDFCache.get_metadata": {
            "name": "get_metadata",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDFCache.set_metadata": {
            "name": "set_metadata",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "HDFCache.get": {
            "name": "get",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "mtime": [],
                "expire": []
            }
        },
        "HDFCache.set": {
            "name": "set",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [],
                "mtime": []
            }
        },
        "HDFCache.delete": {
            "name": "delete",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "peakina/datapool.py": {
        "DataPool.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[(Hashable, Dict[(str, Any)])]"
                ],
                "data_sources_dir": [
                    "str"
                ],
                "cache": []
            }
        },
        "DataPool.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Hashable"
                ]
            }
        },
        "DataPool.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Hashable"
                ]
            }
        },
        "DataPool.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "peakina/datasource.py": {
        "read_pandas": {
            "name": "read_pandas",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "uri": [
                    "str"
                ]
            }
        },
        "DataSource.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSource.fetcher": {
            "name": "fetcher",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSource.hash": {
            "name": "hash",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSource.get_metadata": {
            "name": "get_metadata",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource._get_single_df": {
            "name": "_get_single_df",
            "location": 89,
            "return": [],
            "arguments": {
                "stream": [],
                "filetype": []
            }
        },
        "DataSource.get_matched_datasources": {
            "name": "get_matched_datasources",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSource.get_dfs": {
            "name": "get_dfs",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "DataSource.get_df": {
            "name": "get_df",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        }
    },
    "peakina/helpers.py": {
        "detect_type": {
            "name": "detect_type",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "is_regex": [
                    "bool"
                ]
            }
        },
        "bytes_head": {
            "name": "bytes_head",
            "location": 126,
            "return": [
                "bytes"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "str_head": {
            "name": "str_head",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "n": [
                    "int"
                ],
                "encoding": []
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "validate_encoding": {
            "name": "validate_encoding",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "encoding": []
            }
        },
        "detect_sep": {
            "name": "detect_sep",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "encoding": []
            }
        },
        "validate_sep": {
            "name": "validate_sep",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "sep": [
                    "str"
                ],
                "encoding": []
            }
        },
        "get_reader_allowed_params": {
            "name": "get_reader_allowed_params",
            "location": 171,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "t": [
                    "TypeEnum"
                ]
            }
        },
        "validate_kwargs": {
            "name": "validate_kwargs",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "kwargs": [
                    "Dict[(str, Any)]"
                ],
                "t": []
            }
        },
        "mdtm_to_string": {
            "name": "mdtm_to_string",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "mtime": [
                    "int"
                ]
            }
        },
        "pd_read": {
            "name": "pd_read",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "t": [
                    "str"
                ],
                "kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "get_metadata": {
            "name": "get_metadata",
            "location": 203,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "type": [
                    "str"
                ],
                "reader_kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "peakina/__init__.py": {},
    "peakina/io/fetcher.py": {
        "register": {
            "name": "register",
            "location": 26,
            "return": [
                "Callable[([F], F)]"
            ],
            "arguments": {
                "schemes": []
            }
        },
        "register.f": {
            "name": "f",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fetcher.get_fetcher": {
            "name": "get_fetcher",
            "location": 55,
            "return": [
                "Fetcher"
            ],
            "arguments": {
                "cls": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Fetcher.listdir": {
            "name": "listdir",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str"
                ]
            }
        },
        "Fetcher.open": {
            "name": "open",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Fetcher.mtime": {
            "name": "mtime",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Fetcher.is_matching": {
            "name": "is_matching",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "match": [],
                "pattern": [
                    "Pattern[str]"
                ]
            }
        },
        "Fetcher.get_filepath_list": {
            "name": "get_filepath_list",
            "location": 80,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "match": []
            }
        },
        "Fetcher.get_str_mtime": {
            "name": "get_str_mtime",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Fetcher.get_mtime_dict": {
            "name": "get_mtime_dict",
            "location": 98,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str"
                ]
            }
        },
        "fetch.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str"
                ]
            }
        },
        "fetch.scheme": {
            "name": "scheme",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fetch.dirpath": {
            "name": "dirpath",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fetch.basename": {
            "name": "basename",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fetch.open": {
            "name": "open",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "fetch.get_str_mtime": {
            "name": "get_str_mtime",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "fetch.get_mtime_dict": {
            "name": "get_mtime_dict",
            "location": 127,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "peakina/io/__init__.py": {},
    "peakina/io/ftp/ftp_fetcher.py": {
        "FTPFetcher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FTPFetcher.get_dir_mtimes": {
            "name": "get_dir_mtimes",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "FTPFetcher.open": {
            "name": "open",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "FTPFetcher.listdir": {
            "name": "listdir",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "FTPFetcher.mtime": {
            "name": "mtime",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        }
    },
    "peakina/io/ftp/ftp_utils.py": {
        "ftps_client": {
            "name": "ftps_client",
            "location": 73,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "ftp_client": {
            "name": "ftp_client",
            "location": 96,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "sftp_client": {
            "name": "sftp_client",
            "location": 110,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_urlparse": {
            "name": "_urlparse",
            "location": 129,
            "return": [
                "urllib.parse.ParseResult"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 140,
            "return": [
                "ContextManager[Tuple[(Any, str)]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "retry_pasv": {
            "name": "retry_pasv",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "c": [
                    "ftplib.FTP"
                ],
                "cmd": [
                    "str"
                ]
            }
        },
        "_open": {
            "name": "_open",
            "location": 165,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "ftp_open": {
            "name": "ftp_open",
            "location": 180,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "retry": [
                    "int"
                ]
            }
        },
        "_get_all_files": {
            "name": "_get_all_files",
            "location": 190,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "c": [],
                "path": [
                    "str"
                ]
            }
        },
        "ftp_listdir": {
            "name": "ftp_listdir",
            "location": 200,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_get_mtime": {
            "name": "_get_mtime",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "c": [],
                "path": [
                    "str"
                ]
            }
        },
        "ftp_mtime": {
            "name": "ftp_mtime",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "dir_mtimes": {
            "name": "dir_mtimes",
            "location": 229,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "FTPS.connect": {
            "name": "connect",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "FTPS.ntransfercmd": {
            "name": "ntransfercmd",
            "location": 48,
            "return": [
                "Tuple[(socket.socket, int)]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ],
                "rest": []
            }
        },
        "FTPS.makepasv": {
            "name": "makepasv",
            "location": 60,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FTPS.connect._setup_sock": {
            "name": "_setup_sock",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "peakina/io/ftp/__init__.py": {},
    "peakina/io/http/http_fetcher.py": {
        "HttpFetcher.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpFetcher.open": {
            "name": "open",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "HttpFetcher.listdir": {
            "name": "listdir",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "HttpFetcher.mtime": {
            "name": "mtime",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        }
    },
    "peakina/io/http/__init__.py": {},
    "peakina/io/local/file_fetcher.py": {
        "FileFetcher.open": {
            "name": "open",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "FileFetcher.listdir": {
            "name": "listdir",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "FileFetcher.mtime": {
            "name": "mtime",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        }
    },
    "peakina/io/local/__init__.py": {},
    "peakina/io/s3/s3_fetcher.py": {
        "S3Fetcher.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S3Fetcher.get_dir_mtimes": {
            "name": "get_dir_mtimes",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "S3Fetcher.open": {
            "name": "open",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "S3Fetcher.listdir": {
            "name": "listdir",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "dirpath": []
            }
        },
        "S3Fetcher.mtime": {
            "name": "mtime",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        }
    },
    "peakina/io/s3/s3_utils.py": {
        "parse_s3_url": {
            "name": "parse_s3_url",
            "location": 16,
            "return": [
                "Tuple[(Any, Any, Any, str)]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "file": [
                    "bool"
                ]
            }
        },
        "_s3_open_file_with_retries": {
            "name": "_s3_open_file_with_retries",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "fs": [],
                "path": [
                    "str"
                ],
                "retries": [
                    "int"
                ]
            }
        },
        "s3_open": {
            "name": "s3_open",
            "location": 71,
            "return": [
                "IO[bytes]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_get_timestamp": {
            "name": "_get_timestamp",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "s3_mtime": {
            "name": "s3_mtime",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "dir_mtimes": {
            "name": "dir_mtimes",
            "location": 97,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        }
    },
    "peakina/io/s3/__init__.py": {},
    "peakina/readers/csv.py": {
        "read_csv": {
            "name": "read_csv",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "filepath_or_buffer": []
            }
        },
        "_line_count": {
            "name": "_line_count",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "filepath_or_buffer": [],
                "encoding": []
            }
        },
        "csv_meta": {
            "name": "csv_meta",
            "location": 90,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filepath_or_buffer": [],
                "reader_kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "peakina/readers/excel.py": {
        "read_excel": {
            "name": "read_excel",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "excel_meta": {
            "name": "excel_meta",
            "location": 36,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "reader_kwargs": [
                    "Dict[(str, Any)]"
                ]
            }
        }
    },
    "peakina/readers/geodata.py": {
        "read_geo_data": {
            "name": "read_geo_data",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "preview_offset": [
                    "int"
                ],
                "preview_nrows": []
            }
        }
    },
    "peakina/readers/json.py": {
        "transform_with_jq": {
            "name": "transform_with_jq",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "json_input": [
                    "str"
                ],
                "jq_filter": [
                    "str"
                ]
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "path_or_buf": [],
                "encoding": [
                    "str"
                ],
                "filter": [],
                "preview_offset": [
                    "int"
                ],
                "preview_nrows": []
            }
        }
    },
    "peakina/readers/xml.py": {
        "transform_with_jq": {
            "name": "transform_with_jq",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "jq_filter": [
                    "str"
                ]
            }
        },
        "read_xml": {
            "name": "read_xml",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "encoding": [
                    "str"
                ],
                "preview_offset": [
                    "int"
                ],
                "preview_nrows": [],
                "filter": []
            }
        }
    },
    "peakina/readers/__init__.py": {},
    "tests/conftest.py": {
        "path": {
            "name": "path",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "ftp_path": {
            "name": "ftp_path",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "http_path": {
            "name": "http_path",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "s3_container": {
            "name": "s3_container",
            "location": 44,
            "return": [],
            "arguments": {
                "service_container": []
            }
        },
        "s3_endpoint_url": {
            "name": "s3_endpoint_url",
            "location": 60,
            "return": [],
            "arguments": {
                "s3_container": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "docker_pull": {
            "name": "docker_pull",
            "location": 85,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "docker": {
            "name": "docker",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "unused_port": {
            "name": "unused_port",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "wait_for_container": {
            "name": "wait_for_container",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "checker_callable": [
                    "Callable[([int], bool)]"
                ],
                "host_port": [
                    "int"
                ],
                "image": [
                    "str"
                ],
                "skip_exception": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "container_starter": {
            "name": "container_starter",
            "location": 134,
            "return": [],
            "arguments": {
                "request": [],
                "docker": [],
                "docker_pull": []
            }
        },
        "service_container": {
            "name": "service_container",
            "location": 192,
            "return": [],
            "arguments": {
                "unused_port": [],
                "container_starter": []
            }
        },
        "path.f": {
            "name": "f",
            "location": 20,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "s3_container.check": {
            "name": "check",
            "location": 45,
            "return": [],
            "arguments": {
                "host_port": []
            }
        },
        "unused_port.f": {
            "name": "f",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "container_starter.f": {
            "name": "f",
            "location": 135,
            "return": [],
            "arguments": {
                "image": [],
                "internal_port": [],
                "host_port": [],
                "env": [],
                "volumes": [],
                "command": [],
                "checker_callable": [],
                "skip_exception": [],
                "timeout": []
            }
        },
        "service_container.f": {
            "name": "f",
            "location": 193,
            "return": [],
            "arguments": {
                "service_name": [],
                "checker_callable": [],
                "skip_exception": [],
                "timeout": []
            }
        },
        "container_starter.f.fin": {
            "name": "fin",
            "location": 174,
            "return": [],
            "arguments": {}
        }
    },
    "tests/test_cache.py": {
        "df_test": {
            "name": "df_test",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_inmemory_cache": {
            "name": "test_inmemory_cache",
            "location": 17,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "df_test": []
            }
        },
        "test_hdf_cache": {
            "name": "test_hdf_cache",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": [],
                "tmp_path": [],
                "df_test": []
            }
        },
        "cache": {
            "name": "cache",
            "location": 59,
            "return": [],
            "arguments": {
                "request": [],
                "tmpdir": []
            }
        },
        "test_cache_invalidation": {
            "name": "test_cache_invalidation",
            "location": 72,
            "return": [],
            "arguments": {
                "cache": [],
                "df_test": []
            }
        },
        "test_cache_expiration": {
            "name": "test_cache_expiration",
            "location": 80,
            "return": [],
            "arguments": {
                "cache": [],
                "df_test": [],
                "mocker": []
            }
        },
        "test_hdf_store_closed_on_error": {
            "name": "test_hdf_store_closed_on_error",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "df_test": [],
                "mocker": [],
                "tmp_path": []
            }
        }
    },
    "tests/test_datapool.py": {
        "templatize": {
            "name": "templatize",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "d": [
                    "Dict[(str, Any)]"
                ],
                "real_ftp_path": [
                    "str"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 23,
            "return": [],
            "arguments": {
                "path": [],
                "ftp_path": []
            }
        },
        "test_datapool": {
            "name": "test_datapool",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "path": []
            }
        }
    },
    "tests/test_datasource.py": {
        "read_csv_spy": {
            "name": "read_csv_spy",
            "location": 15,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_scheme": {
            "name": "test_scheme",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type": {
            "name": "test_type",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_kwargs": {
            "name": "test_validation_kwargs",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_csv_with_sep": {
            "name": "test_csv_with_sep",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_with_encoding": {
            "name": "test_csv_with_encoding",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_with_trailing_newline": {
            "name": "test_csv_with_trailing_newline",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_default_encoding": {
            "name": "test_csv_default_encoding",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_western_encoding": {
            "name": "test_csv_western_encoding",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_header_row": {
            "name": "test_csv_header_row",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_with_sep_and_encoding": {
            "name": "test_csv_with_sep_and_encoding",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_read_pandas": {
            "name": "test_read_pandas",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_read_pandas_excel": {
            "name": "test_read_pandas_excel",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_match": {
            "name": "test_match",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_match_different_file_types": {
            "name": "test_match_different_file_types",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_ftp": {
            "name": "test_ftp",
            "location": 169,
            "return": [],
            "arguments": {
                "ftp_path": []
            }
        },
        "test_ftp_match": {
            "name": "test_ftp_match",
            "location": 175,
            "return": [],
            "arguments": {
                "ftp_path": []
            }
        },
        "test_s3": {
            "name": "test_s3",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_endpoint_url": []
            }
        },
        "test_basic_excel": {
            "name": "test_basic_excel",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_multi_sheets_excel": {
            "name": "test_multi_sheets_excel",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_basic_xml": {
            "name": "test_basic_xml",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_basic_json": {
            "name": "test_basic_json",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_basic_parquet": {
            "name": "test_basic_parquet",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_empty_file": {
            "name": "test_empty_file",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_chunk": {
            "name": "test_chunk",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_chunk_match": {
            "name": "test_chunk_match",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_cache": {
            "name": "test_cache",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "mocker": []
            }
        }
    },
    "tests/test_fetch.py": {
        "test_fetch": {
            "name": "test_fetch",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/test_helpers.py": {
        "test_detect_geojson_type_for_coverage": {
            "name": "test_detect_geojson_type_for_coverage",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_detect_type_no_regex": {
            "name": "test_detect_type_no_regex",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_detect_type_with_regex": {
            "name": "test_detect_type_with_regex",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_head": {
            "name": "test_bytes_head",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_str_head": {
            "name": "test_str_head",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_detect_encoding": {
            "name": "test_detect_encoding",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_validate_encoding": {
            "name": "test_validate_encoding",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_detect_sep": {
            "name": "test_detect_sep",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_validate_sep": {
            "name": "test_validate_sep",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_validate_sep_error": {
            "name": "test_validate_sep_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_validate_kwargs": {
            "name": "test_validate_kwargs",
            "location": 118,
            "return": [],
            "arguments": {
                "filetype": [],
                "reader_kwargs": [],
                "exception_str": []
            }
        },
        "test_mdtm_to_string": {
            "name": "test_mdtm_to_string",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pd_read": {
            "name": "test_pd_read",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/__init__.py": {},
    "tests/io/__init__.py": {},
    "tests/io/ftp/test_ftp_fetcher.py": {
        "test_ftp_fetcher": {
            "name": "test_ftp_fetcher",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "ftp_path": []
            }
        }
    },
    "tests/io/ftp/test_ftp_utils.py": {
        "ftp_client": {
            "name": "ftp_client",
            "location": 12,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_open": {
            "name": "test_open",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ftp_client": [],
                "mocker": []
            }
        },
        "test_ftp_dir": {
            "name": "test_ftp_dir",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_retry_open": {
            "name": "test_retry_open",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_mtime": {
            "name": "test_get_mtime",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "ftp_client": []
            }
        },
        "test_dir_mtimes": {
            "name": "test_dir_mtimes",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "ftp_client": [],
                "mocker": []
            }
        },
        "test_ftp_client": {
            "name": "test_ftp_client",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ftp_client_quit_resilience": {
            "name": "test_ftp_client_quit_resilience",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ftps_client": {
            "name": "test_ftps_client",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ftps_client_ssl_required_on_control_channel": {
            "name": "test_ftps_client_ssl_required_on_control_channel",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ftps_client_other_error": {
            "name": "test_ftps_client_other_error",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ftps_client_quit_resilience": {
            "name": "test_ftps_client_quit_resilience",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_sftp_client": {
            "name": "test_sftp_client",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "tests/io/ftp/__init__.py": {},
    "tests/io/http/test_http_fetcher.py": {
        "test_http_fetcher": {
            "name": "test_http_fetcher",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "http_path": [],
                "mocker": []
            }
        },
        "test_http_mtime_error": {
            "name": "test_http_mtime_error",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_http_fetcher_kwargs": {
            "name": "test_http_fetcher_kwargs",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "http_path": [],
                "mocker": []
            }
        },
        "test_http_fetcher_verify": {
            "name": "test_http_fetcher_verify",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "http_path": []
            }
        },
        "test_http_fetcher_verify_no_ca_certs": {
            "name": "test_http_fetcher_verify_no_ca_certs",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "http_path": [],
                "path": [],
                "mocker": []
            }
        },
        "test_http_fetcher_no_verify": {
            "name": "test_http_fetcher_no_verify",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "http_path": []
            }
        }
    },
    "tests/io/http/__init__.py": {},
    "tests/io/local/test_file_fetcher.py": {
        "test_file_fetcher": {
            "name": "test_file_fetcher",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_file_fetcher_mtime_oserror": {
            "name": "test_file_fetcher_mtime_oserror",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_file_fetcher_match": {
            "name": "test_file_fetcher_match",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/io/local/__init__.py": {},
    "tests/io/s3/test_s3_fetcher.py": {
        "s3_fetcher": {
            "name": "s3_fetcher",
            "location": 11,
            "return": [],
            "arguments": {
                "s3_endpoint_url": []
            }
        },
        "test_s3_fetcher_open": {
            "name": "test_s3_fetcher_open",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_fetcher": []
            }
        },
        "test_s3_fetcher_listdir": {
            "name": "test_s3_fetcher_listdir",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_fetcher": [],
                "mocker": []
            }
        },
        "test_s3_fetcher_mtime": {
            "name": "test_s3_fetcher_mtime",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_fetcher": []
            }
        },
        "test_s3_fetcher_open_retry": {
            "name": "test_s3_fetcher_open_retry",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "s3_fetcher": [],
                "s3_endpoint_url": [],
                "mocker": []
            }
        },
        "test_s3_fetcher_open_retry.S3FileSystemThatFailsOpen.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "secret": [],
                "client_kwargs": []
            }
        },
        "test_s3_fetcher_open_retry.S3FileSystemThatFailsOpen.open": {
            "name": "open",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": [],
                "block_size": [],
                "cache_options": []
            }
        },
        "test_s3_fetcher_open_retry.S3FileSystemThatFailsOpen.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "tests/io/s3/test_s3_utils.py": {
        "test_parse_s3_url_no_credentials": {
            "name": "test_parse_s3_url_no_credentials",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_s3_url_with_credentials": {
            "name": "test_parse_s3_url_with_credentials",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_scheme_raise_exception": {
            "name": "test_invalid_scheme_raise_exception",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_credentials_raise_exception": {
            "name": "test_invalid_credentials_raise_exception",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_object_name_raise_exception": {
            "name": "test_empty_object_name_raise_exception",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_open": {
            "name": "test_s3_open",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "tests/io/s3/__init__.py": {},
    "tests/readers/test_csv.py": {
        "test_simple_csv": {
            "name": "test_simple_csv",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_simple_csv_preview": {
            "name": "test_simple_csv_preview",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_csv_metadata": {
            "name": "test_csv_metadata",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_chunk_and_preview": {
            "name": "test_chunk_and_preview",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/readers/test_excel.py": {
        "test_simple_xls": {
            "name": "test_simple_xls",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_simple_xls_preview": {
            "name": "test_simple_xls_preview",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_xls_metadata": {
            "name": "test_xls_metadata",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_multiple_xls_metadata": {
            "name": "test_multiple_xls_metadata",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_multisheet_xlsx": {
            "name": "test_multisheet_xlsx",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_preview_sheet_more_lines_xlsx": {
            "name": "test_preview_sheet_more_lines_xlsx",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_with_specials_types_xlsx": {
            "name": "test_with_specials_types_xlsx",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_read_with_dtype": {
            "name": "test_read_with_dtype",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_read_excel_with_formula": {
            "name": "test_read_excel_with_formula",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_excel_meta_with_broken_max_row": {
            "name": "test_excel_meta_with_broken_max_row",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/readers/test_geodata.py": {
        "test_simple_geojson_preview": {
            "name": "test_simple_geojson_preview",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_geojson_bbox": {
            "name": "test_geojson_bbox",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_geojson_mask": {
            "name": "test_geojson_mask",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tests/readers/test_json.py": {
        "test_transform_with_jq": {
            "name": "test_transform_with_jq",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tests/readers/test_xml.py": {
        "test_transform_with_jq": {
            "name": "test_transform_with_jq",
            "location": 23,
            "return": [],
            "arguments": {
                "jq_filter": [],
                "expected": []
            }
        }
    }
}
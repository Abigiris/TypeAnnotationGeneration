{
    "phf-compilers-tests-master/setup.py": {
        "OptionlessCommand.initialize_options": {
            "name": "initialize_options",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionlessCommand.finalize_options": {
            "name": "finalize_options",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.run": {
            "name": "run",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageCommand.run": {
            "name": "run",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageCommand._call_or_exit": {
            "name": "_call_or_exit",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "args": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/fixtured_test_case.py": {
        "_create_test_method": {
            "name": "_create_test_method",
            "location": 17,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "fixture": []
            }
        },
        "FixturedTestCase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "phase_name": []
            }
        },
        "FixturedTestCase.run_phase": {
            "name": "run_phase",
            "location": 96,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "FixturedTestCase.assertFixture": {
            "name": "assertFixture",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        },
        "FixturedTestCase.assertFixtureAsArgument": {
            "name": "assertFixtureAsArgument",
            "location": 110,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        },
        "FixturedTestCase.assertFixtureAsStdin": {
            "name": "assertFixtureAsStdin",
            "location": 119,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        },
        "FixturedTestCase.assertFixtureOutput": {
            "name": "assertFixtureOutput",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "result": []
            }
        },
        "FixturedTestCase.assertFixtureStdout": {
            "name": "assertFixtureStdout",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "result": []
            }
        },
        "FixturedTestCase.assertFixtureStderr": {
            "name": "assertFixtureStderr",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "result": []
            }
        },
        "FixturedTestCase.assertStdoutEqual": {
            "name": "assertStdoutEqual",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": [],
                "stderr": []
            }
        },
        "_PEP487.__new__": {
            "name": "__new__",
            "location": 33,
            "return": [],
            "arguments": {
                "mcs": []
            }
        },
        "_PEP487.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "ns": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/fixtures.py": {
        "discover_fixtures": {
            "name": "discover_fixtures",
            "location": 73,
            "return": [
                "List[nothing]"
            ],
            "arguments": {}
        },
        "Fixture.name": {
            "name": "name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixture.phase_name": {
            "name": "phase_name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixture.sim_file_path": {
            "name": "sim_file_path",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixture.relative_sim_file_path": {
            "name": "relative_sim_file_path",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixture.phase_file": {
            "name": "phase_file",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixture._relative_phase_file_path": {
            "name": "_relative_phase_file_path",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseFile.load": {
            "name": "load",
            "location": 61,
            "return": [
                "_TPhaseFile@@PhaseFile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPhaseFile]"
                ],
                "path": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/main.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_test_case_names": {
            "name": "_get_test_case_names",
            "location": 57,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "test_case": []
            }
        },
        "_get_args": {
            "name": "_get_args",
            "location": 62,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "_make_runner": {
            "name": "_make_runner",
            "location": 100,
            "return": [
                "simple_test.runner.Runner"
            ],
            "arguments": {
                "path": []
            }
        },
        "_parse_phase": {
            "name": "_parse_phase",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "Phase.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "simple_test.test_case.TestCase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Phase.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc_path": []
            }
        },
        "Runner.create": {
            "name": "create",
            "location": 22,
            "return": [
                "_TRunner@@Runner@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRunner]"
                ],
                "sc_path": []
            }
        },
        "Runner.run_scanner": {
            "name": "run_scanner",
            "location": 31,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "Runner.run_cst": {
            "name": "run_cst",
            "location": 40,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "Runner.run_symbol_table": {
            "name": "run_symbol_table",
            "location": 49,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "Runner.run_ast": {
            "name": "run_ast",
            "location": 59,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "Runner._run": {
            "name": "_run",
            "location": 68,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "BinaryNotFoundError.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc_path": []
            }
        },
        "BinaryNotExecutableError.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sc_path": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/test_ast.py": {
        "TestAST.run_phase": {
            "name": "run_phase",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/test_case.py": {
        "TestCase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "name": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/test_cst.py": {
        "TestCST.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_cst_passes": []
            }
        },
        "TestCST.run_phase": {
            "name": "run_phase",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "TestCST.assertFixture": {
            "name": "assertFixture",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/test_scanner.py": {
        "TestScanner.run_phase": {
            "name": "run_phase",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/test_symbol_table.py": {
        "TestSymbolTable.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "st_all_fives": []
            }
        },
        "TestSymbolTable.run_phase": {
            "name": "run_phase",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "TestSymbolTable.assertFixtureStdout": {
            "name": "assertFixtureStdout",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "result": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/utils.py": {
        "assertion_context": {
            "name": "assertion_context",
            "location": 10,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "unified_diff": {
            "name": "unified_diff",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "fromfile": [],
                "tofile": [],
                "color": []
            }
        },
        "_color_diff_line": {
            "name": "_color_diff_line",
            "location": 42,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "line": [
                    "_T0@@"
                ]
            }
        },
        "_green": {
            "name": "_green",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "_red": {
            "name": "_red",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "_blue": {
            "name": "_blue",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "replace_values_with_fives": {
            "name": "replace_values_with_fives",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "symbol_table_output": []
            }
        }
    },
    "phf-compilers-tests-master/simple_test/version.py": {},
    "phf-compilers-tests-master/simple_test/__init__.py": {},
    "phf-compilers-tests-master/tests/test_lint.py": {
        "get_flake8_errors": {
            "name": "get_flake8_errors",
            "location": 33,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "chdir": {
            "name": "chdir",
            "location": 45,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_pylint_errors": {
            "name": "get_pylint_errors",
            "location": 52,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "is_pylint_error": {
            "name": "is_pylint_error",
            "location": 66,
            "return": [
                "Union[(bool, _T0)]"
            ],
            "arguments": {
                "line": [
                    "_T0@@"
                ]
            }
        },
        "parse_lint_error": {
            "name": "parse_lint_error",
            "location": 71,
            "return": [
                "Tuple[(Any, int, int, Any, int)]"
            ],
            "arguments": {
                "line": []
            }
        },
        "TestLint.test_lint": {
            "name": "test_lint",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "phf-compilers-tests-master/tests/test_typecheck.py": {
        "TestTypecheck.test_typecheck": {
            "name": "test_typecheck",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phf-compilers-tests-master/tests/utils.py": {
        "skip_slow_tests": {
            "name": "skip_slow_tests",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "phf-compilers-tests-master/tests/__init__.py": {},
    "phf-compilers-tests-master/tests/simple_test/dummy_compiler.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "phf-compilers-tests-master/tests/simple_test/phase_test_base.py": {
        "PhaseTestBase.test_tests_pass_for_dummy_compiler": {
            "name": "test_tests_pass_for_dummy_compiler",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseTestBase.assertTestCaseWithArgsPassesFixture": {
            "name": "assertTestCaseWithArgsPassesFixture",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertGoodFakeCompilerPasses": {
            "name": "assertGoodFakeCompilerPasses",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertMultipleErrorsPasses": {
            "name": "assertMultipleErrorsPasses",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertBadStdoutFakeCompilerFails": {
            "name": "assertBadStdoutFakeCompilerFails",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "for_stdin": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertBadStderrFakeCompilerFails": {
            "name": "assertBadStderrFakeCompilerFails",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "for_stdin": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.run_fake_compiler": {
            "name": "run_fake_compiler",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "arg_output": [],
                "test_case_args": [],
                "stdin_output": []
            }
        },
        "PhaseTestBase.assertFakeCompilerHasCalls": {
            "name": "assertFakeCompilerHasCalls",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertFakeCompilerHasArgumentCall": {
            "name": "assertFakeCompilerHasArgumentCall",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "PhaseTestBase.assertFakeCompilerHasStdinCall": {
            "name": "assertFakeCompilerHasStdinCall",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        },
        "FakeCompilerContext.__enter__": {
            "name": "__enter__",
            "location": 214,
            "return": [
                "_TFakeCompilerContext@@FakeCompilerContext@@"
            ],
            "arguments": {
                "self": [
                    "_TFakeCompilerContext@@FakeCompilerContext@@"
                ]
            }
        },
        "FakeCompilerContext.fake_output": {
            "name": "fake_output",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_output": [],
                "stdin_output": []
            }
        },
        "FakeCompilerContext.get_first_input": {
            "name": "get_first_input",
            "location": 270,
            "return": [
                "FakeCompilerCall"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCompilerContext.get_second_input": {
            "name": "get_second_input",
            "location": 277,
            "return": [
                "FakeCompilerCall"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeCompilerContext._get_input": {
            "name": "_get_input",
            "location": 284,
            "return": [
                "FakeCompilerCall"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "FakeCompilerContext.__exit__": {
            "name": "__exit__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_fixtured_test_case.py": {
        "_make_fixture": {
            "name": "_make_fixture",
            "location": 72,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {
                "name": [],
                "phase_name": []
            }
        },
        "TestFixturedTestCase.test_subclassing_adds_fixture_test_methods": {
            "name": "test_subclassing_adds_fixture_test_methods",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCase.test_subclassing_with_method_name_collision": {
            "name": "test_subclassing_with_method_name_collision",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCase.assertHasMethod": {
            "name": "assertHasMethod",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "obj": []
            }
        },
        "TestFixturedTestCaseAssertions.setUp": {
            "name": "setUp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixture": {
            "name": "test_assertFixture",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureAsArgument": {
            "name": "test_assertFixtureAsArgument",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureAsStdin": {
            "name": "test_assertFixtureAsStdin",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureOutput": {
            "name": "test_assertFixtureOutput",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureOutput_adds_context": {
            "name": "test_assertFixtureOutput_adds_context",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureStdout": {
            "name": "test_assertFixtureStdout",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureStderr_expected_error": {
            "name": "test_assertFixtureStderr_expected_error",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureStderr_unexpected_and_no_error": {
            "name": "test_assertFixtureStderr_unexpected_and_no_error",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.assertStderrAssertionSucceeds": {
            "name": "assertStderrAssertionSucceeds",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "has_error": [],
                "stderr": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureStderr_expected_but_no_error": {
            "name": "test_assertFixtureStderr_expected_but_no_error",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertFixtureStderr_unexpected_error": {
            "name": "test_assertFixtureStderr_unexpected_error",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.assertStderrAssertionFails": {
            "name": "assertStderrAssertionFails",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "has_error": [],
                "stderr": [],
                "assertion_regex": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertStdoutEqual_equal": {
            "name": "test_assertStdoutEqual_equal",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCaseAssertions.test_assertStdoutEqual_not_equal": {
            "name": "test_assertStdoutEqual_not_equal",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCase.test_subclassing_adds_fixture_test_methods.DummyTestCase.run_phase": {
            "name": "run_phase",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        },
        "TestFixturedTestCase.test_subclassing_with_method_name_collision.DummyTestCase.test_foo": {
            "name": "test_foo",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFixturedTestCase.test_subclassing_with_method_name_collision.DummyTestCase.run_phase": {
            "name": "run_phase",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "sim_file": [],
                "as_stdin": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_fixtures.py": {
        "TestFixture.test_properties": {
            "name": "test_properties",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFixture.test_name_for_subdirectory_path": {
            "name": "test_name_for_subdirectory_path",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPhaseFile.test_load_no_errors": {
            "name": "test_load_no_errors",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPhaseFile.test_load_with_errors": {
            "name": "test_load_with_errors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPhaseFile.assertLoads": {
            "name": "assertLoads",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [],
                "stdout": [],
                "has_error": []
            }
        },
        "PathMock.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [],
                "is_file": []
            }
        },
        "PathMock.is_file": {
            "name": "is_file",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.test_discover_fixtures": {
            "name": "test_discover_fixtures",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.test_discover_fixtures_unexpected_file": {
            "name": "test_discover_fixtures_unexpected_file",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.test_discover_fixtures_sim_with_no_phases": {
            "name": "test_discover_fixtures_sim_with_no_phases",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.test_discover_fixtures_phase_with_no_sim": {
            "name": "test_discover_fixtures_phase_with_no_sim",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.test_discover_fixtures_name_collision": {
            "name": "test_discover_fixtures_name_collision",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverFixtures.discover_fixtures": {
            "name": "discover_fixtures",
            "location": 117,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": [],
                "files": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_lint_fixtures.py": {
        "TestLintFixtures.test_fixtures_are_snake_case": {
            "name": "test_fixtures_are_snake_case",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLintFixtures.test_no_duplicate_sim_files": {
            "name": "test_no_duplicate_sim_files",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_main.py": {
        "fake_argv": {
            "name": "fake_argv",
            "location": 198,
            "return": [],
            "arguments": {
                "new_argv": []
            }
        },
        "fake_environ": {
            "name": "fake_environ",
            "location": 209,
            "return": [],
            "arguments": {
                "new_environ": []
            }
        },
        "TestMain.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.reset_mocks": {
            "name": "reset_mocks",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_no_args_runs_everything_with_defaults": {
            "name": "test_main_no_args_runs_everything_with_defaults",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_single_test": {
            "name": "test_main_single_test",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_bad_phase_errors": {
            "name": "test_main_bad_phase_errors",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_with_sc_runs_everything": {
            "name": "test_main_with_sc_runs_everything",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_sc_not_exist_errors": {
            "name": "test_main_sc_not_exist_errors",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_sc_not_executable_errors": {
            "name": "test_main_sc_not_executable_errors",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.test_main_sc_env_var_deprecation": {
            "name": "test_main_sc_env_var_deprecation",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "warn": []
            }
        },
        "TestMain.test_main_extra_args_passed_to_tests": {
            "name": "test_main_extra_args_passed_to_tests",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.assertMainFailsWithStderr": {
            "name": "assertMainFailsWithStderr",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stderr": []
            }
        },
        "TestMain.assertMainRunsTests": {
            "name": "assertMainRunsTests",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tests": [],
                "args": [],
                "sc": [],
                "verbosity": [],
                "config": [],
                "runner_create_raises": [],
                "expect_exit": []
            }
        },
        "TestMain.assertCalledOnceWithKwargsSubset": {
            "name": "assertCalledOnceWithKwargsSubset",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "subset": []
            }
        },
        "_subset_call.__call__": {
            "name": "__call__",
            "location": 215,
            "return": [
                "_T_subset_call@@_subset_call@@"
            ],
            "arguments": {
                "self": [
                    "_T_subset_call@@_subset_call@@"
                ]
            }
        },
        "_subset_call.__eq__": {
            "name": "__eq__",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_subset_call.__repr__": {
            "name": "__repr__",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMain.assertMainRunsTests.make_half_proxy": {
            "name": "make_half_proxy",
            "location": 131,
            "return": [],
            "arguments": {
                "real_class": [],
                "created_tests": []
            }
        },
        "TestMain.assertMainRunsTests.make_half_proxy.proxy": {
            "name": "proxy",
            "location": 132,
            "return": [],
            "arguments": {}
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_runner.py": {
        "TestRunner.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_create": {
            "name": "test_create",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "os": []
            }
        },
        "TestRunner.test_create_fails_if_not_exist": {
            "name": "test_create_fails_if_not_exist",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_create_fails_if_not_executable": {
            "name": "test_create_fails_if_not_executable",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "os": []
            }
        },
        "TestRunner.test_run_simple_scanner": {
            "name": "test_run_simple_scanner",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_run_simple_cst": {
            "name": "test_run_simple_cst",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_run_simple_symbol_table": {
            "name": "test_run_simple_symbol_table",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_run_simple_ast": {
            "name": "test_run_simple_ast",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.assertRunsSimple": {
            "name": "assertRunsSimple",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "args": []
            }
        },
        "TestRunner.assertRunsSimpleBothWays": {
            "name": "assertRunsSimpleBothWays",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "args": [],
                "raises": [],
                "sc_raises": []
            }
        },
        "TestRunner.setup_subprocess": {
            "name": "setup_subprocess",
            "location": 94,
            "return": [
                "Tuple[(unittest.mock.MagicMock, unittest.mock.MagicMock, str, unittest.mock.Mock, unittest.mock.Mock)]"
            ],
            "arguments": {
                "self": [],
                "relative_to_raises": [],
                "sc_relative_to_raises": []
            }
        },
        "TestRunner.assertRunsSimpleWithArgument": {
            "name": "assertRunsSimpleWithArgument",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "args": [],
                "relative_to_raises": [],
                "sc_raises": []
            }
        },
        "TestRunner.assertRunsSimpleAsStdin": {
            "name": "assertRunsSimpleAsStdin",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "args": [],
                "relative_to_raises": [],
                "sc_raises": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_test_ast.py": {},
    "phf-compilers-tests-master/tests/simple_test/test_test_cst.py": {
        "TestTestCST.assertTestCaseWithArgsPassesFixture": {
            "name": "assertTestCaseWithArgsPassesFixture",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "test_case_args": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_test_scanner.py": {},
    "phf-compilers-tests-master/tests/simple_test/test_test_symbol_table.py": {
        "TestTestSymbolTable.run_fake_compiler": {
            "name": "run_fake_compiler",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_compiler": [],
                "fixture": [],
                "arg_output": [],
                "test_case_args": [],
                "stdin_output": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/test_utils.py": {
        "TestUtils.test_assertion_context_with_raise_assert": {
            "name": "test_assertion_context_with_raise_assert",
            "location": 8,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_assertion_context_with_raise_other": {
            "name": "test_assertion_context_with_raise_other",
            "location": 13,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_assertion_context_with_no_raise": {
            "name": "test_assertion_context_with_no_raise",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_unified_diff": {
            "name": "test_unified_diff",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_unified_diff_colored": {
            "name": "test_unified_diff_colored",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_replace_values_with_fixes": {
            "name": "test_replace_values_with_fixes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_replace_values_with_fixes_in_context": {
            "name": "test_replace_values_with_fixes_in_context",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phf-compilers-tests-master/tests/simple_test/__init__.py": {}
}
{
    "php-was-always-already-serverless-master/app.py": {
        "shutdown_php_fpm": {
            "name": "shutdown_php_fpm",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, str)])])]"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "transform_header_name_for_php": {
            "name": "transform_header_name_for_php",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "k": []
            }
        },
        "charset_from_response": {
            "name": "charset_from_response",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "headers": []
            }
        },
        "charset_from_event": {
            "name": "charset_from_event",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "event": []
            }
        },
        "query_string": {
            "name": "query_string",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "event": []
            }
        },
        "make_fcgi_params_and_input_from_event": {
            "name": "make_fcgi_params_and_input_from_event",
            "location": 88,
            "return": [
                "Tuple[(dict, bytes)]"
            ],
            "arguments": {
                "event": []
            }
        }
    },
    "php-was-always-already-serverless-master/fcgi_client.py": {
        "parse_out": {
            "name": "parse_out",
            "location": 170,
            "return": [
                "Tuple[(Any, List[Tuple[(Any, Any)]], Any)]"
            ],
            "arguments": {
                "result": []
            }
        },
        "decode_name_value_pairs": {
            "name": "decode_name_value_pairs",
            "location": 399,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "buffer": []
            }
        },
        "encode_name_value_pairs": {
            "name": "encode_name_value_pairs",
            "location": 441,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pairs": []
            }
        },
        "decode_record": {
            "name": "decode_record",
            "location": 469,
            "return": [
                "Any"
            ],
            "arguments": {
                "buffer": []
            }
        },
        "decode_buffer_generator": {
            "name": "decode_buffer_generator",
            "location": 497,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "buffer": []
            }
        },
        "FCGIApp.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connect": [],
                "host": [],
                "port": []
            }
        },
        "FCGIApp.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "Tuple[(bytes, bytes)]"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "input": [],
                "data": []
            }
        },
        "FCGIApp._read_packet": {
            "name": "_read_packet",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "sock": []
            }
        },
        "FCGIApp._get_connection": {
            "name": "_get_connection",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FCGIRecord.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": []
            }
        },
        "FCGIRecord.parse": {
            "name": "parse",
            "location": 224,
            "return": [
                "_TFCGIRecord@@FCGIRecord@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIRecord]"
                ],
                "request_id": [],
                "content": []
            }
        },
        "FCGIRecord.encode_header": {
            "name": "encode_header",
            "location": 228,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "FCGIRecord.encode": {
            "name": "encode",
            "location": 231,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIRecord.__bytes__": {
            "name": "__bytes__",
            "location": 234,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBytestreamRecord.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [],
                "content": []
            }
        },
        "FCGIBytestreamRecord.parse": {
            "name": "parse",
            "location": 246,
            "return": [
                "_TFCGIBytestreamRecord@@FCGIBytestreamRecord@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIBytestreamRecord]"
                ],
                "request_id": [],
                "content": []
            }
        },
        "FCGIBytestreamRecord.encode": {
            "name": "encode",
            "location": 249,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownManagementRecord.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_type": []
            }
        },
        "FCGIUnknownManagementRecord.encode": {
            "name": "encode",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValues.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "FCGIGetValues.parse": {
            "name": "parse",
            "location": 272,
            "return": [
                "_TFCGIGetValues@@FCGIGetValues@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIGetValues]"
                ],
                "request_id": [],
                "content": []
            }
        },
        "FCGIGetValues.encode": {
            "name": "encode",
            "location": 277,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResult.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "FCGIGetValuesResult.parse": {
            "name": "parse",
            "location": 293,
            "return": [
                "_TFCGIGetValuesResult@@FCGIGetValuesResult@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIGetValuesResult]"
                ],
                "request_id": [],
                "content": []
            }
        },
        "FCGIGetValuesResult.encode": {
            "name": "encode",
            "location": 298,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownType.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "FCGIUnknownType.encode": {
            "name": "encode",
            "location": 314,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequest.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [],
                "role": [],
                "flags": []
            }
        },
        "FCGIBeginRequest.encode": {
            "name": "encode",
            "location": 330,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequest.parse": {
            "name": "parse",
            "location": 341,
            "return": [
                "_TFCGIAbortRequest@@FCGIAbortRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFCGIAbortRequest]"
                ],
                "request_id": [],
                "content": []
            }
        },
        "FCGIAbortRequest.encode": {
            "name": "encode",
            "location": 344,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequest.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [],
                "app_status": [],
                "protocol_status": []
            }
        },
        "FCGIEndRequest.encode": {
            "name": "encode",
            "location": 389,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProtocolError.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "FastCgiClientProtocol.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_id": [],
                "params": [],
                "input": [],
                "data": [],
                "loop": []
            }
        },
        "FastCgiClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "FastCgiClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "FastCgiClientProtocol.data_received": {
            "name": "data_received",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FastCgiClientProtocol.eof_received": {
            "name": "eof_received",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "php-was-always-already-serverless-master/test_fcgi_client.py": {
        "ClientTestCase.test_call": {
            "name": "test_call",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIStdoutTestCase.test_encode_simple_record": {
            "name": "test_encode_simple_record",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesTestCase.test_parse": {
            "name": "test_parse",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesTestCase.test_encode": {
            "name": "test_encode",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResultTestCase.test_parse": {
            "name": "test_parse",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIGetValuesResultTestCase.test_encode": {
            "name": "test_encode",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIBeginRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIAbortRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequestTestCase.test_parse": {
            "name": "test_parse",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIEndRequestTestCase.test_encode": {
            "name": "test_encode",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FCGIUnknownTypeTestCase.test_encode": {
            "name": "test_encode",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeNameValuePairsTestCase.test_decode_name_value_pairs": {
            "name": "test_decode_name_value_pairs",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": [],
                "expected": []
            }
        },
        "DecodeNameValuePairsTestCase.test_decode_name_value_pairs_incomplete": {
            "name": "test_decode_name_value_pairs_incomplete",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "data": [],
                "message": []
            }
        },
        "EncodeNameValuePairsTestCase.test_encode_name_value_pairs": {
            "name": "test_encode_name_value_pairs",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pairs": [],
                "expected": []
            }
        },
        "DecodeRecordTestCase.test_decode_record": {
            "name": "test_decode_record",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_record_incomplete": {
            "name": "test_decode_record_incomplete",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_record_wrong_version": {
            "name": "test_decode_record_wrong_version",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecodeRecordTestCase.test_decode_unknown_record_type": {
            "name": "test_decode_unknown_record_type",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out": {
            "name": "test_parse_out",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out_no_status": {
            "name": "test_parse_out_no_status",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseOutputTestCase.test_parse_out_no_reason": {
            "name": "test_parse_out_no_reason",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "physical-commonsense-master/pc/baselines.py": {
        "_random": {
            "name": "_random",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_labels_train": [],
                "y_train": [],
                "y_labels_test": [],
                "y_test_shape": []
            }
        },
        "_all_0": {
            "name": "_all_0",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_labels_train": [],
                "y_train": [],
                "y_labels_test": [],
                "y_test_shape": []
            }
        },
        "_all_1": {
            "name": "_all_1",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_labels_train": [],
                "y_train": [],
                "y_labels_test": [],
                "y_test_shape": []
            }
        },
        "_maj_naive": {
            "name": "_maj_naive",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_labels_train": [],
                "y_train": [],
                "y_labels_test": [],
                "y_test_shape": []
            }
        },
        "_maj_cat": {
            "name": "_maj_cat",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "y_labels_train": [],
                "y_train": [],
                "y_labels_test": [],
                "y_test_shape": []
            }
        },
        "baseline": {
            "name": "baseline",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "func": [],
                "name": [],
                "shortname": []
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/bert.py": {
        "make_epoch_runner": {
            "name": "make_epoch_runner",
            "location": 128,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "task": [],
                "device": [],
                "model": [],
                "optimizer": [],
                "scheduler": [],
                "viz": []
            }
        },
        "main": {
            "name": "main",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BertDataset.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "train": [],
                "seq_len": []
            }
        },
        "BertDataset.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertDataset.__getitem__": {
            "name": "__getitem__",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "make_epoch_runner.epoch": {
            "name": "epoch",
            "location": 133,
            "return": [],
            "arguments": {
                "loader": [],
                "data_len": [],
                "train": [],
                "split": [],
                "global_i": []
            }
        }
    },
    "physical-commonsense-master/pc/data.py": {
        "_read": {
            "name": "_read",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": []
            }
        },
        "_expand": {
            "name": "_expand",
            "location": 72,
            "return": [
                "Tuple[(List[str], Any)]"
            ],
            "arguments": {
                "df": []
            }
        },
        "_train_test_df_split": {
            "name": "_train_test_df_split",
            "location": 89,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "df": [],
                "train_uid_path": [],
                "test_uid_path": []
            }
        },
        "_train_test_df_expand": {
            "name": "_train_test_df_expand",
            "location": 102,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {
                "df": [],
                "train_uid_path": [],
                "test_uid_path": []
            }
        },
        "_get_abstract_objects_properties": {
            "name": "_get_abstract_objects_properties",
            "location": 114,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_objects_properties": {
            "name": "_get_situated_objects_properties",
            "location": 127,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_objects_affordances": {
            "name": "_get_situated_objects_affordances",
            "location": 140,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {}
        },
        "_get_situated_affordances_properties": {
            "name": "_get_situated_affordances_properties",
            "location": 175,
            "return": [
                "Tuple[(Tuple[(List[str], Any)], Tuple[(List[str], Any)])]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 220,
            "return": [
                "Tuple[(Tuple[(Any, Any)], Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "task": []
            }
        },
        "_get_wordembedding_name_map": {
            "name": "_get_wordembedding_name_map",
            "location": 248,
            "return": [
                "dict"
            ],
            "arguments": {
                "path": []
            }
        },
        "_wordembedding_words_objects_properties": {
            "name": "_wordembedding_words_objects_properties",
            "location": 254,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": []
            }
        },
        "_wordembedding_words_objects_affordances": {
            "name": "_wordembedding_words_objects_affordances",
            "location": 269,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": []
            }
        },
        "_wordembedding_words_affordances_properties": {
            "name": "_wordembedding_words_affordances_properties",
            "location": 285,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "labels": []
            }
        },
        "_wordembedding": {
            "name": "_wordembedding",
            "location": 301,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "labels": [],
                "archive_path": [],
                "d": []
            }
        },
        "glove": {
            "name": "glove",
            "location": 332,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "labels": []
            }
        },
        "dep_embs": {
            "name": "dep_embs",
            "location": 338,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "labels": []
            }
        },
        "_uids2sentidx": {
            "name": "_uids2sentidx",
            "location": 342,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "task": [],
                "labels": []
            }
        },
        "_ctx_emb": {
            "name": "_ctx_emb",
            "location": 361,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "labels": [],
                "archive_path": []
            }
        },
        "elmo": {
            "name": "elmo",
            "location": 369,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "labels": []
            }
        },
        "features": {
            "name": "features",
            "location": 373,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "variant": [],
                "x_labels": []
            }
        },
        "main": {
            "name": "main",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/experiments.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/graph.py": {
        "get_cms": {
            "name": "get_cms",
            "location": 16,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "path": []
            }
        },
        "_setup": {
            "name": "_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "figsize": []
            }
        },
        "build_prop_cat_graph": {
            "name": "build_prop_cat_graph",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cat2props": [],
                "prop2cm": [],
                "prop2human": [],
                "metric": []
            }
        },
        "build_prop_aff_graph": {
            "name": "build_prop_aff_graph",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "prop2cm": [],
                "aff2cm": []
            }
        },
        "build_item_freqs_vs_f1": {
            "name": "build_item_freqs_vs_f1",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "item_freqs": [],
                "item2cm": [],
                "freq_lab": [],
                "out_path": [],
                "title": [],
                "f1_lab": []
            }
        },
        "build_prop_freqs_vs_acc": {
            "name": "build_prop_freqs_vs_acc",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "prop_freqs": [],
                "prop2cm": [],
                "freq_lab": [],
                "out_path": []
            }
        },
        "build_freq_vs_freq": {
            "name": "build_freq_vs_freq",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "freq1": [],
                "freq2": [],
                "freq1_lab": [],
                "freq2_lab": []
            }
        },
        "main": {
            "name": "main",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/human.py": {
        "create": {
            "name": "create",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_gold": {
            "name": "get_gold",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "lim": []
            }
        },
        "get_labels": {
            "name": "get_labels",
            "location": 62,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": [],
                "lim": []
            }
        },
        "get_anns": {
            "name": "get_anns",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "lim": []
            }
        },
        "evaluate_round1": {
            "name": "evaluate_round1",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/metrics.py": {
        "cms": {
            "name": "cms",
            "location": 11,
            "return": [
                "Dict[(int, Dict[(str, Any)])]"
            ],
            "arguments": {
                "y_hat": [],
                "y": [],
                "y_labels": []
            }
        },
        "prf1": {
            "name": "prf1",
            "location": 54,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "cm": []
            }
        },
        "mc_nemar": {
            "name": "mc_nemar",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "results_1": [],
                "results_2": []
            }
        },
        "report": {
            "name": "report",
            "location": 118,
            "return": [
                "Tuple[(Any, Any, dict, Dict[(int, Dict[(str, Any)])], Any)]"
            ],
            "arguments": {
                "y_hat": [],
                "y": [],
                "y_labels": [],
                "task_labels": []
            }
        }
    },
    "physical-commonsense-master/pc/models.py": {
        "mlp": {
            "name": "mlp",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "d_in": [],
                "input_dropout": [],
                "h": [],
                "activation": [],
                "inner_dropout": [],
                "d_out": []
            }
        },
        "init_weights": {
            "name": "init_weights",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "m": []
            }
        },
        "make_batcher": {
            "name": "make_batcher",
            "location": 75,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "batch_size": []
            }
        },
        "train": {
            "name": "train",
            "location": 91,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "model": [],
                "x_np": [],
                "y_np": [],
                "config": []
            }
        },
        "test": {
            "name": "test",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "model": [],
                "x_np": [],
                "y_np": [],
                "centering": [],
                "config": []
            }
        },
        "cv": {
            "name": "cv",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [],
                "variant": [],
                "model": [],
                "config": []
            }
        },
        "train_and_test": {
            "name": "train_and_test",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "variant": [],
                "model": [],
                "config": []
            }
        },
        "main": {
            "name": "main",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_batcher.batcher": {
            "name": "batcher",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/significance.py": {
        "get_symbol": {
            "name": "get_symbol",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "p": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "task": [],
                "method": []
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/util.py": {
        "np2str": {
            "name": "np2str",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "a": []
            }
        },
        "str2np": {
            "name": "str2np",
            "location": 19,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "physical-commonsense-master/scripts/perdatum_to_category.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
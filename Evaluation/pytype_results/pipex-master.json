{
    "pipex-master/setup.py": {},
    "pipex-master/pipex/json.py": {
        "loads.map": {
            "name": "map",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "dumps.map": {
            "name": "map",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pipex-master/pipex/pbase.py": {
        "_ensure_hash": {
            "name": "_ensure_hash",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "pipex_hash": {
            "name": "pipex_hash",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "type": [
                    "str"
                ]
            }
        },
        "We.default_value": {
            "name": "default_value",
            "location": 24,
            "return": [
                "_TWe"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWe]"
                ]
            }
        },
        "SourceDataVersion.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDataVersion.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinkDataVersion.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinkDataVersion.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeChain.__rrshift__": {
            "name": "__rrshift__",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "lhs": []
            }
        },
        "PipeChain.__rshift__": {
            "name": "__rshift__",
            "location": 57,
            "return": [
                "_TPipeChain"
            ],
            "arguments": {
                "self": [
                    "_TPipeChain"
                ],
                "other": []
            }
        },
        "PipeChain.__or__": {
            "name": "__or__",
            "location": 69,
            "return": [
                "_TPipeChain"
            ],
            "arguments": {
                "self": [
                    "_TPipeChain"
                ],
                "other": []
            }
        },
        "PipeChain.chain_hash": {
            "name": "chain_hash",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeChain.__bool__": {
            "name": "__bool__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeChain.execute": {
            "name": "execute",
            "location": 82,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "PipeChain.rewriting_required": {
            "name": "rewriting_required",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "PipeChain.do": {
            "name": "do",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipeChain.flatten_chains": {
            "name": "flatten_chains",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(PipeChain, str)]]"
                ]
            }
        },
        "PipeChain.parse_chain": {
            "name": "parse_chain",
            "location": 96,
            "return": [
                "_TPipeChain"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPipeChain]"
                ],
                "chains": [
                    "List[Union[(str, _TPipeChain)]]"
                ]
            }
        },
        "PipeChain._p_E": {
            "name": "_p_E",
            "location": 107,
            "return": [
                "Union[(PipeChain, _NotImplementedType)]"
            ],
            "arguments": {
                "cls": [],
                "chains": []
            }
        },
        "PipeChain._p_S": {
            "name": "_p_S",
            "location": 135,
            "return": [
                "_TPipeChain"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPipeChain]"
                ],
                "chains": []
            }
        },
        "PipeChain._wrap_redirection": {
            "name": "_wrap_redirection",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "chains": []
            }
        },
        "PipeChain._wrap_pipe": {
            "name": "_wrap_pipe",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "chains": []
            }
        },
        "Source.coerce_source": {
            "name": "coerce_source",
            "location": 199,
            "return": [
                "_TSource"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSource]"
                ],
                "obj": []
            }
        },
        "Source.__iter__": {
            "name": "__iter__",
            "location": 210,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.values": {
            "name": "values",
            "location": 213,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "we": []
            }
        },
        "Source.execute": {
            "name": "execute",
            "location": 217,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Source.generate_precords": {
            "name": "generate_precords",
            "location": 220,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Source.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 223,
            "return": [
                "SourceDataVersion"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 228,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "Transformer.execute": {
            "name": "execute",
            "location": 231,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Transformer.wrap_transformer": {
            "name": "wrap_transformer",
            "location": 235,
            "return": [
                "_TTransformer"
            ],
            "arguments": {
                "self": [
                    "_TTransformer"
                ],
                "other": [
                    "_TTransformer"
                ]
            }
        },
        "TransformerSequence.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformers": [
                    "List[Transformer]"
                ]
            }
        },
        "TransformerSequence.transform": {
            "name": "transform",
            "location": 260,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "TransformerSequence.flatten_chains": {
            "name": "flatten_chains",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(PipeChain, str)]]"
                ]
            }
        },
        "TransformerSequence.chain_hash": {
            "name": "chain_hash",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerSequence.__repr__": {
            "name": "__repr__",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sink.coerce_sink": {
            "name": "coerce_sink",
            "location": 283,
            "return": [
                "_TSink"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSink]"
                ],
                "obj": []
            }
        },
        "Sink.process": {
            "name": "process",
            "location": 293,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "tr_source": [
                    "TransformedSource"
                ]
            }
        },
        "Sink.fetch_sink_data_version": {
            "name": "fetch_sink_data_version",
            "location": 296,
            "return": [
                "SinkDataVersion"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "ListSourceSink.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dest_list": [
                    "List[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "ListSourceSink.get_hash": {
            "name": "get_hash",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListSourceSink.generate_precords": {
            "name": "generate_precords",
            "location": 307,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "ListSourceSink.process": {
            "name": "process",
            "location": 314,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "tr_source": [
                    "TransformedSource"
                ]
            }
        },
        "ListSourceSink.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 320,
            "return": [
                "SourceDataVersion"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "IterSource.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": []
            }
        },
        "IterSource.generate_precords": {
            "name": "generate_precords",
            "location": 333,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "IterSource.chain_hash": {
            "name": "chain_hash",
            "location": 340,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrintSink.process": {
            "name": "process",
            "location": 345,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "tr_source": [
                    "TransformedSource"
                ]
            }
        },
        "PrintSink.chain_hash": {
            "name": "chain_hash",
            "location": 351,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityTransformer.transform": {
            "name": "transform",
            "location": 358,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "IdentityTransformer.chain_hash": {
            "name": "chain_hash",
            "location": 361,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformedSource.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Source"
                ],
                "transformer": [
                    "Transformer"
                ]
            }
        },
        "TransformedSource.flatten_chains": {
            "name": "flatten_chains",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(PipeChain, str)]]"
                ]
            }
        },
        "TransformedSource.chain_hash": {
            "name": "chain_hash",
            "location": 375,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformedSource.with_sink": {
            "name": "with_sink",
            "location": 378,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "Sink"
                ]
            }
        },
        "TransformedSource.generate_precords": {
            "name": "generate_precords",
            "location": 381,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "TransformedSource.execute": {
            "name": "execute",
            "location": 384,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "TransformedSource.__repr__": {
            "name": "__repr__",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformedSink.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformer": [
                    "Transformer"
                ],
                "sink": [
                    "Sink"
                ]
            }
        },
        "TransformedSink.flatten_chains": {
            "name": "flatten_chains",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(PipeChain, str)]]"
                ]
            }
        },
        "TransformedSink.generate_precords": {
            "name": "generate_precords",
            "location": 401,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "TransformedSink.process": {
            "name": "process",
            "location": 404,
            "return": [
                "Iterator[Source]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ],
                "tr_source": [
                    "TransformedSource"
                ]
            }
        },
        "TransformedSink.chain_hash": {
            "name": "chain_hash",
            "location": 407,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformedSink.with_source": {
            "name": "with_source",
            "location": 410,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Source"
                ]
            }
        },
        "TransformedSink.__repr__": {
            "name": "__repr__",
            "location": 413,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformedSink.execute": {
            "name": "execute",
            "location": 416,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformed_source": [],
                "sink": [
                    "Sink"
                ]
            }
        },
        "Pipeline.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 425,
            "return": [
                "SourceDataVersion"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Pipeline.flatten_chains": {
            "name": "flatten_chains",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "List[Union[(PipeChain, str)]]"
                ]
            }
        },
        "Pipeline.rewriting_required": {
            "name": "rewriting_required",
            "location": 436,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Pipeline.source": {
            "name": "source",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.transformer": {
            "name": "transformer",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.chain_hash": {
            "name": "chain_hash",
            "location": 462,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.generate_precords": {
            "name": "generate_precords",
            "location": 465,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Pipeline.execute": {
            "name": "execute",
            "location": 468,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [
                    "We"
                ]
            }
        },
        "Pipeline.direct_pipeline": {
            "name": "direct_pipeline",
            "location": 472,
            "return": [
                "_TPipeline"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPipeline]"
                ],
                "source": [
                    "Source"
                ],
                "sink": [
                    "Sink"
                ]
            }
        },
        "Pipeline.__repr__": {
            "name": "__repr__",
            "location": 475,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/pdatastructures.py": {
        "repr_image": {
            "name": "repr_image",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "repr_atom": {
            "name": "repr_atom",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "atom": []
            }
        },
        "repr_channel": {
            "name": "repr_channel",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "channel_name": [],
                "atom": [],
                "is_active": []
            }
        },
        "_repr_html_": {
            "name": "_repr_html_",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_infer_format_from_type": {
            "name": "_infer_format_from_type",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "channel_name": [
                    "str"
                ],
                "value": []
            }
        },
        "PAtom.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PRecord.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PRecord.atom": {
            "name": "atom",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PRecord.value": {
            "name": "value",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PRecord.value_format": {
            "name": "value_format",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PRecord.channels": {
            "name": "channels",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PRecord.get": {
            "name": "get",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "PRecord.get_atom": {
            "name": "get_atom",
            "location": 146,
            "return": [
                "Optional[PAtom]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PRecord.__getitem__": {
            "name": "__getitem__",
            "location": 149,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PRecord.with_channel": {
            "name": "with_channel",
            "location": 153,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ],
                "channel_name": [
                    "str"
                ]
            }
        },
        "PRecord.select_channels": {
            "name": "select_channels",
            "location": 161,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ],
                "channels": []
            }
        },
        "PRecord.with_channel_item": {
            "name": "with_channel_item",
            "location": 174,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ],
                "channel_name": [
                    "str"
                ],
                "value": []
            }
        },
        "PRecord.merge": {
            "name": "merge",
            "location": 186,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ]
            }
        },
        "PRecord.with_id": {
            "name": "with_id",
            "location": 198,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ],
                "id": [
                    "str"
                ]
            }
        },
        "PRecord.with_value": {
            "name": "with_value",
            "location": 206,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "self": [
                    "_TPRecord"
                ],
                "value": []
            }
        },
        "PRecord.from_object": {
            "name": "from_object",
            "location": 222,
            "return": [
                "_TPRecord"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPRecord]"
                ],
                "obj": [],
                "channel_name": [],
                "id": []
            }
        },
        "PRecord.__repr__": {
            "name": "__repr__",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PRecord._repr_html_": {
            "name": "_repr_html_",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/poperators.py": {
        "chain_hash": {
            "name": "chain_hash",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMeta.__getattribute__": {
            "name": "__getattribute__",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "BaseMeta"
                ],
                "name": []
            }
        },
        "SourceMeta.generate_precords": {
            "name": "generate_precords",
            "location": 36,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "cls": [
                    "SourceMeta"
                ],
                "our": []
            }
        },
        "TransformerMeta.transform": {
            "name": "transform",
            "location": 41,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "cls": [
                    "TransformerMeta"
                ],
                "our": [],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "SinkMeta.process": {
            "name": "process",
            "location": 45,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "cls": [
                    "SinkMeta"
                ],
                "our": [],
                "precords": []
            }
        },
        "source.generate": {
            "name": "generate",
            "location": 52,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "source.generate_precords": {
            "name": "generate_precords",
            "location": 55,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "source.chain_hash": {
            "name": "chain_hash",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "pipe.transform": {
            "name": "transform",
            "location": 63,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "pipe.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "pipe.chain_hash": {
            "name": "chain_hash",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "pipe_map.filter": {
            "name": "filter",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "pipe_map.map": {
            "name": "map",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "pipe_map.transform": {
            "name": "transform",
            "location": 84,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": [
                    "Iterator[pipex.pdatastructures.PRecord]"
                ]
            }
        },
        "sink.save": {
            "name": "save",
            "location": 94,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "precord": [
                    "pipex.pdatastructures.PRecord"
                ]
            }
        },
        "sink.process": {
            "name": "process",
            "location": 97,
            "return": [
                "Iterator[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "tr_source": []
            }
        },
        "sink.chain_hash": {
            "name": "chain_hash",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "value_sink.save": {
            "name": "save",
            "location": 106,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "precord": [
                    "pipex.pdatastructures.PRecord"
                ]
            }
        },
        "value_sink.save_value": {
            "name": "save_value",
            "location": 109,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "precord": [
                    "pipex.pdatastructures.PRecord"
                ]
            }
        }
    },
    "pipex-master/pipex/__init__.py": {},
    "pipex-master/pipex/ext/imgaug.py": {
        "augment.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "augmenter": [],
                "multiplier": [],
                "remove_out_of_image": []
            }
        },
        "augment._build_bounding_boxes": {
            "name": "_build_bounding_boxes",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "image": [],
                "bboxes_xyxy": []
            }
        },
        "augment._cut_agd_box": {
            "name": "_cut_agd_box",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "agd_bboxes": []
            }
        },
        "augment.transform": {
            "name": "transform",
            "location": 105,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/ext/ipy.py": {
        "display.transform": {
            "name": "transform",
            "location": 4,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/ext/tesserocr.py": {
        "read.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": [],
                "oem": [],
                "psm": []
            }
        },
        "read.transform": {
            "name": "transform",
            "location": 21,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/ext/tqdm.py": {
        "tqdm.transform": {
            "name": "transform",
            "location": 4,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "tqdm_notebook.transform": {
            "name": "transform",
            "location": 9,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "tqdm_gui.transform": {
            "name": "transform",
            "location": 14,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/ext/__init__.py": {},
    "pipex-master/pipex/image/file.py": {
        "open.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_numpy_array": [],
                "file_name_as_id": [],
                "ext_stripped_id": []
            }
        },
        "open.transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "save.save": {
            "name": "save",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "precord": []
            }
        }
    },
    "pipex-master/pipex/image/__init__.py": {},
    "pipex-master/pipex/operators/concurrency.py": {
        "safe_call": {
            "name": "safe_call",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "mtdname": []
            }
        },
        "close_queues": {
            "name": "close_queues",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_do_slice_chunk": {
            "name": "_do_slice_chunk",
            "location": 29,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "precords": [],
                "chunk_size": []
            }
        },
        "_slice_chunk": {
            "name": "_slice_chunk",
            "location": 37,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "precords": [],
                "chunk_size": []
            }
        },
        "ProducerThread.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [],
                "poll_interval": [],
                "in_q": [],
                "ctl_in_q": [],
                "precords": [],
                "workers": []
            }
        },
        "ProducerThread.run": {
            "name": "run",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProducerThread.ask_quit": {
            "name": "ask_quit",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "SourceFromProducerInWorker.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Worker"
                ]
            }
        },
        "SourceFromProducerInWorker.generate_precords": {
            "name": "generate_precords",
            "location": 102,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._generate": {
            "name": "_generate",
            "location": 168,
            "return": [
                "Generator[(pipex.pdatastructures.PRecord, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._ask_parent_raise": {
            "name": "_ask_parent_raise",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Worker._notify_parent_done": {
            "name": "_notify_parent_done",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._check_interrupt": {
            "name": "_check_interrupt",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "base_fork_join.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "target_chain": [
                    "pipex.pbase.PipeChain"
                ],
                "num_workers": [],
                "chunk_size": [],
                "queue_size": [],
                "ignore_error": [],
                "poll_interval": [],
                "error_logger": []
            }
        },
        "base_fork_join._real_queue_size": {
            "name": "_real_queue_size",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "base_fork_join._run_workers": {
            "name": "_run_workers",
            "location": 216,
            "return": [
                "Tuple[(List[Worker], list, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "base_fork_join._run_producer": {
            "name": "_run_producer",
            "location": 249,
            "return": [
                "ProducerThread"
            ],
            "arguments": {
                "self": [],
                "precords": [],
                "workers": [],
                "in_q": [],
                "ctl_in_q": []
            }
        },
        "base_fork_join._pop_done_state": {
            "name": "_pop_done_state",
            "location": 261,
            "return": [
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "workers": [],
                "ctl_out_q": []
            }
        },
        "base_fork_join._run_consumer": {
            "name": "_run_consumer",
            "location": 273,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "workers": [],
                "out_q": [],
                "ctl_in_q": [],
                "ctl_out_q": []
            }
        },
        "base_fork_join.transform": {
            "name": "transform",
            "location": 304,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "base_fork_join.get_worker_name": {
            "name": "get_worker_name",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "threaded.get_worker_name": {
            "name": "get_worker_name",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "parallel.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "parallel.get_worker_name": {
            "name": "get_worker_name",
            "location": 346,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "on_bg_thread.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "on_bg_thread.get_worker_name": {
            "name": "get_worker_name",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "on_bg_process.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "on_bg_process.get_worker_name": {
            "name": "get_worker_name",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        }
    },
    "pipex-master/pipex/operators/file.py": {
        "load_text.transform": {
            "name": "transform",
            "location": 7,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "precords": []
            }
        },
        "load_binary.transform": {
            "name": "transform",
            "location": 16,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "precords": []
            }
        },
        "glob.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "glob.generate": {
            "name": "generate",
            "location": 29,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/operators/funcs.py": {
        "done.save": {
            "name": "save",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "precord": []
            }
        },
        "constant.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "constant.transform": {
            "name": "transform",
            "location": 20,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "channel.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": []
            }
        },
        "channel.transform": {
            "name": "transform",
            "location": 33,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "preload.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "preload.transform": {
            "name": "transform",
            "location": 43,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "dup.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "dup.transform": {
            "name": "transform",
            "location": 58,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "batch.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "batch.transform": {
            "name": "transform",
            "location": 70,
            "return": [
                "Generator[(pipex.pdatastructures.PRecord, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "unbatch.transform": {
            "name": "transform",
            "location": 78,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "base_curriable.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "base_curriable.chain_hash": {
            "name": "chain_hash",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "base_curriable._curried": {
            "name": "_curried",
            "location": 101,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "base_curriable._simple_curry": {
            "name": "_simple_curry",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "base_curriable._insertion_curry": {
            "name": "_insertion_curry",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "tap.map": {
            "name": "map",
            "location": 116,
            "return": [
                "_T0"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_T0"
                ]
            }
        },
        "map.map": {
            "name": "map",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "map_precord.transform": {
            "name": "transform",
            "location": 125,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "filter_precord.transform": {
            "name": "transform",
            "location": 131,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "channel_map.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ],
                "fn": []
            }
        },
        "channel_map.transform": {
            "name": "transform",
            "location": 142,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "filter.filter": {
            "name": "filter",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "slice.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slice.transform": {
            "name": "transform",
            "location": 157,
            "return": [
                "itertools.islice"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "grep.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "grep.filter": {
            "name": "filter",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "take.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "take.transform": {
            "name": "transform",
            "location": 173,
            "return": [
                "itertools.islice"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "drop.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "drop.transform": {
            "name": "transform",
            "location": 181,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "shuffle.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "window_size": []
            }
        },
        "shuffle.transform": {
            "name": "transform",
            "location": 192,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "select_channels.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "select_channels.transform": {
            "name": "transform",
            "location": 210,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/operators/sources.py": {
        "merge.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "merge.generate_precords": {
            "name": "generate_precords",
            "location": 11,
            "return": [
                "Generator[(pipex.pdatastructures.PRecord, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "concat.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "concat.generate_precords": {
            "name": "generate_precords",
            "location": 36,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "cat.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [],
                "channel_name": []
            }
        },
        "cat.generate": {
            "name": "generate",
            "location": 46,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "repeat.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "repeat.generate": {
            "name": "generate",
            "location": 54,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/operators/__init__.py": {},
    "pipex-master/pipex/storages/bucket_metadata.py": {
        "BucketMetadata.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketMetadata.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 21,
            "return": [
                "pipex.pbase.SourceDataVersion"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketMetadata.fetch_sink_data_version": {
            "name": "fetch_sink_data_version",
            "location": 24,
            "return": [
                "pipex.pbase.SinkDataVersion"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketMetadata.to_json": {
            "name": "to_json",
            "location": 30,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketMetadata.from_json": {
            "name": "from_json",
            "location": 40,
            "return": [
                "_TBucketMetadata"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBucketMetadata]"
                ],
                "data": []
            }
        },
        "BucketMetadata.initial": {
            "name": "initial",
            "location": 51,
            "return": [
                "_TBucketMetadata"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBucketMetadata]"
                ],
                "meta_version": [
                    "pipex.storages.bucket_version.BucketVersion"
                ]
            }
        }
    },
    "pipex-master/pipex/storages/bucket_version.py": {
        "BucketVersion.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "Tuple[int]"
                ]
            }
        },
        "BucketVersion.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketVersion.__lt__": {
            "name": "__lt__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BucketVersion.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BucketVersion.__hash__": {
            "name": "__hash__",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketVersion.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "_TBucketVersion"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBucketVersion]"
                ],
                "ver": [
                    "str"
                ]
            }
        }
    },
    "pipex-master/pipex/storages/__init__.py": {},
    "pipex-master/pipex/storages/base_storage/bucket.py": {
        "BucketWithIds.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "ids": []
            }
        },
        "BucketWithIds.generate_precords": {
            "name": "generate_precords",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "storage": []
            }
        },
        "Bucket.with_ids": {
            "name": "with_ids",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "Bucket.load_metadata": {
            "name": "load_metadata",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.flush_metadata": {
            "name": "flush_metadata",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "metadata": []
            }
        },
        "Bucket.load_ids": {
            "name": "load_ids",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.load_precord": {
            "name": "load_precord",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "id": []
            }
        },
        "Bucket.save_precord": {
            "name": "save_precord",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "precord": []
            }
        },
        "Bucket.read_context": {
            "name": "read_context",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.read_write_context": {
            "name": "read_write_context",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.generate_precords": {
            "name": "generate_precords",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.fetch_sink_data_version": {
            "name": "fetch_sink_data_version",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "Bucket.process": {
            "name": "process",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "tr_source": []
            }
        },
        "Bucket.process_rewrite": {
            "name": "process_rewrite",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "pipeline": [],
                "tr_source": []
            }
        },
        "Bucket._save_precord_with_flush": {
            "name": "_save_precord_with_flush",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "our": [],
                "precord": [],
                "metadata": []
            }
        }
    },
    "pipex-master/pipex/storages/base_storage/storage.py": {
        "Storage.bucket": {
            "name": "bucket",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "use_batch": [],
                "batch_size": [],
                "flush_interval": []
            }
        },
        "Storage.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "pipex-master/pipex/storages/base_storage/__init__.py": {},
    "pipex-master/pipex/storages/h5storage/h5bucket.py": {
        "H5Bucket.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5Bucket.load_metadata": {
            "name": "load_metadata",
            "location": 19,
            "return": [
                "pipex.storages.bucket_metadata.BucketMetadata"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "H5Bucket.flush_metadata": {
            "name": "flush_metadata",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "metadata": [
                    "pipex.storages.bucket_metadata.BucketMetadata"
                ]
            }
        },
        "H5Bucket.load_ids": {
            "name": "load_ids",
            "location": 27,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "H5Bucket.load_precord": {
            "name": "load_precord",
            "location": 30,
            "return": [
                "Optional[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "id": [
                    "str"
                ]
            }
        },
        "H5Bucket.save_precord": {
            "name": "save_precord",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precord": [
                    "pipex.pdatastructures.PRecord"
                ]
            }
        },
        "H5Bucket.read_context": {
            "name": "read_context",
            "location": 67,
            "return": [
                "contextlib._GeneratorContextManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5Bucket.read_write_context": {
            "name": "read_write_context",
            "location": 70,
            "return": [
                "contextlib._GeneratorContextManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5Bucket._ensure_metadata": {
            "name": "_ensure_metadata",
            "location": 73,
            "return": [
                "pipex.storages.bucket_metadata.BucketMetadata"
            ],
            "arguments": {
                "self": []
            }
        },
        "H5Bucket._file_context": {
            "name": "_file_context",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/storages/h5storage/h5storage.py": {
        "H5Storage.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [],
                "swmr": []
            }
        },
        "H5Storage.bucket_names": {
            "name": "bucket_names",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H5Storage.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "H5Storage.with_h5file": {
            "name": "with_h5file",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        }
    },
    "pipex-master/pipex/storages/h5storage/__init__.py": {},
    "pipex-master/pipex/storages/pstorage/pbucket.py": {
        "PBucket.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [],
                "scope": [
                    "Tuple[str]"
                ],
                "use_batch": [
                    "bool"
                ],
                "batch_size": [
                    "Optional[int]"
                ],
                "flush_interval": [
                    "float"
                ]
            }
        },
        "PBucket.read_context": {
            "name": "read_context",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket.read_write_context": {
            "name": "read_write_context",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket.load_ids": {
            "name": "load_ids",
            "location": 52,
            "return": [
                "Iterator[str]"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "PBucket.load_metadata": {
            "name": "load_metadata",
            "location": 61,
            "return": [
                "pipex.storages.bucket_metadata.BucketMetadata"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "PBucket.flush_metadata": {
            "name": "flush_metadata",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "metadata": [
                    "pipex.storages.bucket_metadata.BucketMetadata"
                ]
            }
        },
        "PBucket.load_precord": {
            "name": "load_precord",
            "location": 83,
            "return": [
                "Optional[pipex.pdatastructures.PRecord]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "id": [
                    "str"
                ]
            }
        },
        "PBucket.save_precord": {
            "name": "save_precord",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precord": [
                    "pipex.pdatastructures.PRecord"
                ]
            }
        },
        "PBucket.directory_name": {
            "name": "directory_name",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket.meta_name": {
            "name": "meta_name",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket.meta_tmp_name": {
            "name": "meta_tmp_name",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket.get_sub_dir": {
            "name": "get_sub_dir",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PBucket.ensure_sub_dir": {
            "name": "ensure_sub_dir",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PBucket.data_directory_name": {
            "name": "data_directory_name",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PBucket._ensure_pbucket_dir": {
            "name": "_ensure_pbucket_dir",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "our": []
            }
        },
        "PBucket._ensure_dir": {
            "name": "_ensure_dir",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "pipex-master/pipex/storages/pstorage/pstorage.py": {
        "PStorage.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": []
            }
        },
        "PStorage.find": {
            "name": "find",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "PStorage.bucket_names": {
            "name": "bucket_names",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pipex-master/pipex/storages/pstorage/__init__.py": {},
    "pipex-master/pipex/video/ffmpeg.py": {
        "frames.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fps": [
                    "Optional[str]"
                ]
            }
        },
        "frames.detect_shape": {
            "name": "detect_shape",
            "location": 14,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "frames.get_frames": {
            "name": "get_frames",
            "location": 28,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "frames.transform": {
            "name": "transform",
            "location": 61,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/video/file.py": {
        "open.transform": {
            "name": "transform",
            "location": 6,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/pipex/video/model.py": {
        "FileVideo.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        }
    },
    "pipex-master/pipex/video/__init__.py": {},
    "pipex-master/test/conftest.py": {},
    "pipex-master/test/test_pbase.py": {
        "test_nested_transformer": {
            "name": "test_nested_transformer",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_transformed_source": {
            "name": "test_transformed_source",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_transformed_sink": {
            "name": "test_transformed_sink",
            "location": 78,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_pipeline": {
            "name": "test_pipeline",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested_pipeline": {
            "name": "test_nested_pipeline",
            "location": 132,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_coersion": {
            "name": "test_coersion",
            "location": 301,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/test_pdatastructures.py": {
        "test_precord_value": {
            "name": "test_precord_value",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_precord_merge": {
            "name": "test_precord_merge",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_precord_blob": {
            "name": "test_precord_blob",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_precord_from_object": {
            "name": "test_precord_from_object",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/test_poerators.py": {
        "test_adder": {
            "name": "test_adder",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter": {
            "name": "test_filter",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_change_channel": {
            "name": "test_change_channel",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_forever": {
            "name": "test_one_forever",
            "location": 67,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_set_sink": {
            "name": "test_set_sink",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "one_forever.generate": {
            "name": "generate",
            "location": 8,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "set_sink.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set": []
            }
        },
        "set_sink.save_value": {
            "name": "save_value",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "one_shot_sink.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "one_shot_sink.process": {
            "name": "process",
            "location": 24,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        },
        "adder.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adding": []
            }
        },
        "adder.map": {
            "name": "map",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "select_even.filter": {
            "name": "filter",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "change_channel.transform": {
            "name": "transform",
            "location": 42,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "our": [],
                "precords": []
            }
        }
    },
    "pipex-master/test/ext/test_imgaug.py": {
        "image": {
            "name": "image",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_imgaug_simple": {
            "name": "test_imgaug_simple",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "image": []
            }
        },
        "test_imgaug_bboxes": {
            "name": "test_imgaug_bboxes",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "image": []
            }
        }
    },
    "pipex-master/test/ext/test_tesserocr.py": {
        "remove_alpha": {
            "name": "remove_alpha",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": []
            }
        },
        "test_tesserocr": {
            "name": "test_tesserocr",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/image/test_file.py": {
        "test_open_image": {
            "name": "test_open_image",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_image": {
            "name": "test_save_image",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/operators/test_concurrency.py": {
        "test_threaded": {
            "name": "test_threaded",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "negate": {
            "name": "negate",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "num_child_processes": {
            "name": "num_child_processes",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_parallel": {
            "name": "test_parallel",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 46,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {}
        },
        "div": {
            "name": "div",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_parallel_errornous_case": {
            "name": "test_parallel_errornous_case",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_md5": {
            "name": "test_md5",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "p": {
            "name": "p",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_md5_pool": {
            "name": "test_md5_pool",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/operators/test_func.py": {
        "test_done": {
            "name": "test_done",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tap_simple": {
            "name": "test_tap_simple",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_tap_curry": {
            "name": "test_tap_curry",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_simple": {
            "name": "test_map_simple",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_curry": {
            "name": "test_map_curry",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_simple": {
            "name": "test_filter_simple",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_curry": {
            "name": "test_filter_curry",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch": {
            "name": "test_batch",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_select_channels": {
            "name": "test_select_channels",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tap_simple.func": {
            "name": "func",
            "location": 28,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "test_tap_curry.func": {
            "name": "func",
            "location": 38,
            "return": [],
            "arguments": {
                "lhs": [],
                "source": []
            }
        }
    },
    "pipex-master/test/operators/test_source.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pipex-master/test/storages/test_h5storage.py": {
        "test_h5storage": {
            "name": "test_h5storage",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_h5bucket_skipping": {
            "name": "test_h5bucket_skipping",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_h5_for_specific_ids": {
            "name": "test_h5_for_specific_ids",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_h5bucket_skipping.TestSource.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_h5bucket_skipping.TestSource.generate": {
            "name": "generate",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_h5bucket_skipping.TestSource.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        }
    },
    "pipex-master/test/storages/test_pstorage.py": {
        "test_pstorage": {
            "name": "test_pstorage",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pbucket_skipping": {
            "name": "test_pbucket_skipping",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_p_for_specific_ids": {
            "name": "test_p_for_specific_ids",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pbucket_skipping.TestSource.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_pbucket_skipping.TestSource.generate": {
            "name": "generate",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_pbucket_skipping.TestSource.fetch_source_data_version": {
            "name": "fetch_source_data_version",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "our": []
            }
        }
    },
    "pipex-master/test/video/test_ffmpeg.py": {
        "test_all_frames": {
            "name": "test_all_frames",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frame_per_second": {
            "name": "test_frame_per_second",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "power-simulation-main/main.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/simulation/activity_distribution.py": {
        "ActivityDistributionBase.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "model_builder": [],
                "config_section": []
            }
        },
        "ActivityDistributionBase.servers": {
            "name": "servers",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.empty_servers": {
            "name": "empty_servers",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.intersect": {
            "name": "intersect",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ActivityDistributionBase.remove_servers": {
            "name": "remove_servers",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "empty_servers": []
            }
        },
        "ActivityDistributionBase.test_timeout": {
            "name": "test_timeout",
            "location": 102,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "timeouts": []
            }
        },
        "ActivityDistributionBase.all_idle_timeouts": {
            "name": "all_idle_timeouts",
            "location": 125,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.graph_results": {
            "name": "graph_results",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_t": [],
                "max_t": [],
                "step": []
            }
        },
        "ActivityDistributionBase.construct_timeouts": {
            "name": "construct_timeouts",
            "location": 139,
            "return": [
                "Dict[(Any, Dict[(Any, Dict[(Any, _T0)])])]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "_T0@@"
                ]
            }
        },
        "ActivityDistributionBase.global_idle_timeout": {
            "name": "global_idle_timeout",
            "location": 149,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.optimal_idle_timeout": {
            "name": "optimal_idle_timeout",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "ActivityDistributionBase.random_activity_for_timestamp": {
            "name": "random_activity_for_timestamp",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "ActivityDistributionBase.random_inactivity_for_timestamp": {
            "name": "random_inactivity_for_timestamp",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "ActivityDistributionBase.off_interval_for_timestamp": {
            "name": "off_interval_for_timestamp",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "ActivityDistributionBase.off_frequency_for_hour": {
            "name": "off_frequency_for_hour",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "ActivityDistributionBase.get_all_hourly_percentiles": {
            "name": "get_all_hourly_percentiles",
            "location": 200,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "percentile": []
            }
        },
        "ActivityDistributionBase.get_all_hourly_count": {
            "name": "get_all_hourly_count",
            "location": 215,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ActivityDistributionBase.get_all_hourly_distributions": {
            "name": "get_all_hourly_distributions",
            "location": 232,
            "return": [
                "Dict[(str, Dict[(Any, dict)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__get_flat_model": {
            "name": "__get_flat_model",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "ActivityDistributionBase.__get_unique_models": {
            "name": "__get_unique_models",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "ActivityDistributionBase.__optimal_timeout_all": {
            "name": "__optimal_timeout_all",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "ActivityDistributionBase.__optimal_timeout_timestamp": {
            "name": "__optimal_timeout_timestamp",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "ActivityDistributionBase.__distribution_for_hour": {
            "name": "__distribution_for_hour",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "ActivityDistributionBase.__transpose_histogram": {
            "name": "__transpose_histogram",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__parse_trace": {
            "name": "__parse_trace",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__parse_model": {
            "name": "__parse_model",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "traces": []
            }
        },
        "ActivityDistributionBase.__filter": {
            "name": "__filter",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ActivityDistributionBase.__merge_histograms": {
            "name": "__merge_histograms",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__merge_per_hour": {
            "name": "__merge_per_hour",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__merge_per_pc": {
            "name": "__merge_per_pc",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__merge_per_hour_and_pc": {
            "name": "__merge_per_hour_and_pc",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__filter_out_empty_servers": {
            "name": "__filter_out_empty_servers",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActivityDistributionBase.__is_empty_histogram": {
            "name": "__is_empty_histogram",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "ActivityDistributionBase.__get": {
            "name": "__get",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "DistributionFactory.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "distr_builder": [],
                "fleet_generator": []
            }
        },
        "DistributionFactory.__call__": {
            "name": "__call__",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "training": []
            }
        }
    },
    "power-simulation-main/simulation/computer.py": {
        "Computer.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "distr_factory": [],
                "stats": [],
                "cid": []
            }
        },
        "Computer.cid": {
            "name": "cid",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Computer.is_on": {
            "name": "is_on",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Computer.change_status": {
            "name": "change_status",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "interrupt_idle_timer": []
            }
        },
        "Computer.serve": {
            "name": "serve",
            "location": 78,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.__idle_timeout": {
            "name": "__idle_timeout",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Computer.__idle_timer_runner": {
            "name": "__idle_timer_runner",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/configuration.py": {
        "positive_int": {
            "name": "positive_int",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "positive_float": {
            "name": "positive_float",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.runs": {
            "name": "runs",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.env": {
            "name": "env",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.now": {
            "name": "now",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.new_run": {
            "name": "new_run",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.training_time": {
            "name": "training_time",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.debug": {
            "name": "debug",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.users_num": {
            "name": "users_num",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.simulation_time": {
            "name": "simulation_time",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.simulation_weeks": {
            "name": "simulation_weeks",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.training_weeks": {
            "name": "training_weeks",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.get_arg": {
            "name": "get_arg",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Configuration.get_config": {
            "name": "get_config",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "section": []
            }
        },
        "Configuration.get_config_int": {
            "name": "get_config_int",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "section": []
            }
        },
        "Configuration.get_config_float": {
            "name": "get_config_float",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "section": []
            }
        },
        "Configuration.__parse_config": {
            "name": "__parse_config",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__parse_args": {
            "name": "__parse_args",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/distribution.py": {
        "EmpiricalDistribution.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "EmpiricalDistribution.data": {
            "name": "data",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmpiricalDistribution.is_complete": {
            "name": "is_complete",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmpiricalDistribution.rvs": {
            "name": "rvs",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "EmpiricalDistribution.extend": {
            "name": "extend",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "EmpiricalDistribution.__fit_spline": {
            "name": "__fit_spline",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmpiricalDistribution.__len__": {
            "name": "__len__",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmpiricalDistribution.__iter__": {
            "name": "__iter__",
            "location": 73,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/fleet_generator.py": {
        "norm": {
            "name": "norm",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "m": [],
                "s": []
            }
        },
        "lognorm": {
            "name": "lognorm",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "m": [],
                "s": []
            }
        },
        "is_workhour": {
            "name": "is_workhour",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "FleetGenerator.servers": {
            "name": "servers",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetGenerator.global_idle_timeout": {
            "name": "global_idle_timeout",
            "location": 94,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetGenerator.optimal_idle_timeout": {
            "name": "optimal_idle_timeout",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "all_timespan": []
            }
        },
        "FleetGenerator.random_activity_for_timestamp": {
            "name": "random_activity_for_timestamp",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "FleetGenerator.random_inactivity_for_timestamp": {
            "name": "random_inactivity_for_timestamp",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "FleetGenerator.off_interval_for_timestamp": {
            "name": "off_interval_for_timestamp",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": []
            }
        },
        "FleetGenerator.off_frequency_for_hour": {
            "name": "off_frequency_for_hour",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator.get_all_hourly_percentiles": {
            "name": "get_all_hourly_percentiles",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "percentile": []
            }
        },
        "FleetGenerator.get_all_hourly_count": {
            "name": "get_all_hourly_count",
            "location": 146,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FleetGenerator.get_all_hourly_distributions": {
            "name": "get_all_hourly_distributions",
            "location": 150,
            "return": [
                "Dict[(str, Dict[(int, Dict[(int, list)])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetGenerator._get_distribution": {
            "name": "_get_distribution",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "key": [],
                "timestamp": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator._activity_time": {
            "name": "_activity_time",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "timestamp": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator._inactivity_time": {
            "name": "_inactivity_time",
            "location": 186,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator._user_shutdown_time": {
            "name": "_user_shutdown_time",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "timestamp": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator._user_shutdown_time_next_in_time": {
            "name": "_user_shutdown_time_next_in_time",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "day": [],
                "hour": []
            }
        },
        "FleetGenerator._shutdowns_by_fraction": {
            "name": "_shutdowns_by_fraction",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "fraction": []
            }
        }
    },
    "power-simulation-main/simulation/histogram.py": {
        "create_histogram_tables": {
            "name": "create_histogram_tables",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "Histogram.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "distr_factory": [],
                "conn": [],
                "name": []
            }
        },
        "Histogram.servers": {
            "name": "servers",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Histogram.append": {
            "name": "append",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [],
                "cid": [],
                "value": []
            }
        },
        "Histogram.flush": {
            "name": "flush",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Histogram.get_all_hourly_histograms": {
            "name": "get_all_hourly_histograms",
            "location": 74,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "Histogram.get_all_events": {
            "name": "get_all_events",
            "location": 92,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "run": []
            }
        },
        "Histogram.get_all_histogram": {
            "name": "get_all_histogram",
            "location": 117,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "run": []
            }
        },
        "Histogram.get_all_hourly_percentiles": {
            "name": "get_all_hourly_percentiles",
            "location": 122,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "percentile": [],
                "run": []
            }
        },
        "Histogram.get_all_hourly_count": {
            "name": "get_all_hourly_count",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "Histogram.get_all_hourly_distributions": {
            "name": "get_all_hourly_distributions",
            "location": 157,
            "return": [
                "Dict[(int, Dict[(int, numpy.ndarray)])]"
            ],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "Histogram.sum_histogram": {
            "name": "sum_histogram",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "trim": [],
                "run": []
            }
        },
        "Histogram.count_histogram": {
            "name": "count_histogram",
            "location": 232,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "run": []
            }
        }
    },
    "power-simulation-main/simulation/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "xmax": [],
                "xmin": [],
                "inactivity": [],
                "activity": [],
                "off_duration": [],
                "off_fraction": []
            }
        },
        "Model.is_complete": {
            "name": "is_complete",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.inactivity": {
            "name": "inactivity",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.activity": {
            "name": "activity",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.off_duration": {
            "name": "off_duration",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.off_fraction": {
            "name": "off_fraction",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.test_timeout": {
            "name": "test_timeout",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "retest": []
            }
        },
        "Model.resolve_key": {
            "name": "resolve_key",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Model.extend": {
            "name": "extend",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "Model.optimal_idle_timeout": {
            "name": "optimal_idle_timeout",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__optimal_timeout_search": {
            "name": "__optimal_timeout_search",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__optimal_timeout_search.f": {
            "name": "f",
            "location": 128,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "power-simulation-main/simulation/module.py": {
        "Module.provide_connection": {
            "name": "provide_connection",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "power-simulation-main/simulation/plot.py": {
        "Plot.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "distribution_factory": [],
                "stats": []
            }
        },
        "Plot.plot_all": {
            "name": "plot_all",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Plot.plot_mean_medians_comparison": {
            "name": "plot_mean_medians_comparison",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "histogram": []
            }
        },
        "Plot.plot_hourly_time_percentages": {
            "name": "plot_hourly_time_percentages",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Plot.__plot_bar": {
            "name": "__plot_bar",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "bar": [],
                "hist": [],
                "orig": []
            }
        },
        "Plot.__process_pc_intervals": {
            "name": "__process_pc_intervals",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "intervals": []
            }
        },
        "Plot.__generate_events2": {
            "name": "__generate_events2",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/simulation.py": {
        "confidence_interval": {
            "name": "confidence_interval",
            "location": 143,
            "return": [
                "Generator[(Tuple[(_T0, int)], Any, Any)]"
            ],
            "arguments": {
                "m": [
                    "_T0@@"
                ],
                "alpha": []
            }
        },
        "runner": {
            "name": "runner",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "Simulation.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "distr_factory": [],
                "user_builder": [],
                "plot": [],
                "stats": []
            }
        },
        "Simulation.timeout": {
            "name": "timeout",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.all_timeouts": {
            "name": "all_timeouts",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.test_timeout": {
            "name": "test_timeout",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.graph_timeouts": {
            "name": "graph_timeouts",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulation.run": {
            "name": "run",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.__generate_cids": {
            "name": "__generate_cids",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.__validate_results": {
            "name": "__validate_results",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulation.__monitor_time": {
            "name": "__monitor_time",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/static.py": {
        "config_logging": {
            "name": "config_logging",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "timed": {
            "name": "timed",
            "location": 95,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "timestamp_to_day": {
            "name": "timestamp_to_day",
            "location": 111,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "timestamp_to_hour": {
            "name": "timestamp_to_hour",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "hour_to_day": {
            "name": "hour_to_day",
            "location": 125,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "hour": []
            }
        },
        "previous_hour": {
            "name": "previous_hour",
            "location": 132,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "day": [],
                "hour": []
            }
        },
        "weight": {
            "name": "weight",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": [],
                "ip": [],
                "fp": []
            }
        },
        "weighted_user_satisfaction": {
            "name": "weighted_user_satisfaction",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "t": [],
                "timeout": [],
                "threshold": []
            }
        },
        "user_satisfaction": {
            "name": "user_satisfaction",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "t": [],
                "timeout": []
            }
        },
        "generate_servers": {
            "name": "generate_servers",
            "location": 159,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "size": []
            }
        },
        "draw_from_distribution": {
            "name": "draw_from_distribution",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "distribution": [],
                "min_value": [],
                "max_value": []
            }
        },
        "profile.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "profile.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "timed.wrapper": {
            "name": "wrapper",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "profile.__call__.wrapper": {
            "name": "wrapper",
            "location": 78,
            "return": [],
            "arguments": {}
        }
    },
    "power-simulation-main/simulation/stats.py": {
        "Stats.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "distr_factory": [],
                "historgram_builder": []
            }
        },
        "Stats._idle_timeout": {
            "name": "_idle_timeout",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "Stats.optimal_idle_timeout": {
            "name": "optimal_idle_timeout",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.user_satisfaction": {
            "name": "user_satisfaction",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.apdex": {
            "name": "apdex",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.removed_inactivity": {
            "name": "removed_inactivity",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.append": {
            "name": "append",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "cid": [],
                "timestamp": []
            }
        },
        "Stats.get_all_hourly_histograms": {
            "name": "get_all_hourly_histograms",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Stats.get_all_hourly_percentiles": {
            "name": "get_all_hourly_percentiles",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "percentile": []
            }
        },
        "Stats.get_all_events": {
            "name": "get_all_events",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "cid": []
            }
        },
        "Stats.get_merged_events": {
            "name": "get_merged_events",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.get_all_histogram": {
            "name": "get_all_histogram",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "cid": []
            }
        },
        "Stats.get_all_hourly_count": {
            "name": "get_all_hourly_count",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Stats.get_all_hourly_distributions": {
            "name": "get_all_hourly_distributions",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stats.sum_histogram": {
            "name": "sum_histogram",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "cid": [],
                "trim": []
            }
        },
        "Stats.count_histogram": {
            "name": "count_histogram",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "cid": []
            }
        },
        "Stats.flush": {
            "name": "flush",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "computer_builder": [],
                "distr_factory": [],
                "stats": [],
                "cid": []
            }
        },
        "User.run": {
            "name": "run",
            "location": 49,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__indicate_shutdown": {
            "name": "__indicate_shutdown",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__shutdown_interval": {
            "name": "__shutdown_interval",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "power-simulation-main/simulation/__init__.py": {},
    "power-simulation-main/tests/distribution_test.py": {
        "setup_numpy": {
            "name": "setup_numpy",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_ks_2samp": {
            "name": "test_ks_2samp",
            "location": 38,
            "return": [],
            "arguments": {
                "original_dist": []
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tests/__init__.py": {},
    "power-simulation-main/tools/anonymise_trace.py": {
        "names_generator": {
            "name": "names_generator",
            "location": 15,
            "return": [
                "Generator[(str, Any, Any)]"
            ],
            "arguments": {
                "trace": []
            }
        },
        "print_substitutions": {
            "name": "print_substitutions",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "pcs": []
            }
        },
        "should_substitute": {
            "name": "should_substitute",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "pc_name": []
            }
        },
        "anonymise": {
            "name": "anonymise",
            "location": 34,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "trace": [
                    "_T0@@"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tools/benchmark.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "main.gen_dataset": {
            "name": "gen_dataset",
            "location": 31,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "main.fit_dataset": {
            "name": "fit_dataset",
            "location": 35,
            "return": [],
            "arguments": {
                "dataset": []
            }
        }
    },
    "power-simulation-main/tools/generate_test_data.py": {
        "generate_data": {
            "name": "generate_data",
            "location": 26,
            "return": [
                "List[Dict[(str, Union[(str, List[Dict[(str, Union[(list, str)])]])])]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tools/parse_trace.py": {
        "parse_model": {
            "name": "parse_model",
            "location": 23,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "traces": [],
                "day": [],
                "hour": []
            }
        },
        "parse_trace": {
            "name": "parse_trace",
            "location": 34,
            "return": [
                "Dict[(nothing, Dict[(Any, list)])]"
            ],
            "arguments": {
                "trace_file": [],
                "day": [],
                "hour": []
            }
        }
    },
    "power-simulation-main/tools/plot_distribution.py": {
        "plot_distribution": {
            "name": "plot_distribution",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "trace_file": [],
                "key": [],
                "day": [],
                "hours": []
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tools/plot_histogram.py": {
        "plot_histogram": {
            "name": "plot_histogram",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "trace": [],
                "key": [],
                "nbins": [],
                "distribution_name": [],
                "xmax": []
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tools/plot_satisfaction.py": {
        "plot_trace": {
            "name": "plot_trace",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "trace": []
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "power-simulation-main/tools/__init__.py": {}
}
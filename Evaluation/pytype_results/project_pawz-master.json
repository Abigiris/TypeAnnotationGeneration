{
    "project_pawz-master/email_test.py": {},
    "project_pawz-master/manage.py": {},
    "project_pawz-master/adoptions/admin.py": {},
    "project_pawz-master/adoptions/apps.py": {},
    "project_pawz-master/adoptions/models.py": {},
    "project_pawz-master/adoptions/tests.py": {},
    "project_pawz-master/adoptions/views.py": {},
    "project_pawz-master/adoptions/__init__.py": {},
    "project_pawz-master/adoptions/migrations/__init__.py": {},
    "project_pawz-master/config/urls.py": {},
    "project_pawz-master/config/wsgi.py": {},
    "project_pawz-master/config/__init__.py": {},
    "project_pawz-master/config/settings/base.py": {},
    "project_pawz-master/config/settings/local.py": {},
    "project_pawz-master/config/settings/production.py": {},
    "project_pawz-master/config/settings/test.py": {},
    "project_pawz-master/config/settings/__init__.py": {},
    "project_pawz-master/docs/conf.py": {},
    "project_pawz-master/docs/__init__.py": {},
    "project_pawz-master/extra/docker/django/manage.py": {},
    "project_pawz-master/extra/docker/django/config/celery.py": {},
    "project_pawz-master/extra/docker/django/config/common_settings.py": {},
    "project_pawz-master/extra/docker/django/config/development_settings.py": {},
    "project_pawz-master/extra/docker/django/config/production_settings.py": {},
    "project_pawz-master/extra/docker/django/config/urls.py": {},
    "project_pawz-master/extra/docker/django/config/wsgi.py": {},
    "project_pawz-master/extra/docker/django/config/__init__.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/admin.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/apps.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/emails.py": {
        "send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 45,
            "return": [],
            "arguments": {
                "subscriber": []
            }
        },
        "send_subscriber_message": {
            "name": "send_subscriber_message",
            "location": 76,
            "return": [],
            "arguments": {
                "subscriber_message": []
            }
        },
        "EmailTemplateContext.make_link": {
            "name": "make_link",
            "location": 24,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "EmailTemplateContext.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "dict_": []
            }
        },
        "EmailTemplateContext.common_context": {
            "name": "common_context",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/factories.py": {
        "SubscriberFactory._create": {
            "name": "_create",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "model_class": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/forms.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/mixins.py": {
        "UserCanUseMailingList.get_object": {
            "name": "get_object",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/models.py": {
        "MailingList.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailingList.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailingList.user_can_use_mailing_list": {
            "name": "user_can_use_mailing_list",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "SubscriberManager.confirmed_subscribers_for_mailing_list": {
            "name": "confirmed_subscribers_for_mailing_list",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "mailing_list": []
            }
        },
        "Subscriber.save": {
            "name": "save",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "force_insert": [],
                "force_update": [],
                "using": [],
                "update_fields": []
            }
        },
        "Subscriber.send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.save": {
            "name": "save",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "force_insert": [],
                "force_update": [],
                "using": [],
                "update_fields": []
            }
        },
        "SubscriberMessageManager.create_from_message": {
            "name": "create_from_message",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SubscriberMessage.save": {
            "name": "save",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "force_insert": [],
                "force_update": [],
                "using": [],
                "update_fields": []
            }
        },
        "SubscriberMessage.send": {
            "name": "send",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/permissions.py": {
        "IsOwnerPermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "view": [],
                "obj": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/serializers.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/tasks.py": {
        "send_confirmation_email_to_subscriber": {
            "name": "send_confirmation_email_to_subscriber",
            "location": 7,
            "return": [],
            "arguments": {
                "subscriber_id": []
            }
        },
        "build_subscriber_messages_for_message": {
            "name": "build_subscriber_messages_for_message",
            "location": 14,
            "return": [],
            "arguments": {
                "message_id": []
            }
        },
        "send_subscriber_message": {
            "name": "send_subscriber_message",
            "location": 21,
            "return": [],
            "arguments": {
                "subscriber_message_id": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/tests.py": {
        "MockSendEmailToSubscriberTask.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockSendEmailToSubscriberTask.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriberCreationTestCase.test_calling_create_queues_confirmation_email_task": {
            "name": "test_calling_create_queues_confirmation_email_task",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriberManagerTestCase.testConfirmedSubscribersForMailingList": {
            "name": "testConfirmedSubscribersForMailingList",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListMailingListsWithAPI.setUp": {
            "name": "setUp",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListMailingListsWithAPI.test_listing_all_my_mailing_lists": {
            "name": "test_listing_all_my_mailing_lists",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/urls.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/views.py": {
        "SubscribeToMailingListView.get_initial": {
            "name": "get_initial",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscribeToMailingListView.get_success_url": {
            "name": "get_success_url",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscribeToMailingListView.get_context_data": {
            "name": "get_context_data",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfirmSubscriptionView.get_object": {
            "name": "get_object",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": []
            }
        },
        "UnsubscribeView.get_success_url": {
            "name": "get_success_url",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMailingListView.get_initial": {
            "name": "get_initial",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailingListListView.get_queryset": {
            "name": "get_queryset",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMessageView.get_success_url": {
            "name": "get_success_url",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMessageView.get_initial": {
            "name": "get_initial",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMessageView.get_context_data": {
            "name": "get_context_data",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateMessageView.form_valid": {
            "name": "form_valid",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "CreateMessageView.get_mailing_list": {
            "name": "get_mailing_list",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailingListCreateListView.get_queryset": {
            "name": "get_queryset",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MailingListCreateListView.get_serializer": {
            "name": "get_serializer",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriberListCreateView.get_queryset": {
            "name": "get_queryset",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriberListCreateView.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriberListCreateView.get_serializer": {
            "name": "get_serializer",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/mailinglist/__init__.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/migrations/0001_initial.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/migrations/0002_subscribermessage.py": {},
    "project_pawz-master/extra/docker/django/mailinglist/migrations/__init__.py": {},
    "project_pawz-master/extra/docker/django/user/admin.py": {},
    "project_pawz-master/extra/docker/django/user/apps.py": {},
    "project_pawz-master/extra/docker/django/user/factories.py": {
        "UserFactory._create": {
            "name": "_create",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "model_class": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/user/models.py": {},
    "project_pawz-master/extra/docker/django/user/tests.py": {},
    "project_pawz-master/extra/docker/django/user/urls.py": {},
    "project_pawz-master/extra/docker/django/user/views.py": {
        "RegisterView.get_success_url": {
            "name": "get_success_url",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/extra/docker/django/user/__init__.py": {},
    "project_pawz-master/extra/docker/django/user/migrations/__init__.py": {},
    "project_pawz-master/extra/parallax_svg_tools/run.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/dammit.py": {
        "chardet_dammit": {
            "name": "chardet_dammit",
            "location": 39,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "EntitySubstitution._populate_class_variables": {
            "name": "_populate_class_variables",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "EntitySubstitution._substitute_html_entity": {
            "name": "_substitute_html_entity",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "matchobj": []
            }
        },
        "EntitySubstitution._substitute_xml_entity": {
            "name": "_substitute_xml_entity",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "matchobj": []
            }
        },
        "EntitySubstitution.quoted_attribute_value": {
            "name": "quoted_attribute_value",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_xml_containing_entities": {
            "name": "substitute_xml_containing_entities",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "EncodingDetector.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "EncodingDetector._usable": {
            "name": "_usable",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "tried": []
            }
        },
        "EncodingDetector.encodings": {
            "name": "encodings",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodingDetector.strip_byte_order_mark": {
            "name": "strip_byte_order_mark",
            "location": 274,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "EncodingDetector.find_declared_encoding": {
            "name": "find_declared_encoding",
            "location": 300,
            "return": [],
            "arguments": {
                "cls": [],
                "markup": [],
                "is_html": [],
                "search_entire_document": []
            }
        },
        "UnicodeDammit.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "smart_quotes_to": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "UnicodeDammit._sub_ms_char": {
            "name": "_sub_ms_char",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "UnicodeDammit._convert_from": {
            "name": "_convert_from",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "proposed": [],
                "errors": []
            }
        },
        "UnicodeDammit._to_unicode": {
            "name": "_to_unicode",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "encoding": [],
                "errors": []
            }
        },
        "UnicodeDammit.declared_html_encoding": {
            "name": "declared_html_encoding",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeDammit.find_codec": {
            "name": "find_codec",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit._codec": {
            "name": "_codec",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit.detwingle": {
            "name": "detwingle",
            "location": 781,
            "return": [],
            "arguments": {
                "cls": [],
                "in_bytes": [],
                "main_encoding": [],
                "embedded_encoding": []
            }
        }
    },
    "project_pawz-master/extra/parallax_svg_tools/bs4/diagnose.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/element.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/__init__.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/builder/_html5lib.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/builder/_htmlparser.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/builder/_lxml.py": {},
    "project_pawz-master/extra/parallax_svg_tools/bs4/builder/__init__.py": {
        "register_treebuilders_from": {
            "name": "register_treebuilders_from",
            "location": 295,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "TreeBuilderRegistry.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilderRegistry.register": {
            "name": "register",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "treebuilder_class": []
            }
        },
        "TreeBuilderRegistry.lookup": {
            "name": "lookup",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.reset": {
            "name": "reset",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.can_be_empty_element": {
            "name": "can_be_empty_element",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "TreeBuilder.feed": {
            "name": "feed",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "TreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": []
            }
        },
        "TreeBuilder.test_fragment_to_document": {
            "name": "test_fragment_to_document",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "TreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "TreeBuilder._replace_cdata_list_attribute_values": {
            "name": "_replace_cdata_list_attribute_values",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.feed": {
            "name": "feed",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SAXTreeBuilder.close": {
            "name": "close",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.startElement": {
            "name": "startElement",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElement": {
            "name": "endElement",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SAXTreeBuilder.startElementNS": {
            "name": "startElementNS",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElementNS": {
            "name": "endElementNS",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": []
            }
        },
        "SAXTreeBuilder.startPrefixMapping": {
            "name": "startPrefixMapping",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "nodeValue": []
            }
        },
        "SAXTreeBuilder.endPrefixMapping": {
            "name": "endPrefixMapping",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SAXTreeBuilder.characters": {
            "name": "characters",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SAXTreeBuilder.startDocument": {
            "name": "startDocument",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.endDocument": {
            "name": "endDocument",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        }
    },
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/run.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/dammit.py": {
        "chardet_dammit": {
            "name": "chardet_dammit",
            "location": 39,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "EntitySubstitution._populate_class_variables": {
            "name": "_populate_class_variables",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "EntitySubstitution._substitute_html_entity": {
            "name": "_substitute_html_entity",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "matchobj": []
            }
        },
        "EntitySubstitution._substitute_xml_entity": {
            "name": "_substitute_xml_entity",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "matchobj": []
            }
        },
        "EntitySubstitution.quoted_attribute_value": {
            "name": "quoted_attribute_value",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_xml_containing_entities": {
            "name": "substitute_xml_containing_entities",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "EncodingDetector.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "EncodingDetector._usable": {
            "name": "_usable",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "tried": []
            }
        },
        "EncodingDetector.encodings": {
            "name": "encodings",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodingDetector.strip_byte_order_mark": {
            "name": "strip_byte_order_mark",
            "location": 274,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "EncodingDetector.find_declared_encoding": {
            "name": "find_declared_encoding",
            "location": 300,
            "return": [],
            "arguments": {
                "cls": [],
                "markup": [],
                "is_html": [],
                "search_entire_document": []
            }
        },
        "UnicodeDammit.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "smart_quotes_to": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "UnicodeDammit._sub_ms_char": {
            "name": "_sub_ms_char",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "match": []
            }
        },
        "UnicodeDammit._convert_from": {
            "name": "_convert_from",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "proposed": [],
                "errors": []
            }
        },
        "UnicodeDammit._to_unicode": {
            "name": "_to_unicode",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "encoding": [],
                "errors": []
            }
        },
        "UnicodeDammit.declared_html_encoding": {
            "name": "declared_html_encoding",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeDammit.find_codec": {
            "name": "find_codec",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit._codec": {
            "name": "_codec",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit.detwingle": {
            "name": "detwingle",
            "location": 781,
            "return": [],
            "arguments": {
                "cls": [],
                "in_bytes": [],
                "main_encoding": [],
                "embedded_encoding": []
            }
        }
    },
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/diagnose.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/element.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/__init__.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/builder/_html5lib.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/builder/_htmlparser.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/builder/_lxml.py": {},
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/bs4/builder/__init__.py": {
        "register_treebuilders_from": {
            "name": "register_treebuilders_from",
            "location": 295,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "TreeBuilderRegistry.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilderRegistry.register": {
            "name": "register",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "treebuilder_class": []
            }
        },
        "TreeBuilderRegistry.lookup": {
            "name": "lookup",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.reset": {
            "name": "reset",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.can_be_empty_element": {
            "name": "can_be_empty_element",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "TreeBuilder.feed": {
            "name": "feed",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "TreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": []
            }
        },
        "TreeBuilder.test_fragment_to_document": {
            "name": "test_fragment_to_document",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "TreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "TreeBuilder._replace_cdata_list_attribute_values": {
            "name": "_replace_cdata_list_attribute_values",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.feed": {
            "name": "feed",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SAXTreeBuilder.close": {
            "name": "close",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.startElement": {
            "name": "startElement",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElement": {
            "name": "endElement",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SAXTreeBuilder.startElementNS": {
            "name": "startElementNS",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElementNS": {
            "name": "endElementNS",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": []
            }
        },
        "SAXTreeBuilder.startPrefixMapping": {
            "name": "startPrefixMapping",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "nodeValue": []
            }
        },
        "SAXTreeBuilder.endPrefixMapping": {
            "name": "endPrefixMapping",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SAXTreeBuilder.characters": {
            "name": "characters",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SAXTreeBuilder.startDocument": {
            "name": "startDocument",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.endDocument": {
            "name": "endDocument",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        }
    },
    "project_pawz-master/extra/parallax_svg_tools/example/parallax_svg_tools/svg/__init__.py": {
        "create_file": {
            "name": "create_file",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "mode": []
            }
        },
        "parse_svg": {
            "name": "parse_svg",
            "location": 19,
            "return": [],
            "arguments": {
                "path": [],
                "namespace": [],
                "options": []
            }
        },
        "write_svg": {
            "name": "write_svg",
            "location": 165,
            "return": [],
            "arguments": {
                "svg": [],
                "dst_path": [],
                "options": []
            }
        },
        "compile_svg": {
            "name": "compile_svg",
            "location": 190,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": [],
                "options": []
            }
        },
        "compile_master_svg": {
            "name": "compile_master_svg",
            "location": 215,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": [],
                "options": []
            }
        },
        "parse_markup": {
            "name": "parse_markup",
            "location": 278,
            "return": [],
            "arguments": {
                "src_path": [],
                "output": []
            }
        },
        "inline_svg": {
            "name": "inline_svg",
            "location": 291,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": []
            }
        }
    },
    "project_pawz-master/extra/parallax_svg_tools/svg/__init__.py": {
        "create_file": {
            "name": "create_file",
            "location": 7,
            "return": [],
            "arguments": {
                "path": [],
                "mode": []
            }
        },
        "parse_svg": {
            "name": "parse_svg",
            "location": 19,
            "return": [],
            "arguments": {
                "path": [],
                "namespace": [],
                "options": []
            }
        },
        "write_svg": {
            "name": "write_svg",
            "location": 173,
            "return": [],
            "arguments": {
                "svg": [],
                "dst_path": [],
                "options": []
            }
        },
        "compile_svg": {
            "name": "compile_svg",
            "location": 198,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": [],
                "options": []
            }
        },
        "compile_master_svg": {
            "name": "compile_master_svg",
            "location": 223,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": [],
                "options": []
            }
        },
        "parse_markup": {
            "name": "parse_markup",
            "location": 286,
            "return": [],
            "arguments": {
                "src_path": [],
                "output": []
            }
        },
        "inline_svg": {
            "name": "inline_svg",
            "location": 299,
            "return": [],
            "arguments": {
                "src_path": [],
                "dst_path": []
            }
        }
    },
    "project_pawz-master/project_pawz/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [],
            "arguments": {
                "settings": [],
                "tmpdir": []
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "project_pawz-master/project_pawz/__init__.py": {},
    "project_pawz-master/project_pawz/contrib/__init__.py": {},
    "project_pawz-master/project_pawz/contrib/sites/__init__.py": {},
    "project_pawz-master/project_pawz/contrib/sites/migrations/0001_initial.py": {},
    "project_pawz-master/project_pawz/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "project_pawz-master/project_pawz/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [],
            "arguments": {
                "apps": [],
                "schema_editor": []
            }
        }
    },
    "project_pawz-master/project_pawz/contrib/sites/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/dogs/admin.py": {},
    "project_pawz-master/project_pawz/dogs/apps.py": {},
    "project_pawz-master/project_pawz/dogs/models.py": {},
    "project_pawz-master/project_pawz/dogs/tests.py": {},
    "project_pawz-master/project_pawz/dogs/views.py": {},
    "project_pawz-master/project_pawz/dogs/__init__.py": {},
    "project_pawz-master/project_pawz/dogs/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/donations/admin.py": {},
    "project_pawz-master/project_pawz/donations/apps.py": {},
    "project_pawz-master/project_pawz/donations/models.py": {},
    "project_pawz-master/project_pawz/donations/tests.py": {},
    "project_pawz-master/project_pawz/donations/views.py": {},
    "project_pawz-master/project_pawz/donations/__init__.py": {},
    "project_pawz-master/project_pawz/donations/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/events/admin.py": {},
    "project_pawz-master/project_pawz/events/apps.py": {},
    "project_pawz-master/project_pawz/events/models.py": {},
    "project_pawz-master/project_pawz/events/tests.py": {},
    "project_pawz-master/project_pawz/events/views.py": {},
    "project_pawz-master/project_pawz/events/__init__.py": {},
    "project_pawz-master/project_pawz/events/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/fosters/admin.py": {},
    "project_pawz-master/project_pawz/fosters/apps.py": {},
    "project_pawz-master/project_pawz/fosters/models.py": {},
    "project_pawz-master/project_pawz/fosters/tests.py": {},
    "project_pawz-master/project_pawz/fosters/views.py": {},
    "project_pawz-master/project_pawz/fosters/__init__.py": {},
    "project_pawz-master/project_pawz/fosters/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/sponsorships/admin.py": {},
    "project_pawz-master/project_pawz/sponsorships/apps.py": {},
    "project_pawz-master/project_pawz/sponsorships/models.py": {},
    "project_pawz-master/project_pawz/sponsorships/tests.py": {},
    "project_pawz-master/project_pawz/sponsorships/views.py": {},
    "project_pawz-master/project_pawz/sponsorships/__init__.py": {},
    "project_pawz-master/project_pawz/sponsorships/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "sociallogin": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/admin.py": {},
    "project_pawz-master/project_pawz/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/models.py": {
        "User.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/urls.py": {},
    "project_pawz-master/project_pawz/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/__init__.py": {},
    "project_pawz-master/project_pawz/users/migrations/0001_initial.py": {},
    "project_pawz-master/project_pawz/users/migrations/__init__.py": {},
    "project_pawz-master/project_pawz/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "create": [],
                "extracted": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [],
            "arguments": {
                "user": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "project_pawz-master/project_pawz/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "request_factory": []
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "request_factory": []
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "request_factory": []
            }
        }
    },
    "project_pawz-master/project_pawz/users/tests/__init__.py": {},
    "project_pawz-master/project_pawz/volunteers/admin.py": {},
    "project_pawz-master/project_pawz/volunteers/apps.py": {},
    "project_pawz-master/project_pawz/volunteers/models.py": {},
    "project_pawz-master/project_pawz/volunteers/tests.py": {},
    "project_pawz-master/project_pawz/volunteers/views.py": {},
    "project_pawz-master/project_pawz/volunteers/__init__.py": {},
    "project_pawz-master/project_pawz/volunteers/migrations/__init__.py": {},
    "project_pawz-master/util/upgrade_pip.py": {
        "get_project_dir": {
            "name": "get_project_dir",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "find_requirements": {
            "name": "find_requirements",
            "location": 27,
            "return": [],
            "arguments": {
                "prj": []
            }
        },
        "get_modules": {
            "name": "get_modules",
            "location": 37,
            "return": [],
            "arguments": {
                "req_files": []
            }
        },
        "write_upgrade": {
            "name": "write_upgrade",
            "location": 56,
            "return": [],
            "arguments": {
                "prj": [],
                "mod_list": []
            }
        }
    }
}
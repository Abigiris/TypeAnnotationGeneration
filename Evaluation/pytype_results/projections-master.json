{
    "projections-master/projections.py": {
        "mult_vec": {
            "name": "mult_vec",
            "location": 19,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "v": [],
                "m": []
            }
        },
        "sum_vec": {
            "name": "sum_vec",
            "location": 23,
            "return": [
                "Tuple[(nothing, ...)]"
            ],
            "arguments": {
                "l": []
            }
        },
        "decompose": {
            "name": "decompose",
            "location": 27,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "v": [],
                "basis": []
            }
        },
        "normalize_vec": {
            "name": "normalize_vec",
            "location": 41,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "v": []
            }
        },
        "adjust_view_point": {
            "name": "adjust_view_point",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "view": []
            }
        },
        "main": {
            "name": "main",
            "location": 196,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Line.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "dir_vec": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.scuttle": {
            "name": "scuttle",
            "location": 54,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "u": []
            }
        },
        "Plane.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "normal": [],
                "intercept": []
            }
        },
        "Plane.project_vector": {
            "name": "project_vector",
            "location": 64,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "view": []
            }
        },
        "Plane.project_through": {
            "name": "project_through",
            "location": 83,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "Plane.project_line": {
            "name": "project_line",
            "location": 87,
            "return": [
                "Line"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "Plane.get_vectors": {
            "name": "get_vectors",
            "location": 96,
            "return": [
                "Tuple[(Tuple[(Any, Any, Any)], Tuple[(Any, Any, Any)])]"
            ],
            "arguments": {
                "self": [],
                "basis": []
            }
        },
        "KeyboardEventHandler.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardEventHandler.has_handler": {
            "name": "has_handler",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "KeyboardEventHandler.get_handler": {
            "name": "get_handler",
            "location": 121,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "KeyboardEventHandler.add_handler": {
            "name": "add_handler",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "handler": [],
                "kwargs_dict": []
            }
        },
        "KeyboardEventHandler.add_group_handler": {
            "name": "add_group_handler",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [],
                "handler": [],
                "kwargs_dict": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "plane": [],
                "basis": []
            }
        },
        "View.project_point": {
            "name": "project_point",
            "location": 142,
            "return": [
                "Tuple[(Union[(float, int)], ...)]"
            ],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "View.project_points": {
            "name": "project_points",
            "location": 146,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "points": []
            }
        },
        "View.move_point": {
            "name": "move_point",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "PrimitiveRenderer.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": []
            }
        },
        "PrimitiveRenderer.draw_point": {
            "name": "draw_point",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [],
                "color": [],
                "radius": []
            }
        },
        "PrimitiveRenderer.draw_line_segment": {
            "name": "draw_line_segment",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "segment": [],
                "color": [],
                "radius": []
            }
        },
        "PrimitiveRenderer.draw_polygon": {
            "name": "draw_polygon",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polygon": [],
                "color": [],
                "radius": []
            }
        },
        "main.draw_line_segment": {
            "name": "draw_line_segment",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "line_segment": []
            }
        },
        "main.draw_polygon": {
            "name": "draw_polygon",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "points": []
            }
        }
    }
}
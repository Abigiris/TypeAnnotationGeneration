{
    "ptuner-master/setup.py": {
        "list_reqs": {
            "name": "list_reqs",
            "location": 18,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "fname": []
            }
        }
    },
    "ptuner-master/examples/lightgbm_local.py": {
        "make_data": {
            "name": "make_data",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [],
                "p": []
            }
        },
        "objective": {
            "name": "objective",
            "location": 64,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/examples/nn_master.py": {
        "make_data": {
            "name": "make_data",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [
                    "int"
                ],
                "p": [
                    "int"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/examples/nn_worker.py": {
        "objective": {
            "name": "objective",
            "location": 55,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/examples/xgb_local.py": {
        "make_data": {
            "name": "make_data",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [],
                "p": []
            }
        },
        "objective": {
            "name": "objective",
            "location": 62,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/examples/xgb_master.py": {
        "make_data": {
            "name": "make_data",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [],
                "p": []
            }
        },
        "objective": {
            "name": "objective",
            "location": 62,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/examples/xgb_worker.py": {
        "make_data": {
            "name": "make_data",
            "location": 11,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "N": [],
                "p": []
            }
        },
        "objective": {
            "name": "objective",
            "location": 41,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/ptuner/pipeline.py": {
        "LocalPipelineTuner.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_is_better": [
                    "bool"
                ],
                "n_jobs": [
                    "int"
                ],
                "backend": [
                    "str"
                ],
                "experiment_name": [
                    "str"
                ],
                "save_name": [
                    "Optional[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LocalPipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalPipelineTuner._update_space": {
            "name": "_update_space",
            "location": 104,
            "return": [
                "ptuner.spaces.sampler.SpaceSampler"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "hof": [
                    "int"
                ],
                "n_round": [
                    "int"
                ]
            }
        },
        "LocalPipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 151,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "candidate": [
                    "Dict[(str, Any)]"
                ],
                "i": [
                    "int"
                ],
                "n_candidates": [
                    "int"
                ]
            }
        },
        "LocalPipelineTuner.search": {
            "name": "search",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "max_configs_per_round": [
                    "List[int]"
                ],
                "subsample_factor": [
                    "int"
                ]
            }
        },
        "ParallelPipelineTuner.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_host": [
                    "str"
                ],
                "db_port": [
                    "int"
                ],
                "lower_is_better": [
                    "bool"
                ],
                "role": [
                    "str"
                ],
                "n_jobs": [
                    "int"
                ],
                "backend": [
                    "str"
                ],
                "experiment_name": [
                    "str"
                ],
                "save_name": [
                    "Optional[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ParallelPipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._select_best": {
            "name": "_select_best",
            "location": 441,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._update_space": {
            "name": "_update_space",
            "location": 464,
            "return": [
                "ptuner.spaces.sampler.SpaceSampler"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "hof": [
                    "int"
                ],
                "n_round": [
                    "int"
                ]
            }
        },
        "ParallelPipelineTuner._current_round": {
            "name": "_current_round",
            "location": 516,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._n_candidates_remaining": {
            "name": "_n_candidates_remaining",
            "location": 535,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 555,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "objective": []
            }
        },
        "ParallelPipelineTuner._master_search": {
            "name": "_master_search",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "max_configs_per_round": [
                    "List[int]"
                ],
                "subsample_factor": [
                    "int"
                ]
            }
        },
        "ParallelPipelineTuner._worker_search": {
            "name": "_worker_search",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "n_rounds": [
                    "int"
                ],
                "max_attempts": [
                    "int"
                ],
                "backoff_period": [
                    "int"
                ]
            }
        },
        "ParallelPipelineTuner.search": {
            "name": "search",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "max_configs_per_round": [
                    "List[int]"
                ],
                "sampler": [],
                "subsample_factor": [
                    "int"
                ],
                "max_attempts": [
                    "int"
                ],
                "backoff_period": [
                    "int"
                ]
            }
        }
    },
    "ptuner-master/ptuner/__init__.py": {},
    "ptuner-master/ptuner/base/_pipeline.py": {
        "BasePipelineTuner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_is_better": [
                    "bool"
                ],
                "n_jobs": [
                    "int"
                ],
                "backend": [
                    "str"
                ],
                "experiment_name": [
                    "str"
                ],
                "save_name": [
                    "Optional[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "BasePipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "objective": []
            }
        },
        "BasePipelineTuner._update_space": {
            "name": "_update_space",
            "location": 109,
            "return": [
                "ptuner.spaces.sampler.SpaceSampler"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "hof": [
                    "int"
                ],
                "n_round": [
                    "int"
                ]
            }
        },
        "BasePipelineTuner.search": {
            "name": "search",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [],
                "sampler": [
                    "ptuner.spaces.sampler.SpaceSampler"
                ],
                "max_configs_per_round": [
                    "List[int]"
                ],
                "subsample_factor": [
                    "int"
                ]
            }
        }
    },
    "ptuner-master/ptuner/base/_sampler.py": {
        "BaseSampler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "BaseSampler.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler._starting_space": {
            "name": "_starting_space",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler.sample_space": {
            "name": "sample_space",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler.update_space": {
            "name": "update_space",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "ptuner-master/ptuner/base/__init__.py": {},
    "ptuner-master/ptuner/db/mongodb.py": {
        "is_running": {
            "name": "is_running",
            "location": 63,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "insert_init_record": {
            "name": "insert_init_record",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [],
                "computer_name": [
                    "str"
                ]
            }
        },
        "init_collection": {
            "name": "init_collection",
            "location": 111,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "collection": [
                    "str"
                ],
                "overwrite": [
                    "bool"
                ],
                "computer_name": [
                    "str"
                ]
            }
        },
        "MongoWorker.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "collection": [
                    "Optional[str]"
                ]
            }
        },
        "MongoWorker.__enter__": {
            "name": "__enter__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoWorker.__exit__": {
            "name": "__exit__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ptuner-master/ptuner/db/__init__.py": {},
    "ptuner-master/ptuner/db/tests/test_mongodb.py": {},
    "ptuner-master/ptuner/spaces/classifiers.py": {
        "MLPClassifierSampler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool"
                ],
                "early_stopping": [
                    "bool"
                ],
                "n_hidden_layers": [
                    "int"
                ],
                "max_neurons": [
                    "int"
                ],
                "max_epochs": [
                    "int"
                ],
                "seed": [
                    "Optional[int]"
                ]
            }
        },
        "MLPClassifierSampler.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler.update_space": {
            "name": "update_space",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "XGBClassifierSampler.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool"
                ],
                "early_stopping": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "XGBClassifierSampler.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 229,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 259,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler.update_space": {
            "name": "update_space",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LightGBMClassifierSampler.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool"
                ],
                "early_stopping": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "LightGBMClassifierSampler.__str__": {
            "name": "__str__",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 388,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 417,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler.update_space": {
            "name": "update_space",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "ptuner-master/ptuner/spaces/features.py": {
        "NaiveFeatureSampler.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int"
                ],
                "dynamic_update": [
                    "bool"
                ],
                "muting_threshold": [
                    "float"
                ]
            }
        },
        "NaiveFeatureSampler.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler._starting_space": {
            "name": "_starting_space",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler.sample_space": {
            "name": "sample_space",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler.update_space": {
            "name": "update_space",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "ptuner-master/ptuner/spaces/regressors.py": {},
    "ptuner-master/ptuner/spaces/sampler.py": {
        "SpaceSampler.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceSampler.add_feature_sampler": {
            "name": "add_feature_sampler",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sampler": [],
                "name": [
                    "str"
                ]
            }
        },
        "SpaceSampler.add_hyperparameter_sampler": {
            "name": "add_hyperparameter_sampler",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sampler": [],
                "name": [
                    "str"
                ]
            }
        },
        "SpaceSampler.sample_space": {
            "name": "sample_space",
            "location": 120,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceSampler.update_space": {
            "name": "update_space",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_features": [],
                "data_hyperparameters": []
            }
        }
    },
    "ptuner-master/ptuner/spaces/__init__.py": {},
    "ptuner-master/ptuner/spaces/tests/test_classifiers.py": {
        "test_lightgbm_classifier_sampler": {
            "name": "test_lightgbm_classifier_sampler",
            "location": 13,
            "return": [],
            "arguments": {
                "dynamic_update": [],
                "early_stopping": []
            }
        },
        "test_mlp_classifier_sampler": {
            "name": "test_mlp_classifier_sampler",
            "location": 102,
            "return": [],
            "arguments": {
                "dynamic_update": [],
                "early_stopping": [],
                "n_hidden_layers": [],
                "max_neurons": [],
                "max_epochs": []
            }
        },
        "test_xgb_classifier_sampler": {
            "name": "test_xgb_classifier_sampler",
            "location": 215,
            "return": [],
            "arguments": {
                "dynamic_update": [],
                "early_stopping": []
            }
        }
    },
    "ptuner-master/ptuner/spaces/tests/test_features.py": {},
    "ptuner-master/ptuner/spaces/tests/test_regressors.py": {},
    "ptuner-master/ptuner/spaces/tests/test_sampler.py": {},
    "ptuner-master/ptuner/tests/test_pipeline.py": {
        "clf_binary": {
            "name": "clf_binary",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_local_pipeline_tuner": {
            "name": "test_local_pipeline_tuner",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "clf_binary": []
            }
        },
        "test_parallel_pipeline_tuner": {
            "name": "test_parallel_pipeline_tuner",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "clf_binary": []
            }
        },
        "test_local_pipeline_tuner.objective": {
            "name": "objective",
            "location": 51,
            "return": [],
            "arguments": {
                "params": [],
                "current_round": []
            }
        }
    },
    "ptuner-master/ptuner/utils/constants.py": {},
    "ptuner-master/ptuner/utils/helper.py": {
        "get_hostname": {
            "name": "get_hostname",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_ip_address": {
            "name": "get_ip_address",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "countdown": {
            "name": "countdown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "parse_hyperopt_param": {
            "name": "parse_hyperopt_param",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "ptuner-master/ptuner/utils/__init__.py": {},
    "ptuner-master/ptuner/utils/tests/test_helper.py": {
        "test_parse_hyperopt_param": {
            "name": "test_parse_hyperopt_param",
            "location": 13,
            "return": [],
            "arguments": {
                "parameter": [],
                "expected": []
            }
        },
        "test_parse_hyperopt_param_error": {
            "name": "test_parse_hyperopt_param_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
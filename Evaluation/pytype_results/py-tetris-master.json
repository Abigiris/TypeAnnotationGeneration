{
    "py-tetris-master/setup.py": {},
    "py-tetris-master/tests/test_game.py": {
        "test_renderable": {
            "name": "test_renderable",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game_object": {
            "name": "test_game_object",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collision": {
            "name": "test_collision",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-tetris-master/tests/test_terminal.py": {
        "test_terminal": {
            "name": "test_terminal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vector": {
            "name": "test_vector",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockMap.load": {
            "name": "load",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "py-tetris-master/tests/__init__.py": {},
    "py-tetris-master/tetris/cli.py": {
        "setup": {
            "name": "setup",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-tetris-master/tetris/exceptions.py": {},
    "py-tetris-master/tetris/game.py": {
        "now": {
            "name": "now",
            "location": 51,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "check_collision": {
            "name": "check_collision",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "collided": {
            "name": "collided",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "other": [],
                "dx": [],
                "dy": []
            }
        },
        "GameObject.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameObject.update": {
            "name": "update",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameObject.on_collided": {
            "name": "on_collided",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "GameObject.move": {
            "name": "move",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "GameObject.rotate": {
            "name": "rotate",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameObject.remove": {
            "name": "remove",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": []
            }
        },
        "Collision.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "dx": [],
                "dy": []
            }
        },
        "FieldInfo.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "obj": [],
                "cell": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [],
                "height": []
            }
        },
        "Field.children": {
            "name": "children",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.set_map": {
            "name": "set_map",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "map": []
            }
        },
        "Field.update": {
            "name": "update",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Field.get": {
            "name": "get",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Field.clear": {
            "name": "clear",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Field.remove": {
            "name": "remove",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Field.remove_at": {
            "name": "remove_at",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Field.remove_line": {
            "name": "remove_line",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Field.restructure": {
            "name": "restructure",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.check_filled": {
            "name": "check_filled",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "x": []
            }
        },
        "Field.debug_print": {
            "name": "debug_print",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.width": {
            "name": "width",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.height": {
            "name": "height",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.make_cells": {
            "name": "make_cells",
            "location": 250,
            "return": [
                "List[tetris.terminal.Cell]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.load": {
            "name": "load",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapfile": []
            }
        },
        "Map.load_from": {
            "name": "load_from",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [],
                "s": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Text.make_cells": {
            "name": "make_cells",
            "location": 289,
            "return": [
                "List[tetris.terminal.Cell]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tetrimino.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "bg": []
            }
        },
        "Tetrimino.on_collided": {
            "name": "on_collided",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "Tetrimino.rotate": {
            "name": "rotate",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tetrimino.make_cells": {
            "name": "make_cells",
            "location": 315,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tetrimino.move": {
            "name": "move",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dx": [],
                "dy": []
            }
        },
        "Tetrimino.remove": {
            "name": "remove",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": []
            }
        },
        "Tetrimino.split": {
            "name": "split",
            "location": 328,
            "return": [
                "Optional[Tetrimino]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ITetrimino.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "OTetrimino.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "STetrimino.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ZTetrimino.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "LTetrimino.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "JTetrimino.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TTetrimino.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__enter__": {
            "name": "__enter__",
            "location": 496,
            "return": [
                "_TGame@@Game@@"
            ],
            "arguments": {
                "self": [
                    "_TGame@@Game@@"
                ]
            }
        },
        "Game.__exit__": {
            "name": "__exit__",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        },
        "Game.run": {
            "name": "run",
            "location": 502,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.spawn": {
            "name": "spawn",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.move": {
            "name": "move",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "dx": [],
                "dy": []
            }
        },
        "Game.check_game_over": {
            "name": "check_game_over",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.add": {
            "name": "add",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.remove": {
            "name": "remove",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.add_player": {
            "name": "add_player",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.system_message": {
            "name": "system_message",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Game.update": {
            "name": "update",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Game.check_tetris": {
            "name": "check_tetris",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__.terminal_on_shutdown": {
            "name": "terminal_on_shutdown",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "Game.__init__.regist": {
            "name": "regist",
            "location": 488,
            "return": [],
            "arguments": {
                "key": [],
                "f": []
            }
        },
        "Game.move.op": {
            "name": "op",
            "location": 537,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "py-tetris-master/tetris/logging.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 91,
            "return": [
                "ColorizedLogger"
            ],
            "arguments": {
                "name": []
            }
        },
        "setup_logger": {
            "name": "setup_logger",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IndentFormatter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fmt": [],
                "datefmt": []
            }
        },
        "IndentFormatter.format": {
            "name": "format",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ColorizedLogger.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "ColorizedLogger.__getattr__": {
            "name": "__getattr__",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TerminalHandler.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "TerminalHandler.emit": {
            "name": "emit",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "py-tetris-master/tetris/terminal.py": {
        "render_objects": {
            "name": "render_objects",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tm": []
            }
        },
        "render_cells": {
            "name": "render_cells",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "tm": [],
                "cells": []
            }
        },
        "scale_cells": {
            "name": "scale_cells",
            "location": 132,
            "return": [
                "List[Cell]"
            ],
            "arguments": {
                "cells": []
            }
        },
        "rotate_cells": {
            "name": "rotate_cells",
            "location": 152,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "cells": [
                    "_T0@@"
                ],
                "backward": []
            }
        },
        "Color.random_color": {
            "name": "random_color",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Vector2.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Vector2.__add__": {
            "name": "__add__",
            "location": 69,
            "return": [
                "_TVector2@@Vector2@@"
            ],
            "arguments": {
                "self": [
                    "_TVector2@@Vector2@@"
                ],
                "other": []
            }
        },
        "Vector2.__sub__": {
            "name": "__sub__",
            "location": 72,
            "return": [
                "_TVector2@@Vector2@@"
            ],
            "arguments": {
                "self": [
                    "_TVector2@@Vector2@@"
                ],
                "other": []
            }
        },
        "Vector2.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector2.__nq__": {
            "name": "__nq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector2.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector2.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "fg": [],
                "bg": [],
                "c": [],
                "scale": []
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderable.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "fg": [],
                "bg": []
            }
        },
        "Renderable.render": {
            "name": "render",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tm": [],
                "dx": [],
                "dy": [],
                "check_intersect": []
            }
        },
        "Renderable.make_cells": {
            "name": "make_cells",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderable.set_color": {
            "name": "set_color",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fg": [],
                "bg": []
            }
        },
        "Renderable.get_color": {
            "name": "get_color",
            "location": 206,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug": []
            }
        },
        "Terminal.__enter__": {
            "name": "__enter__",
            "location": 274,
            "return": [
                "_TTerminal@@Terminal@@"
            ],
            "arguments": {
                "self": [
                    "_TTerminal@@Terminal@@"
                ]
            }
        },
        "Terminal.__exit__": {
            "name": "__exit__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        },
        "Terminal.__del__": {
            "name": "__del__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.close": {
            "name": "close",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.set_keydown_handler": {
            "name": "set_keydown_handler",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [],
                "cb": []
            }
        },
        "Terminal.get_keydown_handler": {
            "name": "get_keydown_handler",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Terminal.on_shutdown": {
            "name": "on_shutdown",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "Terminal.width": {
            "name": "width",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Terminal.height": {
            "name": "height",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Terminal.clear": {
            "name": "clear",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.update": {
            "name": "update",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Terminal.peek_key_event": {
            "name": "peek_key_event",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-tetris-master/tetris/__init__.py": {},
    "py-tetris-master/tetris/__main__.py": {}
}
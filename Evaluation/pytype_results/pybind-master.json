{
    "pybind-master/errors.py": {
        "Errors.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Errors.add_error": {
            "name": "add_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "Errors.with_path": {
            "name": "with_path",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Errors.__bool__": {
            "name": "__bool__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Errors.has_errors": {
            "name": "has_errors",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Errors.as_dict": {
            "name": "as_dict",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pybind-master/pybind.py": {
        "make_binder_optional": {
            "name": "make_binder_optional",
            "location": 32,
            "return": [
                "Callable[([Any], Union[(builtins.NoneType, T)])]"
            ],
            "arguments": {
                "binder": [
                    "Callable[([Any], T)]"
                ]
            }
        },
        "make_binder_required": {
            "name": "make_binder_required",
            "location": 43,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "binder": [
                    "Callable[([Any], T)]"
                ]
            }
        },
        "try_unwrap_optional": {
            "name": "try_unwrap_optional",
            "location": 54,
            "return": [
                "Tuple[(bool, type)]"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "is_newtype": {
            "name": "is_newtype",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "nonwhitespace_string_binder": {
            "name": "nonwhitespace_string_binder",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "bind": {
            "name": "bind",
            "location": 306,
            "return": [
                "T"
            ],
            "arguments": {
                "cls": [
                    "Type[T]"
                ],
                "data": []
            }
        },
        "make_binder_optional.optional_binder": {
            "name": "optional_binder",
            "location": 33,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "make_binder_required.required_binder": {
            "name": "required_binder",
            "location": 44,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "BindersFactory.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": []
            }
        },
        "BindersFactory.register_binder": {
            "name": "register_binder",
            "location": 93,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ],
                "binder": [
                    "Callable[([Any], T)]"
                ]
            }
        },
        "BindersFactory.get": {
            "name": "get",
            "location": 97,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "BindersFactory.create": {
            "name": "create",
            "location": 104,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "BindersFactory.create_converting_binder": {
            "name": "create_converting_binder",
            "location": 134,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable[([Any], T)]"
                ]
            }
        },
        "BindersFactory.create_tuple_binder": {
            "name": "create_tuple_binder",
            "location": 147,
            "return": [
                "Callable[([Any], tuple)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[tuple]"
                ]
            }
        },
        "BindersFactory.create_list_binder": {
            "name": "create_list_binder",
            "location": 170,
            "return": [
                "Callable[([Any], List[T])]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[List[T]]"
                ]
            }
        },
        "BindersFactory.create_newtype_binder": {
            "name": "create_newtype_binder",
            "location": 180,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "BindersFactory.create_custom_class_binder": {
            "name": "create_custom_class_binder",
            "location": 184,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable[(..., T)]"
                ]
            }
        },
        "BindersFactory.created_namedtuple_binder": {
            "name": "created_namedtuple_binder",
            "location": 210,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "BindersFactory.create_union_binder": {
            "name": "create_union_binder",
            "location": 247,
            "return": [
                "Callable[([Any], T)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ]
            }
        },
        "BindersFactory.create_any_binder": {
            "name": "create_any_binder",
            "location": 262,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BindersFactory.create_date_binder": {
            "name": "create_date_binder",
            "location": 265,
            "return": [
                "Callable[([Any], datetime.date)]"
            ],
            "arguments": {
                "self": [],
                "date_format": [
                    "str"
                ]
            }
        },
        "BindersFactory.create_datetime_binder": {
            "name": "create_datetime_binder",
            "location": 273,
            "return": [
                "Callable[([Any], datetime.datetime)]"
            ],
            "arguments": {
                "self": [],
                "date_format": [
                    "str"
                ]
            }
        },
        "BindersFactory.create_enum_binder": {
            "name": "create_enum_binder",
            "location": 281,
            "return": [
                "Callable[([Any], TEnum)]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[TEnum]"
                ]
            }
        },
        "BindersFactory.create_converting_binder.binder": {
            "name": "binder",
            "location": 135,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_list_binder.binder": {
            "name": "binder",
            "location": 174,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_custom_class_binder.binder": {
            "name": "binder",
            "location": 196,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.created_namedtuple_binder.binder": {
            "name": "binder",
            "location": 220,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_union_binder.binder": {
            "name": "binder",
            "location": 251,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_date_binder.binder": {
            "name": "binder",
            "location": 266,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_datetime_binder.binder": {
            "name": "binder",
            "location": 274,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_tuple_binder.binder": {
            "name": "binder",
            "location": 161,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "BindersFactory.create_enum_binder.binder": {
            "name": "binder",
            "location": 289,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "pybind-master/test.py": {
        "test_tuples": {
            "name": "test_tuples",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tuple_with_optional": {
            "name": "test_tuple_with_optional",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_newtype": {
            "name": "test_newtype",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_try_unwrap_optional": {
            "name": "test_try_unwrap_optional",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 131,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "test_any": {
            "name": "test_any",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimal": {
            "name": "test_decimal",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datetime": {
            "name": "test_datetime",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date": {
            "name": "test_date",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum": {
            "name": "test_enum",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum": {
            "name": "test_int_enum",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isnamedtuple": {
            "name": "test_isnamedtuple",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variable_length_tuple": {
            "name": "test_variable_length_tuple",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "invalid_as": {
            "name": "invalid_as",
            "location": 190,
            "return": [],
            "arguments": {
                "error_code": []
            }
        },
        "test_bind_raw_dict": {
            "name": "test_bind_raw_dict",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestUserClass.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserClass.test_optional": {
            "name": "test_optional",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserClass.test_nested": {
            "name": "test_nested",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserClass.test_subclass": {
            "name": "test_subclass",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedTuple.test_positional": {
            "name": "test_positional",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedTuple.test_positional_with_optional": {
            "name": "test_positional_with_optional",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedTuple.test_named": {
            "name": "test_named",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedTuple.test_named_with_optional": {
            "name": "test_named_with_optional",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedTuple.test_subclass": {
            "name": "test_subclass",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringBinding.test_None_invalid": {
            "name": "test_None_invalid",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStringBinding.test_whitespaces_invalid": {
            "name": "test_whitespaces_invalid",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pybind-master/test_errors.py": {
        "test_add_error": {
            "name": "test_add_error",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
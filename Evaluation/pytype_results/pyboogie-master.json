{
    "pyboogie-master/setup.py": {},
    "pyboogie-master/pyboogie/analysis.py": {
        "dataflow": {
            "name": "dataflow",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "fun": [],
                "transformerMap": [],
                "unionF": [],
                "bottom": [],
                "start": [],
                "forward": []
            }
        },
        "livevars": {
            "name": "livevars",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "fun": []
            }
        },
        "propagateUnmodifiedPreds": {
            "name": "propagateUnmodifiedPreds",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "fun": []
            }
        },
        "propagateUnmodifiedPreds.assignment_preds": {
            "name": "assignment_preds",
            "location": 107,
            "return": [],
            "arguments": {
                "stmt": []
            }
        },
        "propagateUnmodifiedPreds.filterModifiedPreds": {
            "name": "filterModifiedPreds",
            "location": 115,
            "return": [],
            "arguments": {
                "preds": [],
                "stmt": []
            }
        },
        "propagateUnmodifiedPreds.unionF": {
            "name": "unionF",
            "location": 130,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "pyboogie-master/pyboogie/ast.py": {
        "stripOutsideParenthesis": {
            "name": "stripOutsideParenthesis",
            "location": 159,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "_mkBinExp": {
            "name": "_mkBinExp",
            "location": 366,
            "return": [],
            "arguments": {
                "lhs": [],
                "op": [],
                "rhs": []
            }
        },
        "listify": {
            "name": "listify",
            "location": 371,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 377,
            "return": [],
            "arguments": {
                "ast": [],
                "m": []
            }
        },
        "reduce_nodes": {
            "name": "reduce_nodes",
            "location": 386,
            "return": [],
            "arguments": {
                "node": [],
                "cb": []
            }
        },
        "parseExprAst": {
            "name": "parseExprAst",
            "location": 645,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parseStmt": {
            "name": "parseStmt",
            "location": 652,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parseDecl": {
            "name": "parseDecl",
            "location": 659,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parseAst": {
            "name": "parseAst",
            "location": 666,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parseBinding": {
            "name": "parseBinding",
            "location": 673,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parseType": {
            "name": "parseType",
            "location": 680,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "expr_read": {
            "name": "expr_read",
            "location": 687,
            "return": [],
            "arguments": {
                "ast": []
            }
        },
        "stmt_read": {
            "name": "stmt_read",
            "location": 708,
            "return": [],
            "arguments": {
                "ast": []
            }
        },
        "stmt_changed": {
            "name": "stmt_changed",
            "location": 723,
            "return": [],
            "arguments": {
                "ast": []
            }
        },
        "ast_group_bin": {
            "name": "ast_group_bin",
            "location": 738,
            "return": [],
            "arguments": {
                "exprs": [],
                "op": [],
                "default": []
            }
        },
        "ast_and": {
            "name": "ast_and",
            "location": 746,
            "return": [],
            "arguments": {
                "exprs": []
            }
        },
        "ast_or": {
            "name": "ast_or",
            "location": 747,
            "return": [],
            "arguments": {
                "exprs": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 749,
            "return": [],
            "arguments": {
                "ast": []
            }
        },
        "ast_constants": {
            "name": "ast_constants",
            "location": 768,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "ast_boolean_exprs": {
            "name": "ast_boolean_exprs",
            "location": 777,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "ast_primitive_boolean_exprs": {
            "name": "ast_primitive_boolean_exprs",
            "location": 792,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "AstNode.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AstIntType.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBoolType.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBVType.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstMapType.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstCompoundType.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstFalse.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstTrue.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstNumber.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstId.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstWildcard.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstMapIndex.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstMapUpdate.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstMapUpdateArgs.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstMapIndexArgs.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstFuncExprArgs.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstUnExpr.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBinExpr.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstTernary.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstAttribute.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBinding.__str__": {
            "name": "__str__",
            "location": 141,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstForallExpr.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstFuncExpr.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstLabel.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstAssert.__str__": {
            "name": "__str__",
            "location": 181,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstAssume.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstAssignment.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstHavoc.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstReturn.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstGoto.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstCall.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstIf.__str__": {
            "name": "__str__",
            "location": 229,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBody.__str__": {
            "name": "__str__",
            "location": 246,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstVarDecl.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstFunctionDecl.__str__": {
            "name": "__str__",
            "location": 272,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstAxiomDecl.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstConstDecl.__str__": {
            "name": "__str__",
            "location": 300,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstImplementation.__str__": {
            "name": "__str__",
            "location": 311,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstProcedure.__str__": {
            "name": "__str__",
            "location": 328,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstTypeConstructorDecl.__str__": {
            "name": "__str__",
            "location": 355,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstProgram.__str__": {
            "name": "__str__",
            "location": 364,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "AstBuilder.onAtom": {
            "name": "onAtom",
            "location": 392,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onUnaryOp": {
            "name": "onUnaryOp",
            "location": 417,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onLABinOp": {
            "name": "onLABinOp",
            "location": 423,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onRABinOp": {
            "name": "onRABinOp",
            "location": 434,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onNABinOp": {
            "name": "onNABinOp",
            "location": 437,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onBinding": {
            "name": "onBinding",
            "location": 441,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onTypeConstructorDecl": {
            "name": "onTypeConstructorDecl",
            "location": 446,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onAttribute": {
            "name": "onAttribute",
            "location": 453,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onAssert": {
            "name": "onAssert",
            "location": 461,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onAssume": {
            "name": "onAssume",
            "location": 464,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onReturn": {
            "name": "onReturn",
            "location": 468,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onGoto": {
            "name": "onGoto",
            "location": 471,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onAssignment": {
            "name": "onAssignment",
            "location": 474,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onHavoc": {
            "name": "onHavoc",
            "location": 476,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onCallAssignStmt": {
            "name": "onCallAssignStmt",
            "location": 480,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onIfStmt": {
            "name": "onIfStmt",
            "location": 487,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onProgram": {
            "name": "onProgram",
            "location": 499,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onLocalVarDecl": {
            "name": "onLocalVarDecl",
            "location": 502,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onPrimitiveType": {
            "name": "onPrimitiveType",
            "location": 505,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onMapType": {
            "name": "onMapType",
            "location": 516,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onCompoundType": {
            "name": "onCompoundType",
            "location": 519,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onType": {
            "name": "onType",
            "location": 529,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onBody": {
            "name": "onBody",
            "location": 532,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onVarDecl": {
            "name": "onVarDecl",
            "location": 536,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onAxiomDecl": {
            "name": "onAxiomDecl",
            "location": 541,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onFunctionDecl": {
            "name": "onFunctionDecl",
            "location": 546,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onConstDecl": {
            "name": "onConstDecl",
            "location": 554,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onImplementationDecl": {
            "name": "onImplementationDecl",
            "location": 563,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onProcedureDecl": {
            "name": "onProcedureDecl",
            "location": 576,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onLabeledStatement": {
            "name": "onLabeledStatement",
            "location": 606,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onMapIndexArgs": {
            "name": "onMapIndexArgs",
            "location": 615,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onMapUpdateArgs": {
            "name": "onMapUpdateArgs",
            "location": 618,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onFunAppArgs": {
            "name": "onFunAppArgs",
            "location": 621,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onQuantified": {
            "name": "onQuantified",
            "location": 623,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onWildcardExpr": {
            "name": "onWildcardExpr",
            "location": 633,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "AstBuilder.onTernary": {
            "name": "onTernary",
            "location": 638,
            "return": [],
            "arguments": {
                "s": [],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "ast_constants.cb": {
            "name": "cb",
            "location": 769,
            "return": [],
            "arguments": {
                "node": [],
                "children": []
            }
        },
        "ast_boolean_exprs.cb": {
            "name": "cb",
            "location": 778,
            "return": [],
            "arguments": {
                "node": [],
                "children": []
            }
        },
        "ast_primitive_boolean_exprs.cb": {
            "name": "cb",
            "location": 793,
            "return": [],
            "arguments": {
                "node": [],
                "children": []
            }
        }
    },
    "pyboogie-master/pyboogie/bb.py": {
        "prevLocations": {
            "name": "prevLocations",
            "location": 134,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "l": []
            }
        },
        "nextLocations": {
            "name": "nextLocations",
            "location": 141,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "l": []
            }
        },
        "BB.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "predecessors": [],
                "stmts": [],
                "successors": [],
                "internal": []
            }
        },
        "BB.isInternal": {
            "name": "isInternal",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.predecessors": {
            "name": "predecessors",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.successors": {
            "name": "successors",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.stmts": {
            "name": "stmts",
            "location": 31,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.addSuccessor": {
            "name": "addSuccessor",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "BB.addPredecessor": {
            "name": "addPredecessor",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "BB.isEntry": {
            "name": "isEntry",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.isExit": {
            "name": "isExit",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BB.to_json": {
            "name": "to_json",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.from_json": {
            "name": "from_json",
            "location": 66,
            "return": [
                "Tuple[(Any, BB, Any)]"
            ],
            "arguments": {
                "arg": []
            }
        },
        "BB.is_isomorphic": {
            "name": "is_isomorphic",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "mapping": []
            }
        },
        "BB.pp": {
            "name": "pp",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.reachable": {
            "name": "reachable",
            "location": 120,
            "return": [
                "Set[BB]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.load": {
            "name": "load",
            "location": 150,
            "return": [
                "List[Function]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "Function.build": {
            "name": "build",
            "location": 162,
            "return": [
                "Function"
            ],
            "arguments": {
                "fun": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "bbs": [],
                "parameters": [],
                "local_vars": [],
                "returns": []
            }
        },
        "Function.entry": {
            "name": "entry",
            "location": 226,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.exits": {
            "name": "exits",
            "location": 229,
            "return": [
                "listiterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.loopHeaders": {
            "name": "loopHeaders",
            "location": 232,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "curpath": []
            }
        },
        "Function.exit": {
            "name": "exit",
            "location": 249,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.bbs": {
            "name": "bbs",
            "location": 252,
            "return": [
                "dict_values"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.bbs_preorder": {
            "name": "bbs_preorder",
            "location": 255,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "bb": [],
                "visited": []
            }
        },
        "Function.bbs_postorder": {
            "name": "bbs_postorder",
            "location": 270,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "bb": [],
                "visited": []
            }
        },
        "Function.bbs_rpo": {
            "name": "bbs_rpo",
            "location": 284,
            "return": [
                "reversed"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.get_bb": {
            "name": "get_bb",
            "location": 287,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Function.to_json": {
            "name": "to_json",
            "location": 290,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.from_json": {
            "name": "from_json",
            "location": 303,
            "return": [
                "Function"
            ],
            "arguments": {
                "arg": []
            }
        },
        "Function.eq": {
            "name": "eq",
            "location": 328,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Function.pp": {
            "name": "pp",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.getTypeEnv": {
            "name": "getTypeEnv",
            "location": 350,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.pp.pp_bindings": {
            "name": "pp_bindings",
            "location": 337,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "Function.pp.pp_locals": {
            "name": "pp_locals",
            "location": 340,
            "return": [],
            "arguments": {
                "b": []
            }
        }
    },
    "pyboogie-master/pyboogie/desugar.py": {
        "desugarExpr": {
            "name": "desugarExpr",
            "location": 20,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "e": [
                    "_T0@@"
                ]
            }
        },
        "desugarStmt": {
            "name": "desugarStmt",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [
                    "_T0@@"
                ]
            }
        },
        "addEntry": {
            "name": "addEntry",
            "location": 100,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "stmts": [
                    "_T0@@"
                ]
            }
        },
        "desugarDecl": {
            "name": "desugarDecl",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "d": []
            }
        },
        "desugar": {
            "name": "desugar",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "pyboogie-master/pyboogie/eval.py": {
        "instantiateAndEval": {
            "name": "instantiateAndEval",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "inv": [],
                "vals": [],
                "arg_names": [],
                "arg_consts": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 69,
            "return": [
                "Generator[(Tuple[(Any, pyboogie.ssa.SSAEnv, pyboogie.paths.NondetPath, pyboogie.paths.NondetSSAPath, list)], Any, None)]"
            ],
            "arguments": {
                "env": [],
                "bb": [],
                "fun": [],
                "limit": []
            }
        },
        "execute.bb_sp": {
            "name": "bb_sp",
            "location": 77,
            "return": [],
            "arguments": {
                "bb": [],
                "initial_ssa_env": [],
                "precond": []
            }
        }
    },
    "pyboogie-master/pyboogie/grammar.py": {
        "BoogieParser.onAssert": {
            "name": "onAssert",
            "location": 23,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onAssume": {
            "name": "onAssume",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onReturn": {
            "name": "onReturn",
            "location": 25,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onGoto": {
            "name": "onGoto",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onAssignment": {
            "name": "onAssignment",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onHavoc": {
            "name": "onHavoc",
            "location": 28,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onCallAssignStmt": {
            "name": "onCallAssignStmt",
            "location": 29,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onIfStmt": {
            "name": "onIfStmt",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onProgram": {
            "name": "onProgram",
            "location": 31,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onVarDecl": {
            "name": "onVarDecl",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onFunctionDecl": {
            "name": "onFunctionDecl",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onAxiomDecl": {
            "name": "onAxiomDecl",
            "location": 34,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onConstDecl": {
            "name": "onConstDecl",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onImplementationDecl": {
            "name": "onImplementationDecl",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onProcedureDecl": {
            "name": "onProcedureDecl",
            "location": 37,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onTypeConstructorDecl": {
            "name": "onTypeConstructorDecl",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onBody": {
            "name": "onBody",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onLocalVarDecl": {
            "name": "onLocalVarDecl",
            "location": 40,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onPrimitiveType": {
            "name": "onPrimitiveType",
            "location": 41,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onMapType": {
            "name": "onMapType",
            "location": 42,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onCompoundType": {
            "name": "onCompoundType",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onType": {
            "name": "onType",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onLabeledStatement": {
            "name": "onLabeledStatement",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onMapIndexArgs": {
            "name": "onMapIndexArgs",
            "location": 46,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onMapUpdateArgs": {
            "name": "onMapUpdateArgs",
            "location": 47,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onFunAppArgs": {
            "name": "onFunAppArgs",
            "location": 48,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onQuantified": {
            "name": "onQuantified",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onBinding": {
            "name": "onBinding",
            "location": 50,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onAttribute": {
            "name": "onAttribute",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onAtom": {
            "name": "onAtom",
            "location": 52,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onUnaryOp": {
            "name": "onUnaryOp",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onLABinOp": {
            "name": "onLABinOp",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onRABinOp": {
            "name": "onRABinOp",
            "location": 55,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onNABinOp": {
            "name": "onNABinOp",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onTernary": {
            "name": "onTernary",
            "location": 57,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.onWildcardExpr": {
            "name": "onWildcardExpr",
            "location": 58,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "prod": [],
                "st": [],
                "loc": [],
                "toks": []
            }
        },
        "BoogieParser.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ]
            }
        },
        "BoogieParser.parseExpr": {
            "name": "parseExpr",
            "location": 412,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        },
        "BoogieParser.parseStmt": {
            "name": "parseStmt",
            "location": 415,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        },
        "BoogieParser.parseDecl": {
            "name": "parseDecl",
            "location": 418,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        },
        "BoogieParser.parseProgram": {
            "name": "parseProgram",
            "location": 421,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        },
        "BoogieParser.parseBinding": {
            "name": "parseBinding",
            "location": 424,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        },
        "BoogieParser.parseType": {
            "name": "parseType",
            "location": 427,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "BoogieParser"
                ],
                "st": []
            }
        }
    },
    "pyboogie-master/pyboogie/interp.py": {
        "val_to_ast": {
            "name": "val_to_ast",
            "location": 44,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "store_to_expr": {
            "name": "store_to_expr",
            "location": 52,
            "return": [],
            "arguments": {
                "s": [],
                "suff": []
            }
        },
        "eval_quick": {
            "name": "eval_quick",
            "location": 116,
            "return": [],
            "arguments": {
                "expr": [],
                "store": []
            }
        },
        "stalled": {
            "name": "stalled",
            "location": 178,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "active": {
            "name": "active",
            "location": 186,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "finished": {
            "name": "finished",
            "location": 193,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "interp_one": {
            "name": "interp_one",
            "location": 201,
            "return": [],
            "arguments": {
                "state": [],
                "rand": []
            }
        },
        "trace_n": {
            "name": "trace_n",
            "location": 251,
            "return": [],
            "arguments": {
                "state": [],
                "nsteps": [],
                "rand": [],
                "filt": []
            }
        },
        "trace_n_from_start": {
            "name": "trace_n_from_start",
            "location": 298,
            "return": [],
            "arguments": {
                "fun": [],
                "starting_store": [],
                "nsteps": [],
                "rand": [],
                "filt": []
            }
        },
        "FuncInterp.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "explicit_cases": [],
                "default": []
            }
        },
        "FuncInterp.__hash__": {
            "name": "__hash__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.to_dict": {
            "name": "to_dict",
            "location": 18,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "FuncInterp.from_dict": {
            "name": "from_dict",
            "location": 22,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "OpaqueVal.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "OpaqueVal.from_dict": {
            "name": "from_dict",
            "location": 31,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "pp_state": {
            "name": "pp_state",
            "location": 355,
            "return": [],
            "arguments": {
                "st": []
            }
        },
        "pp_trace": {
            "name": "pp_trace",
            "location": 359,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "f": {
            "name": "f",
            "location": 331,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "f.lookahead_one_filter": {
            "name": "lookahead_one_filter",
            "location": 332,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "pyboogie-master/pyboogie/inv_networks.py": {
        "filterCandidateInvariants": {
            "name": "filterCandidateInvariants",
            "location": 88,
            "return": [
                "Tuple[(Dict[(Any, Set[nothing])], Dict[(Any, Set[nothing])], Dict[(Any, set)], List[nothing])]"
            ],
            "arguments": {
                "fun": [],
                "preCond": [
                    "_T1@@"
                ],
                "postCond": [],
                "cutPoints": [],
                "timeout": []
            }
        },
        "checkInvNetwork": {
            "name": "checkInvNetwork",
            "location": 191,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "fun": [],
                "preCond": [],
                "postCond": [],
                "cutPoints": [],
                "timeout": []
            }
        },
        "Violation.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ],
                "typ": [],
                "path": [],
                "lastBBCompletedStmts": [],
                "query": [],
                "ctrex": []
            }
        },
        "Violation.isInductive": {
            "name": "isInductive",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.isSafety": {
            "name": "isSafety",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.startBB": {
            "name": "startBB",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.endBB": {
            "name": "endBB",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.startReplM": {
            "name": "startReplM",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.endReplM": {
            "name": "endReplM",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation._filterStore": {
            "name": "_filterStore",
            "location": 50,
            "return": [
                "dict"
            ],
            "arguments": {
                "s": [],
                "repl_m": []
            }
        },
        "Violation.startEnv": {
            "name": "startEnv",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.endEnv": {
            "name": "endEnv",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        },
        "Violation.to_json": {
            "name": "to_json",
            "location": 69,
            "return": [
                "Tuple[(list, List[List[dict]], List[Tuple[(str, dict)]])]"
            ],
            "arguments": {
                "s": [
                    "Violation"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/paths.py": {
        "nd_bb_path_to_ssa": {
            "name": "nd_bb_path_to_ssa",
            "location": 153,
            "return": [
                "Tuple[(NondetSSAPath, _T1)]"
            ],
            "arguments": {
                "p": [],
                "ssa_env": [
                    "_T1@@"
                ],
                "cur_p": []
            }
        },
        "ssa_stmt": {
            "name": "ssa_stmt",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "prev_replm": [],
                "cur_replm": []
            }
        },
        "_ssa_stmts": {
            "name": "_ssa_stmts",
            "location": 225,
            "return": [
                "list"
            ],
            "arguments": {
                "stmts": [],
                "envs": []
            }
        },
        "is_nd_bb_path_possible": {
            "name": "is_nd_bb_path_possible",
            "location": 229,
            "return": [
                "Any"
            ],
            "arguments": {
                "bbpath": [],
                "f": []
            }
        },
        "extract_ssa_path_vars": {
            "name": "extract_ssa_path_vars",
            "location": 234,
            "return": [
                "list"
            ],
            "arguments": {
                "ssa_p": [],
                "m": []
            }
        },
        "get_path_vars": {
            "name": "get_path_vars",
            "location": 263,
            "return": [
                "Any"
            ],
            "arguments": {
                "bbpath": [],
                "f": []
            }
        },
        "Path.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "NondetNode.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetPath.__hash__": {
            "name": "__hash__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPathNode.to_z3": {
            "name": "to_z3",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "tenv": []
            }
        },
        "NondetSSAPathNode.wp": {
            "name": "wp",
            "location": 68,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "NondetSSAPathNode.sp": {
            "name": "sp",
            "location": 71,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "SSABBNode.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": [],
                "repl_m": []
            }
        },
        "SSABBNode.to_z3": {
            "name": "to_z3",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tenv": []
            }
        },
        "SSABBNode.wp": {
            "name": "wp",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "SSABBNode.sp": {
            "name": "sp",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "SSABBNode.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSABBNode.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSANondetNode.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choice_var": [],
                "paths": []
            }
        },
        "SSANondetNode.__iter__": {
            "name": "__iter__",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSANondetNode.to_z3": {
            "name": "to_z3",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tenv": []
            }
        },
        "SSANondetNode.wp": {
            "name": "wp",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "SSANondetNode.sp": {
            "name": "sp",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "tenv": []
            }
        },
        "SSANondetNode.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPath.exits": {
            "name": "exits",
            "location": 126,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPath.to_z3": {
            "name": "to_z3",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tenv": []
            }
        },
        "NondetSSAPath.wp": {
            "name": "wp",
            "location": 137,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "_T0@@"
                ],
                "tenv": []
            }
        },
        "NondetSSAPath.sp": {
            "name": "sp",
            "location": 142,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "_T0@@"
                ],
                "tenv": []
            }
        },
        "NondetSSAPath.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "extract_ssa_path_vars._helper": {
            "name": "_helper",
            "location": 238,
            "return": [],
            "arguments": {
                "ssa_p": []
            }
        }
    },
    "pyboogie-master/pyboogie/predicate_transformers.py": {
        "wp_stmt": {
            "name": "wp_stmt",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "pred": [],
                "typeEnv": []
            }
        },
        "wp_stmts": {
            "name": "wp_stmts",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmts": [],
                "pred": [],
                "typeEnv": []
            }
        },
        "sp_stmt": {
            "name": "sp_stmt",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "pred": [],
                "typeEnv": []
            }
        },
        "sp_stmts": {
            "name": "sp_stmts",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmts": [],
                "pred": [],
                "typeEnv": []
            }
        }
    },
    "pyboogie-master/pyboogie/ssa.py": {
        "is_ssa_str": {
            "name": "is_ssa_str",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "unssa_str": {
            "name": "unssa_str",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "unssa_z3_model": {
            "name": "unssa_z3_model",
            "location": 59,
            "return": [
                "_frozendict.frozendict"
            ],
            "arguments": {
                "m": [],
                "repl_m": []
            }
        },
        "get_ssa_tenv": {
            "name": "get_ssa_tenv",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "tenv": []
            }
        },
        "SSAEnv.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "parent": [],
                "prefix": []
            }
        },
        "SSAEnv._lookup_cnt": {
            "name": "_lookup_cnt",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "v": []
            }
        },
        "SSAEnv.lookup": {
            "name": "lookup",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "v": []
            }
        },
        "SSAEnv.contains": {
            "name": "contains",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "v": []
            }
        },
        "SSAEnv.update": {
            "name": "update",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "v": []
            }
        },
        "SSAEnv.remove": {
            "name": "remove",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ],
                "v": []
            }
        },
        "SSAEnv.changed": {
            "name": "changed",
            "location": 43,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ]
            }
        },
        "SSAEnv.replm": {
            "name": "replm",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "SSAEnv"
                ]
            }
        },
        "get_ssa_tenv.SSATEnv.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "get_ssa_tenv.SSATEnv.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "get_ssa_tenv.SSATEnv.__setitem__": {
            "name": "__setitem__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "typ": []
            }
        },
        "get_ssa_tenv.SSATEnv.__copy__": {
            "name": "__copy__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_ssa_tenv.SSATEnv.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tc.py": {
        "flatBindings": {
            "name": "flatBindings",
            "location": 254,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "bindings": []
            }
        },
        "tcType": {
            "name": "tcType",
            "location": 260,
            "return": [
                "Union[(BBV, BBool, BInt, BMap, BUserType)]"
            ],
            "arguments": {
                "node": [],
                "env": []
            }
        },
        "tcExpr": {
            "name": "tcExpr",
            "location": 299,
            "return": [
                "Any"
            ],
            "arguments": {
                "node": [],
                "env": []
            }
        },
        "tcStmt": {
            "name": "tcStmt",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "env": []
            }
        },
        "typeAccumulate": {
            "name": "typeAccumulate",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "env": []
            }
        },
        "tcDecl": {
            "name": "tcDecl",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "env": []
            }
        },
        "tcProg": {
            "name": "tcProg",
            "location": 626,
            "return": [
                "BoogieScope"
            ],
            "arguments": {
                "p": []
            }
        },
        "Singleton.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Singleton.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BInt.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBool.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBV.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nbits": []
            }
        },
        "BBV.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BBV.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBV.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMap.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [],
                "range": []
            }
        },
        "BMap.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BMap.__hash__": {
            "name": "__hash__",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMap.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLambda.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "ret": []
            }
        },
        "BLambda.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BLambda.__hash__": {
            "name": "__hash__",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLambda.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BProcedure.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "rets": []
            }
        },
        "BProcedure.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BProcedure.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BProcedure.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BUserType.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "args": []
            }
        },
        "BUserType.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BUserType.__hash__": {
            "name": "__hash__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BUserType.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTypeError.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [],
                "msg": []
            }
        },
        "BTypeError.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoogieScope.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "parent": []
            }
        },
        "BoogieScope._define": {
            "name": "_define",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Id": [],
                "obj": [],
                "mapping": []
            }
        },
        "BoogieScope.defType": {
            "name": "defType",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "typ": []
            }
        },
        "BoogieScope.lookupType": {
            "name": "lookupType",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BoogieScope.defFun": {
            "name": "defFun",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "typ": []
            }
        },
        "BoogieScope.lookupFun": {
            "name": "lookupFun",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BoogieScope.defVar": {
            "name": "defVar",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "typ": []
            }
        },
        "BoogieScope.lookupVar": {
            "name": "lookupVar",
            "location": 213,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BoogieScope.defProc": {
            "name": "defProc",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "typ": []
            }
        },
        "BoogieScope.lookupProc": {
            "name": "lookupProc",
            "location": 225,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BoogieScope.lookupScope": {
            "name": "lookupScope",
            "location": 234,
            "return": [
                "Optional[BoogieScope]"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "pyboogie-master/pyboogie/util.py": {
        "ccast": {
            "name": "ccast",
            "location": 13,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ],
                "t": []
            }
        },
        "clcast": {
            "name": "clcast",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "a": [],
                "t": []
            }
        },
        "error": {
            "name": "error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal": {
            "name": "fatal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unique": {
            "name": "unique",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": [],
                "msg": []
            }
        },
        "powerset": {
            "name": "powerset",
            "location": 42,
            "return": [
                "Generator[(set, Any, None)]"
            ],
            "arguments": {
                "s": []
            }
        },
        "split": {
            "name": "split",
            "location": 48,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "pred": [],
                "itr": []
            }
        },
        "nonempty": {
            "name": "nonempty",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "lst": []
            }
        },
        "flattenList": {
            "name": "flattenList",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "first": {
            "name": "first",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "it": [],
                "pred": []
            }
        },
        "resetUIDCtrs": {
            "name": "resetUIDCtrs",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_uid": {
            "name": "get_uid",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "prefix": []
            }
        },
        "ite": {
            "name": "ite",
            "location": 95,
            "return": [
                "Union[(_T1, _T2)]"
            ],
            "arguments": {
                "c": [],
                "a": [
                    "_T1@@"
                ],
                "b": [
                    "_T2@@"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/z3_embed.py": {
        "fi_deserialize": {
            "name": "fi_deserialize",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "classname": [],
                "d": []
            }
        },
        "fi_serialize": {
            "name": "fi_serialize",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "type_to_z3sort": {
            "name": "type_to_z3sort",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "ast_typ": []
            }
        },
        "type_to_z3": {
            "name": "type_to_z3",
            "location": 52,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "ast_typ": []
            }
        },
        "boogieToZ3TypeEnv": {
            "name": "boogieToZ3TypeEnv",
            "location": 64,
            "return": [
                "dict"
            ],
            "arguments": {
                "env": []
            }
        },
        "z3val_to_boogie": {
            "name": "z3val_to_boogie",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "model_to_store": {
            "name": "model_to_store",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "m": []
            }
        },
        "getCtx": {
            "name": "getCtx",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "wrapZ3Exc": {
            "name": "wrapZ3Exc",
            "location": 94,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "startAndWaitForZ3Instance": {
            "name": "startAndWaitForZ3Instance",
            "location": 141,
            "return": [
                "Tuple[(multiprocessing.context.Process, nothing)]"
            ],
            "arguments": {}
        },
        "_cleanupChildProcesses": {
            "name": "_cleanupChildProcesses",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 300,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "getSolver": {
            "name": "getSolver",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "releaseSolver": {
            "name": "releaseSolver",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "solver": []
            }
        },
        "IntSort": {
            "name": "IntSort",
            "location": 355,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Int": {
            "name": "Int",
            "location": 358,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        },
        "BoolSort": {
            "name": "BoolSort",
            "location": 362,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Bool": {
            "name": "Bool",
            "location": 365,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        },
        "Array": {
            "name": "Array",
            "location": 368,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": [],
                "domain": [],
                "range": []
            }
        },
        "Or": {
            "name": "Or",
            "location": 371,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "And": {
            "name": "And",
            "location": 375,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Not": {
            "name": "Not",
            "location": 379,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": []
            }
        },
        "Implies": {
            "name": "Implies",
            "location": 383,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Function": {
            "name": "Function",
            "location": 386,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "IntVal": {
            "name": "IntVal",
            "location": 389,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "BoolVal": {
            "name": "BoolVal",
            "location": 393,
            "return": [
                "Any"
            ],
            "arguments": {
                "v": []
            }
        },
        "counterex": {
            "name": "counterex",
            "location": 397,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": [],
                "timeout": [],
                "comm": []
            }
        },
        "satisfiable": {
            "name": "satisfiable",
            "location": 416,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": [],
                "timeout": []
            }
        },
        "unsatisfiable": {
            "name": "unsatisfiable",
            "location": 427,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": [],
                "timeout": [],
                "comm": []
            }
        },
        "model": {
            "name": "model",
            "location": 441,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": []
            }
        },
        "maybeModel": {
            "name": "maybeModel",
            "location": 453,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": []
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 465,
            "return": [
                "Any"
            ],
            "arguments": {
                "pred": []
            }
        },
        "implies": {
            "name": "implies",
            "location": 470,
            "return": [
                "Any"
            ],
            "arguments": {
                "inv1": [],
                "inv2": []
            }
        },
        "equivalent": {
            "name": "equivalent",
            "location": 474,
            "return": [
                "Any"
            ],
            "arguments": {
                "inv1": [],
                "inv2": []
            }
        },
        "tautology": {
            "name": "tautology",
            "location": 478,
            "return": [
                "Any"
            ],
            "arguments": {
                "inv": []
            }
        },
        "_force_expr": {
            "name": "_force_expr",
            "location": 482,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ]
            }
        },
        "expr_to_z3": {
            "name": "expr_to_z3",
            "location": 486,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": [],
                "typeEnv": []
            }
        },
        "stmt_to_z3": {
            "name": "stmt_to_z3",
            "location": 576,
            "return": [
                "Any"
            ],
            "arguments": {
                "stmt": [],
                "typeEnv": []
            }
        },
        "isnum": {
            "name": "isnum",
            "location": 595,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "ids": {
            "name": "ids",
            "location": 603,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "z3expr": []
            }
        },
        "z3_expr_to_boogie": {
            "name": "z3_expr_to_boogie",
            "location": 613,
            "return": [
                "Any"
            ],
            "arguments": {
                "expr": []
            }
        },
        "to_smt2": {
            "name": "to_smt2",
            "location": 700,
            "return": [
                "Any"
            ],
            "arguments": {
                "p": []
            }
        },
        "WrappedZ3Exception.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "WrappedZ3Exception"
                ],
                "value": []
            }
        },
        "wrapZ3Exc.wrapped": {
            "name": "wrapped",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "Z3ServerInstance.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ServerInstance"
                ]
            }
        },
        "Z3ServerInstance.add": {
            "name": "add",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "sPred": []
            }
        },
        "Z3ServerInstance.check": {
            "name": "check",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "sComm": []
            }
        },
        "Z3ServerInstance.model": {
            "name": "model",
            "location": 123,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Z3ServerInstance.push": {
            "name": "push",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "Z3ServerInstance.pop": {
            "name": "pop",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "startAndWaitForZ3Instance.runDaemon": {
            "name": "runDaemon",
            "location": 144,
            "return": [],
            "arguments": {
                "q": []
            }
        },
        "Unknown.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Unknown"
                ],
                "q": []
            }
        },
        "Z3ProxySolver.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "uri": [],
                "proc": []
            }
        },
        "Z3ProxySolver.add": {
            "name": "add",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "p": []
            }
        },
        "Z3ProxySolver.push": {
            "name": "push",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "Z3ProxySolver.pop": {
            "name": "pop",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "Z3ProxySolver.check": {
            "name": "check",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "timeout": [],
                "comm": []
            }
        },
        "Z3ProxySolver.model": {
            "name": "model",
            "location": 239,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "Z3ProxySolver.to_smt2": {
            "name": "to_smt2",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ],
                "p": []
            }
        },
        "Z3ProxySolver._restartRemote": {
            "name": "_restartRemote",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "Z3ProxySolver._shutdownRemote": {
            "name": "_shutdownRemote",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "Z3ProxySolver"
                ]
            }
        },
        "type_to_z3.array_fac": {
            "name": "array_fac",
            "location": 58,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "pyboogie-master/pyboogie/__init__.py": {},
    "pyboogie-master/pyboogie/tests/test_analysis.py": {
        "TestAnalysis.testLiveness": {
            "name": "testLiveness",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.testPropagateUnmodifiedPreds": {
            "name": "testPropagateUnmodifiedPreds",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_ast.py": {
        "TestAst.test_bad_parse": {
            "name": "test_bad_parse",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_parse": {
            "name": "test_parse",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testId": {
            "name": "testId",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testAtomParse": {
            "name": "testAtomParse",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_replace": {
            "name": "test_replace",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testTypes": {
            "name": "testTypes",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testDecls": {
            "name": "testDecls",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_bb.py": {
        "TestBB.test_build": {
            "name": "test_build",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBB.test_build_fail": {
            "name": "test_build_fail",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBB.test_loopHdrs": {
            "name": "test_loopHdrs",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_desugar.py": {
        "TestProgTC.test": {
            "name": "test",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_inv_networks.py": {
        "TestInvariantNetworks.testCheckInvNetwork": {
            "name": "testCheckInvNetwork",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvariantNetworks.testFilterInvNetwork": {
            "name": "testFilterInvNetwork",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_predicate_transformers.py": {
        "_toExpr": {
            "name": "_toExpr",
            "location": 14,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ]
            }
        },
        "TestPredicateTransformers.testWPRequireSSA": {
            "name": "testWPRequireSSA",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testWP": {
            "name": "testWP",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testSPRequireSSA": {
            "name": "testSPRequireSSA",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testSP": {
            "name": "testSP",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_tc.py": {
        "TestExprTC.testGoodExprs": {
            "name": "testGoodExprs",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExprTC.testBadExprs": {
            "name": "testBadExprs",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStmtTC.testGoodStmts": {
            "name": "testGoodStmts",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStmtTC.testBadStmts": {
            "name": "testBadStmts",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclTC.testGoodDecls": {
            "name": "testGoodDecls",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclTC.testBadDecls": {
            "name": "testBadDecls",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgTC.testGoodProgs": {
            "name": "testGoodProgs",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgTC.testBadDecls": {
            "name": "testBadDecls",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/__init__.py": {}
}
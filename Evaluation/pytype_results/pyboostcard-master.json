{
    "pyboostcard-master/scratch.py": {},
    "pyboostcard-master/pyboostcard/boostcard.py": {
        "BinnedVar.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "levels": [],
                "constraint": [],
                "x": []
            }
        },
        "BinnedVar.transform": {
            "name": "transform",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BinnedVar.get_overrides": {
            "name": "get_overrides",
            "location": 65,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinnedVar.get_missing": {
            "name": "get_missing",
            "location": 77,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinnedVar.plot": {
            "name": "plot",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resolution": []
            }
        },
        "BaseBoostCard.from_json": {
            "name": "from_json",
            "location": 114,
            "return": [
                "List[pyboostcard.constraints.Constraint]"
            ],
            "arguments": {
                "file": []
            }
        },
        "BaseBoostCard.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraints": [],
                "objective": [],
                "n_estimators": [],
                "learning_rate": [],
                "subsample": [],
                "gamma": [],
                "min_child_weight": [],
                "max_leaf_nodes": []
            }
        },
        "BaseBoostCard.fit": {
            "name": "fit",
            "location": 158,
            "return": [
                "_TBaseBoostCard@@BaseBoostCard@@"
            ],
            "arguments": {
                "self": [
                    "_TBaseBoostCard@@BaseBoostCard@@"
                ],
                "X": [],
                "y": [],
                "sample_weight": [],
                "eval_metric": []
            }
        },
        "BaseBoostCard.lengths": {
            "name": "lengths",
            "location": 240,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBoostCard.features": {
            "name": "features",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseBoostCard.feature_importances_": {
            "name": "feature_importances_",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseBoostCard.transform": {
            "name": "transform",
            "location": 255,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BaseBoostCard.fit_transform": {
            "name": "fit_transform",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BaseBoostCard.decision_function": {
            "name": "decision_function",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "columns": [],
                "order": []
            }
        },
        "BaseBoostCard.predict": {
            "name": "predict",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BoostCardClassifier.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraints": [],
                "objective": [],
                "n_estimators": [],
                "learning_rate": [],
                "subsample": [],
                "gamma": [],
                "min_child_weight": [],
                "max_leaf_nodes": []
            }
        },
        "BoostCardClassifier.fit": {
            "name": "fit",
            "location": 325,
            "return": [
                "_TBoostCardClassifier@@BoostCardClassifier@@"
            ],
            "arguments": {
                "self": [
                    "_TBoostCardClassifier@@BoostCardClassifier@@"
                ],
                "X": [],
                "y": [],
                "sample_weight": [],
                "eval_set": [],
                "eval_metric": [],
                "early_stopping_rounds": [],
                "verbose": [],
                "xgb_model": [],
                "sample_weight_eval_set": [],
                "callbacks": []
            }
        },
        "BoostCardClassifier.predict": {
            "name": "predict",
            "location": 341,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BoostCardClassifier.predict_proba": {
            "name": "predict_proba",
            "location": 345,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BoostCardClassifier.predict_log_proba": {
            "name": "predict_log_proba",
            "location": 350,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "BoostCardRegressor.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraints": [],
                "objective": [],
                "n_estimators": [],
                "learning_rate": [],
                "subsample": [],
                "gamma": [],
                "min_child_weight": [],
                "max_leaf_nodes": []
            }
        }
    },
    "pyboostcard-master/pyboostcard/constants.py": {},
    "pyboostcard-master/pyboostcard/constraints.py": {
        "check_valid_intervals": {
            "name": "check_valid_intervals",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "selections": []
            }
        },
        "Blueprint.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selections": [],
                "mono": []
            }
        },
        "Blueprint.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.from_json": {
            "name": "from_json",
            "location": 43,
            "return": [
                "Constraint"
            ],
            "arguments": {
                "s": []
            }
        },
        "Constraint.filter_types": {
            "name": "filter_types",
            "location": 53,
            "return": [
                "list"
            ],
            "arguments": {
                "selections": [],
                "type": []
            }
        },
        "Constraint.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.get_intervals": {
            "name": "get_intervals",
            "location": 101,
            "return": [
                "List[pyboostcard.selections.Interval]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.num_intervals": {
            "name": "num_intervals",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.fitted": {
            "name": "fitted",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.order": {
            "name": "order",
            "location": 112,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "desc": []
            }
        },
        "Constraint.__len__": {
            "name": "__len__",
            "location": 122,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.__fit_interval": {
            "name": "__fit_interval",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "interval": []
            }
        },
        "Constraint.__fit": {
            "name": "__fit",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.transform": {
            "name": "transform",
            "location": 198,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Constraint.__repr__": {
            "name": "__repr__",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboostcard-master/pyboostcard/decisionstump.py": {
        "DecisionStump.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [],
                "values": []
            }
        },
        "DecisionStump.transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "pos": []
            }
        }
    },
    "pyboostcard-master/pyboostcard/selections.py": {
        "Selection.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Selection.bounds_from_string": {
            "name": "bounds_from_string",
            "location": 27,
            "return": [
                "Tuple[(bool, bool)]"
            ],
            "arguments": {
                "chars": []
            }
        },
        "Selection.interval_from_string": {
            "name": "interval_from_string",
            "location": 35,
            "return": [
                "Tuple[(Tuple[(float, float)], Tuple[(bool, bool)])]"
            ],
            "arguments": {
                "chars": []
            }
        },
        "Selection.from_dict": {
            "name": "from_dict",
            "location": 55,
            "return": [
                "Union[(Clamp, Identity, Interval, Missing, Override)]"
            ],
            "arguments": {
                "d": []
            }
        },
        "Selection.from_json": {
            "name": "from_json",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "Selection.in_selection": {
            "name": "in_selection",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Selection.sort_value": {
            "name": "sort_value",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FittedSelection.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selection": [],
                "value": []
            }
        },
        "FittedSelection.transform": {
            "name": "transform",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "result": [],
                "clamp": []
            }
        },
        "FittedSelection.sort_value": {
            "name": "sort_value",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identity.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Identity.in_selection": {
            "name": "in_selection",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Identity.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clamp.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ll": [],
                "ul": [],
                "order": []
            }
        },
        "Clamp.in_selection": {
            "name": "in_selection",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Clamp.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [],
                "bounds": [],
                "order": [],
                "mono": []
            }
        },
        "Interval.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interval.sort_value": {
            "name": "sort_value",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Interval.mono": {
            "name": "mono",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Interval.in_selection": {
            "name": "in_selection",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Override.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "override": [],
                "order": []
            }
        },
        "Override.__repr__": {
            "name": "__repr__",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Override.in_selection": {
            "name": "in_selection",
            "location": 216,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Missing.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Missing.__repr__": {
            "name": "__repr__",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Missing.in_selection": {
            "name": "in_selection",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "pyboostcard-master/pyboostcard/util.py": {
        "indices": {
            "name": "indices",
            "location": 10,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "l": []
            }
        },
        "get_xgb_features_and_values": {
            "name": "get_xgb_features_and_values",
            "location": 22,
            "return": [
                "Tuple[(List[nothing], List[Tuple[(float, float)]])]"
            ],
            "arguments": {
                "clf": []
            }
        },
        "filter_lists_by_fid": {
            "name": "filter_lists_by_fid",
            "location": 44,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "ft": [],
                "lv": [],
                "fids": []
            }
        },
        "lengths_to_indices": {
            "name": "lengths_to_indices",
            "location": 57,
            "return": [
                "List[List[int]]"
            ],
            "arguments": {
                "lens": []
            }
        },
        "split_xgb_outputs": {
            "name": "split_xgb_outputs",
            "location": 67,
            "return": [
                "List[Tuple[(List[nothing], List[nothing])]]"
            ],
            "arguments": {
                "clf": [],
                "lens": []
            }
        },
        "sklearn_tree_to_bins": {
            "name": "sklearn_tree_to_bins",
            "location": 79,
            "return": [
                "List[tuple]"
            ],
            "arguments": {
                "tree": [],
                "values": []
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sklearn_tree_to_bins.recurse": {
            "name": "recurse",
            "location": 82,
            "return": [],
            "arguments": {
                "tree": [],
                "node": [],
                "bounds": [],
                "res": []
            }
        }
    },
    "pyboostcard-master/pyboostcard/__init__.py": {},
    "pyboostcard-master/tests/test_selections.py": {
        "TestIntervalSelection.test_interval_cc": {
            "name": "test_interval_cc",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntervalSelection.test_interval_oo": {
            "name": "test_interval_oo",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntervalSelection.test_interval_oc": {
            "name": "test_interval_oc",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntervalSelection.test_interval_co": {
            "name": "test_interval_co",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrideSelection.test_override": {
            "name": "test_override",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMissingSelection.test_missing": {
            "name": "test_missing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdentitySelection.test_identity": {
            "name": "test_identity",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStaticMethods.test_bounds_from_string": {
            "name": "test_bounds_from_string",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStaticMethods.test_selection_from_dict": {
            "name": "test_selection_from_dict",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStaticMethods.test_selection_from_json": {
            "name": "test_selection_from_json",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboostcard-master/tests/__init__.py": {}
}
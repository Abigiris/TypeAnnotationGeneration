{
    "pydantic-master/setup.py": {
        "get_export_symbols": {
            "name": "get_export_symbols",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ext": []
            }
        },
        "ReplaceLinks.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceLinks.replace_issues": {
            "name": "replace_issues",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ReplaceLinks.replace_users": {
            "name": "replace_users",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ReplaceLinks.extra": {
            "name": "extra",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/changes/make_history.py": {},
    "pydantic-master/docs/build/exec_examples.py": {
        "to_string": {
            "name": "to_string",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "build_print_lines": {
            "name": "build_print_lines",
            "location": 76,
            "return": [
                "list"
            ],
            "arguments": {
                "s": [],
                "max_len_reduction": []
            }
        },
        "build_print_statement": {
            "name": "build_print_statement",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "line_no": [],
                "s": [],
                "lines": []
            }
        },
        "all_md_contents": {
            "name": "all_md_contents",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "gen_ansi_output": {
            "name": "gen_ansi_output",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "should_execute": {
            "name": "should_execute",
            "location": 128,
            "return": [
                "Tuple[(Union[(str, _T1)], bool)]"
            ],
            "arguments": {
                "file_name": [],
                "file_text": [
                    "_T1@@"
                ]
            }
        },
        "exec_examples": {
            "name": "exec_examples",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "MockPrint.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "MockPrint.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPath.__new__": {
            "name": "__new__",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "MockPath.read_text": {
            "name": "read_text",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "exec_examples.error": {
            "name": "error",
            "location": 161,
            "return": [],
            "arguments": {
                "desc": []
            }
        }
    },
    "pydantic-master/docs/build/main.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "pydantic-master/docs/build/schema_mapping.py": {
        "md2html": {
            "name": "md2html",
            "location": 499,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "build_schema_mappings": {
            "name": "build_schema_mappings",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pydantic-master/docs/examples/annotated_types_named_tuple.py": {},
    "pydantic-master/docs/examples/annotated_types_typed_dict.py": {},
    "pydantic-master/docs/examples/dataclasses_arbitrary_types_allowed.py": {
        "ArbitraryType.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ArbitraryType.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/dataclasses_default_schema.py": {},
    "pydantic-master/docs/examples/dataclasses_initvars.py": {
        "PathData.__post_init__": {
            "name": "__post_init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "base_path": []
            }
        },
        "PathData.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "base_path": []
            }
        }
    },
    "pydantic-master/docs/examples/dataclasses_json_dumps.py": {},
    "pydantic-master/docs/examples/dataclasses_main.py": {},
    "pydantic-master/docs/examples/dataclasses_nested.py": {},
    "pydantic-master/docs/examples/dataclasses_post_init_post_parse.py": {
        "User.__post_init__": {
            "name": "__post_init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/dataclasses_stdlib_inheritance.py": {},
    "pydantic-master/docs/examples/dataclasses_stdlib_to_pydantic.py": {},
    "pydantic-master/docs/examples/dataclasses_stdlib_with_basemodel.py": {},
    "pydantic-master/docs/examples/devtools_main.py": {},
    "pydantic-master/docs/examples/exporting_models_copy.py": {},
    "pydantic-master/docs/examples/exporting_models_dict.py": {},
    "pydantic-master/docs/examples/exporting_models_exclude1.py": {},
    "pydantic-master/docs/examples/exporting_models_exclude2.py": {},
    "pydantic-master/docs/examples/exporting_models_exclude3.py": {},
    "pydantic-master/docs/examples/exporting_models_exclude4.py": {},
    "pydantic-master/docs/examples/exporting_models_exclude5.py": {},
    "pydantic-master/docs/examples/exporting_models_iterate.py": {},
    "pydantic-master/docs/examples/exporting_models_json.py": {},
    "pydantic-master/docs/examples/exporting_models_json_encoders.py": {},
    "pydantic-master/docs/examples/exporting_models_json_encoders_merge.py": {},
    "pydantic-master/docs/examples/exporting_models_json_forward_ref.py": {},
    "pydantic-master/docs/examples/exporting_models_json_subclass.py": {
        "DayThisYear.__get_validators__": {
            "name": "__get_validators__",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DayThisYear.validate": {
            "name": "validate",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/exporting_models_orjson.py": {
        "orjson_dumps": {
            "name": "orjson_dumps",
            "location": 6,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/exporting_models_pickle.py": {},
    "pydantic-master/docs/examples/exporting_models_ujson.py": {},
    "pydantic-master/docs/examples/generate_models_person_model.py": {},
    "pydantic-master/docs/examples/hypothesis_property_based_test.py": {
        "test_property": {
            "name": "test_property",
            "location": 13,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "test_with_discount": {
            "name": "test_with_discount",
            "location": 21,
            "return": [],
            "arguments": {
                "instance": []
            }
        }
    },
    "pydantic-master/docs/examples/index_error.py": {},
    "pydantic-master/docs/examples/index_main.py": {},
    "pydantic-master/docs/examples/models_abc.py": {
        "FooBarModel.my_abstract_method": {
            "name": "my_abstract_method",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/models_construct.py": {},
    "pydantic-master/docs/examples/models_custom_root_access.py": {
        "Pets.__iter__": {
            "name": "__iter__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pets.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "pydantic-master/docs/examples/models_custom_root_field.py": {},
    "pydantic-master/docs/examples/models_custom_root_field_parse_obj.py": {},
    "pydantic-master/docs/examples/models_data_conversion.py": {},
    "pydantic-master/docs/examples/models_default_factory.py": {},
    "pydantic-master/docs/examples/models_dynamic_creation.py": {},
    "pydantic-master/docs/examples/models_dynamic_inheritance.py": {},
    "pydantic-master/docs/examples/models_dynamic_validators.py": {
        "username_alphanumeric": {
            "name": "username_alphanumeric",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/models_errors1.py": {},
    "pydantic-master/docs/examples/models_errors2.py": {
        "Model.value_must_equal_bar": {
            "name": "value_must_equal_bar",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/models_errors3.py": {
        "Model.value_must_equal_bar": {
            "name": "value_must_equal_bar",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/models_field_order.py": {},
    "pydantic-master/docs/examples/models_from_typeddict.py": {},
    "pydantic-master/docs/examples/models_generics.py": {
        "Response.check_consistency": {
            "name": "check_consistency",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        }
    },
    "pydantic-master/docs/examples/models_generics_inheritance.py": {},
    "pydantic-master/docs/examples/models_generics_inheritance_extend.py": {},
    "pydantic-master/docs/examples/models_generics_naming.py": {
        "Response.__concrete_name__": {
            "name": "__concrete_name__",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        }
    },
    "pydantic-master/docs/examples/models_generics_nested.py": {},
    "pydantic-master/docs/examples/models_generics_typevars.py": {},
    "pydantic-master/docs/examples/models_mutation.py": {},
    "pydantic-master/docs/examples/models_orm_mode.py": {},
    "pydantic-master/docs/examples/models_orm_mode_data_binding.py": {
        "UserGetter.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        }
    },
    "pydantic-master/docs/examples/models_orm_mode_recursive.py": {
        "PetCls.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersonCls.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/models_orm_mode_reserved_name.py": {},
    "pydantic-master/docs/examples/models_parse.py": {},
    "pydantic-master/docs/examples/models_recursive.py": {},
    "pydantic-master/docs/examples/models_required_fields.py": {},
    "pydantic-master/docs/examples/models_required_field_optional.py": {},
    "pydantic-master/docs/examples/models_signature.py": {},
    "pydantic-master/docs/examples/models_signature_custom_init.py": {
        "MyModel.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "pydantic-master/docs/examples/model_config_alias_generator.py": {
        "to_camel": {
            "name": "to_camel",
            "location": 4,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "pydantic-master/docs/examples/model_config_alias_precedence.py": {
        "Character.Config.alias_generator": {
            "name": "alias_generator",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        }
    },
    "pydantic-master/docs/examples/model_config_change_globally_custom.py": {},
    "pydantic-master/docs/examples/model_config_class_kwargs.py": {},
    "pydantic-master/docs/examples/model_config_dataclass.py": {},
    "pydantic-master/docs/examples/model_config_main.py": {},
    "pydantic-master/docs/examples/model_config_smart_union_off.py": {},
    "pydantic-master/docs/examples/model_config_smart_union_on.py": {},
    "pydantic-master/docs/examples/model_config_smart_union_on_edge_case.py": {},
    "pydantic-master/docs/examples/mypy_main.py": {},
    "pydantic-master/docs/examples/parse_obj_as.py": {},
    "pydantic-master/docs/examples/postponed_annotations_broken.py": {
        "this_is_broken": {
            "name": "this_is_broken",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/docs/examples/postponed_annotations_forward_ref.py": {},
    "pydantic-master/docs/examples/postponed_annotations_main.py": {},
    "pydantic-master/docs/examples/postponed_annotations_self_referencing_annotations.py": {},
    "pydantic-master/docs/examples/postponed_annotations_self_referencing_string.py": {},
    "pydantic-master/docs/examples/postponed_annotations_works.py": {
        "this_works": {
            "name": "this_works",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/docs/examples/private_attributes.py": {
        "TimeAwareModel.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/private_attributes_underscore_attrs_are_private.py": {},
    "pydantic-master/docs/examples/schema_ad_hoc.py": {},
    "pydantic-master/docs/examples/schema_annotated.py": {},
    "pydantic-master/docs/examples/schema_custom.py": {},
    "pydantic-master/docs/examples/schema_extra_callable.py": {
        "Person.Config.schema_extra": {
            "name": "schema_extra",
            "location": 12,
            "return": [],
            "arguments": {
                "schema": [],
                "model": []
            }
        }
    },
    "pydantic-master/docs/examples/schema_main.py": {},
    "pydantic-master/docs/examples/schema_top_level.py": {},
    "pydantic-master/docs/examples/schema_unenforced_constraints.py": {},
    "pydantic-master/docs/examples/schema_with_example.py": {},
    "pydantic-master/docs/examples/schema_with_field.py": {
        "RestrictedAlphabetStr.__get_validators__": {
            "name": "__get_validators__",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "RestrictedAlphabetStr.validate": {
            "name": "validate",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "field": []
            }
        },
        "RestrictedAlphabetStr.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": [],
                "field": []
            }
        }
    },
    "pydantic-master/docs/examples/settings_add_custom_source.py": {
        "json_config_settings_source": {
            "name": "json_config_settings_source",
            "location": 8,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        }
    },
    "pydantic-master/docs/examples/settings_case_sensitive.py": {},
    "pydantic-master/docs/examples/settings_disable_source.py": {
        "Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        }
    },
    "pydantic-master/docs/examples/settings_env_priority.py": {
        "Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        }
    },
    "pydantic-master/docs/examples/settings_main.py": {},
    "pydantic-master/docs/examples/settings_nested_env.py": {},
    "pydantic-master/docs/examples/types_arbitrary_allowed.py": {
        "Pet.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "pydantic-master/docs/examples/types_bare_type.py": {},
    "pydantic-master/docs/examples/types_boolean.py": {},
    "pydantic-master/docs/examples/types_bytesize.py": {},
    "pydantic-master/docs/examples/types_callable.py": {},
    "pydantic-master/docs/examples/types_choices.py": {},
    "pydantic-master/docs/examples/types_color.py": {},
    "pydantic-master/docs/examples/types_constrained.py": {},
    "pydantic-master/docs/examples/types_custom_type.py": {
        "PostCode.__get_validators__": {
            "name": "__get_validators__",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PostCode.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "PostCode.validate": {
            "name": "validate",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "PostCode.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/types_dt.py": {},
    "pydantic-master/docs/examples/types_generics.py": {
        "TastingModel.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "aged": [],
                "quality": []
            }
        },
        "TastingModel.__get_validators__": {
            "name": "__get_validators__",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TastingModel.validate": {
            "name": "validate",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        }
    },
    "pydantic-master/docs/examples/types_infinite_generator.py": {
        "infinite_ints": {
            "name": "infinite_ints",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/docs/examples/types_infinite_generator_validate_first.py": {
        "infinite_ints": {
            "name": "infinite_ints",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "infinite_strs": {
            "name": "infinite_strs",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "Model.infinite_first_int": {
            "name": "infinite_first_int",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": [],
                "field": []
            }
        }
    },
    "pydantic-master/docs/examples/types_iterables.py": {},
    "pydantic-master/docs/examples/types_json_type.py": {},
    "pydantic-master/docs/examples/types_literal1.py": {},
    "pydantic-master/docs/examples/types_literal2.py": {},
    "pydantic-master/docs/examples/types_literal3.py": {},
    "pydantic-master/docs/examples/types_payment_card_number.py": {
        "Card.brand": {
            "name": "brand",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.expired": {
            "name": "expired",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/types_secret_types.py": {},
    "pydantic-master/docs/examples/types_strict.py": {},
    "pydantic-master/docs/examples/types_type.py": {},
    "pydantic-master/docs/examples/types_typevar.py": {},
    "pydantic-master/docs/examples/types_union_correct.py": {},
    "pydantic-master/docs/examples/types_union_discriminated.py": {},
    "pydantic-master/docs/examples/types_union_discriminated_nested.py": {},
    "pydantic-master/docs/examples/types_union_incorrect.py": {},
    "pydantic-master/docs/examples/types_urls.py": {},
    "pydantic-master/docs/examples/types_url_properties.py": {
        "MyDatabaseModel.check_db_name": {
            "name": "check_db_name",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/types_url_punycode.py": {},
    "pydantic-master/docs/examples/validation_decorator_async.py": {},
    "pydantic-master/docs/examples/validation_decorator_config.py": {
        "add_foobars": {
            "name": "add_foobars",
            "location": 16,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Foobar.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Foobar.__add__": {
            "name": "__add__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Foobar.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_field.py": {
        "how_many": {
            "name": "how_many",
            "location": 7,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "when": {
            "name": "when",
            "location": 18,
            "return": [],
            "arguments": {
                "dt": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_main.py": {
        "repeat": {
            "name": "repeat",
            "location": 5,
            "return": [],
            "arguments": {
                "s": [],
                "count": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_parameter_types.py": {
        "pos_or_kw": {
            "name": "pos_or_kw",
            "location": 6,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "kw_only": {
            "name": "kw_only",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "pos_only": {
            "name": "pos_only",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "var_args": {
            "name": "var_args",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "var_kwargs": {
            "name": "var_kwargs",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "armageddon": {
            "name": "armageddon",
            "location": 54,
            "return": [],
            "arguments": {
                "b": [],
                "c": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_raw_function.py": {
        "repeat": {
            "name": "repeat",
            "location": 5,
            "return": [],
            "arguments": {
                "s": [],
                "count": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_types.py": {
        "find_file": {
            "name": "find_file",
            "location": 8,
            "return": [],
            "arguments": {
                "path": [],
                "regex": [],
                "max": []
            }
        }
    },
    "pydantic-master/docs/examples/validation_decorator_validate.py": {
        "slow_sum": {
            "name": "slow_sum",
            "location": 5,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_allow_reuse.py": {
        "normalize": {
            "name": "normalize",
            "location": 4,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_always.py": {
        "DemoModel.set_ts_now": {
            "name": "set_ts_now",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_dataclass.py": {
        "DemoDataclass.set_ts_now": {
            "name": "set_ts_now",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_pre_item.py": {
        "DemoModel.split_str": {
            "name": "split_str",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DemoModel.check_sum": {
            "name": "check_sum",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DemoModel.check_squares": {
            "name": "check_squares",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DemoModel.check_cubes": {
            "name": "check_cubes",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_root.py": {
        "UserModel.check_card_number_omitted": {
            "name": "check_card_number_omitted",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "UserModel.check_passwords_match": {
            "name": "check_passwords_match",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_simple.py": {
        "UserModel.name_must_contain_space": {
            "name": "name_must_contain_space",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "UserModel.passwords_match": {
            "name": "passwords_match",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "UserModel.username_alphanumeric": {
            "name": "username_alphanumeric",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/docs/examples/validators_subclass_each_item.py": {
        "ChildModel.check_names_not_empty": {
            "name": "check_names_not_empty",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ChildModel2.check_names_not_empty": {
            "name": "check_names_not_empty",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/pydantic/annotated_types.py": {
        "create_model_from_typeddict": {
            "name": "create_model_from_typeddict",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "typeddict_cls": []
            }
        },
        "create_model_from_namedtuple": {
            "name": "create_model_from_namedtuple",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "namedtuple_cls": []
            }
        }
    },
    "pydantic-master/pydantic/class_validators.py": {
        "validator": {
            "name": "validator",
            "location": 52,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "root_validator": {
            "name": "root_validator",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "_func": []
            }
        },
        "_prepare_validator": {
            "name": "_prepare_validator",
            "location": 138,
            "return": [
                "Union[(Callable, _T0)]"
            ],
            "arguments": {
                "function": [
                    "_T0@@"
                ],
                "allow_reuse": []
            }
        },
        "extract_validators": {
            "name": "extract_validators",
            "location": 182,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "extract_root_validators": {
            "name": "extract_root_validators",
            "location": 196,
            "return": [
                "Tuple[(list, List[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "inherit_validators": {
            "name": "inherit_validators",
            "location": 221,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "base_validators": [],
                "validators": [
                    "_T1@@"
                ]
            }
        },
        "make_generic_validator": {
            "name": "make_generic_validator",
            "location": 229,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "validator": []
            }
        },
        "prep_validators": {
            "name": "prep_validators",
            "location": 257,
            "return": [
                "list"
            ],
            "arguments": {
                "v_funcs": []
            }
        },
        "_generic_validator_cls": {
            "name": "_generic_validator_cls",
            "location": 264,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "validator": [],
                "sig": [],
                "args": []
            }
        },
        "_generic_validator_basic": {
            "name": "_generic_validator_basic",
            "location": 298,
            "return": [
                "Callable[([Any, Any, Any, Any, Any], Any)]"
            ],
            "arguments": {
                "validator": [],
                "sig": [],
                "args": []
            }
        },
        "gather_all_validators": {
            "name": "gather_all_validators",
            "location": 331,
            "return": [
                "dict"
            ],
            "arguments": {
                "type_": []
            }
        },
        "Validator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "pre": [],
                "each_item": [],
                "always": [],
                "check_fields": [],
                "skip_on_failure": []
            }
        },
        "validator.dec": {
            "name": "dec",
            "location": 87,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "root_validator.dec": {
            "name": "dec",
            "location": 128,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "ValidatorGroup.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validators": []
            }
        },
        "ValidatorGroup.get_validators": {
            "name": "get_validators",
            "location": 157,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ValidatorGroup.check_for_unused": {
            "name": "check_for_unused",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/pydantic/color.py": {
        "parse_tuple": {
            "name": "parse_tuple",
            "location": 202,
            "return": [
                "RGBA"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_str": {
            "name": "parse_str",
            "location": 216,
            "return": [
                "RGBA"
            ],
            "arguments": {
                "value": []
            }
        },
        "ints_to_rgba": {
            "name": "ints_to_rgba",
            "location": 274,
            "return": [
                "RGBA"
            ],
            "arguments": {
                "r": [],
                "g": [],
                "b": [],
                "alpha": []
            }
        },
        "parse_color_value": {
            "name": "parse_color_value",
            "location": 278,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": [],
                "max_val": []
            }
        },
        "parse_float_alpha": {
            "name": "parse_float_alpha",
            "location": 293,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_hsl": {
            "name": "parse_hsl",
            "location": 315,
            "return": [
                "RGBA"
            ],
            "arguments": {
                "h": [],
                "h_units": [],
                "sat": [],
                "light": [],
                "alpha": []
            }
        },
        "float_to_255": {
            "name": "float_to_255",
            "location": 334,
            "return": [
                "int"
            ],
            "arguments": {
                "c": []
            }
        },
        "RGBA.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [],
                "g": [],
                "b": [],
                "alpha": []
            }
        },
        "RGBA.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Color.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Color.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "Color.original": {
            "name": "original",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_named": {
            "name": "as_named",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_hex": {
            "name": "as_hex",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_rgb": {
            "name": "as_rgb",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_rgb_tuple": {
            "name": "as_rgb_tuple",
            "location": 131,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_hsl": {
            "name": "as_hsl",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.as_hsl_tuple": {
            "name": "as_hsl_tuple",
            "location": 164,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color._alpha_float": {
            "name": "_alpha_float",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.__get_validators__": {
            "name": "__get_validators__",
            "location": 192,
            "return": [
                "Generator[(Type[Color], Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Color.__str__": {
            "name": "__str__",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.__repr_args__": {
            "name": "__repr_args__",
            "location": 198,
            "return": [
                "List[Tuple[(Optional[str], Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/pydantic/config.py": {
        "inherit_config": {
            "name": "inherit_config",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "self_config": [],
                "parent_config": []
            }
        },
        "prepare_config": {
            "name": "prepare_config",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "cls_name": []
            }
        },
        "BaseConfig.get_field_info": {
            "name": "get_field_info",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "BaseConfig.prepare_field": {
            "name": "prepare_field",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "field": []
            }
        },
        "SchemaExtraCallable.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "model_class": []
            }
        }
    },
    "pydantic-master/pydantic/dataclasses.py": {
        "_validate_dataclass": {
            "name": "_validate_dataclass",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_get_validators": {
            "name": "_get_validators",
            "location": 58,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "setattr_validate_assignment": {
            "name": "setattr_validate_assignment",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "is_builtin_dataclass": {
            "name": "is_builtin_dataclass",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "_cls": []
            }
        },
        "_generate_pydantic_post_init": {
            "name": "_generate_pydantic_post_init",
            "location": 85,
            "return": [
                "Callable"
            ],
            "arguments": {
                "post_init_original": [],
                "post_init_post_parse": []
            }
        },
        "_process_class": {
            "name": "_process_class",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "_cls": [],
                "init": [],
                "repr": [],
                "eq": [],
                "order": [],
                "unsafe_hash": [],
                "frozen": [],
                "config": []
            }
        },
        "dataclass": {
            "name": "dataclass",
            "location": 241,
            "return": [],
            "arguments": {
                "_cls": []
            }
        },
        "make_dataclass_validator": {
            "name": "make_dataclass_validator",
            "location": 268,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "_cls": [],
                "config": []
            }
        },
        "_generate_pydantic_post_init._pydantic_post_init": {
            "name": "_pydantic_post_init",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dataclass.wrap": {
            "name": "wrap",
            "location": 259,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Dataclass.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataclass.__get_validators__": {
            "name": "__get_validators__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Dataclass.__validate__": {
            "name": "__validate__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "Dataclass.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/pydantic/datetime_parse.py": {
        "get_numeric": {
            "name": "get_numeric",
            "location": 66,
            "return": [
                "Optional[Union[(float, _T0)]]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ],
                "native_expected_type": []
            }
        },
        "from_unix_seconds": {
            "name": "from_unix_seconds",
            "location": 77,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "seconds": []
            }
        },
        "_parse_timezone": {
            "name": "_parse_timezone",
            "location": 89,
            "return": [
                "Optional[_datetime.timezone]"
            ],
            "arguments": {
                "value": [],
                "error": []
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 137,
            "return": [
                "Union[(_datetime.time, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 175,
            "return": [
                "Union[(_datetime.datetime, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "parse_duration": {
            "name": "parse_duration",
            "location": 213,
            "return": [
                "Union[(_datetime.timedelta, _T0)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        }
    },
    "pydantic-master/pydantic/decorator.py": {
        "validate_arguments": {
            "name": "validate_arguments",
            "location": 30,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "validate_arguments.validate": {
            "name": "validate",
            "location": 35,
            "return": [],
            "arguments": {
                "_func": []
            }
        },
        "ValidatedFunction.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "config": []
            }
        },
        "ValidatedFunction.init_model_instance": {
            "name": "init_model_instance",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidatedFunction.call": {
            "name": "call",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidatedFunction.build_values": {
            "name": "build_values",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "ValidatedFunction.execute": {
            "name": "execute",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "ValidatedFunction.create_model": {
            "name": "create_model",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [],
                "takes_args": [],
                "takes_kwargs": [],
                "config": []
            }
        },
        "validate_arguments.validate.wrapper_function": {
            "name": "wrapper_function",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "ValidatedFunction.create_model.DecoratorBaseModel.check_args": {
            "name": "check_args",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ValidatedFunction.create_model.DecoratorBaseModel.check_kwargs": {
            "name": "check_kwargs",
            "location": 230,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ValidatedFunction.create_model.DecoratorBaseModel.check_positional_only": {
            "name": "check_positional_only",
            "location": 239,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ValidatedFunction.create_model.DecoratorBaseModel.check_duplicate_kwargs": {
            "name": "check_duplicate_kwargs",
            "location": 248,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/pydantic/env_settings.py": {
        "read_env_file": {
            "name": "read_env_file",
            "location": 294,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "BaseSettings.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "__pydantic_self__": [],
                "_env_file": [],
                "_env_file_encoding": [],
                "_env_nested_delimiter": [],
                "_secrets_dir": []
            }
        },
        "BaseSettings._build_values": {
            "name": "_build_values",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "init_kwargs": [],
                "_env_file": [],
                "_env_file_encoding": [],
                "_env_nested_delimiter": [],
                "_secrets_dir": []
            }
        },
        "InitSettingsSource.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "init_kwargs": []
            }
        },
        "InitSettingsSource.__call__": {
            "name": "__call__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "InitSettingsSource.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvSettingsSource.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "env_file": [],
                "env_file_encoding": [],
                "env_nested_delimiter": []
            }
        },
        "EnvSettingsSource.__call__": {
            "name": "__call__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "EnvSettingsSource.field_is_complex": {
            "name": "field_is_complex",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "EnvSettingsSource.explode_env_vars": {
            "name": "explode_env_vars",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "env_vars": []
            }
        },
        "EnvSettingsSource.__repr__": {
            "name": "__repr__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretsSettingsSource.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "secrets_dir": []
            }
        },
        "SecretsSettingsSource.__call__": {
            "name": "__call__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SecretsSettingsSource.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.Config.prepare_field": {
            "name": "prepare_field",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "field": []
            }
        },
        "BaseSettings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        }
    },
    "pydantic-master/pydantic/errors.py": {
        "cls_kwargs": {
            "name": "cls_kwargs",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "ctx": []
            }
        },
        "PydanticErrorMixin.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticErrorMixin.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PydanticErrorMixin.__reduce__": {
            "name": "__reduce__",
            "location": 129,
            "return": [
                "Tuple[(Callable[([Any, Any], Any)], Tuple[(Type[PydanticErrorMixin], Dict[(str, Any)])])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrongConstantError.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlSchemePermittedError.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_schemes": []
            }
        },
        "EnumMemberError.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PathValueError.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleLengthError.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMinLengthError.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListMaxLengthError.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetMinLengthError.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetMaxLengthError.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetMinLengthError.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetMaxLengthError.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyStrMinLengthError.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyStrMaxLengthError.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrRegexError.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NumberBoundError.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberNotMultipleError.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalMaxDigitsError.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalMaxPlacesError.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecimalWholeDigitsError.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDVersionError.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArbitraryTypeError.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubclassError.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidDiscriminator.__init__": {
            "name": "__init__",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/pydantic/error_wrappers.py": {
        "display_errors": {
            "name": "display_errors",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "errors": []
            }
        },
        "_display_error_loc": {
            "name": "_display_error_loc",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "error": []
            }
        },
        "_display_error_type_and_ctx": {
            "name": "_display_error_type_and_ctx",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "error": []
            }
        },
        "flatten_errors": {
            "name": "flatten_errors",
            "location": 99,
            "return": [
                "Generator[(Dict[(str, Any)], Any, None)]"
            ],
            "arguments": {
                "errors": [],
                "config": [],
                "loc": []
            }
        },
        "error_dict": {
            "name": "error_dict",
            "location": 120,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "exc": [],
                "config": [],
                "loc": []
            }
        },
        "get_exc_type": {
            "name": "get_exc_type",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "_get_exc_type": {
            "name": "_get_exc_type",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ErrorWrapper.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [],
                "loc": []
            }
        },
        "ErrorWrapper.loc_tuple": {
            "name": "loc_tuple",
            "location": 35,
            "return": [
                "Union[(Tuple[_T0], _T0)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorWrapper.__repr_args__": {
            "name": "__repr_args__",
            "location": 41,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [],
                "model": []
            }
        },
        "ValidationError.errors": {
            "name": "errors",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.json": {
            "name": "json",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__repr_args__": {
            "name": "__repr_args__",
            "location": 78,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/pydantic/fields.py": {
        "Field": {
            "name": "Field",
            "location": 216,
            "return": [
                "FieldInfo"
            ],
            "arguments": {
                "default": []
            }
        },
        "PrivateAttr": {
            "name": "PrivateAttr",
            "location": 1188,
            "return": [
                "ModelPrivateAttr"
            ],
            "arguments": {
                "default": []
            }
        },
        "UndefinedType.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedType.__copy__": {
            "name": "__copy__",
            "location": 71,
            "return": [
                "_TUndefinedType@@UndefinedType@@"
            ],
            "arguments": {
                "self": [
                    "_TUndefinedType@@UndefinedType@@"
                ]
            }
        },
        "UndefinedType.__reduce__": {
            "name": "__reduce__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UndefinedType.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 77,
            "return": [
                "_TUndefinedType@@UndefinedType@@"
            ],
            "arguments": {
                "self": [
                    "_TUndefinedType@@UndefinedType@@"
                ],
                "_": []
            }
        },
        "FieldInfo.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "FieldInfo.__repr_args__": {
            "name": "__repr_args__",
            "location": 175,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.get_constraints": {
            "name": "get_constraints",
            "location": 185,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.update_from_config": {
            "name": "update_from_config",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_config": []
            }
        },
        "FieldInfo._validate": {
            "name": "_validate",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.get_default": {
            "name": "get_default",
            "location": 423,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._get_field_info": {
            "name": "_get_field_info",
            "location": 427,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "field_name": [],
                "annotation": [],
                "value": [],
                "config": []
            }
        },
        "ModelField.infer": {
            "name": "infer",
            "location": 471,
            "return": [
                "_TModelField@@ModelField@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModelField]"
                ]
            }
        },
        "ModelField.set_config": {
            "name": "set_config",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "ModelField.alt_alias": {
            "name": "alt_alias",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelField.prepare": {
            "name": "prepare",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._set_default_and_type": {
            "name": "_set_default_and_type",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._type_analysis": {
            "name": "_type_analysis",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.prepare_discriminated_union_sub_fields": {
            "name": "prepare_discriminated_union_sub_fields",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._create_sub_type": {
            "name": "_create_sub_type",
            "location": 761,
            "return": [
                "_TModelField@@ModelField@@"
            ],
            "arguments": {
                "self": [
                    "_TModelField@@ModelField@@"
                ],
                "type_": [],
                "name": []
            }
        },
        "ModelField.populate_validators": {
            "name": "populate_validators",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.validate": {
            "name": "validate",
            "location": 825,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "v": [],
                "values": []
            }
        },
        "ModelField._validate_sequence_like": {
            "name": "_validate_sequence_like",
            "location": 874,
            "return": [
                "Tuple[(Union[(frozenset, list, listiterator, set, tuple, collections.deque, _T0)], Optional[Union[(list, pydantic.error_wrappers.ErrorWrapper)]])]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0@@"
                ],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._validate_iterable": {
            "name": "_validate_iterable",
            "location": 931,
            "return": [
                "Tuple[(Any, Optional[pydantic.error_wrappers.ErrorWrapper])]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0@@"
                ],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._validate_tuple": {
            "name": "_validate_tuple",
            "location": 946,
            "return": [
                "Tuple[(Union[(tuple, _T0)], Optional[Union[(list, pydantic.error_wrappers.ErrorWrapper)]])]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0@@"
                ],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._validate_mapping_like": {
            "name": "_validate_mapping_like",
            "location": 976,
            "return": [
                "Tuple[(Any, Optional[Union[(list, pydantic.error_wrappers.ErrorWrapper)]])]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "_T0@@"
                ],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._get_mapping_value": {
            "name": "_get_mapping_value",
            "location": 1011,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "original": [],
                "converted": []
            }
        },
        "ModelField._validate_singleton": {
            "name": "_validate_singleton",
            "location": 1029,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "v": [],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._validate_discriminated_union": {
            "name": "_validate_discriminated_union",
            "location": 1076,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "v": [],
                "values": [],
                "loc": [],
                "cls": []
            }
        },
        "ModelField._apply_validators": {
            "name": "_apply_validators",
            "location": 1116,
            "return": [
                "Tuple[(Any, Optional[pydantic.error_wrappers.ErrorWrapper])]"
            ],
            "arguments": {
                "self": [],
                "v": [],
                "values": [],
                "loc": [],
                "cls": [],
                "validators": []
            }
        },
        "ModelField.is_complex": {
            "name": "is_complex",
            "location": 1126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField._type_display": {
            "name": "_type_display",
            "location": 1138,
            "return": [
                "pydantic.utils.PyObjectStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelField.__repr_args__": {
            "name": "__repr_args__",
            "location": 1157,
            "return": [
                "List[Tuple[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelPrivateAttr.__init__": {
            "name": "__init__",
            "location": 1174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "ModelPrivateAttr.get_default": {
            "name": "get_default",
            "location": 1178,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelPrivateAttr.__eq__": {
            "name": "__eq__",
            "location": 1181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pydantic-master/pydantic/generics.py": {
        "replace_types": {
            "name": "replace_types",
            "location": 222,
            "return": [],
            "arguments": {
                "type_": [],
                "type_map": []
            }
        },
        "check_parameters_count": {
            "name": "check_parameters_count",
            "location": 293,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": []
            }
        },
        "iter_contained_typevars": {
            "name": "iter_contained_typevars",
            "location": 304,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "get_caller_frame_info": {
            "name": "get_caller_frame_info",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "_prepare_model_fields": {
            "name": "_prepare_model_fields",
            "location": 337,
            "return": [],
            "arguments": {
                "created_model": [],
                "fields": [],
                "instance_type_hints": [],
                "typevars_map": []
            }
        },
        "GenericModel.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "GenericModel.__concrete_name__": {
            "name": "__concrete_name__",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "GenericModel.__parameterized_bases__": {
            "name": "__parameterized_bases__",
            "location": 158,
            "return": [],
            "arguments": {
                "cls": [],
                "typevars_map": []
            }
        },
        "GenericModel.__parameterized_bases__.build_base_model": {
            "name": "build_base_model",
            "location": 181,
            "return": [],
            "arguments": {
                "base_model": [],
                "mapped_types": []
            }
        }
    },
    "pydantic-master/pydantic/json.py": {
        "isoformat": {
            "name": "isoformat",
            "location": 19,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "decimal_encoder": {
            "name": "decimal_encoder",
            "location": 23,
            "return": [],
            "arguments": {
                "dec_value": []
            }
        },
        "pydantic_encoder": {
            "name": "pydantic_encoder",
            "location": 72,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "custom_pydantic_encoder": {
            "name": "custom_pydantic_encoder",
            "location": 93,
            "return": [],
            "arguments": {
                "type_encoders": [],
                "obj": []
            }
        },
        "timedelta_isoformat": {
            "name": "timedelta_isoformat",
            "location": 106,
            "return": [],
            "arguments": {
                "td": []
            }
        }
    },
    "pydantic-master/pydantic/main.py": {
        "__dataclass_transform__": {
            "name": "__dataclass_transform__",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "validate_custom_root_type": {
            "name": "validate_custom_root_type",
            "location": 107,
            "return": [],
            "arguments": {
                "fields": []
            }
        },
        "generate_hash_function": {
            "name": "generate_hash_function",
            "location": 112,
            "return": [],
            "arguments": {
                "frozen": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 925,
            "return": [],
            "arguments": {
                "__model_name": []
            }
        },
        "validate_model": {
            "name": "validate_model",
            "location": 994,
            "return": [],
            "arguments": {
                "model": [],
                "input_data": [],
                "cls": []
            }
        },
        "generate_hash_function.hash_function": {
            "name": "hash_function",
            "location": 113,
            "return": [],
            "arguments": {
                "self_": []
            }
        },
        "ModelMetaclass.__new__": {
            "name": "__new__",
            "location": 133,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "ModelMetaclass.__instancecheck__": {
            "name": "__instancecheck__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "__pydantic_self__": []
            }
        },
        "BaseModel.__setattr__": {
            "name": "__setattr__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "BaseModel.__getstate__": {
            "name": "__getstate__",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__setstate__": {
            "name": "__setstate__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BaseModel._init_private_attributes": {
            "name": "_init_private_attributes",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.dict": {
            "name": "dict",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.json": {
            "name": "json",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._enforce_dict_if_root": {
            "name": "_enforce_dict_if_root",
            "location": 503,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "BaseModel.parse_obj": {
            "name": "parse_obj",
            "location": 513,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "BaseModel.parse_raw": {
            "name": "parse_raw",
            "location": 524,
            "return": [],
            "arguments": {
                "cls": [],
                "b": []
            }
        },
        "BaseModel.parse_file": {
            "name": "parse_file",
            "location": 547,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "BaseModel.from_orm": {
            "name": "from_orm",
            "location": 567,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "BaseModel.construct": {
            "name": "construct",
            "location": 581,
            "return": [],
            "arguments": {
                "cls": [],
                "_fields_set": []
            }
        },
        "BaseModel._copy_and_set_values": {
            "name": "_copy_and_set_values",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "fields_set": []
            }
        },
        "BaseModel.copy": {
            "name": "copy",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.schema": {
            "name": "schema",
            "location": 653,
            "return": [],
            "arguments": {
                "cls": [],
                "by_alias": [],
                "ref_template": []
            }
        },
        "BaseModel.schema_json": {
            "name": "schema_json",
            "location": 662,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.__get_validators__": {
            "name": "__get_validators__",
            "location": 672,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.validate": {
            "name": "validate",
            "location": 676,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "BaseModel._decompose_class": {
            "name": "_decompose_class",
            "location": 697,
            "return": [],
            "arguments": {
                "cls": [],
                "obj": []
            }
        },
        "BaseModel._get_value": {
            "name": "_get_value",
            "location": 704,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "to_dict": [],
                "by_alias": [],
                "include": [],
                "exclude": [],
                "exclude_unset": [],
                "exclude_defaults": [],
                "exclude_none": []
            }
        },
        "BaseModel.__try_update_forward_refs__": {
            "name": "__try_update_forward_refs__",
            "location": 778,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.update_forward_refs": {
            "name": "update_forward_refs",
            "location": 786,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.__iter__": {
            "name": "__iter__",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._iter": {
            "name": "_iter",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "to_dict": [],
                "by_alias": [],
                "include": [],
                "exclude": [],
                "exclude_unset": [],
                "exclude_defaults": [],
                "exclude_none": []
            }
        },
        "BaseModel._calculate_keys": {
            "name": "_calculate_keys",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "include": [],
                "exclude": [],
                "exclude_unset": [],
                "update": []
            }
        },
        "BaseModel.__eq__": {
            "name": "__eq__",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseModel.__repr_args__": {
            "name": "__repr_args__",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaclass.__new__.is_untouched": {
            "name": "is_untouched",
            "location": 184,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "pydantic-master/pydantic/mypy.py": {
        "plugin": {
            "name": "plugin",
            "location": 74,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "from_orm_callback": {
            "name": "from_orm_callback",
            "location": 139,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "error_from_orm": {
            "name": "error_from_orm",
            "location": 593,
            "return": [],
            "arguments": {
                "model_name": [],
                "api": [],
                "context": []
            }
        },
        "error_invalid_config_value": {
            "name": "error_invalid_config_value",
            "location": 597,
            "return": [],
            "arguments": {
                "name": [],
                "api": [],
                "context": []
            }
        },
        "error_required_dynamic_aliases": {
            "name": "error_required_dynamic_aliases",
            "location": 601,
            "return": [],
            "arguments": {
                "api": [],
                "context": []
            }
        },
        "error_unexpected_behavior": {
            "name": "error_unexpected_behavior",
            "location": 605,
            "return": [],
            "arguments": {
                "detail": [],
                "api": [],
                "context": []
            }
        },
        "error_untyped_fields": {
            "name": "error_untyped_fields",
            "location": 613,
            "return": [],
            "arguments": {
                "api": [],
                "context": []
            }
        },
        "add_method": {
            "name": "add_method",
            "location": 617,
            "return": [],
            "arguments": {
                "ctx": [],
                "name": [],
                "args": [],
                "return_type": [],
                "self_type": [],
                "tvar_def": [],
                "is_classmethod": [],
                "is_new": []
            }
        },
        "get_fullname": {
            "name": "get_fullname",
            "location": 700,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 710,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "parse_toml": {
            "name": "parse_toml",
            "location": 720,
            "return": [],
            "arguments": {
                "config_file": []
            }
        },
        "PydanticPlugin.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "PydanticPlugin.get_base_class_hook": {
            "name": "get_base_class_hook",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "PydanticPlugin.get_method_hook": {
            "name": "get_method_hook",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "PydanticPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "PydanticPlugin._pydantic_model_class_maker_callback": {
            "name": "_pydantic_model_class_maker_callback",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "PydanticPluginConfig.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "PydanticModelTransformer.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "plugin_config": []
            }
        },
        "PydanticModelTransformer.transform": {
            "name": "transform",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PydanticModelTransformer.collect_config": {
            "name": "collect_config",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PydanticModelTransformer.collect_fields": {
            "name": "collect_fields",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "model_config": []
            }
        },
        "PydanticModelTransformer.add_initializer": {
            "name": "add_initializer",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [],
                "config": [],
                "is_settings": []
            }
        },
        "PydanticModelTransformer.add_construct_method": {
            "name": "add_construct_method",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "PydanticModelTransformer.set_frozen": {
            "name": "set_frozen",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [],
                "frozen": []
            }
        },
        "PydanticModelTransformer.get_config_update": {
            "name": "get_config_update",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "substmt": []
            }
        },
        "PydanticModelTransformer.get_is_required": {
            "name": "get_is_required",
            "location": 424,
            "return": [],
            "arguments": {
                "cls": [],
                "stmt": [],
                "lhs": []
            }
        },
        "PydanticModelTransformer.get_alias_info": {
            "name": "get_alias_info",
            "location": 444,
            "return": [],
            "arguments": {
                "stmt": []
            }
        },
        "PydanticModelTransformer.get_field_arguments": {
            "name": "get_field_arguments",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [],
                "typed": [],
                "force_all_optional": [],
                "use_alias": []
            }
        },
        "PydanticModelTransformer.should_init_forbid_extra": {
            "name": "should_init_forbid_extra",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "fields": [],
                "config": []
            }
        },
        "PydanticModelTransformer.is_dynamic_alias_present": {
            "name": "is_dynamic_alias_present",
            "location": 503,
            "return": [],
            "arguments": {
                "fields": [],
                "has_alias_generator": []
            }
        },
        "PydanticModelField.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "is_required": [],
                "alias": [],
                "has_dynamic_alias": [],
                "line": [],
                "column": []
            }
        },
        "PydanticModelField.to_var": {
            "name": "to_var",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "info": [],
                "use_alias": []
            }
        },
        "PydanticModelField.to_argument": {
            "name": "to_argument",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "info": [],
                "typed": [],
                "force_optional": [],
                "use_alias": []
            }
        },
        "PydanticModelField.serialize": {
            "name": "serialize",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PydanticModelField.deserialize": {
            "name": "deserialize",
            "location": 551,
            "return": [],
            "arguments": {
                "cls": [],
                "info": [],
                "data": []
            }
        },
        "ModelConfigData.__init__": {
            "name": "__init__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "forbid_extra": [],
                "allow_mutation": [],
                "frozen": [],
                "orm_mode": [],
                "allow_population_by_field_name": [],
                "has_alias_generator": []
            }
        },
        "ModelConfigData.set_values_dict": {
            "name": "set_values_dict",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelConfigData.update": {
            "name": "update",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "ModelConfigData.setdefault": {
            "name": "setdefault",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "pydantic-master/pydantic/networks.py": {
        "url_regex": {
            "name": "url_regex",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "ascii_domain_regex": {
            "name": "ascii_domain_regex",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "int_domain_regex": {
            "name": "int_domain_regex",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "stricturl": {
            "name": "stricturl",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "import_email_validator": {
            "name": "import_email_validator",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "validate_email": {
            "name": "validate_email",
            "location": 550,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "AnyUrl.__new__": {
            "name": "__new__",
            "location": 139,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "AnyUrl.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "AnyUrl.build": {
            "name": "build",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AnyUrl.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 214,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "AnyUrl.__get_validators__": {
            "name": "__get_validators__",
            "location": 218,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AnyUrl.validate": {
            "name": "validate",
            "location": 222,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "field": [],
                "config": []
            }
        },
        "AnyUrl.validate_parts": {
            "name": "validate_parts",
            "location": 258,
            "return": [],
            "arguments": {
                "cls": [],
                "parts": []
            }
        },
        "AnyUrl.validate_host": {
            "name": "validate_host",
            "location": 281,
            "return": [],
            "arguments": {
                "cls": [],
                "parts": []
            }
        },
        "AnyUrl.get_default_parts": {
            "name": "get_default_parts",
            "location": 323,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "AnyUrl.apply_default_parts": {
            "name": "apply_default_parts",
            "location": 327,
            "return": [],
            "arguments": {
                "cls": [],
                "parts": []
            }
        },
        "AnyUrl.__repr__": {
            "name": "__repr__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HttpUrl.get_default_parts": {
            "name": "get_default_parts",
            "location": 349,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "RedisDsn.get_default_parts": {
            "name": "get_default_parts",
            "location": 382,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "KafkaDsn.get_default_parts": {
            "name": "get_default_parts",
            "location": 394,
            "return": [],
            "arguments": {
                "parts": []
            }
        },
        "EmailStr.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 432,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "EmailStr.__get_validators__": {
            "name": "__get_validators__",
            "location": 436,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EmailStr.validate": {
            "name": "validate",
            "location": 444,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "NameEmail.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "email": []
            }
        },
        "NameEmail.__eq__": {
            "name": "__eq__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NameEmail.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 459,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "NameEmail.__get_validators__": {
            "name": "__get_validators__",
            "location": 463,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "NameEmail.validate": {
            "name": "validate",
            "location": 469,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "NameEmail.__str__": {
            "name": "__str__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IPvAnyAddress.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 481,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "IPvAnyAddress.__get_validators__": {
            "name": "__get_validators__",
            "location": 485,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "IPvAnyAddress.validate": {
            "name": "validate",
            "location": 489,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "IPvAnyInterface.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 503,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "IPvAnyInterface.__get_validators__": {
            "name": "__get_validators__",
            "location": 507,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "IPvAnyInterface.validate": {
            "name": "validate",
            "location": 511,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "IPvAnyNetwork.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 525,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "IPvAnyNetwork.__get_validators__": {
            "name": "__get_validators__",
            "location": 529,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "IPvAnyNetwork.validate": {
            "name": "validate",
            "location": 533,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        }
    },
    "pydantic-master/pydantic/parse.py": {
        "load_str_bytes": {
            "name": "load_str_bytes",
            "location": 15,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 47,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "pydantic-master/pydantic/schema.py": {
        "_apply_modify_schema": {
            "name": "_apply_modify_schema",
            "location": 93,
            "return": [],
            "arguments": {
                "modify_schema": [],
                "field": [],
                "field_schema": []
            }
        },
        "schema": {
            "name": "schema",
            "location": 106,
            "return": [],
            "arguments": {
                "models": []
            }
        },
        "model_schema": {
            "name": "model_schema",
            "location": 159,
            "return": [],
            "arguments": {
                "model": [],
                "by_alias": [],
                "ref_prefix": [],
                "ref_template": []
            }
        },
        "get_field_info_schema": {
            "name": "get_field_info_schema",
            "location": 197,
            "return": [],
            "arguments": {
                "field": [],
                "schema_overrides": []
            }
        },
        "field_schema": {
            "name": "field_schema",
            "location": 225,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "get_field_schema_validations": {
            "name": "get_field_schema_validations",
            "location": 292,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "get_model_name_map": {
            "name": "get_model_name_map",
            "location": 325,
            "return": [],
            "arguments": {
                "unique_models": []
            }
        },
        "get_flat_models_from_model": {
            "name": "get_flat_models_from_model",
            "location": 352,
            "return": [],
            "arguments": {
                "model": [],
                "known_models": []
            }
        },
        "get_flat_models_from_field": {
            "name": "get_flat_models_from_field",
            "location": 372,
            "return": [],
            "arguments": {
                "field": [],
                "known_models": []
            }
        },
        "get_flat_models_from_fields": {
            "name": "get_flat_models_from_fields",
            "location": 407,
            "return": [],
            "arguments": {
                "fields": [],
                "known_models": []
            }
        },
        "get_flat_models_from_models": {
            "name": "get_flat_models_from_models",
            "location": 425,
            "return": [],
            "arguments": {
                "models": []
            }
        },
        "get_long_model_name": {
            "name": "get_long_model_name",
            "location": 437,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "field_type_schema": {
            "name": "field_type_schema",
            "location": 441,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "model_process_schema": {
            "name": "model_process_schema",
            "location": 560,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "model_type_schema": {
            "name": "model_type_schema",
            "location": 610,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "enum_process_schema": {
            "name": "enum_process_schema",
            "location": 664,
            "return": [],
            "arguments": {
                "enum": []
            }
        },
        "field_singleton_sub_fields_schema": {
            "name": "field_singleton_sub_fields_schema",
            "location": 690,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "add_field_type_to_schema": {
            "name": "add_field_type_to_schema",
            "location": 810,
            "return": [],
            "arguments": {
                "field_type": [],
                "schema_": []
            }
        },
        "get_schema_ref": {
            "name": "get_schema_ref",
            "location": 824,
            "return": [],
            "arguments": {
                "name": [],
                "ref_prefix": [],
                "ref_template": [],
                "schema_overrides": []
            }
        },
        "field_singleton_schema": {
            "name": "field_singleton_schema",
            "location": 832,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "multitypes_literal_field_for_schema": {
            "name": "multitypes_literal_field_for_schema",
            "location": 960,
            "return": [],
            "arguments": {
                "values": [],
                "field": []
            }
        },
        "encode_default": {
            "name": "encode_default",
            "location": 982,
            "return": [],
            "arguments": {
                "dft": []
            }
        },
        "get_annotation_from_field_info": {
            "name": "get_annotation_from_field_info",
            "location": 1002,
            "return": [],
            "arguments": {
                "annotation": [],
                "field_info": [],
                "field_name": [],
                "validate_assignment": []
            }
        },
        "get_annotation_with_constraints": {
            "name": "get_annotation_with_constraints",
            "location": 1031,
            "return": [],
            "arguments": {
                "annotation": [],
                "field_info": []
            }
        },
        "normalize_name": {
            "name": "normalize_name",
            "location": 1137,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "get_annotation_with_constraints.go": {
            "name": "go",
            "location": 1041,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "SkipField.__init__": {
            "name": "__init__",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "get_annotation_with_constraints.go.constraint_func": {
            "name": "constraint_func",
            "location": 1094,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/pydantic/tools.py": {
        "_generate_parsing_type_name": {
            "name": "_generate_parsing_type_name",
            "location": 18,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "_get_parsing_type": {
            "name": "_get_parsing_type",
            "location": 23,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "parse_obj_as": {
            "name": "parse_obj_as",
            "location": 36,
            "return": [],
            "arguments": {
                "type_": [],
                "obj": []
            }
        },
        "parse_file_as": {
            "name": "parse_file_as",
            "location": 41,
            "return": [],
            "arguments": {
                "type_": [],
                "path": []
            }
        },
        "parse_raw_as": {
            "name": "parse_raw_as",
            "location": 63,
            "return": [],
            "arguments": {
                "type_": [],
                "b": []
            }
        },
        "schema_of": {
            "name": "schema_of",
            "location": 85,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "schema_json_of": {
            "name": "schema_json_of",
            "location": 90,
            "return": [],
            "arguments": {
                "type_": []
            }
        }
    },
    "pydantic-master/pydantic/types.py": {
        "_registered": {
            "name": "_registered",
            "location": 136,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "conint": {
            "name": "conint",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "confloat": {
            "name": "confloat",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "conbytes": {
            "name": "conbytes",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "constr": {
            "name": "constr",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "conset": {
            "name": "conset",
            "location": 484,
            "return": [],
            "arguments": {
                "item_type": []
            }
        },
        "confrozenset": {
            "name": "confrozenset",
            "location": 526,
            "return": [],
            "arguments": {
                "item_type": []
            }
        },
        "conlist": {
            "name": "conlist",
            "location": 581,
            "return": [],
            "arguments": {
                "item_type": []
            }
        },
        "condecimal": {
            "name": "condecimal",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "ConstrainedNumberMeta.__new__": {
            "name": "__new__",
            "location": 148,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "ConstrainedInt.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 201,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedInt.__get_validators__": {
            "name": "__get_validators__",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedFloat.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 262,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedFloat.__get_validators__": {
            "name": "__get_validators__",
            "location": 282,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedBytes.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 337,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedBytes.__get_validators__": {
            "name": "__get_validators__",
            "location": 341,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedStr.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 388,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedStr.__get_validators__": {
            "name": "__get_validators__",
            "location": 397,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedStr.validate": {
            "name": "validate",
            "location": 405,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "ConstrainedSet.__get_validators__": {
            "name": "__get_validators__",
            "location": 460,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedSet.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 464,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedSet.set_length_validator": {
            "name": "set_length_validator",
            "location": 468,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ConstrainedFrozenSet.__get_validators__": {
            "name": "__get_validators__",
            "location": 502,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedFrozenSet.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 506,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedFrozenSet.frozenset_length_validator": {
            "name": "frozenset_length_validator",
            "location": 510,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ConstrainedList.__get_validators__": {
            "name": "__get_validators__",
            "location": 547,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedList.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 553,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedList.list_length_validator": {
            "name": "list_length_validator",
            "location": 557,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ConstrainedList.unique_items_validator": {
            "name": "unique_items_validator",
            "location": 573,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ConstrainedDecimal.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 635,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "ConstrainedDecimal.__get_validators__": {
            "name": "__get_validators__",
            "location": 646,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ConstrainedDecimal.validate": {
            "name": "validate",
            "location": 653,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "JsonMeta.__getitem__": {
            "name": "__getitem__",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SecretStr.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 806,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "SecretStr.__get_validators__": {
            "name": "__get_validators__",
            "location": 817,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretStr.validate": {
            "name": "validate",
            "location": 822,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "SecretStr.__init__": {
            "name": "__init__",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SecretStr.__repr__": {
            "name": "__repr__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretStr.__str__": {
            "name": "__str__",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretStr.__eq__": {
            "name": "__eq__",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SecretStr.__len__": {
            "name": "__len__",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretStr.display": {
            "name": "display",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretStr.get_secret_value": {
            "name": "get_secret_value",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretBytes.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 856,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "SecretBytes.__get_validators__": {
            "name": "__get_validators__",
            "location": 867,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretBytes.validate": {
            "name": "validate",
            "location": 872,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "SecretBytes.__init__": {
            "name": "__init__",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SecretBytes.__repr__": {
            "name": "__repr__",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretBytes.__str__": {
            "name": "__str__",
            "location": 884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretBytes.__eq__": {
            "name": "__eq__",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SecretBytes.__len__": {
            "name": "__len__",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretBytes.display": {
            "name": "display",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretBytes.get_secret_value": {
            "name": "get_secret_value",
            "location": 897,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentCardBrand.__str__": {
            "name": "__str__",
            "location": 912,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentCardNumber.__init__": {
            "name": "__init__",
            "location": 928,
            "return": [],
            "arguments": {
                "self": [],
                "card_number": []
            }
        },
        "PaymentCardNumber.__get_validators__": {
            "name": "__get_validators__",
            "location": 934,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PaymentCardNumber.masked": {
            "name": "masked",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaymentCardNumber.validate_digits": {
            "name": "validate_digits",
            "location": 949,
            "return": [],
            "arguments": {
                "cls": [],
                "card_number": []
            }
        },
        "PaymentCardNumber.validate_luhn_check_digit": {
            "name": "validate_luhn_check_digit",
            "location": 955,
            "return": [],
            "arguments": {
                "cls": [],
                "card_number": []
            }
        },
        "PaymentCardNumber.validate_length_for_brand": {
            "name": "validate_length_for_brand",
            "location": 975,
            "return": [],
            "arguments": {
                "cls": [],
                "card_number": []
            }
        },
        "PaymentCardNumber._get_brand": {
            "name": "_get_brand",
            "location": 997,
            "return": [],
            "arguments": {
                "card_number": []
            }
        },
        "ByteSize.__get_validators__": {
            "name": "__get_validators__",
            "location": 1032,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ByteSize.validate": {
            "name": "validate",
            "location": 1036,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "ByteSize.human_readable": {
            "name": "human_readable",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": [],
                "decimal": []
            }
        },
        "ByteSize.to": {
            "name": "to",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": [],
                "unit": []
            }
        },
        "StrictBool.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "StrictBool.__get_validators__": {
            "name": "__get_validators__",
            "location": 175,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "StrictBool.validate": {
            "name": "validate",
            "location": 179,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "PyObject.__get_validators__": {
            "name": "__get_validators__",
            "location": 603,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PyObject.validate": {
            "name": "validate",
            "location": 607,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "UUID1.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 719,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "FilePath.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 741,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "FilePath.__get_validators__": {
            "name": "__get_validators__",
            "location": 745,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FilePath.validate": {
            "name": "validate",
            "location": 751,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "DirectoryPath.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 759,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "DirectoryPath.__get_validators__": {
            "name": "__get_validators__",
            "location": 763,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DirectoryPath.validate": {
            "name": "validate",
            "location": 769,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Json.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 794,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "PastDate.__get_validators__": {
            "name": "__get_validators__",
            "location": 1096,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PastDate.validate": {
            "name": "validate",
            "location": 1101,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "FutureDate.__get_validators__": {
            "name": "__get_validators__",
            "location": 1109,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FutureDate.validate": {
            "name": "validate",
            "location": 1114,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        }
    },
    "pydantic-master/pydantic/typing.py": {
        "display_as_type": {
            "name": "display_as_type",
            "location": 334,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "resolve_annotations": {
            "name": "resolve_annotations",
            "location": 352,
            "return": [],
            "arguments": {
                "raw_annotations": [],
                "module_name": []
            }
        },
        "is_callable_type": {
            "name": "is_callable_type",
            "location": 384,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "is_literal_type": {
            "name": "is_literal_type",
            "location": 388,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "literal_values": {
            "name": "literal_values",
            "location": 392,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "all_literal_values": {
            "name": "all_literal_values",
            "location": 396,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 409,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "is_typeddict": {
            "name": "is_typeddict",
            "location": 419,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "is_new_type": {
            "name": "is_new_type",
            "location": 432,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "new_type_supertype": {
            "name": "new_type_supertype",
            "location": 439,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "_check_classvar": {
            "name": "_check_classvar",
            "location": 445,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "is_classvar": {
            "name": "is_classvar",
            "location": 452,
            "return": [],
            "arguments": {
                "ann_type": []
            }
        },
        "update_field_forward_refs": {
            "name": "update_field_forward_refs",
            "location": 464,
            "return": [],
            "arguments": {
                "field": [],
                "globalns": [],
                "localns": []
            }
        },
        "update_model_forward_refs": {
            "name": "update_model_forward_refs",
            "location": 480,
            "return": [],
            "arguments": {
                "model": [],
                "fields": [],
                "json_encoders": [],
                "localns": [],
                "exc_to_suppress": []
            }
        },
        "get_class": {
            "name": "get_class",
            "location": 519,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "get_sub_types": {
            "name": "get_sub_types",
            "location": 534,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "evaluate_forwardref": {
            "name": "evaluate_forwardref",
            "location": 55,
            "return": [],
            "arguments": {
                "type_": [],
                "globalns": [],
                "localns": []
            }
        },
        "get_all_type_hints": {
            "name": "get_all_type_hints",
            "location": 69,
            "return": [],
            "arguments": {
                "obj": [],
                "globalns": [],
                "localns": []
            }
        },
        "get_origin": {
            "name": "get_origin",
            "location": 93,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 137,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "_generic_get_args": {
            "name": "_generic_get_args",
            "location": 126,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "convert_generics": {
            "name": "convert_generics",
            "location": 170,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 222,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "is_none_type": {
            "name": "is_none_type",
            "location": 327,
            "return": [],
            "arguments": {
                "type_": []
            }
        }
    },
    "pydantic-master/pydantic/utils.py": {
        "import_string": {
            "name": "import_string",
            "location": 117,
            "return": [],
            "arguments": {
                "dotted_path": []
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 136,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "sequence_like": {
            "name": "sequence_like",
            "location": 153,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "validate_field_name": {
            "name": "validate_field_name",
            "location": 157,
            "return": [],
            "arguments": {
                "bases": [],
                "field_name": []
            }
        },
        "lenient_isinstance": {
            "name": "lenient_isinstance",
            "location": 169,
            "return": [],
            "arguments": {
                "o": [],
                "class_or_tuple": []
            }
        },
        "lenient_issubclass": {
            "name": "lenient_issubclass",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": [],
                "class_or_tuple": []
            }
        },
        "in_ipython": {
            "name": "in_ipython",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "deep_update": {
            "name": "deep_update",
            "location": 200,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "update_not_none": {
            "name": "update_not_none",
            "location": 211,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "almost_equal_floats": {
            "name": "almost_equal_floats",
            "location": 215,
            "return": [],
            "arguments": {
                "value_1": [],
                "value_2": []
            }
        },
        "generate_model_signature": {
            "name": "generate_model_signature",
            "location": 222,
            "return": [],
            "arguments": {
                "init": [],
                "fields": [],
                "config": []
            }
        },
        "get_model": {
            "name": "get_model",
            "location": 287,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "to_camel": {
            "name": "to_camel",
            "location": 300,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "unique_list": {
            "name": "unique_list",
            "location": 307,
            "return": [],
            "arguments": {
                "input_list": []
            }
        },
        "path_type": {
            "name": "path_type",
            "location": 629,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "smart_deepcopy": {
            "name": "smart_deepcopy",
            "location": 644,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_valid_field": {
            "name": "is_valid_field",
            "location": 660,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "is_valid_private_name": {
            "name": "is_valid_private_name",
            "location": 666,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "all_identical": {
            "name": "all_identical",
            "location": 680,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "get_unique_discriminator_alias": {
            "name": "get_unique_discriminator_alias",
            "location": 696,
            "return": [],
            "arguments": {
                "all_aliases": [],
                "discriminator_key": []
            }
        },
        "get_discriminator_alias_and_values": {
            "name": "get_discriminator_alias_and_values",
            "location": 706,
            "return": [],
            "arguments": {
                "tp": [],
                "discriminator_key": []
            }
        },
        "_get_union_alias_and_all_values": {
            "name": "_get_union_alias_and_all_values",
            "location": 747,
            "return": [],
            "arguments": {
                "union_type": [],
                "discriminator_key": []
            }
        },
        "PyObjectStr.__repr__": {
            "name": "__repr__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Representation.__repr_args__": {
            "name": "__repr_args__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Representation.__repr_name__": {
            "name": "__repr_name__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Representation.__repr_str__": {
            "name": "__repr_str__",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "join_str": []
            }
        },
        "Representation.__pretty__": {
            "name": "__pretty__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "Representation.__str__": {
            "name": "__str__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Representation.__repr__": {
            "name": "__repr__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "GetterDict.__getitem__": {
            "name": "__getitem__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GetterDict.get": {
            "name": "get",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "GetterDict.extra_keys": {
            "name": "extra_keys",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.keys": {
            "name": "keys",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.values": {
            "name": "values",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.items": {
            "name": "items",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.__iter__": {
            "name": "__iter__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.__len__": {
            "name": "__len__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.__contains__": {
            "name": "__contains__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "GetterDict.__eq__": {
            "name": "__eq__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GetterDict.__repr_args__": {
            "name": "__repr_args__",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetterDict.__repr_name__": {
            "name": "__repr_name__",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueItems.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "items": []
            }
        },
        "ValueItems.is_excluded": {
            "name": "is_excluded",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ValueItems.is_included": {
            "name": "is_included",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ValueItems.for_element": {
            "name": "for_element",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ValueItems._normalize_indexes": {
            "name": "_normalize_indexes",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "v_length": []
            }
        },
        "ValueItems.merge": {
            "name": "merge",
            "location": 534,
            "return": [],
            "arguments": {
                "cls": [],
                "base": [],
                "override": [],
                "intersect": []
            }
        },
        "ValueItems._coerce_items": {
            "name": "_coerce_items",
            "location": 573,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "ValueItems._coerce_value": {
            "name": "_coerce_value",
            "location": 584,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "ValueItems.is_true": {
            "name": "is_true",
            "location": 590,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ValueItems.__repr_args__": {
            "name": "__repr_args__",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassAttribute.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "ClassAttribute.__get__": {
            "name": "__get__",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "LimitedDict.__init__": {
            "name": "__init__",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "size_limit": []
            }
        },
        "LimitedDict.__setitem__": {
            "name": "__setitem__",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "__key": [],
                "__value": []
            }
        },
        "LimitedDict.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 787,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pydantic-master/pydantic/validators.py": {
        "str_validator": {
            "name": "str_validator",
            "location": 58,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "strict_str_validator": {
            "name": "strict_str_validator",
            "location": 73,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "bytes_validator": {
            "name": "bytes_validator",
            "location": 79,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "strict_bytes_validator": {
            "name": "strict_bytes_validator",
            "location": 92,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "bool_validator": {
            "name": "bool_validator",
            "location": 105,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "int_validator": {
            "name": "int_validator",
            "location": 122,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "strict_int_validator": {
            "name": "strict_int_validator",
            "location": 132,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "float_validator": {
            "name": "float_validator",
            "location": 138,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "strict_float_validator": {
            "name": "strict_float_validator",
            "location": 148,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "number_multiple_validator": {
            "name": "number_multiple_validator",
            "location": 154,
            "return": [],
            "arguments": {
                "v": [],
                "field": []
            }
        },
        "number_size_validator": {
            "name": "number_size_validator",
            "location": 163,
            "return": [],
            "arguments": {
                "v": [],
                "field": []
            }
        },
        "constant_validator": {
            "name": "constant_validator",
            "location": 178,
            "return": [],
            "arguments": {
                "v": [],
                "field": []
            }
        },
        "anystr_length_validator": {
            "name": "anystr_length_validator",
            "location": 191,
            "return": [],
            "arguments": {
                "v": [],
                "config": []
            }
        },
        "anystr_strip_whitespace": {
            "name": "anystr_strip_whitespace",
            "location": 205,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "anystr_lower": {
            "name": "anystr_lower",
            "location": 209,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ordered_dict_validator": {
            "name": "ordered_dict_validator",
            "location": 213,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "dict_validator": {
            "name": "dict_validator",
            "location": 223,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "list_validator": {
            "name": "list_validator",
            "location": 233,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "tuple_validator": {
            "name": "tuple_validator",
            "location": 242,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "set_validator": {
            "name": "set_validator",
            "location": 251,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "frozenset_validator": {
            "name": "frozenset_validator",
            "location": 260,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "deque_validator": {
            "name": "deque_validator",
            "location": 269,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "enum_member_validator": {
            "name": "enum_member_validator",
            "location": 278,
            "return": [],
            "arguments": {
                "v": [],
                "field": [],
                "config": []
            }
        },
        "uuid_validator": {
            "name": "uuid_validator",
            "location": 287,
            "return": [],
            "arguments": {
                "v": [],
                "field": []
            }
        },
        "decimal_validator": {
            "name": "decimal_validator",
            "location": 311,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "hashable_validator": {
            "name": "hashable_validator",
            "location": 330,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v4_address_validator": {
            "name": "ip_v4_address_validator",
            "location": 337,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v6_address_validator": {
            "name": "ip_v6_address_validator",
            "location": 347,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v4_network_validator": {
            "name": "ip_v4_network_validator",
            "location": 357,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v6_network_validator": {
            "name": "ip_v6_network_validator",
            "location": 373,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v4_interface_validator": {
            "name": "ip_v4_interface_validator",
            "location": 389,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ip_v6_interface_validator": {
            "name": "ip_v6_interface_validator",
            "location": 399,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "path_validator": {
            "name": "path_validator",
            "location": 409,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "path_exists_validator": {
            "name": "path_exists_validator",
            "location": 419,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "callable_validator": {
            "name": "callable_validator",
            "location": 426,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "enum_validator": {
            "name": "enum_validator",
            "location": 438,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "int_enum_validator": {
            "name": "int_enum_validator",
            "location": 445,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "make_literal_validator": {
            "name": "make_literal_validator",
            "location": 452,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "constr_length_validator": {
            "name": "constr_length_validator",
            "location": 469,
            "return": [],
            "arguments": {
                "v": [],
                "field": [],
                "config": []
            }
        },
        "constr_strip_whitespace": {
            "name": "constr_strip_whitespace",
            "location": 483,
            "return": [],
            "arguments": {
                "v": [],
                "field": [],
                "config": []
            }
        },
        "constr_lower": {
            "name": "constr_lower",
            "location": 491,
            "return": [],
            "arguments": {
                "v": [],
                "field": [],
                "config": []
            }
        },
        "validate_json": {
            "name": "validate_json",
            "location": 498,
            "return": [],
            "arguments": {
                "v": [],
                "config": []
            }
        },
        "make_arbitrary_type_validator": {
            "name": "make_arbitrary_type_validator",
            "location": 513,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "make_class_validator": {
            "name": "make_class_validator",
            "location": 522,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "any_class_validator": {
            "name": "any_class_validator",
            "location": 531,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "none_validator": {
            "name": "none_validator",
            "location": 537,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "pattern_validator": {
            "name": "pattern_validator",
            "location": 543,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "make_namedtuple_validator": {
            "name": "make_namedtuple_validator",
            "location": 558,
            "return": [],
            "arguments": {
                "namedtuple_cls": []
            }
        },
        "make_typeddict_validator": {
            "name": "make_typeddict_validator",
            "location": 580,
            "return": [],
            "arguments": {
                "typeddict_cls": [],
                "config": []
            }
        },
        "find_validators": {
            "name": "find_validators",
            "location": 656,
            "return": [],
            "arguments": {
                "type_": [],
                "config": []
            }
        },
        "make_literal_validator.literal_validator": {
            "name": "literal_validator",
            "location": 460,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "make_arbitrary_type_validator.arbitrary_type_validator": {
            "name": "arbitrary_type_validator",
            "location": 514,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "make_class_validator.class_validator": {
            "name": "class_validator",
            "location": 523,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "make_namedtuple_validator.namedtuple_validator": {
            "name": "namedtuple_validator",
            "location": 567,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "make_typeddict_validator.typeddict_validator": {
            "name": "typeddict_validator",
            "location": 592,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "IfConfig.__init__": {
            "name": "__init__",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "validator": []
            }
        },
        "IfConfig.check": {
            "name": "check",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "pydantic-master/pydantic/version.py": {
        "version_info": {
            "name": "version_info",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/pydantic/_hypothesis_plugin.py": {
        "add_luhn_digit": {
            "name": "add_luhn_digit",
            "location": 120,
            "return": [],
            "arguments": {
                "card_number": []
            }
        },
        "_registered": {
            "name": "_registered",
            "location": 187,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "resolves": {
            "name": "resolves",
            "location": 201,
            "return": [],
            "arguments": {
                "typ": []
            }
        },
        "resolve_json": {
            "name": "resolve_json",
            "location": 216,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "resolve_conbytes": {
            "name": "resolve_conbytes",
            "location": 235,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "resolve_condecimal": {
            "name": "resolve_condecimal",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "resolve_confloat": {
            "name": "resolve_confloat",
            "location": 274,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "resolve_conint": {
            "name": "resolve_conint",
            "location": 306,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "resolve_constr": {
            "name": "resolve_constr",
            "location": 329,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "is_valid_email": {
            "name": "is_valid_email",
            "location": 56,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "resolves.inner": {
            "name": "inner",
            "location": 204,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "pydantic-master/pydantic/__init__.py": {},
    "pydantic-master/tests/check_tag.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [],
            "arguments": {
                "env_var": []
            }
        }
    },
    "pydantic-master/tests/conftest.py": {
        "_extract_source_code_from_function": {
            "name": "_extract_source_code_from_function",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "function": []
            }
        },
        "_create_module_file": {
            "name": "_create_module_file",
            "location": 37,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "code": [],
                "tmp_path": [],
                "name": []
            }
        },
        "env": {
            "name": "env",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "create_module": {
            "name": "create_module",
            "location": 67,
            "return": [],
            "arguments": {
                "tmp_path": [],
                "request": []
            }
        },
        "SetEnv.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEnv.set": {
            "name": "set",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "SetEnv.clear": {
            "name": "clear",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_module.run": {
            "name": "run",
            "location": 68,
            "return": [],
            "arguments": {
                "source_code_or_function": [],
                "rewrite_assertions": []
            }
        }
    },
    "pydantic-master/tests/test_abc.py": {
        "test_model_subclassing_abstract_base_classes": {
            "name": "test_model_subclassing_abstract_base_classes",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception": {
            "name": "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception.Model.my_abstract_method": {
            "name": "my_abstract_method",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception.Model.my_abstract_classmethod": {
            "name": "my_abstract_classmethod",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception.Model.my_abstract_staticmethod": {
            "name": "my_abstract_staticmethod",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_model_subclassing_abstract_base_classes_without_implementation_raises_exception.Model.my_abstract_property": {
            "name": "my_abstract_property",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        }
    },
    "pydantic-master/tests/test_aliases.py": {
        "test_alias_generator": {
            "name": "test_alias_generator",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator_with_field_schema": {
            "name": "test_alias_generator_with_field_schema",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator_wrong_type_error": {
            "name": "test_alias_generator_wrong_type_error",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_infer_alias": {
            "name": "test_infer_alias",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_alias_error": {
            "name": "test_alias_error",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_annotation_config": {
            "name": "test_annotation_config",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_alias_camel_case": {
            "name": "test_alias_camel_case",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_get_field_info_inherit": {
            "name": "test_get_field_info_inherit",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_pop_by_field_name": {
            "name": "test_pop_by_field_name",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_alias_child_precedence": {
            "name": "test_alias_child_precedence",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator_parent": {
            "name": "test_alias_generator_parent",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator_on_parent": {
            "name": "test_alias_generator_on_parent",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator_on_child": {
            "name": "test_alias_generator_on_child",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_low_priority_alias": {
            "name": "test_low_priority_alias",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "test_low_priority_alias_config": {
            "name": "test_low_priority_alias_config",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_field_vs_config": {
            "name": "test_field_vs_config",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "test_alias_priority": {
            "name": "test_alias_priority",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_alias_generator.to_camel": {
            "name": "to_camel",
            "location": 11,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "test_alias_generator_with_field_schema.to_upper_case": {
            "name": "to_upper_case",
            "location": 29,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "test_alias_generator_wrong_type_error.return_bytes": {
            "name": "return_bytes",
            "location": 48,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "test_alias_camel_case.Model.Config.get_field_info": {
            "name": "get_field_info",
            "location": 112,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "test_get_field_info_inherit.ModelOne.Config.get_field_info": {
            "name": "get_field_info",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "test_alias_generator_parent.Parent.Config.alias_generator": {
            "name": "alias_generator",
            "location": 189,
            "return": [],
            "arguments": {
                "cls": [],
                "f_name": []
            }
        },
        "test_alias_generator_parent.Child.Config.alias_generator": {
            "name": "alias_generator",
            "location": 197,
            "return": [],
            "arguments": {
                "cls": [],
                "f_name": []
            }
        },
        "test_alias_generator_on_parent.Parent.Config.alias_generator": {
            "name": "alias_generator",
            "location": 211,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_alias_generator_on_child.Child.Config.alias_generator": {
            "name": "alias_generator",
            "location": 236,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_low_priority_alias.Child.Config.alias_generator": {
            "name": "alias_generator",
            "location": 254,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_low_priority_alias_config.Child.Config.alias_generator": {
            "name": "alias_generator",
            "location": 275,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_alias_priority.Parent.Config.alias_generator": {
            "name": "alias_generator",
            "location": 310,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_alias_priority.Child.Config.alias_generator": {
            "name": "alias_generator",
            "location": 320,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "pydantic-master/tests/test_annotated.py": {
        "test_annotated": {
            "name": "test_annotated",
            "location": 38,
            "return": [],
            "arguments": {
                "hint_fn": [],
                "value": []
            }
        },
        "test_annotated_model_exceptions": {
            "name": "test_annotated_model_exceptions",
            "location": 78,
            "return": [],
            "arguments": {
                "hint_fn": [],
                "value": [],
                "subclass_ctx": []
            }
        },
        "test_annotated_instance_exceptions": {
            "name": "test_annotated_instance_exceptions",
            "location": 103,
            "return": [],
            "arguments": {
                "hint_fn": [],
                "value": [],
                "empty_init_ctx": []
            }
        },
        "test_field_reuse": {
            "name": "test_field_reuse",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info": {
            "name": "test_config_field_info",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_annotated_alias": {
            "name": "test_annotated_alias",
            "location": 139,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_annotated_types.py": {
        "test_namedtuple": {
            "name": "test_namedtuple",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_namedtuple_schema": {
            "name": "test_namedtuple_schema",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_namedtuple_right_length": {
            "name": "test_namedtuple_right_length",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_namedtuple_postponed_annotation": {
            "name": "test_namedtuple_postponed_annotation",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_typeddict": {
            "name": "test_typeddict",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_typeddict_non_total": {
            "name": "test_typeddict_non_total",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_partial_new_typeddict": {
            "name": "test_partial_new_typeddict",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_partial_legacy_typeddict": {
            "name": "test_partial_legacy_typeddict",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_typeddict_extra": {
            "name": "test_typeddict_extra",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_typeddict_schema": {
            "name": "test_typeddict_schema",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "test_typeddict_postponed_annotation": {
            "name": "test_typeddict_postponed_annotation",
            "location": 284,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_assert_in_validators.py": {
        "test_assert_raises_validation_error": {
            "name": "test_assert_raises_validation_error",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_assert_raises_validation_error.Model.check_a": {
            "name": "check_a",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/tests/test_callable.py": {
        "test_callable": {
            "name": "test_callable",
            "location": 16,
            "return": [],
            "arguments": {
                "annotation": []
            }
        },
        "test_non_callable": {
            "name": "test_non_callable",
            "location": 25,
            "return": [],
            "arguments": {
                "annotation": []
            }
        }
    },
    "pydantic-master/tests/test_color.py": {
        "test_color_success": {
            "name": "test_color_success",
            "location": 57,
            "return": [],
            "arguments": {
                "raw_color": [],
                "as_tuple": []
            }
        },
        "test_color_fail": {
            "name": "test_color_fail",
            "location": 95,
            "return": [],
            "arguments": {
                "color": []
            }
        },
        "test_model_validation": {
            "name": "test_model_validation",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_as_rgb": {
            "name": "test_as_rgb",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_as_rgb_tuple": {
            "name": "test_as_rgb_tuple",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_as_hsl": {
            "name": "test_as_hsl",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_as_hsl_tuple": {
            "name": "test_as_hsl_tuple",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_as_hex": {
            "name": "test_as_hex",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_as_named": {
            "name": "test_as_named",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_str_repr": {
            "name": "test_str_repr",
            "location": 182,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_construction.py": {
        "test_simple_construct": {
            "name": "test_simple_construct",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_construct_misuse": {
            "name": "test_construct_misuse",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_construct_fields_set": {
            "name": "test_construct_fields_set",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_construct_allow_extra": {
            "name": "test_construct_allow_extra",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_construct_keep_order": {
            "name": "test_construct_keep_order",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_large_any_str": {
            "name": "test_large_any_str",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_simple_copy": {
            "name": "test_simple_copy",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_deep_copy": {
            "name": "test_deep_copy",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_copy_exclude": {
            "name": "test_copy_exclude",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_copy_include": {
            "name": "test_copy_include",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_copy_include_exclude": {
            "name": "test_copy_include_exclude",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_copy_advanced_exclude": {
            "name": "test_copy_advanced_exclude",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_copy_advanced_include": {
            "name": "test_copy_advanced_include",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_copy_advanced_include_exclude": {
            "name": "test_copy_advanced_include_exclude",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "test_copy_update": {
            "name": "test_copy_update",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_copy_update_unset": {
            "name": "test_copy_update_unset",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_copy_set_fields": {
            "name": "test_copy_set_fields",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_simple_pickle": {
            "name": "test_simple_pickle",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_recursive_pickle": {
            "name": "test_recursive_pickle",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "test_pickle_undefined": {
            "name": "test_pickle_undefined",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_copy_undefined": {
            "name": "test_copy_undefined",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_immutable_copy_with_allow_mutation": {
            "name": "test_immutable_copy_with_allow_mutation",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "test_immutable_copy_with_frozen": {
            "name": "test_immutable_copy_with_frozen",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_pickle_fields_set": {
            "name": "test_pickle_fields_set",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_copy_update_exclude": {
            "name": "test_copy_update_exclude",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "test_shallow_copy_modify": {
            "name": "test_shallow_copy_modify",
            "location": 336,
            "return": [],
            "arguments": {}
        },
        "test_construct_default_factory": {
            "name": "test_construct_default_factory",
            "location": 354,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_create_model.py": {
        "test_create_model": {
            "name": "test_create_model",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_create_model_usage": {
            "name": "test_create_model_usage",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_create_model_pickle": {
            "name": "test_create_model_pickle",
            "location": 28,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_invalid_name": {
            "name": "test_invalid_name",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_field_wrong_tuple": {
            "name": "test_field_wrong_tuple",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_config_and_base": {
            "name": "test_config_and_base",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_inheritance": {
            "name": "test_inheritance",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_custom_config": {
            "name": "test_custom_config",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_custom_config_inherits": {
            "name": "test_custom_config_inherits",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_custom_config_extras": {
            "name": "test_custom_config_extras",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_validators": {
            "name": "test_inheritance_validators",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_validators_always": {
            "name": "test_inheritance_validators_always",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_validators_all": {
            "name": "test_inheritance_validators_all",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_funky_name": {
            "name": "test_funky_name",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_repeat_base_usage": {
            "name": "test_repeat_base_usage",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_dynamic_and_static": {
            "name": "test_dynamic_and_static",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info_create_model": {
            "name": "test_config_field_info_create_model",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_create_model_pickle.module": {
            "name": "module",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_validators.BarModel.check_a": {
            "name": "check_a",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_validators_always.BarModel.check_a": {
            "name": "check_a",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_validators_all.BarModel.check_all": {
            "name": "check_all",
            "location": 144,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/tests/test_dataclasses.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_model_name": {
            "name": "test_model_name",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_value_error": {
            "name": "test_value_error",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_frozen": {
            "name": "test_frozen",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_validate_assignment": {
            "name": "test_validate_assignment",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_validate_assignment_error": {
            "name": "test_validate_assignment_error",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_not_validate_assignment": {
            "name": "test_not_validate_assignment",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_validate_assignment_value_change": {
            "name": "test_validate_assignment_value_change",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_validate_assignment_extra": {
            "name": "test_validate_assignment_extra",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_post_init": {
            "name": "test_post_init",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_post_init_inheritance_chain": {
            "name": "test_post_init_inheritance_chain",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_post_init_post_parse": {
            "name": "test_post_init_post_parse",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_post_init_post_parse_types": {
            "name": "test_post_init_post_parse_types",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_post_init_assignment": {
            "name": "test_post_init_assignment",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_inheritance": {
            "name": "test_inheritance",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_validate_long_string_error": {
            "name": "test_validate_long_string_error",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_validate_assigment_long_string_error": {
            "name": "test_validate_assigment_long_string_error",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "test_no_validate_assigment_long_string_error": {
            "name": "test_no_validate_assigment_long_string_error",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "test_arbitrary_types_allowed": {
            "name": "test_arbitrary_types_allowed",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "test_nested_dataclass_model": {
            "name": "test_nested_dataclass_model",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "test_fields": {
            "name": "test_fields",
            "location": 400,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_field": {
            "name": "test_default_factory_field",
            "location": 420,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_singleton_field": {
            "name": "test_default_factory_singleton_field",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_schema": {
            "name": "test_schema",
            "location": 453,
            "return": [],
            "arguments": {}
        },
        "test_nested_schema": {
            "name": "test_nested_schema",
            "location": 494,
            "return": [],
            "arguments": {}
        },
        "test_initvar": {
            "name": "test_initvar",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_derived_field_from_initvar": {
            "name": "test_derived_field_from_initvar",
            "location": 533,
            "return": [],
            "arguments": {}
        },
        "test_initvars_post_init": {
            "name": "test_initvars_post_init",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "test_initvars_post_init_post_parse": {
            "name": "test_initvars_post_init_post_parse",
            "location": 570,
            "return": [],
            "arguments": {}
        },
        "test_classvar": {
            "name": "test_classvar",
            "location": 588,
            "return": [],
            "arguments": {}
        },
        "test_frozenset_field": {
            "name": "test_frozenset_field",
            "location": 598,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_post_init": {
            "name": "test_inheritance_post_init",
            "location": 609,
            "return": [],
            "arguments": {}
        },
        "test_hashable_required": {
            "name": "test_hashable_required",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "test_hashable_optional": {
            "name": "test_hashable_optional",
            "location": 645,
            "return": [],
            "arguments": {
                "default": []
            }
        },
        "test_override_builtin_dataclass": {
            "name": "test_override_builtin_dataclass",
            "location": 654,
            "return": [],
            "arguments": {}
        },
        "test_override_builtin_dataclass_2": {
            "name": "test_override_builtin_dataclass_2",
            "location": 672,
            "return": [],
            "arguments": {}
        },
        "test_override_builtin_dataclass_nested": {
            "name": "test_override_builtin_dataclass_nested",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "test_override_builtin_dataclass_nested_schema": {
            "name": "test_override_builtin_dataclass_nested_schema",
            "location": 728,
            "return": [],
            "arguments": {}
        },
        "test_inherit_builtin_dataclass": {
            "name": "test_inherit_builtin_dataclass",
            "location": 762,
            "return": [],
            "arguments": {}
        },
        "test_dataclass_arbitrary": {
            "name": "test_dataclass_arbitrary",
            "location": 781,
            "return": [],
            "arguments": {}
        },
        "test_forward_stdlib_dataclass_params": {
            "name": "test_forward_stdlib_dataclass_params",
            "location": 801,
            "return": [],
            "arguments": {}
        },
        "test_pydantic_callable_field": {
            "name": "test_pydantic_callable_field",
            "location": 819,
            "return": [],
            "arguments": {}
        },
        "test_pickle_overriden_builtin_dataclass": {
            "name": "test_pickle_overriden_builtin_dataclass",
            "location": 873,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_config_field_info_create_model": {
            "name": "test_config_field_info_create_model",
            "location": 907,
            "return": [],
            "arguments": {}
        },
        "test_discrimated_union_basemodel_instance_value": {
            "name": "test_discrimated_union_basemodel_instance_value",
            "location": 926,
            "return": [],
            "arguments": {}
        },
        "test_keeps_custom_properties": {
            "name": "test_keeps_custom_properties",
            "location": 969,
            "return": [],
            "arguments": {}
        },
        "test_self_reference_dataclass": {
            "name": "test_self_reference_dataclass",
            "location": 994,
            "return": [],
            "arguments": {}
        },
        "test_pydantic_callable_field.foo": {
            "name": "foo",
            "location": 822,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_pydantic_callable_field.bar": {
            "name": "bar",
            "location": 825,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "test_validate_assignment_value_change.MyDataclass.double_a": {
            "name": "double_a",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_post_init.MyDataclass.__post_init__": {
            "name": "__post_init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_inheritance_chain.ParentDataclass.__post_init__": {
            "name": "__post_init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_inheritance_chain.MyDataclass.__post_init__": {
            "name": "__post_init__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_post_parse.MyDataclass.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_post_parse_types.MyDataclass.__post_init__": {
            "name": "__post_init__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_post_parse_types.MyDataclass.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_post_init_assignment.C.__post_init__": {
            "name": "__post_init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_arbitrary_types_allowed.Button.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "href": []
            }
        },
        "test_derived_field_from_initvar.DerivedWithInitVar.__post_init__": {
            "name": "__post_init__",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "test_initvars_post_init.PathDataPostInit.__post_init__": {
            "name": "__post_init__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "base_path": []
            }
        },
        "test_initvars_post_init_post_parse.PathDataPostInitPostParse.__post_init_post_parse__": {
            "name": "__post_init_post_parse__",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "base_path": []
            }
        },
        "test_inheritance_post_init.Base.__post_init__": {
            "name": "__post_init__",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_dataclass_arbitrary.ArbitraryType.__init__": {
            "name": "__init__",
            "location": 783,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_keeps_custom_properties.StandardClass.__new__": {
            "name": "__new__",
            "location": 975,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pydantic-master/tests/test_datetime_parse.py": {
        "create_tz": {
            "name": "create_tz",
            "location": 17,
            "return": [],
            "arguments": {
                "minutes": []
            }
        },
        "test_date_parsing": {
            "name": "test_date_parsing",
            "location": 56,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_time_parsing": {
            "name": "test_time_parsing",
            "location": 93,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_datetime_parsing": {
            "name": "test_datetime_parsing",
            "location": 145,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_parse_python_format": {
            "name": "test_parse_python_format",
            "location": 165,
            "return": [],
            "arguments": {
                "delta": []
            }
        },
        "test_parse_durations": {
            "name": "test_parse_durations",
            "location": 215,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_model_type_errors": {
            "name": "test_model_type_errors",
            "location": 240,
            "return": [],
            "arguments": {
                "field": [],
                "value": [],
                "error_message": []
            }
        },
        "test_unicode_decode_error": {
            "name": "test_unicode_decode_error",
            "location": 255,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "test_nan": {
            "name": "test_nan",
            "location": 273,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_decorator.py": {
        "test_args": {
            "name": "test_args",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_wrap": {
            "name": "test_wrap",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_untyped": {
            "name": "test_untyped",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_var_args_kwargs": {
            "name": "test_var_args_kwargs",
            "location": 128,
            "return": [],
            "arguments": {
                "validated": []
            }
        },
        "test_field_can_provide_factory": {
            "name": "test_field_can_provide_factory",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_annotated_field_can_provide_factory": {
            "name": "test_annotated_field_can_provide_factory",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "test_positional_only": {
            "name": "test_positional_only",
            "location": 165,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_args_name": {
            "name": "test_args_name",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_v_args": {
            "name": "test_v_args",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_async": {
            "name": "test_async",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "test_string_annotation": {
            "name": "test_string_annotation",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "test_item_method": {
            "name": "test_item_method",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "test_class_method": {
            "name": "test_class_method",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "test_config_title": {
            "name": "test_config_title",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "test_config_title_cls": {
            "name": "test_config_title_cls",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "test_config_fields": {
            "name": "test_config_fields",
            "location": 358,
            "return": [],
            "arguments": {}
        },
        "test_config_arbitrary_types_allowed": {
            "name": "test_config_arbitrary_types_allowed",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_validate": {
            "name": "test_validate",
            "location": 389,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_validate_all": {
            "name": "test_validate_all",
            "location": 403,
            "return": [],
            "arguments": {}
        },
        "test_validate_all_positional": {
            "name": "test_validate_all_positional",
            "location": 413,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_validate_extra": {
            "name": "test_validate_extra",
            "location": 430,
            "return": [],
            "arguments": {}
        },
        "test_args.foo": {
            "name": "foo",
            "location": 20,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_wrap.foo_bar": {
            "name": "foo_bar",
            "location": 74,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_kwargs.foo": {
            "name": "foo",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_untyped.foo": {
            "name": "foo",
            "location": 120,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_var_args_kwargs.foo": {
            "name": "foo",
            "location": 129,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_field_can_provide_factory.foo": {
            "name": "foo",
            "location": 147,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_annotated_field_can_provide_factory.foo2": {
            "name": "foo2",
            "location": 157,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_args_name.foo": {
            "name": "foo",
            "location": 201,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "test_string_annotation.foo": {
            "name": "foo",
            "location": 278,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_config_title.foo": {
            "name": "foo",
            "location": 337,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_config_title_cls.foo": {
            "name": "foo",
            "location": 350,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_config_arbitrary_types_allowed.foo": {
            "name": "foo",
            "location": 372,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_validate.func": {
            "name": "func",
            "location": 393,
            "return": [],
            "arguments": {
                "s": [],
                "count": []
            }
        },
        "test_validate_all.foo": {
            "name": "foo",
            "location": 405,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "test_validate_extra.test": {
            "name": "test",
            "location": 441,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "test_v_args.foo1": {
            "name": "foo1",
            "location": 232,
            "return": [],
            "arguments": {
                "v__args": []
            }
        },
        "test_v_args.foo2": {
            "name": "foo2",
            "location": 240,
            "return": [],
            "arguments": {
                "v__kwargs": []
            }
        },
        "test_v_args.foo3": {
            "name": "foo3",
            "location": 248,
            "return": [],
            "arguments": {
                "v__positional_only": []
            }
        },
        "test_v_args.foo4": {
            "name": "foo4",
            "location": 256,
            "return": [],
            "arguments": {
                "v__duplicate_kwargs": []
            }
        },
        "test_item_method.X.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "test_item_method.X.foo": {
            "name": "foo",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "test_class_method.X.foo": {
            "name": "foo",
            "location": 318,
            "return": [],
            "arguments": {
                "cls": [],
                "a": [],
                "b": []
            }
        },
        "test_config_fields.foo": {
            "name": "foo",
            "location": 362,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_config_arbitrary_types_allowed.EggBox.__str__": {
            "name": "__str__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/test_discrimated_union.py": {
        "test_discriminated_union_only_union": {
            "name": "test_discriminated_union_only_union",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_single_variant": {
            "name": "test_discriminated_union_single_variant",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_invalid_type": {
            "name": "test_discriminated_union_invalid_type",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_defined_discriminator": {
            "name": "test_discriminated_union_defined_discriminator",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_literal_discriminator": {
            "name": "test_discriminated_union_literal_discriminator",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_root_same_discriminator": {
            "name": "test_discriminated_union_root_same_discriminator",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_validation": {
            "name": "test_discriminated_union_validation",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_annotated_union": {
            "name": "test_discriminated_annotated_union",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_basemodel_instance_value": {
            "name": "test_discriminated_union_basemodel_instance_value",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_int": {
            "name": "test_discriminated_union_int",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_enum": {
            "name": "test_discriminated_union_enum",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_alias_different": {
            "name": "test_alias_different",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_alias_same": {
            "name": "test_alias_same",
            "location": 341,
            "return": [],
            "arguments": {}
        },
        "test_nested": {
            "name": "test_nested",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_generic": {
            "name": "test_generic",
            "location": 378,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_edge_cases.py": {
        "test_str_bytes": {
            "name": "test_str_bytes",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_str_bytes_none": {
            "name": "test_str_bytes_none",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_union_int_str": {
            "name": "test_union_int_str",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_union_int_any": {
            "name": "test_union_int_any",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_union_priority": {
            "name": "test_union_priority",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_typed_list": {
            "name": "test_typed_list",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_typed_set": {
            "name": "test_typed_set",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_dict_dict": {
            "name": "test_dict_dict",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_none_list": {
            "name": "test_none_list",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_typed_dict": {
            "name": "test_typed_dict",
            "location": 173,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_typed_dict_error": {
            "name": "test_typed_dict_error",
            "location": 188,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_dict_key_error": {
            "name": "test_dict_key_error",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_tuple_more": {
            "name": "test_tuple_more",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_tuple_length_error": {
            "name": "test_tuple_length_error",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_tuple_invalid": {
            "name": "test_tuple_invalid",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_tuple_value_error": {
            "name": "test_tuple_value_error",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "test_recursive_list": {
            "name": "test_recursive_list",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_recursive_list_error": {
            "name": "test_recursive_list_error",
            "location": 306,
            "return": [],
            "arguments": {}
        },
        "test_list_unions": {
            "name": "test_list_unions",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "test_recursive_lists": {
            "name": "test_recursive_lists",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "test_str_enum": {
            "name": "test_str_enum",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "test_any_dict": {
            "name": "test_any_dict",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_success_values_include": {
            "name": "test_success_values_include",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_include_exclude_unset": {
            "name": "test_include_exclude_unset",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "test_include_exclude_defaults": {
            "name": "test_include_exclude_defaults",
            "location": 409,
            "return": [],
            "arguments": {}
        },
        "test_skip_defaults_deprecated": {
            "name": "test_skip_defaults_deprecated",
            "location": 440,
            "return": [],
            "arguments": {}
        },
        "test_advanced_exclude": {
            "name": "test_advanced_exclude",
            "location": 459,
            "return": [],
            "arguments": {}
        },
        "test_advanced_exclude_by_alias": {
            "name": "test_advanced_exclude_by_alias",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "test_advanced_value_include": {
            "name": "test_advanced_value_include",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "test_advanced_value_exclude_include": {
            "name": "test_advanced_value_exclude_include",
            "location": 529,
            "return": [],
            "arguments": {}
        },
        "test_advanced_exclude_nested_lists": {
            "name": "test_advanced_exclude_nested_lists",
            "location": 611,
            "return": [],
            "arguments": {
                "exclude": [],
                "expected": []
            }
        },
        "test_advanced_include_nested_lists": {
            "name": "test_advanced_include_nested_lists",
            "location": 700,
            "return": [],
            "arguments": {
                "include": [],
                "expected": []
            }
        },
        "test_field_set_ignore_extra": {
            "name": "test_field_set_ignore_extra",
            "location": 717,
            "return": [],
            "arguments": {}
        },
        "test_field_set_allow_extra": {
            "name": "test_field_set_allow_extra",
            "location": 737,
            "return": [],
            "arguments": {}
        },
        "test_field_set_field_name": {
            "name": "test_field_set_field_name",
            "location": 757,
            "return": [],
            "arguments": {}
        },
        "test_values_order": {
            "name": "test_values_order",
            "location": 768,
            "return": [],
            "arguments": {}
        },
        "test_inheritance": {
            "name": "test_inheritance",
            "location": 778,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_subclass_default": {
            "name": "test_inheritance_subclass_default",
            "location": 789,
            "return": [],
            "arguments": {}
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 810,
            "return": [],
            "arguments": {}
        },
        "test_valid_string_types": {
            "name": "test_valid_string_types",
            "location": 839,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_invalid_string_types": {
            "name": "test_invalid_string_types",
            "location": 853,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_inheritance_config": {
            "name": "test_inheritance_config",
            "location": 862,
            "return": [],
            "arguments": {}
        },
        "test_partial_inheritance_config": {
            "name": "test_partial_inheritance_config",
            "location": 876,
            "return": [],
            "arguments": {}
        },
        "test_annotation_inheritance": {
            "name": "test_annotation_inheritance",
            "location": 893,
            "return": [],
            "arguments": {}
        },
        "test_string_none": {
            "name": "test_string_none",
            "location": 923,
            "return": [],
            "arguments": {}
        },
        "test_return_errors_ok": {
            "name": "test_return_errors_ok",
            "location": 937,
            "return": [],
            "arguments": {}
        },
        "test_return_errors_error": {
            "name": "test_return_errors_error",
            "location": 953,
            "return": [],
            "arguments": {}
        },
        "test_optional_required": {
            "name": "test_optional_required",
            "location": 969,
            "return": [],
            "arguments": {}
        },
        "test_invalid_validator": {
            "name": "test_invalid_validator",
            "location": 978,
            "return": [],
            "arguments": {}
        },
        "test_unable_to_infer": {
            "name": "test_unable_to_infer",
            "location": 996,
            "return": [],
            "arguments": {}
        },
        "test_multiple_errors": {
            "name": "test_multiple_errors",
            "location": 1005,
            "return": [],
            "arguments": {}
        },
        "test_validate_all": {
            "name": "test_validate_all",
            "location": 1021,
            "return": [],
            "arguments": {}
        },
        "test_force_extra": {
            "name": "test_force_extra",
            "location": 1037,
            "return": [],
            "arguments": {}
        },
        "test_illegal_extra_value": {
            "name": "test_illegal_extra_value",
            "location": 1047,
            "return": [],
            "arguments": {}
        },
        "test_multiple_inheritance_config": {
            "name": "test_multiple_inheritance_config",
            "location": 1057,
            "return": [],
            "arguments": {}
        },
        "test_submodel_different_type": {
            "name": "test_submodel_different_type",
            "location": 1092,
            "return": [],
            "arguments": {}
        },
        "test_self": {
            "name": "test_self",
            "location": 1111,
            "return": [],
            "arguments": {}
        },
        "test_self_recursive": {
            "name": "test_self_recursive",
            "location": 1127,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_nested_init": {
            "name": "test_nested_init",
            "location": 1139,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "test_init_inspection": {
            "name": "test_init_inspection",
            "location": 1158,
            "return": [],
            "arguments": {}
        },
        "test_type_on_annotation": {
            "name": "test_type_on_annotation",
            "location": 1170,
            "return": [],
            "arguments": {}
        },
        "test_assign_type": {
            "name": "test_assign_type",
            "location": 1188,
            "return": [],
            "arguments": {}
        },
        "test_optional_subfields": {
            "name": "test_optional_subfields",
            "location": 1219,
            "return": [],
            "arguments": {}
        },
        "test_not_optional_subfields": {
            "name": "test_not_optional_subfields",
            "location": 1237,
            "return": [],
            "arguments": {}
        },
        "test_optional_field_constraints": {
            "name": "test_optional_field_constraints",
            "location": 1260,
            "return": [],
            "arguments": {}
        },
        "test_field_str_shape": {
            "name": "test_field_str_shape",
            "location": 1276,
            "return": [],
            "arguments": {}
        },
        "test_field_type_display": {
            "name": "test_field_type_display",
            "location": 1320,
            "return": [],
            "arguments": {
                "type_": [],
                "expected": []
            }
        },
        "test_any_none": {
            "name": "test_any_none",
            "location": 1327,
            "return": [],
            "arguments": {}
        },
        "test_type_var_any": {
            "name": "test_type_var_any",
            "location": 1335,
            "return": [],
            "arguments": {}
        },
        "test_type_var_constraint": {
            "name": "test_type_var_constraint",
            "location": 1347,
            "return": [],
            "arguments": {}
        },
        "test_type_var_bound": {
            "name": "test_type_var_bound",
            "location": 1367,
            "return": [],
            "arguments": {}
        },
        "test_dict_bare": {
            "name": "test_dict_bare",
            "location": 1386,
            "return": [],
            "arguments": {}
        },
        "test_list_bare": {
            "name": "test_list_bare",
            "location": 1394,
            "return": [],
            "arguments": {}
        },
        "test_dict_any": {
            "name": "test_dict_any",
            "location": 1402,
            "return": [],
            "arguments": {}
        },
        "test_modify_fields": {
            "name": "test_modify_fields",
            "location": 1410,
            "return": [],
            "arguments": {}
        },
        "test_exclude_none": {
            "name": "test_exclude_none",
            "location": 1427,
            "return": [],
            "arguments": {}
        },
        "test_exclude_none_recursive": {
            "name": "test_exclude_none_recursive",
            "location": 1440,
            "return": [],
            "arguments": {}
        },
        "test_exclude_none_with_extra": {
            "name": "test_exclude_none_with_extra",
            "location": 1462,
            "return": [],
            "arguments": {}
        },
        "test_str_method_inheritance": {
            "name": "test_str_method_inheritance",
            "location": 1481,
            "return": [],
            "arguments": {}
        },
        "test_repr_method_inheritance": {
            "name": "test_repr_method_inheritance",
            "location": 1498,
            "return": [],
            "arguments": {}
        },
        "test_optional_validator": {
            "name": "test_optional_validator",
            "location": 1515,
            "return": [],
            "arguments": {}
        },
        "test_required_optional": {
            "name": "test_required_optional",
            "location": 1532,
            "return": [],
            "arguments": {}
        },
        "test_required_any": {
            "name": "test_required_any",
            "location": 1559,
            "return": [],
            "arguments": {}
        },
        "test_custom_generic_validators": {
            "name": "test_custom_generic_validators",
            "location": 1598,
            "return": [],
            "arguments": {}
        },
        "test_custom_generic_arbitrary_allowed": {
            "name": "test_custom_generic_arbitrary_allowed",
            "location": 1656,
            "return": [],
            "arguments": {}
        },
        "test_custom_generic_disallowed": {
            "name": "test_custom_generic_disallowed",
            "location": 1695,
            "return": [],
            "arguments": {}
        },
        "test_hashable_required": {
            "name": "test_hashable_required",
            "location": 1712,
            "return": [],
            "arguments": {}
        },
        "test_hashable_optional": {
            "name": "test_hashable_optional",
            "location": 1728,
            "return": [],
            "arguments": {
                "default": []
            }
        },
        "test_default_factory_called_once": {
            "name": "test_default_factory_called_once",
            "location": 1736,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_validator_child": {
            "name": "test_default_factory_validator_child",
            "location": 1769,
            "return": [],
            "arguments": {}
        },
        "test_cython_function_untouched": {
            "name": "test_cython_function_untouched",
            "location": 1786,
            "return": [],
            "arguments": {}
        },
        "test_resolve_annotations_module_missing": {
            "name": "test_resolve_annotations_module_missing",
            "location": 1808,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_iter_coverage": {
            "name": "test_iter_coverage",
            "location": 1827,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info": {
            "name": "test_config_field_info",
            "location": 1835,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info_alias": {
            "name": "test_config_field_info_alias",
            "location": 1845,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info_merge": {
            "name": "test_config_field_info_merge",
            "location": 1855,
            "return": [],
            "arguments": {}
        },
        "test_config_field_info_allow_mutation": {
            "name": "test_config_field_info_allow_mutation",
            "location": 1867,
            "return": [],
            "arguments": {}
        },
        "test_arbitrary_types_allowed_custom_eq": {
            "name": "test_arbitrary_types_allowed_custom_eq",
            "location": 1895,
            "return": [],
            "arguments": {}
        },
        "test_bytes_subclass": {
            "name": "test_bytes_subclass",
            "location": 1911,
            "return": [],
            "arguments": {}
        },
        "test_int_subclass": {
            "name": "test_int_subclass",
            "location": 1924,
            "return": [],
            "arguments": {}
        },
        "test_model_issubclass": {
            "name": "test_model_issubclass",
            "location": 1937,
            "return": [],
            "arguments": {}
        },
        "CustomStr.foobar": {
            "name": "foobar",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DisplayGen.__init__": {
            "name": "__init__",
            "location": 1289,
            "return": [],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "DisplayGen.__get_validators__": {
            "name": "__get_validators__",
            "location": 1294,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_default_factory_called_once.factory": {
            "name": "factory",
            "location": 1741,
            "return": [],
            "arguments": {}
        },
        "test_invalid_validator.InvalidValidator.__get_validators__": {
            "name": "__get_validators__",
            "location": 981,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_invalid_validator.InvalidValidator.has_wrong_arguments": {
            "name": "has_wrong_arguments",
            "location": 985,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "bar": []
            }
        },
        "test_nested_init.NestedModel.__init__": {
            "name": "__init__",
            "location": 1144,
            "return": [],
            "arguments": {
                "someinit": []
            }
        },
        "test_init_inspection.Foobar.__init__": {
            "name": "__init__",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assign_type.Parent.echo": {
            "name": "echo",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assign_type.Child.echo": {
            "name": "echo",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_assign_type.Different.echo": {
            "name": "echo",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_not_optional_subfields.Model.check_a": {
            "name": "check_a",
            "location": 1242,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DisplayGen.__get_validators__.validator": {
            "name": "validator",
            "location": 1295,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_modify_fields.Foo.check_something": {
            "name": "check_something",
            "location": 1415,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "test_str_method_inheritance.Foo.__str__": {
            "name": "__str__",
            "location": 1488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_repr_method_inheritance.Foo.__repr__": {
            "name": "__repr__",
            "location": 1505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_optional_validator.Model.check_something": {
            "name": "check_something",
            "location": 1522,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_custom_generic_validators.MyGen.__init__": {
            "name": "__init__",
            "location": 1603,
            "return": [],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "test_custom_generic_validators.MyGen.__get_validators__": {
            "name": "__get_validators__",
            "location": 1608,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_custom_generic_validators.MyGen.validate": {
            "name": "validate",
            "location": 1612,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_custom_generic_arbitrary_allowed.MyGen.__init__": {
            "name": "__init__",
            "location": 1661,
            "return": [],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "test_custom_generic_disallowed.MyGen.__init__": {
            "name": "__init__",
            "location": 1700,
            "return": [],
            "arguments": {
                "self": [],
                "t1": [],
                "t2": []
            }
        },
        "test_default_factory_validator_child.Parent.mutate_foo": {
            "name": "mutate_foo",
            "location": 1774,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_arbitrary_types_allowed_custom_eq.Foo.__eq__": {
            "name": "__eq__",
            "location": 1897,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "test_bytes_subclass.BytesSubclass.__new__": {
            "name": "__new__",
            "location": 1916,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "test_int_subclass.IntSubclass.__new__": {
            "name": "__new__",
            "location": 1929,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "pydantic-master/tests/test_errors.py": {
        "test_pydantic_error": {
            "name": "test_pydantic_error",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_pydantic_error_pickable": {
            "name": "test_pydantic_error_pickable",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_interval_validation_error": {
            "name": "test_interval_validation_error",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_error_on_optional": {
            "name": "test_error_on_optional",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_validation_error": {
            "name": "test_validation_error",
            "location": 235,
            "return": [],
            "arguments": {
                "result": [],
                "expected": []
            }
        },
        "test_errors_unknown_error_object": {
            "name": "test_errors_unknown_error_object",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "test_get_exc_type": {
            "name": "test_get_exc_type",
            "location": 285,
            "return": [],
            "arguments": {
                "exc": [],
                "type_": []
            }
        },
        "test_single_error": {
            "name": "test_single_error",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_nested_error": {
            "name": "test_nested_error",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "test_validate_assignment_error": {
            "name": "test_validate_assignment_error",
            "location": 338,
            "return": [],
            "arguments": {}
        },
        "test_submodel_override_validation_error": {
            "name": "test_submodel_override_validation_error",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "test_validation_error_methods": {
            "name": "test_validation_error_methods",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_pydantic_error.TestError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_interval_validation_error.MyModel.check_action": {
            "name": "check_action",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_error_on_optional.Foobar.check_foo": {
            "name": "check_foo",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/tests/test_forward_ref.py": {
        "test_postponed_annotations": {
            "name": "test_postponed_annotations",
            "location": 9,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_postponed_annotations_optional": {
            "name": "test_postponed_annotations_optional",
            "location": 24,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_postponed_annotations_auto_update_forward_refs": {
            "name": "test_postponed_annotations_auto_update_forward_refs",
            "location": 40,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_auto_update_no_model": {
            "name": "test_forward_ref_auto_update_no_model",
            "location": 55,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_one_of_fields_not_defined": {
            "name": "test_forward_ref_one_of_fields_not_defined",
            "location": 75,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_basic_forward_ref": {
            "name": "test_basic_forward_ref",
            "location": 90,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_self_forward_ref_module": {
            "name": "test_self_forward_ref_module",
            "location": 110,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_self_forward_ref_collection": {
            "name": "test_self_forward_ref_collection",
            "location": 128,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_self_forward_ref_local": {
            "name": "test_self_forward_ref_local",
            "location": 161,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_missing_update_forward_refs": {
            "name": "test_missing_update_forward_refs",
            "location": 182,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_dataclass": {
            "name": "test_forward_ref_dataclass",
            "location": 199,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_dataclass_with_future_annotations": {
            "name": "test_forward_ref_dataclass_with_future_annotations",
            "location": 213,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_sub_types": {
            "name": "test_forward_ref_sub_types",
            "location": 230,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_nested_sub_types": {
            "name": "test_forward_ref_nested_sub_types",
            "location": 259,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_self_reference_json_schema": {
            "name": "test_self_reference_json_schema",
            "location": 292,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_self_reference_json_schema_with_future_annotations": {
            "name": "test_self_reference_json_schema_with_future_annotations",
            "location": 327,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_circular_reference_json_schema": {
            "name": "test_circular_reference_json_schema",
            "location": 364,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_circular_reference_json_schema_with_future_annotations": {
            "name": "test_circular_reference_json_schema_with_future_annotations",
            "location": 411,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_with_field": {
            "name": "test_forward_ref_with_field",
            "location": 460,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_optional": {
            "name": "test_forward_ref_optional",
            "location": 480,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_with_create_model": {
            "name": "test_forward_ref_with_create_model",
            "location": 513,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_resolve_forward_ref_dataclass": {
            "name": "test_resolve_forward_ref_dataclass",
            "location": 525,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_nested_forward_ref": {
            "name": "test_nested_forward_ref",
            "location": 549,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_forward_ref": {
            "name": "test_discriminated_union_forward_ref",
            "location": 557,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_class_var_as_string": {
            "name": "test_class_var_as_string",
            "location": 604,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_json_encoder_str": {
            "name": "test_json_encoder_str",
            "location": 620,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_json_encoder_forward_ref": {
            "name": "test_json_encoder_forward_ref",
            "location": 653,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_pep585_self_referencing_generics": {
            "name": "test_pep585_self_referencing_generics",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "test_pep585_recursive_generics": {
            "name": "test_pep585_recursive_generics",
            "location": 696,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_class_var_forward_ref": {
            "name": "test_class_var_forward_ref",
            "location": 718,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_forward_ref_one_of_fields_not_defined.module": {
            "name": "module",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_basic_forward_ref.module": {
            "name": "module",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_self_forward_ref_module.module": {
            "name": "module",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_self_forward_ref_collection.module": {
            "name": "module",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_self_forward_ref_local.module": {
            "name": "module",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "test_missing_update_forward_refs.module": {
            "name": "module",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_forward_ref_dataclass.module": {
            "name": "module",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_forward_ref_sub_types.module": {
            "name": "module",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_forward_ref_nested_sub_types.module": {
            "name": "module",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_self_reference_json_schema.module": {
            "name": "module",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_circular_reference_json_schema.module": {
            "name": "module",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_forward_ref_with_field.module": {
            "name": "module",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "test_forward_ref_with_create_model.module": {
            "name": "module",
            "location": 515,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_forward_ref.module": {
            "name": "module",
            "location": 559,
            "return": [],
            "arguments": {}
        },
        "test_pep585_recursive_generics.module": {
            "name": "module",
            "location": 698,
            "return": [],
            "arguments": {}
        },
        "test_self_forward_ref_local.module.main": {
            "name": "main",
            "location": 167,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_generics.py": {
        "test_generic_name": {
            "name": "test_generic_name",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_double_parameterize_error": {
            "name": "test_double_parameterize_error",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_value_validation": {
            "name": "test_value_validation",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_methods_are_inherited": {
            "name": "test_methods_are_inherited",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_config_is_inherited": {
            "name": "test_config_is_inherited",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_default_argument": {
            "name": "test_default_argument",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_default_argument_for_typevar": {
            "name": "test_default_argument_for_typevar",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_classvar": {
            "name": "test_classvar",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "test_non_annotated_field": {
            "name": "test_non_annotated_field",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_must_inherit_from_generic": {
            "name": "test_must_inherit_from_generic",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_parameters_placed_on_generic": {
            "name": "test_parameters_placed_on_generic",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "test_parameters_must_be_typevar": {
            "name": "test_parameters_must_be_typevar",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_subclass_can_be_genericized": {
            "name": "test_subclass_can_be_genericized",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_parameter_count": {
            "name": "test_parameter_count",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_cover_cache": {
            "name": "test_cover_cache",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_generic_config": {
            "name": "test_generic_config",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "test_enum_generic": {
            "name": "test_enum_generic",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_generic": {
            "name": "test_generic",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_alongside_concrete_generics": {
            "name": "test_alongside_concrete_generics",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "test_complex_nesting": {
            "name": "test_complex_nesting",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "test_required_value": {
            "name": "test_required_value",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_optional_value": {
            "name": "test_optional_value",
            "location": 358,
            "return": [],
            "arguments": {}
        },
        "test_custom_schema": {
            "name": "test_custom_schema",
            "location": 368,
            "return": [],
            "arguments": {}
        },
        "test_child_schema": {
            "name": "test_child_schema",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "test_custom_generic_naming": {
            "name": "test_custom_generic_naming",
            "location": 396,
            "return": [],
            "arguments": {}
        },
        "test_nested": {
            "name": "test_nested",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "test_partial_specification": {
            "name": "test_partial_specification",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_partial_specification_with_inner_typevar": {
            "name": "test_partial_specification_with_inner_typevar",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "test_partial_specification_name": {
            "name": "test_partial_specification_name",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "test_partial_specification_instantiation": {
            "name": "test_partial_specification_instantiation",
            "location": 495,
            "return": [],
            "arguments": {}
        },
        "test_partial_specification_instantiation_bounded": {
            "name": "test_partial_specification_instantiation_bounded",
            "location": 515,
            "return": [],
            "arguments": {}
        },
        "test_typevar_parametrization": {
            "name": "test_typevar_parametrization",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "test_multiple_specification": {
            "name": "test_multiple_specification",
            "location": 558,
            "return": [],
            "arguments": {}
        },
        "test_generic_subclass_of_concrete_generic": {
            "name": "test_generic_subclass_of_concrete_generic",
            "location": 578,
            "return": [],
            "arguments": {}
        },
        "test_generic_model_pickle": {
            "name": "test_generic_model_pickle",
            "location": 599,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_generic_model_from_function_pickle_fail": {
            "name": "test_generic_model_from_function_pickle_fail",
            "location": 627,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_generic_model_redefined_without_cache_fail": {
            "name": "test_generic_model_redefined_without_cache_fail",
            "location": 655,
            "return": [],
            "arguments": {
                "create_module": [],
                "monkeypatch": []
            }
        },
        "test_get_caller_frame_info": {
            "name": "test_get_caller_frame_info",
            "location": 691,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_get_caller_frame_info_called_from_module": {
            "name": "test_get_caller_frame_info_called_from_module",
            "location": 711,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_get_caller_frame_info_when_sys_getframe_undefined": {
            "name": "test_get_caller_frame_info_when_sys_getframe_undefined",
            "location": 725,
            "return": [],
            "arguments": {}
        },
        "test_iter_contained_typevars": {
            "name": "test_iter_contained_typevars",
            "location": 736,
            "return": [],
            "arguments": {}
        },
        "test_nested_identity_parameterization": {
            "name": "test_nested_identity_parameterization",
            "location": 749,
            "return": [],
            "arguments": {}
        },
        "test_replace_types": {
            "name": "test_replace_types",
            "location": 761,
            "return": [],
            "arguments": {}
        },
        "test_replace_types_with_user_defined_generic_type_field": {
            "name": "test_replace_types_with_user_defined_generic_type_field",
            "location": 784,
            "return": [],
            "arguments": {}
        },
        "test_replace_types_identity_on_unchanged": {
            "name": "test_replace_types_identity_on_unchanged",
            "location": 807,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic": {
            "name": "test_deep_generic",
            "location": 815,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic_with_inner_typevar": {
            "name": "test_deep_generic_with_inner_typevar",
            "location": 846,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic_with_referenced_generic": {
            "name": "test_deep_generic_with_referenced_generic",
            "location": 863,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic_with_referenced_inner_generic": {
            "name": "test_deep_generic_with_referenced_inner_generic",
            "location": 884,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic_with_multiple_typevars": {
            "name": "test_deep_generic_with_multiple_typevars",
            "location": 907,
            "return": [],
            "arguments": {}
        },
        "test_deep_generic_with_multiple_inheritance": {
            "name": "test_deep_generic_with_multiple_inheritance",
            "location": 924,
            "return": [],
            "arguments": {}
        },
        "test_generic_with_referenced_generic_type_1": {
            "name": "test_generic_with_referenced_generic_type_1",
            "location": 951,
            "return": [],
            "arguments": {}
        },
        "test_generic_with_referenced_nested_typevar": {
            "name": "test_generic_with_referenced_nested_typevar",
            "location": 965,
            "return": [],
            "arguments": {}
        },
        "test_generic_with_callable": {
            "name": "test_generic_with_callable",
            "location": 980,
            "return": [],
            "arguments": {}
        },
        "test_generic_with_partial_callable": {
            "name": "test_generic_with_partial_callable",
            "location": 991,
            "return": [],
            "arguments": {}
        },
        "test_generic_recursive_models": {
            "name": "test_generic_recursive_models",
            "location": 1006,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_generic_enum": {
            "name": "test_generic_enum",
            "location": 1029,
            "return": [],
            "arguments": {}
        },
        "test_generic_literal": {
            "name": "test_generic_literal",
            "location": 1046,
            "return": [],
            "arguments": {}
        },
        "test_generic_enums": {
            "name": "test_generic_enums",
            "location": 1058,
            "return": [],
            "arguments": {}
        },
        "test_generic_with_user_defined_generic_field": {
            "name": "test_generic_with_user_defined_generic_field",
            "location": 1077,
            "return": [],
            "arguments": {}
        },
        "test_generic_annotated": {
            "name": "test_generic_annotated",
            "location": 1094,
            "return": [],
            "arguments": {}
        },
        "test_generic_subclass": {
            "name": "test_generic_subclass",
            "location": 1103,
            "return": [],
            "arguments": {}
        },
        "test_generic_subclass_with_partial_application": {
            "name": "test_generic_subclass_with_partial_application",
            "location": 1118,
            "return": [],
            "arguments": {}
        },
        "test_multilevel_generic_binding": {
            "name": "test_multilevel_generic_binding",
            "location": 1134,
            "return": [],
            "arguments": {}
        },
        "test_generic_subclass_with_extra_type": {
            "name": "test_generic_subclass_with_extra_type",
            "location": 1149,
            "return": [],
            "arguments": {}
        },
        "test_multi_inheritance_generic_binding": {
            "name": "test_multi_inheritance_generic_binding",
            "location": 1165,
            "return": [],
            "arguments": {}
        },
        "test_parse_generic_json": {
            "name": "test_parse_generic_json",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "test_generic_model_pickle.module": {
            "name": "module",
            "location": 603,
            "return": [],
            "arguments": {}
        },
        "test_generic_model_from_function_pickle_fail.module": {
            "name": "module",
            "location": 629,
            "return": [],
            "arguments": {}
        },
        "test_generic_model_redefined_without_cache_fail.module": {
            "name": "module",
            "location": 661,
            "return": [],
            "arguments": {}
        },
        "test_get_caller_frame_info.module": {
            "name": "module",
            "location": 693,
            "return": [],
            "arguments": {}
        },
        "test_get_caller_frame_info_called_from_module.module": {
            "name": "module",
            "location": 713,
            "return": [],
            "arguments": {}
        },
        "test_generic_recursive_models.module": {
            "name": "module",
            "location": 1008,
            "return": [],
            "arguments": {}
        },
        "test_value_validation.Response.validate_value_nonzero": {
            "name": "validate_value_nonzero",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_value_validation.Response.validate_sum": {
            "name": "validate_sum",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_methods_are_inherited.CustomGenericModel.method": {
            "name": "method",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_generic.Result.validate_error": {
            "name": "validate_error",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "test_generic.Result.validate_positive_number": {
            "name": "validate_positive_number",
            "location": 284,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_custom_generic_naming.MyModel.__concrete_name__": {
            "name": "__concrete_name__",
            "location": 403,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "test_generic_model_from_function_pickle_fail.module.get_generic": {
            "name": "get_generic",
            "location": 647,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "test_get_caller_frame_info.module.function": {
            "name": "function",
            "location": 696,
            "return": [],
            "arguments": {}
        },
        "test_get_caller_frame_info.module.another_function": {
            "name": "another_function",
            "location": 701,
            "return": [],
            "arguments": {}
        },
        "test_get_caller_frame_info.module.third_function": {
            "name": "third_function",
            "location": 705,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_hypothesis_plugin.py": {
        "gen_models": {
            "name": "gen_models",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_can_construct_models_with_all_fields": {
            "name": "test_can_construct_models_with_all_fields",
            "location": 113,
            "return": [],
            "arguments": {
                "data": [],
                "model": []
            }
        }
    },
    "pydantic-master/tests/test_json.py": {
        "test_encoding": {
            "name": "test_encoding",
            "location": 59,
            "return": [],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_path_encoding": {
            "name": "test_path_encoding",
            "location": 64,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_model_encoding": {
            "name": "test_model_encoding",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_subclass_encoding": {
            "name": "test_subclass_encoding",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_subclass_custom_encoding": {
            "name": "test_subclass_custom_encoding",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_invalid_model": {
            "name": "test_invalid_model",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_iso_timedelta": {
            "name": "test_iso_timedelta",
            "location": 147,
            "return": [],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_custom_encoder": {
            "name": "test_custom_encoder",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_custom_iso_timedelta": {
            "name": "test_custom_iso_timedelta",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "test_con_decimal_encode": {
            "name": "test_con_decimal_encode",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_json_encoder_simple_inheritance": {
            "name": "test_json_encoder_simple_inheritance",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_json_encoder_inheritance_override": {
            "name": "test_json_encoder_inheritance_override",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_custom_encoder_arg": {
            "name": "test_custom_encoder_arg",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_encode_dataclass": {
            "name": "test_encode_dataclass",
            "location": 231,
            "return": [],
            "arguments": {}
        },
        "test_encode_pydantic_dataclass": {
            "name": "test_encode_pydantic_dataclass",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_encode_custom_root": {
            "name": "test_encode_custom_root",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "test_custom_decode_encode": {
            "name": "test_custom_decode_encode",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_json_nested_encode_models": {
            "name": "test_json_nested_encode_models",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_custom_encode_fallback_basemodel": {
            "name": "test_custom_encode_fallback_basemodel",
            "location": 328,
            "return": [],
            "arguments": {}
        },
        "test_custom_encode_error": {
            "name": "test_custom_encode_error",
            "location": 349,
            "return": [],
            "arguments": {}
        },
        "test_recursive": {
            "name": "test_recursive",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_custom_decode_encode.custom_loads": {
            "name": "custom_loads",
            "location": 261,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_custom_decode_encode.custom_dumps": {
            "name": "custom_dumps",
            "location": 266,
            "return": [],
            "arguments": {
                "s": [],
                "default": []
            }
        },
        "test_custom_encode_fallback_basemodel.custom_encoder": {
            "name": "custom_encoder",
            "location": 332,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "test_custom_encode_error.custom_encoder": {
            "name": "custom_encoder",
            "location": 353,
            "return": [],
            "arguments": {
                "o": []
            }
        }
    },
    "pydantic-master/tests/test_main.py": {
        "test_success": {
            "name": "test_success",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_ultra_simple_missing": {
            "name": "test_ultra_simple_missing",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_ultra_simple_failed": {
            "name": "test_ultra_simple_failed",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_ultra_simple_repr": {
            "name": "test_ultra_simple_repr",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_field": {
            "name": "test_default_factory_field",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_no_type_field": {
            "name": "test_default_factory_no_type_field",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_comparing": {
            "name": "test_comparing",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_nullable_strings_success": {
            "name": "test_nullable_strings_success",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_nullable_strings_fails": {
            "name": "test_nullable_strings_fails",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_recursion": {
            "name": "test_recursion",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_recursion_fails": {
            "name": "test_recursion_fails",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_not_required": {
            "name": "test_not_required",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_infer_type": {
            "name": "test_infer_type",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_allow_extra": {
            "name": "test_allow_extra",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_allow_extra_repr": {
            "name": "test_allow_extra_repr",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_forbidden_extra_success": {
            "name": "test_forbidden_extra_success",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "test_forbidden_extra_fails": {
            "name": "test_forbidden_extra_fails",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "test_disallow_mutation": {
            "name": "test_disallow_mutation",
            "location": 250,
            "return": [],
            "arguments": {}
        },
        "test_extra_allowed": {
            "name": "test_extra_allowed",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_extra_ignored": {
            "name": "test_extra_ignored",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "test_set_attr": {
            "name": "test_set_attr",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test_set_attr_invalid": {
            "name": "test_set_attr_invalid",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_any": {
            "name": "test_any",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_alias": {
            "name": "test_alias",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_population_by_field_name": {
            "name": "test_population_by_field_name",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "test_field_order": {
            "name": "test_field_order",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_required": {
            "name": "test_required",
            "location": 373,
            "return": [],
            "arguments": {}
        },
        "test_mutability": {
            "name": "test_mutability",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_immutability": {
            "name": "test_immutability",
            "location": 404,
            "return": [],
            "arguments": {
                "allow_mutation_": [],
                "frozen_": []
            }
        },
        "test_not_frozen_are_not_hashable": {
            "name": "test_not_frozen_are_not_hashable",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "test_with_declared_hash": {
            "name": "test_with_declared_hash",
            "location": 431,
            "return": [],
            "arguments": {}
        },
        "test_frozen_with_hashable_fields_are_hashable": {
            "name": "test_frozen_with_hashable_fields_are_hashable",
            "location": 452,
            "return": [],
            "arguments": {}
        },
        "test_frozen_with_unhashable_fields_are_not_hashable": {
            "name": "test_frozen_with_unhashable_fields_are_not_hashable",
            "location": 464,
            "return": [],
            "arguments": {}
        },
        "test_hash_function_give_different_result_for_different_object": {
            "name": "test_hash_function_give_different_result_for_different_object",
            "location": 478,
            "return": [],
            "arguments": {}
        },
        "test_const_validates": {
            "name": "test_const_validates",
            "location": 502,
            "return": [],
            "arguments": {}
        },
        "test_const_uses_default": {
            "name": "test_const_uses_default",
            "location": 510,
            "return": [],
            "arguments": {}
        },
        "test_const_validates_after_type_validators": {
            "name": "test_const_validates_after_type_validators",
            "location": 518,
            "return": [],
            "arguments": {}
        },
        "test_const_with_wrong_value": {
            "name": "test_const_with_wrong_value",
            "location": 527,
            "return": [],
            "arguments": {}
        },
        "test_const_with_validator": {
            "name": "test_const_with_validator",
            "location": 544,
            "return": [],
            "arguments": {}
        },
        "test_const_list": {
            "name": "test_const_list",
            "location": 565,
            "return": [],
            "arguments": {}
        },
        "test_const_list_with_wrong_value": {
            "name": "test_const_list_with_wrong_value",
            "location": 604,
            "return": [],
            "arguments": {}
        },
        "test_const_validation_json_serializable": {
            "name": "test_const_validation_json_serializable",
            "location": 657,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_pass": {
            "name": "test_validating_assignment_pass",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_fail": {
            "name": "test_validating_assignment_fail",
            "location": 691,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_pre_root_validator_fail": {
            "name": "test_validating_assignment_pre_root_validator_fail",
            "location": 712,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_post_root_validator_fail": {
            "name": "test_validating_assignment_post_root_validator_fail",
            "location": 738,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_many_values_change": {
            "name": "test_root_validator_many_values_change",
            "location": 782,
            "return": [],
            "arguments": {}
        },
        "test_enum_values": {
            "name": "test_enum_values",
            "location": 804,
            "return": [],
            "arguments": {}
        },
        "test_literal_enum_values": {
            "name": "test_literal_enum_values",
            "location": 819,
            "return": [],
            "arguments": {}
        },
        "test_enum_raw": {
            "name": "test_enum_raw",
            "location": 846,
            "return": [],
            "arguments": {}
        },
        "test_set_tuple_values": {
            "name": "test_set_tuple_values",
            "location": 858,
            "return": [],
            "arguments": {}
        },
        "test_default_copy": {
            "name": "test_default_copy",
            "location": 869,
            "return": [],
            "arguments": {}
        },
        "test_arbitrary_type_allowed_validation_success": {
            "name": "test_arbitrary_type_allowed_validation_success",
            "location": 882,
            "return": [],
            "arguments": {}
        },
        "test_arbitrary_type_allowed_validation_fails": {
            "name": "test_arbitrary_type_allowed_validation_fails",
            "location": 894,
            "return": [],
            "arguments": {}
        },
        "test_arbitrary_types_not_allowed": {
            "name": "test_arbitrary_types_not_allowed",
            "location": 916,
            "return": [],
            "arguments": {}
        },
        "test_type_type_validation_success": {
            "name": "test_type_type_validation_success",
            "location": 925,
            "return": [],
            "arguments": {}
        },
        "test_type_type_subclass_validation_success": {
            "name": "test_type_type_subclass_validation_success",
            "location": 934,
            "return": [],
            "arguments": {}
        },
        "test_type_type_validation_fails_for_instance": {
            "name": "test_type_type_validation_fails_for_instance",
            "location": 946,
            "return": [],
            "arguments": {}
        },
        "test_type_type_validation_fails_for_basic_type": {
            "name": "test_type_type_validation_fails_for_basic_type",
            "location": 965,
            "return": [],
            "arguments": {}
        },
        "test_bare_type_type_validation_success": {
            "name": "test_bare_type_type_validation_success",
            "location": 981,
            "return": [],
            "arguments": {}
        },
        "test_bare_type_type_validation_fails": {
            "name": "test_bare_type_type_validation_fails",
            "location": 990,
            "return": [],
            "arguments": {}
        },
        "test_annotation_field_name_shadows_attribute": {
            "name": "test_annotation_field_name_shadows_attribute",
            "location": 1000,
            "return": [],
            "arguments": {}
        },
        "test_value_field_name_shadows_attribute": {
            "name": "test_value_field_name_shadows_attribute",
            "location": 1007,
            "return": [],
            "arguments": {}
        },
        "test_class_var": {
            "name": "test_class_var",
            "location": 1015,
            "return": [],
            "arguments": {}
        },
        "test_fields_set": {
            "name": "test_fields_set",
            "location": 1030,
            "return": [],
            "arguments": {}
        },
        "test_exclude_unset_dict": {
            "name": "test_exclude_unset_dict",
            "location": 1045,
            "return": [],
            "arguments": {}
        },
        "test_exclude_unset_recursive": {
            "name": "test_exclude_unset_recursive",
            "location": 1057,
            "return": [],
            "arguments": {}
        },
        "test_dict_exclude_unset_populated_by_alias": {
            "name": "test_dict_exclude_unset_populated_by_alias",
            "location": 1073,
            "return": [],
            "arguments": {}
        },
        "test_dict_exclude_unset_populated_by_alias_with_extra": {
            "name": "test_dict_exclude_unset_populated_by_alias_with_extra",
            "location": 1087,
            "return": [],
            "arguments": {}
        },
        "test_exclude_defaults": {
            "name": "test_exclude_defaults",
            "location": 1101,
            "return": [],
            "arguments": {}
        },
        "test_dir_fields": {
            "name": "test_dir_fields",
            "location": 1130,
            "return": [],
            "arguments": {}
        },
        "test_dict_with_extra_keys": {
            "name": "test_dict_with_extra_keys",
            "location": 1143,
            "return": [],
            "arguments": {}
        },
        "test_root": {
            "name": "test_root",
            "location": 1155,
            "return": [],
            "arguments": {}
        },
        "test_root_list": {
            "name": "test_root_list",
            "location": 1164,
            "return": [],
            "arguments": {}
        },
        "test_root_nested": {
            "name": "test_root_nested",
            "location": 1173,
            "return": [],
            "arguments": {}
        },
        "test_encode_nested_root": {
            "name": "test_encode_nested_root",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "test_root_failed": {
            "name": "test_root_failed",
            "location": 1204,
            "return": [],
            "arguments": {}
        },
        "test_root_undefined_failed": {
            "name": "test_root_undefined_failed",
            "location": 1212,
            "return": [],
            "arguments": {}
        },
        "test_parse_root_as_mapping": {
            "name": "test_parse_root_as_mapping",
            "location": 1221,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_non_mapping_root": {
            "name": "test_parse_obj_non_mapping_root",
            "location": 1234,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_nested_root": {
            "name": "test_parse_obj_nested_root",
            "location": 1252,
            "return": [],
            "arguments": {}
        },
        "test_untouched_types": {
            "name": "test_untouched_types",
            "location": 1306,
            "return": [],
            "arguments": {}
        },
        "test_custom_types_fail_without_keep_untouched": {
            "name": "test_custom_types_fail_without_keep_untouched",
            "location": 1330,
            "return": [],
            "arguments": {}
        },
        "test_model_iteration": {
            "name": "test_model_iteration",
            "location": 1369,
            "return": [],
            "arguments": {}
        },
        "test_model_export_nested_list": {
            "name": "test_model_export_nested_list",
            "location": 1449,
            "return": [],
            "arguments": {
                "exclude": [],
                "expected": [],
                "raises_match": []
            }
        },
        "test_model_export_dict_exclusion": {
            "name": "test_model_export_dict_exclusion",
            "location": 1485,
            "return": [],
            "arguments": {
                "excludes": [],
                "expected": []
            }
        },
        "test_model_exclude_config_field_merging": {
            "name": "test_model_exclude_config_field_merging",
            "location": 1497,
            "return": [],
            "arguments": {}
        },
        "test_model_exclude_copy_on_model_validation": {
            "name": "test_model_exclude_copy_on_model_validation",
            "location": 1531,
            "return": [],
            "arguments": {}
        },
        "test_validation_deep_copy": {
            "name": "test_validation_deep_copy",
            "location": 1570,
            "return": [],
            "arguments": {}
        },
        "test_model_export_exclusion_with_fields_and_config": {
            "name": "test_model_export_exclusion_with_fields_and_config",
            "location": 1606,
            "return": [],
            "arguments": {
                "kinds": [],
                "exclude": [],
                "expected": []
            }
        },
        "test_model_export_exclusion_inheritance": {
            "name": "test_model_export_exclusion_inheritance",
            "location": 1647,
            "return": [],
            "arguments": {}
        },
        "test_model_export_with_true_instead_of_ellipsis": {
            "name": "test_model_export_with_true_instead_of_ellipsis",
            "location": 1673,
            "return": [],
            "arguments": {}
        },
        "test_model_export_inclusion": {
            "name": "test_model_export_inclusion",
            "location": 1690,
            "return": [],
            "arguments": {}
        },
        "test_model_export_inclusion_inheritance": {
            "name": "test_model_export_inclusion_inheritance",
            "location": 1716,
            "return": [],
            "arguments": {}
        },
        "test_custom_init_subclass_params": {
            "name": "test_custom_init_subclass_params",
            "location": 1745,
            "return": [],
            "arguments": {}
        },
        "test_update_forward_refs_does_not_modify_module_dict": {
            "name": "test_update_forward_refs_does_not_modify_module_dict",
            "location": 1761,
            "return": [],
            "arguments": {}
        },
        "test_two_defaults": {
            "name": "test_two_defaults",
            "location": 1770,
            "return": [],
            "arguments": {}
        },
        "test_default_factory": {
            "name": "test_default_factory",
            "location": 1777,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_called_once": {
            "name": "test_default_factory_called_once",
            "location": 1816,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_called_once_2": {
            "name": "test_default_factory_called_once_2",
            "location": 1837,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_validate_children": {
            "name": "test_default_factory_validate_children",
            "location": 1856,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_parse": {
            "name": "test_default_factory_parse",
            "location": 1872,
            "return": [],
            "arguments": {}
        },
        "test_none_min_max_items": {
            "name": "test_none_min_max_items",
            "location": 1886,
            "return": [],
            "arguments": {}
        },
        "test_reuse_same_field": {
            "name": "test_reuse_same_field",
            "location": 1903,
            "return": [],
            "arguments": {}
        },
        "test_base_config_type_hinting": {
            "name": "test_base_config_type_hinting",
            "location": 1918,
            "return": [],
            "arguments": {}
        },
        "test_allow_mutation_field": {
            "name": "test_allow_mutation_field",
            "location": 1925,
            "return": [],
            "arguments": {}
        },
        "test_repr_field": {
            "name": "test_repr_field",
            "location": 1944,
            "return": [],
            "arguments": {}
        },
        "test_inherited_model_field_copy": {
            "name": "test_inherited_model_field_copy",
            "location": 1957,
            "return": [],
            "arguments": {}
        },
        "test_inherited_model_field_untouched": {
            "name": "test_inherited_model_field_untouched",
            "location": 1979,
            "return": [],
            "arguments": {}
        },
        "test_mapping_retains_type_subclass": {
            "name": "test_mapping_retains_type_subclass",
            "location": 2004,
            "return": [],
            "arguments": {}
        },
        "test_mapping_retains_type_defaultdict": {
            "name": "test_mapping_retains_type_defaultdict",
            "location": 2017,
            "return": [],
            "arguments": {}
        },
        "test_mapping_retains_type_fallback_error": {
            "name": "test_mapping_retains_type_fallback_error",
            "location": 2031,
            "return": [],
            "arguments": {}
        },
        "test_typing_coercion_dict": {
            "name": "test_typing_coercion_dict",
            "location": 2049,
            "return": [],
            "arguments": {}
        },
        "test_typing_non_coercion_of_dict_subclasses": {
            "name": "test_typing_non_coercion_of_dict_subclasses",
            "location": 2057,
            "return": [],
            "arguments": {}
        },
        "test_typing_coercion_defaultdict": {
            "name": "test_typing_coercion_defaultdict",
            "location": 2077,
            "return": [],
            "arguments": {}
        },
        "test_typing_coercion_counter": {
            "name": "test_typing_coercion_counter",
            "location": 2088,
            "return": [],
            "arguments": {}
        },
        "test_typing_counter_value_validation": {
            "name": "test_typing_counter_value_validation",
            "location": 2096,
            "return": [],
            "arguments": {}
        },
        "test_class_kwargs_config": {
            "name": "test_class_kwargs_config",
            "location": 2112,
            "return": [],
            "arguments": {}
        },
        "test_class_kwargs_config_json_encoders": {
            "name": "test_class_kwargs_config_json_encoders",
            "location": 2128,
            "return": [],
            "arguments": {}
        },
        "test_class_kwargs_config_and_attr_conflict": {
            "name": "test_class_kwargs_config_and_attr_conflict",
            "location": 2135,
            "return": [],
            "arguments": {}
        },
        "test_class_kwargs_custom_config": {
            "name": "test_class_kwargs_custom_config",
            "location": 2148,
            "return": [],
            "arguments": {}
        },
        "test_new_union_origin": {
            "name": "test_new_union_origin",
            "location": 2160,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_field.myfunc": {
            "name": "myfunc",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_no_type_field.myfunc": {
            "name": "myfunc",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_default_factory_called_once_2.factory": {
            "name": "factory",
            "location": 1842,
            "return": [],
            "arguments": {}
        },
        "test_with_declared_hash.Foo.__hash__": {
            "name": "__hash__",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_with_declared_hash.Bar.__hash__": {
            "name": "__hash__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_const_with_validator.Model.validate": {
            "name": "validate",
            "location": 549,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_validating_assignment_pre_root_validator_fail.Model.values_are_not_string": {
            "name": "values_are_not_string",
            "location": 721,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_validating_assignment_post_root_validator_fail.Model.current_lessequal_max": {
            "name": "current_lessequal_max",
            "location": 747,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_validating_assignment_post_root_validator_fail.Model.current_lessequal_300": {
            "name": "current_lessequal_300",
            "location": 755,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_validating_assignment_post_root_validator_fail.Model.current_lessequal_500": {
            "name": "current_lessequal_500",
            "location": 762,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_many_values_change.Rectangle.set_area": {
            "name": "set_area",
            "location": 794,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_untouched_types._ClassPropertyDescriptor.__init__": {
            "name": "__init__",
            "location": 1310,
            "return": [],
            "arguments": {
                "self": [],
                "getter": []
            }
        },
        "test_untouched_types._ClassPropertyDescriptor.__get__": {
            "name": "__get__",
            "location": 1313,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "test_untouched_types.Model.class_name": {
            "name": "class_name",
            "location": 1323,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_custom_types_fail_without_keep_untouched._ClassPropertyDescriptor.__init__": {
            "name": "__init__",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "getter": []
            }
        },
        "test_custom_types_fail_without_keep_untouched._ClassPropertyDescriptor.__get__": {
            "name": "__get__",
            "location": 1337,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "test_custom_types_fail_without_keep_untouched.Model.class_name": {
            "name": "class_name",
            "location": 1346,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_custom_init_subclass_params.DerivedModel.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 1747,
            "return": [],
            "arguments": {
                "cls": [],
                "something": []
            }
        },
        "test_default_factory_called_once.Seq.__init__": {
            "name": "__init__",
            "location": 1820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_default_factory_called_once.Seq.__call__": {
            "name": "__call__",
            "location": 1823,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_inherited_model_field_copy.Image.__hash__": {
            "name": "__hash__",
            "location": 1963,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_inherited_model_field_untouched.Image.__hash__": {
            "name": "__hash__",
            "location": 1985,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_mapping_retains_type_fallback_error.CustomMap.__init__": {
            "name": "__init__",
            "location": 2033,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_typing_non_coercion_of_dict_subclasses.MyDict.__repr__": {
            "name": "__repr__",
            "location": 2062,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/test_model_signature.py": {
        "_equals": {
            "name": "_equals",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_model_signature": {
            "name": "test_model_signature",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_custom_init_signature": {
            "name": "test_custom_init_signature",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_custom_init_signature_with_no_var_kw": {
            "name": "test_custom_init_signature_with_no_var_kw",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_invalid_identifiers_signature": {
            "name": "test_invalid_identifiers_signature",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_use_field_name": {
            "name": "test_use_field_name",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_extra_allow_no_conflict": {
            "name": "test_extra_allow_no_conflict",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_extra_allow_conflict": {
            "name": "test_extra_allow_conflict",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_extra_allow_conflict_twice": {
            "name": "test_extra_allow_conflict_twice",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_extra_allow_conflict_custom_signature": {
            "name": "test_extra_allow_conflict_custom_signature",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_signature_is_class_only": {
            "name": "test_signature_is_class_only",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_custom_init_signature.MyModel.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "bar": []
            }
        },
        "test_custom_init_signature_with_no_var_kw.Model.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "test_extra_allow_conflict_custom_signature.Model.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "extra_data": []
            }
        },
        "test_signature_is_class_only.Model.__call__": {
            "name": "__call__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        }
    },
    "pydantic-master/tests/test_networks.py": {
        "test_any_url_success": {
            "name": "test_any_url_success",
            "location": 86,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_any_url_invalid": {
            "name": "test_any_url_invalid",
            "location": 143,
            "return": [],
            "arguments": {
                "value": [],
                "err_type": [],
                "err_msg": [],
                "err_ctx": []
            }
        },
        "validate_url": {
            "name": "validate_url",
            "location": 157,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_any_url_parts": {
            "name": "test_any_url_parts",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_url_repr": {
            "name": "test_url_repr",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_ipv4_port": {
            "name": "test_ipv4_port",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_ipv4_no_port": {
            "name": "test_ipv4_no_port",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "test_ipv6_port": {
            "name": "test_ipv6_port",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_int_domain": {
            "name": "test_int_domain",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_co_uk": {
            "name": "test_co_uk",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "test_user_no_password": {
            "name": "test_user_no_password",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_user_info_no_user": {
            "name": "test_user_info_no_user",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "test_at_in_path": {
            "name": "test_at_in_path",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "test_fragment_without_query": {
            "name": "test_fragment_without_query",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_http_url_success": {
            "name": "test_http_url_success",
            "location": 289,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_http_url_invalid": {
            "name": "test_http_url_invalid",
            "location": 317,
            "return": [],
            "arguments": {
                "value": [],
                "err_type": [],
                "err_msg": [],
                "err_ctx": []
            }
        },
        "test_coerse_url": {
            "name": "test_coerse_url",
            "location": 344,
            "return": [],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_parses_tld": {
            "name": "test_parses_tld",
            "location": 364,
            "return": [],
            "arguments": {
                "input": [],
                "output": []
            }
        },
        "test_file_url_success": {
            "name": "test_file_url_success",
            "location": 375,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_get_default_parts": {
            "name": "test_get_default_parts",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_http_urls_default_port": {
            "name": "test_http_urls_default_port",
            "location": 412,
            "return": [],
            "arguments": {
                "url": [],
                "port": []
            }
        },
        "test_postgres_dsns": {
            "name": "test_postgres_dsns",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "test_amqp_dsns": {
            "name": "test_amqp_dsns",
            "location": 448,
            "return": [],
            "arguments": {}
        },
        "test_redis_dsns": {
            "name": "test_redis_dsns",
            "location": 479,
            "return": [],
            "arguments": {}
        },
        "test_kafka_dsns": {
            "name": "test_kafka_dsns",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "test_custom_schemes": {
            "name": "test_custom_schemes",
            "location": 535,
            "return": [],
            "arguments": {}
        },
        "test_build_url": {
            "name": "test_build_url",
            "location": 564,
            "return": [],
            "arguments": {
                "kwargs": [],
                "expected": []
            }
        },
        "test_build_any_http_url": {
            "name": "test_build_any_http_url",
            "location": 586,
            "return": [],
            "arguments": {
                "klass": [],
                "kwargs": [],
                "expected": []
            }
        },
        "test_build_http_url_port": {
            "name": "test_build_http_url_port",
            "location": 599,
            "return": [],
            "arguments": {
                "klass": [],
                "kwargs": [],
                "expected": []
            }
        },
        "test_son": {
            "name": "test_son",
            "location": 603,
            "return": [],
            "arguments": {}
        },
        "test_address_valid": {
            "name": "test_address_valid",
            "location": 644,
            "return": [],
            "arguments": {
                "value": [],
                "name": [],
                "email": []
            }
        },
        "test_address_invalid": {
            "name": "test_address_invalid",
            "location": 673,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_email_validator_not_installed": {
            "name": "test_email_validator_not_installed",
            "location": 679,
            "return": [],
            "arguments": {}
        },
        "test_email_str": {
            "name": "test_email_str",
            "location": 685,
            "return": [],
            "arguments": {}
        },
        "test_name_email": {
            "name": "test_name_email",
            "location": 694,
            "return": [],
            "arguments": {}
        },
        "test_get_default_parts.MyConnectionString.get_default_parts": {
            "name": "get_default_parts",
            "location": 385,
            "return": [],
            "arguments": {
                "parts": []
            }
        }
    },
    "pydantic-master/tests/test_networks_ipaddress.py": {
        "test_ipaddress_success": {
            "name": "test_ipaddress_success",
            "location": 42,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ipv4address_success": {
            "name": "test_ipv4address_success",
            "location": 74,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_ipv6address_success": {
            "name": "test_ipv6address_success",
            "location": 94,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_ipaddress_fails": {
            "name": "test_ipaddress_fails",
            "location": 122,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ipv4address_fails": {
            "name": "test_ipv4address_fails",
            "location": 153,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ipv6address_fails": {
            "name": "test_ipv6address_fails",
            "location": 184,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ipnetwork_success": {
            "name": "test_ipnetwork_success",
            "location": 215,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ip_v4_network_success": {
            "name": "test_ip_v4_network_success",
            "location": 233,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ip_v6_network_success": {
            "name": "test_ip_v6_network_success",
            "location": 250,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ipnetwork_fails": {
            "name": "test_ipnetwork_fails",
            "location": 278,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ip_v4_network_fails": {
            "name": "test_ip_v4_network_fails",
            "location": 309,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ip_v6_network_fails": {
            "name": "test_ip_v6_network_fails",
            "location": 340,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ipinterface_success": {
            "name": "test_ipinterface_success",
            "location": 383,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ip_v4_interface_success": {
            "name": "test_ip_v4_interface_success",
            "location": 407,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ip_v6_interface_success": {
            "name": "test_ip_v6_interface_success",
            "location": 429,
            "return": [],
            "arguments": {
                "value": [],
                "cls": []
            }
        },
        "test_ipinterface_fails": {
            "name": "test_ipinterface_fails",
            "location": 481,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ip_v4_interface_fails": {
            "name": "test_ip_v4_interface_fails",
            "location": 508,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_ip_v6_interface_fails": {
            "name": "test_ip_v6_interface_fails",
            "location": 535,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        }
    },
    "pydantic-master/tests/test_orm_mode.py": {
        "test_getdict": {
            "name": "test_getdict",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_orm_mode_root": {
            "name": "test_orm_mode_root",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_orm_mode": {
            "name": "test_orm_mode",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_not_orm_mode": {
            "name": "test_not_orm_mode",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_object_with_getattr": {
            "name": "test_object_with_getattr",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_properties": {
            "name": "test_properties",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "test_extra_allow": {
            "name": "test_extra_allow",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_extra_forbid": {
            "name": "test_extra_forbid",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_root_validator": {
            "name": "test_root_validator",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "test_custom_getter_dict": {
            "name": "test_custom_getter_dict",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "test_custom_getter_dict_derived_model_class": {
            "name": "test_custom_getter_dict_derived_model_class",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "test_recursive_parsing": {
            "name": "test_recursive_parsing",
            "location": 307,
            "return": [],
            "arguments": {}
        },
        "test_nested_orm": {
            "name": "test_nested_orm",
            "location": 341,
            "return": [],
            "arguments": {}
        },
        "test_custom_getter_dict.custom_getter_dict": {
            "name": "custom_getter_dict",
            "location": 256,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_getdict.TestCls.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_getdict.TestCls.d": {
            "name": "d",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_getdict.TestCls.__getattr__": {
            "name": "__getattr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "test_orm_mode_root.PokemonCls.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_orm_mode.PetCls.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_orm_mode.PersonCls.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_object_with_getattr.FooGetAttr.__getattr__": {
            "name": "__getattr__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "test_properties.XyProperty.y": {
            "name": "y",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_root_validator.Model.change_input_data": {
            "name": "change_input_data",
            "location": 237,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "test_custom_getter_dict_derived_model_class.CustomCollection.__iter__": {
            "name": "__iter__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_getter_dict_derived_model_class.Example.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_getter_dict_derived_model_class.MyGetterDict.get": {
            "name": "get",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "test_recursive_parsing.Getter.get": {
            "name": "get",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        }
    },
    "pydantic-master/tests/test_parse.py": {
        "test_obj": {
            "name": "test_obj",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_fails": {
            "name": "test_parse_obj_fails",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_submodel": {
            "name": "test_parse_obj_submodel",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_wrong_model": {
            "name": "test_parse_obj_wrong_model",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_root": {
            "name": "test_parse_obj_root",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_parse_root_list": {
            "name": "test_parse_root_list",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_parse_nested_root_list": {
            "name": "test_parse_nested_root_list",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_parse_nested_root_tuple": {
            "name": "test_parse_nested_root_tuple",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_parse_nested_custom_root": {
            "name": "test_parse_nested_custom_root",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_json": {
            "name": "test_json",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_json_ct": {
            "name": "test_json_ct",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_pickle_ct": {
            "name": "test_pickle_ct",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_pickle_proto": {
            "name": "test_pickle_proto",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "test_pickle_not_allowed": {
            "name": "test_pickle_not_allowed",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_bad_ct": {
            "name": "test_bad_ct",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_bad_proto": {
            "name": "test_bad_proto",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_file_json": {
            "name": "test_file_json",
            "location": 147,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_file_json_no_ext": {
            "name": "test_file_json_no_ext",
            "location": 153,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_file_json_loads": {
            "name": "test_file_json_loads",
            "location": 159,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_file_pickle": {
            "name": "test_file_pickle",
            "location": 177,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_file_pickle_no_ext": {
            "name": "test_file_pickle_no_ext",
            "location": 183,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_const_differentiates_union": {
            "name": "test_const_differentiates_union",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_file_json_loads.custom_json_loads": {
            "name": "custom_json_loads",
            "location": 160,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_private_attributes.py": {
        "test_private_attribute": {
            "name": "test_private_attribute",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_factory": {
            "name": "test_private_attribute_factory",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_annotation": {
            "name": "test_private_attribute_annotation",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_underscore_attrs_are_private": {
            "name": "test_underscore_attrs_are_private",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_intersection_with_extra_field": {
            "name": "test_private_attribute_intersection_with_extra_field",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_invalid_name": {
            "name": "test_private_attribute_invalid_name",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_slots_are_ignored": {
            "name": "test_slots_are_ignored",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_default_and_default_factory_used_error": {
            "name": "test_default_and_default_factory_used_error",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_config_override_init": {
            "name": "test_config_override_init",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "test_generic_private_attribute": {
            "name": "test_generic_private_attribute",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_multiple_inheritance": {
            "name": "test_private_attribute_multiple_inheritance",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_private_attribute_factory.factory": {
            "name": "factory",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_slots_are_ignored.Model.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_config_override_init.MyModel.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/test_schema.py": {
        "test_key": {
            "name": "test_key",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_by_alias": {
            "name": "test_by_alias",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_ref_template": {
            "name": "test_ref_template",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_by_alias_generator": {
            "name": "test_by_alias_generator",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_sub_model": {
            "name": "test_sub_model",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_schema_class": {
            "name": "test_schema_class",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_schema_repr": {
            "name": "test_schema_repr",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_schema_class_by_alias": {
            "name": "test_schema_class_by_alias",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_choices": {
            "name": "test_choices",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "test_enum_modify_schema": {
            "name": "test_enum_modify_schema",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "test_enum_schema_custom_field": {
            "name": "test_enum_schema_custom_field",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_enum_and_model_have_same_behaviour": {
            "name": "test_enum_and_model_have_same_behaviour",
            "location": 344,
            "return": [],
            "arguments": {}
        },
        "test_enum_includes_extra_without_other_params": {
            "name": "test_enum_includes_extra_without_other_params",
            "location": 402,
            "return": [],
            "arguments": {}
        },
        "test_list_enum_schema_extras": {
            "name": "test_list_enum_schema_extras",
            "location": 431,
            "return": [],
            "arguments": {}
        },
        "test_json_schema": {
            "name": "test_json_schema",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "test_list_sub_model": {
            "name": "test_list_sub_model",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "test_optional": {
            "name": "test_optional",
            "location": 507,
            "return": [],
            "arguments": {}
        },
        "test_any": {
            "name": "test_any",
            "location": 514,
            "return": [],
            "arguments": {}
        },
        "test_set": {
            "name": "test_set",
            "location": 529,
            "return": [],
            "arguments": {}
        },
        "test_const_str": {
            "name": "test_const_str",
            "location": 545,
            "return": [],
            "arguments": {}
        },
        "test_const_false": {
            "name": "test_const_false",
            "location": 556,
            "return": [],
            "arguments": {}
        },
        "test_tuple": {
            "name": "test_tuple",
            "location": 588,
            "return": [],
            "arguments": {
                "field_type": [],
                "extra_props": []
            }
        },
        "test_deque": {
            "name": "test_deque",
            "location": 600,
            "return": [],
            "arguments": {}
        },
        "test_bool": {
            "name": "test_bool",
            "location": 612,
            "return": [],
            "arguments": {}
        },
        "test_strict_bool": {
            "name": "test_strict_bool",
            "location": 624,
            "return": [],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 648,
            "return": [],
            "arguments": {}
        },
        "test_list_union_dict": {
            "name": "test_list_union_dict",
            "location": 712,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_date_types": {
            "name": "test_date_types",
            "location": 731,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_str_basic_types": {
            "name": "test_str_basic_types",
            "location": 767,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_str_constrained_types": {
            "name": "test_str_constrained_types",
            "location": 787,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_special_str_types": {
            "name": "test_special_str_types",
            "location": 809,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_email_str_types": {
            "name": "test_email_str_types",
            "location": 821,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_secret_types": {
            "name": "test_secret_types",
            "location": 837,
            "return": [],
            "arguments": {
                "field_type": [],
                "inner_type": []
            }
        },
        "test_special_int_types": {
            "name": "test_special_int_types",
            "location": 864,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_special_float_types": {
            "name": "test_special_float_types",
            "location": 896,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_uuid_types": {
            "name": "test_uuid_types",
            "location": 915,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_path_types": {
            "name": "test_path_types",
            "location": 933,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_json_type": {
            "name": "test_json_type",
            "location": 948,
            "return": [],
            "arguments": {}
        },
        "test_ipv4address_type": {
            "name": "test_ipv4address_type",
            "location": 964,
            "return": [],
            "arguments": {}
        },
        "test_ipv6address_type": {
            "name": "test_ipv6address_type",
            "location": 977,
            "return": [],
            "arguments": {}
        },
        "test_ipvanyaddress_type": {
            "name": "test_ipvanyaddress_type",
            "location": 990,
            "return": [],
            "arguments": {}
        },
        "test_ipv4interface_type": {
            "name": "test_ipv4interface_type",
            "location": 1003,
            "return": [],
            "arguments": {}
        },
        "test_ipv6interface_type": {
            "name": "test_ipv6interface_type",
            "location": 1016,
            "return": [],
            "arguments": {}
        },
        "test_ipvanyinterface_type": {
            "name": "test_ipvanyinterface_type",
            "location": 1029,
            "return": [],
            "arguments": {}
        },
        "test_ipv4network_type": {
            "name": "test_ipv4network_type",
            "location": 1042,
            "return": [],
            "arguments": {}
        },
        "test_ipv6network_type": {
            "name": "test_ipv6network_type",
            "location": 1055,
            "return": [],
            "arguments": {}
        },
        "test_ipvanynetwork_type": {
            "name": "test_ipvanynetwork_type",
            "location": 1068,
            "return": [],
            "arguments": {}
        },
        "test_callable_type": {
            "name": "test_callable_type",
            "location": 1090,
            "return": [],
            "arguments": {
                "type_": [],
                "default_value": []
            }
        },
        "test_error_non_supported_types": {
            "name": "test_error_non_supported_types",
            "location": 1101,
            "return": [],
            "arguments": {}
        },
        "create_testing_submodules": {
            "name": "create_testing_submodules",
            "location": 1109,
            "return": [],
            "arguments": {}
        },
        "test_flat_models_unique_models": {
            "name": "test_flat_models_unique_models",
            "location": 1130,
            "return": [],
            "arguments": {}
        },
        "test_flat_models_with_submodels": {
            "name": "test_flat_models_with_submodels",
            "location": 1140,
            "return": [],
            "arguments": {}
        },
        "test_flat_models_with_submodels_from_sequence": {
            "name": "test_flat_models_with_submodels_from_sequence",
            "location": 1154,
            "return": [],
            "arguments": {}
        },
        "test_model_name_maps": {
            "name": "test_model_name_maps",
            "location": 1172,
            "return": [],
            "arguments": {}
        },
        "test_schema_overrides": {
            "name": "test_schema_overrides",
            "location": 1200,
            "return": [],
            "arguments": {}
        },
        "test_schema_overrides_w_union": {
            "name": "test_schema_overrides_w_union",
            "location": 1236,
            "return": [],
            "arguments": {}
        },
        "test_schema_from_models": {
            "name": "test_schema_from_models",
            "location": 1255,
            "return": [],
            "arguments": {}
        },
        "test_schema_with_refs": {
            "name": "test_schema_with_refs",
            "location": 1339,
            "return": [],
            "arguments": {
                "ref_prefix": [],
                "ref_template": []
            }
        },
        "test_schema_with_custom_ref_template": {
            "name": "test_schema_with_custom_ref_template",
            "location": 1374,
            "return": [],
            "arguments": {}
        },
        "test_schema_ref_template_key_error": {
            "name": "test_schema_ref_template_key_error",
            "location": 1409,
            "return": [],
            "arguments": {}
        },
        "test_schema_no_definitions": {
            "name": "test_schema_no_definitions",
            "location": 1423,
            "return": [],
            "arguments": {}
        },
        "test_list_default": {
            "name": "test_list_default",
            "location": 1428,
            "return": [],
            "arguments": {}
        },
        "test_enum_str_default": {
            "name": "test_enum_str_default",
            "location": 1439,
            "return": [],
            "arguments": {}
        },
        "test_enum_int_default": {
            "name": "test_enum_int_default",
            "location": 1449,
            "return": [],
            "arguments": {}
        },
        "test_dict_default": {
            "name": "test_dict_default",
            "location": 1459,
            "return": [],
            "arguments": {}
        },
        "test_constraints_schema": {
            "name": "test_constraints_schema",
            "location": 1506,
            "return": [],
            "arguments": {
                "kwargs": [],
                "type_": [],
                "expected_extra": []
            }
        },
        "test_unenforced_constraints_schema": {
            "name": "test_unenforced_constraints_schema",
            "location": 1539,
            "return": [],
            "arguments": {
                "kwargs": [],
                "type_": []
            }
        },
        "test_constraints_schema_validation": {
            "name": "test_constraints_schema_validation",
            "location": 1578,
            "return": [],
            "arguments": {
                "kwargs": [],
                "type_": [],
                "value": []
            }
        },
        "test_constraints_schema_validation_raises": {
            "name": "test_constraints_schema_validation_raises",
            "location": 1605,
            "return": [],
            "arguments": {
                "kwargs": [],
                "type_": [],
                "value": []
            }
        },
        "test_schema_kwargs": {
            "name": "test_schema_kwargs",
            "location": 1613,
            "return": [],
            "arguments": {}
        },
        "test_schema_dict_constr": {
            "name": "test_schema_dict_constr",
            "location": 1624,
            "return": [],
            "arguments": {}
        },
        "test_bytes_constrained_types": {
            "name": "test_bytes_constrained_types",
            "location": 1651,
            "return": [],
            "arguments": {
                "field_type": [],
                "expected_schema": []
            }
        },
        "test_optional_dict": {
            "name": "test_optional_dict",
            "location": 1661,
            "return": [],
            "arguments": {}
        },
        "test_optional_validator": {
            "name": "test_optional_validator",
            "location": 1675,
            "return": [],
            "arguments": {}
        },
        "test_field_with_validator": {
            "name": "test_field_with_validator",
            "location": 1695,
            "return": [],
            "arguments": {}
        },
        "test_unparameterized_schema_generation": {
            "name": "test_unparameterized_schema_generation",
            "location": 1710,
            "return": [],
            "arguments": {}
        },
        "test_known_model_optimization": {
            "name": "test_known_model_optimization",
            "location": 1749,
            "return": [],
            "arguments": {}
        },
        "test_root": {
            "name": "test_root",
            "location": 1778,
            "return": [],
            "arguments": {}
        },
        "test_root_list": {
            "name": "test_root_list",
            "location": 1785,
            "return": [],
            "arguments": {}
        },
        "test_root_nested_model": {
            "name": "test_root_nested_model",
            "location": 1792,
            "return": [],
            "arguments": {}
        },
        "test_new_type_schema": {
            "name": "test_new_type_schema",
            "location": 1814,
            "return": [],
            "arguments": {}
        },
        "test_literal_schema": {
            "name": "test_literal_schema",
            "location": 1836,
            "return": [],
            "arguments": {}
        },
        "test_literal_enum": {
            "name": "test_literal_enum",
            "location": 1862,
            "return": [],
            "arguments": {}
        },
        "test_color_type": {
            "name": "test_color_type",
            "location": 1878,
            "return": [],
            "arguments": {}
        },
        "test_model_with_schema_extra": {
            "name": "test_model_with_schema_extra",
            "location": 1891,
            "return": [],
            "arguments": {}
        },
        "test_model_with_schema_extra_callable": {
            "name": "test_model_with_schema_extra_callable",
            "location": 1907,
            "return": [],
            "arguments": {}
        },
        "test_model_with_schema_extra_callable_no_model_class": {
            "name": "test_model_with_schema_extra_callable_no_model_class",
            "location": 1921,
            "return": [],
            "arguments": {}
        },
        "test_model_with_schema_extra_callable_classmethod": {
            "name": "test_model_with_schema_extra_callable_classmethod",
            "location": 1934,
            "return": [],
            "arguments": {}
        },
        "test_model_with_schema_extra_callable_instance_method": {
            "name": "test_model_with_schema_extra_callable_instance_method",
            "location": 1950,
            "return": [],
            "arguments": {}
        },
        "test_model_with_extra_forbidden": {
            "name": "test_model_with_extra_forbidden",
            "location": 1963,
            "return": [],
            "arguments": {}
        },
        "test_enforced_constraints": {
            "name": "test_enforced_constraints",
            "location": 2034,
            "return": [],
            "arguments": {
                "annotation": [],
                "kwargs": [],
                "field_schema": []
            }
        },
        "test_real_vs_phony_constraints": {
            "name": "test_real_vs_phony_constraints",
            "location": 2043,
            "return": [],
            "arguments": {}
        },
        "test_subfield_field_info": {
            "name": "test_subfield_field_info",
            "location": 2073,
            "return": [],
            "arguments": {}
        },
        "test_dataclass": {
            "name": "test_dataclass",
            "location": 2091,
            "return": [],
            "arguments": {}
        },
        "test_schema_attributes": {
            "name": "test_schema_attributes",
            "location": 2115,
            "return": [],
            "arguments": {}
        },
        "test_model_process_schema_enum": {
            "name": "test_model_process_schema_enum",
            "location": 2145,
            "return": [],
            "arguments": {}
        },
        "test_path_modify_schema": {
            "name": "test_path_modify_schema",
            "location": 2154,
            "return": [],
            "arguments": {}
        },
        "test_frozen_set": {
            "name": "test_frozen_set",
            "location": 2177,
            "return": [],
            "arguments": {}
        },
        "test_iterable": {
            "name": "test_iterable",
            "location": 2203,
            "return": [],
            "arguments": {}
        },
        "test_new_type": {
            "name": "test_new_type",
            "location": 2215,
            "return": [],
            "arguments": {}
        },
        "test_multiple_models_with_same_name": {
            "name": "test_multiple_models_with_same_name",
            "location": 2229,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_multiple_enums_with_same_name": {
            "name": "test_multiple_enums_with_same_name",
            "location": 2267,
            "return": [],
            "arguments": {
                "create_module": []
            }
        },
        "test_schema_for_generic_field": {
            "name": "test_schema_for_generic_field",
            "location": 2319,
            "return": [],
            "arguments": {}
        },
        "test_namedtuple_default": {
            "name": "test_namedtuple_default",
            "location": 2371,
            "return": [],
            "arguments": {}
        },
        "test_advanced_generic_schema": {
            "name": "test_advanced_generic_schema",
            "location": 2395,
            "return": [],
            "arguments": {}
        },
        "test_nested_generic": {
            "name": "test_nested_generic",
            "location": 2505,
            "return": [],
            "arguments": {}
        },
        "test_nested_generic_model": {
            "name": "test_nested_generic_model",
            "location": 2539,
            "return": [],
            "arguments": {}
        },
        "test_complex_nested_generic": {
            "name": "test_complex_nested_generic",
            "location": 2567,
            "return": [],
            "arguments": {}
        },
        "test_schema_with_field_parameter": {
            "name": "test_schema_with_field_parameter",
            "location": 2617,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union": {
            "name": "test_discriminated_union",
            "location": 2638,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_annotated_union": {
            "name": "test_discriminated_annotated_union",
            "location": 2725,
            "return": [],
            "arguments": {}
        },
        "test_alias_same": {
            "name": "test_alias_same",
            "location": 2838,
            "return": [],
            "arguments": {}
        },
        "test_nested_python_dataclasses": {
            "name": "test_nested_python_dataclasses",
            "location": 2889,
            "return": [],
            "arguments": {}
        },
        "test_discriminated_union_in_list": {
            "name": "test_discriminated_union_in_list",
            "location": 2920,
            "return": [],
            "arguments": {}
        },
        "test_enum_modify_schema.SpamEnum.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 283,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "test_optional_validator.Model.check_something": {
            "name": "check_something",
            "location": 1680,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_field_with_validator.Model.check_field": {
            "name": "check_field",
            "location": 1700,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_path_modify_schema.MyPath.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2157,
            "return": [],
            "arguments": {
                "cls": [],
                "schema": []
            }
        },
        "test_schema_for_generic_field.GenModel.__init__": {
            "name": "__init__",
            "location": 2323,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_schema_for_generic_field.GenModel.__get_validators__": {
            "name": "__get_validators__",
            "location": 2327,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_schema_for_generic_field.GenModel.validate": {
            "name": "validate",
            "location": 2331,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_schema_for_generic_field.GenModelModified.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2352,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "test_advanced_generic_schema.Gen.__init__": {
            "name": "__init__",
            "location": 2400,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "test_advanced_generic_schema.Gen.__get_validators__": {
            "name": "__get_validators__",
            "location": 2404,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_advanced_generic_schema.Gen.validate": {
            "name": "validate",
            "location": 2408,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_advanced_generic_schema.Gen.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2412,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "test_advanced_generic_schema.GenTwoParams.__init__": {
            "name": "__init__",
            "location": 2417,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "test_advanced_generic_schema.GenTwoParams.__get_validators__": {
            "name": "__get_validators__",
            "location": 2422,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_advanced_generic_schema.GenTwoParams.validate": {
            "name": "validate",
            "location": 2426,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_advanced_generic_schema.GenTwoParams.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2430,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "test_advanced_generic_schema.CustomType.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2438,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "test_nested_generic.Ref.resolve": {
            "name": "resolve",
            "location": 2513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_complex_nested_generic.Ref.resolve": {
            "name": "resolve",
            "location": 2575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_complex_nested_generic.Model.resolve": {
            "name": "resolve",
            "location": 2582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_schema_with_field_parameter.RestrictedAlphabetStr.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 2620,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": [],
                "field": []
            }
        },
        "test_by_alias_generator.ApplePie.Config.alias_generator": {
            "name": "alias_generator",
            "location": 172,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_model_with_schema_extra_callable.Model.Config.schema_extra": {
            "name": "schema_extra",
            "location": 1913,
            "return": [],
            "arguments": {
                "schema": [],
                "model_class": []
            }
        },
        "test_model_with_schema_extra_callable_no_model_class.Model.Config.schema_extra": {
            "name": "schema_extra",
            "location": 1927,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "test_model_with_schema_extra_callable_classmethod.Model.Config.schema_extra": {
            "name": "schema_extra",
            "location": 1942,
            "return": [],
            "arguments": {
                "cls": [],
                "schema": [],
                "model_class": []
            }
        },
        "test_model_with_schema_extra_callable_instance_method.Model.Config.schema_extra": {
            "name": "schema_extra",
            "location": 1955,
            "return": [],
            "arguments": {
                "schema": [],
                "model_class": []
            }
        }
    },
    "pydantic-master/tests/test_settings.py": {
        "test_sub_env": {
            "name": "test_sub_env",
            "location": 30,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_sub_env_override": {
            "name": "test_sub_env_override",
            "location": 36,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_sub_env_missing": {
            "name": "test_sub_env_missing",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_other_setting": {
            "name": "test_other_setting",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_with_prefix": {
            "name": "test_with_prefix",
            "location": 53,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_nested_env_with_basemodel": {
            "name": "test_nested_env_with_basemodel",
            "location": 67,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_merge_dict": {
            "name": "test_merge_dict",
            "location": 82,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_nested_env_delimiter": {
            "name": "test_nested_env_delimiter",
            "location": 93,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_nested_env_delimiter_complex_required": {
            "name": "test_nested_env_delimiter_complex_required",
            "location": 137,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_nested_env_delimiter_aliases": {
            "name": "test_nested_env_delimiter_aliases",
            "location": 150,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 178,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_set_dict_model": {
            "name": "test_set_dict_model",
            "location": 185,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_invalid_json": {
            "name": "test_invalid_json",
            "location": 195,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_required_sub_model": {
            "name": "test_required_sub_model",
            "location": 201,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_non_class": {
            "name": "test_non_class",
            "location": 212,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_str": {
            "name": "test_env_str",
            "location": 221,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_list": {
            "name": "test_env_list",
            "location": 232,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_list_field": {
            "name": "test_env_list_field",
            "location": 245,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_list_last": {
            "name": "test_env_list_last",
            "location": 254,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_inheritance": {
            "name": "test_env_inheritance",
            "location": 268,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_inheritance_field": {
            "name": "test_env_inheritance_field",
            "location": 290,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_prefix_inheritance_config": {
            "name": "test_env_prefix_inheritance_config",
            "location": 309,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_inheritance_config": {
            "name": "test_env_inheritance_config",
            "location": 355,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_invalid": {
            "name": "test_env_invalid",
            "location": 410,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_field": {
            "name": "test_env_field",
            "location": 420,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_aliases_warning": {
            "name": "test_aliases_warning",
            "location": 427,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_aliases_no_warning": {
            "name": "test_aliases_no_warning",
            "location": 442,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_case_sensitive": {
            "name": "test_case_sensitive",
            "location": 458,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 472,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_takes_precedence": {
            "name": "test_env_takes_precedence",
            "location": 488,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_config_file_settings_nornir": {
            "name": "test_config_file_settings_nornir",
            "location": 510,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_union_with_complex_subfields_parses_json": {
            "name": "test_env_union_with_complex_subfields_parses_json",
            "location": 541,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_union_with_complex_subfields_parses_plain_if_json_fails": {
            "name": "test_env_union_with_complex_subfields_parses_plain_if_json_fails",
            "location": 556,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_union_without_complex_subfields_does_not_parse_json": {
            "name": "test_env_union_without_complex_subfields_does_not_parse_json",
            "location": 571,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_env_file_config": {
            "name": "test_env_file_config",
            "location": 591,
            "return": [],
            "arguments": {
                "env": [],
                "tmp_path": []
            }
        },
        "test_env_file_config_case_sensitive": {
            "name": "test_env_file_config_case_sensitive",
            "location": 612,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_export": {
            "name": "test_env_file_export",
            "location": 631,
            "return": [],
            "arguments": {
                "env": [],
                "tmp_path": []
            }
        },
        "test_env_file_config_custom_encoding": {
            "name": "test_env_file_config_custom_encoding",
            "location": 658,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "home_tmp": {
            "name": "home_tmp",
            "location": 674,
            "return": [],
            "arguments": {}
        },
        "test_env_file_home_directory": {
            "name": "test_env_file_home_directory",
            "location": 682,
            "return": [],
            "arguments": {
                "home_tmp": []
            }
        },
        "test_env_file_none": {
            "name": "test_env_file_none",
            "location": 696,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_override_file": {
            "name": "test_env_file_override_file",
            "location": 708,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_override_none": {
            "name": "test_env_file_override_none",
            "location": 725,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_not_a_file": {
            "name": "test_env_file_not_a_file",
            "location": 740,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_read_env_file_cast_sensitive": {
            "name": "test_read_env_file_cast_sensitive",
            "location": 750,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_read_env_file_syntax_wrong": {
            "name": "test_read_env_file_syntax_wrong",
            "location": 759,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_example": {
            "name": "test_env_file_example",
            "location": 767,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_env_file_custom_encoding": {
            "name": "test_env_file_custom_encoding",
            "location": 795,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_dotenv_not_installed": {
            "name": "test_dotenv_not_installed",
            "location": 810,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_alias_set": {
            "name": "test_alias_set",
            "location": 821,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_prefix_on_parent": {
            "name": "test_prefix_on_parent",
            "location": 851,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_frozenset": {
            "name": "test_frozenset",
            "location": 866,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_secrets_path": {
            "name": "test_secrets_path",
            "location": 880,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_path_url": {
            "name": "test_secrets_path_url",
            "location": 893,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_path_json": {
            "name": "test_secrets_path_json",
            "location": 907,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_path_invalid_json": {
            "name": "test_secrets_path_invalid_json",
            "location": 920,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_missing": {
            "name": "test_secrets_missing",
            "location": 934,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_invalid_secrets_dir": {
            "name": "test_secrets_invalid_secrets_dir",
            "location": 946,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_missing_location": {
            "name": "test_secrets_missing_location",
            "location": 961,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_file_is_a_directory": {
            "name": "test_secrets_file_is_a_directory",
            "location": 971,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_secrets_dotenv_precedence": {
            "name": "test_secrets_dotenv_precedence",
            "location": 986,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_external_settings_sources_precedence": {
            "name": "test_external_settings_sources_precedence",
            "location": 1002,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "test_external_settings_sources_filter_env_vars": {
            "name": "test_external_settings_sources_filter_env_vars",
            "location": 1028,
            "return": [],
            "arguments": {}
        },
        "test_customise_sources_empty": {
            "name": "test_customise_sources_empty",
            "location": 1066,
            "return": [],
            "arguments": {}
        },
        "test_builtins_settings_source_repr": {
            "name": "test_builtins_settings_source_repr",
            "location": 1080,
            "return": [],
            "arguments": {}
        },
        "test_config_file_settings_nornir.nornir_settings_source": {
            "name": "nornir_settings_source",
            "location": 515,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_external_settings_sources_precedence.external_source_0": {
            "name": "external_source_0",
            "location": 1003,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_external_settings_sources_precedence.external_source_1": {
            "name": "external_source_1",
            "location": 1006,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_external_settings_sources_filter_env_vars.VaultSettingsSource.__init__": {
            "name": "__init__",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "password": []
            }
        },
        "test_external_settings_sources_filter_env_vars.VaultSettingsSource.__call__": {
            "name": "__call__",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "test_env_takes_precedence.Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 495,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        },
        "test_config_file_settings_nornir.Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 525,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        },
        "test_external_settings_sources_precedence.Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 1016,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        },
        "test_external_settings_sources_filter_env_vars.Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 1050,
            "return": [],
            "arguments": {
                "cls": [],
                "init_settings": [],
                "env_settings": [],
                "file_secret_settings": []
            }
        },
        "test_customise_sources_empty.Settings.Config.customise_sources": {
            "name": "customise_sources",
            "location": 1073,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pydantic-master/tests/test_tools.py": {
        "test_parse_obj": {
            "name": "test_parse_obj",
            "location": 12,
            "return": [],
            "arguments": {
                "obj": [],
                "type_": [],
                "parsed": []
            }
        },
        "test_parse_obj_as_model": {
            "name": "test_parse_obj_as_model",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_preserves_subclasses": {
            "name": "test_parse_obj_preserves_subclasses",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_parse_obj_fails": {
            "name": "test_parse_obj_fails",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_parsing_model_naming": {
            "name": "test_parsing_model_naming",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_parse_as_dataclass": {
            "name": "test_parse_as_dataclass",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_parse_mapping_as": {
            "name": "test_parse_mapping_as",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_parse_file_as": {
            "name": "test_parse_file_as",
            "location": 76,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_parse_file_as_json_loads": {
            "name": "test_parse_file_as_json_loads",
            "location": 82,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_raw_as": {
            "name": "test_raw_as",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_schema": {
            "name": "test_schema",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_parse_file_as_json_loads.custom_json_loads": {
            "name": "custom_json_loads",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_types.py": {
        "foo": {
            "name": "foo",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_good": {
            "name": "test_constrained_bytes_good",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_default": {
            "name": "test_constrained_bytes_default",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_too_long": {
            "name": "test_constrained_bytes_too_long",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_lower_enabled": {
            "name": "test_constrained_bytes_lower_enabled",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_lower_disabled": {
            "name": "test_constrained_bytes_lower_disabled",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_strict_true": {
            "name": "test_constrained_bytes_strict_true",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_strict_false": {
            "name": "test_constrained_bytes_strict_false",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_constrained_bytes_strict_default": {
            "name": "test_constrained_bytes_strict_default",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_good": {
            "name": "test_constrained_list_good",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_default": {
            "name": "test_constrained_list_default",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_too_long": {
            "name": "test_constrained_list_too_long",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_too_short": {
            "name": "test_constrained_list_too_short",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_not_unique_hashable_items": {
            "name": "test_constrained_list_not_unique_hashable_items",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_not_unique_unhashable_items": {
            "name": "test_constrained_list_not_unique_unhashable_items",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_optional": {
            "name": "test_constrained_list_optional",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_constraints": {
            "name": "test_constrained_list_constraints",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_constrained_list_item_type_fails": {
            "name": "test_constrained_list_item_type_fails",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_conlist": {
            "name": "test_conlist",
            "location": 330,
            "return": [],
            "arguments": {}
        },
        "test_conlist_wrong_type_default": {
            "name": "test_conlist_wrong_type_default",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_good": {
            "name": "test_constrained_set_good",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_default": {
            "name": "test_constrained_set_default",
            "location": 400,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_default_invalid": {
            "name": "test_constrained_set_default_invalid",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_too_long": {
            "name": "test_constrained_set_too_long",
            "location": 416,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_too_short": {
            "name": "test_constrained_set_too_short",
            "location": 432,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_optional": {
            "name": "test_constrained_set_optional",
            "location": 448,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_constraints": {
            "name": "test_constrained_set_constraints",
            "location": 476,
            "return": [],
            "arguments": {}
        },
        "test_constrained_set_item_type_fails": {
            "name": "test_constrained_set_item_type_fails",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "test_conset": {
            "name": "test_conset",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "test_conset_not_required": {
            "name": "test_conset_not_required",
            "location": 576,
            "return": [],
            "arguments": {}
        },
        "test_confrozenset": {
            "name": "test_confrozenset",
            "location": 584,
            "return": [],
            "arguments": {}
        },
        "test_confrozenset_not_required": {
            "name": "test_confrozenset_not_required",
            "location": 639,
            "return": [],
            "arguments": {}
        },
        "test_constrained_frozenset_optional": {
            "name": "test_constrained_frozenset_optional",
            "location": 647,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_good": {
            "name": "test_constrained_str_good",
            "location": 679,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_default": {
            "name": "test_constrained_str_default",
            "location": 684,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_too_long": {
            "name": "test_constrained_str_too_long",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_lower_enabled": {
            "name": "test_constrained_str_lower_enabled",
            "location": 702,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_lower_disabled": {
            "name": "test_constrained_str_lower_disabled",
            "location": 710,
            "return": [],
            "arguments": {}
        },
        "test_constrained_str_max_length_0": {
            "name": "test_constrained_str_max_length_0",
            "location": 718,
            "return": [],
            "arguments": {}
        },
        "test_module_import": {
            "name": "test_module_import",
            "location": 736,
            "return": [],
            "arguments": {}
        },
        "test_pyobject_none": {
            "name": "test_pyobject_none",
            "location": 780,
            "return": [],
            "arguments": {}
        },
        "test_pyobject_callable": {
            "name": "test_pyobject_callable",
            "location": 788,
            "return": [],
            "arguments": {}
        },
        "test_default_validators": {
            "name": "test_default_validators",
            "location": 911,
            "return": [],
            "arguments": {
                "field": [],
                "value": [],
                "result": []
            }
        },
        "test_string_too_long": {
            "name": "test_string_too_long",
            "location": 928,
            "return": [],
            "arguments": {}
        },
        "test_string_too_short": {
            "name": "test_string_too_short",
            "location": 941,
            "return": [],
            "arguments": {}
        },
        "test_datetime_successful": {
            "name": "test_datetime_successful",
            "location": 961,
            "return": [],
            "arguments": {}
        },
        "test_datetime_errors": {
            "name": "test_datetime_errors",
            "location": 969,
            "return": [],
            "arguments": {}
        },
        "test_enum_successful": {
            "name": "test_enum_successful",
            "location": 995,
            "return": [],
            "arguments": {}
        },
        "test_enum_fails": {
            "name": "test_enum_fails",
            "location": 1002,
            "return": [],
            "arguments": {}
        },
        "test_int_enum_successful_for_str_int": {
            "name": "test_int_enum_successful_for_str_int",
            "location": 1016,
            "return": [],
            "arguments": {}
        },
        "test_enum_type": {
            "name": "test_enum_type",
            "location": 1022,
            "return": [],
            "arguments": {}
        },
        "test_int_enum_type": {
            "name": "test_int_enum_type",
            "location": 1034,
            "return": [],
            "arguments": {}
        },
        "test_string_success": {
            "name": "test_string_success",
            "location": 1048,
            "return": [],
            "arguments": {}
        },
        "test_string_fails": {
            "name": "test_string_fails",
            "location": 1079,
            "return": [],
            "arguments": {}
        },
        "test_email_validator_not_installed_email_str": {
            "name": "test_email_validator_not_installed_email_str",
            "location": 1114,
            "return": [],
            "arguments": {}
        },
        "test_email_validator_not_installed_name_email": {
            "name": "test_email_validator_not_installed_name_email",
            "location": 1122,
            "return": [],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 1129,
            "return": [],
            "arguments": {}
        },
        "test_list_success": {
            "name": "test_list_success",
            "location": 1151,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_list_fails": {
            "name": "test_list_fails",
            "location": 1159,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_ordered_dict": {
            "name": "test_ordered_dict",
            "location": 1168,
            "return": [],
            "arguments": {}
        },
        "test_tuple_success": {
            "name": "test_tuple_success",
            "location": 1191,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_tuple_fails": {
            "name": "test_tuple_fails",
            "location": 1199,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_tuple_variable_len_success": {
            "name": "test_tuple_variable_len_success",
            "location": 1217,
            "return": [],
            "arguments": {
                "value": [],
                "cls": [],
                "result": []
            }
        },
        "test_tuple_variable_len_fails": {
            "name": "test_tuple_variable_len_fails",
            "location": 1238,
            "return": [],
            "arguments": {
                "value": [],
                "cls": [],
                "exc": []
            }
        },
        "test_set_success": {
            "name": "test_set_success",
            "location": 1256,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_set_fails": {
            "name": "test_set_fails",
            "location": 1264,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_list_type_fails": {
            "name": "test_list_type_fails",
            "location": 1273,
            "return": [],
            "arguments": {}
        },
        "test_set_type_fails": {
            "name": "test_set_type_fails",
            "location": 1282,
            "return": [],
            "arguments": {}
        },
        "test_sequence_success": {
            "name": "test_sequence_success",
            "location": 1302,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "result": []
            }
        },
        "test_sequence_generator_success": {
            "name": "test_sequence_generator_success",
            "location": 1317,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "result": []
            }
        },
        "test_infinite_iterable": {
            "name": "test_infinite_iterable",
            "location": 1326,
            "return": [],
            "arguments": {}
        },
        "test_invalid_iterable": {
            "name": "test_invalid_iterable",
            "location": 1348,
            "return": [],
            "arguments": {}
        },
        "test_infinite_iterable_validate_first": {
            "name": "test_infinite_iterable_validate_first",
            "location": 1360,
            "return": [],
            "arguments": {}
        },
        "test_sequence_generator_fails": {
            "name": "test_sequence_generator_fails",
            "location": 1425,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "errors": []
            }
        },
        "test_sequence_fails": {
            "name": "test_sequence_fails",
            "location": 1459,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "errors": []
            }
        },
        "test_int_validation": {
            "name": "test_int_validation",
            "location": 1468,
            "return": [],
            "arguments": {}
        },
        "test_float_validation": {
            "name": "test_float_validation",
            "location": 1529,
            "return": [],
            "arguments": {}
        },
        "test_strict_bytes": {
            "name": "test_strict_bytes",
            "location": 1590,
            "return": [],
            "arguments": {}
        },
        "test_strict_bytes_subclass": {
            "name": "test_strict_bytes_subclass",
            "location": 1607,
            "return": [],
            "arguments": {}
        },
        "test_strict_str": {
            "name": "test_strict_str",
            "location": 1623,
            "return": [],
            "arguments": {}
        },
        "test_strict_str_subclass": {
            "name": "test_strict_str_subclass",
            "location": 1639,
            "return": [],
            "arguments": {}
        },
        "test_strict_bool": {
            "name": "test_strict_bool",
            "location": 1651,
            "return": [],
            "arguments": {}
        },
        "test_strict_int": {
            "name": "test_strict_int",
            "location": 1668,
            "return": [],
            "arguments": {}
        },
        "test_strict_int_subclass": {
            "name": "test_strict_int_subclass",
            "location": 1681,
            "return": [],
            "arguments": {}
        },
        "test_strict_float": {
            "name": "test_strict_float",
            "location": 1693,
            "return": [],
            "arguments": {}
        },
        "test_strict_float_subclass": {
            "name": "test_strict_float_subclass",
            "location": 1706,
            "return": [],
            "arguments": {}
        },
        "test_bool_unhashable_fails": {
            "name": "test_bool_unhashable_fails",
            "location": 1718,
            "return": [],
            "arguments": {}
        },
        "test_uuid_error": {
            "name": "test_uuid_error",
            "location": 1729,
            "return": [],
            "arguments": {}
        },
        "test_uuid_validation": {
            "name": "test_uuid_validation",
            "location": 1748,
            "return": [],
            "arguments": {}
        },
        "test_anystr_strip_whitespace_enabled": {
            "name": "test_anystr_strip_whitespace_enabled",
            "location": 1787,
            "return": [],
            "arguments": {}
        },
        "test_anystr_strip_whitespace_disabled": {
            "name": "test_anystr_strip_whitespace_disabled",
            "location": 1800,
            "return": [],
            "arguments": {}
        },
        "test_anystr_lower_enabled": {
            "name": "test_anystr_lower_enabled",
            "location": 1813,
            "return": [],
            "arguments": {}
        },
        "test_anystr_lower_disabled": {
            "name": "test_anystr_lower_disabled",
            "location": 1827,
            "return": [],
            "arguments": {}
        },
        "test_decimal_validation": {
            "name": "test_decimal_validation",
            "location": 2020,
            "return": [],
            "arguments": {
                "type_args": [],
                "value": [],
                "result": []
            }
        },
        "test_path_validation_success": {
            "name": "test_path_validation_success",
            "location": 2035,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_path_validation_fails": {
            "name": "test_path_validation_fails",
            "location": 2042,
            "return": [],
            "arguments": {}
        },
        "test_file_path_validation_success": {
            "name": "test_file_path_validation_success",
            "location": 2055,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_file_path_validation_fails": {
            "name": "test_file_path_validation_fails",
            "location": 2111,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_directory_path_validation_success": {
            "name": "test_directory_path_validation_success",
            "location": 2121,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_directory_path_validation_fails": {
            "name": "test_directory_path_validation_fails",
            "location": 2178,
            "return": [],
            "arguments": {
                "value": [],
                "errors": []
            }
        },
        "test_number_gt": {
            "name": "test_number_gt",
            "location": 2190,
            "return": [],
            "arguments": {}
        },
        "test_number_ge": {
            "name": "test_number_ge",
            "location": 2201,
            "return": [],
            "arguments": {}
        },
        "test_number_lt": {
            "name": "test_number_lt",
            "location": 2212,
            "return": [],
            "arguments": {}
        },
        "test_number_le": {
            "name": "test_number_le",
            "location": 2223,
            "return": [],
            "arguments": {}
        },
        "test_number_multiple_of_int_valid": {
            "name": "test_number_multiple_of_int_valid",
            "location": 2235,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_number_multiple_of_int_invalid": {
            "name": "test_number_multiple_of_int_invalid",
            "location": 2243,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_number_multiple_of_float_valid": {
            "name": "test_number_multiple_of_float_valid",
            "location": 2254,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_number_multiple_of_float_invalid": {
            "name": "test_number_multiple_of_float_invalid",
            "location": 2262,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_bounds_config_exceptions": {
            "name": "test_bounds_config_exceptions",
            "location": 2273,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "test_new_type_success": {
            "name": "test_new_type_success",
            "location": 2281,
            "return": [],
            "arguments": {}
        },
        "test_new_type_fails": {
            "name": "test_new_type_fails",
            "location": 2296,
            "return": [],
            "arguments": {}
        },
        "test_valid_simple_json": {
            "name": "test_valid_simple_json",
            "location": 2315,
            "return": [],
            "arguments": {}
        },
        "test_invalid_simple_json": {
            "name": "test_invalid_simple_json",
            "location": 2323,
            "return": [],
            "arguments": {}
        },
        "test_valid_simple_json_bytes": {
            "name": "test_valid_simple_json_bytes",
            "location": 2333,
            "return": [],
            "arguments": {}
        },
        "test_valid_detailed_json": {
            "name": "test_valid_detailed_json",
            "location": 2341,
            "return": [],
            "arguments": {}
        },
        "test_invalid_detailed_json_value_error": {
            "name": "test_invalid_detailed_json_value_error",
            "location": 2349,
            "return": [],
            "arguments": {}
        },
        "test_valid_detailed_json_bytes": {
            "name": "test_valid_detailed_json_bytes",
            "location": 2359,
            "return": [],
            "arguments": {}
        },
        "test_invalid_detailed_json_type_error": {
            "name": "test_invalid_detailed_json_type_error",
            "location": 2367,
            "return": [],
            "arguments": {}
        },
        "test_json_not_str": {
            "name": "test_json_not_str",
            "location": 2381,
            "return": [],
            "arguments": {}
        },
        "test_json_pre_validator": {
            "name": "test_json_pre_validator",
            "location": 2395,
            "return": [],
            "arguments": {}
        },
        "test_json_optional_simple": {
            "name": "test_json_optional_simple",
            "location": 2412,
            "return": [],
            "arguments": {}
        },
        "test_json_optional_complex": {
            "name": "test_json_optional_complex",
            "location": 2420,
            "return": [],
            "arguments": {}
        },
        "test_json_explicitly_required": {
            "name": "test_json_explicitly_required",
            "location": 2436,
            "return": [],
            "arguments": {}
        },
        "test_json_no_default": {
            "name": "test_json_no_default",
            "location": 2447,
            "return": [],
            "arguments": {}
        },
        "test_pattern": {
            "name": "test_pattern",
            "location": 2456,
            "return": [],
            "arguments": {}
        },
        "test_pattern_error": {
            "name": "test_pattern_error",
            "location": 2479,
            "return": [],
            "arguments": {}
        },
        "test_secretstr": {
            "name": "test_secretstr",
            "location": 2490,
            "return": [],
            "arguments": {}
        },
        "test_secretstr_equality": {
            "name": "test_secretstr_equality",
            "location": 2522,
            "return": [],
            "arguments": {}
        },
        "test_secretstr_idempotent": {
            "name": "test_secretstr_idempotent",
            "location": 2529,
            "return": [],
            "arguments": {}
        },
        "test_secretstr_error": {
            "name": "test_secretstr_error",
            "location": 2538,
            "return": [],
            "arguments": {}
        },
        "test_secretstr_min_max_length": {
            "name": "test_secretstr_min_max_length",
            "location": 2547,
            "return": [],
            "arguments": {}
        },
        "test_secretbytes": {
            "name": "test_secretbytes",
            "location": 2579,
            "return": [],
            "arguments": {}
        },
        "test_secretbytes_equality": {
            "name": "test_secretbytes_equality",
            "location": 2611,
            "return": [],
            "arguments": {}
        },
        "test_secretbytes_idempotent": {
            "name": "test_secretbytes_idempotent",
            "location": 2618,
            "return": [],
            "arguments": {}
        },
        "test_secretbytes_error": {
            "name": "test_secretbytes_error",
            "location": 2626,
            "return": [],
            "arguments": {}
        },
        "test_secretbytes_min_max_length": {
            "name": "test_secretbytes_min_max_length",
            "location": 2635,
            "return": [],
            "arguments": {}
        },
        "test_secrets_schema": {
            "name": "test_secrets_schema",
            "location": 2678,
            "return": [],
            "arguments": {
                "secret_cls": [],
                "field_kw": [],
                "schema_kw": []
            }
        },
        "test_generic_without_params": {
            "name": "test_generic_without_params",
            "location": 2692,
            "return": [],
            "arguments": {}
        },
        "test_generic_without_params_error": {
            "name": "test_generic_without_params_error",
            "location": 2702,
            "return": [],
            "arguments": {}
        },
        "test_literal_single": {
            "name": "test_literal_single",
            "location": 2717,
            "return": [],
            "arguments": {}
        },
        "test_literal_multiple": {
            "name": "test_literal_multiple",
            "location": 2734,
            "return": [],
            "arguments": {}
        },
        "test_unsupported_field_type": {
            "name": "test_unsupported_field_type",
            "location": 2752,
            "return": [],
            "arguments": {}
        },
        "test_frozenset_field": {
            "name": "test_frozenset_field",
            "location": 2759,
            "return": [],
            "arguments": {}
        },
        "test_frozenset_field_conversion": {
            "name": "test_frozenset_field_conversion",
            "location": 2778,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_frozenset_field_not_convertible": {
            "name": "test_frozenset_field_not_convertible",
            "location": 2787,
            "return": [],
            "arguments": {}
        },
        "test_bytesize_conversions": {
            "name": "test_bytesize_conversions",
            "location": 2809,
            "return": [],
            "arguments": {
                "input_value": [],
                "output": [],
                "human_bin": [],
                "human_dec": []
            }
        },
        "test_bytesize_to": {
            "name": "test_bytesize_to",
            "location": 2821,
            "return": [],
            "arguments": {}
        },
        "test_bytesize_raises": {
            "name": "test_bytesize_raises",
            "location": 2832,
            "return": [],
            "arguments": {}
        },
        "test_deque_success": {
            "name": "test_deque_success",
            "location": 2851,
            "return": [],
            "arguments": {}
        },
        "test_deque_generic_success": {
            "name": "test_deque_generic_success",
            "location": 2871,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "result": []
            }
        },
        "test_deque_fails": {
            "name": "test_deque_fails",
            "location": 2903,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "errors": []
            }
        },
        "test_deque_model": {
            "name": "test_deque_model",
            "location": 2912,
            "return": [],
            "arguments": {}
        },
        "test_deque_json": {
            "name": "test_deque_json",
            "location": 2923,
            "return": [],
            "arguments": {}
        },
        "test_none": {
            "name": "test_none",
            "location": 2934,
            "return": [],
            "arguments": {
                "value_type": []
            }
        },
        "test_default_union_types": {
            "name": "test_default_union_types",
            "location": 2984,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_types": {
            "name": "test_smart_union_types",
            "location": 3000,
            "return": [],
            "arguments": {}
        },
        "test_default_union_class": {
            "name": "test_default_union_class",
            "location": 3019,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_class": {
            "name": "test_smart_union_class",
            "location": 3034,
            "return": [],
            "arguments": {}
        },
        "test_default_union_subclass": {
            "name": "test_default_union_subclass",
            "location": 3051,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_subclass": {
            "name": "test_smart_union_subclass",
            "location": 3061,
            "return": [],
            "arguments": {}
        },
        "test_default_union_compound_types": {
            "name": "test_default_union_compound_types",
            "location": 3074,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_compound_types": {
            "name": "test_smart_union_compound_types",
            "location": 3082,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_compouned_types_edge_case": {
            "name": "test_smart_union_compouned_types_edge_case",
            "location": 3103,
            "return": [],
            "arguments": {}
        },
        "test_smart_union_typeddict": {
            "name": "test_smart_union_typeddict",
            "location": 3115,
            "return": [],
            "arguments": {}
        },
        "test_past_date_validation_success": {
            "name": "test_past_date_validation_success",
            "location": 3138,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_past_date_validation_fails": {
            "name": "test_past_date_validation_fails",
            "location": 3155,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_future_date_validation_success": {
            "name": "test_future_date_validation_success",
            "location": 3178,
            "return": [],
            "arguments": {
                "value": [],
                "result": []
            }
        },
        "test_future_date_validation_fails": {
            "name": "test_future_date_validation_fails",
            "location": 3195,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "BoolCastable.__bool__": {
            "name": "__bool__",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_infinite_iterable.iterable": {
            "name": "iterable",
            "location": 1331,
            "return": [],
            "arguments": {}
        },
        "test_infinite_iterable_validate_first.int_iterable": {
            "name": "int_iterable",
            "location": 1375,
            "return": [],
            "arguments": {}
        },
        "test_infinite_iterable_validate_first.str_iterable": {
            "name": "str_iterable",
            "location": 1391,
            "return": [],
            "arguments": {}
        },
        "test_infinite_iterable_validate_first.Model.infinite_first_int": {
            "name": "infinite_first_int",
            "location": 1366,
            "return": [],
            "arguments": {
                "cls": [],
                "it": [],
                "field": []
            }
        },
        "test_json_pre_validator.JsonModel.check": {
            "name": "check",
            "location": 2402,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "pydantic-master/tests/test_types_payment_card_number.py": {
        "test_validate_digits": {
            "name": "test_validate_digits",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_validate_luhn_check_digit": {
            "name": "test_validate_luhn_check_digit",
            "location": 67,
            "return": [],
            "arguments": {
                "card_number": [],
                "valid": []
            }
        },
        "test_length_for_brand": {
            "name": "test_length_for_brand",
            "location": 88,
            "return": [],
            "arguments": {
                "card_number": [],
                "brand": [],
                "valid": []
            }
        },
        "test_get_brand": {
            "name": "test_get_brand",
            "location": 106,
            "return": [],
            "arguments": {
                "card_number": [],
                "brand": []
            }
        },
        "test_valid": {
            "name": "test_valid",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_error_types": {
            "name": "test_error_types",
            "location": 127,
            "return": [],
            "arguments": {
                "card_number": [],
                "error_message": []
            }
        },
        "test_payment_card_brand": {
            "name": "test_payment_card_brand",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_typing.py": {
        "test_is_namedtuple": {
            "name": "test_is_namedtuple",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_is_typeddict_typing": {
            "name": "test_is_typeddict_typing",
            "location": 47,
            "return": [],
            "arguments": {
                "TypedDict": []
            }
        },
        "test_is_none_type": {
            "name": "test_is_none_type",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_convert_generics": {
            "name": "test_convert_generics",
            "location": 99,
            "return": [],
            "arguments": {
                "type_": [],
                "expectations": []
            }
        },
        "test_convert_generics_unsettable_args": {
            "name": "test_convert_generics_unsettable_args",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "test_convert_generics_pep604": {
            "name": "test_convert_generics_pep604",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_convert_generics_unsettable_args.User.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "tp": []
            }
        },
        "test_convert_generics_unsettable_args.User.__setattr__": {
            "name": "__setattr__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "__name": [],
                "__value": []
            }
        }
    },
    "pydantic-master/tests/test_utils.py": {
        "test_import_module": {
            "name": "test_import_module",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_import_module_invalid": {
            "name": "test_import_module_invalid",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_import_no_attr": {
            "name": "test_import_no_attr",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_display_as_type": {
            "name": "test_display_as_type",
            "location": 70,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_display_as_type_generic_alias": {
            "name": "test_display_as_type_generic_alias",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_lenient_issubclass": {
            "name": "test_lenient_issubclass",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_lenient_issubclass_with_generic_aliases": {
            "name": "test_lenient_issubclass_with_generic_aliases",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_lenient_issubclass_is_lenient": {
            "name": "test_lenient_issubclass_is_lenient",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_truncate": {
            "name": "test_truncate",
            "location": 106,
            "return": [],
            "arguments": {
                "input_value": [],
                "output": []
            }
        },
        "test_unique_list": {
            "name": "test_unique_list",
            "location": 119,
            "return": [],
            "arguments": {
                "input_value": [],
                "output": []
            }
        },
        "test_value_items": {
            "name": "test_value_items",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_value_items_merge": {
            "name": "test_value_items_merge",
            "location": 206,
            "return": [],
            "arguments": {
                "base": [],
                "override": [],
                "intersect": [],
                "expected": []
            }
        },
        "test_value_items_error": {
            "name": "test_value_items_error",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_is_new_type": {
            "name": "test_is_new_type",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_new_type_supertype": {
            "name": "test_new_type_supertype",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_pretty": {
            "name": "test_pretty",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "test_pretty_color": {
            "name": "test_pretty_color",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_devtools_output": {
            "name": "test_devtools_output",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_devtools_output_validation_error": {
            "name": "test_devtools_output_validation_error",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "test_deep_update": {
            "name": "test_deep_update",
            "location": 336,
            "return": [],
            "arguments": {
                "mapping": [],
                "updating_mapping": [],
                "expected_mapping": [],
                "msg": []
            }
        },
        "test_deep_update_is_not_mutating": {
            "name": "test_deep_update_is_not_mutating",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_undefined_repr": {
            "name": "test_undefined_repr",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_undefined_copy": {
            "name": "test_undefined_copy",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "test_get_model": {
            "name": "test_get_model",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "test_version_info": {
            "name": "test_version_info",
            "location": 375,
            "return": [],
            "arguments": {}
        },
        "test_standard_version": {
            "name": "test_standard_version",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "test_class_attribute": {
            "name": "test_class_attribute",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "test_all_literal_values": {
            "name": "test_all_literal_values",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "test_path_type": {
            "name": "test_path_type",
            "location": 411,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_path_type_unknown": {
            "name": "test_path_type_unknown",
            "location": 418,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_smart_deepcopy_immutable_non_sequence": {
            "name": "test_smart_deepcopy_immutable_non_sequence",
            "location": 441,
            "return": [],
            "arguments": {
                "obj": [],
                "mocker": []
            }
        },
        "test_smart_deepcopy_empty_collection": {
            "name": "test_smart_deepcopy_empty_collection",
            "location": 449,
            "return": [],
            "arguments": {
                "empty_collection": [],
                "mocker": []
            }
        },
        "test_smart_deepcopy_collection": {
            "name": "test_smart_deepcopy_collection",
            "location": 458,
            "return": [],
            "arguments": {
                "collection": [],
                "mocker": []
            }
        },
        "test_get_origin": {
            "name": "test_get_origin",
            "location": 478,
            "return": [],
            "arguments": {
                "input_value": [],
                "output_value": []
            }
        },
        "test_get_args": {
            "name": "test_get_args",
            "location": 499,
            "return": [],
            "arguments": {
                "input_value": [],
                "output_value": []
            }
        },
        "test_resolve_annotations_no_module": {
            "name": "test_resolve_annotations_no_module",
            "location": 505,
            "return": [],
            "arguments": {}
        },
        "test_all_identical": {
            "name": "test_all_identical",
            "location": 511,
            "return": [],
            "arguments": {}
        },
        "test_undefined_pickle": {
            "name": "test_undefined_pickle",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "test_limited_dict": {
            "name": "test_limited_dict",
            "location": 531,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/test_validators.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_int_validation": {
            "name": "test_int_validation",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_frozenset_validation": {
            "name": "test_frozenset_validation",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_deque_validation": {
            "name": "test_deque_validation",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_validate_whole": {
            "name": "test_validate_whole",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_validate_kwargs": {
            "name": "test_validate_kwargs",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_validate_pre_error": {
            "name": "test_validate_pre_error",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_ok": {
            "name": "test_validating_assignment_ok",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_fail": {
            "name": "test_validating_assignment_fail",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_value_change": {
            "name": "test_validating_assignment_value_change",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_extra": {
            "name": "test_validating_assignment_extra",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_dict": {
            "name": "test_validating_assignment_dict",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "test_validating_assignment_values_dict": {
            "name": "test_validating_assignment_values_dict",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_validate_multiple": {
            "name": "test_validate_multiple",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "test_classmethod": {
            "name": "test_classmethod",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_duplicates": {
            "name": "test_duplicates",
            "location": 263,
            "return": [],
            "arguments": {}
        },
        "test_use_bare": {
            "name": "test_use_bare",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "test_use_no_fields": {
            "name": "test_use_no_fields",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "test_validate_always": {
            "name": "test_validate_always",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_validate_always_on_inheritance": {
            "name": "test_validate_always_on_inheritance",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "test_validate_not_always": {
            "name": "test_validate_not_always",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_wildcard_validators": {
            "name": "test_wildcard_validators",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_wildcard_validator_error": {
            "name": "test_wildcard_validator_error",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_invalid_field": {
            "name": "test_invalid_field",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "test_validate_child": {
            "name": "test_validate_child",
            "location": 424,
            "return": [],
            "arguments": {}
        },
        "test_validate_child_extra": {
            "name": "test_validate_child_extra",
            "location": 441,
            "return": [],
            "arguments": {}
        },
        "test_validate_child_all": {
            "name": "test_validate_child_all",
            "location": 462,
            "return": [],
            "arguments": {}
        },
        "test_validate_parent": {
            "name": "test_validate_parent",
            "location": 479,
            "return": [],
            "arguments": {}
        },
        "test_validate_parent_all": {
            "name": "test_validate_parent_all",
            "location": 500,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_keep": {
            "name": "test_inheritance_keep",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_replace": {
            "name": "test_inheritance_replace",
            "location": 535,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_new": {
            "name": "test_inheritance_new",
            "location": 551,
            "return": [],
            "arguments": {}
        },
        "test_validation_each_item": {
            "name": "test_validation_each_item",
            "location": 567,
            "return": [],
            "arguments": {}
        },
        "test_validation_each_item_one_sublevel": {
            "name": "test_validation_each_item_one_sublevel",
            "location": 578,
            "return": [],
            "arguments": {}
        },
        "test_key_validation": {
            "name": "test_key_validation",
            "location": 591,
            "return": [],
            "arguments": {}
        },
        "test_validator_always_optional": {
            "name": "test_validator_always_optional",
            "location": 602,
            "return": [],
            "arguments": {}
        },
        "test_validator_always_pre": {
            "name": "test_validator_always_pre",
            "location": 620,
            "return": [],
            "arguments": {}
        },
        "test_validator_always_post": {
            "name": "test_validator_always_post",
            "location": 637,
            "return": [],
            "arguments": {}
        },
        "test_validator_always_post_optional": {
            "name": "test_validator_always_post_optional",
            "location": 649,
            "return": [],
            "arguments": {}
        },
        "test_datetime_validator": {
            "name": "test_datetime_validator",
            "location": 661,
            "return": [],
            "arguments": {}
        },
        "test_pre_called_once": {
            "name": "test_pre_called_once",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "test_make_generic_validator": {
            "name": "test_make_generic_validator",
            "location": 720,
            "return": [],
            "arguments": {
                "fields": [],
                "result": []
            }
        },
        "test_make_generic_validator_kwargs": {
            "name": "test_make_generic_validator_kwargs",
            "location": 730,
            "return": [],
            "arguments": {}
        },
        "test_make_generic_validator_invalid": {
            "name": "test_make_generic_validator_invalid",
            "location": 739,
            "return": [],
            "arguments": {}
        },
        "test_make_generic_validator_cls_kwargs": {
            "name": "test_make_generic_validator_cls_kwargs",
            "location": 748,
            "return": [],
            "arguments": {}
        },
        "test_make_generic_validator_cls_invalid": {
            "name": "test_make_generic_validator_cls_invalid",
            "location": 757,
            "return": [],
            "arguments": {}
        },
        "test_make_generic_validator_self": {
            "name": "test_make_generic_validator_self",
            "location": 766,
            "return": [],
            "arguments": {}
        },
        "test_assert_raises_validation_error": {
            "name": "test_assert_raises_validation_error",
            "location": 775,
            "return": [],
            "arguments": {}
        },
        "test_whole": {
            "name": "test_whole",
            "location": 794,
            "return": [],
            "arguments": {}
        },
        "test_root_validator": {
            "name": "test_root_validator",
            "location": 805,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_pre": {
            "name": "test_root_validator_pre",
            "location": 856,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_repeat": {
            "name": "test_root_validator_repeat",
            "location": 883,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_repeat2": {
            "name": "test_root_validator_repeat2",
            "location": 898,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_self": {
            "name": "test_root_validator_self",
            "location": 913,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_extra": {
            "name": "test_root_validator_extra",
            "location": 926,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_types": {
            "name": "test_root_validator_types",
            "location": 941,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_inheritance": {
            "name": "test_root_validator_inheritance",
            "location": 962,
            "return": [],
            "arguments": {}
        },
        "test_root_validator_returns_none_exception": {
            "name": "test_root_validator_returns_none_exception",
            "location": 987,
            "return": [],
            "arguments": {}
        },
        "reusable_validator": {
            "name": "reusable_validator",
            "location": 999,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "test_reuse_global_validators": {
            "name": "test_reuse_global_validators",
            "location": 1003,
            "return": [],
            "arguments": {}
        },
        "declare_with_reused_validators": {
            "name": "declare_with_reused_validators",
            "location": 1014,
            "return": [],
            "arguments": {
                "include_root": [],
                "allow_1": [],
                "allow_2": [],
                "allow_3": []
            }
        },
        "reset_tracked_validators": {
            "name": "reset_tracked_validators",
            "location": 1035,
            "return": [],
            "arguments": {}
        },
        "test_allow_reuse": {
            "name": "test_allow_reuse",
            "location": 1045,
            "return": [],
            "arguments": {
                "include_root": [],
                "allow_1": [],
                "allow_2": [],
                "allow_3": [],
                "reset_tracked_validators": []
            }
        },
        "test_root_validator_classmethod": {
            "name": "test_root_validator_classmethod",
            "location": 1056,
            "return": [],
            "arguments": {
                "validator_classmethod": [],
                "root_validator_classmethod": [],
                "reset_tracked_validators": []
            }
        },
        "test_root_validator_skip_on_failure": {
            "name": "test_root_validator_skip_on_failure",
            "location": 1095,
            "return": [],
            "arguments": {}
        },
        "test_assignment_validator_cls": {
            "name": "test_assignment_validator_cls",
            "location": 1124,
            "return": [],
            "arguments": {}
        },
        "test_literal_validator": {
            "name": "test_literal_validator",
            "location": 1145,
            "return": [],
            "arguments": {}
        },
        "test_literal_validator_str_enum": {
            "name": "test_literal_validator_str_enum",
            "location": 1163,
            "return": [],
            "arguments": {}
        },
        "test_nested_literal_validator": {
            "name": "test_nested_literal_validator",
            "location": 1184,
            "return": [],
            "arguments": {}
        },
        "test_union_literal_with_constraints": {
            "name": "test_union_literal_with_constraints",
            "location": 1205,
            "return": [],
            "arguments": {}
        },
        "test_field_that_is_being_validated_is_excluded_from_validator_values": {
            "name": "test_field_that_is_being_validated_is_excluded_from_validator_values",
            "location": 1214,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_exceptions_in_field_validators_restore_original_field_value": {
            "name": "test_exceptions_in_field_validators_restore_original_field_value",
            "location": 1251,
            "return": [],
            "arguments": {}
        },
        "test_overridden_root_validators": {
            "name": "test_overridden_root_validators",
            "location": 1270,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "ValidateAssignmentModel.b_length": {
            "name": "b_length",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "ValidateAssignmentModel.double_c": {
            "name": "double_c",
            "location": 152,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_make_generic_validator_kwargs.test_validator": {
            "name": "test_validator",
            "location": 731,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_make_generic_validator_invalid.test_validator": {
            "name": "test_validator",
            "location": 740,
            "return": [],
            "arguments": {
                "v": [],
                "foobar": []
            }
        },
        "test_make_generic_validator_cls_kwargs.test_validator": {
            "name": "test_validator",
            "location": 749,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_make_generic_validator_cls_invalid.test_validator": {
            "name": "test_validator",
            "location": 758,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "foobar": []
            }
        },
        "test_make_generic_validator_self.test_validator": {
            "name": "test_validator",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "test_simple.Model.check_a": {
            "name": "check_a",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_whole.Model.check_a1": {
            "name": "check_a1",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_whole.Model.check_a2": {
            "name": "check_a2",
            "location": 84,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_kwargs.Model.check_a1": {
            "name": "check_a1",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "test_validate_pre_error.Model.check_a1": {
            "name": "check_a1",
            "location": 110,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_pre_error.Model.check_a2": {
            "name": "check_a2",
            "location": 118,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validating_assignment_values_dict.ModelTwo.validate_b": {
            "name": "validate_b",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": [],
                "b": [],
                "values": []
            }
        },
        "test_validate_multiple.Model.check_a_and_b": {
            "name": "check_a_and_b",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_classmethod.Model.check_a": {
            "name": "check_a",
            "location": 254,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_always.Model.check_a": {
            "name": "check_a",
            "location": 318,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_always_on_inheritance.Model.check_a": {
            "name": "check_a",
            "location": 337,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_not_always.Model.check_a": {
            "name": "check_a",
            "location": 355,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_wildcard_validators.Model.check_a": {
            "name": "check_a",
            "location": 374,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_wildcard_validators.Model.check_all": {
            "name": "check_all",
            "location": 379,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_wildcard_validator_error.Model.check_all": {
            "name": "check_all",
            "location": 393,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_validate_child.Child.check_a": {
            "name": "check_a",
            "location": 430,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_child_extra.Parent.check_a_one": {
            "name": "check_a_one",
            "location": 446,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_child_extra.Child.check_a_two": {
            "name": "check_a_two",
            "location": 453,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_child_all.Child.check_a": {
            "name": "check_a",
            "location": 468,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_parent.Parent.check_a": {
            "name": "check_a",
            "location": 484,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_parent_all.Parent.check_a": {
            "name": "check_a",
            "location": 505,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_keep.Parent.add_to_a": {
            "name": "add_to_a",
            "location": 526,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_replace.Parent.add_to_a": {
            "name": "add_to_a",
            "location": 540,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_replace.Child.add_to_a": {
            "name": "add_to_a",
            "location": 545,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_new.Parent.add_one_to_a": {
            "name": "add_one_to_a",
            "location": 556,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_new.Child.add_five_to_a": {
            "name": "add_five_to_a",
            "location": 561,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validation_each_item.Model.check_foobar": {
            "name": "check_foobar",
            "location": 572,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validation_each_item_one_sublevel.Model.check_foobar": {
            "name": "check_foobar",
            "location": 583,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_key_validation.Model.check_foobar": {
            "name": "check_foobar",
            "location": 596,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "test_validator_always_optional.Model.check_a": {
            "name": "check_a",
            "location": 609,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validator_always_pre.Model.check_a": {
            "name": "check_a",
            "location": 627,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validator_always_post.Model.check_a": {
            "name": "check_a",
            "location": 642,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validator_always_post_optional.Model.check_a": {
            "name": "check_a",
            "location": 654,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_datetime_validator.Model.check_d": {
            "name": "check_d",
            "location": 668,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_pre_called_once.Model.check_a": {
            "name": "check_a",
            "location": 688,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_assert_raises_validation_error.Model.check_a": {
            "name": "check_a",
            "location": 780,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator.Model.repeat_b": {
            "name": "repeat_b",
            "location": 814,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator.Model.example_root_validator": {
            "name": "example_root_validator",
            "location": 818,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator.Model.example_root_validator2": {
            "name": "example_root_validator2",
            "location": 825,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_pre.Model.repeat_b": {
            "name": "repeat_b",
            "location": 864,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator_pre.Model.root_validator": {
            "name": "root_validator",
            "location": 868,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_types.Model.root_validator": {
            "name": "root_validator",
            "location": 949,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_inheritance.Parent.root_validator_parent": {
            "name": "root_validator_parent",
            "location": 969,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_inheritance.Child.root_validator_child": {
            "name": "root_validator_child",
            "location": 977,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_returns_none_exception.Model.root_validator_repeated": {
            "name": "root_validator_repeated",
            "location": 992,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "declare_with_reused_validators.Model.duplicate_name": {
            "name": "duplicate_name",
            "location": 1030,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_classmethod.Model.repeat_b": {
            "name": "repeat_b",
            "location": 1063,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator_classmethod.Model.example_root_validator": {
            "name": "example_root_validator",
            "location": 1070,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_skip_on_failure.ModelA.example_root_validator": {
            "name": "example_root_validator",
            "location": 1102,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_skip_on_failure.ModelB.example_root_validator": {
            "name": "example_root_validator",
            "location": 1115,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_assignment_validator_cls.Model.check_foo": {
            "name": "check_foo",
            "location": 1134,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "test_field_that_is_being_validated_is_excluded_from_validator_values.Model.validate_foo": {
            "name": "validate_foo",
            "location": 1226,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "test_field_that_is_being_validated_is_excluded_from_validator_values.Model.validate_bar": {
            "name": "validate_bar",
            "location": 1231,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "test_exceptions_in_field_validators_restore_original_field_value.Model.validate_foo": {
            "name": "validate_foo",
            "location": 1259,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_overridden_root_validators.A.pre_root": {
            "name": "pre_root",
            "location": 1277,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_overridden_root_validators.A.post_root": {
            "name": "post_root",
            "location": 1282,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_overridden_root_validators.B.pre_root": {
            "name": "pre_root",
            "location": 1288,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_overridden_root_validators.B.post_root": {
            "name": "post_root",
            "location": 1293,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_duplicates.Model.duplicate_name": {
            "name": "duplicate_name",
            "location": 275,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_use_bare.Model.checker": {
            "name": "checker",
            "location": 292,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_use_no_fields.Model.checker": {
            "name": "checker",
            "location": 305,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_invalid_field.Model.check_b": {
            "name": "check_b",
            "location": 415,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_whole.Model.check_something": {
            "name": "check_something",
            "location": 801,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator_repeat.Model.root_validator_repeated": {
            "name": "root_validator_repeated",
            "location": 894,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_repeat2.Model.repeat_validator": {
            "name": "repeat_validator",
            "location": 909,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "test_root_validator_self.Model.root_validator": {
            "name": "root_validator",
            "location": 922,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "test_root_validator_extra.Model.root_validator": {
            "name": "root_validator",
            "location": 933,
            "return": [],
            "arguments": {
                "cls": [],
                "values": [],
                "another": []
            }
        }
    },
    "pydantic-master/tests/test_validators_dataclass.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_validate_pre": {
            "name": "test_validate_pre",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_validate_multiple": {
            "name": "test_validate_multiple",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_classmethod": {
            "name": "test_classmethod",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_validate_parent": {
            "name": "test_validate_parent",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_inheritance_replace": {
            "name": "test_inheritance_replace",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_root_validator": {
            "name": "test_root_validator",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_simple.MyDataclass.change_a": {
            "name": "change_a",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_pre.MyDataclass.check_a1": {
            "name": "check_a1",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_pre.MyDataclass.check_a2": {
            "name": "check_a2",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_multiple.MyDataclass.check_a_and_b": {
            "name": "check_a_and_b",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "field": []
            }
        },
        "test_classmethod.MyDataclass.check_a": {
            "name": "check_a",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_validate_parent.Parent.change_a": {
            "name": "change_a",
            "location": 84,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_replace.Parent.add_to_a": {
            "name": "add_to_a",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_inheritance_replace.Child.add_to_a": {
            "name": "add_to_a",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator.MyDataclass.repeat_b": {
            "name": "repeat_b",
            "location": 122,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "test_root_validator.MyDataclass.root_validator": {
            "name": "root_validator",
            "location": 126,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        }
    },
    "pydantic-master/tests/test_version.py": {
        "test_version_attribute_is_present": {
            "name": "test_version_attribute_is_present",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_version_attribute_is_a_string": {
            "name": "test_version_attribute_is_a_string",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/__init__.py": {},
    "pydantic-master/tests/mypy/test_mypy.py": {
        "test_mypy_results": {
            "name": "test_mypy_results",
            "location": 49,
            "return": [],
            "arguments": {
                "config_filename": [],
                "python_filename": [],
                "output_filename": []
            }
        },
        "test_bad_toml_config": {
            "name": "test_bad_toml_config",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_success_cases_run": {
            "name": "test_success_cases_run",
            "location": 106,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "test_explicit_reexports": {
            "name": "test_explicit_reexports",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/mypy/__init__.py": {},
    "pydantic-master/tests/mypy/modules/fail1.py": {},
    "pydantic-master/tests/mypy/modules/fail2.py": {},
    "pydantic-master/tests/mypy/modules/fail3.py": {},
    "pydantic-master/tests/mypy/modules/fail4.py": {
        "foo": {
            "name": "foo",
            "location": 5,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "bar": {
            "name": "bar",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "pydantic-master/tests/mypy/modules/plugin_fail.py": {
        "Model.method": {
            "name": "method",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoverageTester.from_orm": {
            "name": "from_orm",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.Config.config_method": {
            "name": "config_method",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/mypy/modules/plugin_success.py": {
        "f": {
            "name": "f",
            "location": 175,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "SelfReferencingModel.prop": {
            "name": "prop",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mixin.f": {
            "name": "f",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/mypy/modules/success.py": {
        "dog_years": {
            "name": "dog_years",
            "location": 81,
            "return": [],
            "arguments": {
                "age": []
            }
        },
        "day_of_week": {
            "name": "day_of_week",
            "location": 85,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "foo": {
            "name": "foo",
            "location": 163,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "bar": {
            "name": "bar",
            "location": 173,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "dont_check_path_existence": {
            "name": "dont_check_path_existence",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "Flags.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.check_age": {
            "name": "check_age",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Model.root_check": {
            "name": "root_check",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "Model.pre_root_check": {
            "name": "pre_root_check",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "CustomPath.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomPath.__fspath__": {
            "name": "__fspath__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pydantic-master/tests/pyright/pyright_example.py": {}
}
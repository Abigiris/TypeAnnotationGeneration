{
    "pyecsca-master/setup.py": {},
    "pyecsca-master/docs/conf.py": {},
    "pyecsca-master/pyecsca/ec/configuration.py": {
        "all_configurations": {
            "name": "all_configurations",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "EnumDefine.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumDefine.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumDefine.names": {
            "name": "names",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EnumDefine.values": {
            "name": "values",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "all_configurations.is_optional": {
            "name": "is_optional",
            "location": 136,
            "return": [],
            "arguments": {
                "arg_type": []
            }
        },
        "all_configurations.leaf_subclasses": {
            "name": "leaf_subclasses",
            "location": 143,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "all_configurations.independents": {
            "name": "independents",
            "location": 153,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "all_configurations.multipliers": {
            "name": "multipliers",
            "location": 168,
            "return": [],
            "arguments": {
                "mult_classes": [],
                "coords_formulas": [],
                "fixed_args": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/context.py": {
        "getcontext": {
            "name": "getcontext",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "setcontext": {
            "name": "setcontext",
            "location": 267,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "resetcontext": {
            "name": "resetcontext",
            "location": 278,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "local": {
            "name": "local",
            "location": 288,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__exit__": {
            "name": "__exit__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "ResultAction.result": {
            "name": "result",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultAction.exit": {
            "name": "exit",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "ResultAction.__exit__": {
            "name": "__exit__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Tree.get_by_key": {
            "name": "get_by_key",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Tree.get_by_index": {
            "name": "get_by_index",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Tree.repr": {
            "name": "repr",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "Tree.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.enter_action": {
            "name": "enter_action",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Context.exit_action": {
            "name": "exit_action",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Context.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NullContext.enter_action": {
            "name": "enter_action",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "NullContext.exit_action": {
            "name": "exit_action",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "DefaultContext.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultContext.enter_action": {
            "name": "enter_action",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "DefaultContext.exit_action": {
            "name": "exit_action",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "DefaultContext.__repr__": {
            "name": "__repr__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathContext.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "PathContext.enter_action": {
            "name": "enter_action",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "PathContext.exit_action": {
            "name": "exit_action",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "PathContext.__repr__": {
            "name": "__repr__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ContextManager.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_context": []
            }
        },
        "_ContextManager.__enter__": {
            "name": "__enter__",
            "location": 252,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContextManager.__exit__": {
            "name": "__exit__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Optional[Type[BaseException]]"
                ],
                "v": [
                    "Optional[BaseException]"
                ],
                "tb": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/coordinates.py": {
        "CoordinateModel.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffineCoordinateModel.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "curve_model": []
            }
        },
        "AffineCoordinateModel.__eq__": {
            "name": "__eq__",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EFDCoordinateModel.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "curve_model": []
            }
        },
        "EFDCoordinateModel.__read_formula_dir": {
            "name": "__read_formula_dir",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "dir_path": [],
                "formula_type": []
            }
        },
        "EFDCoordinateModel.__read_coordinates_file": {
            "name": "__read_coordinates_file",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "EFDCoordinateModel.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EFDCoordinateModel.__hash__": {
            "name": "__hash__",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/curve.py": {
        "EllipticCurve.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "coordinate_model": [],
                "prime": [],
                "neutral": [],
                "parameters": []
            }
        },
        "EllipticCurve._execute_base_formulas": {
            "name": "_execute_base_formulas",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "formulas": []
            }
        },
        "EllipticCurve.affine_add": {
            "name": "affine_add",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "one": [],
                "other": []
            }
        },
        "EllipticCurve.affine_double": {
            "name": "affine_double",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "one": []
            }
        },
        "EllipticCurve.affine_negate": {
            "name": "affine_negate",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "one": []
            }
        },
        "EllipticCurve.affine_multiply": {
            "name": "affine_multiply",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "point": [],
                "scalar": []
            }
        },
        "EllipticCurve.affine_neutral": {
            "name": "affine_neutral",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EllipticCurve.neutral_is_affine": {
            "name": "neutral_is_affine",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EllipticCurve.is_neutral": {
            "name": "is_neutral",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "EllipticCurve.is_on_curve": {
            "name": "is_on_curve",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "EllipticCurve.to_affine": {
            "name": "to_affine",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EllipticCurve.decode_point": {
            "name": "decode_point",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": []
            }
        },
        "EllipticCurve.affine_random": {
            "name": "affine_random",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EllipticCurve.__eq__": {
            "name": "__eq__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EllipticCurve.__str__": {
            "name": "__str__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EllipticCurve.__repr__": {
            "name": "__repr__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/error.py": {
        "raise_non_invertible": {
            "name": "raise_non_invertible",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "raise_non_residue": {
            "name": "raise_non_residue",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "raise_unsatisified_assumption": {
            "name": "raise_unsatisified_assumption",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "pyecsca-master/pyecsca/ec/formula.py": {
        "OpResult.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [],
                "op": []
            }
        },
        "OpResult.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpResult.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormulaAction.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "formula": []
            }
        },
        "FormulaAction.add_operation": {
            "name": "add_operation",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "value": []
            }
        },
        "FormulaAction.add_result": {
            "name": "add_result",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "FormulaAction.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormulaAction.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.__validate_params": {
            "name": "__validate_params",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "params": []
            }
        },
        "Formula.__validate_points": {
            "name": "__validate_points",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "points": [],
                "params": []
            }
        },
        "Formula.__validate_assumptions": {
            "name": "__validate_assumptions",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "params": []
            }
        },
        "Formula.__call__": {
            "name": "__call__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Formula.__str__": {
            "name": "__str__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.input_index": {
            "name": "input_index",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.output_index": {
            "name": "output_index",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.inputs": {
            "name": "inputs",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.outputs": {
            "name": "outputs",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_operations": {
            "name": "num_operations",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_multiplications": {
            "name": "num_multiplications",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_divisions": {
            "name": "num_divisions",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_inversions": {
            "name": "num_inversions",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_powers": {
            "name": "num_powers",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_squarings": {
            "name": "num_squarings",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Formula.num_addsubs": {
            "name": "num_addsubs",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EFDFormula.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "coordinate_model": []
            }
        },
        "EFDFormula.__read_meta_file": {
            "name": "__read_meta_file",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "EFDFormula.__read_op3_file": {
            "name": "__read_op3_file",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "EFDFormula.input_index": {
            "name": "input_index",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EFDFormula.output_index": {
            "name": "output_index",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EFDFormula.inputs": {
            "name": "inputs",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EFDFormula.outputs": {
            "name": "outputs",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EFDFormula.__eq__": {
            "name": "__eq__",
            "location": 390,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EFDFormula.__hash__": {
            "name": "__hash__",
            "location": 397,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Formula.__validate_assumptions.resolve": {
            "name": "resolve",
            "location": 184,
            "return": [],
            "arguments": {
                "expression": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/key_agreement.py": {
        "ECDHAction.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "hash_algo": [],
                "privkey": [],
                "pubkey": []
            }
        },
        "ECDHAction.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyAgreement.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": [],
                "hash_algo": []
            }
        },
        "KeyAgreement.perform_raw": {
            "name": "perform_raw",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyAgreement.perform": {
            "name": "perform",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDH_NONE.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDH_SHA1.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDH_SHA224.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDH_SHA256.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDH_SHA384.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDH_SHA512.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "pubkey": [],
                "privkey": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/key_generation.py": {
        "KeygenAction.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "KeygenAction.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyGeneration.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "affine": []
            }
        },
        "KeyGeneration.generate": {
            "name": "generate",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/mod.py": {
        "gcd": {
            "name": "gcd",
            "location": 32,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "extgcd": {
            "name": "extgcd",
            "location": 45,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "jacobi": {
            "name": "jacobi",
            "location": 65,
            "return": [],
            "arguments": {
                "x": [],
                "n": []
            }
        },
        "miller_rabin": {
            "name": "miller_rabin",
            "location": 88,
            "return": [],
            "arguments": {
                "n": [],
                "rounds": []
            }
        },
        "_check": {
            "name": "_check",
            "location": 114,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "func": []
            }
        },
        "__ff_cache": {
            "name": "__ff_cache",
            "location": 449,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_symbolic_check": {
            "name": "_symbolic_check",
            "location": 453,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "func": []
            }
        },
        "_check.method": {
            "name": "method",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RandomModAction.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "RandomModAction.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.__new__": {
            "name": "__new__",
            "location": 151,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Mod.__add__": {
            "name": "__add__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__radd__": {
            "name": "__radd__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__sub__": {
            "name": "__sub__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__rsub__": {
            "name": "__rsub__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__neg__": {
            "name": "__neg__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.inverse": {
            "name": "inverse",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.__invert__": {
            "name": "__invert__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.is_residue": {
            "name": "is_residue",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.sqrt": {
            "name": "sqrt",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.__mul__": {
            "name": "__mul__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__rmul__": {
            "name": "__rmul__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__truediv__": {
            "name": "__truediv__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__floordiv__": {
            "name": "__floordiv__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Mod.__divmod__": {
            "name": "__divmod__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "divisor": []
            }
        },
        "Mod.__bytes__": {
            "name": "__bytes__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.__int__": {
            "name": "__int__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mod.random": {
            "name": "random",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": [],
                "n": []
            }
        },
        "Mod.__pow__": {
            "name": "__pow__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Mod.__str__": {
            "name": "__str__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__new__": {
            "name": "__new__",
            "location": 267,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "RawMod.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "n": []
            }
        },
        "RawMod.inverse": {
            "name": "inverse",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.is_residue": {
            "name": "is_residue",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.sqrt": {
            "name": "sqrt",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__bytes__": {
            "name": "__bytes__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__int__": {
            "name": "__int__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__eq__": {
            "name": "__eq__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RawMod.__ne__": {
            "name": "__ne__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RawMod.__repr__": {
            "name": "__repr__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__hash__": {
            "name": "__hash__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawMod.__pow__": {
            "name": "__pow__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Undefined.__new__": {
            "name": "__new__",
            "location": 371,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Undefined.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__add__": {
            "name": "__add__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__radd__": {
            "name": "__radd__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__sub__": {
            "name": "__sub__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__rsub__": {
            "name": "__rsub__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__neg__": {
            "name": "__neg__",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.inverse": {
            "name": "inverse",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.sqrt": {
            "name": "sqrt",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.is_residue": {
            "name": "is_residue",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__invert__": {
            "name": "__invert__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__mul__": {
            "name": "__mul__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__rmul__": {
            "name": "__rmul__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__truediv__": {
            "name": "__truediv__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__floordiv__": {
            "name": "__floordiv__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__divmod__": {
            "name": "__divmod__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "divisor": []
            }
        },
        "Undefined.__bytes__": {
            "name": "__bytes__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__int__": {
            "name": "__int__",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__eq__": {
            "name": "__eq__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__ne__": {
            "name": "__ne__",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Undefined.__repr__": {
            "name": "__repr__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__hash__": {
            "name": "__hash__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Undefined.__pow__": {
            "name": "__pow__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_symbolic_check.method": {
            "name": "method",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__new__": {
            "name": "__new__",
            "location": 476,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SymbolicMod.__init__": {
            "name": "__init__",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "n": []
            }
        },
        "SymbolicMod.__add__": {
            "name": "__add__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__radd__": {
            "name": "__radd__",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__sub__": {
            "name": "__sub__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__rsub__": {
            "name": "__rsub__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__neg__": {
            "name": "__neg__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.inverse": {
            "name": "inverse",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.sqrt": {
            "name": "sqrt",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.is_residue": {
            "name": "is_residue",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__invert__": {
            "name": "__invert__",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__mul__": {
            "name": "__mul__",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__rmul__": {
            "name": "__rmul__",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__truediv__": {
            "name": "__truediv__",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__floordiv__": {
            "name": "__floordiv__",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__divmod__": {
            "name": "__divmod__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "divisor": []
            }
        },
        "SymbolicMod.__bytes__": {
            "name": "__bytes__",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__int__": {
            "name": "__int__",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__eq__": {
            "name": "__eq__",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__ne__": {
            "name": "__ne__",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SymbolicMod.__repr__": {
            "name": "__repr__",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__hash__": {
            "name": "__hash__",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolicMod.__pow__": {
            "name": "__pow__",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "_is_prime": {
            "name": "_is_prime",
            "location": 574,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "GMPMod.__new__": {
            "name": "__new__",
            "location": 584,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "GMPMod.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "n": []
            }
        },
        "GMPMod.inverse": {
            "name": "inverse",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.is_residue": {
            "name": "is_residue",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.sqrt": {
            "name": "sqrt",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.__divmod__": {
            "name": "__divmod__",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "divisor": []
            }
        },
        "GMPMod.__bytes__": {
            "name": "__bytes__",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.__int__": {
            "name": "__int__",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.__eq__": {
            "name": "__eq__",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GMPMod.__ne__": {
            "name": "__ne__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GMPMod.__repr__": {
            "name": "__repr__",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.__hash__": {
            "name": "__hash__",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GMPMod.__pow__": {
            "name": "__pow__",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/model.py": {
        "EFDCurveModel.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "efd_name": [
                    "str"
                ]
            }
        },
        "EFDCurveModel.__read_curve_file": {
            "name": "__read_curve_file",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "file_path": []
            }
        },
        "EFDCurveModel.__read_coordinate_dir": {
            "name": "__read_coordinate_dir",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "dir_path": [],
                "name": []
            }
        },
        "EFDCurveModel.__eq__": {
            "name": "__eq__",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EFDCurveModel.__hash__": {
            "name": "__hash__",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EFDCurveModel.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EFDCurveModel.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShortWeierstrassModel.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MontgomeryModel.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EdwardsModel.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedEdwardsModel.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EFDCurveModel.__read_curve_file.format_eq": {
            "name": "format_eq",
            "location": 62,
            "return": [],
            "arguments": {
                "line": [],
                "mode": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/mult.py": {
        "ScalarMultiplicationAction.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "point": [],
                "scalar": []
            }
        },
        "ScalarMultiplicationAction.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrecomputationAction.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "point": []
            }
        },
        "ScalarMultiplier.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "short_circuit": []
            }
        },
        "ScalarMultiplier._add": {
            "name": "_add",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "one": [],
                "other": []
            }
        },
        "ScalarMultiplier._dbl": {
            "name": "_dbl",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "ScalarMultiplier._scl": {
            "name": "_scl",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "ScalarMultiplier._ladd": {
            "name": "_ladd",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "to_dbl": [],
                "to_add": []
            }
        },
        "ScalarMultiplier._dadd": {
            "name": "_dadd",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "one": [],
                "other": []
            }
        },
        "ScalarMultiplier._neg": {
            "name": "_neg",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "point": []
            }
        },
        "ScalarMultiplier.init": {
            "name": "init",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "point": []
            }
        },
        "ScalarMultiplier.multiply": {
            "name": "multiply",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "LTRMultiplier.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "scl": [],
                "always": [],
                "complete": [],
                "short_circuit": []
            }
        },
        "LTRMultiplier.multiply": {
            "name": "multiply",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "RTLMultiplier.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "scl": [],
                "always": [],
                "short_circuit": []
            }
        },
        "RTLMultiplier.multiply": {
            "name": "multiply",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "CoronMultiplier.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "scl": [],
                "short_circuit": []
            }
        },
        "CoronMultiplier.multiply": {
            "name": "multiply",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "LadderMultiplier.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "ladd": [],
                "dbl": [],
                "scl": [],
                "complete": [],
                "short_circuit": []
            }
        },
        "LadderMultiplier.multiply": {
            "name": "multiply",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "SimpleLadderMultiplier.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "scl": [],
                "complete": [],
                "short_circuit": []
            }
        },
        "SimpleLadderMultiplier.multiply": {
            "name": "multiply",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "DifferentialLadderMultiplier.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "dadd": [],
                "dbl": [],
                "scl": [],
                "complete": [],
                "short_circuit": []
            }
        },
        "DifferentialLadderMultiplier.multiply": {
            "name": "multiply",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "BinaryNAFMultiplier.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "neg": [],
                "scl": [],
                "short_circuit": []
            }
        },
        "BinaryNAFMultiplier.init": {
            "name": "init",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "point": []
            }
        },
        "BinaryNAFMultiplier.multiply": {
            "name": "multiply",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "WindowNAFMultiplier.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "add": [],
                "dbl": [],
                "neg": [],
                "width": [],
                "scl": [],
                "precompute_negation": [],
                "short_circuit": []
            }
        },
        "WindowNAFMultiplier.init": {
            "name": "init",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "point": []
            }
        },
        "WindowNAFMultiplier.multiply": {
            "name": "multiply",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/naf.py": {
        "wnaf": {
            "name": "wnaf",
            "location": 7,
            "return": [],
            "arguments": {
                "k": [],
                "w": []
            }
        },
        "naf": {
            "name": "naf",
            "location": 37,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "wnaf.mods": {
            "name": "mods",
            "location": 18,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/op.py": {
        "OpType.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "num_inputs": [],
                "op_str": []
            }
        },
        "CodeOp.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "CodeOp.__to_name": {
            "name": "__to_name",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CodeOp.__to_op": {
            "name": "__to_op",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "left": [],
                "right": []
            }
        },
        "CodeOp.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeOp.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeOp.__call__": {
            "name": "__call__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/params.py": {
        "_create_params": {
            "name": "_create_params",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "curve": [],
                "coords": [],
                "infty": []
            }
        },
        "load_category": {
            "name": "load_category",
            "location": 229,
            "return": [],
            "arguments": {
                "file": [],
                "coords": [],
                "infty": []
            }
        },
        "load_params": {
            "name": "load_params",
            "location": 267,
            "return": [],
            "arguments": {
                "file": [],
                "coords": [],
                "infty": []
            }
        },
        "get_category": {
            "name": "get_category",
            "location": 291,
            "return": [],
            "arguments": {
                "category": [],
                "coords": [],
                "infty": []
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 319,
            "return": [],
            "arguments": {
                "category": [],
                "name": [],
                "coords": [],
                "infty": []
            }
        },
        "DomainParameters.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "curve": [],
                "generator": [],
                "order": [],
                "cofactor": [],
                "name": [],
                "category": []
            }
        },
        "DomainParameters.__eq__": {
            "name": "__eq__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DomainParameters.__get_name": {
            "name": "__get_name",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameters.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameters.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterCategory.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "curves": []
            }
        },
        "DomainParameterCategory.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterCategory.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterCategory.__contains__": {
            "name": "__contains__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DomainParameterCategory.__len__": {
            "name": "__len__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterCategory.__getitem__": {
            "name": "__getitem__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/point.py": {
        "CoordinateMappingAction.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "model_from": [],
                "model_to": [],
                "point": []
            }
        },
        "CoordinateMappingAction.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Point.__getattribute__": {
            "name": "__getattribute__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Point.to_affine": {
            "name": "to_affine",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.to_model": {
            "name": "to_model",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "coordinate_model": [],
                "curve": []
            }
        },
        "Point.equals_affine": {
            "name": "equals_affine",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.equals_scaled": {
            "name": "equals_scaled",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.equals": {
            "name": "equals",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__bytes__": {
            "name": "__bytes__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__hash__": {
            "name": "__hash__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfinityPoint.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "InfinityPoint.to_affine": {
            "name": "to_affine",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfinityPoint.to_model": {
            "name": "to_model",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "coordinate_model": [],
                "curve": []
            }
        },
        "InfinityPoint.equals_affine": {
            "name": "equals_affine",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InfinityPoint.equals_scaled": {
            "name": "equals_scaled",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InfinityPoint.equals": {
            "name": "equals",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InfinityPoint.__bytes__": {
            "name": "__bytes__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfinityPoint.__eq__": {
            "name": "__eq__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InfinityPoint.__str__": {
            "name": "__str__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfinityPoint.__repr__": {
            "name": "__repr__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/signature.py": {
        "SignatureResult.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "s": []
            }
        },
        "SignatureResult.from_DER": {
            "name": "from_DER",
            "location": 28,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "SignatureResult.to_DER": {
            "name": "to_DER",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignatureResult.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SignatureResult.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignatureResult.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDSAAction.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "hash_algo": [],
                "msg": []
            }
        },
        "ECDSAAction.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDSASignAction.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "hash_algo": [],
                "msg": [],
                "privkey": []
            }
        },
        "ECDSASignAction.__repr__": {
            "name": "__repr__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDSAVerifyAction.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "hash_algo": [],
                "msg": [],
                "signature": [],
                "pubkey": []
            }
        },
        "ECDSAVerifyAction.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": [],
                "hash_algo": []
            }
        },
        "Signature.can_sign": {
            "name": "can_sign",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature.can_verify": {
            "name": "can_verify",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature._get_nonce": {
            "name": "_get_nonce",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": []
            }
        },
        "Signature._do_sign": {
            "name": "_do_sign",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": [],
                "digest": []
            }
        },
        "Signature.sign_hash": {
            "name": "sign_hash",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "digest": [],
                "nonce": []
            }
        },
        "Signature.sign_data": {
            "name": "sign_data",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "nonce": []
            }
        },
        "Signature._do_verify": {
            "name": "_do_verify",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "signature": [],
                "digest": []
            }
        },
        "Signature.verify_hash": {
            "name": "verify_hash",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "signature": [],
                "digest": []
            }
        },
        "Signature.verify_data": {
            "name": "verify_data",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "signature": [],
                "data": []
            }
        },
        "ECDSA_NONE.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDSA_SHA1.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDSA_SHA224.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDSA_SHA256.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDSA_SHA384.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        },
        "ECDSA_SHA512.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "mult": [],
                "params": [],
                "add": [],
                "pubkey": [],
                "privkey": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/transformations.py": {
        "__M_map": {
            "name": "__M_map",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "params": [],
                "param_names": [],
                "map_parameters": [],
                "map_point": [],
                "model": []
            }
        },
        "M2SW": {
            "name": "M2SW",
            "location": 32,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "M2TE": {
            "name": "M2TE",
            "location": 60,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "TE2M": {
            "name": "TE2M",
            "location": 86,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "SW2M": {
            "name": "SW2M",
            "location": 112,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "SW2TE": {
            "name": "SW2TE",
            "location": 154,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "M2SW.map_parameters": {
            "name": "map_parameters",
            "location": 44,
            "return": [],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "M2SW.map_point": {
            "name": "map_point",
            "location": 49,
            "return": [],
            "arguments": {
                "A": [],
                "B": [],
                "pt": [],
                "aff": []
            }
        },
        "M2TE.map_parameters": {
            "name": "map_parameters",
            "location": 72,
            "return": [],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "M2TE.map_point": {
            "name": "map_point",
            "location": 77,
            "return": [],
            "arguments": {
                "A": [],
                "B": [],
                "pt": [],
                "aff": []
            }
        },
        "TE2M.map_parameters": {
            "name": "map_parameters",
            "location": 98,
            "return": [],
            "arguments": {
                "a": [],
                "d": []
            }
        },
        "TE2M.map_point": {
            "name": "map_point",
            "location": 103,
            "return": [],
            "arguments": {
                "a": [],
                "d": [],
                "pt": [],
                "aff": []
            }
        },
        "SW2M.map_parameters": {
            "name": "map_parameters",
            "location": 140,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SW2M.map_point": {
            "name": "map_point",
            "location": 145,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "pt": [],
                "aff": []
            }
        },
        "SW2TE.map_parameters": {
            "name": "map_parameters",
            "location": 182,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SW2TE.map_point": {
            "name": "map_point",
            "location": 187,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "pt": [],
                "aff": []
            }
        }
    },
    "pyecsca-master/pyecsca/ec/__init__.py": {},
    "pyecsca-master/pyecsca/misc/cfg.py": {
        "getconfig": {
            "name": "getconfig",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "setconfig": {
            "name": "setconfig",
            "location": 148,
            "return": [],
            "arguments": {
                "cfg": []
            }
        },
        "resetconfig": {
            "name": "resetconfig",
            "location": 159,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "ECConfig.no_inverse_action": {
            "name": "no_inverse_action",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ECConfig.non_residue_action": {
            "name": "non_residue_action",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ECConfig.unsatisfied_formula_assumption_action": {
            "name": "unsatisfied_formula_assumption_action",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ECConfig.unsatisfied_coordinate_assumption_action": {
            "name": "unsatisfied_coordinate_assumption_action",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ECConfig.mod_implementation": {
            "name": "mod_implementation",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryConfig.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryConfig.__enter__": {
            "name": "__enter__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryConfig.__exit__": {
            "name": "__exit__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "v": [],
                "tb": []
            }
        }
    },
    "pyecsca-master/pyecsca/misc/__init__.py": {},
    "pyecsca-master/pyecsca/sca/__init__.py": {},
    "pyecsca-master/pyecsca/sca/re/rpa.py": {
        "MultipleContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultipleContext.enter_action": {
            "name": "enter_action",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "MultipleContext.exit_action": {
            "name": "exit_action",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "MultipleContext.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/re/__init__.py": {},
    "pyecsca-master/pyecsca/sca/scope/base.py": {
        "Scope.open": {
            "name": "open",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.channels": {
            "name": "channels",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.setup_frequency": {
            "name": "setup_frequency",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "Scope.setup_channel": {
            "name": "setup_channel",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "coupling": [],
                "range": [],
                "offset": [],
                "enable": []
            }
        },
        "Scope.setup_trigger": {
            "name": "setup_trigger",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "threshold": [],
                "direction": [],
                "delay": [],
                "timeout": [],
                "enable": []
            }
        },
        "Scope.setup_capture": {
            "name": "setup_capture",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "Scope.arm": {
            "name": "arm",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.capture": {
            "name": "capture",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Scope.retrieve": {
            "name": "retrieve",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "type": [],
                "dtype": []
            }
        },
        "Scope.stop": {
            "name": "stop",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.close": {
            "name": "close",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/scope/chipwhisperer.py": {
        "ChipWhispererScope.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "ChipWhispererScope.open": {
            "name": "open",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererScope.channels": {
            "name": "channels",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererScope.setup_frequency": {
            "name": "setup_frequency",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "ChipWhispererScope.setup_channel": {
            "name": "setup_channel",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "coupling": [],
                "range": [],
                "offset": [],
                "enable": []
            }
        },
        "ChipWhispererScope.setup_trigger": {
            "name": "setup_trigger",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "threshold": [],
                "direction": [],
                "delay": [],
                "timeout": [],
                "enable": []
            }
        },
        "ChipWhispererScope.setup_capture": {
            "name": "setup_capture",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "ChipWhispererScope.arm": {
            "name": "arm",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererScope.capture": {
            "name": "capture",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "ChipWhispererScope.retrieve": {
            "name": "retrieve",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "type": [],
                "dtype": []
            }
        },
        "ChipWhispererScope.stop": {
            "name": "stop",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererScope.close": {
            "name": "close",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/scope/picoscope_alt.py": {
        "PicoScopeAlt.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "PicoScopeAlt.open": {
            "name": "open",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeAlt.channels": {
            "name": "channels",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeAlt.setup_frequency": {
            "name": "setup_frequency",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PicoScopeAlt.setup_channel": {
            "name": "setup_channel",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "coupling": [],
                "range": [],
                "offset": [],
                "enable": []
            }
        },
        "PicoScopeAlt.setup_trigger": {
            "name": "setup_trigger",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "threshold": [],
                "direction": [],
                "delay": [],
                "timeout": [],
                "enable": []
            }
        },
        "PicoScopeAlt.setup_capture": {
            "name": "setup_capture",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "PicoScopeAlt.arm": {
            "name": "arm",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeAlt.capture": {
            "name": "capture",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "PicoScopeAlt.retrieve": {
            "name": "retrieve",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "type": [],
                "dtype": []
            }
        },
        "PicoScopeAlt.stop": {
            "name": "stop",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeAlt.close": {
            "name": "close",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/scope/picoscope_sdk.py": {
        "adc2volt": {
            "name": "adc2volt",
            "location": 34,
            "return": [
                "Union[(float, np.ndarray)]"
            ],
            "arguments": {
                "adc": [
                    "Union[(ctypes.c_int16, np.ndarray)]"
                ],
                "volt_range": [
                    "float"
                ],
                "adc_minmax": [
                    "int"
                ],
                "dtype": []
            }
        },
        "volt2adc": {
            "name": "volt2adc",
            "location": 56,
            "return": [
                "Union[(ctypes.c_int16, np.ndarray)]"
            ],
            "arguments": {
                "volt": [
                    "Union[(float, np.ndarray)]"
                ],
                "volt_range": [
                    "float"
                ],
                "adc_minmax": [
                    "int"
                ],
                "dtype": []
            }
        },
        "PicoScopeSdk.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "PicoScopeSdk.open": {
            "name": "open",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.channels": {
            "name": "channels",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.get_variant": {
            "name": "get_variant",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.setup_frequency": {
            "name": "setup_frequency",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PicoScopeSdk.set_channel": {
            "name": "set_channel",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enabled": [],
                "coupling": [],
                "range": [],
                "offset": []
            }
        },
        "PicoScopeSdk.setup_channel": {
            "name": "setup_channel",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "coupling": [],
                "range": [],
                "offset": [],
                "enable": []
            }
        },
        "PicoScopeSdk._set_freq": {
            "name": "_set_freq",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": [],
                "period_bound": [],
                "timebase_bound": [],
                "low_freq": [],
                "high_freq": [],
                "high_subtract": []
            }
        },
        "PicoScopeSdk.set_frequency": {
            "name": "set_frequency",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PicoScopeSdk.setup_trigger": {
            "name": "setup_trigger",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "threshold": [],
                "direction": [],
                "delay": [],
                "timeout": [],
                "enable": []
            }
        },
        "PicoScopeSdk.set_trigger": {
            "name": "set_trigger",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "enabled": [],
                "value": [],
                "channel": [],
                "delay": [],
                "timeout": []
            }
        },
        "PicoScopeSdk.setup_capture": {
            "name": "setup_capture",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "PicoScopeSdk.set_buffer": {
            "name": "set_buffer",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "PicoScopeSdk.arm": {
            "name": "arm",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.capture": {
            "name": "capture",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "PicoScopeSdk.retrieve": {
            "name": "retrieve",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "type": [],
                "dtype": []
            }
        },
        "PicoScopeSdk.stop": {
            "name": "stop",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.close": {
            "name": "close",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PicoScopeSdk.__dispatch_call": {
            "name": "__dispatch_call",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PS3000Scope.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "PS3000Scope.get_variant": {
            "name": "get_variant",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PS3000Scope.set_frequency": {
            "name": "set_frequency",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PS4000Scope.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "PS4000Scope.set_frequency": {
            "name": "set_frequency",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PS5000Scope.__init__": {
            "name": "__init__",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "PS5000Scope.set_frequency": {
            "name": "set_frequency",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        },
        "PS6000Scope.__init__": {
            "name": "__init__",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "variant": []
            }
        },
        "PS6000Scope.open": {
            "name": "open",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PS6000Scope.set_channel": {
            "name": "set_channel",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enabled": [],
                "coupling": [],
                "range": [],
                "offset": []
            }
        },
        "PS6000Scope.set_buffer": {
            "name": "set_buffer",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "enable": []
            }
        },
        "PS6000Scope.set_frequency": {
            "name": "set_frequency",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "pretrig": [],
                "posttrig": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/scope/__init__.py": {},
    "pyecsca-master/pyecsca/sca/stacked_traces/stacked_traces.py": {
        "_gpu_average": {
            "name": "_gpu_average",
            "location": 181,
            "return": [],
            "arguments": {
                "col": [],
                "samples": [],
                "result": []
            }
        },
        "gpu_average": {
            "name": "gpu_average",
            "location": 196,
            "return": [],
            "arguments": {
                "samples": [],
                "result": []
            }
        },
        "_gpu_var_from_avg": {
            "name": "_gpu_var_from_avg",
            "location": 212,
            "return": [],
            "arguments": {
                "col": [],
                "samples": [],
                "averages": [],
                "result": []
            }
        },
        "_gpu_variance": {
            "name": "_gpu_variance",
            "location": 230,
            "return": [],
            "arguments": {
                "col": [],
                "samples": [],
                "result": []
            }
        },
        "gpu_std_dev": {
            "name": "gpu_std_dev",
            "location": 243,
            "return": [],
            "arguments": {
                "samples": [],
                "result": []
            }
        },
        "gpu_variance": {
            "name": "gpu_variance",
            "location": 261,
            "return": [],
            "arguments": {
                "samples": [],
                "result": []
            }
        },
        "gpu_avg_var": {
            "name": "gpu_avg_var",
            "location": 277,
            "return": [],
            "arguments": {
                "samples": [],
                "result_avg": [],
                "result_var": []
            }
        },
        "gpu_add": {
            "name": "gpu_add",
            "location": 296,
            "return": [],
            "arguments": {
                "samples": [],
                "result": []
            }
        },
        "StackedTraces.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "samples": [],
                "meta": []
            }
        },
        "StackedTraces.fromarray": {
            "name": "fromarray",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "traces": [],
                "meta": []
            }
        },
        "StackedTraces.fromtraceset": {
            "name": "fromtraceset",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "traceset": []
            }
        },
        "StackedTraces.__len__": {
            "name": "__len__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackedTraces.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "StackedTraces.__iter__": {
            "name": "__iter__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "traces": [],
                "tpb": []
            }
        },
        "GPUTraceManager._setup1D": {
            "name": "_setup1D",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "output_count": []
            }
        },
        "GPUTraceManager._gpu_combine1D": {
            "name": "_gpu_combine1D",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "output_count": []
            }
        },
        "GPUTraceManager.average": {
            "name": "average",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.conditional_average": {
            "name": "conditional_average",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.standard_deviation": {
            "name": "standard_deviation",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.variance": {
            "name": "variance",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.average_and_variance": {
            "name": "average_and_variance",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPUTraceManager.add": {
            "name": "add",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/stacked_traces/__init__.py": {},
    "pyecsca-master/pyecsca/sca/target/base.py": {
        "Target.connect": {
            "name": "connect",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.disconnect": {
            "name": "disconnect",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/binary.py": {
        "BinaryTarget.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "debug_output": []
            }
        },
        "BinaryTarget.connect": {
            "name": "connect",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryTarget.write": {
            "name": "write",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BinaryTarget.read": {
            "name": "read",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "timeout": []
            }
        },
        "BinaryTarget.disconnect": {
            "name": "disconnect",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/chipwhisperer.py": {
        "ChipWhispererTarget.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "scope": [],
                "programmer": []
            }
        },
        "ChipWhispererTarget.connect": {
            "name": "connect",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererTarget.flash": {
            "name": "flash",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "fw_path": []
            }
        },
        "ChipWhispererTarget.write": {
            "name": "write",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ChipWhispererTarget.read": {
            "name": "read",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "timeout": []
            }
        },
        "ChipWhispererTarget.reset": {
            "name": "reset",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererTarget.disconnect": {
            "name": "disconnect",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/ectester.py": {
        "ShiftableFlag.__lshift__": {
            "name": "__lshift__",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ShiftableFlag.__rshift__": {
            "name": "__rshift__",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ShiftableFlag.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportEnum.from_bool": {
            "name": "from_bool",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [],
                "num_sw": [
                    "int"
                ],
                "num_params": [
                    "int"
                ]
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocateKaResponse.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "AllocateSigResponse.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "AllocateResponse.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": []
            }
        },
        "ClearResponse.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": []
            }
        },
        "SetResponse.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": []
            }
        },
        "TransformResponse.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": []
            }
        },
        "GenerateResponse.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": []
            }
        },
        "ExportResponse.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "keypair": [],
                "key": [],
                "params": []
            }
        },
        "ExportResponse.get_index": {
            "name": "get_index",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "param": []
            }
        },
        "ExportResponse.get_param": {
            "name": "get_param",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "param": []
            }
        },
        "ExportResponse.__repr__": {
            "name": "__repr__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDHResponse.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "export": []
            }
        },
        "ECDHResponse.secret": {
            "name": "secret",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDHResponse.__repr__": {
            "name": "__repr__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDSAResponse.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "export": []
            }
        },
        "ECDSAResponse.signature": {
            "name": "signature",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECDSAResponse.__repr__": {
            "name": "__repr__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CleanupResponse.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "RunModeResponse.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "InfoResponse.__init__": {
            "name": "__init__",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "InfoResponse.__repr__": {
            "name": "__repr__",
            "location": 502,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTarget.connect": {
            "name": "connect",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTarget.send_apdu": {
            "name": "send_apdu",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "apdu": []
            }
        },
        "ECTesterTarget.select_applet": {
            "name": "select_applet",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "latest_version": [],
                "count_back": []
            }
        },
        "ECTesterTarget.encode_parameters": {
            "name": "encode_parameters",
            "location": 592,
            "return": [],
            "arguments": {
                "params": [],
                "obj": []
            }
        },
        "ECTesterTarget.allocate_ka": {
            "name": "allocate_ka",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "ka_type": []
            }
        },
        "ECTesterTarget.allocate_sig": {
            "name": "allocate_sig",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "sig_type": []
            }
        },
        "ECTesterTarget.allocate": {
            "name": "allocate",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "builder": [],
                "key_length": [],
                "key_class": []
            }
        },
        "ECTesterTarget.clear": {
            "name": "clear",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": []
            }
        },
        "ECTesterTarget.set": {
            "name": "set",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "curve": [],
                "params": [],
                "values": []
            }
        },
        "ECTesterTarget.transform": {
            "name": "transform",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "key": [],
                "params": [],
                "transformation": []
            }
        },
        "ECTesterTarget.generate": {
            "name": "generate",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": []
            }
        },
        "ECTesterTarget.export": {
            "name": "export",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "key": [],
                "params": []
            }
        },
        "ECTesterTarget.ecdh": {
            "name": "ecdh",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "pubkey": [],
                "privkey": [],
                "export": [],
                "transformation": [],
                "ka_type": []
            }
        },
        "ECTesterTarget.ecdh_direct": {
            "name": "ecdh_direct",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "privkey": [],
                "export": [],
                "transformation": [],
                "ka_type": [],
                "pubkey": []
            }
        },
        "ECTesterTarget.ecdsa": {
            "name": "ecdsa",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "export": [],
                "sig_type": [],
                "data": []
            }
        },
        "ECTesterTarget.ecdsa_sign": {
            "name": "ecdsa_sign",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "export": [],
                "sig_type": [],
                "data": []
            }
        },
        "ECTesterTarget.ecdsa_verify": {
            "name": "ecdsa_verify",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "keypair": [],
                "sig_type": [],
                "sig": [],
                "data": []
            }
        },
        "ECTesterTarget.cleanup": {
            "name": "cleanup",
            "location": 949,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTarget.info": {
            "name": "info",
            "location": 960,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTarget.run_mode": {
            "name": "run_mode",
            "location": 971,
            "return": [],
            "arguments": {
                "self": [],
                "run_mode": []
            }
        },
        "ECTesterTarget.encode_parameters.convert_int": {
            "name": "convert_int",
            "location": 597,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "ECTesterTarget.encode_parameters.convert_point": {
            "name": "convert_point",
            "location": 601,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/flash.py": {
        "Flashable.flash": {
            "name": "flash",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "fw_path": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/ISO7816.py": {
        "CommandAPDU.__bytes__": {
            "name": "__bytes__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISO7816Target.atr": {
            "name": "atr",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISO7816Target.select": {
            "name": "select",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "aid": []
            }
        },
        "ISO7816Target.send_apdu": {
            "name": "send_apdu",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "apdu": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/PCSC.py": {
        "PCSCTarget.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "reader": []
            }
        },
        "PCSCTarget.connect": {
            "name": "connect",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCSCTarget.atr": {
            "name": "atr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCSCTarget.select": {
            "name": "select",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "aid": []
            }
        },
        "PCSCTarget.send_apdu": {
            "name": "send_apdu",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "apdu": []
            }
        },
        "PCSCTarget.disconnect": {
            "name": "disconnect",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/serial.py": {
        "SerialTarget.write": {
            "name": "write",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SerialTarget.read": {
            "name": "read",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "timeout": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/simpleserial.py": {
        "SimpleSerialMessage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "char": [],
                "data": []
            }
        },
        "SimpleSerialMessage.from_raw": {
            "name": "from_raw",
            "location": 22,
            "return": [],
            "arguments": {
                "raw": []
            }
        },
        "SimpleSerialMessage.__bytes__": {
            "name": "__bytes__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialMessage.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialMessage.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTarget.recv_msgs": {
            "name": "recv_msgs",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SimpleSerialTarget.send_cmd": {
            "name": "send_cmd",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "timeout": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/target/__init__.py": {},
    "pyecsca-master/pyecsca/sca/trace/align.py": {
        "_align_reference": {
            "name": "_align_reference",
            "location": 12,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_correlation": {
            "name": "align_correlation",
            "location": 36,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_peaks": {
            "name": "align_peaks",
            "location": 90,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_offset": {
            "name": "align_offset",
            "location": 129,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_sad": {
            "name": "align_sad",
            "location": 181,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_dtw_scale": {
            "name": "align_dtw_scale",
            "location": 217,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_dtw": {
            "name": "align_dtw",
            "location": 256,
            "return": [],
            "arguments": {
                "reference": []
            }
        },
        "align_correlation.align_func": {
            "name": "align_func",
            "location": 66,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "align_peaks.align_func": {
            "name": "align_func",
            "location": 116,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "align_offset.align_func": {
            "name": "align_func",
            "location": 158,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "align_sad.sad": {
            "name": "sad",
            "location": 203,
            "return": [],
            "arguments": {
                "reference_part": [],
                "trace_part": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/combine.py": {
        "average": {
            "name": "average",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "conditional_average": {
            "name": "conditional_average",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "standard_deviation": {
            "name": "standard_deviation",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "variance": {
            "name": "variance",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "average_and_variance": {
            "name": "average_and_variance",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "subtract": {
            "name": "subtract",
            "location": 148,
            "return": [],
            "arguments": {
                "one": [],
                "other": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/edit.py": {
        "trim": {
            "name": "trim",
            "location": 10,
            "return": [],
            "arguments": {
                "trace": [],
                "start": [],
                "end": []
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 29,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "pad": {
            "name": "pad",
            "location": 40,
            "return": [],
            "arguments": {
                "trace": [],
                "lengths": [],
                "values": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/filter.py": {
        "_filter_any": {
            "name": "_filter_any",
            "location": 9,
            "return": [],
            "arguments": {
                "trace": [],
                "sampling_frequency": [],
                "cutoff": [],
                "band_type": []
            }
        },
        "filter_lowpass": {
            "name": "filter_lowpass",
            "location": 30,
            "return": [],
            "arguments": {
                "trace": [],
                "sampling_frequency": [],
                "cutoff": []
            }
        },
        "filter_highpass": {
            "name": "filter_highpass",
            "location": 43,
            "return": [],
            "arguments": {
                "trace": [],
                "sampling_frequency": [],
                "cutoff": []
            }
        },
        "filter_bandpass": {
            "name": "filter_bandpass",
            "location": 56,
            "return": [],
            "arguments": {
                "trace": [],
                "sampling_frequency": [],
                "low": [],
                "high": []
            }
        },
        "filter_bandstop": {
            "name": "filter_bandstop",
            "location": 72,
            "return": [],
            "arguments": {
                "trace": [],
                "sampling_frequency": [],
                "low": [],
                "high": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/match.py": {
        "match_pattern": {
            "name": "match_pattern",
            "location": 13,
            "return": [],
            "arguments": {
                "trace": [],
                "pattern": [],
                "threshold": []
            }
        },
        "match_part": {
            "name": "match_part",
            "location": 47,
            "return": [],
            "arguments": {
                "trace": [],
                "offset": [],
                "length": [],
                "threshold": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/plot.py": {
        "save_figure": {
            "name": "save_figure",
            "location": 12,
            "return": [],
            "arguments": {
                "figure": [],
                "fname": []
            }
        },
        "save_figure_png": {
            "name": "save_figure_png",
            "location": 17,
            "return": [],
            "arguments": {
                "figure": [],
                "fname": []
            }
        },
        "save_figure_svg": {
            "name": "save_figure_svg",
            "location": 22,
            "return": [],
            "arguments": {
                "figure": [],
                "fname": []
            }
        },
        "plot_trace": {
            "name": "plot_trace",
            "location": 27,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "plot_traces": {
            "name": "plot_traces",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "pyecsca-master/pyecsca/sca/trace/process.py": {
        "absolute": {
            "name": "absolute",
            "location": 11,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "invert": {
            "name": "invert",
            "location": 22,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "threshold": {
            "name": "threshold",
            "location": 33,
            "return": [],
            "arguments": {
                "trace": [],
                "value": []
            }
        },
        "_rolling_window": {
            "name": "_rolling_window",
            "location": 47,
            "return": [],
            "arguments": {
                "samples": [],
                "window": []
            }
        },
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 54,
            "return": [],
            "arguments": {
                "trace": [],
                "window": []
            }
        },
        "offset": {
            "name": "offset",
            "location": 75,
            "return": [],
            "arguments": {
                "trace": [],
                "offset": []
            }
        },
        "_root_mean_square": {
            "name": "_root_mean_square",
            "location": 88,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "recenter": {
            "name": "recenter",
            "location": 93,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 105,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "normalize_wl": {
            "name": "normalize_wl",
            "location": 118,
            "return": [],
            "arguments": {
                "trace": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/sampling.py": {
        "downsample_average": {
            "name": "downsample_average",
            "location": 12,
            "return": [],
            "arguments": {
                "trace": [],
                "factor": []
            }
        },
        "downsample_pick": {
            "name": "downsample_pick",
            "location": 33,
            "return": [],
            "arguments": {
                "trace": [],
                "factor": [],
                "offset": []
            }
        },
        "downsample_max": {
            "name": "downsample_max",
            "location": 47,
            "return": [],
            "arguments": {
                "trace": [],
                "factor": []
            }
        },
        "downsample_min": {
            "name": "downsample_min",
            "location": 66,
            "return": [],
            "arguments": {
                "trace": [],
                "factor": []
            }
        },
        "downsample_decimate": {
            "name": "downsample_decimate",
            "location": 85,
            "return": [],
            "arguments": {
                "trace": [],
                "factor": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/test.py": {
        "_ttest_func": {
            "name": "_ttest_func",
            "location": 13,
            "return": [],
            "arguments": {
                "first_set": [],
                "second_set": [],
                "equal_var": []
            }
        },
        "welch_ttest": {
            "name": "welch_ttest",
            "location": 25,
            "return": [],
            "arguments": {
                "first_set": [],
                "second_set": [],
                "dof": [],
                "p_value": []
            }
        },
        "student_ttest": {
            "name": "student_ttest",
            "location": 74,
            "return": [],
            "arguments": {
                "first_set": [],
                "second_set": []
            }
        },
        "ks_test": {
            "name": "ks_test",
            "location": 90,
            "return": [],
            "arguments": {
                "first_set": [],
                "second_set": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/trace.py": {
        "Trace.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "samples": [],
                "meta": [],
                "trace_set": []
            }
        },
        "Trace.__len__": {
            "name": "__len__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trace.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Trace.__setitem__": {
            "name": "__setitem__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Trace.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trace.trace_set": {
            "name": "trace_set",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "trace_set": []
            }
        },
        "Trace.__getstate__": {
            "name": "__getstate__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trace.__setstate__": {
            "name": "__setstate__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Trace.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Trace.with_samples": {
            "name": "with_samples",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "Trace.__copy__": {
            "name": "__copy__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trace.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "memodict": []
            }
        },
        "Trace.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombinedTrace.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "samples": [],
                "meta": [],
                "trace_set": [],
                "parents": []
            }
        },
        "CombinedTrace.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace/__init__.py": {},
    "pyecsca-master/pyecsca/sca/trace_set/base.py": {
        "TraceSet.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TraceSet.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TraceSet.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TraceSet.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TraceSet.read": {
            "name": "read",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "TraceSet.inplace": {
            "name": "inplace",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "TraceSet.write": {
            "name": "write",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "TraceSet.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace_set/chipwhisperer.py": {
        "ChipWhispererTraceSet.read": {
            "name": "read",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "ChipWhispererTraceSet.inplace": {
            "name": "inplace",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "ChipWhispererTraceSet.write": {
            "name": "write",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "ChipWhispererTraceSet.__read": {
            "name": "__read",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "full_path": []
            }
        },
        "ChipWhispererTraceSet.__read_data": {
            "name": "__read_data",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "name": []
            }
        },
        "ChipWhispererTraceSet.__read_config": {
            "name": "__read_config",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "name": []
            }
        },
        "ChipWhispererTraceSet.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace_set/hdf5.py": {
        "HDF5Meta.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "HDF5Meta.__getitem__": {
            "name": "__getitem__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "HDF5Meta.__setitem__": {
            "name": "__setitem__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HDF5Meta.__delitem__": {
            "name": "__delitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDF5Meta.__copy__": {
            "name": "__copy__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5Meta.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "memodict": []
            }
        },
        "HDF5Meta.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5Meta.__len__": {
            "name": "__len__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSet.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSet.read": {
            "name": "read",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "HDF5TraceSet.inplace": {
            "name": "inplace",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "HDF5TraceSet.insert": {
            "name": "insert",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "HDF5TraceSet.get": {
            "name": "get",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "HDF5TraceSet.append": {
            "name": "append",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "HDF5TraceSet.remove": {
            "name": "remove",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "HDF5TraceSet.save": {
            "name": "save",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSet.close": {
            "name": "close",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSet.write": {
            "name": "write",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "HDF5TraceSet.__repr__": {
            "name": "__repr__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace_set/inspector.py": {
        "SampleCoding.dtype": {
            "name": "dtype",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parsers.read_int": {
            "name": "read_int",
            "location": 32,
            "return": [],
            "arguments": {
                "bytes": []
            }
        },
        "Parsers.read_bool": {
            "name": "read_bool",
            "location": 36,
            "return": [],
            "arguments": {
                "bytes": []
            }
        },
        "Parsers.read_float": {
            "name": "read_float",
            "location": 40,
            "return": [],
            "arguments": {
                "bytes": []
            }
        },
        "Parsers.read_str": {
            "name": "read_str",
            "location": 44,
            "return": [],
            "arguments": {
                "bytes": []
            }
        },
        "Parsers.write_int": {
            "name": "write_int",
            "location": 48,
            "return": [],
            "arguments": {
                "i": [],
                "length": []
            }
        },
        "Parsers.write_bool": {
            "name": "write_bool",
            "location": 52,
            "return": [],
            "arguments": {
                "b": [],
                "length": []
            }
        },
        "Parsers.write_float": {
            "name": "write_float",
            "location": 56,
            "return": [],
            "arguments": {
                "f": [],
                "length": []
            }
        },
        "Parsers.write_str": {
            "name": "write_str",
            "location": 60,
            "return": [],
            "arguments": {
                "s": [],
                "length": []
            }
        },
        "InspectorTraceSet.read": {
            "name": "read",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "InspectorTraceSet.__read": {
            "name": "__read",
            "location": 173,
            "return": [],
            "arguments": {
                "cls": [],
                "file": []
            }
        },
        "InspectorTraceSet.inplace": {
            "name": "inplace",
            "location": 210,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "InspectorTraceSet.write": {
            "name": "write",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "InspectorTraceSet.__write": {
            "name": "__write",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "InspectorTraceSet.__scale": {
            "name": "__scale",
            "location": 262,
            "return": [],
            "arguments": {
                "samples": [],
                "factor": []
            }
        },
        "InspectorTraceSet.__unscale": {
            "name": "__unscale",
            "location": 266,
            "return": [],
            "arguments": {
                "samples": [],
                "factor": [],
                "coding": []
            }
        },
        "InspectorTraceSet.sampling_frequency": {
            "name": "sampling_frequency",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InspectorTraceSet.__repr__": {
            "name": "__repr__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace_set/pickle.py": {
        "PickleTraceSet.read": {
            "name": "read",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "PickleTraceSet.inplace": {
            "name": "inplace",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "input": []
            }
        },
        "PickleTraceSet.write": {
            "name": "write",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "output": []
            }
        }
    },
    "pyecsca-master/pyecsca/sca/trace_set/__init__.py": {},
    "pyecsca-master/test/utils.py": {
        "Profiler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prof_type": [],
                "output_directory": [],
                "benchmark_name": []
            }
        },
        "Profiler.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [
                "_TProfiler"
            ],
            "arguments": {
                "self": [
                    "_TProfiler"
                ]
            }
        },
        "Profiler.__exit__": {
            "name": "__exit__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        },
        "Profiler.save": {
            "name": "save",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.output": {
            "name": "output",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profiler.get_time": {
            "name": "get_time",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/__init__.py": {},
    "pyecsca-master/test/data/target.py": {},
    "pyecsca-master/test/ec/perf_formula.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {
                "profiler": [],
                "mod": [],
                "operations": [],
                "directory": []
            }
        }
    },
    "pyecsca-master/test/ec/perf_mod.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {
                "profiler": [],
                "mod": [],
                "operations": [],
                "directory": []
            }
        }
    },
    "pyecsca-master/test/ec/perf_mult.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {
                "profiler": [],
                "mod": [],
                "operations": [],
                "directory": []
            }
        }
    },
    "pyecsca-master/test/ec/test_configuration.py": {
        "ConfigurationTests.base_independents": {
            "name": "base_independents",
            "location": 18,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationTests.test_all": {
            "name": "test_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationTests.test_weierstrass_projective": {
            "name": "test_weierstrass_projective",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationTests.test_mult_class": {
            "name": "test_mult_class",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationTests.test_one": {
            "name": "test_one",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_context.py": {
        "TreeTests.test_walk_by_key": {
            "name": "test_walk_by_key",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTests.test_walk_by_index": {
            "name": "test_walk_by_index",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeTests.test_repr": {
            "name": "test_repr",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.test_null": {
            "name": "test_null",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.test_default": {
            "name": "test_default",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.test_default_no_enter": {
            "name": "test_default_no_enter",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.test_path": {
            "name": "test_path",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTests.test_str": {
            "name": "test_str",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_curve.py": {
        "CurveTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_is_neutral": {
            "name": "test_is_neutral",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_is_on_curve": {
            "name": "test_is_on_curve",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_add": {
            "name": "test_affine_add",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_double": {
            "name": "test_affine_double",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_negate": {
            "name": "test_affine_negate",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_multiply": {
            "name": "test_affine_multiply",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_neutral": {
            "name": "test_affine_neutral",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_affine_random": {
            "name": "test_affine_random",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_neutral_is_affine": {
            "name": "test_neutral_is_affine",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_eq": {
            "name": "test_eq",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurveTests.test_decode": {
            "name": "test_decode",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_formula.py": {
        "FormulaTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_wrong_call": {
            "name": "test_wrong_call",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_indices": {
            "name": "test_indices",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_inputs_outputs": {
            "name": "test_inputs_outputs",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_eq": {
            "name": "test_eq",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_num_ops": {
            "name": "test_num_ops",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_assumptions": {
            "name": "test_assumptions",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_parameters": {
            "name": "test_parameters",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormulaTests.test_symbolic": {
            "name": "test_symbolic",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_key_agreement.py": {
        "KeyAgreementTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyAgreementTests.test_all": {
            "name": "test_all",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "algo": []
            }
        }
    },
    "pyecsca-master/test/ec/test_key_generation.py": {
        "KeyGenerationTests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyGenerationTests.test_basic": {
            "name": "test_basic",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_mod.py": {
        "ModTests.test_gcd": {
            "name": "test_gcd",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_jacobi": {
            "name": "test_jacobi",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_miller_rabin": {
            "name": "test_miller_rabin",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_inverse": {
            "name": "test_inverse",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_is_residue": {
            "name": "test_is_residue",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_sqrt": {
            "name": "test_sqrt",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_eq": {
            "name": "test_eq",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_pow": {
            "name": "test_pow",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_wrong_mod": {
            "name": "test_wrong_mod",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_wrong_pow": {
            "name": "test_wrong_pow",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_other": {
            "name": "test_other",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_undefined": {
            "name": "test_undefined",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_implementation": {
            "name": "test_implementation",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModTests.test_symbolic": {
            "name": "test_symbolic",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_model.py": {
        "CurveModelTests.test_load": {
            "name": "test_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_mult.py": {
        "ScalarMultiplierTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarMultiplierTests.get_formulas": {
            "name": "get_formulas",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "coords": []
            }
        },
        "ScalarMultiplierTests.assertPointEquality": {
            "name": "assertPointEquality",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one": [],
                "other": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.do_basic_test": {
            "name": "do_basic_test",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mult_class": [],
                "params": [],
                "base": [],
                "add": [],
                "dbl": [],
                "scale": [],
                "neg": []
            }
        },
        "ScalarMultiplierTests.test_rtl": {
            "name": "test_rtl",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_ltr": {
            "name": "test_ltr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_coron": {
            "name": "test_coron",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_ladder": {
            "name": "test_ladder",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarMultiplierTests.test_simple_ladder": {
            "name": "test_simple_ladder",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_ladder_differential": {
            "name": "test_ladder_differential",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "num": [],
                "complete": []
            }
        },
        "ScalarMultiplierTests.test_binary_naf": {
            "name": "test_binary_naf",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "neg": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_window_naf": {
            "name": "test_window_naf",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "add": [],
                "dbl": [],
                "neg": [],
                "width": [],
                "scale": []
            }
        },
        "ScalarMultiplierTests.test_basic_multipliers": {
            "name": "test_basic_multipliers",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "num": [],
                "add": [],
                "dbl": []
            }
        },
        "ScalarMultiplierTests.test_init_fail": {
            "name": "test_init_fail",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_naf.py": {
        "NafTests.test_nafs": {
            "name": "test_nafs",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_op.py": {
        "OpTests.test_str": {
            "name": "test_str",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "module": [],
                "result": [],
                "op_type": []
            }
        },
        "OpTests.test_call": {
            "name": "test_call",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "module": [],
                "locals": [],
                "result": []
            }
        },
        "OpResultTests.test_str": {
            "name": "test_str",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_params.py": {
        "DomainParameterTests.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_eq": {
            "name": "test_eq",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_str": {
            "name": "test_str",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_get_params": {
            "name": "test_get_params",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "coords": []
            }
        },
        "DomainParameterTests.test_get_category": {
            "name": "test_get_category",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "coords": []
            }
        },
        "DomainParameterTests.test_load_params": {
            "name": "test_load_params",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_load_category": {
            "name": "test_load_category",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_unknown": {
            "name": "test_unknown",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "coords": []
            }
        },
        "DomainParameterTests.test_assumption": {
            "name": "test_assumption",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_infty": {
            "name": "test_infty",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_no_binary": {
            "name": "test_no_binary",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_no_extension": {
            "name": "test_no_extension",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomainParameterTests.test_affine": {
            "name": "test_affine",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_point.py": {
        "PointTests.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_construction": {
            "name": "test_construction",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_to_affine": {
            "name": "test_to_affine",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_to_model": {
            "name": "test_to_model",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_to_from_affine": {
            "name": "test_to_from_affine",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_equals": {
            "name": "test_equals",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointTests.test_bytes": {
            "name": "test_bytes",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_regress.py": {
        "RegressionTests.test_issue_7": {
            "name": "test_issue_7",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_issue_8": {
            "name": "test_issue_8",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_issue_9": {
            "name": "test_issue_9",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_issue_10": {
            "name": "test_issue_10",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_issue_13": {
            "name": "test_issue_13",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_issue_14": {
            "name": "test_issue_14",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_signature.py": {
        "SignatureTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureTests.test_all": {
            "name": "test_all",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "algo": []
            }
        },
        "SignatureTests.test_cannot": {
            "name": "test_cannot",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureTests.test_fixed_nonce": {
            "name": "test_fixed_nonce",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "algo": []
            }
        },
        "SignatureTests.test_der": {
            "name": "test_der",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/test_transformations.py": {
        "TransformationTests.test_montgomery": {
            "name": "test_montgomery",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformationTests.test_twistededwards": {
            "name": "test_twistededwards",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformationTests.test_shortweierstrass": {
            "name": "test_shortweierstrass",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/ec/utils.py": {
        "slow": {
            "name": "slow",
            "location": 5,
            "return": [
                "_T0"
            ],
            "arguments": {
                "func": [
                    "_T0"
                ]
            }
        },
        "cartesian": {
            "name": "cartesian",
            "location": 10,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        }
    },
    "pyecsca-master/test/ec/__init__.py": {},
    "pyecsca-master/test/plots/plot_perf.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {
                "directory": []
            }
        }
    },
    "pyecsca-master/test/sca/perf_combine.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {
                "profiler": [],
                "operations": [],
                "directory": []
            }
        }
    },
    "pyecsca-master/test/sca/test_align.py": {
        "AlignTests.test_align": {
            "name": "test_align",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_large_align": {
            "name": "test_large_align",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_large_dtw_align": {
            "name": "test_large_dtw_align",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_peak_align": {
            "name": "test_peak_align",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_sad_align": {
            "name": "test_sad_align",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_dtw_align_scale": {
            "name": "test_dtw_align_scale",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignTests.test_dtw_align": {
            "name": "test_dtw_align",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_combine.py": {
        "CombineTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_average": {
            "name": "test_average",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_conditional_average": {
            "name": "test_conditional_average",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_standard_deviation": {
            "name": "test_standard_deviation",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_variance": {
            "name": "test_variance",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_average_and_variance": {
            "name": "test_average_and_variance",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_add": {
            "name": "test_add",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombineTests.test_subtract": {
            "name": "test_subtract",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_edit.py": {
        "EditTests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditTests.test_trim": {
            "name": "test_trim",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditTests.test_reverse": {
            "name": "test_reverse",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditTests.test_pad": {
            "name": "test_pad",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_filter.py": {
        "FilterTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTests.test_lowpass": {
            "name": "test_lowpass",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTests.test_highpass": {
            "name": "test_highpass",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTests.test_bandpass": {
            "name": "test_bandpass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilterTests.test_bandstop": {
            "name": "test_bandstop",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_match.py": {
        "MatchingTests.test_simple_match": {
            "name": "test_simple_match",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchingTests.test_multiple_match": {
            "name": "test_multiple_match",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_plot.py": {
        "PlotTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotTests.test_html": {
            "name": "test_html",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotTests.test_png": {
            "name": "test_png",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotTests.test_svg": {
            "name": "test_svg",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_process.py": {
        "ProcessTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_absolute": {
            "name": "test_absolute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_invert": {
            "name": "test_invert",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_threshold": {
            "name": "test_threshold",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_rolling_mean": {
            "name": "test_rolling_mean",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_offset": {
            "name": "test_offset",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_recenter": {
            "name": "test_recenter",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_normalize": {
            "name": "test_normalize",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessTests.test_normalize_wl": {
            "name": "test_normalize_wl",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_rpa.py": {
        "MultipleContextTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleContextTests.test_basic": {
            "name": "test_basic",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "scalar": []
            }
        },
        "MultipleContextTests.test_precomp": {
            "name": "test_precomp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleContextTests.test_window": {
            "name": "test_window",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleContextTests.test_ladder": {
            "name": "test_ladder",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_sampling.py": {
        "SamplingTests.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingTests.test_downsample_average": {
            "name": "test_downsample_average",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingTests.test_downsample_pick": {
            "name": "test_downsample_pick",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingTests.test_downsample_max": {
            "name": "test_downsample_max",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingTests.test_downsample_min": {
            "name": "test_downsample_min",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingTests.test_downsample_decimate": {
            "name": "test_downsample_decimate",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_stacked_combine.py": {
        "StackedCombineTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_fromarray": {
            "name": "test_fromarray",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_fromtraceset": {
            "name": "test_fromtraceset",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_average": {
            "name": "test_average",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_standard_deviation": {
            "name": "test_standard_deviation",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_variance": {
            "name": "test_variance",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackedCombineTests.test_average_and_variance": {
            "name": "test_average_and_variance",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_target.py": {
        "BinaryTargetTests.test_basic_target": {
            "name": "test_basic_target",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTargetTests.test_debug": {
            "name": "test_debug",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTargetTests.test_no_connection": {
            "name": "test_no_connection",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.setUpClass": {
            "name": "setUpClass",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ECTesterTargetTests.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_allocate": {
            "name": "test_allocate",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_set": {
            "name": "test_set",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_set_explicit": {
            "name": "test_set_explicit",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_generate": {
            "name": "test_generate",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_clear": {
            "name": "test_clear",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_cleanup": {
            "name": "test_cleanup",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_info": {
            "name": "test_info",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_dry_run": {
            "name": "test_dry_run",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_export": {
            "name": "test_export",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_export_curve": {
            "name": "test_export_curve",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_transform": {
            "name": "test_transform",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_ecdh": {
            "name": "test_ecdh",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_ecdh_raw": {
            "name": "test_ecdh_raw",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_ecdsa": {
            "name": "test_ecdsa",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_ecdsa_sign": {
            "name": "test_ecdsa_sign",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECTesterTargetTests.test_ecdsa_verify": {
            "name": "test_ecdsa_verify",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_test.py": {
        "TTestTests.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTestTests.test_welch_ttest": {
            "name": "test_welch_ttest",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TTestTests.test_students_ttest": {
            "name": "test_students_ttest",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KolmogorovSmirnovTests.test_ks_test": {
            "name": "test_ks_test",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_trace.py": {
        "TraceTests.test_basic": {
            "name": "test_basic",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/test_traceset.py": {
        "TraceSetTests.test_create": {
            "name": "test_create",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectorTraceSetTests.test_load_fname": {
            "name": "test_load_fname",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectorTraceSetTests.test_load_file": {
            "name": "test_load_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectorTraceSetTests.test_load_bytes": {
            "name": "test_load_bytes",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectorTraceSetTests.test_save": {
            "name": "test_save",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChipWhispererTraceSetTests.test_load_fname": {
            "name": "test_load_fname",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleTraceSetTests.test_load_fname": {
            "name": "test_load_fname",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleTraceSetTests.test_load_file": {
            "name": "test_load_file",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleTraceSetTests.test_save": {
            "name": "test_save",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSetTests.test_load_fname": {
            "name": "test_load_fname",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSetTests.test_load_file": {
            "name": "test_load_file",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSetTests.test_inplace": {
            "name": "test_inplace",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDF5TraceSetTests.test_save": {
            "name": "test_save",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/utils.py": {
        "slow": {
            "name": "slow",
            "location": 13,
            "return": [
                "_T0"
            ],
            "arguments": {
                "func": [
                    "_T0"
                ]
            }
        },
        "disabled": {
            "name": "disabled",
            "location": 18,
            "return": [
                "_T0"
            ],
            "arguments": {
                "func": [
                    "_T0"
                ]
            }
        },
        "Plottable.get_dir": {
            "name": "get_dir",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plottable.get_fname": {
            "name": "get_fname",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plottable.plot": {
            "name": "plot",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyecsca-master/test/sca/__init__.py": {}
}
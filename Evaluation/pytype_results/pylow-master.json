{
    "pylow-master/setup.py": {},
    "pylow-master/wsgi.py": {},
    "pylow-master/datapylot/logger.py": {
        "log": {
            "name": "log",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "origin": [],
                "message": []
            }
        }
    },
    "pylow-master/datapylot/utils.py": {
        "make_unique_string_list": {
            "name": "make_unique_string_list",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "content": [
                    "List[str]"
                ]
            }
        },
        "unique_list": {
            "name": "unique_list",
            "location": 23,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "content": [
                    "List[T]"
                ]
            }
        },
        "reverse_lerp": {
            "name": "reverse_lerp",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "point": [
                    "float"
                ],
                "pointlist": [
                    "List[float]"
                ]
            }
        }
    },
    "pylow-master/datapylot/__init__.py": {},
    "pylow-master/datapylot/data/attributes.py": {
        "Attribute.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str"
                ]
            }
        },
        "Attribute.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Attribute.__hash__": {
            "name": "__hash__",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimension.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str"
                ]
            }
        },
        "Measure.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str"
                ]
            }
        }
    },
    "pylow-master/datapylot/data/datasource.py": {
        "Datasource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Datasource.columns": {
            "name": "columns",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datasource.add_column": {
            "name": "add_column",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "formula": [
                    "Callable"
                ]
            }
        },
        "Datasource._add_noc": {
            "name": "_add_noc",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource._guess_types": {
            "name": "_guess_types",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource.get_variations_of": {
            "name": "get_variations_of",
            "location": 47,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "Union[(str, datapylot.data.attributes.Attribute)]"
                ]
            }
        },
        "Datasource.group_by": {
            "name": "group_by",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dimensions": [
                    "List[datapylot.data.attributes.Dimension]"
                ]
            }
        },
        "Datasource.from_csv": {
            "name": "from_csv",
            "location": 67,
            "return": [
                "Datasource"
            ],
            "arguments": {
                "cls": [],
                "filename": [
                    "str"
                ],
                "options": [
                    "Optional[dict]"
                ]
            }
        },
        "Datasource.columns.mapping": {
            "name": "mapping",
            "location": 22,
            "return": [],
            "arguments": {
                "dtype": []
            }
        }
    },
    "pylow-master/datapylot/data/vizconfig.py": {
        "VizConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "List[datapylot.data.attributes.Attribute]"
                ],
                "rows": [
                    "List[datapylot.data.attributes.Attribute]"
                ],
                "color": [
                    "Optional[datapylot.data.attributes.Attribute]"
                ],
                "size": [
                    "Optional[datapylot.data.attributes.Attribute]"
                ],
                "mark_type": [
                    "datapylot.utils.MarkType"
                ]
            }
        },
        "VizConfig.from_dict": {
            "name": "from_dict",
            "location": 42,
            "return": [
                "VizConfig"
            ],
            "arguments": {
                "cls": [],
                "_dict": [
                    "dict"
                ]
            }
        },
        "VizConfig.columns": {
            "name": "columns",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.rows": {
            "name": "rows",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.dimensions": {
            "name": "dimensions",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.measures": {
            "name": "measures",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.x_separators": {
            "name": "x_separators",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.x_data": {
            "name": "x_data",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.y_separators": {
            "name": "y_separators",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.y_data": {
            "name": "y_data",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.find_attrs": {
            "name": "find_attrs",
            "location": 101,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[datapylot.data.attributes.Attribute]"
                ],
                "attr_class": [
                    "Type[T]"
                ]
            }
        },
        "VizConfig.is_valid_config": {
            "name": "is_valid_config",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.__repr__": {
            "name": "__repr__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/data/__init__.py": {},
    "pylow-master/datapylot/data_preparation/aggregator.py": {
        "Aggregator.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "datapylot.data.datasource.Datasource"
                ],
                "config": [
                    "datapylot.data.vizconfig.VizConfig"
                ]
            }
        },
        "Aggregator.is_in_first_column": {
            "name": "is_in_first_column",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Aggregator.is_in_first_row": {
            "name": "is_in_first_row",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Aggregator.is_in_last_row": {
            "name": "is_in_last_row",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Aggregator.is_in_center_top_column": {
            "name": "is_in_center_top_column",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Aggregator.update_data": {
            "name": "update_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator._update_data_attributes": {
            "name": "_update_data_attributes",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "Aggregator._update_min_max_values": {
            "name": "_update_min_max_values",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ],
                "axis": [
                    "str"
                ]
            }
        },
        "Aggregator._calculate_ncols": {
            "name": "_calculate_ncols",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "Aggregator._get_assigned_data": {
            "name": "_get_assigned_data",
            "location": 112,
            "return": [
                "List[List[datapylot.data_preparation.avp.AVP]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(Iterable[str], List[float])]"
                ]
            }
        },
        "Aggregator._get_prepared_data": {
            "name": "_get_prepared_data",
            "location": 122,
            "return": [
                "Dict[(Iterable[str], List[Union[(float, int)]])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator._get_measure_data": {
            "name": "_get_measure_data",
            "location": 141,
            "return": [
                "Dict[(Iterable[str], int)]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "measure": [
                    "datapylot.data.attributes.Measure"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/avp.py": {},
    "pylow-master/datapylot/data_preparation/colorization_behaviour.py": {
        "ColorizationBehaviour.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ],
                "all_plotinfos": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "ColorizationBehaviour.get_correct_behaviour": {
            "name": "get_correct_behaviour",
            "location": 25,
            "return": [
                "ColorizationBehaviour"
            ],
            "arguments": {
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ],
                "all_plotinfos": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "ColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 54,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "ColorizationBehaviour.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoColorColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 67,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "ExistingDimensionColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 79,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "NewDimensionColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 106,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "NewDimensionColorizationBehaviour.get_colors_for_color_separators": {
            "name": "get_colors_for_color_separators",
            "location": 114,
            "return": [
                "Generator[(datapylot.data_preparation.avp.AVP, None, None)]"
            ],
            "arguments": {
                "col_seps": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ]
            }
        },
        "MeasureColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 127,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "MeasureColorizationBehaviour._get_color_data": {
            "name": "_get_color_data",
            "location": 140,
            "return": [
                "datapylot.data_preparation.avp.AVP"
            ],
            "arguments": {
                "self": [],
                "curr_val": [],
                "possible_vals": [
                    "list"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/colorizer.py": {
        "adjust_brightness": {
            "name": "adjust_brightness",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "color": [
                    "str"
                ],
                "amount": [
                    "float"
                ]
            }
        },
        "to_hex": {
            "name": "to_hex",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "to_rgb": {
            "name": "to_rgb",
            "location": 34,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "color": [
                    "str"
                ]
            }
        },
        "to_valid_rgb_range": {
            "name": "to_valid_rgb_range",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "color": [
                    "float"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/plotinfo.py": {
        "PlotInfo.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coords": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "y_coords": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "x_seps": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "y_seps": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "additional_data": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "colorization_behaviour": [
                    "datapylot.data_preparation.colorization_behaviour.ColorizationBehaviour"
                ],
                "sizing_behaviour": [
                    "datapylot.data_preparation.sizing_behaviour.SizingBehaviour"
                ]
            }
        },
        "PlotInfo.colors": {
            "name": "colors",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.sizes": {
            "name": "sizes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.column_names": {
            "name": "column_names",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.find_attributes": {
            "name": "find_attributes",
            "location": 57,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "datapylot.data.attributes.Attribute"
                ]
            }
        },
        "PlotInfo.variations_of": {
            "name": "variations_of",
            "location": 62,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "datapylot.data.attributes.Attribute"
                ]
            }
        },
        "PlotInfo.is_in_plot_of": {
            "name": "is_in_plot_of",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_x_seps": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "other_y_seps": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ]
            }
        },
        "PlotInfo.get_axis_label": {
            "name": "get_axis_label",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str"
                ]
            }
        },
        "PlotInfo.get_coord_values": {
            "name": "get_coord_values",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str"
                ]
            }
        },
        "PlotInfo.get_example_avp_for_axis": {
            "name": "get_example_avp_for_axis",
            "location": 89,
            "return": [
                "datapylot.data_preparation.avp.AVP"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str"
                ]
            }
        },
        "PlotInfo.get_viz_data": {
            "name": "get_viz_data",
            "location": 100,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo._check_data": {
            "name": "_check_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, list)]"
                ]
            }
        },
        "PlotInfo.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/data_preparation/plotinfobuilder.py": {
        "PlotInfoBuilder.create_all_plotinfos": {
            "name": "create_all_plotinfos",
            "location": 14,
            "return": [
                "List[datapylot.data_preparation.plotinfo.PlotInfo]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "List[List[datapylot.data_preparation.avp.AVP]]"
                ],
                "config": [
                    "datapylot.data.vizconfig.VizConfig"
                ]
            }
        },
        "PlotInfoBuilder._make_plot_info": {
            "name": "_make_plot_info",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "plot_data": [
                    "List[datapylot.data_preparation.avp.AVP]"
                ],
                "config": [
                    "datapylot.data.vizconfig.VizConfig"
                ],
                "plotinfo_cache": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/sizing_behaviour.py": {
        "SizingBehaviour.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ],
                "all_plotinfos": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "SizingBehaviour.get_correct_behaviour": {
            "name": "get_correct_behaviour",
            "location": 26,
            "return": [
                "SizingBehaviour"
            ],
            "arguments": {
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ],
                "all_plotinfos": [
                    "List[datapylot.data_preparation.plotinfo.PlotInfo]"
                ]
            }
        },
        "SizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 51,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "SizingBehaviour.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoColorSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 64,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "DimensionSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 76,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "DimensionSizingBehaviour._get_size_for_dimension": {
            "name": "_get_size_for_dimension",
            "location": 103,
            "return": [
                "Union[(float, int)]"
            ],
            "arguments": {
                "value": [
                    "float"
                ],
                "all_values": [
                    "List[float]"
                ],
                "base_size": [
                    "float"
                ]
            }
        },
        "MeasureSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 120,
            "return": [
                "List[datapylot.data_preparation.avp.AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "MeasureSizingBehaviour._get_size_data": {
            "name": "_get_size_data",
            "location": 133,
            "return": [
                "datapylot.data_preparation.avp.AVP"
            ],
            "arguments": {
                "self": [],
                "curr_val": [],
                "possible_vals": [
                    "list"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/__init__.py": {},
    "pylow-master/datapylot/extensions/flexline.py": {},
    "pylow-master/datapylot/extensions/__init__.py": {},
    "pylow-master/datapylot/plotting/bokeh_plotter.py": {
        "Plotter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "datapylot.data.datasource.Datasource"
                ],
                "config": [
                    "datapylot.data.vizconfig.VizConfig"
                ]
            }
        },
        "Plotter.create_viz": {
            "name": "create_viz",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotter._make_plot": {
            "name": "_make_plot",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Plotter._get_plot_options": {
            "name": "_get_plot_options",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ],
                "x_range": [],
                "y_range": []
            }
        },
        "Plotter._add_labels": {
            "name": "_add_labels",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ],
                "options": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Plotter._add_axes_and_grids": {
            "name": "_add_axes_and_grids",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        },
        "Plotter._get_range": {
            "name": "_get_range",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ],
                "axis": [
                    "str"
                ]
            }
        },
        "Plotter._get_axis": {
            "name": "_get_axis",
            "location": 152,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ],
                "axis": [
                    "str"
                ]
            }
        },
        "Plotter.get_output": {
            "name": "get_output",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/plotting/glyph_factory.py": {
        "create_glyph": {
            "name": "create_glyph",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "mark_type": [
                    "datapylot.utils.MarkType"
                ],
                "col_names": [
                    "datapylot.utils.ColumnNameCollection"
                ]
            }
        },
        "_make_line": {
            "name": "_make_line",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "col_names": [
                    "datapylot.utils.ColumnNameCollection"
                ]
            }
        },
        "_make_bar": {
            "name": "_make_bar",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "col_names": [
                    "datapylot.utils.ColumnNameCollection"
                ]
            }
        },
        "_make_circle": {
            "name": "_make_circle",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "col_names": [
                    "datapylot.utils.ColumnNameCollection"
                ]
            }
        }
    },
    "pylow-master/datapylot/plotting/tooltip_factory.py": {
        "generate_tooltip": {
            "name": "generate_tooltip",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "renderer": [],
                "plot_info": [
                    "datapylot.data_preparation.plotinfo.PlotInfo"
                ]
            }
        }
    },
    "pylow-master/datapylot/plotting/__init__.py": {},
    "pylow-master/datapylot/web/plotserver.py": {
        "get_cached_datasource": {
            "name": "get_cached_datasource",
            "location": 18,
            "return": [],
            "arguments": {
                "ds_name": []
            }
        },
        "get_datasource_attributes": {
            "name": "get_datasource_attributes",
            "location": 23,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "ds_name": [
                    "str"
                ]
            }
        },
        "make_conf_from_form": {
            "name": "make_conf_from_form",
            "location": 27,
            "return": [
                "datapylot.data.vizconfig.VizConfig"
            ],
            "arguments": {
                "data": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "root": {
            "name": "root",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "pylow-master/test/config_builder.py": {
        "get_configs": {
            "name": "get_configs",
            "location": 19,
            "return": [
                "Iterable[Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])]]"
            ],
            "arguments": {
                "filtering": []
            }
        },
        "_build_configs": {
            "name": "_build_configs",
            "location": 30,
            "return": [
                "Generator[(Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])], None, None)]"
            ],
            "arguments": {}
        },
        "_determine_glyphs_in_plot_amount": {
            "name": "_determine_glyphs_in_plot_amount",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ]
            }
        },
        "_determine_plot_amount": {
            "name": "_determine_plot_amount",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "vizconfig": [
                    "datapylot.data.vizconfig.VizConfig"
                ]
            }
        },
        "_build_config_dicts": {
            "name": "_build_config_dicts",
            "location": 74,
            "return": [
                "Generator[(Dict[(str, List[List[Union[(datapylot.utils.MarkType, List[datapylot.data.attributes.Attribute])]]])], None, None)]"
            ],
            "arguments": {}
        },
        "_get_possible_permutations": {
            "name": "_get_possible_permutations",
            "location": 89,
            "return": [
                "Tuple[(List[str], List[Iterable[Union[(datapylot.utils.MarkType, List[datapylot.data.attributes.Attribute])]]])]"
            ],
            "arguments": {}
        },
        "_filter_duplicates": {
            "name": "_filter_duplicates",
            "location": 109,
            "return": [
                "Generator[(Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])], None, None)]"
            ],
            "arguments": {
                "confs": [
                    "Iterable[Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])]]"
                ]
            }
        },
        "_filter_invalids": {
            "name": "_filter_invalids",
            "location": 119,
            "return": [
                "Generator[(Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])], None, None)]"
            ],
            "arguments": {
                "confs": [
                    "Iterable[Tuple[(datapylot.data.vizconfig.VizConfig, Dict[(str, Any)])]]"
                ]
            }
        },
        "get_configs.filter_func": {
            "name": "filter_func",
            "location": 22,
            "return": [],
            "arguments": {
                "vc": []
            }
        }
    },
    "pylow-master/test/testutils.py": {
        "save_plot_temp": {
            "name": "save_plot_temp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "plot": [],
                "name": []
            }
        },
        "get_plot_temp": {
            "name": "get_plot_temp",
            "location": 20,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "pylow-master/test/test_bokeh_multiglyph.py": {
        "test_flexline": {
            "name": "test_flexline",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_colorization_behaviour.py": {
        "test_colorization_behaviour_selection": {
            "name": "test_colorization_behaviour_selection",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_datasource.py": {
        "test_datasource_groupby": {
            "name": "test_datasource_groupby",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_types": {
            "name": "test_datasource_from_file_types",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_1": {
            "name": "test_datasource_from_file_calcs_1",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_2": {
            "name": "test_datasource_from_file_calcs_2",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_3": {
            "name": "test_datasource_from_file_calcs_3",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_data_preparation": {
            "name": "test_datasource_data_preparation",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_data_preparation.py": {
        "test_color_lightning": {
            "name": "test_color_lightning",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_coloring_measures": {
            "name": "test_output_coloring_measures",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_coloring_dimensions": {
            "name": "test_output_coloring_dimensions",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_ordering": {
            "name": "test_output_ordering",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_flexline.py": {
        "test_flexline": {
            "name": "test_flexline",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_vizbuilder.py": {
        "test_aggregator": {
            "name": "test_aggregator",
            "location": 14,
            "return": [],
            "arguments": {
                "viz_config": [],
                "infos": []
            }
        },
        "test_viz": {
            "name": "test_viz",
            "location": 21,
            "return": [],
            "arguments": {
                "viz_config": [],
                "infos": []
            }
        },
        "check_html": {
            "name": "check_html",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "viz_config": [],
                "infos": []
            }
        },
        "extract_plot_structure": {
            "name": "extract_plot_structure",
            "location": 76,
            "return": [
                "dict"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "pylow-master/test/__init__.py": {}
}
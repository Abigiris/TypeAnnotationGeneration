{
    "pyppeteer-master/dodo.py": {
        "task_flake8": {
            "name": "task_flake8",
            "location": 21,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_mypy": {
            "name": "task_mypy",
            "location": 28,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_pydocstyle": {
            "name": "task_pydocstyle",
            "location": 35,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_docs": {
            "name": "task_docs",
            "location": 42,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_readme": {
            "name": "task_readme",
            "location": 51,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_spell": {
            "name": "task_spell",
            "location": 58,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {}
        },
        "task_check": {
            "name": "task_check",
            "location": 68,
            "return": [
                "Dict[(str, Optional[List[str]])]"
            ],
            "arguments": {}
        },
        "task_test": {
            "name": "task_test",
            "location": 76,
            "return": [
                "Dict[(str, Union[(int, list)])]"
            ],
            "arguments": {}
        },
        "task_all": {
            "name": "task_all",
            "location": 87,
            "return": [
                "Dict[(str, Optional[List[str]])]"
            ],
            "arguments": {}
        }
    },
    "pyppeteer-master/setup.py": {},
    "pyppeteer-master/docs/conf.py": {},
    "pyppeteer-master/docs/server.py": {
        "cmd": {
            "name": "cmd",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 32,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/browser.py": {
        "Browser.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "pyppeteer.connection.Connection"
                ],
                "contextIds": [
                    "List[str]"
                ],
                "ignoreHTTPSErrors": [
                    "bool"
                ],
                "setDefaultViewport": [
                    "bool"
                ],
                "process": [
                    "Optional[subprocess.Popen]"
                ],
                "closeCallback": [
                    "Callable[([], Awaitable[None])]"
                ]
            }
        },
        "Browser.process": {
            "name": "process",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Browser.browserContexts": {
            "name": "browserContexts",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Browser.wsEndpoint": {
            "name": "wsEndpoint",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Browser.targets": {
            "name": "targets",
            "location": 211,
            "return": [
                "List[pyppeteer.target.Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Browser._getVersion": {
            "name": "_getVersion",
            "location": 257,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "Browser"
                ],
                "contextId": [
                    "Optional[str]"
                ]
            }
        },
        "BrowserContext.targets": {
            "name": "targets",
            "location": 298,
            "return": [
                "List[pyppeteer.target.Target]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.isIncognite": {
            "name": "isIncognite",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.isIncognito": {
            "name": "isIncognito",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.browser": {
            "name": "browser",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Browser.__init__._dummy_callback": {
            "name": "_dummy_callback",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "pyppeteer-master/pyppeteer/chromium_downloader.py": {
        "current_platform": {
            "name": "current_platform",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_url": {
            "name": "get_url",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "download_zip": {
            "name": "download_zip",
            "location": 66,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "extract_zip": {
            "name": "extract_zip",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "io.BytesIO"
                ],
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "download_chromium": {
            "name": "download_chromium",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "chromium_excutable": {
            "name": "chromium_excutable",
            "location": 139,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "chromium_executable": {
            "name": "chromium_executable",
            "location": 151,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "check_chromium": {
            "name": "check_chromium",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "pyppeteer-master/pyppeteer/command.py": {
        "install": {
            "name": "install",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyppeteer-master/pyppeteer/connection.py": {
        "_createProtocolError": {
            "name": "_createProtocolError",
            "location": 304,
            "return": [
                "Exception"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ],
                "method": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            }
        },
        "_rewriteError": {
            "name": "_rewriteError",
            "location": 312,
            "return": [
                "Exception"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ],
                "delay": [
                    "int"
                ]
            }
        },
        "Connection.url": {
            "name": "url",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.send": {
            "name": "send",
            "location": 81,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "Connection._on_response": {
            "name": "_on_response",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "dict"
                ]
            }
        },
        "Connection._on_query": {
            "name": "_on_query",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "dict"
                ]
            }
        },
        "Connection.setClosedCallback": {
            "name": "setClosedCallback",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable[([], None)]"
                ]
            }
        },
        "CDPSession.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "Union[(CDPSession, Connection)]"
                ],
                "targetType": [
                    "str"
                ],
                "sessionId": [
                    "str"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "CDPSession.send": {
            "name": "send",
            "location": 210,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "params": [
                    "dict"
                ]
            }
        },
        "CDPSession._on_message": {
            "name": "_on_message",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "CDPSession._on_closed": {
            "name": "_on_closed",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDPSession._createSession": {
            "name": "_createSession",
            "location": 298,
            "return": [
                "_TCDPSession"
            ],
            "arguments": {
                "self": [
                    "_TCDPSession"
                ],
                "targetType": [
                    "str"
                ],
                "sessionId": [
                    "str"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/coverage.py": {
        "convertToDisjointRanges": {
            "name": "convertToDisjointRanges",
            "location": 310,
            "return": [
                "list"
            ],
            "arguments": {
                "nestedRanges": [
                    "list"
                ]
            }
        },
        "Coverage.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        },
        "JSCoverage.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        },
        "JSCoverage._onExecutionContextsCleared": {
            "name": "_onExecutionContextsCleared",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "CSSCoverage.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        },
        "CSSCoverage._onExecutionContextsCleared": {
            "name": "_onExecutionContextsCleared",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "convertToDisjointRanges._sort_func": {
            "name": "_sort_func",
            "location": 321,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/dialog.py": {
        "Dialog.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "type": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "defaultValue": [
                    "str"
                ]
            }
        },
        "Dialog.type": {
            "name": "type",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialog.message": {
            "name": "message",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialog.defaultValue": {
            "name": "defaultValue",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/element_handle.py": {
        "_computeQuadArea": {
            "name": "_computeQuadArea",
            "location": 498,
            "return": [
                "float"
            ],
            "arguments": {
                "quad": [
                    "List[dict]"
                ]
            }
        },
        "ElementHandle.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "pyppeteer.execution_context.ExecutionContext"
                ],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "remoteObject": [
                    "dict"
                ],
                "page": [],
                "frameManager": [
                    "pyppeteer.frame_manager.FrameManager"
                ]
            }
        },
        "ElementHandle.asElement": {
            "name": "asElement",
            "location": 50,
            "return": [
                "_TElementHandle"
            ],
            "arguments": {
                "self": [
                    "_TElementHandle"
                ]
            }
        },
        "ElementHandle._fromProtocolQuad": {
            "name": "_fromProtocolQuad",
            "location": 133,
            "return": [
                "List[Dict[(str, int)]]"
            ],
            "arguments": {
                "self": [],
                "quad": [
                    "List[int]"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/emulation_manager.py": {
        "EmulationManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/errors.py": {},
    "pyppeteer-master/pyppeteer/execution_context.py": {
        "_rewriteError": {
            "name": "_rewriteError",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "Exception"
                ]
            }
        },
        "ExecutionContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "contextPayload": [
                    "dict"
                ],
                "objectHandleFactory": [],
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ]
            }
        },
        "ExecutionContext.frame": {
            "name": "frame",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext._convertArgument": {
            "name": "_convertArgument",
            "location": 118,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "JSHandle.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "ExecutionContext"
                ],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "remoteObject": [
                    "dict"
                ]
            }
        },
        "JSHandle.executionContext": {
            "name": "executionContext",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle.asElement": {
            "name": "asElement",
            "location": 211,
            "return": [
                "Optional[pyppeteer.element_handle.ElementHandle]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSHandle.toString": {
            "name": "toString",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/frame_manager.py": {
        "FrameManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "frameTree": [
                    "dict"
                ],
                "page": []
            }
        },
        "FrameManager._onLifecycleEvent": {
            "name": "_onLifecycleEvent",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "FrameManager._onFrameStoppedLoading": {
            "name": "_onFrameStoppedLoading",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameId": [
                    "str"
                ]
            }
        },
        "FrameManager._handleFrameTree": {
            "name": "_handleFrameTree",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameTree": [
                    "dict"
                ]
            }
        },
        "FrameManager.mainFrame": {
            "name": "mainFrame",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.frames": {
            "name": "frames",
            "location": 110,
            "return": [
                "List[Frame]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.frame": {
            "name": "frame",
            "location": 114,
            "return": [
                "Optional[Frame]"
            ],
            "arguments": {
                "self": [],
                "frameId": [
                    "str"
                ]
            }
        },
        "FrameManager._onFrameAttached": {
            "name": "_onFrameAttached",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameId": [
                    "str"
                ],
                "parentFrameId": [
                    "str"
                ]
            }
        },
        "FrameManager._onFrameNavigated": {
            "name": "_onFrameNavigated",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framePayload": [
                    "dict"
                ]
            }
        },
        "FrameManager._onFrameNavigatedWithinDocument": {
            "name": "_onFrameNavigatedWithinDocument",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameId": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "FrameManager._onFrameDetached": {
            "name": "_onFrameDetached",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameId": [
                    "str"
                ]
            }
        },
        "FrameManager._onExecutionContextCreated": {
            "name": "_onExecutionContextCreated",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contextPayload": [
                    "dict"
                ]
            }
        },
        "FrameManager._removeContext": {
            "name": "_removeContext",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "pyppeteer.execution_context.ExecutionContext"
                ]
            }
        },
        "FrameManager._onExecutionContextDestroyed": {
            "name": "_onExecutionContextDestroyed",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executionContextId": [
                    "str"
                ]
            }
        },
        "FrameManager._onExecutionContextsCleared": {
            "name": "_onExecutionContextsCleared",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.createJSHandle": {
            "name": "createJSHandle",
            "location": 208,
            "return": [
                "pyppeteer.execution_context.JSHandle"
            ],
            "arguments": {
                "self": [],
                "contextId": [
                    "str"
                ],
                "remoteObject": [
                    "dict"
                ]
            }
        },
        "FrameManager._removeFramesRecursively": {
            "name": "_removeFramesRecursively",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ]
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "parentFrame": [
                    "Optional[Frame]"
                ],
                "frameId": [
                    "str"
                ]
            }
        },
        "Frame._setDefaultContext": {
            "name": "_setDefaultContext",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[pyppeteer.execution_context.ExecutionContext]"
                ]
            }
        },
        "Frame.name": {
            "name": "name",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.url": {
            "name": "url",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.parentFrame": {
            "name": "parentFrame",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.childFrames": {
            "name": "childFrames",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.isDetached": {
            "name": "isDetached",
            "location": 415,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.waitFor": {
            "name": "waitFor",
            "location": 650,
            "return": [
                "Union[(WaitTask, Awaitable)]"
            ],
            "arguments": {
                "self": [],
                "selectorOrFunctionOrTimeout": [
                    "Union[(float, str)]"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Frame.waitForSelector": {
            "name": "waitForSelector",
            "location": 677,
            "return": [
                "WaitTask"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Frame.waitForXPath": {
            "name": "waitForXPath",
            "location": 686,
            "return": [
                "WaitTask"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Frame.waitForFunction": {
            "name": "waitForFunction",
            "location": 695,
            "return": [
                "WaitTask"
            ],
            "arguments": {
                "self": [],
                "pageFunction": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Frame._waitForSelectorOrXPath": {
            "name": "_waitForSelectorOrXPath",
            "location": 707,
            "return": [
                "WaitTask"
            ],
            "arguments": {
                "self": [],
                "selectorOrXPath": [
                    "str"
                ],
                "isXPath": [
                    "bool"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Frame._navigated": {
            "name": "_navigated",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "framePayload": [
                    "dict"
                ]
            }
        },
        "Frame._navigatedWithinDocument": {
            "name": "_navigatedWithinDocument",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Frame._onLifecycleEvent": {
            "name": "_onLifecycleEvent",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaderId": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Frame._onLoadingStopped": {
            "name": "_onLoadingStopped",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame._detach": {
            "name": "_detach",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaitTask.__init__": {
            "name": "__init__",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Frame"
                ],
                "predicateBody": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "polling": [
                    "Union[(int, str)]"
                ],
                "timeout": [
                    "float"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "WaitTask.__await__": {
            "name": "__await__",
            "location": 830,
            "return": [
                "generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaitTask.terminate": {
            "name": "terminate",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "WaitTask._cleanup": {
            "name": "_cleanup",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/helper.py": {
        "debugError": {
            "name": "debugError",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "_logger": [
                    "logging.Logger"
                ],
                "msg": []
            }
        },
        "evaluationString": {
            "name": "evaluationString",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "fun": [
                    "str"
                ]
            }
        },
        "getExceptionMessage": {
            "name": "getExceptionMessage",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "exceptionDetails": [
                    "dict"
                ]
            }
        },
        "addEventListener": {
            "name": "addEventListener",
            "location": 57,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "emitter": [],
                "eventName": [
                    "str"
                ],
                "handler": [
                    "Callable"
                ]
            }
        },
        "removeEventListeners": {
            "name": "removeEventListeners",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "listeners": [
                    "List[dict]"
                ]
            }
        },
        "valueFromRemoteObject": {
            "name": "valueFromRemoteObject",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "remoteObject": [
                    "dict"
                ]
            }
        },
        "releaseObject": {
            "name": "releaseObject",
            "location": 103,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "remoteObject": [
                    "dict"
                ]
            }
        },
        "waitForEvent": {
            "name": "waitForEvent",
            "location": 122,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "emitter": [],
                "eventName": [
                    "str"
                ],
                "predicate": [
                    "Callable[([Any], bool)]"
                ],
                "timeout": [
                    "float"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "get_positive_int": {
            "name": "get_positive_int",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "obj": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "is_jsfunc": {
            "name": "is_jsfunc",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [
                    "str"
                ]
            }
        },
        "waitForEvent.resolveCallback": {
            "name": "resolveCallback",
            "location": 128,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "waitForEvent.rejectCallback": {
            "name": "rejectCallback",
            "location": 131,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "waitForEvent._listener": {
            "name": "_listener",
            "location": 139,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "waitForEvent.cleanup": {
            "name": "cleanup",
            "location": 149,
            "return": [],
            "arguments": {}
        }
    },
    "pyppeteer-master/pyppeteer/input.py": {
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        },
        "Keyboard._modifierBit": {
            "name": "_modifierBit",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Keyboard._keyDescriptionForString": {
            "name": "_keyDescriptionForString",
            "location": 114,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "keyString": [
                    "str"
                ]
            }
        },
        "Mouse.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "keyboard": [
                    "Keyboard"
                ]
            }
        },
        "Touchscreen.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "keyboard": [
                    "Keyboard"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/launcher.py": {
        "executablePath": {
            "name": "executablePath",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "defaultArgs": {
            "name": "defaultArgs",
            "location": 358,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "Launcher.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Launcher._parse_args": {
            "name": "_parse_args",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Launcher._cleanup_tmp_user_data_dir": {
            "name": "_cleanup_tmp_user_data_dir",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Launcher._get_ws_endpoint": {
            "name": "_get_ws_endpoint",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Launcher.waitForChromeToClose": {
            "name": "waitForChromeToClose",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Launcher.__init__._is_default_url": {
            "name": "_is_default_url",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "Launcher.launch._close_process": {
            "name": "_close_process",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "Launcher.ensureInitialPage.initialPageCallback": {
            "name": "initialPageCallback",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "Launcher.ensureInitialPage.check_target": {
            "name": "check_target",
            "location": 212,
            "return": [],
            "arguments": {
                "target": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/multimap.py": {
        "Multimap.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multimap.set": {
            "name": "set",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ],
                "value": []
            }
        },
        "Multimap.get": {
            "name": "get",
            "location": 27,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "Multimap.has": {
            "name": "has",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "Multimap.hasValue": {
            "name": "hasValue",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ],
                "value": []
            }
        },
        "Multimap.size": {
            "name": "size",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multimap.delete": {
            "name": "delete",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ],
                "value": []
            }
        },
        "Multimap.deleteAll": {
            "name": "deleteAll",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "Multimap.firstValue": {
            "name": "firstValue",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]"
                ]
            }
        },
        "Multimap.firstKey": {
            "name": "firstKey",
            "location": 65,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multimap.valuesArray": {
            "name": "valuesArray",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multimap.clear": {
            "name": "clear",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/navigator_watcher.py": {
        "NavigatorWatcher.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameManager": [
                    "pyppeteer.frame_manager.FrameManager"
                ],
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ],
                "timeout": [
                    "int"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "NavigatorWatcher._validate_options": {
            "name": "_validate_options",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict"
                ]
            }
        },
        "NavigatorWatcher._createTimeoutPromise": {
            "name": "_createTimeoutPromise",
            "location": 90,
            "return": [
                "Awaitable[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigatorWatcher.navigationPromise": {
            "name": "navigationPromise",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigatorWatcher._navigatedWithinDocument": {
            "name": "_navigatedWithinDocument",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ]
            }
        },
        "NavigatorWatcher._checkLifecycleComplete": {
            "name": "_checkLifecycleComplete",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ]
            }
        },
        "NavigatorWatcher._checkLifecycle": {
            "name": "_checkLifecycle",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ],
                "expectedLifecycle": [
                    "List[str]"
                ]
            }
        },
        "NavigatorWatcher.cancel": {
            "name": "cancel",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigatorWatcher._cleanup": {
            "name": "_cleanup",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/network_manager.py": {
        "generateRequestHash": {
            "name": "generateRequestHash",
            "location": 732,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "dict"
                ]
            }
        },
        "NetworkManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "frameManager": [
                    "pyppeteer.frame_manager.FrameManager"
                ]
            }
        },
        "NetworkManager.extraHTTPHeaders": {
            "name": "extraHTTPHeaders",
            "location": 81,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager._onRequestIntercepted": {
            "name": "_onRequestIntercepted",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "NetworkManager._onRequestServedFromCache": {
            "name": "_onRequestServedFromCache",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "NetworkManager._handleRequestRedirect": {
            "name": "_handleRequestRedirect",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Request"
                ],
                "redirectStatus": [
                    "int"
                ],
                "redirectHeaders": [
                    "dict"
                ],
                "fromDiskCache": [
                    "bool"
                ],
                "fromServiceWorker": [
                    "bool"
                ],
                "securityDetails": [
                    "dict"
                ]
            }
        },
        "NetworkManager._handleRequestStart": {
            "name": "_handleRequestStart",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requestId": [
                    "Optional[str]"
                ],
                "interceptionId": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "isNavigationRequest": [
                    "bool"
                ],
                "resourceType": [
                    "str"
                ],
                "requestPayload": [
                    "dict"
                ],
                "frameId": [
                    "Optional[str]"
                ],
                "redirectChain": [
                    "List[Request]"
                ]
            }
        },
        "NetworkManager._onRequestWillBeSent": {
            "name": "_onRequestWillBeSent",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "NetworkManager._onResponseReceived": {
            "name": "_onResponseReceived",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "NetworkManager._onLoadingFinished": {
            "name": "_onLoadingFinished",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "NetworkManager._onLoadingFailed": {
            "name": "_onLoadingFailed",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "requestId": [
                    "Optional[str]"
                ],
                "interceptionId": [
                    "str"
                ],
                "isNavigationRequest": [
                    "bool"
                ],
                "allowInterception": [
                    "bool"
                ],
                "url": [
                    "str"
                ],
                "resourceType": [
                    "str"
                ],
                "payload": [
                    "dict"
                ],
                "frame": [
                    "Optional[pyppeteer.frame_manager.Frame]"
                ],
                "redirectChain": [
                    "List[Request]"
                ]
            }
        },
        "Request.url": {
            "name": "url",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.resourceType": {
            "name": "resourceType",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.postData": {
            "name": "postData",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.response": {
            "name": "response",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.frame": {
            "name": "frame",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.isNavigationRequest": {
            "name": "isNavigationRequest",
            "location": 432,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.redirectChain": {
            "name": "redirectChain",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.failure": {
            "name": "failure",
            "location": 449,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "request": [
                    "Request"
                ],
                "status": [
                    "int"
                ],
                "headers": [
                    "Dict[(str, str)]"
                ],
                "fromDiskCache": [
                    "bool"
                ],
                "fromServiceWorker": [
                    "bool"
                ],
                "securityDetails": [
                    "dict"
                ]
            }
        },
        "Response._bodyLoadedPromiseFulfill": {
            "name": "_bodyLoadedPromiseFulfill",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Exception]"
                ]
            }
        },
        "Response.url": {
            "name": "url",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.ok": {
            "name": "ok",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.status": {
            "name": "status",
            "location": 661,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.securityDetails": {
            "name": "securityDetails",
            "location": 674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.buffer": {
            "name": "buffer",
            "location": 694,
            "return": [
                "Awaitable[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.request": {
            "name": "request",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.fromCache": {
            "name": "fromCache",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.fromServiceWorker": {
            "name": "fromServiceWorker",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.__init__": {
            "name": "__init__",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subjectName": [
                    "str"
                ],
                "issuer": [
                    "str"
                ],
                "validFrom": [
                    "int"
                ],
                "validTo": [
                    "int"
                ],
                "protocol": [
                    "str"
                ]
            }
        },
        "SecurityDetails.subjectName": {
            "name": "subjectName",
            "location": 776,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.issuer": {
            "name": "issuer",
            "location": 781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.validFrom": {
            "name": "validFrom",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.validTo": {
            "name": "validTo",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.protocol": {
            "name": "protocol",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/options.py": {},
    "pyppeteer-master/pyppeteer/page.py": {
        "convertPrintParameterToInches": {
            "name": "convertPrintParameterToInches",
            "location": 1703,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "parameter": [
                    "Optional[Union[(float, str)]]"
                ]
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "target": [
                    "pyppeteer.target.Target"
                ],
                "frameTree": [
                    "dict"
                ],
                "ignoreHTTPSErrors": [
                    "bool"
                ],
                "screenshotTaskQueue": [
                    "list"
                ]
            }
        },
        "Page.target": {
            "name": "target",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.browser": {
            "name": "browser",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page._onTargetCrashed": {
            "name": "_onTargetCrashed",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page._onLogEntryAdded": {
            "name": "_onLogEntryAdded",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Page.mainFrame": {
            "name": "mainFrame",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.keyboard": {
            "name": "keyboard",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.touchscreen": {
            "name": "touchscreen",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.coverage": {
            "name": "coverage",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.tracing": {
            "name": "tracing",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.frames": {
            "name": "frames",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.workers": {
            "name": "workers",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.setDefaultNavigationTimeout": {
            "name": "setDefaultNavigationTimeout",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "Page._onCertificateError": {
            "name": "_onCertificateError",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._emitMetrics": {
            "name": "_emitMetrics",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Page._buildMetricsObject": {
            "name": "_buildMetricsObject",
            "location": 690,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "list"
                ]
            }
        },
        "Page._handleException": {
            "name": "_handleException",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exceptionDetails": [
                    "dict"
                ]
            }
        },
        "Page._onConsoleAPI": {
            "name": "_onConsoleAPI",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Page._onBindingCalled": {
            "name": "_onBindingCalled",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Page._addConsoleMessage": {
            "name": "_addConsoleMessage",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "args": [
                    "List[pyppeteer.execution_context.JSHandle]"
                ]
            }
        },
        "Page._onDialog": {
            "name": "_onDialog",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page.url": {
            "name": "url",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.viewport": {
            "name": "viewport",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.isClosed": {
            "name": "isClosed",
            "location": 1468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.mouse": {
            "name": "mouse",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.waitFor": {
            "name": "waitFor",
            "location": 1552,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "selectorOrFunctionOrTimeout": [
                    "Union[(float, str)]"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Page.waitForSelector": {
            "name": "waitForSelector",
            "location": 1587,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Page.waitForXPath": {
            "name": "waitForXPath",
            "location": 1616,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "Page.waitForFunction": {
            "name": "waitForFunction",
            "location": 1646,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "pageFunction": [
                    "str"
                ],
                "options": [
                    "dict"
                ]
            }
        },
        "ConsoleMessage.__init__": {
            "name": "__init__",
            "location": 1735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "args": [
                    "List[pyppeteer.execution_context.JSHandle]"
                ]
            }
        },
        "ConsoleMessage.type": {
            "name": "type",
            "location": 1745,
            "return": [
                "Coroutine[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.text": {
            "name": "text",
            "location": 1750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.args": {
            "name": "args",
            "location": 1755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.__init__._onTargetAttached": {
            "name": "_onTargetAttached",
            "location": 138,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "Page.__init__._onTargetDetached": {
            "name": "_onTargetDetached",
            "location": 160,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "Page.__init__.closed": {
            "name": "closed",
            "location": 211,
            "return": [],
            "arguments": {
                "fut": []
            }
        },
        "Page.goto.set_request": {
            "name": "set_request",
            "location": 840,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "Page.waitForRequest.predicate": {
            "name": "predicate",
            "location": 965,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "Page.waitForResponse.predicate": {
            "name": "predicate",
            "location": 1002,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/target.py": {
        "Target.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targetInfo": [
                    "dict"
                ],
                "browserContext": [
                    "pyppeteer.browser.BrowserContext"
                ],
                "sessionFactory": [
                    "Callable[([], Coroutine[(Any, Any, pyppeteer.connection.CDPSession)])]"
                ],
                "ignoreHTTPSErrors": [
                    "bool"
                ],
                "setDefaultViewport": [
                    "bool"
                ],
                "screenshotTaskQueue": [
                    "list"
                ],
                "loop": [
                    "asyncio.events.AbstractEventLoop"
                ]
            }
        },
        "Target._initializedCallback": {
            "name": "_initializedCallback",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bl": [
                    "bool"
                ]
            }
        },
        "Target._closedCallback": {
            "name": "_closedCallback",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.url": {
            "name": "url",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.type": {
            "name": "type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.browser": {
            "name": "browser",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.browserContext": {
            "name": "browserContext",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.opener": {
            "name": "opener",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target._targetInfoChanged": {
            "name": "_targetInfoChanged",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targetInfo": [
                    "dict"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/tracing.py": {
        "Tracing.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/us_keyboard_layout.py": {},
    "pyppeteer-master/pyppeteer/util.py": {
        "get_free_port": {
            "name": "get_free_port",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "merge_dict": {
            "name": "merge_dict",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "dict1": [
                    "Optional[dict]"
                ],
                "dict2": [
                    "Optional[dict]"
                ]
            }
        }
    },
    "pyppeteer-master/pyppeteer/worker.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ],
                "url": [
                    "str"
                ],
                "consoleAPICalled": [
                    "Callable[([str, List[pyppeteer.execution_context.JSHandle]], None)]"
                ],
                "exceptionThrown": [
                    "Callable[([dict], None)]"
                ]
            }
        },
        "Worker._executionContextCallback": {
            "name": "_executionContextCallback",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "pyppeteer.execution_context.ExecutionContext"
                ]
            }
        },
        "Worker.url": {
            "name": "url",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__.jsHandleFactory": {
            "name": "jsHandleFactory",
            "location": 41,
            "return": [],
            "arguments": {
                "remoteObject": []
            }
        },
        "Worker.__init__.onExecutionContentCreated": {
            "name": "onExecutionContentCreated",
            "location": 44,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "Worker.__init__.onConsoleAPICalled": {
            "name": "onConsoleAPICalled",
            "location": 63,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "Worker.__init__.onExecutionContentCreated.jsHandleFactory": {
            "name": "jsHandleFactory",
            "location": 47,
            "return": [],
            "arguments": {
                "remoteObject": []
            }
        }
    },
    "pyppeteer-master/pyppeteer/__init__.py": {},
    "pyppeteer-master/tests/base.py": {
        "BaseTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.tearDown": {
            "name": "tearDown",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.set_result": {
            "name": "set_result",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pyppeteer-master/tests/closeme.py": {},
    "pyppeteer-master/tests/dumpio.py": {},
    "pyppeteer-master/tests/frame_utils.py": {
        "dumpFrames": {
            "name": "dumpFrames",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "frame": [
                    "pyppeteer.frame_manager.Frame"
                ],
                "indentation": [
                    "str"
                ]
            }
        }
    },
    "pyppeteer-master/tests/server.py": {
        "auth_api": {
            "name": "auth_api",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "basic_auth": {
            "name": "basic_auth",
            "location": 96,
            "return": [
                "Callable"
            ],
            "arguments": {
                "auth": [
                    "Callable[([str, str], bool)]"
                ]
            }
        },
        "log_handler": {
            "name": "log_handler",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": []
            }
        },
        "get_application": {
            "name": "get_application",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "BaseHandler.get": {
            "name": "get",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyHandler.get": {
            "name": "get",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkHandler1.get": {
            "name": "get",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectHandler1.get": {
            "name": "get",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectHandler2.get": {
            "name": "get",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectHandler3.get": {
            "name": "get",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSPHandler.get": {
            "name": "get",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "basic_auth.wrapper": {
            "name": "wrapper",
            "location": 97,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "AuthHandler.get": {
            "name": "get",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "basic_auth.wrapper._request_auth": {
            "name": "_request_auth",
            "location": 98,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "basic_auth.wrapper.new_f": {
            "name": "new_f",
            "location": 104,
            "return": [],
            "arguments": {}
        }
    },
    "pyppeteer-master/tests/test_abnormal_crash.py": {},
    "pyppeteer-master/tests/test_browser.py": {},
    "pyppeteer-master/tests/test_browser_context.py": {},
    "pyppeteer-master/tests/test_connection.py": {},
    "pyppeteer-master/tests/test_coverage.py": {},
    "pyppeteer-master/tests/test_dialog.py": {
        "TestDialog.test_alert.dialog_test": {
            "name": "dialog_test",
            "location": 14,
            "return": [],
            "arguments": {
                "dialog": []
            }
        },
        "TestDialog.test_prompt.dialog_test": {
            "name": "dialog_test",
            "location": 24,
            "return": [],
            "arguments": {
                "dialog": []
            }
        },
        "TestDialog.test_prompt_dismiss.dismiss_test": {
            "name": "dismiss_test",
            "location": 35,
            "return": [],
            "arguments": {
                "dialog": []
            }
        }
    },
    "pyppeteer-master/tests/test_element_handle.py": {
        "TestBoxModel.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoxModel.tearDown": {
            "name": "tearDown",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_execution_context.py": {},
    "pyppeteer-master/tests/test_frame.py": {
        "TestEvaluate.test_frame_evaluate_after_navigation.frame_navigated": {
            "name": "frame_navigated",
            "location": 71,
            "return": [],
            "arguments": {
                "frame": []
            }
        }
    },
    "pyppeteer-master/tests/test_input.py": {},
    "pyppeteer-master/tests/test_launcher.py": {
        "TestLauncher.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.check_default_args": {
            "name": "check_default_args",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "launcher": []
            }
        },
        "TestLauncher.test_no_option": {
            "name": "test_no_option",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_disable_headless": {
            "name": "test_disable_headless",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_disable_default_args": {
            "name": "test_disable_default_args",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_executable": {
            "name": "test_executable",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_args": {
            "name": "test_args",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_user_data_dir": {
            "name": "test_user_data_dir",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_dumpio_default": {
            "name": "test_dumpio_default",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLauncher.test_dumpio_enable": {
            "name": "test_dumpio_enable",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevel.setUp": {
            "name": "setUp",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogLevel.tearDown": {
            "name": "tearDown",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDataDir.setUpClass": {
            "name": "setUpClass",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestUserDataDir.setUp": {
            "name": "setUp",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDataDir.tearDown": {
            "name": "tearDown",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserDataDir.tearDownClass": {
            "name": "tearDownClass",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestEventLoop.test_event_loop": {
            "name": "test_event_loop",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_misc.py": {
        "TestVersion.test_version": {
            "name": "test_version",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersion.test_version_info": {
            "name": "test_version_info",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArgs.test_default_args": {
            "name": "test_default_args",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToInches.test_px": {
            "name": "test_px",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToInches.test_inch": {
            "name": "test_inch",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToInches.test_cm": {
            "name": "test_cm",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToInches.test_mm": {
            "name": "test_mm",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPositiveInt.test_badtype": {
            "name": "test_badtype",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPositiveInt.test_negative_int": {
            "name": "test_negative_int",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.tearDown": {
            "name": "tearDown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.test_debug_default": {
            "name": "test_debug_default",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.test_debug_enabled": {
            "name": "test_debug_enabled",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.test_debug_enable_disable": {
            "name": "test_debug_enable_disable",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDebugError.test_debug_logger": {
            "name": "test_debug_logger",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_network.py": {
        "TestNetworkEvent.test_from_cache.set_response": {
            "name": "set_response",
            "location": 85,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "TestNetworkEvent.test_response_from_service_worker.set_response": {
            "name": "set_response",
            "location": 104,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "TestRequestInterception.test_request_interception_with_file_url.pathToFileURL": {
            "name": "pathToFileURL",
            "location": 493,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "TestNavigationRequest.test_navigation_request.set_request": {
            "name": "set_request",
            "location": 535,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "TestNetworkEvent.test_request_post.PostHandler.post": {
            "name": "post",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNetworkEvent.test_not_report_body_unless_finished.GetHandler.get": {
            "name": "get",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_page.py": {
        "TestMetrics.checkMetrics": {
            "name": "checkMetrics",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": []
            }
        },
        "TestSelect.setUp": {
            "name": "setUp",
            "location": 1519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaitForNavigation.test_subframe_issues.is_same_frame": {
            "name": "is_same_frame",
            "location": 701,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "TestWaitForRequest.test_predicate.predicate": {
            "name": "predicate",
            "location": 729,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "TestWaitForResponse.test_predicate.predicate": {
            "name": "predicate",
            "location": 780,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "TestErrorPage.test_error_page.check": {
            "name": "check",
            "location": 893,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "TestCacheEnabled.test_cache_enable_disable.set_response": {
            "name": "set_response",
            "location": 1485,
            "return": [],
            "arguments": {
                "res": []
            }
        },
        "TestExtraHTTPHeader.test_extra_http_header.HeaderFetcher.get": {
            "name": "get",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_pyppeteer.py": {
        "TestScreenshot.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScreenshot.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_screenshot.py": {
        "TestScreenShot.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScreenShot.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPDF.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPDF.tearDown": {
            "name": "tearDown",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_target.py": {
        "TestTarget.test_not_report_uninitialized_page.listener": {
            "name": "listener",
            "location": 122,
            "return": [],
            "arguments": {
                "target": []
            }
        }
    },
    "pyppeteer-master/tests/test_tracing.py": {
        "TestTracing.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTracing.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyppeteer-master/tests/test_worker.py": {},
    "pyppeteer-master/tests/utils.py": {
        "waitEvent": {
            "name": "waitEvent",
            "location": 7,
            "return": [
                "asyncio.futures.Future"
            ],
            "arguments": {
                "emitter": [],
                "event_name": []
            }
        },
        "waitEvent.set_done": {
            "name": "set_done",
            "location": 10,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "pyppeteer-master/tests/__init__.py": {}
}
{
    "pyrchain-master/setup.py": {},
    "pyrchain-master/docs/conf.py": {},
    "pyrchain-master/examples/client_insert_signed.py": {},
    "pyrchain-master/examples/grpc_api_example.py": {},
    "pyrchain-master/examples/keys_example.py": {},
    "pyrchain-master/examples/sign_verify_examples.py": {},
    "pyrchain-master/examples/transaction_example.py": {},
    "pyrchain-master/examples/transfer_sign_deploy.py": {},
    "pyrchain-master/examples/vault_example.py": {},
    "pyrchain-master/rchain/certificate.py": {
        "get_node_tls_key_pem": {
            "name": "get_node_tls_key_pem",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "ec.EllipticCurvePrivateKeyWithSerialization"
                ]
            }
        },
        "get_node_id_raw": {
            "name": "get_node_id_raw",
            "location": 21,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "ec.EllipticCurvePrivateKeyWithSerialization"
                ]
            }
        },
        "get_node_tls_cn": {
            "name": "get_node_tls_cn",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "node_id_raw": [
                    "bytes"
                ]
            }
        },
        "get_node_tls_cert_pem": {
            "name": "get_node_tls_cert_pem",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "ec.EllipticCurvePrivateKeyWithSerialization"
                ]
            }
        },
        "generate_node_tls_key_cert_id": {
            "name": "generate_node_tls_key_cert_id",
            "location": 51,
            "return": [
                "Tuple[(str, str, str)]"
            ],
            "arguments": {}
        }
    },
    "pyrchain-master/rchain/client.py": {
        "find_transfer_comm": {
            "name": "find_transfer_comm",
            "location": 257,
            "return": [
                "List[rchain.report.Transaction]"
            ],
            "arguments": {
                "report": [],
                "transfer_template_unforgeable": []
            }
        },
        "RClientException._init__": {
            "name": "_init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "DataQueries.public_names": {
            "name": "public_names",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "names": [
                    "List[str]"
                ]
            }
        },
        "DataQueries.deploy_id": {
            "name": "deploy_id",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "deploy_id": [
                    "str"
                ]
            }
        },
        "RClient.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "grpc_options": [
                    "Optional[Tuple[(Tuple[(str, Union[(int, str)])], ...)]]"
                ],
                "compress": [
                    "bool"
                ]
            }
        },
        "RClient.close": {
            "name": "close",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RClient.__enter__": {
            "name": "__enter__",
            "location": 78,
            "return": [
                "_TRClient"
            ],
            "arguments": {
                "self": [
                    "_TRClient"
                ]
            }
        },
        "RClient.__exit__": {
            "name": "__exit__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]"
                ]
            }
        },
        "RClient.install_param": {
            "name": "install_param",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "rchain.param.Params"
                ]
            }
        },
        "RClient._check_response": {
            "name": "_check_response",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "RClient._handle_stream": {
            "name": "_handle_stream",
            "location": 94,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Iterable"
                ]
            }
        },
        "RClient.deploy_with_vabn_filled": {
            "name": "deploy_with_vabn_filled",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "term": [
                    "str"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ],
                "timestamp_millis": [
                    "int"
                ]
            }
        },
        "RClient.exploratory_deploy": {
            "name": "exploratory_deploy",
            "location": 117,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "str"
                ],
                "blockHash": [
                    "str"
                ],
                "usePreStateHash": [
                    "bool"
                ]
            }
        },
        "RClient.deploy": {
            "name": "deploy",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "term": [
                    "str"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ],
                "valid_after_block_no": [
                    "int"
                ],
                "timestamp_millis": [
                    "int"
                ]
            }
        },
        "RClient.send_deploy": {
            "name": "send_deploy",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "deploy": []
            }
        },
        "RClient.show_block": {
            "name": "show_block",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ]
            }
        },
        "RClient.show_blocks": {
            "name": "show_blocks",
            "location": 149,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ]
            }
        },
        "RClient.find_deploy": {
            "name": "find_deploy",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "deploy_id": [
                    "str"
                ]
            }
        },
        "RClient.last_finalized_block": {
            "name": "last_finalized_block",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RClient.is_finalized": {
            "name": "is_finalized",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ]
            }
        },
        "RClient.propose": {
            "name": "propose",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RClient.get_data_at_name": {
            "name": "get_data_at_name",
            "location": 181,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "par": [],
                "depth": [
                    "int"
                ]
            }
        },
        "RClient.get_data_at_par": {
            "name": "get_data_at_par",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "par": [],
                "block_hash": [
                    "str"
                ],
                "use_pre_state_hash": [
                    "bool"
                ]
            }
        },
        "RClient.get_data_at_public_names": {
            "name": "get_data_at_public_names",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "List[str]"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "RClient.get_data_at_deploy_id": {
            "name": "get_data_at_deploy_id",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "deploy_id": [
                    "str"
                ],
                "depth": [
                    "int"
                ]
            }
        },
        "RClient.get_blocks_by_heights": {
            "name": "get_blocks_by_heights",
            "location": 201,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "start_block_number": [
                    "int"
                ],
                "end_block_number": [
                    "int"
                ]
            }
        },
        "RClient.get_continuation": {
            "name": "get_continuation",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "par": [],
                "depth": [
                    "int"
                ]
            }
        },
        "RClient.previewPrivateNames": {
            "name": "previewPrivateNames",
            "location": 213,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "rchain.crypto.PublicKey"
                ],
                "timestamp": [
                    "int"
                ],
                "nameQty": [
                    "int"
                ]
            }
        },
        "RClient.get_event_data": {
            "name": "get_event_data",
            "location": 219,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ]
            }
        },
        "RClient.visual_dag": {
            "name": "visual_dag",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ],
                "showJustificationLines": [
                    "bool"
                ],
                "startBlockNumber": [
                    "int"
                ]
            }
        },
        "RClient.get_transaction": {
            "name": "get_transaction",
            "location": 232,
            "return": [
                "List[rchain.report.DeployWithTransaction]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ]
            }
        }
    },
    "pyrchain-master/rchain/const.py": {},
    "pyrchain-master/rchain/crypto.py": {
        "blake2b_32": {
            "name": "blake2b_32",
            "location": 18,
            "return": [
                "hashlib._BlakeHash"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "gen_deploys_hash_from_block": {
            "name": "gen_deploys_hash_from_block",
            "location": 22,
            "return": [
                "bytes"
            ],
            "arguments": {
                "block": []
            }
        },
        "gen_block_hash_from_block": {
            "name": "gen_block_hash_from_block",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "block": []
            }
        },
        "verify_rev_address": {
            "name": "verify_rev_address",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "rev_address": [
                    "str"
                ]
            }
        },
        "generate_rev_addr_from_eth": {
            "name": "generate_rev_addr_from_eth",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "eth_address": [
                    "str"
                ]
            }
        },
        "PublicKey.from_bytes": {
            "name": "from_bytes",
            "location": 59,
            "return": [
                "_TPublicKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPublicKey]"
                ],
                "b": [
                    "bytes"
                ]
            }
        },
        "PublicKey.from_hex": {
            "name": "from_hex",
            "location": 65,
            "return": [
                "_TPublicKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPublicKey]"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "PublicKey.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_pub_key": []
            }
        },
        "PublicKey.verify": {
            "name": "verify",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "PublicKey.verify_block_hash": {
            "name": "verify_block_hash",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "bytes"
                ],
                "block_hash": [
                    "bytes"
                ]
            }
        },
        "PublicKey.to_hex": {
            "name": "to_hex",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bool"
                ]
            }
        },
        "PublicKey.to_bytes": {
            "name": "to_bytes",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.get_rev_address": {
            "name": "get_rev_address",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.get_eth_address": {
            "name": "get_eth_address",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.__hash__": {
            "name": "__hash__",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.__eq__": {
            "name": "__eq__",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PrivateKey.from_eth_keyfile": {
            "name": "from_eth_keyfile",
            "location": 101,
            "return": [
                "_TPrivateKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivateKey]"
                ],
                "path": [
                    "str"
                ],
                "password": [
                    "Optional[str]"
                ]
            }
        },
        "PrivateKey.generate": {
            "name": "generate",
            "location": 106,
            "return": [
                "_TPrivateKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivateKey]"
                ]
            }
        },
        "PrivateKey.from_bytes": {
            "name": "from_bytes",
            "location": 110,
            "return": [
                "_TPrivateKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivateKey]"
                ],
                "b": [
                    "bytes"
                ]
            }
        },
        "PrivateKey.from_hex": {
            "name": "from_hex",
            "location": 114,
            "return": [
                "_TPrivateKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivateKey]"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "PrivateKey.from_seed": {
            "name": "from_seed",
            "location": 118,
            "return": [
                "_TPrivateKey"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivateKey]"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "PrivateKey.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_key": []
            }
        },
        "PrivateKey.sign": {
            "name": "sign",
            "location": 126,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "PrivateKey.sign_deterministic": {
            "name": "sign_deterministic",
            "location": 131,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ],
                "extra_entropy": [
                    "bytes"
                ]
            }
        },
        "PrivateKey.sign_block_hash": {
            "name": "sign_block_hash",
            "location": 135,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "bytes"
                ]
            }
        },
        "PrivateKey.to_bytes": {
            "name": "to_bytes",
            "location": 138,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateKey.to_hex": {
            "name": "to_hex",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bool"
                ]
            }
        },
        "PrivateKey.get_public_key": {
            "name": "get_public_key",
            "location": 144,
            "return": [
                "PublicKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateKey.__hash__": {
            "name": "__hash__",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivateKey.__eq__": {
            "name": "__eq__",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pyrchain-master/rchain/data_types.py": {},
    "pyrchain-master/rchain/interface.py": {
        "APIClient.deploy": {
            "name": "deploy",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "term": [
                    "str"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ],
                "valid_after_block_no": [
                    "int"
                ],
                "timestamp_millis": [
                    "int"
                ]
            }
        },
        "APIClient.deploy_with_vabn_filled": {
            "name": "deploy_with_vabn_filled",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "term": [
                    "str"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ],
                "timestamp_millis": [
                    "int"
                ]
            }
        },
        "APIClient.show_block": {
            "name": "show_block",
            "location": 24,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "str"
                ]
            }
        },
        "APIClient.show_blocks": {
            "name": "show_blocks",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int"
                ]
            }
        },
        "APIClient.propose": {
            "name": "propose",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIClient.listen_for_data_at_name": {
            "name": "listen_for_data_at_name",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyrchain-master/rchain/meta.py": {
        "_make_from_pb_fn": {
            "name": "_make_from_pb_fn",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "fields": [
                    "List[dataclasses.Field]"
                ]
            }
        },
        "_process_cls": {
            "name": "_process_cls",
            "location": 40,
            "return": [
                "_T0"
            ],
            "arguments": {
                "cls": [
                    "_T0"
                ]
            }
        },
        "from_pb": {
            "name": "from_pb",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "_cls": []
            }
        },
        "from_pb.wrap": {
            "name": "wrap",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pyrchain-master/rchain/param.py": {},
    "pyrchain-master/rchain/report.py": {},
    "pyrchain-master/rchain/util.py": {
        "_gen_deploy_sig_content": {
            "name": "_gen_deploy_sig_content",
            "location": 7,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": []
            }
        },
        "sign_deploy_data": {
            "name": "sign_deploy_data",
            "location": 17,
            "return": [
                "bytes"
            ],
            "arguments": {
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "data": []
            }
        },
        "verify_deploy_data": {
            "name": "verify_deploy_data",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "rchain.crypto.PublicKey"
                ],
                "sig": [
                    "bytes"
                ],
                "data": []
            }
        },
        "create_deploy_data": {
            "name": "create_deploy_data",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "term": [
                    "str"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ],
                "valid_after_block_no": [
                    "int"
                ],
                "timestamp_millis": [
                    "int"
                ]
            }
        }
    },
    "pyrchain-master/rchain/vault.py": {
        "render_contract_template": {
            "name": "render_contract_template",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "template": [
                    "str"
                ],
                "substitutions": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "VaultAPI.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "rchain.client.RClient"
                ]
            }
        },
        "VaultAPI.get_balance": {
            "name": "get_balance",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rev_addr": [
                    "str"
                ],
                "block_hash": [
                    "str"
                ]
            }
        },
        "VaultAPI.transfer": {
            "name": "transfer",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "from_addr": [
                    "str"
                ],
                "to_addr": [
                    "str"
                ],
                "amount": [
                    "int"
                ],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ]
            }
        },
        "VaultAPI.transfer_ensure": {
            "name": "transfer_ensure",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "from_addr": [
                    "str"
                ],
                "to_addr": [
                    "str"
                ],
                "amount": [
                    "int"
                ],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ]
            }
        },
        "VaultAPI.create_vault": {
            "name": "create_vault",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "str"
                ],
                "key": [
                    "rchain.crypto.PrivateKey"
                ],
                "phlo_price": [
                    "int"
                ],
                "phlo_limit": [
                    "int"
                ]
            }
        }
    },
    "pyrchain-master/rchain/__init__.py": {},
    "pyrchain-master/rchain/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [],
            "arguments": {
                "ctx": [],
                "json_output": []
            }
        },
        "get_rev_addr": {
            "name": "get_rev_addr",
            "location": 23,
            "return": [],
            "arguments": {
                "ctx": [],
                "input_type": [],
                "input": []
            }
        },
        "sign_deploy": {
            "name": "sign_deploy",
            "location": 54,
            "return": [],
            "arguments": {
                "ctx": [],
                "private_key": [],
                "term": [],
                "phlo_price": [],
                "phlo_limit": [],
                "valid_after_block_number": [],
                "timestamp": [],
                "sig_algorithm": []
            }
        },
        "submit_deploy": {
            "name": "submit_deploy",
            "location": 82,
            "return": [],
            "arguments": {
                "ctx": [],
                "deployer": [],
                "term": [],
                "phlo_price": [],
                "phlo_limit": [],
                "valid_after_block_number": [],
                "timestamp": [],
                "sig_algorithm": [],
                "sig": [],
                "host": [],
                "port": []
            }
        }
    },
    "pyrchain-master/rchain/pb/CasperMessage_pb2.py": {},
    "pyrchain-master/rchain/pb/CasperMessage_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/DeployServiceCommon_pb2.py": {},
    "pyrchain-master/rchain/pb/DeployServiceCommon_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/DeployServiceV1_pb2.py": {},
    "pyrchain-master/rchain/pb/DeployServiceV1_pb2_grpc.py": {
        "add_DeployServiceServicer_to_server": {
            "name": "add_DeployServiceServicer_to_server",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "DeployServiceStub.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "DeployServiceServicer.doDeploy": {
            "name": "doDeploy",
            "location": 125,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.getBlock": {
            "name": "getBlock",
            "location": 132,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.visualizeDag": {
            "name": "visualizeDag",
            "location": 139,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.machineVerifiableDag": {
            "name": "machineVerifiableDag",
            "location": 146,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.showMainChain": {
            "name": "showMainChain",
            "location": 152,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.getBlocks": {
            "name": "getBlocks",
            "location": 159,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.listenForDataAtName": {
            "name": "listenForDataAtName",
            "location": 166,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.getDataAtName": {
            "name": "getDataAtName",
            "location": 174,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.listenForContinuationAtName": {
            "name": "listenForContinuationAtName",
            "location": 181,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.findDeploy": {
            "name": "findDeploy",
            "location": 188,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.previewPrivateNames": {
            "name": "previewPrivateNames",
            "location": 195,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.lastFinalizedBlock": {
            "name": "lastFinalizedBlock",
            "location": 202,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.isFinalized": {
            "name": "isFinalized",
            "location": 209,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.bondStatus": {
            "name": "bondStatus",
            "location": 216,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.exploratoryDeploy": {
            "name": "exploratoryDeploy",
            "location": 224,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.getBlocksByHeights": {
            "name": "getBlocksByHeights",
            "location": 231,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.getEventByHash": {
            "name": "getEventByHash",
            "location": 238,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployServiceServicer.status": {
            "name": "status",
            "location": 245,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "DeployService.doDeploy": {
            "name": "doDeploy",
            "location": 361,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.getBlock": {
            "name": "getBlock",
            "location": 378,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.visualizeDag": {
            "name": "visualizeDag",
            "location": 395,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.machineVerifiableDag": {
            "name": "machineVerifiableDag",
            "location": 412,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.showMainChain": {
            "name": "showMainChain",
            "location": 429,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.getBlocks": {
            "name": "getBlocks",
            "location": 446,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.listenForDataAtName": {
            "name": "listenForDataAtName",
            "location": 463,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.getDataAtName": {
            "name": "getDataAtName",
            "location": 480,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.listenForContinuationAtName": {
            "name": "listenForContinuationAtName",
            "location": 497,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.findDeploy": {
            "name": "findDeploy",
            "location": 514,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.previewPrivateNames": {
            "name": "previewPrivateNames",
            "location": 531,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.lastFinalizedBlock": {
            "name": "lastFinalizedBlock",
            "location": 548,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.isFinalized": {
            "name": "isFinalized",
            "location": 565,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.bondStatus": {
            "name": "bondStatus",
            "location": 582,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.exploratoryDeploy": {
            "name": "exploratoryDeploy",
            "location": 599,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.getBlocksByHeights": {
            "name": "getBlocksByHeights",
            "location": 616,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.getEventByHash": {
            "name": "getEventByHash",
            "location": 633,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "DeployService.status": {
            "name": "status",
            "location": 650,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        }
    },
    "pyrchain-master/rchain/pb/ProposeServiceCommon_pb2.py": {},
    "pyrchain-master/rchain/pb/ProposeServiceCommon_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/ProposeServiceV1_pb2.py": {},
    "pyrchain-master/rchain/pb/ProposeServiceV1_pb2_grpc.py": {
        "add_ProposeServiceServicer_to_server": {
            "name": "add_ProposeServiceServicer_to_server",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "ProposeServiceStub.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "ProposeServiceServicer.propose": {
            "name": "propose",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ProposeServiceServicer.proposeResult": {
            "name": "proposeResult",
            "location": 39,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "ProposeService.propose": {
            "name": "propose",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "ProposeService.proposeResult": {
            "name": "proposeResult",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        }
    },
    "pyrchain-master/rchain/pb/RhoTypes_pb2.py": {},
    "pyrchain-master/rchain/pb/RhoTypes_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/routing_pb2.py": {},
    "pyrchain-master/rchain/pb/routing_pb2_grpc.py": {
        "add_TransportLayerServicer_to_server": {
            "name": "add_TransportLayerServicer_to_server",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "servicer": [],
                "server": []
            }
        },
        "TransportLayerStub.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "TransportLayerServicer.Send": {
            "name": "Send",
            "location": 32,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "TransportLayerServicer.Stream": {
            "name": "Stream",
            "location": 38,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "request_iterator": [],
                "context": []
            }
        },
        "TransportLayer.Send": {
            "name": "Send",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "request": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        },
        "TransportLayer.Stream": {
            "name": "Stream",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "request_iterator": [],
                "target": [],
                "options": [],
                "channel_credentials": [],
                "call_credentials": [],
                "insecure": [],
                "compression": [],
                "wait_for_ready": [],
                "timeout": [],
                "metadata": []
            }
        }
    },
    "pyrchain-master/rchain/pb/ServiceError_pb2.py": {},
    "pyrchain-master/rchain/pb/ServiceError_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/__init__.py": {},
    "pyrchain-master/rchain/pb/scalapb/scalapb_pb2.py": {},
    "pyrchain-master/rchain/pb/scalapb/scalapb_pb2_grpc.py": {},
    "pyrchain-master/rchain/pb/scalapb/__init__.py": {},
    "pyrchain-master/rchain/tests/test_certificate.py": {
        "check_cert": {
            "name": "check_cert",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "actual_cert": [
                    "x509.Certificate"
                ],
                "expected_tls_cn": [
                    "str"
                ]
            }
        },
        "test_get_node_tls_key_pem": {
            "name": "test_get_node_tls_key_pem",
            "location": 54,
            "return": [],
            "arguments": {
                "private_key_pem": [],
                "tls_cn_name": [],
                "expected_tls_cn": []
            }
        },
        "test_get_node_tls_cn": {
            "name": "test_get_node_tls_cn",
            "location": 60,
            "return": [],
            "arguments": {
                "private_key_pem": [],
                "tls_cn_name": [],
                "expected_tls_cn": []
            }
        },
        "test_get_node_tls_cert_pem": {
            "name": "test_get_node_tls_cert_pem",
            "location": 69,
            "return": [],
            "arguments": {
                "private_key_pem": [],
                "tls_cn_name": [],
                "expected_tls_cn": []
            }
        },
        "test_generate_node_tls_key_cert_id": {
            "name": "test_generate_node_tls_key_cert_id",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyrchain-master/rchain/tests/test_cli.py": {
        "test_get_rev_from_private": {
            "name": "test_get_rev_from_private",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_rev_from_pub": {
            "name": "test_get_rev_from_pub",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_rev_from_eth": {
            "name": "test_get_rev_from_eth",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_rev_from_err": {
            "name": "test_get_rev_from_err",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_deploy": {
            "name": "test_sign_deploy",
            "location": 71,
            "return": [],
            "arguments": {
                "key": [],
                "terms": [],
                "phlo_price": [],
                "phlo_limit": [],
                "valid_after_block_no": [],
                "timestamp_millis": []
            }
        },
        "test_submit_deploy": {
            "name": "test_submit_deploy",
            "location": 102,
            "return": [],
            "arguments": {
                "key": [],
                "terms": [],
                "phlo_price": [],
                "phlo_limit": [],
                "valid_after_block_no": [],
                "timestamp_millis": []
            }
        },
        "test_submit_deploy.DummyDeploySerivce.doDeploy": {
            "name": "doDeploy",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "pyrchain-master/rchain/tests/test_client.py": {
        "deploy_service": {
            "name": "deploy_service",
            "location": 33,
            "return": [],
            "arguments": {
                "deploy_service": []
            }
        },
        "test_client_deploy": {
            "name": "test_client_deploy",
            "location": 55,
            "return": [],
            "arguments": {
                "key": [],
                "terms": [],
                "phlo_price": [],
                "phlo_limit": [],
                "valid_after_block_no": [],
                "timestamp_millis": []
            }
        },
        "test_client_show_block": {
            "name": "test_client_show_block",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_show_blocks": {
            "name": "test_client_show_blocks",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_propose": {
            "name": "test_client_propose",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_find_deploy": {
            "name": "test_client_find_deploy",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_last_finalized_block": {
            "name": "test_client_last_finalized_block",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_is_finalized_block": {
            "name": "test_client_is_finalized_block",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_deploy.DummyDeploySerivce.doDeploy": {
            "name": "doDeploy",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_show_block.DummyDeploySerivce.getBlock": {
            "name": "getBlock",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_show_blocks.DummyDeploySerivce.getBlocks": {
            "name": "getBlocks",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_propose.DummyProposeService.propose": {
            "name": "propose",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_find_deploy.DummyDeployService.findDeploy": {
            "name": "findDeploy",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_last_finalized_block.DummyDeployService.lastFinalizedBlock": {
            "name": "lastFinalizedBlock",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "test_client_is_finalized_block.DummyDeployService.isFinalized": {
            "name": "isFinalized",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        }
    },
    "pyrchain-master/rchain/tests/test_crypto.py": {
        "test_blake2b_32": {
            "name": "test_blake2b_32",
            "location": 17,
            "return": [],
            "arguments": {
                "input_str": [],
                "expected_output": []
            }
        },
        "test_privatekey_function": {
            "name": "test_privatekey_function",
            "location": 42,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_publickey_from_hex": {
            "name": "test_publickey_from_hex",
            "location": 50,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_key_to_hex": {
            "name": "test_key_to_hex",
            "location": 59,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_sign_verify_good": {
            "name": "test_sign_verify_good",
            "location": 67,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_sign_verify_bad": {
            "name": "test_sign_verify_bad",
            "location": 76,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_sign_block_hash_verify_good": {
            "name": "test_sign_block_hash_verify_good",
            "location": 87,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_sign_block_hash_verify_bad": {
            "name": "test_sign_block_hash_verify_bad",
            "location": 97,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 110,
            "return": [],
            "arguments": {
                "key_hex": [],
                "pub_key_hex": [],
                "rev_address": []
            }
        },
        "test_private_key_from_eth_path": {
            "name": "test_private_key_from_eth_path",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rev_address_validation": {
            "name": "test_rev_address_validation",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyrchain-master/rchain/tests/test_from_pb.py": {
        "generate_Class1_pb": {
            "name": "generate_Class1_pb",
            "location": 44,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "generate_ClassEmbedded_pb": {
            "name": "generate_ClassEmbedded_pb",
            "location": 54,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "generate_ClassEmbeddedList_pb": {
            "name": "generate_ClassEmbeddedList_pb",
            "location": 62,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "test_simple_gen_from_pb": {
            "name": "test_simple_gen_from_pb",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_from_pb_embedded": {
            "name": "test_gen_from_pb_embedded",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gen_from_pb_embedded_list": {
            "name": "test_gen_from_pb_embedded_list",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "seal": {
            "name": "seal",
            "location": 13,
            "return": [
                "_T0"
            ],
            "arguments": {
                "obj": [
                    "_T0"
                ]
            }
        }
    },
    "pyrchain-master/rchain/tests/__init__.py": {}
}
{
    "pytch-master/bin/generate_greencst.py": {
        "main": {
            "name": "main",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_children_parameter_list": {
            "name": "get_children_parameter_list",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "children": []
            }
        },
        "get_class_def": {
            "name": "get_class_def",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "node_type": [],
                "children": []
            }
        }
    },
    "pytch-master/bin/generate_redcst.py": {
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_green_to_red_node_map": {
            "name": "get_green_to_red_node_map",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "node_types": []
            }
        },
        "get_class_def": {
            "name": "get_class_def",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "node_type": [],
                "node_types": [],
                "children": []
            }
        },
        "get_class_def.get_leaf_children": {
            "name": "get_leaf_children",
            "location": 99,
            "return": [],
            "arguments": {
                "base_type": []
            }
        }
    },
    "pytch-master/bin/sttools.py": {
        "get_node_type_from_header": {
            "name": "get_node_type_from_header",
            "location": 60,
            "return": [
                "NodeType"
            ],
            "arguments": {
                "header": []
            }
        },
        "get_child": {
            "name": "get_child",
            "location": 69,
            "return": [
                "Child"
            ],
            "arguments": {
                "line": []
            }
        },
        "get_node_types": {
            "name": "get_node_types",
            "location": 75,
            "return": [
                "Dict[(NodeType, List[Child])]"
            ],
            "arguments": {
                "lines": []
            }
        },
        "NodeType.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "supertype": []
            }
        },
        "NodeType.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeType.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeType.__lt__": {
            "name": "__lt__",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeType.__hash__": {
            "name": "__hash__",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Child.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "type": []
            }
        },
        "Child.base_type": {
            "name": "base_type",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Child.is_sequence_type": {
            "name": "is_sequence_type",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Child.is_optional_sequence_type": {
            "name": "is_optional_sequence_type",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/binder.py": {
        "get_names_bound_for_let_expr_body": {
            "name": "get_names_bound_for_let_expr_body",
            "location": 44,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "n_let_expr": []
            }
        },
        "get_names_bound_for_def_expr": {
            "name": "get_names_bound_for_def_expr",
            "location": 52,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "n_def_expr": []
            }
        },
        "get_names_bound_for_def_expr_next": {
            "name": "get_names_bound_for_def_expr_next",
            "location": 81,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "n_def_expr": []
            }
        },
        "get_names_bound_by_pattern": {
            "name": "get_names_bound_by_pattern",
            "location": 92,
            "return": [
                "Dict[(Any, List[_T0])]"
            ],
            "arguments": {
                "n_pattern": [
                    "_T0@@"
                ]
            }
        },
        "bind": {
            "name": "bind",
            "location": 105,
            "return": [
                "Bindation"
            ],
            "arguments": {
                "file_info": [],
                "syntax_tree": [],
                "global_scope": []
            }
        },
        "Bindation.get": {
            "name": "get",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "bind.get_binding_referred_to_by_name": {
            "name": "get_binding_referred_to_by_name",
            "location": 110,
            "return": [],
            "arguments": {
                "node": [],
                "name": [],
                "names_in_scope": []
            }
        },
        "bind.bind_node": {
            "name": "bind_node",
            "location": 157,
            "return": [],
            "arguments": {
                "node": [],
                "names_in_scope": []
            }
        }
    },
    "pytch-master/pytch/containers.py": {
        "find": {
            "name": "find",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "iterable": [],
                "pred": []
            }
        },
        "take_while": {
            "name": "take_while",
            "location": 114,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "pred": []
            }
        },
        "PSet.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "PSet.__contains__": {
            "name": "__contains__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PSet.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PSet.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PSet.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PSet.add": {
            "name": "add",
            "location": 43,
            "return": [
                "PSet"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PVector.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "PVector.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "PVector.__len__": {
            "name": "__len__",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PVector.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PVector.append": {
            "name": "append",
            "location": 71,
            "return": [
                "PVector"
            ],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "PVector.map": {
            "name": "map",
            "location": 74,
            "return": [
                "PVector"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "PMap.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "PMap.of_entries": {
            "name": "of_entries",
            "location": 83,
            "return": [
                "PMap"
            ],
            "arguments": {
                "cls": [
                    "Type[PMap]"
                ],
                "iterable": []
            }
        },
        "PMap.__getitem__": {
            "name": "__getitem__",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "PMap.__iter__": {
            "name": "__iter__",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMap.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMap.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PMap.set": {
            "name": "set",
            "location": 100,
            "return": [
                "PMap"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "PMap.update": {
            "name": "update",
            "location": 103,
            "return": [
                "PMap"
            ],
            "arguments": {
                "self": [],
                "bindings": []
            }
        }
    },
    "pytch-master/pytch/cstquery.py": {
        "Query.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "syntax_tree": []
            }
        },
        "Query.find_instances": {
            "name": "find_instances",
            "location": 13,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "node_type": []
            }
        },
        "Query._walk": {
            "name": "_walk",
            "location": 18,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "_T0@@"
                ]
            }
        },
        "Query._walk_all": {
            "name": "_walk_all",
            "location": 25,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/errors.py": {
        "get_full_diagnostic_message": {
            "name": "get_full_diagnostic_message",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "diagnostic": []
            }
        },
        "get_glyphs": {
            "name": "get_glyphs",
            "location": 200,
            "return": [
                "Glyphs"
            ],
            "arguments": {
                "ascii": []
            }
        },
        "get_output_env": {
            "name": "get_output_env",
            "location": 241,
            "return": [
                "OutputEnv"
            ],
            "arguments": {
                "ascii": []
            }
        },
        "get_error_lines": {
            "name": "get_error_lines",
            "location": 418,
            "return": [
                "list"
            ],
            "arguments": {
                "error": [],
                "ascii": []
            }
        },
        "get_error_segments": {
            "name": "get_error_segments",
            "location": 465,
            "return": [
                "List[Segment]"
            ],
            "arguments": {
                "output_env": [],
                "error": []
            }
        },
        "get_context": {
            "name": "get_context",
            "location": 504,
            "return": [
                "_DiagnosticContext"
            ],
            "arguments": {
                "file_info": [],
                "range": []
            }
        },
        "_merge_contexts": {
            "name": "_merge_contexts",
            "location": 523,
            "return": [
                "list"
            ],
            "arguments": {
                "contexts": []
            }
        },
        "_ranges_overlap": {
            "name": "_ranges_overlap",
            "location": 567,
            "return": [
                "bool"
            ],
            "arguments": {
                "lhs": [],
                "rhs": []
            }
        },
        "_group_by_pred": {
            "name": "_group_by_pred",
            "location": 579,
            "return": [
                "Generator[(list, Any, None)]"
            ],
            "arguments": {
                "seq": [],
                "pred": []
            }
        },
        "get_context_segments": {
            "name": "get_context_segments",
            "location": 590,
            "return": [
                "Optional[List[Segment]]"
            ],
            "arguments": {
                "output_env": [],
                "context": [],
                "diagnostics": []
            }
        },
        "get_segments_without_ranges": {
            "name": "get_segments_without_ranges",
            "location": 648,
            "return": [
                "List[Segment]"
            ],
            "arguments": {
                "output_env": [],
                "diagnostics": []
            }
        },
        "_get_diagnostic_lines_to_insert": {
            "name": "_get_diagnostic_lines_to_insert",
            "location": 672,
            "return": [
                "collections.defaultdict[(int, Any)]"
            ],
            "arguments": {
                "output_env": [],
                "context": [],
                "diagnostics": []
            }
        },
        "underline_lines": {
            "name": "underline_lines",
            "location": 712,
            "return": [
                "List[_MessageLine]"
            ],
            "arguments": {
                "output_env": [],
                "start_line_index": [],
                "context_lines": [],
                "underline_range": [],
                "underline_color": []
            }
        },
        "count": {
            "name": "count",
            "location": 798,
            "return": [
                "str"
            ],
            "arguments": {
                "count": [],
                "singular": [],
                "plural": []
            }
        },
        "Diagnostic.file_info": {
            "name": "file_info",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagnostic.color": {
            "name": "color",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagnostic.preamble_message": {
            "name": "preamble_message",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagnostic.message": {
            "name": "message",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagnostic.range": {
            "name": "range",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Error.color": {
            "name": "color",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Error.preamble_message": {
            "name": "preamble_message",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MessageLine.wrap": {
            "name": "wrap",
            "location": 257,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "max_width": []
            }
        },
        "_MessageLine.get_wrapped_width": {
            "name": "get_wrapped_width",
            "location": 269,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "max_width": []
            }
        },
        "Segment.check": {
            "name": "check",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [],
                "value": []
            }
        },
        "Segment.gutter_width": {
            "name": "gutter_width",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Segment.get_box_width": {
            "name": "get_box_width",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "gutter_width": []
            }
        },
        "Segment.render_lines": {
            "name": "render_lines",
            "location": 335,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "is_first": [],
                "is_last": [],
                "gutter_width": [],
                "box_width": []
            }
        },
        "get_error_segments.key": {
            "name": "key",
            "location": 473,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "pytch-master/pytch/fuzz.py": {
        "check_for_buggy_parse": {
            "name": "check_for_buggy_parse",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "file_info": []
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        }
    },
    "pytch-master/pytch/greencst.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": []
            }
        },
        "Node.children": {
            "name": "children",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.leading_text": {
            "name": "leading_text",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.text": {
            "name": "text",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.trailing_text": {
            "name": "trailing_text",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.full_text": {
            "name": "full_text",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.first_present_child": {
            "name": "first_present_child",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.last_present_child": {
            "name": "last_present_child",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.leading_width": {
            "name": "leading_width",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.trailing_width": {
            "name": "trailing_width",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.width": {
            "name": "width",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.full_width": {
            "name": "full_width",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_expr": [],
                "t_eof": []
            }
        },
        "SyntaxTree.n_expr": {
            "name": "n_expr",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.t_eof": {
            "name": "t_eof",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_identifier": []
            }
        },
        "VariablePattern.t_identifier": {
            "name": "t_identifier",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_pattern": [],
                "t_comma": []
            }
        },
        "Parameter.n_pattern": {
            "name": "n_pattern",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.t_comma": {
            "name": "t_comma",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_lparen": [],
                "parameters": [],
                "t_rparen": []
            }
        },
        "ParameterList.t_lparen": {
            "name": "t_lparen",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.parameters": {
            "name": "parameters",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.t_rparen": {
            "name": "t_rparen",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_let": [],
                "n_pattern": [],
                "t_equals": [],
                "n_value": [],
                "t_in": [],
                "n_body": []
            }
        },
        "LetExpr.t_let": {
            "name": "t_let",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_pattern": {
            "name": "n_pattern",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.t_equals": {
            "name": "t_equals",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_value": {
            "name": "n_value",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.t_in": {
            "name": "t_in",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_body": {
            "name": "n_body",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_def": [],
                "n_name": [],
                "n_parameter_list": [],
                "t_double_arrow": [],
                "n_definition": [],
                "t_in": [],
                "n_next": []
            }
        },
        "DefExpr.t_def": {
            "name": "t_def",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_name": {
            "name": "n_name",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_parameter_list": {
            "name": "n_parameter_list",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.t_double_arrow": {
            "name": "t_double_arrow",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_definition": {
            "name": "n_definition",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.t_in": {
            "name": "t_in",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_next": {
            "name": "n_next",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_if": [],
                "n_if_expr": [],
                "t_then": [],
                "n_then_expr": [],
                "t_else": [],
                "n_else_expr": [],
                "t_endif": []
            }
        },
        "IfExpr.t_if": {
            "name": "t_if",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_if_expr": {
            "name": "n_if_expr",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_then": {
            "name": "t_then",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_then_expr": {
            "name": "n_then_expr",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_else": {
            "name": "t_else",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_else_expr": {
            "name": "n_else_expr",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_endif": {
            "name": "t_endif",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_identifier": []
            }
        },
        "IdentifierExpr.t_identifier": {
            "name": "t_identifier",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_int_literal": []
            }
        },
        "IntLiteralExpr.t_int_literal": {
            "name": "t_int_literal",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_string_literal": []
            }
        },
        "StringLiteralExpr.t_string_literal": {
            "name": "t_string_literal",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_lhs": [],
                "t_operator": [],
                "n_rhs": []
            }
        },
        "BinaryExpr.n_lhs": {
            "name": "n_lhs",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.t_operator": {
            "name": "t_operator",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.n_rhs": {
            "name": "n_rhs",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_expr": [],
                "t_comma": []
            }
        },
        "Argument.n_expr": {
            "name": "n_expr",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.t_comma": {
            "name": "t_comma",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t_lparen": [],
                "arguments": [],
                "t_rparen": []
            }
        },
        "ArgumentList.t_lparen": {
            "name": "t_lparen",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.arguments": {
            "name": "arguments",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.t_rparen": {
            "name": "t_rparen",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_callee": [],
                "n_argument_list": []
            }
        },
        "FunctionCallExpr.n_callee": {
            "name": "n_callee",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.n_argument_list": {
            "name": "n_argument_list",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/lexer.py": {
        "with_indentation_levels": {
            "name": "with_indentation_levels",
            "location": 482,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "make_dummy_token": {
            "name": "make_dummy_token",
            "location": 494,
            "return": [
                "Token"
            ],
            "arguments": {
                "kind": []
            }
        },
        "preparse": {
            "name": "preparse",
            "location": 500,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "lex": {
            "name": "lex",
            "location": 661,
            "return": [
                "Lexation"
            ],
            "arguments": {
                "file_info": []
            }
        },
        "Trivium.width": {
            "name": "width",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.update": {
            "name": "update",
            "location": 151,
            "return": [
                "_TToken@@Token@@"
            ],
            "arguments": {
                "self": [
                    "_TToken@@Token@@"
                ]
            }
        },
        "Token.is_dummy": {
            "name": "is_dummy",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.full_text": {
            "name": "full_text",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.width": {
            "name": "width",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.full_width": {
            "name": "full_width",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.leading_width": {
            "name": "leading_width",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.leading_text": {
            "name": "leading_text",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.trailing_width": {
            "name": "trailing_width",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.trailing_text": {
            "name": "trailing_text",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.is_followed_by_newline": {
            "name": "is_followed_by_newline",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.update": {
            "name": "update",
            "location": 200,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.advance_offset": {
            "name": "advance_offset",
            "location": 203,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "offset_delta": []
            }
        },
        "State.current_char": {
            "name": "current_char",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.text_from": {
            "name": "text_from",
            "location": 213,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "start_offset": []
            }
        },
        "State.add_error": {
            "name": "add_error",
            "location": 216,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "error": []
            }
        },
        "Lexation.full_width": {
            "name": "full_width",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.lex": {
            "name": "lex",
            "location": 254,
            "return": [
                "Lexation"
            ],
            "arguments": {
                "self": [],
                "file_info": []
            }
        },
        "Lexer.lex_leading_trivia": {
            "name": "lex_leading_trivia",
            "location": 284,
            "return": [
                "Tuple[(Any, List[Trivium])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lexer.lex_trailing_trivia": {
            "name": "lex_trailing_trivia",
            "location": 296,
            "return": [
                "Tuple[(Any, List[Trivium])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lexer.lex_next_trivia_by_patterns": {
            "name": "lex_next_trivia_by_patterns",
            "location": 321,
            "return": [
                "List[Trivium]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "trivia_patterns": []
            }
        },
        "Lexer.lex_token": {
            "name": "lex_token",
            "location": 347,
            "return": [
                "Tuple[(Any, Token)]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lexer.lex_next_token_by_patterns": {
            "name": "lex_next_token_by_patterns",
            "location": 406,
            "return": [
                "Tuple[(Any, Optional[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "token_patterns": []
            }
        },
        "Lexer.lex_string": {
            "name": "lex_string",
            "location": 424,
            "return": [
                "Tuple[(Any, Optional[Tuple[(Any, Any)]])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "preparse.unwind": {
            "name": "unwind",
            "location": 524,
            "return": [],
            "arguments": {
                "indentation_level": [],
                "unwind_statements": [],
                "kind": [],
                "kind_indentation_level": []
            }
        }
    },
    "pytch-master/pytch/parser.py": {
        "walk_tokens": {
            "name": "walk_tokens",
            "location": 50,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "node": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 959,
            "return": [
                "Parsation"
            ],
            "arguments": {
                "file_info": [],
                "tokens": []
            }
        },
        "dump_syntax_tree": {
            "name": "dump_syntax_tree",
            "location": 964,
            "return": [
                "Tuple[(Any, List[str])]"
            ],
            "arguments": {
                "source_code": [],
                "ast_node": [],
                "offset": [
                    "_T2@@"
                ]
            }
        },
        "Parsation.is_buggy": {
            "name": "is_buggy",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseException.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "State.check": {
            "name": "check",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [],
                "value": []
            }
        },
        "State.end_of_file_offset_range": {
            "name": "end_of_file_offset_range",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.get_current_token": {
            "name": "get_current_token",
            "location": 149,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.current_token_offset_range": {
            "name": "current_token_offset_range",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.current_token_kind": {
            "name": "current_token_kind",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.current_token_range": {
            "name": "current_token_range",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.next_token": {
            "name": "next_token",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.update": {
            "name": "update",
            "location": 199,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.add_error": {
            "name": "add_error",
            "location": 202,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "error": []
            }
        },
        "State.assert_": {
            "name": "assert_",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "condition": [],
                "code": [],
                "message": []
            }
        },
        "State.start_recovery": {
            "name": "start_recovery",
            "location": 218,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.finish_recovery": {
            "name": "finish_recovery",
            "location": 224,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.push_sync_token_kinds": {
            "name": "push_sync_token_kinds",
            "location": 230,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "token_kinds": []
            }
        },
        "State.pop_sync_token_kinds": {
            "name": "pop_sync_token_kinds",
            "location": 233,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ]
            }
        },
        "State.consume_token": {
            "name": "consume_token",
            "location": 237,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "token": []
            }
        },
        "State.consume_error_token": {
            "name": "consume_error_token",
            "location": 263,
            "return": [
                "_TState@@State@@"
            ],
            "arguments": {
                "self": [
                    "_TState@@State@@"
                ],
                "token": []
            }
        },
        "UnhandledParserException.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "UnhandledParserException.__str__": {
            "name": "__str__",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 312,
            "return": [
                "Parsation"
            ],
            "arguments": {
                "self": [],
                "file_info": [],
                "tokens": []
            }
        },
        "Parser.parse_let_expr": {
            "name": "parse_let_expr",
            "location": 354,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.LetExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "allow_naked_bindings": []
            }
        },
        "Parser.parse_def_expr": {
            "name": "parse_def_expr",
            "location": 407,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.DefExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "allow_naked_bindings": []
            }
        },
        "Parser.parse_if_expr": {
            "name": "parse_if_expr",
            "location": 463,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.IfExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_pattern": {
            "name": "parse_pattern",
            "location": 494,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.VariablePattern])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "error": []
            }
        },
        "Parser.parse_variable_pattern": {
            "name": "parse_variable_pattern",
            "location": 505,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.VariablePattern])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "error": []
            }
        },
        "Parser.parse_expr": {
            "name": "parse_expr",
            "location": 516,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "min_precedence": [],
                "allow_naked_bindings": []
            }
        },
        "Parser.parse_non_binary_expr": {
            "name": "parse_non_binary_expr",
            "location": 571,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "allow_naked_bindings": []
            }
        },
        "Parser.skip_past": {
            "name": "skip_past",
            "location": 589,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "kind": []
            }
        },
        "Parser.add_error_and_recover": {
            "name": "add_error_and_recover",
            "location": 595,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "error": []
            }
        },
        "Parser.parse_atom": {
            "name": "parse_atom",
            "location": 621,
            "return": [
                "Tuple[(Any, Optional[Union[(pytch.greencst.DefExpr, pytch.greencst.IdentifierExpr, pytch.greencst.IfExpr, pytch.greencst.IntLiteralExpr, pytch.greencst.LetExpr, pytch.greencst.StringLiteralExpr)]])]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "allow_naked_bindings": []
            }
        },
        "Parser.parse_function_call": {
            "name": "parse_function_call",
            "location": 658,
            "return": [
                "Tuple[(Any, pytch.greencst.FunctionCallExpr)]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "current_token": [],
                "n_callee": []
            }
        },
        "Parser.parse_argument_list": {
            "name": "parse_argument_list",
            "location": 667,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.ArgumentList])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_argument": {
            "name": "parse_argument",
            "location": 728,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.Argument])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_parameter_list": {
            "name": "parse_parameter_list",
            "location": 763,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.ParameterList])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_parameter": {
            "name": "parse_parameter",
            "location": 824,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.Parameter])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_identifier_expr": {
            "name": "parse_identifier_expr",
            "location": 861,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.IdentifierExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_int_literal": {
            "name": "parse_int_literal",
            "location": 869,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.IntLiteralExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.parse_string_literal": {
            "name": "parse_string_literal",
            "location": 875,
            "return": [
                "Tuple[(Any, Optional[pytch.greencst.StringLiteralExpr])]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Parser.expect_token": {
            "name": "expect_token",
            "location": 883,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "_T0@@"
                ],
                "possible_token_kinds": []
            }
        },
        "Parser.describe_token": {
            "name": "describe_token",
            "location": 943,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Parser.describe_token_kind": {
            "name": "describe_token_kind",
            "location": 948,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "token_kind": []
            }
        }
    },
    "pytch-master/pytch/redcst.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.text": {
            "name": "text",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.full_text": {
            "name": "full_text",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.children": {
            "name": "children",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.full_width": {
            "name": "full_width",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node.offset_range": {
            "name": "offset_range",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "SyntaxTree.n_expr": {
            "name": "n_expr",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.t_eof": {
            "name": "t_eof",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.text": {
            "name": "text",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.full_text": {
            "name": "full_text",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.full_width": {
            "name": "full_width",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.offset_range": {
            "name": "offset_range",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTree.children": {
            "name": "children",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "VariablePattern.t_identifier": {
            "name": "t_identifier",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.text": {
            "name": "text",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.full_text": {
            "name": "full_text",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.full_width": {
            "name": "full_width",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.offset_range": {
            "name": "offset_range",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablePattern.children": {
            "name": "children",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "Parameter.n_pattern": {
            "name": "n_pattern",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.t_comma": {
            "name": "t_comma",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.text": {
            "name": "text",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.full_text": {
            "name": "full_text",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.full_width": {
            "name": "full_width",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.offset_range": {
            "name": "offset_range",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.children": {
            "name": "children",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "ParameterList.t_lparen": {
            "name": "t_lparen",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.parameters": {
            "name": "parameters",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.t_rparen": {
            "name": "t_rparen",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.text": {
            "name": "text",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.full_text": {
            "name": "full_text",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.full_width": {
            "name": "full_width",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.offset_range": {
            "name": "offset_range",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParameterList.children": {
            "name": "children",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "LetExpr.t_let": {
            "name": "t_let",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_pattern": {
            "name": "n_pattern",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.t_equals": {
            "name": "t_equals",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_value": {
            "name": "n_value",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.t_in": {
            "name": "t_in",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.n_body": {
            "name": "n_body",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.text": {
            "name": "text",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.full_text": {
            "name": "full_text",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.full_width": {
            "name": "full_width",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.offset_range": {
            "name": "offset_range",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LetExpr.children": {
            "name": "children",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "DefExpr.t_def": {
            "name": "t_def",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_name": {
            "name": "n_name",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_parameter_list": {
            "name": "n_parameter_list",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.t_double_arrow": {
            "name": "t_double_arrow",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_definition": {
            "name": "n_definition",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.t_in": {
            "name": "t_in",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.n_next": {
            "name": "n_next",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.text": {
            "name": "text",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.full_text": {
            "name": "full_text",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.full_width": {
            "name": "full_width",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.offset_range": {
            "name": "offset_range",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefExpr.children": {
            "name": "children",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "IfExpr.t_if": {
            "name": "t_if",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_if_expr": {
            "name": "n_if_expr",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_then": {
            "name": "t_then",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_then_expr": {
            "name": "n_then_expr",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_else": {
            "name": "t_else",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.n_else_expr": {
            "name": "n_else_expr",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.t_endif": {
            "name": "t_endif",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.text": {
            "name": "text",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.full_text": {
            "name": "full_text",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.full_width": {
            "name": "full_width",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.offset_range": {
            "name": "offset_range",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfExpr.children": {
            "name": "children",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "IdentifierExpr.t_identifier": {
            "name": "t_identifier",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.text": {
            "name": "text",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.full_text": {
            "name": "full_text",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.full_width": {
            "name": "full_width",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.offset_range": {
            "name": "offset_range",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentifierExpr.children": {
            "name": "children",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.__init__": {
            "name": "__init__",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "IntLiteralExpr.t_int_literal": {
            "name": "t_int_literal",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.text": {
            "name": "text",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.full_text": {
            "name": "full_text",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.full_width": {
            "name": "full_width",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.offset_range": {
            "name": "offset_range",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntLiteralExpr.children": {
            "name": "children",
            "location": 653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.__init__": {
            "name": "__init__",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "StringLiteralExpr.t_string_literal": {
            "name": "t_string_literal",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.text": {
            "name": "text",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.full_text": {
            "name": "full_text",
            "location": 674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.full_width": {
            "name": "full_width",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.offset_range": {
            "name": "offset_range",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringLiteralExpr.children": {
            "name": "children",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.__init__": {
            "name": "__init__",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "BinaryExpr.n_lhs": {
            "name": "n_lhs",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.t_operator": {
            "name": "t_operator",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.n_rhs": {
            "name": "n_rhs",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.text": {
            "name": "text",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.full_text": {
            "name": "full_text",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.full_width": {
            "name": "full_width",
            "location": 744,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.offset_range": {
            "name": "offset_range",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.children": {
            "name": "children",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "Argument.n_expr": {
            "name": "n_expr",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.t_comma": {
            "name": "t_comma",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.text": {
            "name": "text",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.full_text": {
            "name": "full_text",
            "location": 788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.full_width": {
            "name": "full_width",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.offset_range": {
            "name": "offset_range",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.children": {
            "name": "children",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.__init__": {
            "name": "__init__",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "ArgumentList.t_lparen": {
            "name": "t_lparen",
            "location": 815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.arguments": {
            "name": "arguments",
            "location": 819,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.t_rparen": {
            "name": "t_rparen",
            "location": 835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.text": {
            "name": "text",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.full_text": {
            "name": "full_text",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.full_width": {
            "name": "full_width",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.offset_range": {
            "name": "offset_range",
            "location": 851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentList.children": {
            "name": "children",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.__init__": {
            "name": "__init__",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "origin": [],
                "offset": []
            }
        },
        "FunctionCallExpr.n_callee": {
            "name": "n_callee",
            "location": 875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.n_argument_list": {
            "name": "n_argument_list",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.text": {
            "name": "text",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.full_text": {
            "name": "full_text",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.full_width": {
            "name": "full_width",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.offset_range": {
            "name": "offset_range",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallExpr.children": {
            "name": "children",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/repl.py": {
        "interact": {
            "name": "interact",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_file": {
            "name": "run_file",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "file_info": []
            }
        },
        "compile_file": {
            "name": "compile_file",
            "location": 61,
            "return": [
                "Tuple[(Optional[str], list)]"
            ],
            "arguments": {
                "file_info": []
            }
        },
        "has_fatal_error": {
            "name": "has_fatal_error",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "errors": []
            }
        },
        "print_errors": {
            "name": "print_errors",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "errors": []
            }
        },
        "PytchRepl.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PytchRepl.push": {
            "name": "push",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        }
    },
    "pytch-master/pytch/utils.py": {
        "splitlines": {
            "name": "splitlines",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "FileInfo.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileInfo.get_position_for_offset": {
            "name": "get_position_for_offset",
            "location": 40,
            "return": [
                "Position"
            ],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "FileInfo.get_range_from_offset_range": {
            "name": "get_range_from_offset_range",
            "location": 62,
            "return": [
                "Range"
            ],
            "arguments": {
                "self": [],
                "offset_range": []
            }
        }
    },
    "pytch-master/pytch/__init__.py": {},
    "pytch-master/pytch/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 20,
            "return": [],
            "arguments": {
                "source_files": [],
                "dump_tree": []
            }
        },
        "run": {
            "name": "run",
            "location": 44,
            "return": [],
            "arguments": {
                "source_file": []
            }
        },
        "repl": {
            "name": "repl",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "pytch-master/pytch/codegen/py3ast.py": {
        "PyExpr.compile": {
            "name": "compile",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyUnavailableExpr.compile": {
            "name": "compile",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyIdentifierExpr.compile": {
            "name": "compile",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyLiteralExpr.compile": {
            "name": "compile",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyArgument.compile": {
            "name": "compile",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyFunctionCallExpr.compile": {
            "name": "compile",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyBinaryExpr.compile": {
            "name": "compile",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyStmt.compile": {
            "name": "compile",
            "location": 80,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyIndentedStmt.compile": {
            "name": "compile",
            "location": 93,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyAssignmentStmt.compile": {
            "name": "compile",
            "location": 102,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyReturnStmt.compile": {
            "name": "compile",
            "location": 110,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyIfStmt.compile": {
            "name": "compile",
            "location": 120,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyParameter.compile": {
            "name": "compile",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyFunctionStmt.compile": {
            "name": "compile",
            "location": 149,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyExprStmt.compile": {
            "name": "compile",
            "location": 165,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/codegen/__init__.py": {
        "compile_expr": {
            "name": "compile_expr",
            "location": 144,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "expr": []
            }
        },
        "compile_expr_target": {
            "name": "compile_expr_target",
            "location": 188,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "expr": [],
                "target": [],
                "preferred_name": []
            }
        },
        "compile_let_expr": {
            "name": "compile_let_expr",
            "location": 243,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [],
                "let_expr": [],
                "target": []
            }
        },
        "compile_def_expr": {
            "name": "compile_def_expr",
            "location": 268,
            "return": [
                "Tuple[(Any, Any, list)]"
            ],
            "arguments": {
                "env": [],
                "def_expr": [],
                "target": []
            }
        },
        "compile_if_expr": {
            "name": "compile_if_expr",
            "location": 338,
            "return": [
                "Tuple[(Any, Union[(pytch.codegen.py3ast.PyIdentifierExpr, pytch.codegen.py3ast.PyUnavailableExpr, _T2)], Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "if_expr": [],
                "target": [
                    "_T2@@"
                ]
            }
        },
        "compile_assign_to_pattern": {
            "name": "compile_assign_to_pattern",
            "location": 404,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "expr": [],
                "pattern": []
            }
        },
        "compile_function_call_expr": {
            "name": "compile_function_call_expr",
            "location": 431,
            "return": [
                "Tuple[(Any, Union[(pytch.codegen.py3ast.PyFunctionCallExpr, pytch.codegen.py3ast.PyUnavailableExpr)], Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "function_call_expr": []
            }
        },
        "compile_binary_expr": {
            "name": "compile_binary_expr",
            "location": 465,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "binary_expr": []
            }
        },
        "compile_identifier_expr": {
            "name": "compile_identifier_expr",
            "location": 495,
            "return": [
                "Tuple[(_T0, Union[(pytch.codegen.py3ast.PyIdentifierExpr, pytch.codegen.py3ast.PyUnavailableExpr)], List[nothing])]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "identifier_expr": []
            }
        },
        "compile_int_literal_expr": {
            "name": "compile_int_literal_expr",
            "location": 519,
            "return": [
                "Tuple[(_T0, Union[(pytch.codegen.py3ast.PyLiteralExpr, pytch.codegen.py3ast.PyUnavailableExpr)], List[pytch.codegen.py3ast.PyAssignmentStmt])]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "int_literal_expr": [],
                "target": []
            }
        },
        "compile_string_literal_expr": {
            "name": "compile_string_literal_expr",
            "location": 535,
            "return": [
                "Tuple[(_T0, Union[(pytch.codegen.py3ast.PyLiteralExpr, pytch.codegen.py3ast.PyUnavailableExpr)], List[pytch.codegen.py3ast.PyAssignmentStmt])]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "string_literal_expr": [],
                "target": []
            }
        },
        "codegen": {
            "name": "codegen",
            "location": 550,
            "return": [
                "Codegenation"
            ],
            "arguments": {
                "syntax_tree": [],
                "bindation": [],
                "typeation": []
            }
        },
        "Scope.update": {
            "name": "update",
            "location": 46,
            "return": [
                "_TScope@@Scope@@"
            ],
            "arguments": {
                "self": [
                    "_TScope@@Scope@@"
                ]
            }
        },
        "Scope.empty": {
            "name": "empty",
            "location": 50,
            "return": [
                "Scope"
            ],
            "arguments": {}
        },
        "Env._update": {
            "name": "_update",
            "location": 68,
            "return": [
                "_TEnv@@Env@@"
            ],
            "arguments": {
                "self": [
                    "_TEnv@@Env@@"
                ]
            }
        },
        "Env.push_scope": {
            "name": "push_scope",
            "location": 71,
            "return": [
                "_TEnv@@Env@@"
            ],
            "arguments": {
                "self": [
                    "_TEnv@@Env@@"
                ]
            }
        },
        "Env.pop_scope": {
            "name": "pop_scope",
            "location": 81,
            "return": [
                "_TEnv@@Env@@"
            ],
            "arguments": {
                "self": [
                    "_TEnv@@Env@@"
                ]
            }
        },
        "Env.add_binding": {
            "name": "add_binding",
            "location": 85,
            "return": [
                "Tuple[(Env, nothing)]"
            ],
            "arguments": {
                "self": [],
                "variable_pattern": [],
                "preferred_name": []
            }
        },
        "Env.make_temporary": {
            "name": "make_temporary",
            "location": 100,
            "return": [
                "Tuple[(Env, nothing)]"
            ],
            "arguments": {
                "self": [],
                "preferred_name": []
            }
        },
        "Env.lookup_binding": {
            "name": "lookup_binding",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "variable_pattern": []
            }
        },
        "Env._get_name": {
            "name": "_get_name",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "preferred_name": []
            }
        },
        "Env._suggest_names": {
            "name": "_suggest_names",
            "location": 124,
            "return": [
                "Generator[(nothing, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "preferred_name": []
            }
        },
        "Codegenation.get_compiled_output": {
            "name": "get_compiled_output",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/typesystem/builtins.py": {
        "_make_print": {
            "name": "_make_print",
            "location": 53,
            "return": [
                "pytch.typesystem.types.FunctionTy"
            ],
            "arguments": {}
        }
    },
    "pytch-master/pytch/typesystem/judgments.py": {},
    "pytch-master/pytch/typesystem/reason.py": {
        "Reason.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoReason.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinReason.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidSyntaxReason.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EqualTysReason.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstantiateExistentialReason.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtypeOfObjectReason.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubtypeOfUnboundedGenericReason.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoneIsSubtypeOfVoidReason.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/pytch/typesystem/typecheck.py": {
        "tys_equal": {
            "name": "tys_equal",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "lhs": [],
                "rhs": []
            }
        },
        "do_infer": {
            "name": "do_infer",
            "location": 196,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "ctx": [
                    "_T1@@"
                ],
                "expr": []
            }
        },
        "infer": {
            "name": "infer",
            "location": 298,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [],
                "ctx": [],
                "expr": []
            }
        },
        "infer_function_definition": {
            "name": "infer_function_definition",
            "location": 304,
            "return": [
                "Tuple[(Any, Any, Union[(pytch.typesystem.types.BaseTy, pytch.typesystem.types.FunctionTy)])]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "ctx": [],
                "expr": []
            }
        },
        "function_application_infer": {
            "name": "function_application_infer",
            "location": 337,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [],
                "ctx": [],
                "ty": [],
                "function_call_expr": []
            }
        },
        "check_lambda": {
            "name": "check_lambda",
            "location": 399,
            "return": [
                "NoReturn"
            ],
            "arguments": {}
        },
        "infer_lambda": {
            "name": "infer_lambda",
            "location": 411,
            "return": [
                "Tuple[(Any, Any, pytch.typesystem.types.FunctionTy)]"
            ],
            "arguments": {
                "env": [],
                "ctx": [],
                "parameters": [],
                "body": []
            }
        },
        "check": {
            "name": "check",
            "location": 464,
            "return": [
                "Any"
            ],
            "arguments": {
                "env": [],
                "ctx": [],
                "expr": [],
                "ty": []
            }
        },
        "check_subtype": {
            "name": "check_subtype",
            "location": 578,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "ctx": [
                    "_T1@@"
                ],
                "lhs": [],
                "rhs": []
            }
        },
        "instantiate_lhs_existential": {
            "name": "instantiate_lhs_existential",
            "location": 636,
            "return": [
                "Tuple[(_T0, Any, pytch.typesystem.reason.InstantiateExistentialReason)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "ctx": [],
                "lhs": [],
                "rhs": []
            }
        },
        "instantiate_rhs_existential": {
            "name": "instantiate_rhs_existential",
            "location": 648,
            "return": [
                "Tuple[(_T0, Any, pytch.typesystem.reason.InstantiateExistentialReason)]"
            ],
            "arguments": {
                "env": [
                    "_T0@@"
                ],
                "ctx": [],
                "lhs": [],
                "rhs": []
            }
        },
        "typecheck": {
            "name": "typecheck",
            "location": 660,
            "return": [
                "Typeation"
            ],
            "arguments": {
                "file_info": [],
                "syntax_tree": [],
                "bindation": [],
                "global_scope": []
            }
        },
        "Env.get_range_for_node": {
            "name": "get_range_for_node",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Env.add_error": {
            "name": "add_error",
            "location": 74,
            "return": [
                "_TEnv@@Env@@"
            ],
            "arguments": {
                "self": [
                    "_TEnv@@Env@@"
                ],
                "error": []
            }
        },
        "TypingContext.add_judgment": {
            "name": "add_judgment",
            "location": 83,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "judgment": []
            }
        },
        "TypingContext.ty_to_string": {
            "name": "ty_to_string",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ty": []
            }
        },
        "TypingContext.take_until_before_judgment": {
            "name": "take_until_before_judgment",
            "location": 92,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "judgment": []
            }
        },
        "TypingContext.apply_as_substitution": {
            "name": "apply_as_substitution",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ty": []
            }
        },
        "TypingContext.instantiate_existential": {
            "name": "instantiate_existential",
            "location": 140,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "existential_ty_var": [],
                "to": []
            }
        },
        "TypingContext.record_infers": {
            "name": "record_infers",
            "location": 153,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "expr": [],
                "ty": []
            }
        },
        "TypingContext.get_infers": {
            "name": "get_infers",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TypingContext.add_pattern_ty": {
            "name": "add_pattern_ty",
            "location": 159,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "pattern": [],
                "ty": []
            }
        },
        "TypingContext.get_pattern_ty": {
            "name": "get_pattern_ty",
            "location": 163,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "TypingContext.push_existential_ty_var_marker": {
            "name": "push_existential_ty_var_marker",
            "location": 170,
            "return": [
                "_TTypingContext@@TypingContext@@"
            ],
            "arguments": {
                "self": [
                    "_TTypingContext@@TypingContext@@"
                ],
                "existential_ty_var": []
            }
        },
        "TypingContext.pop_existential_ty_var_marker": {
            "name": "pop_existential_ty_var_marker",
            "location": 180,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "existential_ty_var": []
            }
        },
        "infer_function_definition.error": {
            "name": "error",
            "location": 307,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "TypingContext.instantiate_existential.f": {
            "name": "f",
            "location": 143,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TypingContext.apply_as_substitution.is_substitution_for_existential_ty_variable": {
            "name": "is_substitution_for_existential_ty_variable",
            "location": 107,
            "return": [],
            "arguments": {
                "judgment": []
            }
        }
    },
    "pytch-master/pytch/typesystem/types.py": {
        "Ty.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Ty.__neq__": {
            "name": "__neq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pytch-master/pytch/typesystem/__init__.py": {},
    "pytch-master/resources/syntax-highlighting/piro/parser.py": {
        "parse": {
            "name": "parse",
            "location": 44,
            "return": [
                "Schema"
            ],
            "arguments": {
                "input_data": []
            }
        },
        "parse_metadata": {
            "name": "parse_metadata",
            "location": 53,
            "return": [
                "Metadata"
            ],
            "arguments": {
                "input_data": []
            }
        },
        "parse_scopes": {
            "name": "parse_scopes",
            "location": 59,
            "return": [
                "Dict[(Any, Scope)]"
            ],
            "arguments": {
                "input_data": []
            }
        },
        "parse_contexts": {
            "name": "parse_contexts",
            "location": 68,
            "return": [
                "Dict[(Any, List[ContextRule])]"
            ],
            "arguments": {
                "input_data": []
            }
        },
        "parse_context_rule": {
            "name": "parse_context_rule",
            "location": 78,
            "return": [
                "ContextRule"
            ],
            "arguments": {
                "rule_data": []
            }
        },
        "parse_regex": {
            "name": "parse_regex",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "regex": []
            }
        },
        "Schema.get_scope": {
            "name": "get_scope",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "scope_name": [],
                "context_name": []
            }
        }
    },
    "pytch-master/resources/syntax-highlighting/piro/__init__.py": {},
    "pytch-master/resources/syntax-highlighting/piro/__main__.py": {
        "cli": {
            "name": "cli",
            "location": 25,
            "return": [],
            "arguments": {
                "input_file": [],
                "output_format": []
            }
        }
    },
    "pytch-master/resources/syntax-highlighting/piro/backend/pygments.py": {
        "compile_pygments": {
            "name": "compile_pygments",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": []
            }
        },
        "get_class_name": {
            "name": "get_class_name",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "schema": []
            }
        },
        "get_lexer_name": {
            "name": "get_lexer_name",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": []
            }
        },
        "get_filenames": {
            "name": "get_filenames",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "schema": []
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": []
            }
        },
        "get_pygments_context_rules": {
            "name": "get_pygments_context_rules",
            "location": 75,
            "return": [
                "Dict[(Union[(str, _T1)], List[tuple])]"
            ],
            "arguments": {
                "schema": [],
                "context_name": [
                    "_T1@@"
                ],
                "context_rules": []
            }
        },
        "get_pygments_scope_name": {
            "name": "get_pygments_scope_name",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": []
            }
        }
    },
    "pytch-master/resources/syntax-highlighting/piro/backend/vscode.py": {
        "compile_vscode": {
            "name": "compile_vscode",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "schema": []
            }
        },
        "compile_contexts": {
            "name": "compile_contexts",
            "location": 20,
            "return": [
                "Dict[(Any, Dict[(str, List[Dict[(str, Any)]])])]"
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "pytch-master/resources/syntax-highlighting/piro/backend/__init__.py": {},
    "pytch-master/resources/website/conf.py": {},
    "pytch-master/resources/website/ext/designnote.py": {
        "visit_design_note": {
            "name": "visit_design_note",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "depart_design_note": {
            "name": "depart_design_note",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "app": []
            }
        },
        "DesignNoteDirective.run": {
            "name": "run",
            "location": 13,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytch-master/resources/website/ext/ebnflexer.py": {
        "setup": {
            "name": "setup",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "pytch-master/resources/website/ext/githubpagescname.py": {
        "create_cnames": {
            "name": "create_cnames",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "env": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "pytch-master/resources/website/ext/pytchlexer.py": {
        "setup": {
            "name": "setup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "pytch-master/test/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        }
    },
    "pytch-master/test/test_binder.py": {
        "test_binder": {
            "name": "test_binder",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binder_error": {
            "name": "test_binder_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binding_defs": {
            "name": "test_binding_defs",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytch-master/test/test_codegen.py": {
        "get_codegen_tests": {
            "name": "get_codegen_tests",
            "location": 11,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "make_result": {
            "name": "make_result",
            "location": 15,
            "return": [
                "test.utils.CaseResult"
            ],
            "arguments": {
                "input_filename": [],
                "source_code": [],
                "capsys": []
            }
        },
        "test_codegen": {
            "name": "test_codegen",
            "location": 37,
            "return": [],
            "arguments": {
                "test_case_info": []
            }
        },
        "test_generate_codegen_tests": {
            "name": "test_generate_codegen_tests",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "pytch-master/test/test_cstquery.py": {
        "test_cst_query": {
            "name": "test_cst_query",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cst_query_errors": {
            "name": "test_cst_query_errors",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytch-master/test/test_errors.py": {
        "lines_to_string": {
            "name": "lines_to_string",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "lines": []
            }
        },
        "test_print_error": {
            "name": "test_print_error",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_at_single_point": {
            "name": "test_error_at_single_point",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_diagnostics_across_multiple_files": {
            "name": "test_diagnostics_across_multiple_files",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_note_with_no_range": {
            "name": "test_note_with_no_range",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regression1_note_with_no_range": {
            "name": "test_regression1_note_with_no_range",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regression2": {
            "name": "test_regression2",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrap_message": {
            "name": "test_wrap_message",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_diagnostic_lines_to_insert": {
            "name": "test_get_diagnostic_lines_to_insert",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ranges_overlap": {
            "name": "test_ranges_overlap",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_group_by_pred": {
            "name": "test_group_by_pred",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_contexts": {
            "name": "test_merge_contexts",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytch-master/test/test_integ.py": {
        "get_integ_tests": {
            "name": "get_integ_tests",
            "location": 10,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "make_result": {
            "name": "make_result",
            "location": 14,
            "return": [
                "test.utils.CaseResult"
            ],
            "arguments": {
                "input_filename": [],
                "source_code": [],
                "capsys": []
            }
        },
        "test_integ": {
            "name": "test_integ",
            "location": 23,
            "return": [],
            "arguments": {
                "capsys": [],
                "test_case_info": []
            }
        },
        "test_generate_integ_tests": {
            "name": "test_generate_integ_tests",
            "location": 30,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "pytch-master/test/test_lexer.py": {
        "render_token_stream": {
            "name": "render_token_stream",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "get_lexer_tests": {
            "name": "get_lexer_tests",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "make_result": {
            "name": "make_result",
            "location": 31,
            "return": [
                "test.utils.CaseResult"
            ],
            "arguments": {
                "input_filename": [],
                "source_code": [],
                "capsys": []
            }
        },
        "test_lexer": {
            "name": "test_lexer",
            "location": 51,
            "return": [],
            "arguments": {
                "test_case_info": []
            }
        },
        "test_generate_lexer_tests": {
            "name": "test_generate_lexer_tests",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "pytch-master/test/test_parser.py": {
        "get_parser_tests": {
            "name": "get_parser_tests",
            "location": 12,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "make_result": {
            "name": "make_result",
            "location": 16,
            "return": [
                "test.utils.CaseResult"
            ],
            "arguments": {
                "input_filename": [],
                "source_code": [],
                "capsys": []
            }
        },
        "test_parser": {
            "name": "test_parser",
            "location": 38,
            "return": [],
            "arguments": {
                "test_case_info": []
            }
        },
        "test_generate_parser_tests": {
            "name": "test_generate_parser_tests",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "pytch-master/test/test_typesystem.py": {
        "get_typesystem_tests": {
            "name": "get_typesystem_tests",
            "location": 44,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {}
        },
        "make_result": {
            "name": "make_result",
            "location": 48,
            "return": [
                "test.utils.CaseResult"
            ],
            "arguments": {
                "input_filename": [],
                "source_code": [],
                "capsys": []
            }
        },
        "test_typesystem": {
            "name": "test_typesystem",
            "location": 108,
            "return": [],
            "arguments": {
                "test_case_info": []
            }
        },
        "test_generate_typesystem_tests": {
            "name": "test_generate_typesystem_tests",
            "location": 119,
            "return": [],
            "arguments": {}
        }
    },
    "pytch-master/test/test_utils.py": {
        "slower_get_position_for_offset": {
            "name": "slower_get_position_for_offset",
            "location": 4,
            "return": [
                "pytch.utils.Position"
            ],
            "arguments": {
                "source_code": [],
                "offset": []
            }
        },
        "test_fileinfo_get_position_for_offset": {
            "name": "test_fileinfo_get_position_for_offset",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fileinfo_get_position_for_offset_exclusive_end": {
            "name": "test_fileinfo_get_position_for_offset_exclusive_end",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fileinfo_get_position_for_offset_exclusive_end_newline": {
            "name": "test_fileinfo_get_position_for_offset_exclusive_end_newline",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fileinfo_get_range_from_offset_range": {
            "name": "test_fileinfo_get_range_from_offset_range",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytch-master/test/utils.py": {
        "find_tests": {
            "name": "find_tests",
            "location": 84,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "dir_name": [],
                "input_extension": [],
                "output_extension": [],
                "error_extension": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": [],
                "make_result": [],
                "capsys": []
            }
        },
        "get_syntax_tree": {
            "name": "get_syntax_tree",
            "location": 157,
            "return": [
                "Tuple[(pytch.redcst.SyntaxTree, Any)]"
            ],
            "arguments": {
                "file_info": []
            }
        },
        "CaseInfo.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_filename": [],
                "output_filename": [],
                "error_filename": []
            }
        },
        "CaseInfo.name": {
            "name": "name",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.input_filename": {
            "name": "input_filename",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.input": {
            "name": "input",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.output_filename": {
            "name": "output_filename",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.output": {
            "name": "output",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.error_filename": {
            "name": "error_filename",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.error": {
            "name": "error",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInfo.xfail": {
            "name": "xfail",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseResult.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [],
                "error": []
            }
        },
        "CaseResult.output": {
            "name": "output",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseResult.error": {
            "name": "error",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generate.log": {
            "name": "log",
            "location": 127,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "pytch-master/test/__init__.py": {}
}
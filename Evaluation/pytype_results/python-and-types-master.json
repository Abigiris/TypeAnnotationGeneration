{
    "python-and-types-master/decorators.py": {
        "make_bold": {
            "name": "make_bold",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "func": []
            }
        },
        "say_hello": {
            "name": "say_hello",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "make_bold.func_wrapper": {
            "name": "func_wrapper",
            "location": 6,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "python-and-types-master/generators.py": {
        "rock_paper_scissor": {
            "name": "rock_paper_scissor",
            "location": 1,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "infinite_generator": {
            "name": "infinite_generator",
            "location": 12,
            "return": [
                "Generator[(int, Any, Any)]"
            ],
            "arguments": {}
        }
    },
    "python-and-types-master/main.py": {
        "h1": {
            "name": "h1",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "python-and-types-master/partials.py": {
        "add": {
            "name": "add",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "python-and-types-master/toolz_demo.py": {
        "add": {
            "name": "add",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "double": {
            "name": "double",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": []
            }
        },
        "curried_sum": {
            "name": "curried_sum",
            "location": 15,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "is_eaten": {
            "name": "is_eaten",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "food": [],
                "eater": []
            }
        }
    }
}
{
    "python-aws-lambda-handlers-master/setup.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/errors.py": {
        "LambdaError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/types.py": {
        "APIGatewayProxyResult.asdict": {
            "name": "asdict",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/version.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/__init__.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/format.py": {
        "format.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": []
            }
        },
        "format.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "Format"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/input_format.py": {
        "json": {
            "name": "json",
            "location": 12,
            "return": [],
            "arguments": {
                "content": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/output_format.py": {
        "json": {
            "name": "json",
            "location": 9,
            "return": [],
            "arguments": {
                "content": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/__init__.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/tests/test_input_format.py": {
        "TestInputFormatJSON.test_valid_string_dict": {
            "name": "test_valid_string_dict",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_valid_int_dict": {
            "name": "test_valid_int_dict",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_valid_bool_dict": {
            "name": "test_valid_bool_dict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_valid_nested_dict": {
            "name": "test_valid_nested_dict",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_empty_content": {
            "name": "test_empty_content",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_random_string": {
            "name": "test_random_string",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_empty_string": {
            "name": "test_empty_string",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInputFormatJSON.test_none": {
            "name": "test_none",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/formatters/tests/test_output_format.py": {
        "TestOutputFormatJSON.test_valid_string_dict": {
            "name": "test_valid_string_dict",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_valid_int_dict": {
            "name": "test_valid_int_dict",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_valid_bool_dict": {
            "name": "test_valid_bool_dict",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_valid_nested_dict": {
            "name": "test_valid_nested_dict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_empty_content": {
            "name": "test_empty_content",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_random_string": {
            "name": "test_random_string",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_empty_string": {
            "name": "test_empty_string",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_none": {
            "name": "test_none",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_bool": {
            "name": "test_bool",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutputFormatJSON.test_int": {
            "name": "test_int",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/event_handler.py": {
        "EventHandler.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_format": [],
                "output_format": []
            }
        },
        "EventHandler.before": {
            "name": "before",
            "location": 32,
            "return": [
                "Tuple[(Any, _T1)]"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "EventHandler.after": {
            "name": "after",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/http_handler.py": {
        "HTTPHandler.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cors": [],
                "input_format": [],
                "output_format": []
            }
        },
        "HTTPHandler.after": {
            "name": "after",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "HTTPHandler.on_exception": {
            "name": "on_exception",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "HTTPHandler.format_input": {
            "name": "format_input",
            "location": 55,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "_T0@@"
                ]
            }
        },
        "HTTPHandler.format_output": {
            "name": "format_output",
            "location": 64,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "_T0@@"
                ]
            }
        },
        "HTTPHandler._create_response": {
            "name": "_create_response",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "HTTPHandler._create_headers": {
            "name": "_create_headers",
            "location": 74,
            "return": [
                "Optional[Union[(dict, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "_T0@@"
                ]
            }
        },
        "HTTPHandler._handle_error": {
            "name": "_handle_error",
            "location": 84,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "error": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/lambda_handler.py": {
        "LambdaHandler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "LambdaHandler._number_of_arguments": {
            "name": "_number_of_arguments",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LambdaHandler.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "LambdaHandler._call_handler": {
            "name": "_call_handler",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "handler_self": [],
                "handler": [],
                "event": [],
                "context": []
            }
        },
        "LambdaHandler.before": {
            "name": "before",
            "location": 48,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "_T0@@"
                ],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "LambdaHandler.after": {
            "name": "after",
            "location": 52,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "_T0@@"
                ]
            }
        },
        "LambdaHandler.on_exception": {
            "name": "on_exception",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "LambdaHandler.__call__.wrapper": {
            "name": "wrapper",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/__init__.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/mixins/formatting_mixin.py": {
        "FormattingMixin.format_input": {
            "name": "format_input",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FormattingMixin.format_output": {
            "name": "format_output",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/mixins/__init__.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/tests/test_event_handler.py": {
        "TestEventHandlerDefaults.handler": {
            "name": "handler",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEventHandlerDefaults.test_empty_body_validation": {
            "name": "test_empty_body_validation",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestEventHandlerDefaults.test_invalid_body_validation": {
            "name": "test_invalid_body_validation",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestEventHandlerDefaults.handler.handler": {
            "name": "handler",
            "location": 12,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/tests/test_http_handler.py": {
        "pipe_input": {
            "name": "pipe_input",
            "location": 47,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "pipe_output": {
            "name": "pipe_output",
            "location": 53,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "TestHTTPHandlerDefaults.handler": {
            "name": "handler",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerDefaults.test_empty_body_validation": {
            "name": "test_empty_body_validation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerDefaults.test_none_body_validation": {
            "name": "test_none_body_validation",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerDefaults.test_invalid_body_validation": {
            "name": "test_invalid_body_validation",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerDefaults.test_handler_response": {
            "name": "test_handler_response",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerCustomBodyFormat.handler": {
            "name": "handler",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerCustomBodyFormat.test_custom_body_formatting": {
            "name": "test_custom_body_formatting",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerCORS.handler": {
            "name": "handler",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerCORS.test_custom_cors_headers": {
            "name": "test_custom_cors_headers",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerCustomOutputFormat.handler": {
            "name": "handler",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerCustomOutputFormat.test_custom_output_format": {
            "name": "test_custom_output_format",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBodyDefault.handler": {
            "name": "handler",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBodyDefault.test_format_no_body": {
            "name": "test_format_no_body",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBody.handler": {
            "name": "handler",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBody.test_format_no_body": {
            "name": "test_format_no_body",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "TestHTTPHandlerDefaults.handler.handler": {
            "name": "handler",
            "location": 14,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestHTTPHandlerCustomBodyFormat.handler.handler": {
            "name": "handler",
            "location": 68,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestHTTPHandlerCORS.handler.handler": {
            "name": "handler",
            "location": 87,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestHTTPHandlerCustomOutputFormat.handler.handler": {
            "name": "handler",
            "location": 109,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBodyDefault.handler.handler": {
            "name": "handler",
            "location": 127,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestHTTPHandlerOutputFormatNoBody.handler.handler": {
            "name": "handler",
            "location": 143,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/handlers/tests/test_lambda_handler.py": {
        "function_handler": {
            "name": "function_handler",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "method_handler": {
            "name": "method_handler",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "EventAwareException.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "event": []
            }
        },
        "CallOrderAwareHandler.before": {
            "name": "before",
            "location": 18,
            "return": [
                "Tuple[(_T0, _T1)]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "_T0@@"
                ],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "CallOrderAwareHandler.after": {
            "name": "after",
            "location": 22,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "_T0@@"
                ]
            }
        },
        "CallOrderAwareHandler.on_exception": {
            "name": "on_exception",
            "location": 26,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "function_handler.handler": {
            "name": "handler",
            "location": 37,
            "return": [],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "TestLambdaHandlerDecorateFunction.event": {
            "name": "event",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaHandlerDecorateFunction.test_call_order": {
            "name": "test_call_order",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_handler": [],
                "event": []
            }
        },
        "TestLambdaHandlerDecorateFunction.test_call_exception": {
            "name": "test_call_exception",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_handler": [],
                "event": []
            }
        },
        "TestLambdaHandlerDecorateMethod.event": {
            "name": "event",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaHandlerDecorateMethod.test_call_order": {
            "name": "test_call_order",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_handler": [],
                "event": []
            }
        },
        "TestLambdaHandlerDecorateMethod.test_call_exception": {
            "name": "test_call_exception",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_handler": [],
                "event": []
            }
        },
        "method_handler.Adapter.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "context": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/response/cors_headers.py": {
        "CORSHeaders.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [],
                "credentials": []
            }
        },
        "CORSHeaders.create_headers": {
            "name": "create_headers",
            "location": 13,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/response/response_builder.py": {
        "ok": {
            "name": "ok",
            "location": 10,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "result": []
            }
        },
        "created": {
            "name": "created",
            "location": 15,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "result": []
            }
        },
        "no_content": {
            "name": "no_content",
            "location": 20,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 25,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "description": []
            }
        },
        "bad_request": {
            "name": "bad_request",
            "location": 31,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "description": []
            }
        },
        "forbidden": {
            "name": "forbidden",
            "location": 37,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "description": []
            }
        },
        "bad_implementation": {
            "name": "bad_implementation",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "description": []
            }
        },
        "internal_server_error": {
            "name": "internal_server_error",
            "location": 48,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "description": []
            }
        },
        "_build_response": {
            "name": "_build_response",
            "location": 54,
            "return": [
                "lambda_handlers.types.APIGatewayProxyResult"
            ],
            "arguments": {
                "result": [],
                "status_code": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/response/__init__.py": {},
    "python-aws-lambda-handlers-master/lambda_handlers/response/tests/test_cors_headers.py": {
        "TestCORSHeaders.test_create_headers": {
            "name": "test_create_headers",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [],
                "credentials": [],
                "expected": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/response/tests/test_module_aliases.py": {
        "TestModuleAliases.test_alias": {
            "name": "test_alias",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "alias": [],
                "target": []
            }
        }
    },
    "python-aws-lambda-handlers-master/lambda_handlers/response/tests/test_response_builder.py": {
        "TestResponseBuilder.test_builder_with_description": {
            "name": "test_builder_with_description",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "description": [],
                "builder": [],
                "status_code": [],
                "body": []
            }
        },
        "TestResponseBuilder.test_builder_without_description": {
            "name": "test_builder_without_description",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "builder": [],
                "status_code": [],
                "body": []
            }
        }
    }
}
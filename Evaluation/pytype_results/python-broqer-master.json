{
    "python-broqer-master/setup.py": {},
    "python-broqer-master/broqer/coro_queue.py": {
        "wrap_coro": {
            "name": "wrap_coro",
            "location": 12,
            "return": [],
            "arguments": {
                "coro": [],
                "unpack": []
            }
        },
        "CoroQueue.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "coro": [],
                "mode": []
            }
        },
        "CoroQueue.schedule": {
            "name": "schedule",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CoroQueue._start_task": {
            "name": "_start_task",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "future": []
            }
        },
        "CoroQueue._handle_done": {
            "name": "_handle_done",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "result_future": [],
                "task": []
            }
        }
    },
    "python-broqer-master/broqer/disposable.py": {
        "Disposable.dispose": {
            "name": "dispose",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Disposable.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "_TDisposable"
            ],
            "arguments": {
                "self": [
                    "_TDisposable"
                ]
            }
        },
        "Disposable.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "Optional[Type[BaseException]]"
                ],
                "_value": [
                    "Optional[BaseException]"
                ],
                "_traceback": []
            }
        }
    },
    "python-broqer-master/broqer/error_handler.py": {
        "_default_error_callback": {
            "name": "_default_error_callback",
            "location": 11,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "exc_type": [],
                "exc_value": [],
                "exc_traceback": []
            }
        },
        "DefaultErrorHandler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultErrorHandler.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "exc_traceback": []
            }
        },
        "DefaultErrorHandler.set": {
            "name": "set",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_callback": []
            }
        },
        "DefaultErrorHandler.reset": {
            "name": "reset",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/operator.py": {
        "Operator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.originator": {
            "name": "originator",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Operator.subscribe": {
            "name": "subscribe",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": []
            }
        },
        "Operator.unsubscribe": {
            "name": "unsubscribe",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "Operator.notify": {
            "name": "notify",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Operator.emit": {
            "name": "emit",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "MultiOperator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiOperator.subscribe": {
            "name": "subscribe",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": []
            }
        },
        "MultiOperator.unsubscribe": {
            "name": "unsubscribe",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "MultiOperator.notify": {
            "name": "notify",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MultiOperator.emit": {
            "name": "emit",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        }
    },
    "python-broqer-master/broqer/operator_overloading.py": {
        "apply_operator_overloading": {
            "name": "apply_operator_overloading",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "MapConstant.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "value": [],
                "operation": []
            }
        },
        "MapConstant.get": {
            "name": "get",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapConstant.emit": {
            "name": "emit",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "MapConstantReverse.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "value": [],
                "operation": []
            }
        },
        "MapConstantReverse.get": {
            "name": "get",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapConstantReverse.emit": {
            "name": "emit",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "MapUnary.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "operation": []
            }
        },
        "MapUnary.get": {
            "name": "get",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapUnary.emit": {
            "name": "emit",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "_GetAttr.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "attribute_name": []
            }
        },
        "_GetAttr.get": {
            "name": "get",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GetAttr.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_GetAttr.emit": {
            "name": "emit",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "apply_operator_overloading._getattr": {
            "name": "_getattr",
            "location": 159,
            "return": [],
            "arguments": {
                "publisher": [],
                "attribute_name": []
            }
        },
        "apply_operator_overloading._op": {
            "name": "_op",
            "location": 143,
            "return": [],
            "arguments": {
                "operand_left": [],
                "operand_right": [],
                "operation": []
            }
        },
        "apply_operator_overloading._op_unary": {
            "name": "_op_unary",
            "location": 154,
            "return": [],
            "arguments": {
                "operand": [],
                "operation": []
            }
        }
    },
    "python-broqer-master/broqer/publisher.py": {
        "Publisher.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "init": [],
                "type_": []
            }
        },
        "Publisher.subscribe": {
            "name": "subscribe",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": []
            }
        },
        "Publisher.unsubscribe": {
            "name": "unsubscribe",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "Publisher.get": {
            "name": "get",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.notify": {
            "name": "notify",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Publisher.reset_state": {
            "name": "reset_state",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.subscriptions": {
            "name": "subscriptions",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.register_on_subscription_callback": {
            "name": "register_on_subscription_callback",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Publisher.__await__": {
            "name": "__await__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.as_future": {
            "name": "as_future",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [],
                "omit_subscription": [],
                "loop": []
            }
        },
        "Publisher.__bool__": {
            "name": "__bool__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.__iter__": {
            "name": "__iter__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.inherit_type": {
            "name": "inherit_type",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "type_cls": []
            }
        },
        "Publisher.inherited_type": {
            "name": "inherited_type",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.dependencies": {
            "name": "dependencies",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.add_dependencies": {
            "name": "add_dependencies",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Publisher.__or__": {
            "name": "__or__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "operator": []
            }
        },
        "Publisher.__dir__": {
            "name": "__dir__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "subscriber": []
            }
        },
        "SubscriptionDisposable.dispose": {
            "name": "dispose",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.publisher": {
            "name": "publisher",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionDisposable.subscriber": {
            "name": "subscriber",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscriber.py": {
        "Subscriber.emit": {
            "name": "emit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "Subscriber.reset_state": {
            "name": "reset_state",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Optional[Callable[([], None)]]"
                ],
                "loop": [
                    "Optional[asyncio.base_events.BaseEventLoop]"
                ]
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ],
                "args": []
            }
        },
        "Timer.change_arguments": {
            "name": "change_arguments",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Timer.cancel": {
            "name": "cancel",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.end_early": {
            "name": "end_early",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.is_running": {
            "name": "is_running",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer._trigger": {
            "name": "_trigger",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/types.py": {},
    "python-broqer-master/broqer/value.py": {
        "Value.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "init": []
            }
        },
        "Value.emit": {
            "name": "emit",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        }
    },
    "python-broqer-master/broqer/__init__.py": {},
    "python-broqer-master/broqer/op/bitwise.py": {
        "map_bit": {
            "name": "map_bit",
            "location": 95,
            "return": [],
            "arguments": {
                "bit_index": [],
                "value": []
            }
        },
        "BitwiseCombineLatest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "publisher_bit_mapping": [],
                "init": []
            }
        },
        "BitwiseCombineLatest.subscribe": {
            "name": "subscribe",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": []
            }
        },
        "BitwiseCombineLatest.unsubscribe": {
            "name": "unsubscribe",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "BitwiseCombineLatest.get": {
            "name": "get",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitwiseCombineLatest.emit": {
            "name": "emit",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        }
    },
    "python-broqer-master/broqer/op/cache.py": {
        "Cache.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "init": []
            }
        },
        "Cache.get": {
            "name": "get",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cache.emit": {
            "name": "emit",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        }
    },
    "python-broqer-master/broqer/op/combine_latest.py": {
        "build_combine_latest": {
            "name": "build_combine_latest",
            "location": 127,
            "return": [],
            "arguments": {
                "map_": []
            }
        },
        "CombineLatest.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombineLatest.unsubscribe": {
            "name": "unsubscribe",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "CombineLatest.get": {
            "name": "get",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CombineLatest.emit": {
            "name": "emit",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "build_combine_latest._build_combine_latest": {
            "name": "_build_combine_latest",
            "location": 134,
            "return": [],
            "arguments": {
                "map_": []
            }
        },
        "build_combine_latest._build_combine_latest._wrapper": {
            "name": "_wrapper",
            "location": 136,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/filter_.py": {
        "build_filter": {
            "name": "build_filter",
            "location": 143,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "build_filter_factory": {
            "name": "build_filter_factory",
            "location": 159,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Filter.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Filter.emit": {
            "name": "emit",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "EvalTrue.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "EvalTrue.get": {
            "name": "get",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalTrue.emit": {
            "name": "emit",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "EvalFalse.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "EvalFalse.get": {
            "name": "get",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EvalFalse.emit": {
            "name": "emit",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "build_filter._build_filter": {
            "name": "_build_filter",
            "location": 150,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "build_filter_factory._build_filter": {
            "name": "_build_filter",
            "location": 166,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "build_filter_factory._build_filter._wrapper": {
            "name": "_wrapper",
            "location": 168,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/map_.py": {
        "build_map": {
            "name": "build_map",
            "location": 101,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_map_factory": {
            "name": "build_map_factory",
            "location": 117,
            "return": [],
            "arguments": {
                "function": [],
                "unpack": []
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Map.get": {
            "name": "get",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.emit": {
            "name": "emit",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "build_map._build_map": {
            "name": "_build_map",
            "location": 108,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_map_factory._build_map": {
            "name": "_build_map",
            "location": 124,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_map_factory._build_map._wrapper": {
            "name": "_wrapper",
            "location": 126,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/map_async.py": {
        "build_map_async": {
            "name": "build_map_async",
            "location": 151,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_map_async_factory": {
            "name": "build_map_async_factory",
            "location": 172,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "MapAsync.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "MapAsync.emit": {
            "name": "emit",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "MapAsync._done": {
            "name": "_done",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "build_map_async._build_map_async": {
            "name": "_build_map_async",
            "location": 162,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_map_async_factory._build_map_async": {
            "name": "_build_map_async",
            "location": 186,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_map_async_factory._build_map_async._wrapper": {
            "name": "_wrapper",
            "location": 188,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/broqer/op/py_operators.py": {
        "_in": {
            "name": "_in",
            "location": 61,
            "return": [],
            "arguments": {
                "item": [],
                "container": []
            }
        },
        "_all": {
            "name": "_all",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "_any": {
            "name": "_any",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "_bitwise_or": {
            "name": "_bitwise_or",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "_bitwise_and": {
            "name": "_bitwise_and",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "Str.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Bool.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Int.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Repr.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "Len.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": []
            }
        },
        "In.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "container": []
            }
        },
        "All.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Any.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitwiseOr.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitwiseAnd.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/op/throttle.py": {
        "Throttle.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "duration": [],
                "error_callback": [],
                "loop": []
            }
        },
        "Throttle.get": {
            "name": "get",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Throttle.emit": {
            "name": "emit",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "Throttle._delayed_emit_cb": {
            "name": "_delayed_emit_cb",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Throttle.reset": {
            "name": "reset",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/op/__init__.py": {},
    "python-broqer-master/broqer/publishers/poll.py": {
        "PollPublisher.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "poll_cb": [],
                "interval": []
            }
        },
        "PollPublisher.subscribe": {
            "name": "subscribe",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": [],
                "prepend": []
            }
        },
        "PollPublisher.unsubscribe": {
            "name": "unsubscribe",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "subscriber": []
            }
        },
        "PollPublisher._poll": {
            "name": "_poll",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PollPublisher.notify": {
            "name": "notify",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "python-broqer-master/broqer/publishers/__init__.py": {},
    "python-broqer-master/broqer/subscribers/on_emit_future.py": {
        "OnEmitFuture.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "publisher": [],
                "timeout": [],
                "omit_subscription": [],
                "loop": []
            }
        },
        "OnEmitFuture._cleanup": {
            "name": "_cleanup",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "_future": []
            }
        },
        "OnEmitFuture.emit": {
            "name": "emit",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/sink.py": {
        "build_sink": {
            "name": "build_sink",
            "location": 66,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_sink_factory": {
            "name": "build_sink_factory",
            "location": 82,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "sink_property": {
            "name": "sink_property",
            "location": 102,
            "return": [],
            "arguments": {
                "function": [],
                "unpack": []
            }
        },
        "Sink.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Sink.emit": {
            "name": "emit",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "build_sink._build_sink": {
            "name": "_build_sink",
            "location": 73,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_sink_factory._build_sink": {
            "name": "_build_sink",
            "location": 88,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "sink_property.build_sink_property": {
            "name": "build_sink_property",
            "location": 107,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "build_sink_factory._build_sink._wrapper": {
            "name": "_wrapper",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "sink_property.build_sink_property._build_sink": {
            "name": "_build_sink",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/sink_async.py": {
        "build_sink_async": {
            "name": "build_sink_async",
            "location": 61,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_sink_async_factory": {
            "name": "build_sink_async_factory",
            "location": 78,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "sink_async_property": {
            "name": "sink_async_property",
            "location": 109,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "SinkAsync.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "SinkAsync.emit": {
            "name": "emit",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "build_sink_async._build_sink_async": {
            "name": "_build_sink_async",
            "location": 69,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_sink_async_factory._build_sink_async": {
            "name": "_build_sink_async",
            "location": 90,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "sink_async_property.build_sink_async_property": {
            "name": "build_sink_async_property",
            "location": 120,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "build_sink_async_factory._build_sink_async._wrapper": {
            "name": "_wrapper",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "sink_async_property.build_sink_async_property._build_sink_async": {
            "name": "_build_sink_async",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/trace.py": {
        "Trace.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Trace.emit": {
            "name": "emit",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "who": []
            }
        },
        "Trace.set_handler": {
            "name": "set_handler",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "handler": []
            }
        },
        "Trace._trace_handler": {
            "name": "_trace_handler",
            "location": 40,
            "return": [],
            "arguments": {
                "publisher": [],
                "value": [],
                "label": []
            }
        }
    },
    "python-broqer-master/broqer/subscribers/__init__.py": {},
    "python-broqer-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 51,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "ClassDocDocumenter.add_directive_header": {
            "name": "add_directive_header",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "sig": []
            }
        }
    },
    "python-broqer-master/examples/await.py": {},
    "python-broqer-master/examples/from_polling.py": {},
    "python-broqer-master/examples/pipeline.py": {},
    "python-broqer-master/tests/eventloop.py": {
        "_format_handle": {
            "name": "_format_handle",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "handle": []
            }
        },
        "_run_until_complete_cb": {
            "name": "_run_until_complete_cb",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": []
            }
        },
        "isfuture": {
            "name": "isfuture",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "VirtualTimeEventLoop.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.run_forever": {
            "name": "run_forever",
            "location": 54,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.run_until_complete": {
            "name": "run_until_complete",
            "location": 71,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "VirtualTimeEventLoop.stop": {
            "name": "stop",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.close": {
            "name": "close",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.is_closed": {
            "name": "is_closed",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.is_running": {
            "name": "is_running",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.call_later": {
            "name": "call_later",
            "location": 130,
            "return": [
                "asyncio.events.TimerHandle"
            ],
            "arguments": {
                "self": [],
                "delay": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.call_at": {
            "name": "call_at",
            "location": 136,
            "return": [
                "asyncio.events.TimerHandle"
            ],
            "arguments": {
                "self": [],
                "when": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.call_soon": {
            "name": "call_soon",
            "location": 144,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop._call_soon": {
            "name": "_call_soon",
            "location": 150,
            "return": [
                "asyncio.events.Handle"
            ],
            "arguments": {
                "self": [],
                "callback": [],
                "args": []
            }
        },
        "VirtualTimeEventLoop.call_soon_threadsafe": {
            "name": "call_soon_threadsafe",
            "location": 160,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "VirtualTimeEventLoop.time": {
            "name": "time",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.create_future": {
            "name": "create_future",
            "location": 166,
            "return": [
                "asyncio.futures.Future[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop.create_task": {
            "name": "create_task",
            "location": 170,
            "return": [
                "asyncio.tasks.Task"
            ],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "VirtualTimeEventLoop.default_exception_handler": {
            "name": "default_exception_handler",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "VirtualTimeEventLoop.call_exception_handler": {
            "name": "call_exception_handler",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "VirtualTimeEventLoop.get_debug": {
            "name": "get_debug",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._run_once": {
            "name": "_run_once",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._check_closed": {
            "name": "_check_closed",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimeEventLoop._timer_handle_cancelled": {
            "name": "_timer_handle_cancelled",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": []
            }
        }
    },
    "python-broqer-master/tests/helper_multi.py": {
        "check_get_method": {
            "name": "check_get_method",
            "location": 8,
            "return": [],
            "arguments": {
                "operator": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "check_subscription": {
            "name": "check_subscription",
            "location": 45,
            "return": [],
            "arguments": {
                "operator": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 99,
            "return": [],
            "arguments": {
                "operator": []
            }
        }
    },
    "python-broqer-master/tests/helper_single.py": {
        "check_get_method": {
            "name": "check_get_method",
            "location": 8,
            "return": [],
            "arguments": {
                "operator": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "check_subscription": {
            "name": "check_subscription",
            "location": 40,
            "return": [],
            "arguments": {
                "operator": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "check_dependencies": {
            "name": "check_dependencies",
            "location": 86,
            "return": [],
            "arguments": {
                "operator": []
            }
        }
    },
    "python-broqer-master/tests/test_core_disposable.py": {
        "test_disposable": {
            "name": "test_disposable",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_subscription_disposable": {
            "name": "test_subscription_disposable",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_disposable.MyDisposable.dispose": {
            "name": "dispose",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-broqer-master/tests/test_core_publisher.py": {
        "test_subscribe": {
            "name": "test_subscribe",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 73,
            "return": [],
            "arguments": {
                "init": []
            }
        },
        "test_notify": {
            "name": "test_notify",
            "location": 96,
            "return": [],
            "arguments": {
                "init": [],
                "number_of_subscribers": []
            }
        },
        "test_subscription_callback": {
            "name": "test_subscription_callback",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_prepend": {
            "name": "test_prepend",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_reset_state": {
            "name": "test_reset_state",
            "location": 191,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_core_publisher_operators.py": {
        "test_operator_with_publishers": {
            "name": "test_operator_with_publishers",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_operator_with_constant": {
            "name": "test_operator_with_constant",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_operator_with_constant_r": {
            "name": "test_operator_with_constant_r",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_with_publisher": {
            "name": "test_with_publisher",
            "location": 120,
            "return": [],
            "arguments": {
                "operator": [],
                "l_value": [],
                "r_value": [],
                "result": []
            }
        },
        "test_wrong_comparision": {
            "name": "test_wrong_comparision",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_mod_str": {
            "name": "test_mod_str",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_concat": {
            "name": "test_concat",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_unary_operators": {
            "name": "test_unary_operators",
            "location": 233,
            "return": [],
            "arguments": {
                "operator": [],
                "value": [],
                "result": []
            }
        },
        "test_in_operator": {
            "name": "test_in_operator",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_getattr_method": {
            "name": "test_getattr_method",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "test_inherit_getattr": {
            "name": "test_inherit_getattr",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "test_inherit_with_operators": {
            "name": "test_inherit_with_operators",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "test_getattr_attribute": {
            "name": "test_getattr_attribute",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_getattr_without_inherit": {
            "name": "test_getattr_without_inherit",
            "location": 377,
            "return": [],
            "arguments": {}
        },
        "test_multi_operators": {
            "name": "test_multi_operators",
            "location": 406,
            "return": [],
            "arguments": {
                "operator": [],
                "values": [],
                "result": []
            }
        },
        "test_getattr_attribute.Foo.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "test_getattr_without_inherit.Foo.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        }
    },
    "python-broqer-master/tests/test_coro_queue.py": {},
    "python-broqer-master/tests/test_error_handler.py": {
        "test_default": {
            "name": "test_default",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "test_set_errorhandler": {
            "name": "test_set_errorhandler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        }
    },
    "python-broqer-master/tests/test_op_bitwise.py": {
        "test_bitwise_combine_latest": {
            "name": "test_bitwise_combine_latest",
            "location": 27,
            "return": [],
            "arguments": {
                "method": [],
                "init": [],
                "bit_value_map": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "test_bitwise_uninitialized_publishers": {
            "name": "test_bitwise_uninitialized_publishers",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_map_bit": {
            "name": "test_map_bit",
            "location": 50,
            "return": [],
            "arguments": {
                "method": [],
                "bit_index": [],
                "input_vector": [],
                "output_vector": []
            }
        }
    },
    "python-broqer-master/tests/test_op_combine_latest.py": {
        "test_operator": {
            "name": "test_operator",
            "location": 42,
            "return": [],
            "arguments": {
                "method": [],
                "o": [],
                "args": [],
                "kwargs": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "test_emit_on": {
            "name": "test_emit_on",
            "location": 53,
            "return": [],
            "arguments": {
                "factory": [],
                "flags": []
            }
        },
        "test_unsubscibe": {
            "name": "test_unsubscibe",
            "location": 85,
            "return": [],
            "arguments": {
                "subscribe": []
            }
        }
    },
    "python-broqer-master/tests/test_op_filter.py": {
        "test_operator": {
            "name": "test_operator",
            "location": 50,
            "return": [],
            "arguments": {
                "method": [],
                "o": [],
                "args": [],
                "kwargs": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "test_true_false": {
            "name": "test_true_false",
            "location": 77,
            "return": [],
            "arguments": {
                "method": [],
                "o": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "test_filter_factory_keyword": {
            "name": "test_filter_factory_keyword",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_map.py": {
        "add": {
            "name": "add",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "constant": []
            }
        },
        "test_operator": {
            "name": "test_operator",
            "location": 27,
            "return": [],
            "arguments": {
                "method": [],
                "o": [],
                "args": [],
                "kwargs": [],
                "input_vector": [],
                "output_vector": []
            }
        },
        "test_map_factory_keyword": {
            "name": "test_map_factory_keyword",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_two_maps": {
            "name": "test_two_maps",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_on_emit_future.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_publisher": {
            "name": "test_publisher",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_wrong_source": {
            "name": "test_wrong_source",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_op_sink.py": {
        "test_sink": {
            "name": "test_sink",
            "location": 9,
            "return": [],
            "arguments": {
                "operator_cls": []
            }
        },
        "test_sink2": {
            "name": "test_sink2",
            "location": 43,
            "return": [],
            "arguments": {
                "operator_cls": []
            }
        },
        "test_sink_without_function": {
            "name": "test_sink_without_function",
            "location": 64,
            "return": [],
            "arguments": {
                "operator_cls": []
            }
        },
        "test_sink_on_subscription": {
            "name": "test_sink_on_subscription",
            "location": 74,
            "return": [],
            "arguments": {
                "operator": []
            }
        },
        "test_sink_partial": {
            "name": "test_sink_partial",
            "location": 98,
            "return": [],
            "arguments": {
                "operator_cls": []
            }
        },
        "test_build": {
            "name": "test_build",
            "location": 141,
            "return": [],
            "arguments": {
                "build_kwargs": [],
                "init_args": [],
                "init_kwargs": [],
                "ref_args": [],
                "ref_kwargs": [],
                "exception": []
            }
        }
    },
    "python-broqer-master/tests/test_op_throttle.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_argument_check": {
            "name": "test_argument_check",
            "location": 136,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/test_publishers_poll.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "python-broqer-master/tests/__init__.py": {}
}
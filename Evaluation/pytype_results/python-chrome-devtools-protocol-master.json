{
    "python-chrome-devtools-protocol-master/cdp/accessibility.py": {
        "disable": {
            "name": "disable",
            "location": 390,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 400,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_partial_ax_tree": {
            "name": "get_partial_ax_tree",
            "location": 411,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": [],
                "fetch_relatives": []
            }
        },
        "get_full_ax_tree": {
            "name": "get_full_ax_tree",
            "location": 445,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "AXNodeId.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "_TAXNodeId@@AXNodeId@@"
            ],
            "arguments": {
                "self": [
                    "_TAXNodeId@@AXNodeId@@"
                ]
            }
        },
        "AXNodeId.from_json": {
            "name": "from_json",
            "location": 26,
            "return": [
                "_TAXNodeId@@AXNodeId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXNodeId]"
                ],
                "json": []
            }
        },
        "AXNodeId.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValueType.to_json": {
            "name": "to_json",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValueType.from_json": {
            "name": "from_json",
            "location": 59,
            "return": [
                "_TAXValueType@@AXValueType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXValueType]"
                ],
                "json": []
            }
        },
        "AXValueSourceType.to_json": {
            "name": "to_json",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValueSourceType.from_json": {
            "name": "from_json",
            "location": 78,
            "return": [
                "_TAXValueSourceType@@AXValueSourceType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXValueSourceType]"
                ],
                "json": []
            }
        },
        "AXValueNativeSourceType.to_json": {
            "name": "to_json",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValueNativeSourceType.from_json": {
            "name": "from_json",
            "location": 99,
            "return": [
                "_TAXValueNativeSourceType@@AXValueNativeSourceType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXValueNativeSourceType]"
                ],
                "json": []
            }
        },
        "AXValueSource.to_json": {
            "name": "to_json",
            "location": 135,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValueSource.from_json": {
            "name": "from_json",
            "location": 157,
            "return": [
                "_TAXValueSource@@AXValueSource@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXValueSource]"
                ],
                "json": []
            }
        },
        "AXRelatedNode.to_json": {
            "name": "to_json",
            "location": 182,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXRelatedNode.from_json": {
            "name": "from_json",
            "location": 192,
            "return": [
                "_TAXRelatedNode@@AXRelatedNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXRelatedNode]"
                ],
                "json": []
            }
        },
        "AXProperty.to_json": {
            "name": "to_json",
            "location": 208,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXProperty.from_json": {
            "name": "from_json",
            "location": 215,
            "return": [
                "_TAXProperty@@AXProperty@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXProperty]"
                ],
                "json": []
            }
        },
        "AXValue.to_json": {
            "name": "to_json",
            "location": 239,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXValue.from_json": {
            "name": "from_json",
            "location": 251,
            "return": [
                "_TAXValue@@AXValue@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXValue]"
                ],
                "json": []
            }
        },
        "AXPropertyName.to_json": {
            "name": "to_json",
            "location": 309,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXPropertyName.from_json": {
            "name": "from_json",
            "location": 313,
            "return": [
                "_TAXPropertyName@@AXPropertyName@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXPropertyName]"
                ],
                "json": []
            }
        },
        "AXNode.to_json": {
            "name": "to_json",
            "location": 352,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AXNode.from_json": {
            "name": "from_json",
            "location": 375,
            "return": [
                "_TAXNode@@AXNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAXNode]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/animation.py": {
        "disable": {
            "name": "disable",
            "location": 204,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 214,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_current_time": {
            "name": "get_current_time",
            "location": 224,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, float)]"
            ],
            "arguments": {
                "id_": [
                    "_T0@@"
                ]
            }
        },
        "get_playback_rate": {
            "name": "get_playback_rate",
            "location": 243,
            "return": [
                "Generator[(Dict[(str, str)], Any, float)]"
            ],
            "arguments": {}
        },
        "release_animations": {
            "name": "release_animations",
            "location": 256,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "animations": []
            }
        },
        "resolve_animation": {
            "name": "resolve_animation",
            "location": 273,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, runtime.RemoteObject)]"
            ],
            "arguments": {
                "animation_id": [
                    "_T0@@"
                ]
            }
        },
        "seek_animations": {
            "name": "seek_animations",
            "location": 292,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "animations": [],
                "current_time": [
                    "_T1@@"
                ]
            }
        },
        "set_paused": {
            "name": "set_paused",
            "location": 312,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "animations": [],
                "paused": [
                    "_T1@@"
                ]
            }
        },
        "set_playback_rate": {
            "name": "set_playback_rate",
            "location": 332,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "playback_rate": [
                    "_T0@@"
                ]
            }
        },
        "set_timing": {
            "name": "set_timing",
            "location": 349,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "animation_id": [
                    "_T0@@"
                ],
                "duration": [
                    "_T1@@"
                ],
                "delay": [
                    "_T2@@"
                ]
            }
        },
        "Animation.to_json": {
            "name": "to_json",
            "location": 54,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Animation.from_json": {
            "name": "from_json",
            "location": 71,
            "return": [
                "_TAnimation@@Animation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAnimation]"
                ],
                "json": []
            }
        },
        "AnimationEffect.to_json": {
            "name": "to_json",
            "location": 121,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimationEffect.from_json": {
            "name": "from_json",
            "location": 138,
            "return": [
                "_TAnimationEffect@@AnimationEffect@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAnimationEffect]"
                ],
                "json": []
            }
        },
        "KeyframesRule.to_json": {
            "name": "to_json",
            "location": 164,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyframesRule.from_json": {
            "name": "from_json",
            "location": 172,
            "return": [
                "_TKeyframesRule@@KeyframesRule@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeyframesRule]"
                ],
                "json": []
            }
        },
        "KeyframeStyle.to_json": {
            "name": "to_json",
            "location": 190,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyframeStyle.from_json": {
            "name": "from_json",
            "location": 197,
            "return": [
                "_TKeyframeStyle@@KeyframeStyle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeyframeStyle]"
                ],
                "json": []
            }
        },
        "AnimationCanceled.from_json": {
            "name": "from_json",
            "location": 382,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "AnimationCreated.from_json": {
            "name": "from_json",
            "location": 398,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "AnimationStarted.from_json": {
            "name": "from_json",
            "location": 414,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/application_cache.py": {
        "enable": {
            "name": "enable",
            "location": 117,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_application_cache_for_frame": {
            "name": "get_application_cache_for_frame",
            "location": 127,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, ApplicationCache)]"
            ],
            "arguments": {
                "frame_id": []
            }
        },
        "get_frames_with_manifests": {
            "name": "get_frames_with_manifests",
            "location": 146,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "get_manifest_for_frame": {
            "name": "get_manifest_for_frame",
            "location": 160,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "frame_id": []
            }
        },
        "ApplicationCacheResource.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationCacheResource.from_json": {
            "name": "from_json",
            "location": 39,
            "return": [
                "_TApplicationCacheResource@@ApplicationCacheResource@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TApplicationCacheResource]"
                ],
                "json": []
            }
        },
        "ApplicationCache.to_json": {
            "name": "to_json",
            "location": 67,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationCache.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [
                "_TApplicationCache@@ApplicationCache@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TApplicationCache]"
                ],
                "json": []
            }
        },
        "FrameWithManifest.to_json": {
            "name": "to_json",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameWithManifest.from_json": {
            "name": "from_json",
            "location": 109,
            "return": [
                "_TFrameWithManifest@@FrameWithManifest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrameWithManifest]"
                ],
                "json": []
            }
        },
        "ApplicationCacheStatusUpdated.from_json": {
            "name": "from_json",
            "location": 190,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "NetworkStateUpdated.from_json": {
            "name": "from_json",
            "location": 204,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/audits.py": {
        "get_encoded_response": {
            "name": "get_encoded_response",
            "location": 17,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[str], int, int)])]"
            ],
            "arguments": {
                "request_id": [],
                "encoding": [],
                "quality": [],
                "size_only": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/background_service.py": {
        "start_observing": {
            "name": "start_observing",
            "location": 108,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "service": []
            }
        },
        "stop_observing": {
            "name": "stop_observing",
            "location": 125,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "service": []
            }
        },
        "set_recording": {
            "name": "set_recording",
            "location": 142,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "should_record": [],
                "service": []
            }
        },
        "clear_events": {
            "name": "clear_events",
            "location": 162,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "service": []
            }
        },
        "ServiceName.to_json": {
            "name": "to_json",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceName.from_json": {
            "name": "from_json",
            "location": 34,
            "return": [
                "_TServiceName@@ServiceName@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceName]"
                ],
                "json": []
            }
        },
        "EventMetadata.to_json": {
            "name": "to_json",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventMetadata.from_json": {
            "name": "from_json",
            "location": 54,
            "return": [
                "_TEventMetadata@@EventMetadata@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEventMetadata]"
                ],
                "json": []
            }
        },
        "BackgroundServiceEvent.to_json": {
            "name": "to_json",
            "location": 84,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackgroundServiceEvent.from_json": {
            "name": "from_json",
            "location": 96,
            "return": [
                "_TBackgroundServiceEvent@@BackgroundServiceEvent@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBackgroundServiceEvent]"
                ],
                "json": []
            }
        },
        "RecordingStateChanged.from_json": {
            "name": "from_json",
            "location": 189,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "BackgroundServiceEventReceived.from_json": {
            "name": "from_json",
            "location": 206,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/browser.py": {
        "grant_permissions": {
            "name": "grant_permissions",
            "location": 186,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [],
                "permissions": [],
                "browser_context_id": []
            }
        },
        "reset_permissions": {
            "name": "reset_permissions",
            "location": 212,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "browser_context_id": []
            }
        },
        "close": {
            "name": "close",
            "location": 232,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "crash": {
            "name": "crash",
            "location": 242,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "crash_gpu_process": {
            "name": "crash_gpu_process",
            "location": 254,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 266,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(str, str, str, str, str)])]"
            ],
            "arguments": {}
        },
        "get_browser_command_line": {
            "name": "get_browser_command_line",
            "location": 291,
            "return": [
                "Generator[(Dict[(str, str)], Any, List[str])]"
            ],
            "arguments": {}
        },
        "get_histograms": {
            "name": "get_histograms",
            "location": 307,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, list)]"
            ],
            "arguments": {
                "query": [
                    "_T0@@"
                ],
                "delta": [
                    "_T1@@"
                ]
            }
        },
        "get_histogram": {
            "name": "get_histogram",
            "location": 333,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, Histogram)]"
            ],
            "arguments": {
                "name": [
                    "_T0@@"
                ],
                "delta": [
                    "_T1@@"
                ]
            }
        },
        "get_window_bounds": {
            "name": "get_window_bounds",
            "location": 358,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Bounds)]"
            ],
            "arguments": {
                "window_id": []
            }
        },
        "get_window_for_target": {
            "name": "get_window_for_target",
            "location": 379,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(WindowID, Bounds)])]"
            ],
            "arguments": {
                "target_id": []
            }
        },
        "set_window_bounds": {
            "name": "set_window_bounds",
            "location": 407,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "window_id": [],
                "bounds": []
            }
        },
        "set_dock_tile": {
            "name": "set_dock_tile",
            "location": 429,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "badge_label": [
                    "_T0@@"
                ],
                "image": [
                    "_T1@@"
                ]
            }
        },
        "WindowID.to_json": {
            "name": "to_json",
            "location": 18,
            "return": [
                "_TWindowID@@WindowID@@"
            ],
            "arguments": {
                "self": [
                    "_TWindowID@@WindowID@@"
                ]
            }
        },
        "WindowID.from_json": {
            "name": "from_json",
            "location": 22,
            "return": [
                "_TWindowID@@WindowID@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWindowID]"
                ],
                "json": []
            }
        },
        "WindowID.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowState.to_json": {
            "name": "to_json",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowState.from_json": {
            "name": "from_json",
            "location": 42,
            "return": [
                "_TWindowState@@WindowState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWindowState]"
                ],
                "json": []
            }
        },
        "Bounds.to_json": {
            "name": "to_json",
            "location": 66,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bounds.from_json": {
            "name": "from_json",
            "location": 81,
            "return": [
                "_TBounds@@Bounds@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBounds]"
                ],
                "json": []
            }
        },
        "PermissionType.to_json": {
            "name": "to_json",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionType.from_json": {
            "name": "from_json",
            "location": 117,
            "return": [
                "_TPermissionType@@PermissionType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPermissionType]"
                ],
                "json": []
            }
        },
        "Bucket.to_json": {
            "name": "to_json",
            "location": 135,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.from_json": {
            "name": "from_json",
            "location": 143,
            "return": [
                "_TBucket@@Bucket@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBucket]"
                ],
                "json": []
            }
        },
        "Histogram.to_json": {
            "name": "to_json",
            "location": 168,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Histogram.from_json": {
            "name": "from_json",
            "location": 177,
            "return": [
                "_THistogram@@Histogram@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THistogram]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/cache_storage.py": {
        "delete_cache": {
            "name": "delete_cache",
            "location": 174,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "cache_id": []
            }
        },
        "delete_entry": {
            "name": "delete_entry",
            "location": 191,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "cache_id": [],
                "request": []
            }
        },
        "request_cache_names": {
            "name": "request_cache_names",
            "location": 211,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, list)]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ]
            }
        },
        "request_cached_response": {
            "name": "request_cached_response",
            "location": 230,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, CachedResponse)]"
            ],
            "arguments": {
                "cache_id": [],
                "request_url": [],
                "request_headers": []
            }
        },
        "request_entries": {
            "name": "request_entries",
            "location": 255,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(list, float)])]"
            ],
            "arguments": {
                "cache_id": [],
                "skip_count": [],
                "page_size": [],
                "path_filter": []
            }
        },
        "CacheId.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "_TCacheId@@CacheId@@"
            ],
            "arguments": {
                "self": [
                    "_TCacheId@@CacheId@@"
                ]
            }
        },
        "CacheId.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "_TCacheId@@CacheId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCacheId]"
                ],
                "json": []
            }
        },
        "CacheId.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedResponseType.to_json": {
            "name": "to_json",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedResponseType.from_json": {
            "name": "from_json",
            "location": 45,
            "return": [
                "_TCachedResponseType@@CachedResponseType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCachedResponseType]"
                ],
                "json": []
            }
        },
        "DataEntry.to_json": {
            "name": "to_json",
            "location": 78,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataEntry.from_json": {
            "name": "from_json",
            "location": 91,
            "return": [
                "_TDataEntry@@DataEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDataEntry]"
                ],
                "json": []
            }
        },
        "Cache.to_json": {
            "name": "to_json",
            "location": 118,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.from_json": {
            "name": "from_json",
            "location": 126,
            "return": [
                "_TCache@@Cache@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCache]"
                ],
                "json": []
            }
        },
        "Header.to_json": {
            "name": "to_json",
            "location": 140,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.from_json": {
            "name": "from_json",
            "location": 147,
            "return": [
                "_THeader@@Header@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THeader]"
                ],
                "json": []
            }
        },
        "CachedResponse.to_json": {
            "name": "to_json",
            "location": 162,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedResponse.from_json": {
            "name": "from_json",
            "location": 168,
            "return": [
                "_TCachedResponse@@CachedResponse@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCachedResponse]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/cast.py": {
        "enable": {
            "name": "enable",
            "location": 42,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "presentation_url": [
                    "_T0@@"
                ]
            }
        },
        "disable": {
            "name": "disable",
            "location": 64,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_sink_to_use": {
            "name": "set_sink_to_use",
            "location": 74,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "sink_name": [
                    "_T0@@"
                ]
            }
        },
        "start_tab_mirroring": {
            "name": "start_tab_mirroring",
            "location": 92,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "sink_name": [
                    "_T0@@"
                ]
            }
        },
        "stop_casting": {
            "name": "stop_casting",
            "location": 109,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "sink_name": [
                    "_T0@@"
                ]
            }
        },
        "Sink.to_json": {
            "name": "to_json",
            "location": 25,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sink.from_json": {
            "name": "from_json",
            "location": 34,
            "return": [
                "_TSink@@Sink@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSink]"
                ],
                "json": []
            }
        },
        "SinksUpdated.from_json": {
            "name": "from_json",
            "location": 136,
            "return": [
                "_TSink@@Sink@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSink]"
                ],
                "json": []
            }
        },
        "IssueUpdated.from_json": {
            "name": "from_json",
            "location": 152,
            "return": [
                "_TSink@@Sink@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSink]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/console.py": {
        "clear_messages": {
            "name": "clear_messages",
            "location": 63,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "disable": {
            "name": "disable",
            "location": 73,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 83,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "ConsoleMessage.to_json": {
            "name": "to_json",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.from_json": {
            "name": "from_json",
            "location": 52,
            "return": [
                "_TConsoleMessage@@ConsoleMessage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConsoleMessage]"
                ],
                "json": []
            }
        },
        "MessageAdded.from_json": {
            "name": "from_json",
            "location": 104,
            "return": [
                "_TConsoleMessage@@ConsoleMessage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConsoleMessage]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/css.py": {
        "add_rule": {
            "name": "add_rule",
            "location": 827,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, CSSRule)]"
            ],
            "arguments": {
                "style_sheet_id": [],
                "rule_text": [],
                "location": []
            }
        },
        "collect_class_names": {
            "name": "collect_class_names",
            "location": 853,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "style_sheet_id": []
            }
        },
        "create_style_sheet": {
            "name": "create_style_sheet",
            "location": 872,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, StyleSheetId)]"
            ],
            "arguments": {
                "frame_id": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 891,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 901,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "force_pseudo_state": {
            "name": "force_pseudo_state",
            "location": 912,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "forced_pseudo_classes": []
            }
        },
        "get_background_colors": {
            "name": "get_background_colors",
            "location": 933,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[List[str]], Optional[str], Optional[str])])]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_computed_style_for_node": {
            "name": "get_computed_style_for_node",
            "location": 958,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_inline_styles_for_node": {
            "name": "get_inline_styles_for_node",
            "location": 977,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[CSSStyle], Optional[CSSStyle])])]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_matched_styles_for_node": {
            "name": "get_matched_styles_for_node",
            "location": 1003,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[CSSStyle], Optional[CSSStyle], Optional[list], Optional[list], Optional[list], Optional[list])])]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_media_queries": {
            "name": "get_media_queries",
            "location": 1036,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "get_platform_fonts_for_node": {
            "name": "get_platform_fonts_for_node",
            "location": 1049,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_style_sheet_text": {
            "name": "get_style_sheet_text",
            "location": 1069,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "style_sheet_id": []
            }
        },
        "set_effective_property_value_for_node": {
            "name": "set_effective_property_value_for_node",
            "location": 1088,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "property_name": [],
                "value": []
            }
        },
        "set_keyframe_key": {
            "name": "set_keyframe_key",
            "location": 1112,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Value)]"
            ],
            "arguments": {
                "style_sheet_id": [],
                "range_": [],
                "key_text": []
            }
        },
        "set_media_text": {
            "name": "set_media_text",
            "location": 1137,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, CSSMedia)]"
            ],
            "arguments": {
                "style_sheet_id": [],
                "range_": [],
                "text": []
            }
        },
        "set_rule_selector": {
            "name": "set_rule_selector",
            "location": 1162,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, SelectorList)]"
            ],
            "arguments": {
                "style_sheet_id": [],
                "range_": [],
                "selector": []
            }
        },
        "set_style_sheet_text": {
            "name": "set_style_sheet_text",
            "location": 1187,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Optional[str])]"
            ],
            "arguments": {
                "style_sheet_id": [],
                "text": []
            }
        },
        "set_style_texts": {
            "name": "set_style_texts",
            "location": 1209,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, list)]"
            ],
            "arguments": {
                "edits": []
            }
        },
        "start_rule_usage_tracking": {
            "name": "start_rule_usage_tracking",
            "location": 1228,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "stop_rule_usage_tracking": {
            "name": "stop_rule_usage_tracking",
            "location": 1238,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "take_coverage_delta": {
            "name": "take_coverage_delta",
            "location": 1252,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "StyleSheetId.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "_TStyleSheetId@@StyleSheetId@@"
            ],
            "arguments": {
                "self": [
                    "_TStyleSheetId@@StyleSheetId@@"
                ]
            }
        },
        "StyleSheetId.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "_TStyleSheetId@@StyleSheetId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStyleSheetId]"
                ],
                "json": []
            }
        },
        "StyleSheetId.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StyleSheetOrigin.to_json": {
            "name": "to_json",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StyleSheetOrigin.from_json": {
            "name": "from_json",
            "location": 45,
            "return": [
                "_TStyleSheetOrigin@@StyleSheetOrigin@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStyleSheetOrigin]"
                ],
                "json": []
            }
        },
        "PseudoElementMatches.to_json": {
            "name": "to_json",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoElementMatches.from_json": {
            "name": "from_json",
            "location": 67,
            "return": [
                "_TPseudoElementMatches@@PseudoElementMatches@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPseudoElementMatches]"
                ],
                "json": []
            }
        },
        "InheritedStyleEntry.to_json": {
            "name": "to_json",
            "location": 85,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InheritedStyleEntry.from_json": {
            "name": "from_json",
            "location": 93,
            "return": [
                "_TInheritedStyleEntry@@InheritedStyleEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInheritedStyleEntry]"
                ],
                "json": []
            }
        },
        "RuleMatch.to_json": {
            "name": "to_json",
            "location": 111,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleMatch.from_json": {
            "name": "from_json",
            "location": 118,
            "return": [
                "_TRuleMatch@@RuleMatch@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRuleMatch]"
                ],
                "json": []
            }
        },
        "Value.to_json": {
            "name": "to_json",
            "location": 136,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.from_json": {
            "name": "from_json",
            "location": 144,
            "return": [
                "_TValue@@Value@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TValue]"
                ],
                "json": []
            }
        },
        "SelectorList.to_json": {
            "name": "to_json",
            "location": 162,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectorList.from_json": {
            "name": "from_json",
            "location": 169,
            "return": [
                "_TSelectorList@@SelectorList@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSelectorList]"
                ],
                "json": []
            }
        },
        "CSSStyleSheetHeader.to_json": {
            "name": "to_json",
            "location": 221,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSStyleSheetHeader.from_json": {
            "name": "from_json",
            "location": 242,
            "return": [
                "_TCSSStyleSheetHeader@@CSSStyleSheetHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSStyleSheetHeader]"
                ],
                "json": []
            }
        },
        "CSSRule.to_json": {
            "name": "to_json",
            "location": 282,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSRule.from_json": {
            "name": "from_json",
            "location": 294,
            "return": [
                "_TCSSRule@@CSSRule@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSRule]"
                ],
                "json": []
            }
        },
        "RuleUsage.to_json": {
            "name": "to_json",
            "location": 322,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuleUsage.from_json": {
            "name": "from_json",
            "location": 331,
            "return": [
                "_TRuleUsage@@RuleUsage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRuleUsage]"
                ],
                "json": []
            }
        },
        "SourceRange.to_json": {
            "name": "to_json",
            "location": 357,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceRange.from_json": {
            "name": "from_json",
            "location": 366,
            "return": [
                "_TSourceRange@@SourceRange@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSourceRange]"
                ],
                "json": []
            }
        },
        "ShorthandEntry.to_json": {
            "name": "to_json",
            "location": 386,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShorthandEntry.from_json": {
            "name": "from_json",
            "location": 395,
            "return": [
                "_TShorthandEntry@@ShorthandEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShorthandEntry]"
                ],
                "json": []
            }
        },
        "CSSComputedStyleProperty.to_json": {
            "name": "to_json",
            "location": 411,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSComputedStyleProperty.from_json": {
            "name": "from_json",
            "location": 418,
            "return": [
                "_TCSSComputedStyleProperty@@CSSComputedStyleProperty@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSComputedStyleProperty]"
                ],
                "json": []
            }
        },
        "CSSStyle.to_json": {
            "name": "to_json",
            "location": 446,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSStyle.from_json": {
            "name": "from_json",
            "location": 459,
            "return": [
                "_TCSSStyle@@CSSStyle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSStyle]"
                ],
                "json": []
            }
        },
        "CSSProperty.to_json": {
            "name": "to_json",
            "location": 498,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSProperty.from_json": {
            "name": "from_json",
            "location": 517,
            "return": [
                "_TCSSProperty@@CSSProperty@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSProperty]"
                ],
                "json": []
            }
        },
        "CSSMedia.to_json": {
            "name": "to_json",
            "location": 557,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSMedia.from_json": {
            "name": "from_json",
            "location": 572,
            "return": [
                "_TCSSMedia@@CSSMedia@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSMedia]"
                ],
                "json": []
            }
        },
        "MediaQuery.to_json": {
            "name": "to_json",
            "location": 594,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaQuery.from_json": {
            "name": "from_json",
            "location": 601,
            "return": [
                "_TMediaQuery@@MediaQuery@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMediaQuery]"
                ],
                "json": []
            }
        },
        "MediaQueryExpression.to_json": {
            "name": "to_json",
            "location": 628,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaQueryExpression.from_json": {
            "name": "from_json",
            "location": 640,
            "return": [
                "_TMediaQueryExpression@@MediaQueryExpression@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMediaQueryExpression]"
                ],
                "json": []
            }
        },
        "PlatformFontUsage.to_json": {
            "name": "to_json",
            "location": 664,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformFontUsage.from_json": {
            "name": "from_json",
            "location": 672,
            "return": [
                "_TPlatformFontUsage@@PlatformFontUsage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPlatformFontUsage]"
                ],
                "json": []
            }
        },
        "FontFace.to_json": {
            "name": "to_json",
            "location": 709,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontFace.from_json": {
            "name": "from_json",
            "location": 722,
            "return": [
                "_TFontFace@@FontFace@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFontFace]"
                ],
                "json": []
            }
        },
        "CSSKeyframesRule.to_json": {
            "name": "to_json",
            "location": 746,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSKeyframesRule.from_json": {
            "name": "from_json",
            "location": 753,
            "return": [
                "_TCSSKeyframesRule@@CSSKeyframesRule@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSKeyframesRule]"
                ],
                "json": []
            }
        },
        "CSSKeyframeRule.to_json": {
            "name": "to_json",
            "location": 778,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSSKeyframeRule.from_json": {
            "name": "from_json",
            "location": 788,
            "return": [
                "_TCSSKeyframeRule@@CSSKeyframeRule@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCSSKeyframeRule]"
                ],
                "json": []
            }
        },
        "StyleDeclarationEdit.to_json": {
            "name": "to_json",
            "location": 811,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StyleDeclarationEdit.from_json": {
            "name": "from_json",
            "location": 819,
            "return": [
                "_TStyleDeclarationEdit@@StyleDeclarationEdit@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStyleDeclarationEdit]"
                ],
                "json": []
            }
        },
        "FontsUpdated.from_json": {
            "name": "from_json",
            "location": 1277,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "MediaQueryResultChanged.from_json": {
            "name": "from_json",
            "location": 1293,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "StyleSheetAdded.from_json": {
            "name": "from_json",
            "location": 1309,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "StyleSheetChanged.from_json": {
            "name": "from_json",
            "location": 1324,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "StyleSheetRemoved.from_json": {
            "name": "from_json",
            "location": 1340,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/database.py": {
        "disable": {
            "name": "disable",
            "location": 90,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 100,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "execute_sql": {
            "name": "execute_sql",
            "location": 110,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[List[str]], Optional[list], Optional[Error])])]"
            ],
            "arguments": {
                "database_id": [],
                "query": []
            }
        },
        "get_database_table_names": {
            "name": "get_database_table_names",
            "location": 138,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "database_id": []
            }
        },
        "DatabaseId.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "_TDatabaseId@@DatabaseId@@"
            ],
            "arguments": {
                "self": [
                    "_TDatabaseId@@DatabaseId@@"
                ]
            }
        },
        "DatabaseId.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "_TDatabaseId@@DatabaseId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDatabaseId]"
                ],
                "json": []
            }
        },
        "DatabaseId.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.to_json": {
            "name": "to_json",
            "location": 47,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.from_json": {
            "name": "from_json",
            "location": 56,
            "return": [
                "_TDatabase@@Database@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDatabase]"
                ],
                "json": []
            }
        },
        "Error.to_json": {
            "name": "to_json",
            "location": 76,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.from_json": {
            "name": "from_json",
            "location": 83,
            "return": [
                "_TError@@Error@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TError]"
                ],
                "json": []
            }
        },
        "AddDatabase.from_json": {
            "name": "from_json",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/debugger.py": {
        "continue_to_location": {
            "name": "continue_to_location",
            "location": 260,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "location": [],
                "target_call_frames": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 281,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 291,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, runtime.UniqueDebuggerId)]"
            ],
            "arguments": {
                "max_scripts_cache_size": [
                    "_T0@@"
                ]
            }
        },
        "evaluate_on_call_frame": {
            "name": "evaluate_on_call_frame",
            "location": 312,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(runtime.RemoteObject, Optional[runtime.ExceptionDetails])])]"
            ],
            "arguments": {
                "call_frame_id": [],
                "expression": [],
                "object_group": [],
                "include_command_line_api": [],
                "silent": [],
                "return_by_value": [],
                "generate_preview": [],
                "throw_on_side_effect": [],
                "timeout": []
            }
        },
        "get_possible_breakpoints": {
            "name": "get_possible_breakpoints",
            "location": 368,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "start": [],
                "end": [],
                "restrict_to_function": []
            }
        },
        "get_script_source": {
            "name": "get_script_source",
            "location": 396,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "script_id": []
            }
        },
        "get_stack_trace": {
            "name": "get_stack_trace",
            "location": 415,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, runtime.StackTrace)]"
            ],
            "arguments": {
                "stack_trace_id": []
            }
        },
        "pause": {
            "name": "pause",
            "location": 436,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "pause_on_async_call": {
            "name": "pause_on_async_call",
            "location": 446,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "parent_stack_trace_id": []
            }
        },
        "remove_breakpoint": {
            "name": "remove_breakpoint",
            "location": 465,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "breakpoint_id": []
            }
        },
        "restart_frame": {
            "name": "restart_frame",
            "location": 482,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(list, Optional[runtime.StackTrace], Optional[runtime.StackTraceId])])]"
            ],
            "arguments": {
                "call_frame_id": []
            }
        },
        "resume": {
            "name": "resume",
            "location": 509,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "search_in_content": {
            "name": "search_in_content",
            "location": 519,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "script_id": [],
                "query": [],
                "case_sensitive": [],
                "is_regex": []
            }
        },
        "set_async_call_stack_depth": {
            "name": "set_async_call_stack_depth",
            "location": 549,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "max_depth": [
                    "_T0@@"
                ]
            }
        },
        "set_blackbox_patterns": {
            "name": "set_blackbox_patterns",
            "location": 566,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "patterns": []
            }
        },
        "set_blackboxed_ranges": {
            "name": "set_blackboxed_ranges",
            "location": 587,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "script_id": [],
                "positions": []
            }
        },
        "set_breakpoint": {
            "name": "set_breakpoint",
            "location": 612,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(BreakpointId, Location)])]"
            ],
            "arguments": {
                "location": [],
                "condition": []
            }
        },
        "set_instrumentation_breakpoint": {
            "name": "set_instrumentation_breakpoint",
            "location": 641,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, BreakpointId)]"
            ],
            "arguments": {
                "instrumentation": [
                    "_T0@@"
                ]
            }
        },
        "set_breakpoint_by_url": {
            "name": "set_breakpoint_by_url",
            "location": 660,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2, _T3, _T4, _T5)])])])], Any, Tuple[(BreakpointId, list)])]"
            ],
            "arguments": {
                "line_number": [
                    "_T0@@"
                ],
                "url": [
                    "_T1@@"
                ],
                "url_regex": [
                    "_T2@@"
                ],
                "script_hash": [
                    "_T3@@"
                ],
                "column_number": [
                    "_T4@@"
                ],
                "condition": [
                    "_T5@@"
                ]
            }
        },
        "set_breakpoint_on_function_call": {
            "name": "set_breakpoint_on_function_call",
            "location": 708,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, BreakpointId)]"
            ],
            "arguments": {
                "object_id": [],
                "condition": []
            }
        },
        "set_breakpoints_active": {
            "name": "set_breakpoints_active",
            "location": 735,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "active": [
                    "_T0@@"
                ]
            }
        },
        "set_pause_on_exceptions": {
            "name": "set_pause_on_exceptions",
            "location": 752,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "state": [
                    "_T0@@"
                ]
            }
        },
        "set_return_value": {
            "name": "set_return_value",
            "location": 770,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "new_value": []
            }
        },
        "set_script_source": {
            "name": "set_script_source",
            "location": 789,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[list], Optional[bool], Optional[runtime.StackTrace], Optional[runtime.StackTraceId], Optional[runtime.ExceptionDetails])])]"
            ],
            "arguments": {
                "script_id": [],
                "script_source": [],
                "dry_run": []
            }
        },
        "set_skip_all_pauses": {
            "name": "set_skip_all_pauses",
            "location": 827,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "skip": [
                    "_T0@@"
                ]
            }
        },
        "set_variable_value": {
            "name": "set_variable_value",
            "location": 844,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "scope_number": [],
                "variable_name": [],
                "new_value": [],
                "call_frame_id": []
            }
        },
        "step_into": {
            "name": "step_into",
            "location": 871,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "break_on_async_call": [
                    "_T0@@"
                ]
            }
        },
        "step_out": {
            "name": "step_out",
            "location": 889,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "step_over": {
            "name": "step_over",
            "location": 899,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "BreakpointId.to_json": {
            "name": "to_json",
            "location": 21,
            "return": [
                "_TBreakpointId@@BreakpointId@@"
            ],
            "arguments": {
                "self": [
                    "_TBreakpointId@@BreakpointId@@"
                ]
            }
        },
        "BreakpointId.from_json": {
            "name": "from_json",
            "location": 25,
            "return": [
                "_TBreakpointId@@BreakpointId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBreakpointId]"
                ],
                "json": []
            }
        },
        "BreakpointId.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallFrameId.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "_TCallFrameId@@CallFrameId@@"
            ],
            "arguments": {
                "self": [
                    "_TCallFrameId@@CallFrameId@@"
                ]
            }
        },
        "CallFrameId.from_json": {
            "name": "from_json",
            "location": 40,
            "return": [
                "_TCallFrameId@@CallFrameId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallFrameId]"
                ],
                "json": []
            }
        },
        "CallFrameId.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.to_json": {
            "name": "to_json",
            "location": 61,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.from_json": {
            "name": "from_json",
            "location": 70,
            "return": [
                "_TLocation@@Location@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLocation]"
                ],
                "json": []
            }
        },
        "ScriptPosition.to_json": {
            "name": "to_json",
            "location": 87,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptPosition.from_json": {
            "name": "from_json",
            "location": 94,
            "return": [
                "_TScriptPosition@@ScriptPosition@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScriptPosition]"
                ],
                "json": []
            }
        },
        "CallFrame.to_json": {
            "name": "to_json",
            "location": 130,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallFrame.from_json": {
            "name": "from_json",
            "location": 145,
            "return": [
                "_TCallFrame@@CallFrame@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallFrame]"
                ],
                "json": []
            }
        },
        "Scope.to_json": {
            "name": "to_json",
            "location": 179,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.from_json": {
            "name": "from_json",
            "location": 192,
            "return": [
                "_TScope@@Scope@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScope]"
                ],
                "json": []
            }
        },
        "SearchMatch.to_json": {
            "name": "to_json",
            "location": 213,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchMatch.from_json": {
            "name": "from_json",
            "location": 220,
            "return": [
                "_TSearchMatch@@SearchMatch@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSearchMatch]"
                ],
                "json": []
            }
        },
        "BreakLocation.to_json": {
            "name": "to_json",
            "location": 240,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakLocation.from_json": {
            "name": "from_json",
            "location": 251,
            "return": [
                "_TBreakLocation@@BreakLocation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBreakLocation]"
                ],
                "json": []
            }
        },
        "BreakpointResolved.from_json": {
            "name": "from_json",
            "location": 921,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "Paused.from_json": {
            "name": "from_json",
            "location": 951,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "Resumed.from_json": {
            "name": "from_json",
            "location": 972,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ScriptFailedToParse.from_json": {
            "name": "from_json",
            "location": 1014,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ScriptParsed.from_json": {
            "name": "from_json",
            "location": 1072,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/device_orientation.py": {
        "clear_device_orientation_override": {
            "name": "clear_device_orientation_override",
            "location": 15,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_device_orientation_override": {
            "name": "set_device_orientation_override",
            "location": 25,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "alpha": [
                    "_T0@@"
                ],
                "beta": [
                    "_T1@@"
                ],
                "gamma": [
                    "_T2@@"
                ]
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/dom.py": {
        "collect_class_names_from_subtree": {
            "name": "collect_class_names_from_subtree",
            "location": 469,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "copy_to": {
            "name": "copy_to",
            "location": 490,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "node_id": [],
                "target_node_id": [],
                "insert_before_node_id": []
            }
        },
        "describe_node": {
            "name": "describe_node",
            "location": 519,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Node)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": [],
                "depth": [],
                "pierce": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 556,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "discard_search_results": {
            "name": "discard_search_results",
            "location": 566,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "search_id": [
                    "_T0@@"
                ]
            }
        },
        "enable": {
            "name": "enable",
            "location": 586,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "focus": {
            "name": "focus",
            "location": 596,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": []
            }
        },
        "get_attributes": {
            "name": "get_attributes",
            "location": 622,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_box_model": {
            "name": "get_box_model",
            "location": 641,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, BoxModel)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": []
            }
        },
        "get_content_quads": {
            "name": "get_content_quads",
            "location": 669,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": []
            }
        },
        "get_document": {
            "name": "get_document",
            "location": 700,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, Node)]"
            ],
            "arguments": {
                "depth": [
                    "_T0@@"
                ],
                "pierce": [
                    "_T1@@"
                ]
            }
        },
        "get_flattened_document": {
            "name": "get_flattened_document",
            "location": 724,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, list)]"
            ],
            "arguments": {
                "depth": [
                    "_T0@@"
                ],
                "pierce": [
                    "_T1@@"
                ]
            }
        },
        "get_node_for_location": {
            "name": "get_node_for_location",
            "location": 748,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, Tuple[(BackendNodeId, Optional[NodeId])])]"
            ],
            "arguments": {
                "x": [
                    "_T0@@"
                ],
                "y": [
                    "_T1@@"
                ],
                "include_user_agent_shadow_dom": [
                    "_T2@@"
                ]
            }
        },
        "get_outer_html": {
            "name": "get_outer_html",
            "location": 783,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_id": []
            }
        },
        "get_relayout_boundary": {
            "name": "get_relayout_boundary",
            "location": 811,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "get_search_results": {
            "name": "get_search_results",
            "location": 832,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, list)]"
            ],
            "arguments": {
                "search_id": [
                    "_T0@@"
                ],
                "from_index": [
                    "_T1@@"
                ],
                "to_index": [
                    "_T2@@"
                ]
            }
        },
        "hide_highlight": {
            "name": "hide_highlight",
            "location": 860,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "highlight_node": {
            "name": "highlight_node",
            "location": 870,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "highlight_rect": {
            "name": "highlight_rect",
            "location": 880,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "mark_undoable_state": {
            "name": "mark_undoable_state",
            "location": 890,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "move_to": {
            "name": "move_to",
            "location": 902,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "node_id": [],
                "target_node_id": [],
                "insert_before_node_id": []
            }
        },
        "perform_search": {
            "name": "perform_search",
            "location": 928,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, Tuple[(str, int)])]"
            ],
            "arguments": {
                "query": [
                    "_T0@@"
                ],
                "include_user_agent_shadow_dom": [
                    "_T1@@"
                ]
            }
        },
        "push_node_by_path_to_frontend": {
            "name": "push_node_by_path_to_frontend",
            "location": 960,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, NodeId)]"
            ],
            "arguments": {
                "path": [
                    "_T0@@"
                ]
            }
        },
        "push_nodes_by_backend_ids_to_frontend": {
            "name": "push_nodes_by_backend_ids_to_frontend",
            "location": 981,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, list)]"
            ],
            "arguments": {
                "backend_node_ids": []
            }
        },
        "query_selector": {
            "name": "query_selector",
            "location": 1002,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "node_id": [],
                "selector": []
            }
        },
        "query_selector_all": {
            "name": "query_selector_all",
            "location": 1024,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "node_id": [],
                "selector": []
            }
        },
        "redo": {
            "name": "redo",
            "location": 1046,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "remove_attribute": {
            "name": "remove_attribute",
            "location": 1058,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "name": []
            }
        },
        "remove_node": {
            "name": "remove_node",
            "location": 1078,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "request_child_nodes": {
            "name": "request_child_nodes",
            "location": 1095,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "depth": [],
                "pierce": []
            }
        },
        "request_node": {
            "name": "request_node",
            "location": 1122,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "object_id": []
            }
        },
        "resolve_node": {
            "name": "resolve_node",
            "location": 1143,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, runtime.RemoteObject)]"
            ],
            "arguments": {
                "node_id": [],
                "backend_node_id": [],
                "object_group": [],
                "execution_context_id": []
            }
        },
        "set_attribute_value": {
            "name": "set_attribute_value",
            "location": 1175,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "name": [],
                "value": []
            }
        },
        "set_attributes_as_text": {
            "name": "set_attributes_as_text",
            "location": 1198,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "text": [],
                "name": []
            }
        },
        "set_file_input_files": {
            "name": "set_file_input_files",
            "location": 1223,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "files": [],
                "node_id": [],
                "backend_node_id": [],
                "object_id": []
            }
        },
        "get_file_info": {
            "name": "get_file_info",
            "location": 1252,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "object_id": []
            }
        },
        "set_inspected_node": {
            "name": "set_inspected_node",
            "location": 1274,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": []
            }
        },
        "set_node_name": {
            "name": "set_node_name",
            "location": 1294,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, NodeId)]"
            ],
            "arguments": {
                "node_id": [],
                "name": []
            }
        },
        "set_node_value": {
            "name": "set_node_value",
            "location": 1316,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "value": []
            }
        },
        "set_outer_html": {
            "name": "set_outer_html",
            "location": 1336,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "outer_html": []
            }
        },
        "undo": {
            "name": "undo",
            "location": 1356,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_frame_owner": {
            "name": "get_frame_owner",
            "location": 1368,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(BackendNodeId, Optional[NodeId])])]"
            ],
            "arguments": {
                "frame_id": []
            }
        },
        "NodeId.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "_TNodeId@@NodeId@@"
            ],
            "arguments": {
                "self": [
                    "_TNodeId@@NodeId@@"
                ]
            }
        },
        "NodeId.from_json": {
            "name": "from_json",
            "location": 26,
            "return": [
                "_TNodeId@@NodeId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNodeId]"
                ],
                "json": []
            }
        },
        "NodeId.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendNodeId.to_json": {
            "name": "to_json",
            "location": 38,
            "return": [
                "_TBackendNodeId@@BackendNodeId@@"
            ],
            "arguments": {
                "self": [
                    "_TBackendNodeId@@BackendNodeId@@"
                ]
            }
        },
        "BackendNodeId.from_json": {
            "name": "from_json",
            "location": 42,
            "return": [
                "_TBackendNodeId@@BackendNodeId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBackendNodeId]"
                ],
                "json": []
            }
        },
        "BackendNodeId.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendNode.to_json": {
            "name": "to_json",
            "location": 62,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendNode.from_json": {
            "name": "from_json",
            "location": 70,
            "return": [
                "_TBackendNode@@BackendNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBackendNode]"
                ],
                "json": []
            }
        },
        "PseudoType.to_json": {
            "name": "to_json",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoType.from_json": {
            "name": "from_json",
            "location": 102,
            "return": [
                "_TPseudoType@@PseudoType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPseudoType]"
                ],
                "json": []
            }
        },
        "ShadowRootType.to_json": {
            "name": "to_json",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShadowRootType.from_json": {
            "name": "from_json",
            "location": 118,
            "return": [
                "_TShadowRootType@@ShadowRootType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShadowRootType]"
                ],
                "json": []
            }
        },
        "Node.to_json": {
            "name": "to_json",
            "location": 214,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.from_json": {
            "name": "from_json",
            "location": 269,
            "return": [
                "_TNode@@Node@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNode]"
                ],
                "json": []
            }
        },
        "RGBA.to_json": {
            "name": "to_json",
            "location": 319,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.from_json": {
            "name": "from_json",
            "location": 329,
            "return": [
                "_TRGBA@@RGBA@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRGBA]"
                ],
                "json": []
            }
        },
        "Quad.to_json": {
            "name": "to_json",
            "location": 342,
            "return": [
                "_TQuad@@Quad@@"
            ],
            "arguments": {
                "self": [
                    "_TQuad@@Quad@@"
                ]
            }
        },
        "Quad.from_json": {
            "name": "from_json",
            "location": 346,
            "return": [
                "_TQuad@@Quad@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TQuad]"
                ],
                "json": []
            }
        },
        "Quad.__repr__": {
            "name": "__repr__",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxModel.to_json": {
            "name": "to_json",
            "location": 379,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoxModel.from_json": {
            "name": "from_json",
            "location": 392,
            "return": [
                "_TBoxModel@@BoxModel@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBoxModel]"
                ],
                "json": []
            }
        },
        "ShapeOutsideInfo.to_json": {
            "name": "to_json",
            "location": 418,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeOutsideInfo.from_json": {
            "name": "from_json",
            "location": 426,
            "return": [
                "_TShapeOutsideInfo@@ShapeOutsideInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShapeOutsideInfo]"
                ],
                "json": []
            }
        },
        "Rect.to_json": {
            "name": "to_json",
            "location": 451,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.from_json": {
            "name": "from_json",
            "location": 460,
            "return": [
                "_TRect@@Rect@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRect]"
                ],
                "json": []
            }
        },
        "AttributeModified.from_json": {
            "name": "from_json",
            "location": 1409,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "AttributeRemoved.from_json": {
            "name": "from_json",
            "location": 1429,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "CharacterDataModified.from_json": {
            "name": "from_json",
            "location": 1448,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ChildNodeCountUpdated.from_json": {
            "name": "from_json",
            "location": 1467,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ChildNodeInserted.from_json": {
            "name": "from_json",
            "location": 1488,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ChildNodeRemoved.from_json": {
            "name": "from_json",
            "location": 1508,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DistributedNodesUpdated.from_json": {
            "name": "from_json",
            "location": 1529,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DocumentUpdated.from_json": {
            "name": "from_json",
            "location": 1545,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "InlineStyleInvalidated.from_json": {
            "name": "from_json",
            "location": 1563,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "PseudoElementAdded.from_json": {
            "name": "from_json",
            "location": 1583,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "PseudoElementRemoved.from_json": {
            "name": "from_json",
            "location": 1604,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "SetChildNodes.from_json": {
            "name": "from_json",
            "location": 1624,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ShadowRootPopped.from_json": {
            "name": "from_json",
            "location": 1645,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ShadowRootPushed.from_json": {
            "name": "from_json",
            "location": 1666,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/dom_debugger.py": {
        "get_event_listeners": {
            "name": "get_event_listeners",
            "location": 102,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "object_id": [],
                "depth": [],
                "pierce": []
            }
        },
        "remove_dom_breakpoint": {
            "name": "remove_dom_breakpoint",
            "location": 129,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "type_": []
            }
        },
        "remove_event_listener_breakpoint": {
            "name": "remove_event_listener_breakpoint",
            "location": 149,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "event_name": [
                    "_T0@@"
                ],
                "target_name": [
                    "_T1@@"
                ]
            }
        },
        "remove_instrumentation_breakpoint": {
            "name": "remove_instrumentation_breakpoint",
            "location": 170,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "event_name": [
                    "_T0@@"
                ]
            }
        },
        "remove_xhr_breakpoint": {
            "name": "remove_xhr_breakpoint",
            "location": 189,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "url": [
                    "_T0@@"
                ]
            }
        },
        "set_dom_breakpoint": {
            "name": "set_dom_breakpoint",
            "location": 206,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "node_id": [],
                "type_": []
            }
        },
        "set_event_listener_breakpoint": {
            "name": "set_event_listener_breakpoint",
            "location": 226,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "event_name": [
                    "_T0@@"
                ],
                "target_name": [
                    "_T1@@"
                ]
            }
        },
        "set_instrumentation_breakpoint": {
            "name": "set_instrumentation_breakpoint",
            "location": 247,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "event_name": [
                    "_T0@@"
                ]
            }
        },
        "set_xhr_breakpoint": {
            "name": "set_xhr_breakpoint",
            "location": 266,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "url": [
                    "_T0@@"
                ]
            }
        },
        "DOMBreakpointType.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DOMBreakpointType.from_json": {
            "name": "from_json",
            "location": 30,
            "return": [
                "_TDOMBreakpointType@@DOMBreakpointType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDOMBreakpointType]"
                ],
                "json": []
            }
        },
        "EventListener.to_json": {
            "name": "to_json",
            "location": 69,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventListener.from_json": {
            "name": "from_json",
            "location": 87,
            "return": [
                "_TEventListener@@EventListener@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEventListener]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/dom_snapshot.py": {
        "disable": {
            "name": "disable",
            "location": 720,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 730,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_snapshot": {
            "name": "get_snapshot",
            "location": 741,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T1, _T2, _T3)])])])], Any, Tuple[(list, list, list)])]"
            ],
            "arguments": {
                "computed_style_whitelist": [],
                "include_event_listeners": [
                    "_T1@@"
                ],
                "include_paint_order": [
                    "_T2@@"
                ],
                "include_user_agent_shadow_tree": [
                    "_T3@@"
                ]
            }
        },
        "capture_snapshot": {
            "name": "capture_snapshot",
            "location": 785,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T1)])])])], Any, Tuple[(list, List[str])])]"
            ],
            "arguments": {
                "computed_styles": [],
                "include_dom_rects": [
                    "_T1@@"
                ]
            }
        },
        "DOMNode.to_json": {
            "name": "to_json",
            "location": 114,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DOMNode.from_json": {
            "name": "from_json",
            "location": 171,
            "return": [
                "_TDOMNode@@DOMNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDOMNode]"
                ],
                "json": []
            }
        },
        "InlineTextBox.to_json": {
            "name": "to_json",
            "location": 221,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineTextBox.from_json": {
            "name": "from_json",
            "location": 229,
            "return": [
                "_TInlineTextBox@@InlineTextBox@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInlineTextBox]"
                ],
                "json": []
            }
        },
        "LayoutTreeNode.to_json": {
            "name": "to_json",
            "location": 265,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayoutTreeNode.from_json": {
            "name": "from_json",
            "location": 282,
            "return": [
                "_TLayoutTreeNode@@LayoutTreeNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLayoutTreeNode]"
                ],
                "json": []
            }
        },
        "ComputedStyle.to_json": {
            "name": "to_json",
            "location": 302,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputedStyle.from_json": {
            "name": "from_json",
            "location": 308,
            "return": [
                "_TComputedStyle@@ComputedStyle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TComputedStyle]"
                ],
                "json": []
            }
        },
        "NameValue.to_json": {
            "name": "to_json",
            "location": 325,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameValue.from_json": {
            "name": "from_json",
            "location": 332,
            "return": [
                "_TNameValue@@NameValue@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNameValue]"
                ],
                "json": []
            }
        },
        "StringIndex.to_json": {
            "name": "to_json",
            "location": 343,
            "return": [
                "_TStringIndex@@StringIndex@@"
            ],
            "arguments": {
                "self": [
                    "_TStringIndex@@StringIndex@@"
                ]
            }
        },
        "StringIndex.from_json": {
            "name": "from_json",
            "location": 347,
            "return": [
                "_TStringIndex@@StringIndex@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStringIndex]"
                ],
                "json": []
            }
        },
        "StringIndex.__repr__": {
            "name": "__repr__",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayOfStrings.to_json": {
            "name": "to_json",
            "location": 358,
            "return": [
                "_TArrayOfStrings@@ArrayOfStrings@@"
            ],
            "arguments": {
                "self": [
                    "_TArrayOfStrings@@ArrayOfStrings@@"
                ]
            }
        },
        "ArrayOfStrings.from_json": {
            "name": "from_json",
            "location": 362,
            "return": [
                "_TArrayOfStrings@@ArrayOfStrings@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TArrayOfStrings]"
                ],
                "json": []
            }
        },
        "ArrayOfStrings.__repr__": {
            "name": "__repr__",
            "location": 365,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RareStringData.to_json": {
            "name": "to_json",
            "location": 378,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RareStringData.from_json": {
            "name": "from_json",
            "location": 385,
            "return": [
                "_TRareStringData@@RareStringData@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRareStringData]"
                ],
                "json": []
            }
        },
        "RareBooleanData.to_json": {
            "name": "to_json",
            "location": 396,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RareBooleanData.from_json": {
            "name": "from_json",
            "location": 402,
            "return": [
                "_TRareBooleanData@@RareBooleanData@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRareBooleanData]"
                ],
                "json": []
            }
        },
        "RareIntegerData.to_json": {
            "name": "to_json",
            "location": 414,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RareIntegerData.from_json": {
            "name": "from_json",
            "location": 421,
            "return": [
                "_TRareIntegerData@@RareIntegerData@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRareIntegerData]"
                ],
                "json": []
            }
        },
        "Rectangle.to_json": {
            "name": "to_json",
            "location": 429,
            "return": [
                "_TRectangle@@Rectangle@@"
            ],
            "arguments": {
                "self": [
                    "_TRectangle@@Rectangle@@"
                ]
            }
        },
        "Rectangle.from_json": {
            "name": "from_json",
            "location": 433,
            "return": [
                "_TRectangle@@Rectangle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRectangle]"
                ],
                "json": []
            }
        },
        "Rectangle.__repr__": {
            "name": "__repr__",
            "location": 436,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentSnapshot.to_json": {
            "name": "to_json",
            "location": 481,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentSnapshot.from_json": {
            "name": "from_json",
            "location": 500,
            "return": [
                "_TDocumentSnapshot@@DocumentSnapshot@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDocumentSnapshot]"
                ],
                "json": []
            }
        },
        "NodeTreeSnapshot.to_json": {
            "name": "to_json",
            "location": 569,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeTreeSnapshot.from_json": {
            "name": "from_json",
            "location": 604,
            "return": [
                "_TNodeTreeSnapshot@@NodeTreeSnapshot@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNodeTreeSnapshot]"
                ],
                "json": []
            }
        },
        "LayoutTreeSnapshot.to_json": {
            "name": "to_json",
            "location": 653,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayoutTreeSnapshot.from_json": {
            "name": "from_json",
            "location": 669,
            "return": [
                "_TLayoutTreeSnapshot@@LayoutTreeSnapshot@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLayoutTreeSnapshot]"
                ],
                "json": []
            }
        },
        "TextBoxSnapshot.to_json": {
            "name": "to_json",
            "location": 702,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextBoxSnapshot.from_json": {
            "name": "from_json",
            "location": 711,
            "return": [
                "_TTextBoxSnapshot@@TextBoxSnapshot@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTextBoxSnapshot]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/dom_storage.py": {
        "clear": {
            "name": "clear",
            "location": 55,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "storage_id": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 70,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 80,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_dom_storage_items": {
            "name": "get_dom_storage_items",
            "location": 90,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "storage_id": []
            }
        },
        "remove_dom_storage_item": {
            "name": "remove_dom_storage_item",
            "location": 107,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "storage_id": [],
                "key": []
            }
        },
        "set_dom_storage_item": {
            "name": "set_dom_storage_item",
            "location": 125,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "storage_id": [],
                "key": [],
                "value": []
            }
        },
        "StorageId.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageId.from_json": {
            "name": "from_json",
            "location": 33,
            "return": [
                "_TStorageId@@StorageId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStorageId]"
                ],
                "json": []
            }
        },
        "Item.to_json": {
            "name": "to_json",
            "location": 44,
            "return": [
                "_TItem@@Item@@"
            ],
            "arguments": {
                "self": [
                    "_TItem@@Item@@"
                ]
            }
        },
        "Item.from_json": {
            "name": "from_json",
            "location": 48,
            "return": [
                "_TItem@@Item@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TItem]"
                ],
                "json": []
            }
        },
        "Item.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DomStorageItemAdded.from_json": {
            "name": "from_json",
            "location": 154,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DomStorageItemRemoved.from_json": {
            "name": "from_json",
            "location": 169,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DomStorageItemUpdated.from_json": {
            "name": "from_json",
            "location": 185,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DomStorageItemsCleared.from_json": {
            "name": "from_json",
            "location": 200,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/emulation.py": {
        "can_emulate": {
            "name": "can_emulate",
            "location": 64,
            "return": [
                "Generator[(Dict[(str, str)], Any, bool)]"
            ],
            "arguments": {}
        },
        "clear_device_metrics_override": {
            "name": "clear_device_metrics_override",
            "location": 77,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "clear_geolocation_override": {
            "name": "clear_geolocation_override",
            "location": 87,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "reset_page_scale_factor": {
            "name": "reset_page_scale_factor",
            "location": 97,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_focus_emulation_enabled": {
            "name": "set_focus_emulation_enabled",
            "location": 109,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "set_cpu_throttling_rate": {
            "name": "set_cpu_throttling_rate",
            "location": 128,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "rate": [
                    "_T0@@"
                ]
            }
        },
        "set_default_background_color_override": {
            "name": "set_default_background_color_override",
            "location": 147,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "color": []
            }
        },
        "set_device_metrics_override": {
            "name": "set_device_metrics_override",
            "location": 166,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "width": [],
                "height": [],
                "device_scale_factor": [],
                "mobile": [],
                "scale": [],
                "screen_width": [],
                "screen_height": [],
                "position_x": [],
                "position_y": [],
                "dont_set_visible_size": [],
                "screen_orientation": [],
                "viewport": []
            }
        },
        "set_scrollbars_hidden": {
            "name": "set_scrollbars_hidden",
            "location": 226,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "hidden": [
                    "_T0@@"
                ]
            }
        },
        "set_document_cookie_disabled": {
            "name": "set_document_cookie_disabled",
            "location": 245,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "disabled": [
                    "_T0@@"
                ]
            }
        },
        "set_emit_touch_events_for_mouse": {
            "name": "set_emit_touch_events_for_mouse",
            "location": 264,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ],
                "configuration": [
                    "_T1@@"
                ]
            }
        },
        "set_emulated_media": {
            "name": "set_emulated_media",
            "location": 287,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "media": [
                    "_T0@@"
                ]
            }
        },
        "set_geolocation_override": {
            "name": "set_geolocation_override",
            "location": 304,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "latitude": [
                    "_T0@@"
                ],
                "longitude": [
                    "_T1@@"
                ],
                "accuracy": [
                    "_T2@@"
                ]
            }
        },
        "set_navigator_overrides": {
            "name": "set_navigator_overrides",
            "location": 332,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "platform": [
                    "_T0@@"
                ]
            }
        },
        "set_page_scale_factor": {
            "name": "set_page_scale_factor",
            "location": 353,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "page_scale_factor": [
                    "_T0@@"
                ]
            }
        },
        "set_script_execution_disabled": {
            "name": "set_script_execution_disabled",
            "location": 372,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "value": [
                    "_T0@@"
                ]
            }
        },
        "set_touch_emulation_enabled": {
            "name": "set_touch_emulation_enabled",
            "location": 389,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ],
                "max_touch_points": [
                    "_T1@@"
                ]
            }
        },
        "set_virtual_time_policy": {
            "name": "set_virtual_time_policy",
            "location": 410,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, float)]"
            ],
            "arguments": {
                "policy": [],
                "budget": [],
                "max_virtual_time_task_starvation_count": [],
                "wait_for_navigation": [],
                "initial_virtual_time": []
            }
        },
        "set_timezone_override": {
            "name": "set_timezone_override",
            "location": 448,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "timezone_id": [
                    "_T0@@"
                ]
            }
        },
        "set_visible_size": {
            "name": "set_visible_size",
            "location": 468,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "width": [
                    "_T0@@"
                ],
                "height": [
                    "_T1@@"
                ]
            }
        },
        "set_user_agent_override": {
            "name": "set_user_agent_override",
            "location": 494,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "user_agent": [
                    "_T0@@"
                ],
                "accept_language": [
                    "_T1@@"
                ],
                "platform": [
                    "_T2@@"
                ]
            }
        },
        "ScreenOrientation.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenOrientation.from_json": {
            "name": "from_json",
            "location": 38,
            "return": [
                "_TScreenOrientation@@ScreenOrientation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScreenOrientation]"
                ],
                "json": []
            }
        },
        "VirtualTimePolicy.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualTimePolicy.from_json": {
            "name": "from_json",
            "location": 60,
            "return": [
                "_TVirtualTimePolicy@@VirtualTimePolicy@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVirtualTimePolicy]"
                ],
                "json": []
            }
        },
        "VirtualTimeBudgetExpired.from_json": {
            "name": "from_json",
            "location": 530,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/fetch.py": {
        "disable": {
            "name": "disable",
            "location": 177,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 187,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "patterns": [],
                "handle_auth_requests": [
                    "_T1@@"
                ]
            }
        },
        "fail_request": {
            "name": "fail_request",
            "location": 210,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "request_id": [],
                "error_reason": []
            }
        },
        "fulfill_request": {
            "name": "fulfill_request",
            "location": 230,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "request_id": [],
                "response_code": [],
                "response_headers": [],
                "body": [],
                "response_phrase": []
            }
        },
        "continue_request": {
            "name": "continue_request",
            "location": 261,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "request_id": [],
                "url": [],
                "method": [],
                "post_data": [],
                "headers": []
            }
        },
        "continue_with_auth": {
            "name": "continue_with_auth",
            "location": 294,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "request_id": [],
                "auth_challenge_response": []
            }
        },
        "get_response_body": {
            "name": "get_response_body",
            "location": 314,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(str, bool)])]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "take_response_body_as_stream": {
            "name": "take_response_body_as_stream",
            "location": 344,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, io.StreamHandle)]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "RequestId.to_json": {
            "name": "to_json",
            "location": 23,
            "return": [
                "_TRequestId@@RequestId@@"
            ],
            "arguments": {
                "self": [
                    "_TRequestId@@RequestId@@"
                ]
            }
        },
        "RequestId.from_json": {
            "name": "from_json",
            "location": 27,
            "return": [
                "_TRequestId@@RequestId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestId]"
                ],
                "json": []
            }
        },
        "RequestId.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStage.to_json": {
            "name": "to_json",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStage.from_json": {
            "name": "from_json",
            "location": 47,
            "return": [
                "_TRequestStage@@RequestStage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestStage]"
                ],
                "json": []
            }
        },
        "RequestPattern.to_json": {
            "name": "to_json",
            "location": 63,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestPattern.from_json": {
            "name": "from_json",
            "location": 74,
            "return": [
                "_TRequestPattern@@RequestPattern@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestPattern]"
                ],
                "json": []
            }
        },
        "HeaderEntry.to_json": {
            "name": "to_json",
            "location": 91,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderEntry.from_json": {
            "name": "from_json",
            "location": 98,
            "return": [
                "_THeaderEntry@@HeaderEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THeaderEntry]"
                ],
                "json": []
            }
        },
        "AuthChallenge.to_json": {
            "name": "to_json",
            "location": 122,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthChallenge.from_json": {
            "name": "from_json",
            "location": 132,
            "return": [
                "_TAuthChallenge@@AuthChallenge@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthChallenge]"
                ],
                "json": []
            }
        },
        "AuthChallengeResponse.to_json": {
            "name": "to_json",
            "location": 159,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthChallengeResponse.from_json": {
            "name": "from_json",
            "location": 169,
            "return": [
                "_TAuthChallengeResponse@@AuthChallengeResponse@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthChallengeResponse]"
                ],
                "json": []
            }
        },
        "RequestPaused.from_json": {
            "name": "from_json",
            "location": 402,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "AuthRequired.from_json": {
            "name": "from_json",
            "location": 436,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/headless_experimental.py": {
        "begin_frame": {
            "name": "begin_frame",
            "location": 42,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(bool, Optional[str])])]"
            ],
            "arguments": {
                "frame_time_ticks": [],
                "interval": [],
                "no_display_updates": [],
                "screenshot": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 83,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 93,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "ScreenshotParams.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenshotParams.from_json": {
            "name": "from_json",
            "location": 35,
            "return": [
                "_TScreenshotParams@@ScreenshotParams@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScreenshotParams]"
                ],
                "json": []
            }
        },
        "NeedsBeginFramesChanged.from_json": {
            "name": "from_json",
            "location": 113,
            "return": [
                "_TScreenshotParams@@ScreenshotParams@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScreenshotParams]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/heap_profiler.py": {
        "add_inspected_heap_object": {
            "name": "add_inspected_heap_object",
            "location": 121,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "heap_object_id": []
            }
        },
        "collect_garbage": {
            "name": "collect_garbage",
            "location": 139,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "disable": {
            "name": "disable",
            "location": 147,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 155,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_heap_object_id": {
            "name": "get_heap_object_id",
            "location": 163,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, HeapSnapshotObjectId)]"
            ],
            "arguments": {
                "object_id": []
            }
        },
        "get_object_by_heap_object_id": {
            "name": "get_object_by_heap_object_id",
            "location": 180,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, runtime.RemoteObject)]"
            ],
            "arguments": {
                "object_id": [],
                "object_group": []
            }
        },
        "get_sampling_profile": {
            "name": "get_sampling_profile",
            "location": 201,
            "return": [
                "Generator[(Dict[(str, str)], Any, SamplingHeapProfile)]"
            ],
            "arguments": {}
        },
        "start_sampling": {
            "name": "start_sampling",
            "location": 214,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "sampling_interval": [
                    "_T0@@"
                ]
            }
        },
        "start_tracking_heap_objects": {
            "name": "start_tracking_heap_objects",
            "location": 230,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "track_allocations": [
                    "_T0@@"
                ]
            }
        },
        "stop_sampling": {
            "name": "stop_sampling",
            "location": 246,
            "return": [
                "Generator[(Dict[(str, str)], Any, SamplingHeapProfile)]"
            ],
            "arguments": {}
        },
        "stop_tracking_heap_objects": {
            "name": "stop_tracking_heap_objects",
            "location": 259,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "report_progress": [
                    "_T0@@"
                ]
            }
        },
        "take_heap_snapshot": {
            "name": "take_heap_snapshot",
            "location": 275,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "report_progress": [
                    "_T0@@"
                ]
            }
        },
        "HeapSnapshotObjectId.to_json": {
            "name": "to_json",
            "location": 21,
            "return": [
                "_THeapSnapshotObjectId@@HeapSnapshotObjectId@@"
            ],
            "arguments": {
                "self": [
                    "_THeapSnapshotObjectId@@HeapSnapshotObjectId@@"
                ]
            }
        },
        "HeapSnapshotObjectId.from_json": {
            "name": "from_json",
            "location": 25,
            "return": [
                "_THeapSnapshotObjectId@@HeapSnapshotObjectId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THeapSnapshotObjectId]"
                ],
                "json": []
            }
        },
        "HeapSnapshotObjectId.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingHeapProfileNode.to_json": {
            "name": "to_json",
            "location": 49,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingHeapProfileNode.from_json": {
            "name": "from_json",
            "location": 58,
            "return": [
                "_TSamplingHeapProfileNode@@SamplingHeapProfileNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSamplingHeapProfileNode]"
                ],
                "json": []
            }
        },
        "SamplingHeapProfileSample.to_json": {
            "name": "to_json",
            "location": 82,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingHeapProfileSample.from_json": {
            "name": "from_json",
            "location": 90,
            "return": [
                "_TSamplingHeapProfileSample@@SamplingHeapProfileSample@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSamplingHeapProfileSample]"
                ],
                "json": []
            }
        },
        "SamplingHeapProfile.to_json": {
            "name": "to_json",
            "location": 107,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingHeapProfile.from_json": {
            "name": "from_json",
            "location": 114,
            "return": [
                "_TSamplingHeapProfile@@SamplingHeapProfile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSamplingHeapProfile]"
                ],
                "json": []
            }
        },
        "AddHeapSnapshotChunk.from_json": {
            "name": "from_json",
            "location": 297,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "HeapStatsUpdate.from_json": {
            "name": "from_json",
            "location": 315,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LastSeenObjectId.from_json": {
            "name": "from_json",
            "location": 333,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ReportHeapSnapshotProgress.from_json": {
            "name": "from_json",
            "location": 348,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ResetProfiles.from_json": {
            "name": "from_json",
            "location": 362,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/indexed_db.py": {
        "clear_object_store": {
            "name": "clear_object_store",
            "location": 261,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ],
                "database_name": [
                    "_T1@@"
                ],
                "object_store_name": [
                    "_T2@@"
                ]
            }
        },
        "delete_database": {
            "name": "delete_database",
            "location": 284,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ],
                "database_name": [
                    "_T1@@"
                ]
            }
        },
        "delete_object_store_entries": {
            "name": "delete_object_store_entries",
            "location": 304,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "security_origin": [],
                "database_name": [],
                "object_store_name": [],
                "key_range": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 330,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 340,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "request_data": {
            "name": "request_data",
            "location": 350,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(list, bool)])]"
            ],
            "arguments": {
                "security_origin": [],
                "database_name": [],
                "object_store_name": [],
                "index_name": [],
                "skip_count": [],
                "page_size": [],
                "key_range": []
            }
        },
        "get_metadata": {
            "name": "get_metadata",
            "location": 394,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, Tuple[(float, float)])]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ],
                "database_name": [
                    "_T1@@"
                ],
                "object_store_name": [
                    "_T2@@"
                ]
            }
        },
        "request_database": {
            "name": "request_database",
            "location": 425,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, DatabaseWithObjectStores)]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ],
                "database_name": [
                    "_T1@@"
                ]
            }
        },
        "request_database_names": {
            "name": "request_database_names",
            "location": 447,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, List[str])]"
            ],
            "arguments": {
                "security_origin": [
                    "_T0@@"
                ]
            }
        },
        "DatabaseWithObjectStores.to_json": {
            "name": "to_json",
            "location": 32,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseWithObjectStores.from_json": {
            "name": "from_json",
            "location": 40,
            "return": [
                "_TDatabaseWithObjectStores@@DatabaseWithObjectStores@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDatabaseWithObjectStores]"
                ],
                "json": []
            }
        },
        "ObjectStore.to_json": {
            "name": "to_json",
            "location": 65,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectStore.from_json": {
            "name": "from_json",
            "location": 74,
            "return": [
                "_TObjectStore@@ObjectStore@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TObjectStore]"
                ],
                "json": []
            }
        },
        "ObjectStoreIndex.to_json": {
            "name": "to_json",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectStoreIndex.from_json": {
            "name": "from_json",
            "location": 109,
            "return": [
                "_TObjectStoreIndex@@ObjectStoreIndex@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TObjectStoreIndex]"
                ],
                "json": []
            }
        },
        "Key.to_json": {
            "name": "to_json",
            "location": 138,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.from_json": {
            "name": "from_json",
            "location": 152,
            "return": [
                "_TKey@@Key@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKey]"
                ],
                "json": []
            }
        },
        "KeyRange.to_json": {
            "name": "to_json",
            "location": 179,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyRange.from_json": {
            "name": "from_json",
            "location": 190,
            "return": [
                "_TKeyRange@@KeyRange@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeyRange]"
                ],
                "json": []
            }
        },
        "DataEntry.to_json": {
            "name": "to_json",
            "location": 213,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataEntry.from_json": {
            "name": "from_json",
            "location": 221,
            "return": [
                "_TDataEntry@@DataEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDataEntry]"
                ],
                "json": []
            }
        },
        "KeyPath.to_json": {
            "name": "to_json",
            "location": 243,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPath.from_json": {
            "name": "from_json",
            "location": 253,
            "return": [
                "_TKeyPath@@KeyPath@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TKeyPath]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/input_.py": {
        "dispatch_key_event": {
            "name": "dispatch_key_event",
            "location": 96,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "type_": [],
                "modifiers": [],
                "timestamp": [],
                "text": [],
                "unmodified_text": [],
                "key_identifier": [],
                "code": [],
                "key": [],
                "windows_virtual_key_code": [],
                "native_virtual_key_code": [],
                "auto_repeat": [],
                "is_keypad": [],
                "is_system_key": [],
                "location": []
            }
        },
        "insert_text": {
            "name": "insert_text",
            "location": 165,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "text": [
                    "_T0@@"
                ]
            }
        },
        "dispatch_mouse_event": {
            "name": "dispatch_mouse_event",
            "location": 185,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "type_": [],
                "x": [],
                "y": [],
                "modifiers": [],
                "timestamp": [],
                "button": [],
                "buttons": [],
                "click_count": [],
                "delta_x": [],
                "delta_y": [],
                "pointer_type": []
            }
        },
        "dispatch_touch_event": {
            "name": "dispatch_touch_event",
            "location": 240,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "type_": [],
                "touch_points": [],
                "modifiers": [],
                "timestamp": []
            }
        },
        "emulate_touch_from_mouse_event": {
            "name": "emulate_touch_from_mouse_event",
            "location": 268,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "type_": [],
                "x": [],
                "y": [],
                "button": [],
                "timestamp": [],
                "delta_x": [],
                "delta_y": [],
                "modifiers": [],
                "click_count": []
            }
        },
        "set_ignore_input_events": {
            "name": "set_ignore_input_events",
            "location": 316,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "ignore": [
                    "_T0@@"
                ]
            }
        },
        "synthesize_pinch_gesture": {
            "name": "synthesize_pinch_gesture",
            "location": 333,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "scale_factor": [],
                "relative_speed": [],
                "gesture_source_type": []
            }
        },
        "synthesize_scroll_gesture": {
            "name": "synthesize_scroll_gesture",
            "location": 366,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "x_distance": [],
                "y_distance": [],
                "x_overscroll": [],
                "y_overscroll": [],
                "prevent_fling": [],
                "speed": [],
                "gesture_source_type": [],
                "repeat_count": [],
                "repeat_delay_ms": [],
                "interaction_marker_name": []
            }
        },
        "synthesize_tap_gesture": {
            "name": "synthesize_tap_gesture",
            "location": 428,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "duration": [],
                "tap_count": [],
                "gesture_source_type": []
            }
        },
        "TouchPoint.to_json": {
            "name": "to_json",
            "location": 39,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TouchPoint.from_json": {
            "name": "from_json",
            "location": 56,
            "return": [
                "_TTouchPoint@@TouchPoint@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTouchPoint]"
                ],
                "json": []
            }
        },
        "GestureSourceType.to_json": {
            "name": "to_json",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GestureSourceType.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [
                "_TGestureSourceType@@GestureSourceType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGestureSourceType]"
                ],
                "json": []
            }
        },
        "TimeSinceEpoch.to_json": {
            "name": "to_json",
            "location": 85,
            "return": [
                "_TTimeSinceEpoch@@TimeSinceEpoch@@"
            ],
            "arguments": {
                "self": [
                    "_TTimeSinceEpoch@@TimeSinceEpoch@@"
                ]
            }
        },
        "TimeSinceEpoch.from_json": {
            "name": "from_json",
            "location": 89,
            "return": [
                "_TTimeSinceEpoch@@TimeSinceEpoch@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTimeSinceEpoch]"
                ],
                "json": []
            }
        },
        "TimeSinceEpoch.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/inspector.py": {
        "disable": {
            "name": "disable",
            "location": 15,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 25,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "Detached.from_json": {
            "name": "from_json",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetCrashed.from_json": {
            "name": "from_json",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetReloadedAfterCrash.from_json": {
            "name": "from_json",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/io.py": {
        "close": {
            "name": "close",
            "location": 33,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "handle": []
            }
        },
        "read": {
            "name": "read",
            "location": 50,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[bool], str, bool)])]"
            ],
            "arguments": {
                "handle": [],
                "offset": [],
                "size": []
            }
        },
        "resolve_blob": {
            "name": "resolve_blob",
            "location": 85,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "object_id": []
            }
        },
        "StreamHandle.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "_TStreamHandle@@StreamHandle@@"
            ],
            "arguments": {
                "self": [
                    "_TStreamHandle@@StreamHandle@@"
                ]
            }
        },
        "StreamHandle.from_json": {
            "name": "from_json",
            "location": 26,
            "return": [
                "_TStreamHandle@@StreamHandle@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStreamHandle]"
                ],
                "json": []
            }
        },
        "StreamHandle.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/layer_tree.py": {
        "compositing_reasons": {
            "name": "compositing_reasons",
            "location": 259,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "layer_id": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 278,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 288,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "load_snapshot": {
            "name": "load_snapshot",
            "location": 298,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, SnapshotId)]"
            ],
            "arguments": {
                "tiles": []
            }
        },
        "make_snapshot": {
            "name": "make_snapshot",
            "location": 317,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, SnapshotId)]"
            ],
            "arguments": {
                "layer_id": []
            }
        },
        "profile_snapshot": {
            "name": "profile_snapshot",
            "location": 336,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "snapshot_id": [],
                "min_repeat_count": [],
                "min_duration": [],
                "clip_rect": []
            }
        },
        "release_snapshot": {
            "name": "release_snapshot",
            "location": 365,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "snapshot_id": []
            }
        },
        "replay_snapshot": {
            "name": "replay_snapshot",
            "location": 382,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "snapshot_id": [],
                "from_step": [],
                "to_step": [],
                "scale": []
            }
        },
        "snapshot_command_log": {
            "name": "snapshot_command_log",
            "location": 413,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[dict])]"
            ],
            "arguments": {
                "snapshot_id": []
            }
        },
        "LayerId.to_json": {
            "name": "to_json",
            "location": 21,
            "return": [
                "_TLayerId@@LayerId@@"
            ],
            "arguments": {
                "self": [
                    "_TLayerId@@LayerId@@"
                ]
            }
        },
        "LayerId.from_json": {
            "name": "from_json",
            "location": 25,
            "return": [
                "_TLayerId@@LayerId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLayerId]"
                ],
                "json": []
            }
        },
        "LayerId.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotId.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "_TSnapshotId@@SnapshotId@@"
            ],
            "arguments": {
                "self": [
                    "_TSnapshotId@@SnapshotId@@"
                ]
            }
        },
        "SnapshotId.from_json": {
            "name": "from_json",
            "location": 40,
            "return": [
                "_TSnapshotId@@SnapshotId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSnapshotId]"
                ],
                "json": []
            }
        },
        "SnapshotId.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollRect.to_json": {
            "name": "to_json",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollRect.from_json": {
            "name": "from_json",
            "location": 65,
            "return": [
                "_TScrollRect@@ScrollRect@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScrollRect]"
                ],
                "json": []
            }
        },
        "StickyPositionConstraint.to_json": {
            "name": "to_json",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StickyPositionConstraint.from_json": {
            "name": "from_json",
            "location": 100,
            "return": [
                "_TStickyPositionConstraint@@StickyPositionConstraint@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStickyPositionConstraint]"
                ],
                "json": []
            }
        },
        "PictureTile.to_json": {
            "name": "to_json",
            "location": 123,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PictureTile.from_json": {
            "name": "from_json",
            "location": 131,
            "return": [
                "_TPictureTile@@PictureTile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPictureTile]"
                ],
                "json": []
            }
        },
        "Layer.to_json": {
            "name": "to_json",
            "location": 193,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.from_json": {
            "name": "from_json",
            "location": 223,
            "return": [
                "_TLayer@@Layer@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLayer]"
                ],
                "json": []
            }
        },
        "PaintProfile.to_json": {
            "name": "to_json",
            "location": 248,
            "return": [
                "_TPaintProfile@@PaintProfile@@"
            ],
            "arguments": {
                "self": [
                    "_TPaintProfile@@PaintProfile@@"
                ]
            }
        },
        "PaintProfile.from_json": {
            "name": "from_json",
            "location": 252,
            "return": [
                "_TPaintProfile@@PaintProfile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPaintProfile]"
                ],
                "json": []
            }
        },
        "PaintProfile.__repr__": {
            "name": "__repr__",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerPainted.from_json": {
            "name": "from_json",
            "location": 441,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LayerTreeDidChange.from_json": {
            "name": "from_json",
            "location": 455,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/log.py": {
        "clear": {
            "name": "clear",
            "location": 114,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "disable": {
            "name": "disable",
            "location": 124,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 134,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "start_violations_report": {
            "name": "start_violations_report",
            "location": 145,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "config": []
            }
        },
        "stop_violations_report": {
            "name": "stop_violations_report",
            "location": 162,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "LogEntry.to_json": {
            "name": "to_json",
            "location": 53,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.from_json": {
            "name": "from_json",
            "location": 74,
            "return": [
                "_TLogEntry@@LogEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLogEntry]"
                ],
                "json": []
            }
        },
        "ViolationSetting.to_json": {
            "name": "to_json",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ViolationSetting.from_json": {
            "name": "from_json",
            "location": 107,
            "return": [
                "_TViolationSetting@@ViolationSetting@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TViolationSetting]"
                ],
                "json": []
            }
        },
        "EntryAdded.from_json": {
            "name": "from_json",
            "location": 182,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/memory.py": {
        "get_dom_counters": {
            "name": "get_dom_counters",
            "location": 119,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(int, int, int)])]"
            ],
            "arguments": {}
        },
        "prepare_for_leak_detection": {
            "name": "prepare_for_leak_detection",
            "location": 140,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "forcibly_purge_java_script_memory": {
            "name": "forcibly_purge_java_script_memory",
            "location": 148,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_pressure_notifications_suppressed": {
            "name": "set_pressure_notifications_suppressed",
            "location": 158,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "suppressed": [
                    "_T0@@"
                ]
            }
        },
        "simulate_pressure_notification": {
            "name": "simulate_pressure_notification",
            "location": 175,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "level": []
            }
        },
        "start_sampling": {
            "name": "start_sampling",
            "location": 192,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "sampling_interval": [
                    "_T0@@"
                ],
                "suppress_randomness": [
                    "_T1@@"
                ]
            }
        },
        "stop_sampling": {
            "name": "stop_sampling",
            "location": 214,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_all_time_sampling_profile": {
            "name": "get_all_time_sampling_profile",
            "location": 224,
            "return": [
                "Generator[(Dict[(str, str)], Any, SamplingProfile)]"
            ],
            "arguments": {}
        },
        "get_browser_sampling_profile": {
            "name": "get_browser_sampling_profile",
            "location": 238,
            "return": [
                "Generator[(Dict[(str, str)], Any, SamplingProfile)]"
            ],
            "arguments": {}
        },
        "get_sampling_profile": {
            "name": "get_sampling_profile",
            "location": 252,
            "return": [
                "Generator[(Dict[(str, str)], Any, SamplingProfile)]"
            ],
            "arguments": {}
        },
        "PressureLevel.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PressureLevel.from_json": {
            "name": "from_json",
            "location": 26,
            "return": [
                "_TPressureLevel@@PressureLevel@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPressureLevel]"
                ],
                "json": []
            }
        },
        "SamplingProfileNode.to_json": {
            "name": "to_json",
            "location": 44,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingProfileNode.from_json": {
            "name": "from_json",
            "location": 52,
            "return": [
                "_TSamplingProfileNode@@SamplingProfileNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSamplingProfileNode]"
                ],
                "json": []
            }
        },
        "SamplingProfile.to_json": {
            "name": "to_json",
            "location": 69,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingProfile.from_json": {
            "name": "from_json",
            "location": 76,
            "return": [
                "_TSamplingProfile@@SamplingProfile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSamplingProfile]"
                ],
                "json": []
            }
        },
        "Module.to_json": {
            "name": "to_json",
            "location": 101,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Module.from_json": {
            "name": "from_json",
            "location": 110,
            "return": [
                "_TModule@@Module@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TModule]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/network.py": {
        "can_clear_browser_cache": {
            "name": "can_clear_browser_cache",
            "location": 1426,
            "return": [
                "Generator[(Dict[(str, str)], Any, bool)]"
            ],
            "arguments": {}
        },
        "can_clear_browser_cookies": {
            "name": "can_clear_browser_cookies",
            "location": 1442,
            "return": [
                "Generator[(Dict[(str, str)], Any, bool)]"
            ],
            "arguments": {}
        },
        "can_emulate_network_conditions": {
            "name": "can_emulate_network_conditions",
            "location": 1458,
            "return": [
                "Generator[(Dict[(str, str)], Any, bool)]"
            ],
            "arguments": {}
        },
        "clear_browser_cache": {
            "name": "clear_browser_cache",
            "location": 1473,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "clear_browser_cookies": {
            "name": "clear_browser_cookies",
            "location": 1483,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "continue_intercepted_request": {
            "name": "continue_intercepted_request",
            "location": 1494,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "interception_id": [],
                "error_reason": [],
                "raw_response": [],
                "url": [],
                "method": [],
                "post_data": [],
                "headers": [],
                "auth_challenge_response": []
            }
        },
        "delete_cookies": {
            "name": "delete_cookies",
            "location": 1547,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2, _T3)])])])], Any, None)]"
            ],
            "arguments": {
                "name": [
                    "_T0@@"
                ],
                "url": [
                    "_T1@@"
                ],
                "domain": [
                    "_T2@@"
                ],
                "path": [
                    "_T3@@"
                ]
            }
        },
        "disable": {
            "name": "disable",
            "location": 1576,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "emulate_network_conditions": {
            "name": "emulate_network_conditions",
            "location": 1586,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "offline": [],
                "latency": [],
                "download_throughput": [],
                "upload_throughput": [],
                "connection_type": []
            }
        },
        "enable": {
            "name": "enable",
            "location": 1616,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "max_total_buffer_size": [
                    "_T0@@"
                ],
                "max_resource_buffer_size": [
                    "_T1@@"
                ],
                "max_post_data_size": [
                    "_T2@@"
                ]
            }
        },
        "get_all_cookies": {
            "name": "get_all_cookies",
            "location": 1642,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "get_certificate": {
            "name": "get_certificate",
            "location": 1656,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, List[str])]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "get_cookies": {
            "name": "get_cookies",
            "location": 1677,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, list)]"
            ],
            "arguments": {
                "urls": []
            }
        },
        "get_response_body": {
            "name": "get_response_body",
            "location": 1698,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(str, bool)])]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "get_request_post_data": {
            "name": "get_request_post_data",
            "location": 1723,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "get_response_body_for_interception": {
            "name": "get_response_body_for_interception",
            "location": 1742,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(str, bool)])]"
            ],
            "arguments": {
                "interception_id": []
            }
        },
        "take_response_body_for_interception_as_stream": {
            "name": "take_response_body_for_interception_as_stream",
            "location": 1769,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, io.StreamHandle)]"
            ],
            "arguments": {
                "interception_id": []
            }
        },
        "replay_xhr": {
            "name": "replay_xhr",
            "location": 1793,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "request_id": []
            }
        },
        "search_in_response_body": {
            "name": "search_in_response_body",
            "location": 1814,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[debugger.SearchMatch])]"
            ],
            "arguments": {
                "request_id": [],
                "query": [],
                "case_sensitive": [],
                "is_regex": []
            }
        },
        "set_blocked_ur_ls": {
            "name": "set_blocked_ur_ls",
            "location": 1846,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "urls": []
            }
        },
        "set_bypass_service_worker": {
            "name": "set_bypass_service_worker",
            "location": 1865,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "bypass": [
                    "_T0@@"
                ]
            }
        },
        "set_cache_disabled": {
            "name": "set_cache_disabled",
            "location": 1884,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "cache_disabled": [
                    "_T0@@"
                ]
            }
        },
        "set_cookie": {
            "name": "set_cookie",
            "location": 1901,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, bool)]"
            ],
            "arguments": {
                "name": [],
                "value": [],
                "url": [],
                "domain": [],
                "path": [],
                "secure": [],
                "http_only": [],
                "same_site": [],
                "expires": []
            }
        },
        "set_cookies": {
            "name": "set_cookies",
            "location": 1951,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "cookies": []
            }
        },
        "set_data_size_limits_for_test": {
            "name": "set_data_size_limits_for_test",
            "location": 1968,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "max_total_size": [
                    "_T0@@"
                ],
                "max_resource_size": [
                    "_T1@@"
                ]
            }
        },
        "set_extra_http_headers": {
            "name": "set_extra_http_headers",
            "location": 1990,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "headers": []
            }
        },
        "set_request_interception": {
            "name": "set_request_interception",
            "location": 2008,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "patterns": []
            }
        },
        "set_user_agent_override": {
            "name": "set_user_agent_override",
            "location": 2030,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "user_agent": [
                    "_T0@@"
                ],
                "accept_language": [
                    "_T1@@"
                ],
                "platform": [
                    "_T2@@"
                ]
            }
        },
        "ResourceType.to_json": {
            "name": "to_json",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceType.from_json": {
            "name": "from_json",
            "location": 47,
            "return": [
                "_TResourceType@@ResourceType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResourceType]"
                ],
                "json": []
            }
        },
        "LoaderId.to_json": {
            "name": "to_json",
            "location": 55,
            "return": [
                "_TLoaderId@@LoaderId@@"
            ],
            "arguments": {
                "self": [
                    "_TLoaderId@@LoaderId@@"
                ]
            }
        },
        "LoaderId.from_json": {
            "name": "from_json",
            "location": 59,
            "return": [
                "_TLoaderId@@LoaderId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLoaderId]"
                ],
                "json": []
            }
        },
        "LoaderId.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestId.to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "_TRequestId@@RequestId@@"
            ],
            "arguments": {
                "self": [
                    "_TRequestId@@RequestId@@"
                ]
            }
        },
        "RequestId.from_json": {
            "name": "from_json",
            "location": 74,
            "return": [
                "_TRequestId@@RequestId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestId]"
                ],
                "json": []
            }
        },
        "RequestId.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterceptionId.to_json": {
            "name": "to_json",
            "location": 85,
            "return": [
                "_TInterceptionId@@InterceptionId@@"
            ],
            "arguments": {
                "self": [
                    "_TInterceptionId@@InterceptionId@@"
                ]
            }
        },
        "InterceptionId.from_json": {
            "name": "from_json",
            "location": 89,
            "return": [
                "_TInterceptionId@@InterceptionId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInterceptionId]"
                ],
                "json": []
            }
        },
        "InterceptionId.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorReason.to_json": {
            "name": "to_json",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorReason.from_json": {
            "name": "from_json",
            "location": 119,
            "return": [
                "_TErrorReason@@ErrorReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TErrorReason]"
                ],
                "json": []
            }
        },
        "TimeSinceEpoch.to_json": {
            "name": "to_json",
            "location": 127,
            "return": [
                "_TTimeSinceEpoch@@TimeSinceEpoch@@"
            ],
            "arguments": {
                "self": [
                    "_TTimeSinceEpoch@@TimeSinceEpoch@@"
                ]
            }
        },
        "TimeSinceEpoch.from_json": {
            "name": "from_json",
            "location": 131,
            "return": [
                "_TTimeSinceEpoch@@TimeSinceEpoch@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTimeSinceEpoch]"
                ],
                "json": []
            }
        },
        "TimeSinceEpoch.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonotonicTime.to_json": {
            "name": "to_json",
            "location": 142,
            "return": [
                "_TMonotonicTime@@MonotonicTime@@"
            ],
            "arguments": {
                "self": [
                    "_TMonotonicTime@@MonotonicTime@@"
                ]
            }
        },
        "MonotonicTime.from_json": {
            "name": "from_json",
            "location": 146,
            "return": [
                "_TMonotonicTime@@MonotonicTime@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMonotonicTime]"
                ],
                "json": []
            }
        },
        "MonotonicTime.__repr__": {
            "name": "__repr__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.to_json": {
            "name": "to_json",
            "location": 157,
            "return": [
                "_THeaders@@Headers@@"
            ],
            "arguments": {
                "self": [
                    "_THeaders@@Headers@@"
                ]
            }
        },
        "Headers.from_json": {
            "name": "from_json",
            "location": 161,
            "return": [
                "_THeaders@@Headers@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THeaders]"
                ],
                "json": []
            }
        },
        "Headers.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionType.to_json": {
            "name": "to_json",
            "location": 182,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionType.from_json": {
            "name": "from_json",
            "location": 186,
            "return": [
                "_TConnectionType@@ConnectionType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TConnectionType]"
                ],
                "json": []
            }
        },
        "CookieSameSite.to_json": {
            "name": "to_json",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieSameSite.from_json": {
            "name": "from_json",
            "location": 204,
            "return": [
                "_TCookieSameSite@@CookieSameSite@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCookieSameSite]"
                ],
                "json": []
            }
        },
        "ResourceTiming.to_json": {
            "name": "to_json",
            "location": 262,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceTiming.from_json": {
            "name": "from_json",
            "location": 283,
            "return": [
                "_TResourceTiming@@ResourceTiming@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResourceTiming]"
                ],
                "json": []
            }
        },
        "ResourcePriority.to_json": {
            "name": "to_json",
            "location": 314,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourcePriority.from_json": {
            "name": "from_json",
            "location": 318,
            "return": [
                "_TResourcePriority@@ResourcePriority@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResourcePriority]"
                ],
                "json": []
            }
        },
        "Request.to_json": {
            "name": "to_json",
            "location": 357,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.from_json": {
            "name": "from_json",
            "location": 377,
            "return": [
                "_TRequest@@Request@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequest]"
                ],
                "json": []
            }
        },
        "SignedCertificateTimestamp.to_json": {
            "name": "to_json",
            "location": 421,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedCertificateTimestamp.from_json": {
            "name": "from_json",
            "location": 434,
            "return": [
                "_TSignedCertificateTimestamp@@SignedCertificateTimestamp@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedCertificateTimestamp]"
                ],
                "json": []
            }
        },
        "SecurityDetails.to_json": {
            "name": "to_json",
            "location": 491,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.from_json": {
            "name": "from_json",
            "location": 511,
            "return": [
                "_TSecurityDetails@@SecurityDetails@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSecurityDetails]"
                ],
                "json": []
            }
        },
        "CertificateTransparencyCompliance.to_json": {
            "name": "to_json",
            "location": 537,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateTransparencyCompliance.from_json": {
            "name": "from_json",
            "location": 541,
            "return": [
                "_TCertificateTransparencyCompliance@@CertificateTransparencyCompliance@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCertificateTransparencyCompliance]"
                ],
                "json": []
            }
        },
        "BlockedReason.to_json": {
            "name": "to_json",
            "location": 558,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockedReason.from_json": {
            "name": "from_json",
            "location": 562,
            "return": [
                "_TBlockedReason@@BlockedReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBlockedReason]"
                ],
                "json": []
            }
        },
        "Response.to_json": {
            "name": "to_json",
            "location": 631,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.from_json": {
            "name": "from_json",
            "location": 667,
            "return": [
                "_TResponse@@Response@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResponse]"
                ],
                "json": []
            }
        },
        "WebSocketRequest.to_json": {
            "name": "to_json",
            "location": 700,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketRequest.from_json": {
            "name": "from_json",
            "location": 706,
            "return": [
                "_TWebSocketRequest@@WebSocketRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWebSocketRequest]"
                ],
                "json": []
            }
        },
        "WebSocketResponse.to_json": {
            "name": "to_json",
            "location": 735,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketResponse.from_json": {
            "name": "from_json",
            "location": 749,
            "return": [
                "_TWebSocketResponse@@WebSocketResponse@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWebSocketResponse]"
                ],
                "json": []
            }
        },
        "WebSocketFrame.to_json": {
            "name": "to_json",
            "location": 776,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketFrame.from_json": {
            "name": "from_json",
            "location": 784,
            "return": [
                "_TWebSocketFrame@@WebSocketFrame@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWebSocketFrame]"
                ],
                "json": []
            }
        },
        "CachedResource.to_json": {
            "name": "to_json",
            "location": 809,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedResource.from_json": {
            "name": "from_json",
            "location": 819,
            "return": [
                "_TCachedResource@@CachedResource@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCachedResource]"
                ],
                "json": []
            }
        },
        "Initiator.to_json": {
            "name": "to_json",
            "location": 846,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Initiator.from_json": {
            "name": "from_json",
            "location": 858,
            "return": [
                "_TInitiator@@Initiator@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInitiator]"
                ],
                "json": []
            }
        },
        "Cookie.to_json": {
            "name": "to_json",
            "location": 902,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.from_json": {
            "name": "from_json",
            "location": 918,
            "return": [
                "_TCookie@@Cookie@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCookie]"
                ],
                "json": []
            }
        },
        "SetCookieBlockedReason.to_json": {
            "name": "to_json",
            "location": 951,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetCookieBlockedReason.from_json": {
            "name": "from_json",
            "location": 955,
            "return": [
                "_TSetCookieBlockedReason@@SetCookieBlockedReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSetCookieBlockedReason]"
                ],
                "json": []
            }
        },
        "CookieBlockedReason.to_json": {
            "name": "to_json",
            "location": 974,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieBlockedReason.from_json": {
            "name": "from_json",
            "location": 978,
            "return": [
                "_TCookieBlockedReason@@CookieBlockedReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCookieBlockedReason]"
                ],
                "json": []
            }
        },
        "BlockedSetCookieWithReason.to_json": {
            "name": "to_json",
            "location": 999,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockedSetCookieWithReason.from_json": {
            "name": "from_json",
            "location": 1008,
            "return": [
                "_TBlockedSetCookieWithReason@@BlockedSetCookieWithReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBlockedSetCookieWithReason]"
                ],
                "json": []
            }
        },
        "BlockedCookieWithReason.to_json": {
            "name": "to_json",
            "location": 1027,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockedCookieWithReason.from_json": {
            "name": "from_json",
            "location": 1034,
            "return": [
                "_TBlockedCookieWithReason@@BlockedCookieWithReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBlockedCookieWithReason]"
                ],
                "json": []
            }
        },
        "CookieParam.to_json": {
            "name": "to_json",
            "location": 1074,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CookieParam.from_json": {
            "name": "from_json",
            "location": 1095,
            "return": [
                "_TCookieParam@@CookieParam@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCookieParam]"
                ],
                "json": []
            }
        },
        "AuthChallenge.to_json": {
            "name": "to_json",
            "location": 1126,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthChallenge.from_json": {
            "name": "from_json",
            "location": 1136,
            "return": [
                "_TAuthChallenge@@AuthChallenge@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthChallenge]"
                ],
                "json": []
            }
        },
        "AuthChallengeResponse.to_json": {
            "name": "to_json",
            "location": 1163,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthChallengeResponse.from_json": {
            "name": "from_json",
            "location": 1173,
            "return": [
                "_TAuthChallengeResponse@@AuthChallengeResponse@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthChallengeResponse]"
                ],
                "json": []
            }
        },
        "InterceptionStage.to_json": {
            "name": "to_json",
            "location": 1189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterceptionStage.from_json": {
            "name": "from_json",
            "location": 1193,
            "return": [
                "_TInterceptionStage@@InterceptionStage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInterceptionStage]"
                ],
                "json": []
            }
        },
        "RequestPattern.to_json": {
            "name": "to_json",
            "location": 1212,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestPattern.from_json": {
            "name": "from_json",
            "location": 1223,
            "return": [
                "_TRequestPattern@@RequestPattern@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRequestPattern]"
                ],
                "json": []
            }
        },
        "SignedExchangeSignature.to_json": {
            "name": "to_json",
            "location": 1264,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedExchangeSignature.from_json": {
            "name": "from_json",
            "location": 1281,
            "return": [
                "_TSignedExchangeSignature@@SignedExchangeSignature@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedExchangeSignature]"
                ],
                "json": []
            }
        },
        "SignedExchangeHeader.to_json": {
            "name": "to_json",
            "location": 1316,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedExchangeHeader.from_json": {
            "name": "from_json",
            "location": 1326,
            "return": [
                "_TSignedExchangeHeader@@SignedExchangeHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedExchangeHeader]"
                ],
                "json": []
            }
        },
        "SignedExchangeErrorField.to_json": {
            "name": "to_json",
            "location": 1347,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedExchangeErrorField.from_json": {
            "name": "from_json",
            "location": 1351,
            "return": [
                "_TSignedExchangeErrorField@@SignedExchangeErrorField@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedExchangeErrorField]"
                ],
                "json": []
            }
        },
        "SignedExchangeError.to_json": {
            "name": "to_json",
            "location": 1369,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedExchangeError.from_json": {
            "name": "from_json",
            "location": 1379,
            "return": [
                "_TSignedExchangeError@@SignedExchangeError@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedExchangeError]"
                ],
                "json": []
            }
        },
        "SignedExchangeInfo.to_json": {
            "name": "to_json",
            "location": 1404,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedExchangeInfo.from_json": {
            "name": "from_json",
            "location": 1416,
            "return": [
                "_TSignedExchangeInfo@@SignedExchangeInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSignedExchangeInfo]"
                ],
                "json": []
            }
        },
        "DataReceived.from_json": {
            "name": "from_json",
            "location": 2071,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "EventSourceMessageReceived.from_json": {
            "name": "from_json",
            "location": 2098,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LoadingFailed.from_json": {
            "name": "from_json",
            "location": 2128,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LoadingFinished.from_json": {
            "name": "from_json",
            "location": 2156,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "RequestIntercepted.from_json": {
            "name": "from_json",
            "location": 2209,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "RequestServedFromCache.from_json": {
            "name": "from_json",
            "location": 2236,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "RequestWillBeSent.from_json": {
            "name": "from_json",
            "location": 2272,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ResourceChangedPriority.from_json": {
            "name": "from_json",
            "location": 2304,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "SignedExchangeReceived.from_json": {
            "name": "from_json",
            "location": 2326,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ResponseReceived.from_json": {
            "name": "from_json",
            "location": 2353,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketClosed.from_json": {
            "name": "from_json",
            "location": 2376,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketCreated.from_json": {
            "name": "from_json",
            "location": 2397,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketFrameError.from_json": {
            "name": "from_json",
            "location": 2419,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketFrameReceived.from_json": {
            "name": "from_json",
            "location": 2441,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketFrameSent.from_json": {
            "name": "from_json",
            "location": 2463,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketHandshakeResponseReceived.from_json": {
            "name": "from_json",
            "location": 2485,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WebSocketWillSendHandshakeRequest.from_json": {
            "name": "from_json",
            "location": 2509,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "RequestWillBeSentExtraInfo.from_json": {
            "name": "from_json",
            "location": 2538,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ResponseReceivedExtraInfo.from_json": {
            "name": "from_json",
            "location": 2569,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/overlay.py": {
        "disable": {
            "name": "disable",
            "location": 121,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 131,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_highlight_object_for_test": {
            "name": "get_highlight_object_for_test",
            "location": 141,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, dict)]"
            ],
            "arguments": {
                "node_id": [],
                "include_distance": [],
                "include_style": []
            }
        },
        "hide_highlight": {
            "name": "hide_highlight",
            "location": 168,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "highlight_frame": {
            "name": "highlight_frame",
            "location": 178,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "frame_id": [],
                "content_color": [],
                "content_outline_color": []
            }
        },
        "highlight_node": {
            "name": "highlight_node",
            "location": 203,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "highlight_config": [],
                "node_id": [],
                "backend_node_id": [],
                "object_id": [],
                "selector": []
            }
        },
        "highlight_quad": {
            "name": "highlight_quad",
            "location": 237,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "quad": [],
                "color": [],
                "outline_color": []
            }
        },
        "highlight_rect": {
            "name": "highlight_rect",
            "location": 262,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "color": [],
                "outline_color": []
            }
        },
        "set_inspect_mode": {
            "name": "set_inspect_mode",
            "location": 296,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "mode": [],
                "highlight_config": []
            }
        },
        "set_show_ad_highlights": {
            "name": "set_show_ad_highlights",
            "location": 318,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "set_paused_in_debugger_message": {
            "name": "set_paused_in_debugger_message",
            "location": 335,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "message": [
                    "_T0@@"
                ]
            }
        },
        "set_show_debug_borders": {
            "name": "set_show_debug_borders",
            "location": 351,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "set_show_fps_counter": {
            "name": "set_show_fps_counter",
            "location": 368,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "set_show_paint_rects": {
            "name": "set_show_paint_rects",
            "location": 385,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "result": [
                    "_T0@@"
                ]
            }
        },
        "set_show_layout_shift_regions": {
            "name": "set_show_layout_shift_regions",
            "location": 402,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "result": [
                    "_T0@@"
                ]
            }
        },
        "set_show_scroll_bottleneck_rects": {
            "name": "set_show_scroll_bottleneck_rects",
            "location": 419,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "set_show_hit_test_borders": {
            "name": "set_show_hit_test_borders",
            "location": 436,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "set_show_viewport_size_on_resize": {
            "name": "set_show_viewport_size_on_resize",
            "location": 453,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "show": [
                    "_T0@@"
                ]
            }
        },
        "HighlightConfig.to_json": {
            "name": "to_json",
            "location": 60,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighlightConfig.from_json": {
            "name": "from_json",
            "location": 89,
            "return": [
                "_THighlightConfig@@HighlightConfig@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_THighlightConfig]"
                ],
                "json": []
            }
        },
        "InspectMode.to_json": {
            "name": "to_json",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectMode.from_json": {
            "name": "from_json",
            "location": 117,
            "return": [
                "_TInspectMode@@InspectMode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInspectMode]"
                ],
                "json": []
            }
        },
        "InspectNodeRequested.from_json": {
            "name": "from_json",
            "location": 481,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "NodeHighlightRequested.from_json": {
            "name": "from_json",
            "location": 496,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ScreenshotRequested.from_json": {
            "name": "from_json",
            "location": 512,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "InspectModeCanceled.from_json": {
            "name": "from_json",
            "location": 527,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/page.py": {
        "add_script_to_evaluate_on_load": {
            "name": "add_script_to_evaluate_on_load",
            "location": 630,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, ScriptIdentifier)]"
            ],
            "arguments": {
                "script_source": [
                    "_T0@@"
                ]
            }
        },
        "add_script_to_evaluate_on_new_document": {
            "name": "add_script_to_evaluate_on_new_document",
            "location": 653,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, ScriptIdentifier)]"
            ],
            "arguments": {
                "source": [
                    "_T0@@"
                ],
                "world_name": [
                    "_T1@@"
                ]
            }
        },
        "bring_to_front": {
            "name": "bring_to_front",
            "location": 676,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "capture_screenshot": {
            "name": "capture_screenshot",
            "location": 686,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, str)]"
            ],
            "arguments": {
                "format_": [],
                "quality": [],
                "clip": [],
                "from_surface": []
            }
        },
        "capture_snapshot": {
            "name": "capture_snapshot",
            "location": 718,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, str)]"
            ],
            "arguments": {
                "format_": [
                    "_T0@@"
                ]
            }
        },
        "clear_device_metrics_override": {
            "name": "clear_device_metrics_override",
            "location": 742,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "clear_device_orientation_override": {
            "name": "clear_device_orientation_override",
            "location": 757,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "clear_geolocation_override": {
            "name": "clear_geolocation_override",
            "location": 772,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "create_isolated_world": {
            "name": "create_isolated_world",
            "location": 784,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, runtime.ExecutionContextId)]"
            ],
            "arguments": {
                "frame_id": [],
                "world_name": [],
                "grant_univeral_access": []
            }
        },
        "delete_cookie": {
            "name": "delete_cookie",
            "location": 812,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "cookie_name": [
                    "_T0@@"
                ],
                "url": [
                    "_T1@@"
                ]
            }
        },
        "disable": {
            "name": "disable",
            "location": 836,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 846,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_app_manifest": {
            "name": "get_app_manifest",
            "location": 856,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(str, list, Optional[str])])]"
            ],
            "arguments": {}
        },
        "get_installability_errors": {
            "name": "get_installability_errors",
            "location": 877,
            "return": [
                "Generator[(Dict[(str, str)], Any, List[str])]"
            ],
            "arguments": {}
        },
        "get_cookies": {
            "name": "get_cookies",
            "location": 893,
            "return": [
                "Generator[(Dict[(str, str)], Any, List[network.Cookie])]"
            ],
            "arguments": {}
        },
        "get_frame_tree": {
            "name": "get_frame_tree",
            "location": 911,
            "return": [
                "Generator[(Dict[(str, str)], Any, FrameTree)]"
            ],
            "arguments": {}
        },
        "get_layout_metrics": {
            "name": "get_layout_metrics",
            "location": 924,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(LayoutViewport, VisualViewport, dom.Rect)])]"
            ],
            "arguments": {}
        },
        "get_navigation_history": {
            "name": "get_navigation_history",
            "location": 945,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(int, list)])]"
            ],
            "arguments": {}
        },
        "reset_navigation_history": {
            "name": "reset_navigation_history",
            "location": 964,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_resource_content": {
            "name": "get_resource_content",
            "location": 974,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(str, bool)])]"
            ],
            "arguments": {
                "frame_id": [],
                "url": []
            }
        },
        "get_resource_tree": {
            "name": "get_resource_tree",
            "location": 1004,
            "return": [
                "Generator[(Dict[(str, str)], Any, FrameResourceTree)]"
            ],
            "arguments": {}
        },
        "handle_java_script_dialog": {
            "name": "handle_java_script_dialog",
            "location": 1019,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "accept": [
                    "_T0@@"
                ],
                "prompt_text": [
                    "_T1@@"
                ]
            }
        },
        "navigate": {
            "name": "navigate",
            "location": 1040,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(FrameId, Optional[network.LoaderId], Optional[str])])]"
            ],
            "arguments": {
                "url": [],
                "referrer": [],
                "transition_type": [],
                "frame_id": []
            }
        },
        "navigate_to_history_entry": {
            "name": "navigate_to_history_entry",
            "location": 1079,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "entry_id": [
                    "_T0@@"
                ]
            }
        },
        "print_to_pdf": {
            "name": "print_to_pdf",
            "location": 1096,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(str, Optional[io.StreamHandle])])]"
            ],
            "arguments": {
                "landscape": [
                    "_T0@@"
                ],
                "display_header_footer": [
                    "_T1@@"
                ],
                "print_background": [
                    "_T2@@"
                ],
                "scale": [
                    "_T3@@"
                ],
                "paper_width": [
                    "_T4@@"
                ],
                "paper_height": [
                    "_T5@@"
                ],
                "margin_top": [
                    "_T6@@"
                ],
                "margin_bottom": [
                    "_T7@@"
                ],
                "margin_left": [
                    "_T8@@"
                ],
                "margin_right": [
                    "_T9@@"
                ],
                "page_ranges": [
                    "_T10@@"
                ],
                "ignore_invalid_page_ranges": [
                    "_T11@@"
                ],
                "header_template": [
                    "_T12@@"
                ],
                "footer_template": [
                    "_T13@@"
                ],
                "prefer_css_page_size": [
                    "_T14@@"
                ],
                "transfer_mode": [
                    "_T15@@"
                ]
            }
        },
        "reload": {
            "name": "reload",
            "location": 1182,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "ignore_cache": [
                    "_T0@@"
                ],
                "script_to_evaluate_on_load": [
                    "_T1@@"
                ]
            }
        },
        "remove_script_to_evaluate_on_load": {
            "name": "remove_script_to_evaluate_on_load",
            "location": 1205,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "remove_script_to_evaluate_on_new_document": {
            "name": "remove_script_to_evaluate_on_new_document",
            "location": 1226,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "identifier": []
            }
        },
        "screencast_frame_ack": {
            "name": "screencast_frame_ack",
            "location": 1243,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "session_id": [
                    "_T0@@"
                ]
            }
        },
        "search_in_resource": {
            "name": "search_in_resource",
            "location": 1262,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[debugger.SearchMatch])]"
            ],
            "arguments": {
                "frame_id": [],
                "url": [],
                "query": [],
                "case_sensitive": [],
                "is_regex": []
            }
        },
        "set_ad_blocking_enabled": {
            "name": "set_ad_blocking_enabled",
            "location": 1297,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "set_bypass_csp": {
            "name": "set_bypass_csp",
            "location": 1316,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "set_device_metrics_override": {
            "name": "set_device_metrics_override",
            "location": 1336,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "width": [],
                "height": [],
                "device_scale_factor": [],
                "mobile": [],
                "scale": [],
                "screen_width": [],
                "screen_height": [],
                "position_x": [],
                "position_y": [],
                "dont_set_visible_size": [],
                "screen_orientation": [],
                "viewport": []
            }
        },
        "set_device_orientation_override": {
            "name": "set_device_orientation_override",
            "location": 1401,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "alpha": [
                    "_T0@@"
                ],
                "beta": [
                    "_T1@@"
                ],
                "gamma": [
                    "_T2@@"
                ]
            }
        },
        "set_font_families": {
            "name": "set_font_families",
            "location": 1428,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "font_families": []
            }
        },
        "set_font_sizes": {
            "name": "set_font_sizes",
            "location": 1447,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "font_sizes": []
            }
        },
        "set_document_content": {
            "name": "set_document_content",
            "location": 1466,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "frame_id": [],
                "html": []
            }
        },
        "set_download_behavior": {
            "name": "set_download_behavior",
            "location": 1486,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "behavior": [
                    "_T0@@"
                ],
                "download_path": [
                    "_T1@@"
                ]
            }
        },
        "set_geolocation_override": {
            "name": "set_geolocation_override",
            "location": 1510,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "latitude": [
                    "_T0@@"
                ],
                "longitude": [
                    "_T1@@"
                ],
                "accuracy": [
                    "_T2@@"
                ]
            }
        },
        "set_lifecycle_events_enabled": {
            "name": "set_lifecycle_events_enabled",
            "location": 1539,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "set_touch_emulation_enabled": {
            "name": "set_touch_emulation_enabled",
            "location": 1559,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ],
                "configuration": [
                    "_T1@@"
                ]
            }
        },
        "start_screencast": {
            "name": "start_screencast",
            "location": 1584,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2, _T3, _T4)])])])], Any, None)]"
            ],
            "arguments": {
                "format_": [
                    "_T0@@"
                ],
                "quality": [
                    "_T1@@"
                ],
                "max_width": [
                    "_T2@@"
                ],
                "max_height": [
                    "_T3@@"
                ],
                "every_nth_frame": [
                    "_T4@@"
                ]
            }
        },
        "stop_loading": {
            "name": "stop_loading",
            "location": 1620,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "crash": {
            "name": "crash",
            "location": 1630,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "close": {
            "name": "close",
            "location": 1642,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_web_lifecycle_state": {
            "name": "set_web_lifecycle_state",
            "location": 1654,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "state": [
                    "_T0@@"
                ]
            }
        },
        "stop_screencast": {
            "name": "stop_screencast",
            "location": 1675,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_produce_compilation_cache": {
            "name": "set_produce_compilation_cache",
            "location": 1687,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "add_compilation_cache": {
            "name": "add_compilation_cache",
            "location": 1706,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "url": [
                    "_T0@@"
                ],
                "data": [
                    "_T1@@"
                ]
            }
        },
        "clear_compilation_cache": {
            "name": "clear_compilation_cache",
            "location": 1729,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "generate_test_report": {
            "name": "generate_test_report",
            "location": 1741,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "message": [
                    "_T0@@"
                ],
                "group": [
                    "_T1@@"
                ]
            }
        },
        "wait_for_debugger": {
            "name": "wait_for_debugger",
            "location": 1764,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_intercept_file_chooser_dialog": {
            "name": "set_intercept_file_chooser_dialog",
            "location": 1776,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "handle_file_chooser": {
            "name": "handle_file_chooser",
            "location": 1798,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(list, _T0)])])])], Any, None)]"
            ],
            "arguments": {
                "action": [
                    "_T0@@"
                ],
                "files": []
            }
        },
        "FrameId.to_json": {
            "name": "to_json",
            "location": 27,
            "return": [
                "_TFrameId@@FrameId@@"
            ],
            "arguments": {
                "self": [
                    "_TFrameId@@FrameId@@"
                ]
            }
        },
        "FrameId.from_json": {
            "name": "from_json",
            "location": 31,
            "return": [
                "_TFrameId@@FrameId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrameId]"
                ],
                "json": []
            }
        },
        "FrameId.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.from_json": {
            "name": "from_json",
            "location": 88,
            "return": [
                "_TFrame@@Frame@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrame]"
                ],
                "json": []
            }
        },
        "FrameResource.to_json": {
            "name": "to_json",
            "location": 128,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.from_json": {
            "name": "from_json",
            "location": 144,
            "return": [
                "_TFrameResource@@FrameResource@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrameResource]"
                ],
                "json": []
            }
        },
        "FrameResourceTree.to_json": {
            "name": "to_json",
            "location": 170,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.from_json": {
            "name": "from_json",
            "location": 179,
            "return": [
                "_TFrameResourceTree@@FrameResourceTree@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrameResourceTree]"
                ],
                "json": []
            }
        },
        "FrameTree.to_json": {
            "name": "to_json",
            "location": 198,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameTree.from_json": {
            "name": "from_json",
            "location": 206,
            "return": [
                "_TFrameTree@@FrameTree@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFrameTree]"
                ],
                "json": []
            }
        },
        "ScriptIdentifier.to_json": {
            "name": "to_json",
            "location": 217,
            "return": [
                "_TScriptIdentifier@@ScriptIdentifier@@"
            ],
            "arguments": {
                "self": [
                    "_TScriptIdentifier@@ScriptIdentifier@@"
                ]
            }
        },
        "ScriptIdentifier.from_json": {
            "name": "from_json",
            "location": 221,
            "return": [
                "_TScriptIdentifier@@ScriptIdentifier@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScriptIdentifier]"
                ],
                "json": []
            }
        },
        "ScriptIdentifier.__repr__": {
            "name": "__repr__",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionType.to_json": {
            "name": "to_json",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionType.from_json": {
            "name": "from_json",
            "location": 250,
            "return": [
                "_TTransitionType@@TransitionType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTransitionType]"
                ],
                "json": []
            }
        },
        "NavigationEntry.to_json": {
            "name": "to_json",
            "location": 274,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationEntry.from_json": {
            "name": "from_json",
            "location": 284,
            "return": [
                "_TNavigationEntry@@NavigationEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNavigationEntry]"
                ],
                "json": []
            }
        },
        "ScreencastFrameMetadata.to_json": {
            "name": "to_json",
            "location": 320,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreencastFrameMetadata.from_json": {
            "name": "from_json",
            "location": 333,
            "return": [
                "_TScreencastFrameMetadata@@ScreencastFrameMetadata@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScreencastFrameMetadata]"
                ],
                "json": []
            }
        },
        "DialogType.to_json": {
            "name": "to_json",
            "location": 354,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DialogType.from_json": {
            "name": "from_json",
            "location": 358,
            "return": [
                "_TDialogType@@DialogType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDialogType]"
                ],
                "json": []
            }
        },
        "AppManifestError.to_json": {
            "name": "to_json",
            "location": 379,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppManifestError.from_json": {
            "name": "from_json",
            "location": 388,
            "return": [
                "_TAppManifestError@@AppManifestError@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAppManifestError]"
                ],
                "json": []
            }
        },
        "LayoutViewport.to_json": {
            "name": "to_json",
            "location": 414,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayoutViewport.from_json": {
            "name": "from_json",
            "location": 423,
            "return": [
                "_TLayoutViewport@@LayoutViewport@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLayoutViewport]"
                ],
                "json": []
            }
        },
        "VisualViewport.to_json": {
            "name": "to_json",
            "location": 461,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisualViewport.from_json": {
            "name": "from_json",
            "location": 475,
            "return": [
                "_TVisualViewport@@VisualViewport@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVisualViewport]"
                ],
                "json": []
            }
        },
        "Viewport.to_json": {
            "name": "to_json",
            "location": 508,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Viewport.from_json": {
            "name": "from_json",
            "location": 518,
            "return": [
                "_TViewport@@Viewport@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TViewport]"
                ],
                "json": []
            }
        },
        "FontFamilies.to_json": {
            "name": "to_json",
            "location": 554,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontFamilies.from_json": {
            "name": "from_json",
            "location": 573,
            "return": [
                "_TFontFamilies@@FontFamilies@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFontFamilies]"
                ],
                "json": []
            }
        },
        "FontSizes.to_json": {
            "name": "to_json",
            "location": 596,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontSizes.from_json": {
            "name": "from_json",
            "location": 605,
            "return": [
                "_TFontSizes@@FontSizes@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFontSizes]"
                ],
                "json": []
            }
        },
        "ClientNavigationReason.to_json": {
            "name": "to_json",
            "location": 621,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientNavigationReason.from_json": {
            "name": "from_json",
            "location": 625,
            "return": [
                "_TClientNavigationReason@@ClientNavigationReason@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TClientNavigationReason]"
                ],
                "json": []
            }
        },
        "DomContentEventFired.from_json": {
            "name": "from_json",
            "location": 1827,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FileChooserOpened.from_json": {
            "name": "from_json",
            "location": 1842,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameAttached.from_json": {
            "name": "from_json",
            "location": 1862,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameClearedScheduledNavigation.from_json": {
            "name": "from_json",
            "location": 1881,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameDetached.from_json": {
            "name": "from_json",
            "location": 1897,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameNavigated.from_json": {
            "name": "from_json",
            "location": 1913,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameResized.from_json": {
            "name": "from_json",
            "location": 1930,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameRequestedNavigation.from_json": {
            "name": "from_json",
            "location": 1953,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameScheduledNavigation.from_json": {
            "name": "from_json",
            "location": 1979,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameStartedLoading.from_json": {
            "name": "from_json",
            "location": 2000,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "FrameStoppedLoading.from_json": {
            "name": "from_json",
            "location": 2018,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DownloadWillBegin.from_json": {
            "name": "from_json",
            "location": 2038,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "InterstitialHidden.from_json": {
            "name": "from_json",
            "location": 2054,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "InterstitialShown.from_json": {
            "name": "from_json",
            "location": 2069,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "JavascriptDialogClosed.from_json": {
            "name": "from_json",
            "location": 2088,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "JavascriptDialogOpening.from_json": {
            "name": "from_json",
            "location": 2116,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LifecycleEvent.from_json": {
            "name": "from_json",
            "location": 2140,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "LoadEventFired.from_json": {
            "name": "from_json",
            "location": 2155,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "NavigatedWithinDocument.from_json": {
            "name": "from_json",
            "location": 2175,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ScreencastFrame.from_json": {
            "name": "from_json",
            "location": 2198,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ScreencastVisibilityChanged.from_json": {
            "name": "from_json",
            "location": 2218,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WindowOpen.from_json": {
            "name": "from_json",
            "location": 2241,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "CompilationCacheProduced.from_json": {
            "name": "from_json",
            "location": 2264,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/performance.py": {
        "disable": {
            "name": "disable",
            "location": 40,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 50,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_time_domain": {
            "name": "set_time_domain",
            "location": 60,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "time_domain": [
                    "_T0@@"
                ]
            }
        },
        "get_metrics": {
            "name": "get_metrics",
            "location": 81,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "Metric.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.from_json": {
            "name": "from_json",
            "location": 33,
            "return": [
                "_TMetric@@Metric@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMetric]"
                ],
                "json": []
            }
        },
        "Metrics.from_json": {
            "name": "from_json",
            "location": 106,
            "return": [
                "_TMetric@@Metric@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMetric]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/profiler.py": {
        "disable": {
            "name": "disable",
            "location": 301,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 309,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_best_effort_coverage": {
            "name": "get_best_effort_coverage",
            "location": 317,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "set_sampling_interval": {
            "name": "set_sampling_interval",
            "location": 331,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "interval": [
                    "_T0@@"
                ]
            }
        },
        "start": {
            "name": "start",
            "location": 348,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "start_precise_coverage": {
            "name": "start_precise_coverage",
            "location": 356,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "call_count": [
                    "_T0@@"
                ],
                "detailed": [
                    "_T1@@"
                ]
            }
        },
        "start_type_profile": {
            "name": "start_type_profile",
            "location": 380,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 392,
            "return": [
                "Generator[(Dict[(str, str)], Any, Profile)]"
            ],
            "arguments": {}
        },
        "stop_precise_coverage": {
            "name": "stop_precise_coverage",
            "location": 405,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "stop_type_profile": {
            "name": "stop_type_profile",
            "location": 416,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "take_precise_coverage": {
            "name": "take_precise_coverage",
            "location": 428,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "take_type_profile": {
            "name": "take_type_profile",
            "location": 442,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "ProfileNode.to_json": {
            "name": "to_json",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileNode.from_json": {
            "name": "from_json",
            "location": 57,
            "return": [
                "_TProfileNode@@ProfileNode@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TProfileNode]"
                ],
                "json": []
            }
        },
        "Profile.to_json": {
            "name": "to_json",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.from_json": {
            "name": "from_json",
            "location": 101,
            "return": [
                "_TProfile@@Profile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TProfile]"
                ],
                "json": []
            }
        },
        "PositionTickInfo.to_json": {
            "name": "to_json",
            "location": 122,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionTickInfo.from_json": {
            "name": "from_json",
            "location": 129,
            "return": [
                "_TPositionTickInfo@@PositionTickInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPositionTickInfo]"
                ],
                "json": []
            }
        },
        "CoverageRange.to_json": {
            "name": "to_json",
            "location": 150,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageRange.from_json": {
            "name": "from_json",
            "location": 158,
            "return": [
                "_TCoverageRange@@CoverageRange@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCoverageRange]"
                ],
                "json": []
            }
        },
        "FunctionCoverage.to_json": {
            "name": "to_json",
            "location": 180,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCoverage.from_json": {
            "name": "from_json",
            "location": 188,
            "return": [
                "_TFunctionCoverage@@FunctionCoverage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFunctionCoverage]"
                ],
                "json": []
            }
        },
        "ScriptCoverage.to_json": {
            "name": "to_json",
            "location": 210,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptCoverage.from_json": {
            "name": "from_json",
            "location": 218,
            "return": [
                "_TScriptCoverage@@ScriptCoverage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScriptCoverage]"
                ],
                "json": []
            }
        },
        "TypeObject.to_json": {
            "name": "to_json",
            "location": 234,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeObject.from_json": {
            "name": "from_json",
            "location": 240,
            "return": [
                "_TTypeObject@@TypeObject@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTypeObject]"
                ],
                "json": []
            }
        },
        "TypeProfileEntry.to_json": {
            "name": "to_json",
            "location": 257,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeProfileEntry.from_json": {
            "name": "from_json",
            "location": 264,
            "return": [
                "_TTypeProfileEntry@@TypeProfileEntry@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTypeProfileEntry]"
                ],
                "json": []
            }
        },
        "ScriptTypeProfile.to_json": {
            "name": "to_json",
            "location": 285,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptTypeProfile.from_json": {
            "name": "from_json",
            "location": 293,
            "return": [
                "_TScriptTypeProfile@@ScriptTypeProfile@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScriptTypeProfile]"
                ],
                "json": []
            }
        },
        "ConsoleProfileFinished.from_json": {
            "name": "from_json",
            "location": 468,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ConsoleProfileStarted.from_json": {
            "name": "from_json",
            "location": 490,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/runtime.py": {
        "await_promise": {
            "name": "await_promise",
            "location": 694,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(RemoteObject, Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "promise_object_id": [],
                "return_by_value": [],
                "generate_preview": []
            }
        },
        "call_function_on": {
            "name": "call_function_on",
            "location": 727,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(RemoteObject, Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "function_declaration": [],
                "object_id": [],
                "arguments": [],
                "silent": [],
                "return_by_value": [],
                "generate_preview": [],
                "user_gesture": [],
                "await_promise": [],
                "execution_context_id": [],
                "object_group": []
            }
        },
        "compile_script": {
            "name": "compile_script",
            "location": 789,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(Optional[ScriptId], Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "expression": [],
                "source_url": [],
                "persist_script": [],
                "execution_context_id": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 824,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "discard_console_entries": {
            "name": "discard_console_entries",
            "location": 834,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 844,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "evaluate": {
            "name": "evaluate",
            "location": 856,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(RemoteObject, Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "expression": [],
                "object_group": [],
                "include_command_line_api": [],
                "silent": [],
                "context_id": [],
                "return_by_value": [],
                "generate_preview": [],
                "user_gesture": [],
                "await_promise": [],
                "throw_on_side_effect": [],
                "timeout": []
            }
        },
        "get_isolate_id": {
            "name": "get_isolate_id",
            "location": 921,
            "return": [
                "Generator[(Dict[(str, str)], Any, str)]"
            ],
            "arguments": {}
        },
        "get_heap_usage": {
            "name": "get_heap_usage",
            "location": 936,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(float, float)])]"
            ],
            "arguments": {}
        },
        "get_properties": {
            "name": "get_properties",
            "location": 958,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(list, Optional[list], Optional[list], Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "object_id": [],
                "own_properties": [],
                "accessor_properties_only": [],
                "generate_preview": []
            }
        },
        "global_lexical_scope_names": {
            "name": "global_lexical_scope_names",
            "location": 1000,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, List[str])]"
            ],
            "arguments": {
                "execution_context_id": []
            }
        },
        "query_objects": {
            "name": "query_objects",
            "location": 1020,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, RemoteObject)]"
            ],
            "arguments": {
                "prototype_object_id": [],
                "object_group": []
            }
        },
        "release_object": {
            "name": "release_object",
            "location": 1041,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "object_id": []
            }
        },
        "release_object_group": {
            "name": "release_object_group",
            "location": 1058,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "object_group": [
                    "_T0@@"
                ]
            }
        },
        "run_if_waiting_for_debugger": {
            "name": "run_if_waiting_for_debugger",
            "location": 1075,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "run_script": {
            "name": "run_script",
            "location": 1085,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, Tuple[(RemoteObject, Optional[ExceptionDetails])])]"
            ],
            "arguments": {
                "script_id": [],
                "execution_context_id": [],
                "object_group": [],
                "silent": [],
                "include_command_line_api": [],
                "return_by_value": [],
                "generate_preview": [],
                "await_promise": []
            }
        },
        "set_async_call_stack_depth": {
            "name": "set_async_call_stack_depth",
            "location": 1138,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "max_depth": [
                    "_T0@@"
                ]
            }
        },
        "set_custom_object_formatter_enabled": {
            "name": "set_custom_object_formatter_enabled",
            "location": 1155,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "enabled": [
                    "_T0@@"
                ]
            }
        },
        "set_max_call_stack_size_to_capture": {
            "name": "set_max_call_stack_size_to_capture",
            "location": 1174,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "size": [
                    "_T0@@"
                ]
            }
        },
        "terminate_execution": {
            "name": "terminate_execution",
            "location": 1193,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "add_binding": {
            "name": "add_binding",
            "location": 1206,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "name": [],
                "execution_context_id": []
            }
        },
        "remove_binding": {
            "name": "remove_binding",
            "location": 1236,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "name": [
                    "_T0@@"
                ]
            }
        },
        "ScriptId.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "_TScriptId@@ScriptId@@"
            ],
            "arguments": {
                "self": [
                    "_TScriptId@@ScriptId@@"
                ]
            }
        },
        "ScriptId.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "_TScriptId@@ScriptId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TScriptId]"
                ],
                "json": []
            }
        },
        "ScriptId.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteObjectId.to_json": {
            "name": "to_json",
            "location": 34,
            "return": [
                "_TRemoteObjectId@@RemoteObjectId@@"
            ],
            "arguments": {
                "self": [
                    "_TRemoteObjectId@@RemoteObjectId@@"
                ]
            }
        },
        "RemoteObjectId.from_json": {
            "name": "from_json",
            "location": 38,
            "return": [
                "_TRemoteObjectId@@RemoteObjectId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRemoteObjectId]"
                ],
                "json": []
            }
        },
        "RemoteObjectId.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnserializableValue.to_json": {
            "name": "to_json",
            "location": 50,
            "return": [
                "_TUnserializableValue@@UnserializableValue@@"
            ],
            "arguments": {
                "self": [
                    "_TUnserializableValue@@UnserializableValue@@"
                ]
            }
        },
        "UnserializableValue.from_json": {
            "name": "from_json",
            "location": 54,
            "return": [
                "_TUnserializableValue@@UnserializableValue@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUnserializableValue]"
                ],
                "json": []
            }
        },
        "UnserializableValue.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteObject.to_json": {
            "name": "to_json",
            "location": 93,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteObject.from_json": {
            "name": "from_json",
            "location": 115,
            "return": [
                "_TRemoteObject@@RemoteObject@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRemoteObject]"
                ],
                "json": []
            }
        },
        "CustomPreview.to_json": {
            "name": "to_json",
            "location": 140,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomPreview.from_json": {
            "name": "from_json",
            "location": 148,
            "return": [
                "_TCustomPreview@@CustomPreview@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCustomPreview]"
                ],
                "json": []
            }
        },
        "ObjectPreview.to_json": {
            "name": "to_json",
            "location": 178,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectPreview.from_json": {
            "name": "from_json",
            "location": 192,
            "return": [
                "_TObjectPreview@@ObjectPreview@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TObjectPreview]"
                ],
                "json": []
            }
        },
        "PropertyPreview.to_json": {
            "name": "to_json",
            "location": 220,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyPreview.from_json": {
            "name": "from_json",
            "location": 233,
            "return": [
                "_TPropertyPreview@@PropertyPreview@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPropertyPreview]"
                ],
                "json": []
            }
        },
        "EntryPreview.to_json": {
            "name": "to_json",
            "location": 251,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntryPreview.from_json": {
            "name": "from_json",
            "location": 259,
            "return": [
                "_TEntryPreview@@EntryPreview@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEntryPreview]"
                ],
                "json": []
            }
        },
        "PropertyDescriptor.to_json": {
            "name": "to_json",
            "location": 305,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PropertyDescriptor.from_json": {
            "name": "from_json",
            "location": 327,
            "return": [
                "_TPropertyDescriptor@@PropertyDescriptor@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPropertyDescriptor]"
                ],
                "json": []
            }
        },
        "InternalPropertyDescriptor.to_json": {
            "name": "to_json",
            "location": 353,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalPropertyDescriptor.from_json": {
            "name": "from_json",
            "location": 361,
            "return": [
                "_TInternalPropertyDescriptor@@InternalPropertyDescriptor@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInternalPropertyDescriptor]"
                ],
                "json": []
            }
        },
        "PrivatePropertyDescriptor.to_json": {
            "name": "to_json",
            "location": 379,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrivatePropertyDescriptor.from_json": {
            "name": "from_json",
            "location": 386,
            "return": [
                "_TPrivatePropertyDescriptor@@PrivatePropertyDescriptor@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPrivatePropertyDescriptor]"
                ],
                "json": []
            }
        },
        "CallArgument.to_json": {
            "name": "to_json",
            "location": 408,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallArgument.from_json": {
            "name": "from_json",
            "location": 419,
            "return": [
                "_TCallArgument@@CallArgument@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallArgument]"
                ],
                "json": []
            }
        },
        "ExecutionContextId.to_json": {
            "name": "to_json",
            "location": 431,
            "return": [
                "_TExecutionContextId@@ExecutionContextId@@"
            ],
            "arguments": {
                "self": [
                    "_TExecutionContextId@@ExecutionContextId@@"
                ]
            }
        },
        "ExecutionContextId.from_json": {
            "name": "from_json",
            "location": 435,
            "return": [
                "_TExecutionContextId@@ExecutionContextId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExecutionContextId]"
                ],
                "json": []
            }
        },
        "ExecutionContextId.__repr__": {
            "name": "__repr__",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContextDescription.to_json": {
            "name": "to_json",
            "location": 460,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContextDescription.from_json": {
            "name": "from_json",
            "location": 470,
            "return": [
                "_TExecutionContextDescription@@ExecutionContextDescription@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExecutionContextDescription]"
                ],
                "json": []
            }
        },
        "ExceptionDetails.to_json": {
            "name": "to_json",
            "location": 512,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionDetails.from_json": {
            "name": "from_json",
            "location": 531,
            "return": [
                "_TExceptionDetails@@ExceptionDetails@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TExceptionDetails]"
                ],
                "json": []
            }
        },
        "Timestamp.to_json": {
            "name": "to_json",
            "location": 549,
            "return": [
                "_TTimestamp@@Timestamp@@"
            ],
            "arguments": {
                "self": [
                    "_TTimestamp@@Timestamp@@"
                ]
            }
        },
        "Timestamp.from_json": {
            "name": "from_json",
            "location": 553,
            "return": [
                "_TTimestamp@@Timestamp@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTimestamp]"
                ],
                "json": []
            }
        },
        "Timestamp.__repr__": {
            "name": "__repr__",
            "location": 556,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeDelta.to_json": {
            "name": "to_json",
            "location": 564,
            "return": [
                "_TTimeDelta@@TimeDelta@@"
            ],
            "arguments": {
                "self": [
                    "_TTimeDelta@@TimeDelta@@"
                ]
            }
        },
        "TimeDelta.from_json": {
            "name": "from_json",
            "location": 568,
            "return": [
                "_TTimeDelta@@TimeDelta@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTimeDelta]"
                ],
                "json": []
            }
        },
        "TimeDelta.__repr__": {
            "name": "__repr__",
            "location": 571,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallFrame.to_json": {
            "name": "to_json",
            "location": 595,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallFrame.from_json": {
            "name": "from_json",
            "location": 605,
            "return": [
                "_TCallFrame@@CallFrame@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCallFrame]"
                ],
                "json": []
            }
        },
        "StackTrace.to_json": {
            "name": "to_json",
            "location": 633,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackTrace.from_json": {
            "name": "from_json",
            "location": 645,
            "return": [
                "_TStackTrace@@StackTrace@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStackTrace]"
                ],
                "json": []
            }
        },
        "UniqueDebuggerId.to_json": {
            "name": "to_json",
            "location": 658,
            "return": [
                "_TUniqueDebuggerId@@UniqueDebuggerId@@"
            ],
            "arguments": {
                "self": [
                    "_TUniqueDebuggerId@@UniqueDebuggerId@@"
                ]
            }
        },
        "UniqueDebuggerId.from_json": {
            "name": "from_json",
            "location": 662,
            "return": [
                "_TUniqueDebuggerId@@UniqueDebuggerId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUniqueDebuggerId]"
                ],
                "json": []
            }
        },
        "UniqueDebuggerId.__repr__": {
            "name": "__repr__",
            "location": 665,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackTraceId.to_json": {
            "name": "to_json",
            "location": 679,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackTraceId.from_json": {
            "name": "from_json",
            "location": 687,
            "return": [
                "_TStackTraceId@@StackTraceId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStackTraceId]"
                ],
                "json": []
            }
        },
        "BindingCalled.from_json": {
            "name": "from_json",
            "location": 1270,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ConsoleAPICalled.from_json": {
            "name": "from_json",
            "location": 1302,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ExceptionRevoked.from_json": {
            "name": "from_json",
            "location": 1325,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ExceptionThrown.from_json": {
            "name": "from_json",
            "location": 1343,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ExecutionContextCreated.from_json": {
            "name": "from_json",
            "location": 1360,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ExecutionContextDestroyed.from_json": {
            "name": "from_json",
            "location": 1376,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ExecutionContextsCleared.from_json": {
            "name": "from_json",
            "location": 1391,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "InspectRequested.from_json": {
            "name": "from_json",
            "location": 1408,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/schema.py": {
        "get_domains": {
            "name": "get_domains",
            "location": 40,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "Domain.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.from_json": {
            "name": "from_json",
            "location": 33,
            "return": [
                "_TDomain@@Domain@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDomain]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/security.py": {
        "disable": {
            "name": "disable",
            "location": 185,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "enable": {
            "name": "enable",
            "location": 195,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "set_ignore_certificate_errors": {
            "name": "set_ignore_certificate_errors",
            "location": 205,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "ignore": [
                    "_T0@@"
                ]
            }
        },
        "handle_certificate_error": {
            "name": "handle_certificate_error",
            "location": 225,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "event_id": [],
                "action": []
            }
        },
        "set_override_certificate_errors": {
            "name": "set_override_certificate_errors",
            "location": 248,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "override": [
                    "_T0@@"
                ]
            }
        },
        "CertificateId.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [
                "_TCertificateId@@CertificateId@@"
            ],
            "arguments": {
                "self": [
                    "_TCertificateId@@CertificateId@@"
                ]
            }
        },
        "CertificateId.from_json": {
            "name": "from_json",
            "location": 26,
            "return": [
                "_TCertificateId@@CertificateId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCertificateId]"
                ],
                "json": []
            }
        },
        "CertificateId.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContentType.to_json": {
            "name": "to_json",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContentType.from_json": {
            "name": "from_json",
            "location": 46,
            "return": [
                "_TMixedContentType@@MixedContentType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMixedContentType]"
                ],
                "json": []
            }
        },
        "SecurityState.to_json": {
            "name": "to_json",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityState.from_json": {
            "name": "from_json",
            "location": 64,
            "return": [
                "_TSecurityState@@SecurityState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSecurityState]"
                ],
                "json": []
            }
        },
        "SecurityStateExplanation.to_json": {
            "name": "to_json",
            "location": 94,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityStateExplanation.from_json": {
            "name": "from_json",
            "location": 107,
            "return": [
                "_TSecurityStateExplanation@@SecurityStateExplanation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSecurityStateExplanation]"
                ],
                "json": []
            }
        },
        "InsecureContentStatus.to_json": {
            "name": "to_json",
            "location": 145,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsecureContentStatus.from_json": {
            "name": "from_json",
            "location": 157,
            "return": [
                "_TInsecureContentStatus@@InsecureContentStatus@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInsecureContentStatus]"
                ],
                "json": []
            }
        },
        "CertificateErrorAction.to_json": {
            "name": "to_json",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateErrorAction.from_json": {
            "name": "from_json",
            "location": 181,
            "return": [
                "_TCertificateErrorAction@@CertificateErrorAction@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCertificateErrorAction]"
                ],
                "json": []
            }
        },
        "CertificateError.from_json": {
            "name": "from_json",
            "location": 286,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "SecurityStateChanged.from_json": {
            "name": "from_json",
            "location": 313,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/service_worker.py": {
        "deliver_push_message": {
            "name": "deliver_push_message",
            "location": 183,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [],
                "registration_id": [],
                "data": []
            }
        },
        "disable": {
            "name": "disable",
            "location": 204,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "dispatch_sync_event": {
            "name": "dispatch_sync_event",
            "location": 212,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [],
                "registration_id": [],
                "tag": [],
                "last_chance": []
            }
        },
        "enable": {
            "name": "enable",
            "location": 236,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "inspect_worker": {
            "name": "inspect_worker",
            "location": 244,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "version_id": [
                    "_T0@@"
                ]
            }
        },
        "set_force_update_on_page_load": {
            "name": "set_force_update_on_page_load",
            "location": 259,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "force_update_on_page_load": [
                    "_T0@@"
                ]
            }
        },
        "skip_waiting": {
            "name": "skip_waiting",
            "location": 274,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "scope_url": [
                    "_T0@@"
                ]
            }
        },
        "start_worker": {
            "name": "start_worker",
            "location": 289,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "scope_url": [
                    "_T0@@"
                ]
            }
        },
        "stop_all_workers": {
            "name": "stop_all_workers",
            "location": 304,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "stop_worker": {
            "name": "stop_worker",
            "location": 312,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "version_id": [
                    "_T0@@"
                ]
            }
        },
        "unregister": {
            "name": "unregister",
            "location": 327,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "scope_url": [
                    "_T0@@"
                ]
            }
        },
        "update_registration": {
            "name": "update_registration",
            "location": 342,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "scope_url": [
                    "_T0@@"
                ]
            }
        },
        "RegistrationID.to_json": {
            "name": "to_json",
            "location": 18,
            "return": [
                "_TRegistrationID@@RegistrationID@@"
            ],
            "arguments": {
                "self": [
                    "_TRegistrationID@@RegistrationID@@"
                ]
            }
        },
        "RegistrationID.from_json": {
            "name": "from_json",
            "location": 22,
            "return": [
                "_TRegistrationID@@RegistrationID@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRegistrationID]"
                ],
                "json": []
            }
        },
        "RegistrationID.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerRegistration.to_json": {
            "name": "to_json",
            "location": 40,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerRegistration.from_json": {
            "name": "from_json",
            "location": 48,
            "return": [
                "_TServiceWorkerRegistration@@ServiceWorkerRegistration@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceWorkerRegistration]"
                ],
                "json": []
            }
        },
        "ServiceWorkerVersionRunningStatus.to_json": {
            "name": "to_json",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerVersionRunningStatus.from_json": {
            "name": "from_json",
            "location": 66,
            "return": [
                "_TServiceWorkerVersionRunningStatus@@ServiceWorkerVersionRunningStatus@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceWorkerVersionRunningStatus]"
                ],
                "json": []
            }
        },
        "ServiceWorkerVersionStatus.to_json": {
            "name": "to_json",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerVersionStatus.from_json": {
            "name": "from_json",
            "location": 82,
            "return": [
                "_TServiceWorkerVersionStatus@@ServiceWorkerVersionStatus@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceWorkerVersionStatus]"
                ],
                "json": []
            }
        },
        "ServiceWorkerVersion.to_json": {
            "name": "to_json",
            "location": 112,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerVersion.from_json": {
            "name": "from_json",
            "location": 130,
            "return": [
                "_TServiceWorkerVersion@@ServiceWorkerVersion@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceWorkerVersion]"
                ],
                "json": []
            }
        },
        "ServiceWorkerErrorMessage.to_json": {
            "name": "to_json",
            "location": 161,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorkerErrorMessage.from_json": {
            "name": "from_json",
            "location": 172,
            "return": [
                "_TServiceWorkerErrorMessage@@ServiceWorkerErrorMessage@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TServiceWorkerErrorMessage]"
                ],
                "json": []
            }
        },
        "WorkerErrorReported.from_json": {
            "name": "from_json",
            "location": 363,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WorkerRegistrationUpdated.from_json": {
            "name": "from_json",
            "location": 375,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "WorkerVersionUpdated.from_json": {
            "name": "from_json",
            "location": 387,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/storage.py": {
        "clear_data_for_origin": {
            "name": "clear_data_for_origin",
            "location": 64,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1)])])])], Any, None)]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ],
                "storage_types": [
                    "_T1@@"
                ]
            }
        },
        "get_usage_and_quota": {
            "name": "get_usage_and_quota",
            "location": 84,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, Tuple[(float, float, list)])]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "track_cache_storage_for_origin": {
            "name": "track_cache_storage_for_origin",
            "location": 111,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "track_indexed_db_for_origin": {
            "name": "track_indexed_db_for_origin",
            "location": 128,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "untrack_cache_storage_for_origin": {
            "name": "untrack_cache_storage_for_origin",
            "location": 145,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "untrack_indexed_db_for_origin": {
            "name": "untrack_indexed_db_for_origin",
            "location": 162,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "origin": [
                    "_T0@@"
                ]
            }
        },
        "StorageType.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageType.from_json": {
            "name": "from_json",
            "location": 35,
            "return": [
                "_TStorageType@@StorageType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStorageType]"
                ],
                "json": []
            }
        },
        "UsageForType.to_json": {
            "name": "to_json",
            "location": 50,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageForType.from_json": {
            "name": "from_json",
            "location": 57,
            "return": [
                "_TUsageForType@@UsageForType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUsageForType]"
                ],
                "json": []
            }
        },
        "CacheStorageContentUpdated.from_json": {
            "name": "from_json",
            "location": 191,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "CacheStorageListUpdated.from_json": {
            "name": "from_json",
            "location": 208,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "IndexedDBContentUpdated.from_json": {
            "name": "from_json",
            "location": 228,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "IndexedDBListUpdated.from_json": {
            "name": "from_json",
            "location": 246,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/system_info.py": {
        "get_info": {
            "name": "get_info",
            "location": 288,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(GPUInfo, str, str, str)])]"
            ],
            "arguments": {}
        },
        "get_process_info": {
            "name": "get_process_info",
            "location": 311,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "GPUDevice.to_json": {
            "name": "to_json",
            "location": 38,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUDevice.from_json": {
            "name": "from_json",
            "location": 49,
            "return": [
                "_TGPUDevice@@GPUDevice@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGPUDevice]"
                ],
                "json": []
            }
        },
        "Size.to_json": {
            "name": "to_json",
            "location": 71,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.from_json": {
            "name": "from_json",
            "location": 78,
            "return": [
                "_TSize@@Size@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSize]"
                ],
                "json": []
            }
        },
        "VideoDecodeAcceleratorCapability.to_json": {
            "name": "to_json",
            "location": 100,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDecodeAcceleratorCapability.from_json": {
            "name": "from_json",
            "location": 108,
            "return": [
                "_TVideoDecodeAcceleratorCapability@@VideoDecodeAcceleratorCapability@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVideoDecodeAcceleratorCapability]"
                ],
                "json": []
            }
        },
        "VideoEncodeAcceleratorCapability.to_json": {
            "name": "to_json",
            "location": 135,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoEncodeAcceleratorCapability.from_json": {
            "name": "from_json",
            "location": 144,
            "return": [
                "_TVideoEncodeAcceleratorCapability@@VideoEncodeAcceleratorCapability@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVideoEncodeAcceleratorCapability]"
                ],
                "json": []
            }
        },
        "SubsamplingFormat.to_json": {
            "name": "to_json",
            "location": 161,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubsamplingFormat.from_json": {
            "name": "from_json",
            "location": 165,
            "return": [
                "_TSubsamplingFormat@@SubsamplingFormat@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSubsamplingFormat]"
                ],
                "json": []
            }
        },
        "ImageDecodeAcceleratorCapability.to_json": {
            "name": "to_json",
            "location": 187,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDecodeAcceleratorCapability.from_json": {
            "name": "from_json",
            "location": 196,
            "return": [
                "_TImageDecodeAcceleratorCapability@@ImageDecodeAcceleratorCapability@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TImageDecodeAcceleratorCapability]"
                ],
                "json": []
            }
        },
        "GPUInfo.to_json": {
            "name": "to_json",
            "location": 231,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUInfo.from_json": {
            "name": "from_json",
            "location": 245,
            "return": [
                "_TGPUInfo@@GPUInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TGPUInfo]"
                ],
                "json": []
            }
        },
        "ProcessInfo.to_json": {
            "name": "to_json",
            "location": 272,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessInfo.from_json": {
            "name": "from_json",
            "location": 280,
            "return": [
                "_TProcessInfo@@ProcessInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TProcessInfo]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/target.py": {
        "activate_target": {
            "name": "activate_target",
            "location": 118,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "target_id": []
            }
        },
        "attach_to_target": {
            "name": "attach_to_target",
            "location": 135,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, SessionID)]"
            ],
            "arguments": {
                "target_id": [],
                "flatten": []
            }
        },
        "attach_to_browser_target": {
            "name": "attach_to_browser_target",
            "location": 158,
            "return": [
                "Generator[(Dict[(str, str)], Any, SessionID)]"
            ],
            "arguments": {}
        },
        "close_target": {
            "name": "close_target",
            "location": 173,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, bool)]"
            ],
            "arguments": {
                "target_id": []
            }
        },
        "expose_dev_tools_protocol": {
            "name": "expose_dev_tools_protocol",
            "location": 192,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "target_id": [],
                "binding_name": []
            }
        },
        "create_browser_context": {
            "name": "create_browser_context",
            "location": 222,
            "return": [
                "Generator[(Dict[(str, str)], Any, BrowserContextID)]"
            ],
            "arguments": {}
        },
        "get_browser_contexts": {
            "name": "get_browser_contexts",
            "location": 238,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "create_target": {
            "name": "create_target",
            "location": 253,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, TargetID)]"
            ],
            "arguments": {
                "url": [],
                "width": [],
                "height": [],
                "browser_context_id": [],
                "enable_begin_frame_control": [],
                "new_window": [],
                "background": []
            }
        },
        "detach_from_target": {
            "name": "detach_from_target",
            "location": 296,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "session_id": [],
                "target_id": []
            }
        },
        "dispose_browser_context": {
            "name": "dispose_browser_context",
            "location": 318,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "browser_context_id": []
            }
        },
        "get_target_info": {
            "name": "get_target_info",
            "location": 338,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, TargetInfo)]"
            ],
            "arguments": {
                "target_id": []
            }
        },
        "get_targets": {
            "name": "get_targets",
            "location": 360,
            "return": [
                "Generator[(Dict[(str, str)], Any, list)]"
            ],
            "arguments": {}
        },
        "send_message_to_target": {
            "name": "send_message_to_target",
            "location": 373,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "message": [],
                "session_id": [],
                "target_id": []
            }
        },
        "set_auto_attach": {
            "name": "set_auto_attach",
            "location": 398,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Union[(_T0, _T1, _T2)])])])], Any, None)]"
            ],
            "arguments": {
                "auto_attach": [
                    "_T0@@"
                ],
                "wait_for_debugger_on_start": [
                    "_T1@@"
                ],
                "flatten": [
                    "_T2@@"
                ]
            }
        },
        "set_discover_targets": {
            "name": "set_discover_targets",
            "location": 426,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "discover": [
                    "_T0@@"
                ]
            }
        },
        "set_remote_locations": {
            "name": "set_remote_locations",
            "location": 444,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, list)])])], Any, None)]"
            ],
            "arguments": {
                "locations": []
            }
        },
        "TargetID.to_json": {
            "name": "to_json",
            "location": 16,
            "return": [
                "_TTargetID@@TargetID@@"
            ],
            "arguments": {
                "self": [
                    "_TTargetID@@TargetID@@"
                ]
            }
        },
        "TargetID.from_json": {
            "name": "from_json",
            "location": 20,
            "return": [
                "_TTargetID@@TargetID@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTargetID]"
                ],
                "json": []
            }
        },
        "TargetID.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionID.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "_TSessionID@@SessionID@@"
            ],
            "arguments": {
                "self": [
                    "_TSessionID@@SessionID@@"
                ]
            }
        },
        "SessionID.from_json": {
            "name": "from_json",
            "location": 35,
            "return": [
                "_TSessionID@@SessionID@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSessionID]"
                ],
                "json": []
            }
        },
        "SessionID.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserContextID.to_json": {
            "name": "to_json",
            "location": 43,
            "return": [
                "_TBrowserContextID@@BrowserContextID@@"
            ],
            "arguments": {
                "self": [
                    "_TBrowserContextID@@BrowserContextID@@"
                ]
            }
        },
        "BrowserContextID.from_json": {
            "name": "from_json",
            "location": 47,
            "return": [
                "_TBrowserContextID@@BrowserContextID@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBrowserContextID]"
                ],
                "json": []
            }
        },
        "BrowserContextID.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetInfo.to_json": {
            "name": "to_json",
            "location": 72,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TargetInfo.from_json": {
            "name": "from_json",
            "location": 86,
            "return": [
                "_TTargetInfo@@TargetInfo@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTargetInfo]"
                ],
                "json": []
            }
        },
        "RemoteLocation.to_json": {
            "name": "to_json",
            "location": 104,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteLocation.from_json": {
            "name": "from_json",
            "location": 111,
            "return": [
                "_TRemoteLocation@@RemoteLocation@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRemoteLocation]"
                ],
                "json": []
            }
        },
        "AttachedToTarget.from_json": {
            "name": "from_json",
            "location": 478,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DetachedFromTarget.from_json": {
            "name": "from_json",
            "location": 501,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ReceivedMessageFromTarget.from_json": {
            "name": "from_json",
            "location": 522,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetCreated.from_json": {
            "name": "from_json",
            "location": 539,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetDestroyed.from_json": {
            "name": "from_json",
            "location": 554,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetCrashed.from_json": {
            "name": "from_json",
            "location": 573,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TargetInfoChanged.from_json": {
            "name": "from_json",
            "location": 591,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/tethering.py": {
        "bind": {
            "name": "bind",
            "location": 15,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "port": [
                    "_T0@@"
                ]
            }
        },
        "unbind": {
            "name": "unbind",
            "location": 32,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "port": [
                    "_T0@@"
                ]
            }
        },
        "Accepted.from_json": {
            "name": "from_json",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/tracing.py": {
        "end": {
            "name": "end",
            "location": 123,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_categories": {
            "name": "get_categories",
            "location": 133,
            "return": [
                "Generator[(Dict[(str, str)], Any, List[str])]"
            ],
            "arguments": {}
        },
        "record_clock_sync_marker": {
            "name": "record_clock_sync_marker",
            "location": 146,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, _T0)])])], Any, None)]"
            ],
            "arguments": {
                "sync_id": [
                    "_T0@@"
                ]
            }
        },
        "request_memory_dump": {
            "name": "request_memory_dump",
            "location": 163,
            "return": [
                "Generator[(Dict[(str, str)], Any, Tuple[(str, bool)])]"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 182,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "categories": [],
                "options": [],
                "buffer_usage_reporting_interval": [],
                "transfer_mode": [],
                "stream_format": [],
                "stream_compression": [],
                "trace_config": []
            }
        },
        "MemoryDumpConfig.to_json": {
            "name": "to_json",
            "location": 21,
            "return": [
                "_TMemoryDumpConfig@@MemoryDumpConfig@@"
            ],
            "arguments": {
                "self": [
                    "_TMemoryDumpConfig@@MemoryDumpConfig@@"
                ]
            }
        },
        "MemoryDumpConfig.from_json": {
            "name": "from_json",
            "location": 25,
            "return": [
                "_TMemoryDumpConfig@@MemoryDumpConfig@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMemoryDumpConfig]"
                ],
                "json": []
            }
        },
        "MemoryDumpConfig.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.to_json": {
            "name": "to_json",
            "location": 58,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceConfig.from_json": {
            "name": "from_json",
            "location": 79,
            "return": [
                "_TTraceConfig@@TraceConfig@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTraceConfig]"
                ],
                "json": []
            }
        },
        "StreamFormat.to_json": {
            "name": "to_json",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamFormat.from_json": {
            "name": "from_json",
            "location": 104,
            "return": [
                "_TStreamFormat@@StreamFormat@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStreamFormat]"
                ],
                "json": []
            }
        },
        "StreamCompression.to_json": {
            "name": "to_json",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamCompression.from_json": {
            "name": "from_json",
            "location": 119,
            "return": [
                "_TStreamCompression@@StreamCompression@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TStreamCompression]"
                ],
                "json": []
            }
        },
        "BufferUsage.from_json": {
            "name": "from_json",
            "location": 237,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "DataCollected.from_json": {
            "name": "from_json",
            "location": 255,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "TracingComplete.from_json": {
            "name": "from_json",
            "location": 279,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/util.py": {
        "event_class": {
            "name": "event_class",
            "location": 9,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "method": []
            }
        },
        "parse_json_event": {
            "name": "parse_json_event",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "json": []
            }
        },
        "event_class.decorate": {
            "name": "decorate",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/web_audio.py": {
        "enable": {
            "name": "enable",
            "location": 145,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "disable": {
            "name": "disable",
            "location": 155,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "get_realtime_data": {
            "name": "get_realtime_data",
            "location": 165,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, ContextRealtimeData)]"
            ],
            "arguments": {
                "context_id": []
            }
        },
        "ContextId.to_json": {
            "name": "to_json",
            "location": 19,
            "return": [
                "_TContextId@@ContextId@@"
            ],
            "arguments": {
                "self": [
                    "_TContextId@@ContextId@@"
                ]
            }
        },
        "ContextId.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "_TContextId@@ContextId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextId]"
                ],
                "json": []
            }
        },
        "ContextId.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextType.to_json": {
            "name": "to_json",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextType.from_json": {
            "name": "from_json",
            "location": 41,
            "return": [
                "_TContextType@@ContextType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextType]"
                ],
                "json": []
            }
        },
        "ContextState.to_json": {
            "name": "to_json",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextState.from_json": {
            "name": "from_json",
            "location": 57,
            "return": [
                "_TContextState@@ContextState@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextState]"
                ],
                "json": []
            }
        },
        "ContextRealtimeData.to_json": {
            "name": "to_json",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextRealtimeData.from_json": {
            "name": "from_json",
            "location": 89,
            "return": [
                "_TContextRealtimeData@@ContextRealtimeData@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TContextRealtimeData]"
                ],
                "json": []
            }
        },
        "BaseAudioContext.to_json": {
            "name": "to_json",
            "location": 120,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAudioContext.from_json": {
            "name": "from_json",
            "location": 133,
            "return": [
                "_TBaseAudioContext@@BaseAudioContext@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBaseAudioContext]"
                ],
                "json": []
            }
        },
        "ContextCreated.from_json": {
            "name": "from_json",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ContextDestroyed.from_json": {
            "name": "from_json",
            "location": 208,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        },
        "ContextChanged.from_json": {
            "name": "from_json",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/web_authn.py": {
        "enable": {
            "name": "enable",
            "location": 124,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "disable": {
            "name": "disable",
            "location": 135,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {}
        },
        "add_virtual_authenticator": {
            "name": "add_virtual_authenticator",
            "location": 145,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, AuthenticatorId)]"
            ],
            "arguments": {
                "options": []
            }
        },
        "remove_virtual_authenticator": {
            "name": "remove_virtual_authenticator",
            "location": 164,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "authenticator_id": []
            }
        },
        "add_credential": {
            "name": "add_credential",
            "location": 181,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "authenticator_id": [],
                "credential": []
            }
        },
        "get_credentials": {
            "name": "get_credentials",
            "location": 201,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, list)]"
            ],
            "arguments": {
                "authenticator_id": []
            }
        },
        "clear_credentials": {
            "name": "clear_credentials",
            "location": 220,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "authenticator_id": []
            }
        },
        "set_user_verified": {
            "name": "set_user_verified",
            "location": 237,
            "return": [
                "Generator[(Dict[(str, Union[(str, Dict[(str, Any)])])], Any, None)]"
            ],
            "arguments": {
                "authenticator_id": [],
                "is_user_verified": []
            }
        },
        "AuthenticatorId.to_json": {
            "name": "to_json",
            "location": 16,
            "return": [
                "_TAuthenticatorId@@AuthenticatorId@@"
            ],
            "arguments": {
                "self": [
                    "_TAuthenticatorId@@AuthenticatorId@@"
                ]
            }
        },
        "AuthenticatorId.from_json": {
            "name": "from_json",
            "location": 20,
            "return": [
                "_TAuthenticatorId@@AuthenticatorId@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthenticatorId]"
                ],
                "json": []
            }
        },
        "AuthenticatorId.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticatorProtocol.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticatorProtocol.from_json": {
            "name": "from_json",
            "location": 35,
            "return": [
                "_TAuthenticatorProtocol@@AuthenticatorProtocol@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthenticatorProtocol]"
                ],
                "json": []
            }
        },
        "AuthenticatorTransport.to_json": {
            "name": "to_json",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticatorTransport.from_json": {
            "name": "from_json",
            "location": 50,
            "return": [
                "_TAuthenticatorTransport@@AuthenticatorTransport@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAuthenticatorTransport]"
                ],
                "json": []
            }
        },
        "VirtualAuthenticatorOptions.to_json": {
            "name": "to_json",
            "location": 68,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualAuthenticatorOptions.from_json": {
            "name": "from_json",
            "location": 79,
            "return": [
                "_TVirtualAuthenticatorOptions@@VirtualAuthenticatorOptions@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVirtualAuthenticatorOptions]"
                ],
                "json": []
            }
        },
        "Credential.to_json": {
            "name": "to_json",
            "location": 106,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credential.from_json": {
            "name": "from_json",
            "location": 115,
            "return": [
                "_TCredential@@Credential@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCredential]"
                ],
                "json": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/cdp/__init__.py": {},
    "python-chrome-devtools-protocol-master/docs/conf.py": {},
    "python-chrome-devtools-protocol-master/generator/generate.py": {
        "indent": {
            "name": "indent",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [],
                "n": []
            }
        },
        "escape_backticks": {
            "name": "escape_backticks",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "docstr": []
            }
        },
        "inline_doc": {
            "name": "inline_doc",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "description": []
            }
        },
        "docstring": {
            "name": "docstring",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "description": []
            }
        },
        "is_builtin": {
            "name": "is_builtin",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            }
        },
        "snake_case": {
            "name": "snake_case",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "ref_to_python": {
            "name": "ref_to_python",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "ref": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 902,
            "return": [
                "List[CdpDomain]"
            ],
            "arguments": {
                "json_path": [],
                "output_path": []
            }
        },
        "generate_init": {
            "name": "generate_init",
            "location": 922,
            "return": [
                "None"
            ],
            "arguments": {
                "init_path": [],
                "domains": []
            }
        },
        "generate_docs": {
            "name": "generate_docs",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "docs_path": [],
                "domains": []
            }
        },
        "main": {
            "name": "main",
            "location": 954,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "escape_backticks.replace_one": {
            "name": "replace_one",
            "location": 62,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "CdpPrimitiveType.get_annotation": {
            "name": "get_annotation",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "cdp_type": []
            }
        },
        "CdpPrimitiveType.get_constructor": {
            "name": "get_constructor",
            "location": 143,
            "return": [
                "Union[(str, _T1)]"
            ],
            "arguments": {
                "cls": [],
                "cdp_type": [],
                "val": [
                    "_T1@@"
                ]
            }
        },
        "CdpItems.from_json": {
            "name": "from_json",
            "location": 159,
            "return": [
                "_TCdpItems@@CdpItems@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpItems]"
                ],
                "type": []
            }
        },
        "CdpProperty.py_name": {
            "name": "py_name",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpProperty.py_annotation": {
            "name": "py_annotation",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpProperty.from_json": {
            "name": "from_json",
            "location": 204,
            "return": [
                "_TCdpProperty@@CdpProperty@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpProperty]"
                ],
                "property": []
            }
        },
        "CdpProperty.generate_decl": {
            "name": "generate_decl",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpProperty.generate_to_json": {
            "name": "generate_to_json",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict_": [],
                "use_self": []
            }
        },
        "CdpProperty.generate_from_json": {
            "name": "generate_from_json",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dict_": []
            }
        },
        "CdpType.from_json": {
            "name": "from_json",
            "location": 284,
            "return": [
                "_TCdpType@@CdpType@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpType]"
                ],
                "type_": []
            }
        },
        "CdpType.generate_code": {
            "name": "generate_code",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpType.generate_primitive_code": {
            "name": "generate_primitive_code",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpType.generate_enum_code": {
            "name": "generate_enum_code",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpType.generate_class_code": {
            "name": "generate_class_code",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpType.get_refs": {
            "name": "get_refs",
            "location": 426,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpParameter.generate_code": {
            "name": "generate_code",
            "location": 449,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpParameter.generate_decl": {
            "name": "generate_decl",
            "location": 471,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpParameter.generate_doc": {
            "name": "generate_doc",
            "location": 481,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpParameter.generate_from_json": {
            "name": "generate_from_json",
            "location": 499,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict_": []
            }
        },
        "CdpReturn.py_annotation": {
            "name": "py_annotation",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpReturn.generate_doc": {
            "name": "generate_doc",
            "location": 529,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpReturn.generate_return": {
            "name": "generate_return",
            "location": 539,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dict_": []
            }
        },
        "CdpCommand.py_name": {
            "name": "py_name",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpCommand.from_json": {
            "name": "from_json",
            "location": 561,
            "return": [
                "_TCdpCommand@@CdpCommand@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpCommand]"
                ],
                "command": [],
                "domain": []
            }
        },
        "CdpCommand.generate_code": {
            "name": "generate_code",
            "location": 576,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpCommand.get_refs": {
            "name": "get_refs",
            "location": 659,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpEvent.py_name": {
            "name": "py_name",
            "location": 681,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpEvent.from_json": {
            "name": "from_json",
            "location": 686,
            "return": [
                "_TCdpEvent@@CdpEvent@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpEvent]"
                ],
                "json": [],
                "domain": []
            }
        },
        "CdpEvent.generate_code": {
            "name": "generate_code",
            "location": 698,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpEvent.get_refs": {
            "name": "get_refs",
            "location": 736,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpDomain.module": {
            "name": "module",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CdpDomain.from_json": {
            "name": "from_json",
            "location": 764,
            "return": [
                "_TCdpDomain@@CdpDomain@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCdpDomain]"
                ],
                "domain": []
            }
        },
        "CdpDomain.generate_code": {
            "name": "generate_code",
            "location": 782,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpDomain.generate_imports": {
            "name": "generate_imports",
            "location": 801,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CdpDomain.generate_sphinx": {
            "name": "generate_sphinx",
            "location": 838,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-chrome-devtools-protocol-master/generator/test_generate.py": {
        "test_docstring": {
            "name": "test_docstring",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_escape_docstring": {
            "name": "test_escape_docstring",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_primitive_type": {
            "name": "test_cdp_primitive_type",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_array_of_primitive_type": {
            "name": "test_cdp_array_of_primitive_type",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_enum_type": {
            "name": "test_cdp_enum_type",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_class_type": {
            "name": "test_cdp_class_type",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command": {
            "name": "test_cdp_command",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_no_params_or_returns": {
            "name": "test_cdp_command_no_params_or_returns",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_return_primitive": {
            "name": "test_cdp_command_return_primitive",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_return_array_of_primitive": {
            "name": "test_cdp_command_return_array_of_primitive",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_array_of_primitive_parameter": {
            "name": "test_cdp_command_array_of_primitive_parameter",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_ref_parameter": {
            "name": "test_cdp_command_ref_parameter",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_multiple_return": {
            "name": "test_cdp_command_multiple_return",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_command_array_of_ref_parameter": {
            "name": "test_cdp_command_array_of_ref_parameter",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_event": {
            "name": "test_cdp_event",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_event_parameter_docs": {
            "name": "test_cdp_event_parameter_docs",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_domain_imports": {
            "name": "test_cdp_domain_imports",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_domain_shadows_builtin": {
            "name": "test_domain_shadows_builtin",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cdp_domain_sphinx": {
            "name": "test_cdp_domain_sphinx",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-chrome-devtools-protocol-master/test/test_cdp.py": {
        "test_primitive_type": {
            "name": "test_primitive_type",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_type": {
            "name": "test_enum_type",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_class_type": {
            "name": "test_class_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_type": {
            "name": "test_event_type",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_type_with_dependency": {
            "name": "test_event_type_with_dependency",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_dispatch": {
            "name": "test_event_dispatch",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
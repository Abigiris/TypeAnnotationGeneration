{
    "python-concepts-master/binary_search_trees/bst.py": {
        "fill_tree": {
            "name": "fill_tree",
            "location": 82,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "tree": [
                    "_T0@@"
                ],
                "num_elems": [],
                "max_int": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BST.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BST.insert": {
            "name": "insert",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BST._insert": {
            "name": "_insert",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "current_node": []
            }
        },
        "BST.print_tree": {
            "name": "print_tree",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BST._print_tree": {
            "name": "_print_tree",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_node": []
            }
        },
        "BST.height": {
            "name": "height",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BST._height": {
            "name": "_height",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "current_node": [],
                "current_height": []
            }
        },
        "BST.search": {
            "name": "search",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BST._search": {
            "name": "_search",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "current_node": []
            }
        }
    },
    "python-concepts-master/bubble-sort/bubblesort.py": {
        "bubblesort": {
            "name": "bubblesort",
            "location": 4,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "l": [
                    "_T0@@"
                ]
            }
        }
    },
    "python-concepts-master/context-managers/File.py": {
        "file_manager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "open_as": []
            }
        },
        "file_manager.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "file_manager.__exit__": {
            "name": "__exit__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        }
    },
    "python-concepts-master/hash-tables/chained.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HashTable.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "HashTable.hash": {
            "name": "hash",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HashTable.insert": {
            "name": "insert",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HashTable.find": {
            "name": "find",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTable.remove": {
            "name": "remove",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-concepts-master/linked-lists/linked_list.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.append": {
            "name": "append",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LinkedList.length": {
            "name": "length",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.display": {
            "name": "display",
            "location": 35,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.get": {
            "name": "get",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LinkedList.remove": {
            "name": "remove",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "python-concepts-master/type-hinting/bank.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "initial_balance": []
            }
        },
        "Account.credit": {
            "name": "credit",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Account.spend": {
            "name": "spend",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Customer.__init": {
            "name": "__init",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Customer.find_account_by_name": {
            "name": "find_account_by_name",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Customer.add_account": {
            "name": "add_account",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Customer.primary_account": {
            "name": "primary_account",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bank.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bank.add_customers": {
            "name": "add_customers",
            "location": 60,
            "return": [
                "List[bool]"
            ],
            "arguments": {
                "self": [],
                "customers": []
            }
        },
        "Bank.transfer_funds": {
            "name": "transfer_funds",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "customer_name_from": [],
                "customer_name_to": [],
                "value": []
            }
        }
    },
    "python-concepts-master/type-hinting/hinting.py": {
        "expand_list": {
            "name": "expand_list",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "mylist": []
            }
        }
    }
}
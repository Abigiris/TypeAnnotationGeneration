{
    "python-experiment-master/connexion-experiment/basic_authentication_test.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 7,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "basic_auth": {
            "name": "basic_auth",
            "location": 13,
            "return": [],
            "arguments": {
                "username": [],
                "password": [],
                "required_scopes": []
            }
        },
        "client": {
            "name": "client",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_get_secret_responds_with_200_when_username_and_password_are_valid": {
            "name": "test_get_secret_responds_with_200_when_username_and_password_are_valid",
            "location": 30,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_secret_responds_with_401_when_username_and_password_are_not_valid": {
            "name": "test_get_secret_responds_with_401_when_username_and_password_are_not_valid",
            "location": 40,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "make_authorization_header": {
            "name": "make_authorization_header",
            "location": 53,
            "return": [],
            "arguments": {
                "username": [],
                "password": []
            }
        }
    },
    "python-experiment-master/connexion-experiment/injector_test.py": {
        "make_configuration": {
            "name": "make_configuration",
            "location": 12,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "client": {
            "name": "client",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_get_message": {
            "name": "test_get_message",
            "location": 43,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "make_configuration.configure": {
            "name": "configure",
            "location": 13,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "make_configuration.configure.get_count": {
            "name": "get_count",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/connexion-experiment/injector_test_handler.py": {
        "get_message": {
            "name": "get_message",
            "location": 14,
            "return": [],
            "arguments": {
                "message_generator": [],
                "count": []
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "MessageGenerator.make_message": {
            "name": "make_message",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiment-master/connexion-experiment/main.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/connexion-experiment/main_test.py": {
        "client": {
            "name": "client",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_get_hello_should_say_hello_world": {
            "name": "test_get_hello_should_say_hello_world",
            "location": 12,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/connexion-experiment/nullable_query_params_test.py": {
        "get_people": {
            "name": "get_people",
            "location": 8,
            "return": [],
            "arguments": {
                "name": [],
                "page": []
            }
        },
        "client": {
            "name": "client",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_it_applies_defaults": {
            "name": "test_it_applies_defaults",
            "location": 30,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_it_handles_non_defaults": {
            "name": "test_it_handles_non_defaults",
            "location": 39,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/connexion-experiment/request_validation_test.py": {
        "add_numbers": {
            "name": "add_numbers",
            "location": 6,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "add_numbers_json": {
            "name": "add_numbers_json",
            "location": 12,
            "return": [],
            "arguments": {
                "body": []
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 18,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "client": {
            "name": "client",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_add_numbers_responds_with_200_when_parameters_are_numbers": {
            "name": "test_add_numbers_responds_with_200_when_parameters_are_numbers",
            "location": 36,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_add_numbers_responds_with_400_when_parameters_are_strings": {
            "name": "test_add_numbers_responds_with_400_when_parameters_are_strings",
            "location": 44,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_add_numbers_json_responds_with_200_when_parameters_are_numbers": {
            "name": "test_add_numbers_json_responds_with_200_when_parameters_are_numbers",
            "location": 56,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_add_numbers_json_responds_with_400_when_parameters_are_strings": {
            "name": "test_add_numbers_json_responds_with_400_when_parameters_are_strings",
            "location": 67,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_user_responds_with_200_when_user_id_is_an_integer": {
            "name": "test_get_user_responds_with_200_when_user_id_is_an_integer",
            "location": 82,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_user_responds_with_404_when_user_id_is_a_string": {
            "name": "test_get_user_responds_with_404_when_user_id_is_a_string",
            "location": 91,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/connexion-experiment/response_validation_test.py": {
        "get_message": {
            "name": "get_message",
            "location": 6,
            "return": [],
            "arguments": {
                "return_valid_response": []
            }
        },
        "client": {
            "name": "client",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_get_message_responds_with_200_when_response_is_valid": {
            "name": "test_get_message_responds_with_200_when_response_is_valid",
            "location": 28,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_message_responds_with_500_when_response_does_not_match_the_api_spec": {
            "name": "test_get_message_responds_with_500_when_response_does_not_match_the_api_spec",
            "location": 36,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/dataclasses-json-experiment/tests/json_test.py": {
        "test_object_to_json": {
            "name": "test_object_to_json",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_object_from_json": {
            "name": "test_object_from_json",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_object_to_dictionary": {
            "name": "test_object_to_dictionary",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_object_from_dictionary": {
            "name": "test_object_from_dictionary",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/dataclasses-json-experiment/tests/polymorphic_test.py": {
        "test_it_works": {
            "name": "test_it_works",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/everett-experiment/dummy_test.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/flask-experiment/main.py": {
        "hello_plaintext": {
            "name": "hello_plaintext",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "hello_json": {
            "name": "hello_json",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/flask-experiment/main_test.py": {
        "client": {
            "name": "client",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_get_hello_plaintext": {
            "name": "test_get_hello_plaintext",
            "location": 10,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_get_hello_json": {
            "name": "test_get_hello_json",
            "location": 16,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/ioc-experiment/dependency_injector_test.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "suffix": []
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "greeter": []
            }
        },
        "MessageGenerator.make_message": {
            "name": "make_message",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "python-experiment-master/ioc-experiment/injector_pytest_integration_test.py": {
        "register_injector_fixtures": {
            "name": "register_injector_fixtures",
            "location": 8,
            "return": [],
            "arguments": {
                "definitions": []
            }
        },
        "injector": {
            "name": "injector",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 36,
            "return": [],
            "arguments": {
                "service_a": [],
                "service_b": []
            }
        },
        "register_injector_fixtures.make_fixture": {
            "name": "make_fixture",
            "location": 9,
            "return": [],
            "arguments": {
                "name": [],
                "resolver": []
            }
        },
        "injector.configure": {
            "name": "configure",
            "location": 24,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "register_injector_fixtures.make_fixture.f": {
            "name": "f",
            "location": 10,
            "return": [],
            "arguments": {
                "injector": []
            }
        }
    },
    "python-experiment-master/ioc-experiment/injector_test.py": {
        "test_dummy": {
            "name": "test_dummy",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_multibind": {
            "name": "test_multibind",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_custom_scope": {
            "name": "test_custom_scope",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_child_injector": {
            "name": "test_child_injector",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "Greeter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "suffix": []
            }
        },
        "Greeter.greet": {
            "name": "greet",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MessageGenerator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "greeter": []
            }
        },
        "MessageGenerator.make_message": {
            "name": "make_message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AppModule.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "greeting_prefix": [],
                "greeting_suffix": []
            }
        },
        "AppModule.configure": {
            "name": "configure",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "binder": []
            }
        },
        "test_multibind.configure": {
            "name": "configure",
            "location": 61,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "test_child_injector.configure_parent": {
            "name": "configure_parent",
            "location": 170,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "test_child_injector.configure_child": {
            "name": "configure_child",
            "location": 172,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "test_multibind.Handler3.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "something": []
            }
        },
        "test_multibind.OmgModule.handler3": {
            "name": "handler3",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "something": []
            }
        },
        "test_custom_scope.ProjectScope.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_custom_scope.ProjectScope.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "test_custom_scope.ProjectScope.get": {
            "name": "get",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "provider": []
            }
        },
        "test_custom_scope.OrdinaryHandler.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "test_custom_scope.SpecialHandler.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "test_custom_scope.ProjectScopedHandlerModule.handler": {
            "name": "handler",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "project": []
            }
        },
        "test_custom_scope.ProjectScopedHandlerModule.some_singleton_service": {
            "name": "some_singleton_service",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "test_custom_scope.f": {
            "name": "f",
            "location": 154,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "python-experiment-master/learning-python/tests/annotations_test.py": {
        "test_use_local_variable_annotations": {
            "name": "test_use_local_variable_annotations",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_use_function_annotations": {
            "name": "test_use_function_annotations",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_use_class_annotations": {
            "name": "test_use_class_annotations",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_use_function_annotations.f": {
            "name": "f",
            "location": 14,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_use_class_annotations.X.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        }
    },
    "python-experiment-master/learning-python/tests/asyncio_test.py": {
        "test_run": {
            "name": "test_run",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_create_task": {
            "name": "test_create_task",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/class_test.py": {
        "test_class_and_instance_field_behavior": {
            "name": "test_class_and_instance_field_behavior",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/dataclass_test.py": {
        "test_dataclass": {
            "name": "test_dataclass",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_dataclass_field": {
            "name": "test_dataclass_field",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_dataclass_nested": {
            "name": "test_dataclass_nested",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/decorator_test.py": {
        "test_decorate_function": {
            "name": "test_decorate_function",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_decorate_function.trace": {
            "name": "trace",
            "location": 8,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "test_decorate_function.add_numbers": {
            "name": "add_numbers",
            "location": 24,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_decorate_function.trace.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/enum_test.py": {
        "test_enum": {
            "name": "test_enum",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_string_enum": {
            "name": "test_string_enum",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/function_test.py": {
        "test_args": {
            "name": "test_args",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "test_kwargs": {
            "name": "test_kwargs",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_args_and_kwargs": {
            "name": "test_args_and_kwargs",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_args_kwargs_and_explicit": {
            "name": "test_args_kwargs_and_explicit",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_asterisk_args_call": {
            "name": "test_asterisk_args_call",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_double_asterisk_kwargs_call": {
            "name": "test_double_asterisk_kwargs_call",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_chaining": {
            "name": "test_chaining",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_args.f": {
            "name": "f",
            "location": 2,
            "return": [],
            "arguments": {}
        },
        "test_kwargs.f": {
            "name": "f",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_args_and_kwargs.f": {
            "name": "f",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_args_kwargs_and_explicit.f": {
            "name": "f",
            "location": 38,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_asterisk_args_call.f": {
            "name": "f",
            "location": 93,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_double_asterisk_kwargs_call.f": {
            "name": "f",
            "location": 101,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_chaining.base": {
            "name": "base",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_chaining.f": {
            "name": "f",
            "location": 125,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "python-experiment-master/learning-python/tests/mock_test.py": {
        "test_mock_assert_called_throws_when_no_method_call": {
            "name": "test_mock_assert_called_throws_when_no_method_call",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_mock_assert_called_doesnt_throw_when_method_call": {
            "name": "test_mock_assert_called_doesnt_throw_when_method_call",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_various_method_call_assertions": {
            "name": "test_various_method_call_assertions",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_call_args": {
            "name": "test_call_args",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_configure_mock": {
            "name": "test_configure_mock",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/learning-python/tests/str_and_repr_test.py": {
        "test_default": {
            "name": "test_default",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "test_custom_str": {
            "name": "test_custom_str",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_custom_str.X.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiment-master/learning-python/tests/with_test.py": {
        "test_with": {
            "name": "test_with",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_with_contextmanager": {
            "name": "test_with_contextmanager",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_with_contextmanager.something": {
            "name": "something",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_with.Resource.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_with.Resource.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "test_with.Resource.work": {
            "name": "work",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-experiment-master/logging-experiment/basic_test.py": {
        "test_basic_output": {
            "name": "test_basic_output",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_my_json_output": {
            "name": "test_my_json_output",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_python_json_logger_json_output": {
            "name": "test_python_json_logger_json_output",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_logger_adapter": {
            "name": "test_logger_adapter",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_pytest_logging": {
            "name": "test_pytest_logging",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "MyJsonFormatter.format": {
            "name": "format",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "log_record": []
            }
        },
        "MyPythonJsonLoggerFormatter.add_fields": {
            "name": "add_fields",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "log_record": [],
                "record": [],
                "message_dict": []
            }
        },
        "ExtraAppendingFormatter.format": {
            "name": "format",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "InjectExtraLoggerAdapter.process": {
            "name": "process",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "kwargs": []
            }
        }
    },
    "python-experiment-master/logging-experiment/conftest.py": {
        "init_logging": {
            "name": "init_logging",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/logging-experiment/demo.py": {},
    "python-experiment-master/logging-experiment/eliot_demo.py": {
        "collect_messages": {
            "name": "collect_messages",
            "location": 10,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "get_some_data": {
            "name": "get_some_data",
            "location": 18,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "python-experiment-master/logging-experiment/logbook_test.py": {
        "text_formatter": {
            "name": "text_formatter",
            "location": 11,
            "return": [],
            "arguments": {
                "record": [],
                "handler": []
            }
        },
        "json_formatter": {
            "name": "json_formatter",
            "location": 25,
            "return": [],
            "arguments": {
                "record": [],
                "handler": []
            }
        },
        "test_standard_logging_works": {
            "name": "test_standard_logging_works",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_mdc_works": {
            "name": "test_mdc_works",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_json_formatting_works": {
            "name": "test_json_formatting_works",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_exception_text_formatter": {
            "name": "test_exception_text_formatter",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_exception_json_formatter": {
            "name": "test_exception_json_formatter",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_asyncio": {
            "name": "test_asyncio",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_mdc_works.inject_extra": {
            "name": "inject_extra",
            "location": 57,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "test_json_formatting_works.inject_extra": {
            "name": "inject_extra",
            "location": 72,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "test_asyncio.task.inject_extra": {
            "name": "inject_extra",
            "location": 134,
            "return": [],
            "arguments": {
                "record": []
            }
        }
    },
    "python-experiment-master/marshmallow-experiment/dummy_test.py": {
        "test_can_serialize_diry_dict_to_dict": {
            "name": "test_can_serialize_diry_dict_to_dict",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_can_serialize_dataclass_to_dict": {
            "name": "test_can_serialize_dataclass_to_dict",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_can_deserialize_dict_from_dict": {
            "name": "test_can_deserialize_dict_from_dict",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_can_deserialize_dataclass_from_dict": {
            "name": "test_can_deserialize_dataclass_from_dict",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_can_validate": {
            "name": "test_can_validate",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_can_validate.validate_priority": {
            "name": "validate_priority",
            "location": 83,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "test_can_deserialize_dataclass_from_dict.NoteSchema.make_note": {
            "name": "make_note",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "python-experiment-master/moto-experiment/moto_test.py": {
        "test": {
            "name": "test",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/pip-venv-make-experiment/experiment/experiment_test.py": {
        "client": {
            "name": "client",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_dummy": {
            "name": "test_dummy",
            "location": 14,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "python-experiment-master/pip-venv-make-experiment/experiment/__init__.py": {
        "hello_json": {
            "name": "hello_json",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/pycuda-experiment/dummy_test.py": {
        "test": {
            "name": "test",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/pytest-experiment/dummy_test.py": {
        "test_add_numbers": {
            "name": "test_add_numbers",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_sub_numbers": {
            "name": "test_sub_numbers",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_div_numbers": {
            "name": "test_div_numbers",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/pytest-experiment/calculator/__init__.py": {
        "add_numbers": {
            "name": "add_numbers",
            "location": 1,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "sub_numbers": {
            "name": "sub_numbers",
            "location": 5,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "mul_numbers": {
            "name": "mul_numbers",
            "location": 9,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "div_numbers": {
            "name": "div_numbers",
            "location": 13,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "python-experiment-master/sphinx-experiment/calculator.py": {
        "add_numbers": {
            "name": "add_numbers",
            "location": 13,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "sub_numbers": {
            "name": "sub_numbers",
            "location": 42,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "mul_numbers": {
            "name": "mul_numbers",
            "location": 62,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "div_numbers": {
            "name": "div_numbers",
            "location": 82,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "python-experiment-master/sphinx-experiment/calculator_test.py": {
        "test_fun": {
            "name": "test_fun",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_add_numbers_adds_numbers": {
            "name": "test_add_numbers_adds_numbers",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_add_numbers_adds_other_numbers": {
            "name": "test_add_numbers_adds_other_numbers",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_sub_numbers_subs_numbers": {
            "name": "test_sub_numbers_subs_numbers",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_mul_numbers_muls_numbers": {
            "name": "test_mul_numbers_muls_numbers",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_div_numbers_divs_numbers": {
            "name": "test_div_numbers_divs_numbers",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/sphinx-experiment/oo_calculator.py": {
        "Calculator.add_numbers": {
            "name": "add_numbers",
            "location": 13,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Calculator.sub_numbers": {
            "name": "sub_numbers",
            "location": 26,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Calculator.mul_numbers": {
            "name": "mul_numbers",
            "location": 39,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Calculator.div_numbers": {
            "name": "div_numbers",
            "location": 52,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "python-experiment-master/sphinx-experiment/docs/conf.py": {},
    "python-experiment-master/sqlalchemy-experiment/dummy_test.py": {
        "test_alembic_migrations": {
            "name": "test_alembic_migrations",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_sql_alchemy": {
            "name": "test_sql_alchemy",
            "location": 46,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/sqlalchemy-experiment/orm_test.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/sqlalchemy-experiment/alembic/env.py": {},
    "python-experiment-master/sqlalchemy-experiment/alembic/versions/1_create_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/sqlalchemy-experiment/alembic/versions/2_add_description_column_to_users_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "python-experiment-master/typing-experiment/dummy_test.py": {
        "print_user1": {
            "name": "print_user1",
            "location": 11,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "print_user2": {
            "name": "print_user2",
            "location": 16,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "print_user3": {
            "name": "print_user3",
            "location": 21,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "test_typed_dict": {
            "name": "test_typed_dict",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_print_user3": {
            "name": "test_print_user3",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_dummy": {
            "name": "test_dummy",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    }
}
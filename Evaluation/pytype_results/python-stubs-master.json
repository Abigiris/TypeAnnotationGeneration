{
    "python-stubs-master/stubs/exifread/__init__.py": {
        "process_file": {
            "name": "process_file",
            "location": 10,
            "return": [],
            "arguments": {
                "f": [],
                "stop_tag": [],
                "details": [],
                "strict": [],
                "debug": []
            }
        },
        "_Readable.__iter__": {
            "name": "__iter__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Readable.read": {
            "name": "read",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "_Readable.seek": {
            "name": "seek",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "what": []
            }
        },
        "_Readable.tell": {
            "name": "tell",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/google/__init__.py": {},
    "python-stubs-master/stubs/google/oauth2/service_account.py": {
        "Credentials.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "signer": [],
                "service_account_email": [],
                "token_uri": [],
                "scopes": [],
                "default_scopes": [],
                "subject": [],
                "project_id": [],
                "quota_project_id": [],
                "additional_claims": [],
                "always_use_jwt_access": []
            }
        },
        "Credentials.from_service_account_file": {
            "name": "from_service_account_file",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "Credentials.with_scopes": {
            "name": "with_scopes",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "scopes": [],
                "default_scopes": []
            }
        },
        "Credentials.with_subject": {
            "name": "with_subject",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        }
    },
    "python-stubs-master/stubs/google/oauth2/__init__.py": {},
    "python-stubs-master/stubs/googleapiclient/discovery.py": {
        "build": {
            "name": "build",
            "location": 14,
            "return": [],
            "arguments": {
                "serviceName": [],
                "version": []
            }
        },
        "Resource.__getattr__": {
            "name": "__getattr__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "python-stubs-master/stubs/googleapiclient/errors.py": {
        "HttpError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "resp": [],
                "content": []
            }
        },
        "HttpError.status_code": {
            "name": "status_code",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchError.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "UnexpectedMethodError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnexpectedBodyError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "expected": [],
                "provided": []
            }
        }
    },
    "python-stubs-master/stubs/googleapiclient/http.py": {},
    "python-stubs-master/stubs/googleapiclient/model.py": {},
    "python-stubs-master/stubs/googleapiclient/__init__.py": {},
    "python-stubs-master/stubs/googleapiclient/discovery_cache/base.py": {
        "Cache.get": {
            "name": "get",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Cache.set": {
            "name": "set",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "content": []
            }
        }
    },
    "python-stubs-master/stubs/googleapiclient/discovery_cache/__init__.py": {},
    "python-stubs-master/stubs/pika/amqp_object.py": {
        "Method.get_properties": {
            "name": "get_properties",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.get_body": {
            "name": "get_body",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/pika/channel.py": {
        "Channel.basic_cancel": {
            "name": "basic_cancel",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "consumer_tag": [],
                "callback": []
            }
        },
        "Channel.basic_consume": {
            "name": "basic_consume",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "on_message_callback": [],
                "auto_ack": [],
                "exclusive": [],
                "consumer_tag": [],
                "arguments": [],
                "callback": []
            }
        },
        "Channel.close": {
            "name": "close",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "reply_code": [],
                "reply_text": []
            }
        },
        "Channel.exchange_declare": {
            "name": "exchange_declare",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "exchange": [],
                "exchange_type": [],
                "passive": [],
                "durable": [],
                "auto_delete": [],
                "internal": [],
                "arguments": [],
                "callback": []
            }
        },
        "Channel.queue_bind": {
            "name": "queue_bind",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "exchange": [],
                "routing_key": [],
                "arguments": [],
                "callback": []
            }
        },
        "Channel.queue_declare": {
            "name": "queue_declare",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "passive": [],
                "durable": [],
                "exclusive": [],
                "auto_delete": [],
                "arguments": [],
                "callback": []
            }
        },
        "Channel.queue_delete": {
            "name": "queue_delete",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "queue": [],
                "if_unused": [],
                "if_empty": [],
                "callback": []
            }
        }
    },
    "python-stubs-master/stubs/pika/compat.py": {},
    "python-stubs-master/stubs/pika/connection.py": {
        "ConnectionParameters.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "virtual_host": [],
                "credentials": [],
                "channel_max": [],
                "frame_max": [],
                "heartbeat": [],
                "ssl_options": [],
                "connection_attempts": [],
                "retry_delay": [],
                "socket_timeout": [],
                "stack_timeout": [],
                "locale": [],
                "blocked_connection_timeout": [],
                "client_properties": [],
                "tcp_options": []
            }
        },
        "Connection.channel": {
            "name": "channel",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "channel_number": [],
                "on_open_callback": []
            }
        }
    },
    "python-stubs-master/stubs/pika/credentials.py": {
        "PlainCredentials.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "erase_on_connect": []
            }
        }
    },
    "python-stubs-master/stubs/pika/data.py": {
        "encode_short_string": {
            "name": "encode_short_string",
            "location": 11,
            "return": [],
            "arguments": {
                "pieces": [],
                "value": []
            }
        },
        "encode_table": {
            "name": "encode_table",
            "location": 12,
            "return": [],
            "arguments": {
                "pieces": [],
                "table": []
            }
        },
        "encode_value": {
            "name": "encode_value",
            "location": 13,
            "return": [],
            "arguments": {
                "pieces": [],
                "value": []
            }
        }
    },
    "python-stubs-master/stubs/pika/frame.py": {
        "decode_frame": {
            "name": "decode_frame",
            "location": 35,
            "return": [],
            "arguments": {
                "data_in": []
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "frame_type": [],
                "channel_number": []
            }
        },
        "Frame.marshal": {
            "name": "marshal",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "channel_number": [],
                "method": []
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "channel_number": [],
                "body_size": [],
                "props": []
            }
        },
        "Body.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "channel_number": [],
                "fragment": []
            }
        },
        "Heartbeat.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolHeader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "major": [],
                "minor": [],
                "revision": []
            }
        }
    },
    "python-stubs-master/stubs/pika/spec.py": {},
    "python-stubs-master/stubs/pika/__init__.py": {},
    "python-stubs-master/stubs/pika/adapters/asyncio_connection.py": {
        "AsyncioConnection.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": [],
                "on_open_callback": [],
                "on_open_error_callback": [],
                "on_close_callback": [],
                "custom_ioloop": [],
                "internal_connection_workflow": []
            }
        }
    },
    "python-stubs-master/stubs/pika/adapters/base_connection.py": {},
    "python-stubs-master/stubs/pika/adapters/blocking_connection.py": {
        "BlockingConnection.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "BlockingConnection.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockingConnection.__exit__": {
            "name": "__exit__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BlockingConnection.channel": {
            "name": "channel",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "channel_number": []
            }
        },
        "BlockingChannel.exchange_declare": {
            "name": "exchange_declare",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "exchange": [],
                "exchange_type": [],
                "passive": [],
                "durable": [],
                "auto_delete": [],
                "internal": [],
                "arguments": []
            }
        },
        "BlockingChannel.basic_publish": {
            "name": "basic_publish",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "exchange": [],
                "routing_key": [],
                "body": [],
                "properties": [],
                "mandatory": []
            }
        }
    },
    "python-stubs-master/stubs/pika/adapters/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/exc.py": {},
    "python-stubs-master/stubs/sqlalchemy/log.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [],
            "arguments": {
                "__name": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/schema.py": {},
    "python-stubs-master/stubs/sqlalchemy/types.py": {},
    "python-stubs-master/stubs/sqlalchemy/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/dialects/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/dialects/postgresql/base.py": {},
    "python-stubs-master/stubs/sqlalchemy/dialects/postgresql/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/engine/base.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 231,
            "return": [],
            "arguments": {
                "__name": []
            }
        },
        "DBAPIConnection.close": {
            "name": "close",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPIConnection.commit": {
            "name": "commit",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPIConnection.cursor": {
            "name": "cursor",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.description": {
            "name": "description",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.rowcount": {
            "name": "rowcount",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.close": {
            "name": "close",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.execute": {
            "name": "execute",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "__operation": [],
                "__parameters": []
            }
        },
        "DBAPICursor.executemany": {
            "name": "executemany",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "__operation": [],
                "__seq_of_parameters": []
            }
        },
        "DBAPICursor.fetchone": {
            "name": "fetchone",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.fetchmany": {
            "name": "fetchmany",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "__size": []
            }
        },
        "DBAPICursor.fetchall": {
            "name": "fetchall",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DBAPICursor.setinputsize": {
            "name": "setinputsize",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "__sizes": []
            }
        },
        "DBAPICursor.setoutputsize": {
            "name": "setoutputsize",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "__size": [],
                "__column": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "connection": [],
                "close_with_result": [],
                "_branch_from": [],
                "_execution_options": [],
                "_dispatch": [],
                "_has_events": [],
                "_allow_revalidate": []
            }
        },
        "Connection.schema_for_object": {
            "name": "schema_for_object",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Connection.__enter__": {
            "name": "__enter__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.__exit__": {
            "name": "__exit__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "traceback": []
            }
        },
        "Connection.execution_options": {
            "name": "execution_options",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_execution_options": {
            "name": "get_execution_options",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.closed": {
            "name": "closed",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.invalidated": {
            "name": "invalidated",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.connection": {
            "name": "connection",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_isolation_level": {
            "name": "get_isolation_level",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.default_isolation_level": {
            "name": "default_isolation_level",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.info": {
            "name": "info",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.connect": {
            "name": "connect",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "close_with_result": []
            }
        },
        "Connection.invalidate": {
            "name": "invalidate",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "Connection.detach": {
            "name": "detach",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin": {
            "name": "begin",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin_nested": {
            "name": "begin_nested",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.begin_twophase": {
            "name": "begin_twophase",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "xid": []
            }
        },
        "Connection.recover_twophase": {
            "name": "recover_twophase",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.rollback_prepared": {
            "name": "rollback_prepared",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "xid": [],
                "recover": []
            }
        },
        "Connection.commit_prepared": {
            "name": "commit_prepared",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "xid": [],
                "recover": []
            }
        },
        "Connection.in_transaction": {
            "name": "in_transaction",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.in_nested_transaction": {
            "name": "in_nested_transaction",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_transaction": {
            "name": "get_transaction",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_nested_transaction": {
            "name": "get_nested_transaction",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.scalar": {
            "name": "scalar",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "Connection.execute": {
            "name": "execute",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Connection.exec_driver_sql": {
            "name": "exec_driver_sql",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "statement": [],
                "parameters": [],
                "execution_options": []
            }
        },
        "Connection.transaction": {
            "name": "transaction",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Connection.run_callable": {
            "name": "run_callable",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "ExceptionContextImpl.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [],
                "sqlalchemy_exception": [],
                "engine": [],
                "connection": [],
                "cursor": [],
                "statement": [],
                "parameters": [],
                "context": [],
                "is_disconnect": [],
                "invalidate_pool_on_disconnect": []
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Transaction.is_valid": {
            "name": "is_valid",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.close": {
            "name": "close",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.rollback": {
            "name": "rollback",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.commit": {
            "name": "commit",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transaction.is_active": {
            "name": "is_active",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoPhaseTransaction.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "xid": []
            }
        },
        "TwoPhaseTransaction.prepare": {
            "name": "prepare",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "pool": [],
                "dialect": [],
                "url": [],
                "logging_name": [],
                "echo": [],
                "proxy": [],
                "execution_options": [],
                "hide_parameters": []
            }
        },
        "Engine.engine": {
            "name": "engine",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.clear_compiled_cache": {
            "name": "clear_compiled_cache",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.update_execution_options": {
            "name": "update_execution_options",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.execution_options": {
            "name": "execution_options",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.get_execution_options": {
            "name": "get_execution_options",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.name": {
            "name": "name",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.driver": {
            "name": "driver",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.dispose": {
            "name": "dispose",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine.begin": {
            "name": "begin",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "close_with_result": []
            }
        },
        "Engine.transaction": {
            "name": "transaction",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Engine.run_callable": {
            "name": "run_callable",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "callable_": []
            }
        },
        "Engine.execute": {
            "name": "execute",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Engine.scalar": {
            "name": "scalar",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "statement": []
            }
        },
        "Engine.connect": {
            "name": "connect",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "close_with_result": []
            }
        },
        "Engine.table_names": {
            "name": "table_names",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "connection": []
            }
        },
        "Engine.has_table": {
            "name": "has_table",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "Engine.raw_connection": {
            "name": "raw_connection",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "_connection": []
            }
        },
        "OptionEngineMixin.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "proxied": [],
                "execution_options": []
            }
        },
        "Engine._trans_ctx.__enter__": {
            "name": "__enter__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Engine._trans_ctx.__exit__": {
            "name": "__exit__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "traceback": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/engine/cursor.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "__item": []
            }
        },
        "BaseCursorResult.__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "CursorResult.__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/engine/interfaces.py": {
        "Dialect.name": {
            "name": "name",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialect.paramstyle": {
            "name": "paramstyle",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dialect.__getattr__": {
            "name": "__getattr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "CreateEnginePlugin.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ExecutionContext.__getattr__": {
            "name": "__getattr__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "Connectable.execute": {
            "name": "execute",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "Connectable.scalar": {
            "name": "scalar",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/engine/result.py": {
        "result_tuple": {
            "name": "result_tuple",
            "location": 19,
            "return": [],
            "arguments": {
                "fields": [],
                "extra": []
            }
        },
        "null_result": {
            "name": "null_result",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "ResultProxy.__getattr__": {
            "name": "__getattr__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ResultMetaData.__getattr__": {
            "name": "__getattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "RMKeyView.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "SimpleResultMetaData.__getattr__": {
            "name": "__getattr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ResultInternal.__getattr__": {
            "name": "__getattr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "_WithKeys.keys": {
            "name": "keys",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "cursor_metadata": []
            }
        },
        "Result.yield_per": {
            "name": "yield_per",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "Result.unique": {
            "name": "unique",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "strategy": []
            }
        },
        "Result.columns": {
            "name": "columns",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.scalars": {
            "name": "scalars",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Result.mappings": {
            "name": "mappings",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__next__": {
            "name": "__next__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.partitions": {
            "name": "partitions",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Result.fetchall": {
            "name": "fetchall",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.fetchone": {
            "name": "fetchone",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.fetchmany": {
            "name": "fetchmany",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Result.all": {
            "name": "all",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.first": {
            "name": "first",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.one_or_none": {
            "name": "one_or_none",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.scalar_one": {
            "name": "scalar_one",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.scalar_one_or_none": {
            "name": "scalar_one_or_none",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.one": {
            "name": "one",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.scalar": {
            "name": "scalar",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.freeze": {
            "name": "freeze",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.merge": {
            "name": "merge",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScalarResult.__getattr__": {
            "name": "__getattr__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "MappingResult.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "FrozenResult.__getattr__": {
            "name": "__getattr__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "IteratorResult.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ChunkedIteratorResult.__getattr__": {
            "name": "__getattr__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "MergedResult.__getattr__": {
            "name": "__getattr__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/engine/util.py": {
        "connection_memoize": {
            "name": "connection_memoize",
            "location": 7,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "TransactionalContext.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionalContext.__exit__": {
            "name": "__exit__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/engine/__init__.py": {
        "create_engine": {
            "name": "create_engine",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "python-stubs-master/stubs/sqlalchemy/ext/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/ext/declarative/extensions.py": {
        "instrument_declarative": {
            "name": "instrument_declarative",
            "location": 3,
            "return": [],
            "arguments": {
                "cls": [],
                "cls_registry": [],
                "metadata": []
            }
        },
        "ConcreteBase.__declare_first__": {
            "name": "__declare_first__",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AbstractConcreteBase.__declare_first__": {
            "name": "__declare_first__",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DeferredReflection.prepare": {
            "name": "prepare",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [],
                "engine": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/ext/declarative/__init__.py": {
        "declarative_base": {
            "name": "declarative_base",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "as_declarative": {
            "name": "as_declarative",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "has_inherited_table": {
            "name": "has_inherited_table",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "synonym_for": {
            "name": "synonym_for",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/base.py": {},
    "python-stubs-master/stubs/sqlalchemy/orm/decl_api.py": {
        "has_inherited_table": {
            "name": "has_inherited_table",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "synonym_for": {
            "name": "synonym_for",
            "location": 32,
            "return": [],
            "arguments": {
                "name": [],
                "map_column": []
            }
        },
        "declarative_mixin": {
            "name": "declarative_mixin",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "declarative_base": {
            "name": "declarative_base",
            "location": 58,
            "return": [],
            "arguments": {
                "bind": [],
                "metadata": [],
                "mapper": [],
                "cls": [],
                "name": [],
                "constructor": [],
                "class_registry": [],
                "metaclass": []
            }
        },
        "as_declarative": {
            "name": "as_declarative",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "_DeclarativeBase.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeclarativeMeta.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "classname": [],
                "bases": [],
                "dict_": []
            }
        },
        "DeclarativeMeta.__setattr__": {
            "name": "__setattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "key": [],
                "value": []
            }
        },
        "DeclarativeMeta.__delattr__": {
            "name": "__delattr__",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "registry.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": [],
                "class_registry": [],
                "constructor": [],
                "_bind": []
            }
        },
        "registry.mappers": {
            "name": "mappers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "registry.configure": {
            "name": "configure",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "cascade": []
            }
        },
        "registry.dispose": {
            "name": "dispose",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "cascade": []
            }
        },
        "registry.generate_base": {
            "name": "generate_base",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "cls": [],
                "name": [],
                "metaclass": []
            }
        },
        "registry.mapped": {
            "name": "mapped",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "registry.as_declarative_base": {
            "name": "as_declarative_base",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "registry.map_declaratively": {
            "name": "map_declaratively",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "registry.map_imperatively": {
            "name": "map_imperatively",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "class_": [],
                "local_table": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/interfaces.py": {},
    "python-stubs-master/stubs/sqlalchemy/orm/query.py": {
        "Query.all": {
            "name": "all",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.scalar": {
            "name": "scalar",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.count": {
            "name": "count",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.delete": {
            "name": "delete",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "synchronize_session": []
            }
        },
        "Query.first": {
            "name": "first",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter": {
            "name": "filter",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter_by": {
            "name": "filter_by",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.order_by": {
            "name": "order_by",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.group_by": {
            "name": "group_by",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.join": {
            "name": "join",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.subquery": {
            "name": "subquery",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "with_labels": [],
                "reduce_columns": []
            }
        },
        "Query.outerjoin": {
            "name": "outerjoin",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.options": {
            "name": "options",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/relationships.py": {
        "RelationshipProperty.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RelationshipProperty.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "RelationshipProperty.__set__": {
            "name": "__set__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/session.py": {
        "Session.rollback": {
            "name": "rollback",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.commit": {
            "name": "commit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.connection": {
            "name": "connection",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "clause": [],
                "bind": [],
                "close_with_result": [],
                "execution_options": []
            }
        },
        "Session.execute": {
            "name": "execute",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "clause": [],
                "params": [],
                "mapper": [],
                "bind": []
            }
        },
        "Session.scalar": {
            "name": "scalar",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "clause": [],
                "params": [],
                "mapper": [],
                "bind": []
            }
        },
        "Session.close": {
            "name": "close",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.query": {
            "name": "query",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.refresh": {
            "name": "refresh",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "attribute_names": [],
                "with_for_update": [],
                "lockmode": []
            }
        },
        "Session.expire_all": {
            "name": "expire_all",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.expire": {
            "name": "expire",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "attribute_names": []
            }
        },
        "Session.add": {
            "name": "add",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Session.add_all": {
            "name": "add_all",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "instances": []
            }
        },
        "Session.delete": {
            "name": "delete",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Session.flush": {
            "name": "flush",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "objects": []
            }
        },
        "sessionmaker.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "bind": [],
                "class_": [],
                "autoflush": [],
                "autocommit": [],
                "expire_on_commit": [],
                "info": []
            }
        },
        "sessionmaker.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/util.py": {
        "aliased": {
            "name": "aliased",
            "location": 18,
            "return": [],
            "arguments": {
                "element": [],
                "alias": [],
                "name": [],
                "flat": [],
                "adapt_on_names": []
            }
        },
        "AliasedClass.__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/orm/__init__.py": {
        "compile_mappers": {
            "name": "compile_mappers",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "clear_mappers": {
            "name": "clear_mappers",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "relationship": {
            "name": "relationship",
            "location": 63,
            "return": [],
            "arguments": {
                "argument": [],
                "secondary": [],
                "primaryjoin": [],
                "secondaryjoin": [],
                "foreign_keys": [],
                "uselist": [],
                "order_by": [],
                "backref": []
            }
        },
        "backref": {
            "name": "backref",
            "location": 82,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/pool/base.py": {},
    "python-stubs-master/stubs/sqlalchemy/pool/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/sql/base.py": {
        "Immutable.__getattr__": {
            "name": "__getattr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "SingletonConstant.__getattr__": {
            "name": "__getattr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "DialectKWArgs.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "CompileState.__getattr__": {
            "name": "__getattr__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "_MetaOptions.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "Options.__getattr__": {
            "name": "__getattr__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "Executable.__getattr__": {
            "name": "__getattr__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "prefix_anon_map.__missing__": {
            "name": "__missing__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ColumnCollection.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "ColumnCollection.__getattr__": {
            "name": "__getattr__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "DedupeColumnCollection.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ImmutableColumnCollection.__getattr__": {
            "name": "__getattr__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "ColumnSet.contains_column": {
            "name": "contains_column",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ColumnSet.extend": {
            "name": "extend",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "cols": []
            }
        },
        "ColumnSet.__add__": {
            "name": "__add__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnSet.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnSet.__hash__": {
            "name": "__hash__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/compiler.py": {},
    "python-stubs-master/stubs/sqlalchemy/sql/ddl.py": {},
    "python-stubs-master/stubs/sqlalchemy/sql/dml.py": {
        "ValuesBase.values": {
            "name": "values",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Delete.where": {
            "name": "where",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/elements.py": {
        "not_": {
            "name": "not_",
            "location": 8,
            "return": [],
            "arguments": {
                "clause": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/expression.py": {
        "insert": {
            "name": "insert",
            "location": 9,
            "return": [],
            "arguments": {
                "table": [],
                "values": []
            }
        },
        "select": {
            "name": "select",
            "location": 10,
            "return": [],
            "arguments": {
                "columns": [],
                "whereclause": []
            }
        },
        "desc": {
            "name": "desc",
            "location": 12,
            "return": [],
            "arguments": {
                "column": []
            }
        },
        "and_": {
            "name": "and_",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "or_": {
            "name": "or_",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/functions.py": {
        "_FunctionGenerator.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FunctionGenerator.__getattr__": {
            "name": "__getattr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "count.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/operators.py": {
        "Operators.__and__": {
            "name": "__and__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operators.__or__": {
            "name": "__or__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operators.__invert__": {
            "name": "__invert__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operators.op": {
            "name": "op",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": [],
                "precedence": [],
                "is_comparison": [],
                "return_type": []
            }
        },
        "Operators.bool_op": {
            "name": "bool_op",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": [],
                "precedence": []
            }
        },
        "Operators.operate": {
            "name": "operate",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "Operators.reverse_operate": {
            "name": "reverse_operate",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "op": []
            }
        },
        "ColumnOperators.__lt__": {
            "name": "__lt__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__le__": {
            "name": "__le__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__ne__": {
            "name": "__ne__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.is_distinct_from": {
            "name": "is_distinct_from",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.isnot_distinct_from": {
            "name": "isnot_distinct_from",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__gt__": {
            "name": "__gt__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__ge__": {
            "name": "__ge__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__neg__": {
            "name": "__neg__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ColumnOperators.__lshift__": {
            "name": "__lshift__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rshift__": {
            "name": "__rshift__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.concat": {
            "name": "concat",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.like": {
            "name": "like",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.ilike": {
            "name": "ilike",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.in_": {
            "name": "in_",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.notin_": {
            "name": "notin_",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.notlike": {
            "name": "notlike",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.notilike": {
            "name": "notilike",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "escape": []
            }
        },
        "ColumnOperators.is_": {
            "name": "is_",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.isnot": {
            "name": "isnot",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.startswith": {
            "name": "startswith",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.endswith": {
            "name": "endswith",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.contains": {
            "name": "contains",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.match": {
            "name": "match",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.desc": {
            "name": "desc",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.asc": {
            "name": "asc",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.nullsfirst": {
            "name": "nullsfirst",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.nullslast": {
            "name": "nullslast",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.collate": {
            "name": "collate",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "collation": []
            }
        },
        "ColumnOperators.__radd__": {
            "name": "__radd__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rsub__": {
            "name": "__rsub__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rmul__": {
            "name": "__rmul__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rdiv__": {
            "name": "__rdiv__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rmod__": {
            "name": "__rmod__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.between": {
            "name": "between",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "cleft": [],
                "cright": [],
                "symmetric": []
            }
        },
        "ColumnOperators.distinct": {
            "name": "distinct",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.any_": {
            "name": "any_",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.all_": {
            "name": "all_",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColumnOperators.__add__": {
            "name": "__add__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__sub__": {
            "name": "__sub__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__mul__": {
            "name": "__mul__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__div__": {
            "name": "__div__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__mod__": {
            "name": "__mod__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__truediv__": {
            "name": "__truediv__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ColumnOperators.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/roles.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [],
            "arguments": {
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/schema.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "type_": []
            }
        },
        "Column.__get__": {
            "name": "__get__",
            "location": 846,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "Column.__set__": {
            "name": "__set__",
            "location": 847,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "ForeignKey.__init__": {
            "name": "__init__",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "Table.__new__": {
            "name": "__new__",
            "location": 858,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ForeignKeyConstraint.__init__": {
            "name": "__init__",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "refcolumns": []
            }
        },
        "MetaData.is_bound": {
            "name": "is_bound",
            "location": 869,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/selectable.py": {
        "FromClause.columns": {
            "name": "columns",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.c": {
            "name": "c",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FromClause.select": {
            "name": "select",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        },
        "TableClause.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TableClause.insert": {
            "name": "insert",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "inline": []
            }
        },
        "TableClause.delete": {
            "name": "delete",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "whereclause": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/sqltypes.py": {
        "DateTime.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "timezone": []
            }
        },
        "Numeric.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "precision": [],
                "scale": [],
                "decimal_return_scale": [],
                "asdecimal": []
            }
        },
        "String.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Unicode.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Enum.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/traversals.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [],
            "arguments": {
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/type_api.py": {},
    "python-stubs-master/stubs/sqlalchemy/sql/visitors.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 15,
            "return": [],
            "arguments": {
                "__item": []
            }
        },
        "TraversibleType.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "cls": [],
                "clsname": [],
                "bases": [],
                "clsdict": []
            }
        },
        "ExternalTraversal.__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/sql/__init__.py": {},
    "python-stubs-master/stubs/sqlalchemy/util/langhelpers.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [],
            "arguments": {
                "__item": []
            }
        },
        "HasMemoized.__getattr__": {
            "name": "__getattr__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/util/_collections.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 20,
            "return": [],
            "arguments": {
                "__name": []
            }
        },
        "OrderedSet.__getattr__": {
            "name": "__getattr__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "__item": []
            }
        },
        "Properties.__getattr__": {
            "name": "__getattr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "python-stubs-master/stubs/sqlalchemy/util/__init__.py": {},
    "python-stubs-master/stubs/xlwt/ExcelFormula.py": {},
    "python-stubs-master/stubs/xlwt/Formatting.py": {},
    "python-stubs-master/stubs/xlwt/Style.py": {},
    "python-stubs-master/stubs/xlwt/Workbook.py": {
        "_Writable.write": {
            "name": "write",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "_Writable.close": {
            "name": "close",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workbook.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "style_compression": []
            }
        },
        "Workbook.add_sheet": {
            "name": "add_sheet",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "sheetname": [],
                "cell_overwrite_ok": []
            }
        },
        "Workbook.save": {
            "name": "save",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "filename_or_stream": []
            }
        }
    },
    "python-stubs-master/stubs/xlwt/Worksheet.py": {
        "Worksheet.write": {
            "name": "write",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "c": [],
                "label": [],
                "style": []
            }
        }
    },
    "python-stubs-master/stubs/xlwt/__init__.py": {}
}
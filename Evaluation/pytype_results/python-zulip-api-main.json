{
    "python-zulip-api-main/packaged_helloworld/setup.py": {},
    "python-zulip-api-main/packaged_helloworld/packaged_helloworld/packaged_helloworld.py": {
        "HelloWorldHandler.usage": {
            "name": "usage",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelloWorldHandler.handle_message": {
            "name": "handle_message",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/packaged_helloworld/packaged_helloworld/__init__.py": {},
    "python-zulip-api-main/stubs/zephyr.py": {
        "init": {
            "name": "init",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/stubs/_zephyr.py": {
        "initialize": {
            "name": "initialize",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "openPort": {
            "name": "openPort",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "getFD": {
            "name": "getFD",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "setFD": {
            "name": "setFD",
            "location": 52,
            "return": [],
            "arguments": {
                "fd": []
            }
        },
        "sub": {
            "name": "sub",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": [],
                "recipient": []
            }
        },
        "subAll": {
            "name": "subAll",
            "location": 54,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "unsub": {
            "name": "unsub",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": [],
                "recipient": []
            }
        },
        "cancelSubs": {
            "name": "cancelSubs",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "receive": {
            "name": "receive",
            "location": 60,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "sender": {
            "name": "sender",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "realm": {
            "name": "realm",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "dump_session": {
            "name": "dump_session",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "load_session": {
            "name": "load_session",
            "location": 64,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "getSubscriptions": {
            "name": "getSubscriptions",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "ZNotice.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [],
                "cls": [],
                "instance": [],
                "uid": [],
                "time": [],
                "port": [],
                "auth": [],
                "recipient": [],
                "sender": [],
                "opcode": [],
                "format": [],
                "other_fields": [],
                "fields": [],
                "_charset": [],
                "message": []
            }
        },
        "ZNotice.getmessage": {
            "name": "getmessage",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZNotice.setmessage": {
            "name": "setmessage",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "newmsg": []
            }
        },
        "ZNotice.charset": {
            "name": "charset",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZNotice.send": {
            "name": "send",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/tools/custom_check.py": {},
    "python-zulip-api-main/tools/gitlint-rules.py": {
        "ImperativeMood.validate": {
            "name": "validate",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "commit": []
            }
        }
    },
    "python-zulip-api-main/zulip/setup.py": {
        "version": {
            "name": "version",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "recur_expand": {
            "name": "recur_expand",
            "location": 23,
            "return": [],
            "arguments": {
                "target_root": [],
                "dir": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/__init__.py": {},
    "python-zulip-api-main/zulip/integrations/bridge_between_zulips/interrealm_bridge_config.py": {},
    "python-zulip-api-main/zulip/integrations/bridge_with_irc/irc-mirror.py": {},
    "python-zulip-api-main/zulip/integrations/bridge_with_irc/irc_mirror_backend.py": {
        "IRCBot.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "zulip_client": [],
                "stream": [],
                "topic": [],
                "channel": [],
                "nickname": [],
                "server": [],
                "nickserv_password": [],
                "port": []
            }
        },
        "IRCBot.zulip_sender": {
            "name": "zulip_sender",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "sender_string": []
            }
        },
        "IRCBot.connect": {
            "name": "connect",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IRCBot.check_subscription_or_die": {
            "name": "check_subscription_or_die",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IRCBot.on_nicknameinuse": {
            "name": "on_nicknameinuse",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_welcome": {
            "name": "on_welcome",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_privmsg": {
            "name": "on_privmsg",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_pubmsg": {
            "name": "on_pubmsg",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_dccmsg": {
            "name": "on_dccmsg",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_dccchat": {
            "name": "on_dccchat",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "e": []
            }
        },
        "IRCBot.on_welcome.forward_to_irc": {
            "name": "forward_to_irc",
            "location": 68,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/bridge_with_matrix/matrix_bridge.py": {
        "matrix_login": {
            "name": "matrix_login",
            "location": 40,
            "return": [],
            "arguments": {
                "matrix_client": [],
                "matrix_config": []
            }
        },
        "matrix_join_room": {
            "name": "matrix_join_room",
            "location": 52,
            "return": [],
            "arguments": {
                "matrix_client": [],
                "matrix_config": []
            }
        },
        "die": {
            "name": "die",
            "location": 63,
            "return": [],
            "arguments": {
                "signal": [],
                "frame": []
            }
        },
        "matrix_to_zulip": {
            "name": "matrix_to_zulip",
            "location": 68,
            "return": [],
            "arguments": {
                "zulip_client": [],
                "zulip_config": [],
                "matrix_config": [],
                "no_noise": []
            }
        },
        "get_message_content_from_event": {
            "name": "get_message_content_from_event",
            "location": 105,
            "return": [],
            "arguments": {
                "event": [],
                "no_noise": []
            }
        },
        "shorten_irc_nick": {
            "name": "shorten_irc_nick",
            "location": 126,
            "return": [],
            "arguments": {
                "nick": []
            }
        },
        "zulip_to_matrix": {
            "name": "zulip_to_matrix",
            "location": 143,
            "return": [],
            "arguments": {
                "config": [],
                "room": []
            }
        },
        "check_zulip_message_validity": {
            "name": "check_zulip_message_validity",
            "location": 160,
            "return": [],
            "arguments": {
                "msg": [],
                "config": []
            }
        },
        "generate_parser": {
            "name": "generate_parser",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "read_configuration": {
            "name": "read_configuration",
            "location": 213,
            "return": [],
            "arguments": {
                "config_file": []
            }
        },
        "write_sample_config": {
            "name": "write_sample_config",
            "location": 229,
            "return": [],
            "arguments": {
                "target_path": [],
                "zuliprc": []
            }
        },
        "main": {
            "name": "main",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "matrix_to_zulip._matrix_to_zulip": {
            "name": "_matrix_to_zulip",
            "location": 74,
            "return": [],
            "arguments": {
                "room": [],
                "event": []
            }
        },
        "zulip_to_matrix._zulip_to_matrix": {
            "name": "_zulip_to_matrix",
            "location": 144,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/bridge_with_matrix/test_matrix.py": {
        "new_temp_dir": {
            "name": "new_temp_dir",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "MatrixBridgeScriptTests.output_from_script": {
            "name": "output_from_script",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "MatrixBridgeScriptTests.test_no_args": {
            "name": "test_no_args",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_help_usage_and_description": {
            "name": "test_help_usage_and_description",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_write_sample_config": {
            "name": "test_write_sample_config",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_write_sample_config_from_zuliprc": {
            "name": "test_write_sample_config_from_zuliprc",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeScriptTests.test_detect_zuliprc_does_not_exist": {
            "name": "test_detect_zuliprc_does_not_exist",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_message_validity_success": {
            "name": "test_zulip_message_validity_success",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_message_validity_failure": {
            "name": "test_zulip_message_validity_failure",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixBridgeZulipToMatrixTests.test_zulip_to_matrix": {
            "name": "test_zulip_to_matrix",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/bridge_with_matrix/__init__.py": {},
    "python-zulip-api-main/zulip/integrations/bridge_with_slack/bridge_with_slack_config.py": {},
    "python-zulip-api-main/zulip/integrations/codebase/zulip_codebase_config.py": {},
    "python-zulip-api-main/zulip/integrations/git/zulip_git_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 26,
            "return": [],
            "arguments": {
                "repo": [],
                "branch": [],
                "commit": []
            }
        },
        "format_commit_message": {
            "name": "format_commit_message",
            "location": 39,
            "return": [],
            "arguments": {
                "author": [],
                "subject": [],
                "commit_id": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/hg/zulip_changegroup.py": {
        "format_summary_line": {
            "name": "format_summary_line",
            "location": 18,
            "return": [],
            "arguments": {
                "web_url": [],
                "user": [],
                "base": [],
                "tip": [],
                "branch": [],
                "node": []
            }
        },
        "format_commit_lines": {
            "name": "format_commit_lines",
            "location": 47,
            "return": [],
            "arguments": {
                "web_url": [],
                "repo": [],
                "base": [],
                "tip": []
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 72,
            "return": [],
            "arguments": {
                "email": [],
                "api_key": [],
                "site": [],
                "stream": [],
                "subject": [],
                "content": []
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 93,
            "return": [],
            "arguments": {
                "ui": [],
                "item": []
            }
        },
        "hook": {
            "name": "hook",
            "location": 102,
            "return": [],
            "arguments": {
                "ui": [],
                "repo": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/jabber/jabber_mirror.py": {
        "die": {
            "name": "die",
            "location": 13,
            "return": [],
            "arguments": {
                "signal": [],
                "frame": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/jabber/jabber_mirror_backend.py": {
        "room_to_stream": {
            "name": "room_to_stream",
            "location": 56,
            "return": [],
            "arguments": {
                "room": []
            }
        },
        "stream_to_room": {
            "name": "stream_to_room",
            "location": 60,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "jid_to_zulip": {
            "name": "jid_to_zulip",
            "location": 64,
            "return": [],
            "arguments": {
                "jid": []
            }
        },
        "zulip_to_jid": {
            "name": "zulip_to_jid",
            "location": 71,
            "return": [],
            "arguments": {
                "email": [],
                "jabber_domain": []
            }
        },
        "get_rooms": {
            "name": "get_rooms",
            "location": 272,
            "return": [],
            "arguments": {
                "zulipToJabber": []
            }
        },
        "config_error": {
            "name": "config_error",
            "location": 293,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "JabberToZulipBot.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "jid": [],
                "password": [],
                "rooms": []
            }
        },
        "JabberToZulipBot.set_zulip_client": {
            "name": "set_zulip_client",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "zulipToJabberClient": []
            }
        },
        "JabberToZulipBot.session_start": {
            "name": "session_start",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "JabberToZulipBot.join_muc": {
            "name": "join_muc",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "room": []
            }
        },
        "JabberToZulipBot.leave_muc": {
            "name": "leave_muc",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "room": []
            }
        },
        "JabberToZulipBot.message": {
            "name": "message",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.private": {
            "name": "private",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.group": {
            "name": "group",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "JabberToZulipBot.nickname_to_jid": {
            "name": "nickname_to_jid",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "room": [],
                "nick": []
            }
        },
        "ZulipToJabberBot.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "zulip_client": []
            }
        },
        "ZulipToJabberBot.set_jabber_client": {
            "name": "set_jabber_client",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "ZulipToJabberBot.process_event": {
            "name": "process_event",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ZulipToJabberBot.stream_message": {
            "name": "stream_message",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "ZulipToJabberBot.private_message": {
            "name": "private_message",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "ZulipToJabberBot.process_subscription": {
            "name": "process_subscription",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "get_rooms.get_stream_infos": {
            "name": "get_stream_infos",
            "location": 273,
            "return": [],
            "arguments": {
                "key": [],
                "method": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/openshift/zulip_openshift_config.py": {
        "deployment_notice_destination": {
            "name": "deployment_notice_destination",
            "location": 22,
            "return": [],
            "arguments": {
                "branch": []
            }
        },
        "format_deployment_message": {
            "name": "format_deployment_message",
            "location": 41,
            "return": [],
            "arguments": {
                "app_name": [],
                "url": [],
                "branch": [],
                "commit_id": [],
                "dep_id": [],
                "dep_time": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/perforce/git_p4.py": {
        "p4_build_cmd": {
            "name": "p4_build_cmd",
            "location": 48,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 63,
            "return": [],
            "arguments": {
                "path": [],
                "is_client_path": []
            }
        },
        "die": {
            "name": "die",
            "location": 85,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "write_pipe": {
            "name": "write_pipe",
            "location": 92,
            "return": [],
            "arguments": {
                "c": [],
                "stdin": []
            }
        },
        "p4_write_pipe": {
            "name": "p4_write_pipe",
            "location": 106,
            "return": [],
            "arguments": {
                "c": [],
                "stdin": []
            }
        },
        "read_pipe": {
            "name": "read_pipe",
            "location": 110,
            "return": [],
            "arguments": {
                "c": [],
                "ignore_error": []
            }
        },
        "p4_read_pipe": {
            "name": "p4_read_pipe",
            "location": 123,
            "return": [],
            "arguments": {
                "c": [],
                "ignore_error": []
            }
        },
        "read_pipe_lines": {
            "name": "read_pipe_lines",
            "location": 127,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "p4_read_pipe_lines": {
            "name": "p4_read_pipe_lines",
            "location": 140,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "p4_has_command": {
            "name": "p4_has_command",
            "location": 145,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "p4_has_move_command": {
            "name": "p4_has_move_command",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "system": {
            "name": "system",
            "location": 173,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "p4_system": {
            "name": "p4_system",
            "location": 181,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "p4_version_string": {
            "name": "p4_version_string",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "p4_integrate": {
            "name": "p4_integrate",
            "location": 205,
            "return": [],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "p4_sync": {
            "name": "p4_sync",
            "location": 208,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "p4_add": {
            "name": "p4_add",
            "location": 211,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "p4_delete": {
            "name": "p4_delete",
            "location": 218,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "p4_edit": {
            "name": "p4_edit",
            "location": 221,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "p4_revert": {
            "name": "p4_revert",
            "location": 224,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "p4_reopen": {
            "name": "p4_reopen",
            "location": 227,
            "return": [],
            "arguments": {
                "type": [],
                "f": []
            }
        },
        "p4_move": {
            "name": "p4_move",
            "location": 230,
            "return": [],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "p4_describe": {
            "name": "p4_describe",
            "location": 233,
            "return": [],
            "arguments": {
                "change": []
            }
        },
        "split_p4_type": {
            "name": "split_p4_type",
            "location": 261,
            "return": [],
            "arguments": {
                "p4type": []
            }
        },
        "p4_type": {
            "name": "p4_type",
            "location": 294,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "p4_keywords_regexp_for_type": {
            "name": "p4_keywords_regexp_for_type",
            "location": 302,
            "return": [],
            "arguments": {
                "base": [],
                "type_mods": []
            }
        },
        "p4_keywords_regexp_for_file": {
            "name": "p4_keywords_regexp_for_file",
            "location": 326,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "setP4ExecBit": {
            "name": "setP4ExecBit",
            "location": 333,
            "return": [],
            "arguments": {
                "file": [],
                "mode": []
            }
        },
        "getP4OpenedType": {
            "name": "getP4OpenedType",
            "location": 348,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "getP4Labels": {
            "name": "getP4Labels",
            "location": 359,
            "return": [],
            "arguments": {
                "depotPaths": []
            }
        },
        "getGitTags": {
            "name": "getGitTags",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "diffTreePattern": {
            "name": "diffTreePattern",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "parseDiffTreeEntry": {
            "name": "parseDiffTreeEntry",
            "location": 385,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "isModeExec": {
            "name": "isModeExec",
            "location": 418,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "isModeExecChanged": {
            "name": "isModeExecChanged",
            "location": 423,
            "return": [],
            "arguments": {
                "src_mode": [],
                "dst_mode": []
            }
        },
        "p4CmdList": {
            "name": "p4CmdList",
            "location": 426,
            "return": [],
            "arguments": {
                "cmd": [],
                "stdin": [],
                "stdin_mode": [],
                "cb": []
            }
        },
        "p4Cmd": {
            "name": "p4Cmd",
            "location": 476,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "p4Where": {
            "name": "p4Where",
            "location": 483,
            "return": [],
            "arguments": {
                "depotPath": []
            }
        },
        "currentGitBranch": {
            "name": "currentGitBranch",
            "location": 516,
            "return": [],
            "arguments": {}
        },
        "isValidGitDir": {
            "name": "isValidGitDir",
            "location": 519,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "parseRevision": {
            "name": "parseRevision",
            "location": 525,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "branchExists": {
            "name": "branchExists",
            "location": 528,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "extractLogMessageFromGitCommit": {
            "name": "extractLogMessageFromGitCommit",
            "location": 533,
            "return": [],
            "arguments": {
                "commit": []
            }
        },
        "extractSettingsGitLog": {
            "name": "extractSettingsGitLog",
            "location": 547,
            "return": [],
            "arguments": {
                "log": []
            }
        },
        "gitBranchExists": {
            "name": "gitBranchExists",
            "location": 572,
            "return": [],
            "arguments": {
                "branch": []
            }
        },
        "gitConfig": {
            "name": "gitConfig",
            "location": 579,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "gitConfigBool": {
            "name": "gitConfigBool",
            "location": 586,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "gitConfigList": {
            "name": "gitConfigList",
            "location": 598,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "p4BranchesInGit": {
            "name": "p4BranchesInGit",
            "location": 604,
            "return": [],
            "arguments": {
                "branchesAreInRemotes": []
            }
        },
        "branch_exists": {
            "name": "branch_exists",
            "location": 636,
            "return": [],
            "arguments": {
                "branch": []
            }
        },
        "findUpstreamBranchPoint": {
            "name": "findUpstreamBranchPoint",
            "location": 647,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "createOrUpdateBranchesFromOrigin": {
            "name": "createOrUpdateBranchesFromOrigin",
            "location": 674,
            "return": [],
            "arguments": {
                "localRefPrefix": [],
                "silent": []
            }
        },
        "originP4BranchesExist": {
            "name": "originP4BranchesExist",
            "location": 721,
            "return": [],
            "arguments": {}
        },
        "p4ChangesForPaths": {
            "name": "p4ChangesForPaths",
            "location": 724,
            "return": [],
            "arguments": {
                "depotPaths": [],
                "changeRange": []
            }
        },
        "p4PathStartsWith": {
            "name": "p4PathStartsWith",
            "location": 739,
            "return": [],
            "arguments": {
                "path": [],
                "prefix": []
            }
        },
        "getClientSpec": {
            "name": "getClientSpec",
            "location": 751,
            "return": [],
            "arguments": {}
        },
        "getClientRoot": {
            "name": "getClientRoot",
            "location": 781,
            "return": [],
            "arguments": {}
        },
        "wildcard_decode": {
            "name": "wildcard_decode",
            "location": 799,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "wildcard_encode": {
            "name": "wildcard_encode",
            "location": 811,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "wildcard_present": {
            "name": "wildcard_present",
            "location": 819,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "printUsage": {
            "name": "printUsage",
            "location": 3186,
            "return": [],
            "arguments": {
                "commands": []
            }
        },
        "main": {
            "name": "main",
            "location": 3206,
            "return": [],
            "arguments": {}
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 824,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.__init__": {
            "name": "__init__",
            "location": 830,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserId": {
            "name": "p4UserId",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.p4UserIsMe": {
            "name": "p4UserIsMe",
            "location": 845,
            "return": [],
            "arguments": {
                "self": [],
                "p4User": []
            }
        },
        "P4UserMap.getUserCacheFilename": {
            "name": "getUserCacheFilename",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.getUserMapFromPerforceServer": {
            "name": "getUserMapFromPerforceServer",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4UserMap.loadUserMapFromCache": {
            "name": "loadUserMapFromCache",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.__init__": {
            "name": "__init__",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Debug.run": {
            "name": "run",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4RollBack.__init__": {
            "name": "__init__",
            "location": 905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4RollBack.run": {
            "name": "run",
            "location": 913,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Submit.__init__": {
            "name": "__init__",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.check": {
            "name": "check",
            "location": 994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.separate_jobs_from_description": {
            "name": "separate_jobs_from_description",
            "location": 998,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "P4Submit.prepareLogMessage": {
            "name": "prepareLogMessage",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": [],
                "template": [],
                "message": [],
                "jobs": []
            }
        },
        "P4Submit.patchRCSKeywords": {
            "name": "patchRCSKeywords",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": [],
                "file": [],
                "pattern": []
            }
        },
        "P4Submit.p4UserForCommit": {
            "name": "p4UserForCommit",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "P4Submit.checkValidP4Users": {
            "name": "checkValidP4Users",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "commits": []
            }
        },
        "P4Submit.lastP4Changelist": {
            "name": "lastP4Changelist",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.modifyChangelistUser": {
            "name": "modifyChangelistUser",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "changelist": [],
                "newUser": []
            }
        },
        "P4Submit.canChangeChangelists": {
            "name": "canChangeChangelists",
            "location": 1140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.prepareSubmitTemplate": {
            "name": "prepareSubmitTemplate",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Submit.edit_template": {
            "name": "edit_template",
            "location": 1184,
            "return": [],
            "arguments": {
                "self": [],
                "template_file": []
            }
        },
        "P4Submit.applyCommit": {
            "name": "applyCommit",
            "location": 1219,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "P4Submit.exportGitTags": {
            "name": "exportGitTags",
            "location": 1488,
            "return": [],
            "arguments": {
                "self": [],
                "gitTags": []
            }
        },
        "P4Submit.run": {
            "name": "run",
            "location": 1557,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 1780,
            "return": [],
            "arguments": {
                "self": [],
                "client_name": []
            }
        },
        "View.append": {
            "name": "append",
            "location": 1786,
            "return": [],
            "arguments": {
                "self": [],
                "view_line": []
            }
        },
        "View.convert_client_path": {
            "name": "convert_client_path",
            "location": 1830,
            "return": [],
            "arguments": {
                "self": [],
                "clientFile": []
            }
        },
        "View.update_client_spec_path_cache": {
            "name": "update_client_spec_path_cache",
            "location": 1837,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "View.map_in_client": {
            "name": "map_in_client",
            "location": 1863,
            "return": [],
            "arguments": {
                "self": [],
                "depot_path": []
            }
        },
        "P4Sync.__init__": {
            "name": "__init__",
            "location": 1877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.checkpoint": {
            "name": "checkpoint",
            "location": 1929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.extractFilesFromCommit": {
            "name": "extractFilesFromCommit",
            "location": 1936,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "P4Sync.stripRepoPath": {
            "name": "stripRepoPath",
            "location": 1963,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "prefixes": []
            }
        },
        "P4Sync.splitFilesIntoBranches": {
            "name": "splitFilesIntoBranches",
            "location": 1995,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "P4Sync.streamOneP4File": {
            "name": "streamOneP4File",
            "location": 2041,
            "return": [],
            "arguments": {
                "self": [],
                "file": [],
                "contents": []
            }
        },
        "P4Sync.streamOneP4Deletion": {
            "name": "streamOneP4Deletion",
            "location": 2111,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "P4Sync.streamP4FilesCb": {
            "name": "streamP4FilesCb",
            "location": 2118,
            "return": [],
            "arguments": {
                "self": [],
                "marshalled": []
            }
        },
        "P4Sync.streamP4Files": {
            "name": "streamP4Files",
            "location": 2161,
            "return": [],
            "arguments": {
                "self": [],
                "files": []
            }
        },
        "P4Sync.make_email": {
            "name": "make_email",
            "location": 2202,
            "return": [],
            "arguments": {
                "self": [],
                "userid": []
            }
        },
        "P4Sync.streamTag": {
            "name": "streamTag",
            "location": 2209,
            "return": [],
            "arguments": {
                "self": [],
                "gitStream": [],
                "labelName": [],
                "labelDetails": [],
                "commit": [],
                "epoch": []
            }
        },
        "P4Sync.commit": {
            "name": "commit",
            "location": 2240,
            "return": [],
            "arguments": {
                "self": [],
                "details": [],
                "files": [],
                "branch": [],
                "parent": []
            }
        },
        "P4Sync.getLabels": {
            "name": "getLabels",
            "location": 2319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.importP4Labels": {
            "name": "importP4Labels",
            "location": 2349,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "p4Labels": []
            }
        },
        "P4Sync.guessProjectName": {
            "name": "guessProjectName",
            "location": 2408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMapping": {
            "name": "getBranchMapping",
            "location": 2417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.getBranchMappingFromGitBranches": {
            "name": "getBranchMappingFromGitBranches",
            "location": 2477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.updateOptionDict": {
            "name": "updateOptionDict",
            "location": 2486,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "P4Sync.readOptions": {
            "name": "readOptions",
            "location": 2493,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "P4Sync.gitRefForBranch": {
            "name": "gitRefForBranch",
            "location": 2497,
            "return": [],
            "arguments": {
                "self": [],
                "branch": []
            }
        },
        "P4Sync.gitCommitByP4Change": {
            "name": "gitCommitByP4Change",
            "location": 2506,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "change": []
            }
        },
        "P4Sync.importNewBranch": {
            "name": "importNewBranch",
            "location": 2539,
            "return": [],
            "arguments": {
                "self": [],
                "branch": [],
                "maxChange": []
            }
        },
        "P4Sync.searchParent": {
            "name": "searchParent",
            "location": 2567,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "branch": [],
                "target": []
            }
        },
        "P4Sync.importChanges": {
            "name": "importChanges",
            "location": 2582,
            "return": [],
            "arguments": {
                "self": [],
                "changes": []
            }
        },
        "P4Sync.importHeadRevision": {
            "name": "importHeadRevision",
            "location": 2664,
            "return": [],
            "arguments": {
                "self": [],
                "revision": []
            }
        },
        "P4Sync.run": {
            "name": "run",
            "location": 2719,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.__init__": {
            "name": "__init__",
            "location": 3025,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Rebase.run": {
            "name": "run",
            "location": 3034,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Rebase.rebase": {
            "name": "rebase",
            "location": 3041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.__init__": {
            "name": "__init__",
            "location": 3061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Clone.ensure_value": {
            "name": "ensure_value",
            "location": 3080,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "value": []
            }
        },
        "P4Clone.defaultDestination": {
            "name": "defaultDestination",
            "location": 3085,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Clone.run": {
            "name": "run",
            "location": 3094,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "P4Branches.__init__": {
            "name": "__init__",
            "location": 3149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Branches.run": {
            "name": "run",
            "location": 3156,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "HelpFormatter.__init__": {
            "name": "__init__",
            "location": 3177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.format_description": {
            "name": "format_description",
            "location": 3180,
            "return": [],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "CalledProcessError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "returncode": [],
                "cmd": []
            }
        },
        "CalledProcessError.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "P4Sync.streamP4Files.streamP4FilesCbSelf": {
            "name": "streamP4FilesCbSelf",
            "location": 2189,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/perforce/zulip_change-commit.py": {},
    "python-zulip-api-main/zulip/integrations/perforce/zulip_perforce_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 31,
            "return": [],
            "arguments": {
                "path": [],
                "changelist": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/svn/zulip_svn_config.py": {
        "commit_notice_destination": {
            "name": "commit_notice_destination",
            "location": 21,
            "return": [],
            "arguments": {
                "path": [],
                "commit": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/trac/zulip_trac.py": {
        "markdown_ticket_url": {
            "name": "markdown_ticket_url",
            "location": 40,
            "return": [],
            "arguments": {
                "ticket": [],
                "heading": []
            }
        },
        "markdown_block": {
            "name": "markdown_block",
            "location": 44,
            "return": [],
            "arguments": {
                "desc": []
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 48,
            "return": [],
            "arguments": {
                "string": [],
                "length": []
            }
        },
        "trac_subject": {
            "name": "trac_subject",
            "location": 54,
            "return": [],
            "arguments": {
                "ticket": []
            }
        },
        "send_update": {
            "name": "send_update",
            "location": 58,
            "return": [],
            "arguments": {
                "ticket": [],
                "content": []
            }
        },
        "ZulipPlugin.ticket_created": {
            "name": "ticket_created",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "ticket": []
            }
        },
        "ZulipPlugin.ticket_changed": {
            "name": "ticket_changed",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "ticket": [],
                "comment": [],
                "author": [],
                "old_values": []
            }
        },
        "ZulipPlugin.ticket_deleted": {
            "name": "ticket_deleted",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "ticket": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/trac/zulip_trac_config.py": {},
    "python-zulip-api-main/zulip/integrations/trello/zulip_trello.py": {
        "get_model_id": {
            "name": "get_model_id",
            "location": 17,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "get_webhook_id": {
            "name": "get_webhook_id",
            "location": 46,
            "return": [],
            "arguments": {
                "options": [],
                "id_model": []
            }
        },
        "create_webhook": {
            "name": "create_webhook",
            "location": 81,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "main": {
            "name": "main",
            "location": 110,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip/integrations/trello/__init__.py": {},
    "python-zulip-api-main/zulip/integrations/zephyr/zephyr_mirror.py": {
        "die": {
            "name": "die",
            "location": 17,
            "return": [],
            "arguments": {
                "signal": [],
                "frame": []
            }
        },
        "run_job": {
            "name": "run_job",
            "location": 44,
            "return": [],
            "arguments": {
                "shard": []
            }
        }
    },
    "python-zulip-api-main/zulip/integrations/zephyr/zephyr_mirror_backend.py": {
        "to_zulip_username": {
            "name": "to_zulip_username",
            "location": 35,
            "return": [],
            "arguments": {
                "zephyr_username": []
            }
        },
        "to_zephyr_username": {
            "name": "to_zephyr_username",
            "location": 48,
            "return": [],
            "arguments": {
                "zulip_username": []
            }
        },
        "different_paragraph": {
            "name": "different_paragraph",
            "location": 71,
            "return": [],
            "arguments": {
                "line": [],
                "next_line": []
            }
        },
        "unwrap_lines": {
            "name": "unwrap_lines",
            "location": 82,
            "return": [],
            "arguments": {
                "body": []
            }
        },
        "send_zulip": {
            "name": "send_zulip",
            "location": 120,
            "return": [],
            "arguments": {
                "zeph": []
            }
        },
        "send_error_zulip": {
            "name": "send_error_zulip",
            "location": 154,
            "return": [],
            "arguments": {
                "error_msg": []
            }
        },
        "zephyr_bulk_subscribe": {
            "name": "zephyr_bulk_subscribe",
            "location": 167,
            "return": [],
            "arguments": {
                "subs": []
            }
        },
        "update_subscriptions": {
            "name": "update_subscriptions",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "maybe_kill_child": {
            "name": "maybe_kill_child",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "maybe_restart_mirroring_script": {
            "name": "maybe_restart_mirroring_script",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "process_loop": {
            "name": "process_loop",
            "location": 266,
            "return": [],
            "arguments": {
                "log": []
            }
        },
        "parse_zephyr_body": {
            "name": "parse_zephyr_body",
            "location": 310,
            "return": [],
            "arguments": {
                "zephyr_data": [],
                "notice_format": []
            }
        },
        "parse_crypt_table": {
            "name": "parse_crypt_table",
            "location": 334,
            "return": [],
            "arguments": {
                "zephyr_class": [],
                "instance": []
            }
        },
        "decrypt_zephyr": {
            "name": "decrypt_zephyr",
            "location": 361,
            "return": [],
            "arguments": {
                "zephyr_class": [],
                "instance": [],
                "body": []
            }
        },
        "process_notice": {
            "name": "process_notice",
            "location": 398,
            "return": [],
            "arguments": {
                "notice": [],
                "log": []
            }
        },
        "quit_failed_initialization": {
            "name": "quit_failed_initialization",
            "location": 507,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "zephyr_init_autoretry": {
            "name": "zephyr_init_autoretry",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "zephyr_load_session_autoretry": {
            "name": "zephyr_load_session_autoretry",
            "location": 529,
            "return": [],
            "arguments": {
                "session_path": []
            }
        },
        "zephyr_subscribe_autoretry": {
            "name": "zephyr_subscribe_autoretry",
            "location": 546,
            "return": [],
            "arguments": {
                "sub": []
            }
        },
        "zephyr_to_zulip": {
            "name": "zephyr_to_zulip",
            "location": 562,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "send_zephyr": {
            "name": "send_zephyr",
            "location": 610,
            "return": [],
            "arguments": {
                "zwrite_args": [],
                "content": []
            }
        },
        "send_authed_zephyr": {
            "name": "send_authed_zephyr",
            "location": 638,
            "return": [],
            "arguments": {
                "zwrite_args": [],
                "content": []
            }
        },
        "send_unauthed_zephyr": {
            "name": "send_unauthed_zephyr",
            "location": 642,
            "return": [],
            "arguments": {
                "zwrite_args": [],
                "content": []
            }
        },
        "zcrypt_encrypt_content": {
            "name": "zcrypt_encrypt_content",
            "location": 646,
            "return": [],
            "arguments": {
                "zephyr_class": [],
                "instance": [],
                "content": []
            }
        },
        "forward_to_zephyr": {
            "name": "forward_to_zephyr",
            "location": 678,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "maybe_forward_to_zephyr": {
            "name": "maybe_forward_to_zephyr",
            "location": 831,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "zulip_to_zephyr": {
            "name": "zulip_to_zephyr",
            "location": 861,
            "return": [],
            "arguments": {
                "options": []
            }
        },
        "subscribed_to_mail_messages": {
            "name": "subscribed_to_mail_messages",
            "location": 873,
            "return": [],
            "arguments": {}
        },
        "add_zulip_subscriptions": {
            "name": "add_zulip_subscriptions",
            "location": 888,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "valid_stream_name": {
            "name": "valid_stream_name",
            "location": 1012,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "parse_zephyr_subs": {
            "name": "parse_zephyr_subs",
            "location": 1016,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "open_logger": {
            "name": "open_logger",
            "location": 1045,
            "return": [],
            "arguments": {}
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 1070,
            "return": [],
            "arguments": {
                "logger": [],
                "direction_name": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 1085,
            "return": [],
            "arguments": {}
        },
        "die_gracefully": {
            "name": "die_gracefully",
            "location": 1148,
            "return": [],
            "arguments": {
                "signal": [],
                "frame": []
            }
        }
    },
    "python-zulip-api-main/zulip/tests/test_default_arguments.py": {
        "TestDefaultArguments.test_invalid_arguments": {
            "name": "test_invalid_arguments",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArguments.test_config_path_with_tilde": {
            "name": "test_config_path_with_tilde",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "mock_os_path_exists": []
            }
        }
    },
    "python-zulip-api-main/zulip/tests/test_hash_util_decode.py": {
        "TestHashUtilDecode.test_hash_util_decode": {
            "name": "test_hash_util_decode",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip/tests/__init__.py": {},
    "python-zulip-api-main/zulip/zulip/api_examples.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip/zulip/cli.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "exit_on_result": {
            "name": "exit_on_result",
            "location": 21,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "log_exit": {
            "name": "log_exit",
            "location": 27,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 54,
            "return": [],
            "arguments": {
                "recipients": [],
                "stream": [],
                "subject": [],
                "message": []
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "update_message": {
            "name": "update_message",
            "location": 105,
            "return": [],
            "arguments": {
                "message_id": [],
                "message": []
            }
        },
        "delete_message": {
            "name": "delete_message",
            "location": 117,
            "return": [],
            "arguments": {
                "message_id": []
            }
        },
        "add_reaction": {
            "name": "add_reaction",
            "location": 131,
            "return": [],
            "arguments": {
                "message_id": [],
                "emoji_name": []
            }
        },
        "remove_reaction": {
            "name": "remove_reaction",
            "location": 145,
            "return": [],
            "arguments": {
                "message_id": [],
                "emoji_name": []
            }
        },
        "get_message_history": {
            "name": "get_message_history",
            "location": 164,
            "return": [],
            "arguments": {
                "message_id": []
            }
        },
        "mark_all_as_read": {
            "name": "mark_all_as_read",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "get_subscriptions": {
            "name": "get_subscriptions",
            "location": 187,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip/zulip/send.py": {
        "do_send_message": {
            "name": "do_send_message",
            "location": 16,
            "return": [],
            "arguments": {
                "client": [],
                "message_data": []
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip/zulip/__init__.py": {
        "_default_client": {
            "name": "_default_client",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "add_default_arguments": {
            "name": "add_default_arguments",
            "location": 146,
            "return": [],
            "arguments": {
                "parser": [],
                "patch_error_handling": [],
                "allow_provisioning": []
            }
        },
        "generate_option_group": {
            "name": "generate_option_group",
            "location": 224,
            "return": [],
            "arguments": {
                "parser": [],
                "prefix": []
            }
        },
        "init_from_options": {
            "name": "init_from_options",
            "location": 288,
            "return": [],
            "arguments": {
                "options": [],
                "client": []
            }
        },
        "get_default_config_filename": {
            "name": "get_default_config_filename",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "validate_boolean_field": {
            "name": "validate_boolean_field",
            "location": 344,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "hash_util_decode": {
            "name": "hash_util_decode",
            "location": 1764,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "CountingBackoff.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "maximum_retries": [],
                "timeout_success_equivalent": [],
                "delay_cap": []
            }
        },
        "CountingBackoff.keep_going": {
            "name": "keep_going",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.succeed": {
            "name": "succeed",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff.fail": {
            "name": "fail",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountingBackoff._check_success_timeout": {
            "name": "_check_success_timeout",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomExponentialBackoff.fail": {
            "name": "fail",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "email": [],
                "api_key": [],
                "config_file": [],
                "verbose": [],
                "retry_on_errors": [],
                "site": [],
                "client": [],
                "cert_bundle": [],
                "insecure": [],
                "client_cert": [],
                "client_cert_key": []
            }
        },
        "Client.ensure_session": {
            "name": "ensure_session",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_user_agent": {
            "name": "get_user_agent",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.do_api_query": {
            "name": "do_api_query",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "orig_request": [],
                "url": [],
                "method": [],
                "longpolling": [],
                "files": [],
                "timeout": []
            }
        },
        "Client.call_endpoint": {
            "name": "call_endpoint",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "method": [],
                "request": [],
                "longpolling": [],
                "files": [],
                "timeout": []
            }
        },
        "Client.call_on_each_event": {
            "name": "call_on_each_event",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.call_on_each_message": {
            "name": "call_on_each_message",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.get_messages": {
            "name": "get_messages",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "message_filters": []
            }
        },
        "Client.check_messages_match_narrow": {
            "name": "check_messages_match_narrow",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_raw_message": {
            "name": "get_raw_message",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.send_message": {
            "name": "send_message",
            "location": 861,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.upload_file": {
            "name": "upload_file",
            "location": 870,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Client.get_attachments": {
            "name": "get_attachments",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_message": {
            "name": "update_message",
            "location": 885,
            "return": [],
            "arguments": {
                "self": [],
                "message_data": []
            }
        },
        "Client.delete_message": {
            "name": "delete_message",
            "location": 895,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.update_message_flags": {
            "name": "update_message_flags",
            "location": 901,
            "return": [],
            "arguments": {
                "self": [],
                "update_data": []
            }
        },
        "Client.mark_all_as_read": {
            "name": "mark_all_as_read",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.mark_stream_as_read": {
            "name": "mark_stream_as_read",
            "location": 919,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.mark_topic_as_read": {
            "name": "mark_topic_as_read",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": [],
                "topic_name": []
            }
        },
        "Client.get_message_history": {
            "name": "get_message_history",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": []
            }
        },
        "Client.add_reaction": {
            "name": "add_reaction",
            "location": 954,
            "return": [],
            "arguments": {
                "self": [],
                "reaction_data": []
            }
        },
        "Client.remove_reaction": {
            "name": "remove_reaction",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "reaction_data": []
            }
        },
        "Client.get_realm_emoji": {
            "name": "get_realm_emoji",
            "location": 990,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.upload_custom_emoji": {
            "name": "upload_custom_emoji",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "emoji_name": [],
                "file_obj": []
            }
        },
        "Client.delete_custom_emoji": {
            "name": "delete_custom_emoji",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "emoji_name": []
            }
        },
        "Client.get_realm_linkifiers": {
            "name": "get_realm_linkifiers",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.add_realm_filter": {
            "name": "add_realm_filter",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "url_format_string": []
            }
        },
        "Client.remove_realm_filter": {
            "name": "remove_realm_filter",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": [],
                "filter_id": []
            }
        },
        "Client.get_realm_profile_fields": {
            "name": "get_realm_profile_fields",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_realm_profile_field": {
            "name": "create_realm_profile_field",
            "location": 1079,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.remove_realm_profile_field": {
            "name": "remove_realm_profile_field",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": [],
                "field_id": []
            }
        },
        "Client.reorder_realm_profile_fields": {
            "name": "reorder_realm_profile_fields",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_realm_profile_field": {
            "name": "update_realm_profile_field",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": [],
                "field_id": []
            }
        },
        "Client.get_server_settings": {
            "name": "get_server_settings",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_events": {
            "name": "get_events",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.register": {
            "name": "register",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "event_types": [],
                "narrow": []
            }
        },
        "Client.deregister": {
            "name": "deregister",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "queue_id": [],
                "timeout": []
            }
        },
        "Client.get_profile": {
            "name": "get_profile",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_user_presence": {
            "name": "get_user_presence",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Client.get_realm_presence": {
            "name": "get_realm_presence",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_presence": {
            "name": "update_presence",
            "location": 1233,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_streams": {
            "name": "get_streams",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_stream": {
            "name": "update_stream",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": [],
                "stream_data": []
            }
        },
        "Client.delete_stream": {
            "name": "delete_stream",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.add_default_stream": {
            "name": "add_default_stream",
            "location": 1280,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.get_user_by_id": {
            "name": "get_user_by_id",
            "location": 1294,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.deactivate_user_by_id": {
            "name": "deactivate_user_by_id",
            "location": 1308,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.reactivate_user_by_id": {
            "name": "reactivate_user_by_id",
            "location": 1321,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.update_user_by_id": {
            "name": "update_user_by_id",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.get_users": {
            "name": "get_users",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_members": {
            "name": "get_members",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_alert_words": {
            "name": "get_alert_words",
            "location": 1368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.add_alert_words": {
            "name": "add_alert_words",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "alert_words": []
            }
        },
        "Client.remove_alert_words": {
            "name": "remove_alert_words",
            "location": 1382,
            "return": [],
            "arguments": {
                "self": [],
                "alert_words": []
            }
        },
        "Client.get_subscriptions": {
            "name": "get_subscriptions",
            "location": 1390,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.list_subscriptions": {
            "name": "list_subscriptions",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.add_subscriptions": {
            "name": "add_subscriptions",
            "location": 1406,
            "return": [],
            "arguments": {
                "self": [],
                "streams": []
            }
        },
        "Client.remove_subscriptions": {
            "name": "remove_subscriptions",
            "location": 1417,
            "return": [],
            "arguments": {
                "self": [],
                "streams": [],
                "principals": []
            }
        },
        "Client.get_subscription_status": {
            "name": "get_subscription_status",
            "location": 1434,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "stream_id": []
            }
        },
        "Client.mute_topic": {
            "name": "mute_topic",
            "location": 1446,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.update_subscription_settings": {
            "name": "update_subscription_settings",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "subscription_data": []
            }
        },
        "Client.update_notification_settings": {
            "name": "update_notification_settings",
            "location": 1478,
            "return": [],
            "arguments": {
                "self": [],
                "notification_settings": []
            }
        },
        "Client.get_stream_id": {
            "name": "get_stream_id",
            "location": 1494,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Client.get_stream_topics": {
            "name": "get_stream_topics",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": [],
                "stream_id": []
            }
        },
        "Client.get_user_groups": {
            "name": "get_user_groups",
            "location": 1512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_user_group": {
            "name": "create_user_group",
            "location": 1523,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "Client.update_user_group": {
            "name": "update_user_group",
            "location": 1539,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "Client.remove_user_group": {
            "name": "remove_user_group",
            "location": 1556,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": []
            }
        },
        "Client.update_user_group_members": {
            "name": "update_user_group_members",
            "location": 1568,
            "return": [],
            "arguments": {
                "self": [],
                "user_group_id": [],
                "group_data": []
            }
        },
        "Client.get_subscribers": {
            "name": "get_subscribers",
            "location": 1586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.render_message": {
            "name": "render_message",
            "location": 1602,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.create_user": {
            "name": "create_user",
            "location": 1615,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.update_storage": {
            "name": "update_storage",
            "location": 1625,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.get_storage": {
            "name": "get_storage",
            "location": 1639,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.set_typing_status": {
            "name": "set_typing_status",
            "location": 1655,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Client.move_topic": {
            "name": "move_topic",
            "location": 1666,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "new_stream": [],
                "topic": [],
                "new_topic": [],
                "message_id": [],
                "propagate_mode": [],
                "notify_old_topic": [],
                "notify_new_topic": []
            }
        },
        "ZulipStream.__init__": {
            "name": "__init__",
            "location": 1750,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "to": [],
                "subject": []
            }
        },
        "ZulipStream.write": {
            "name": "write",
            "location": 1756,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "ZulipStream.flush": {
            "name": "flush",
            "location": 1760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "add_default_arguments.custom_error_handling": {
            "name": "custom_error_handling",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Client.do_api_query.error_retry": {
            "name": "error_retry",
            "location": 614,
            "return": [],
            "arguments": {
                "error_string": []
            }
        },
        "Client.do_api_query.end_error_retry": {
            "name": "end_error_retry",
            "location": 635,
            "return": [],
            "arguments": {
                "succeeded": []
            }
        },
        "Client.call_on_each_event.do_register": {
            "name": "do_register",
            "location": 754,
            "return": [],
            "arguments": {}
        },
        "Client.call_on_each_message.event_callback": {
            "name": "event_callback",
            "location": 831,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "LegacyInterfaceClient.update_user_group_members": {
            "name": "update_user_group_members",
            "location": 1802,
            "return": [],
            "arguments": {
                "self": [],
                "group_data": []
            }
        },
        "LegacyInterfaceClient.get_realm_filters": {
            "name": "get_realm_filters",
            "location": 1808,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/setup.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bot_shell.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/custom_exceptions.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/finder.py": {
        "import_module_from_source": {
            "name": "import_module_from_source",
            "location": 14,
            "return": [],
            "arguments": {
                "path": [],
                "name": []
            }
        },
        "import_module_by_name": {
            "name": "import_module_by_name",
            "location": 26,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "import_module_from_zulip_bot_registry": {
            "name": "import_module_from_zulip_bot_registry",
            "location": 37,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "resolve_bot_path": {
            "name": "resolve_bot_path",
            "location": 81,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/game_handler.py": {
        "BadMoveException.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BadMoveException.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SamePlayerMove.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SamePlayerMove.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "game_name": [],
                "bot_name": [],
                "move_help_message": [],
                "move_regex": [],
                "model": [],
                "gameMessageHandler": [],
                "rules": [],
                "max_players": [],
                "min_players": [],
                "supports_computer": []
            }
        },
        "GameAdapter.add_user_statistics": {
            "name": "add_user_statistics",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "values": []
            }
        },
        "GameAdapter.help_message": {
            "name": "help_message",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.help_message_single_player": {
            "name": "help_message_single_player",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.get_commands": {
            "name": "get_commands",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.manage_command": {
            "name": "manage_command",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "message": []
            }
        },
        "GameAdapter.already_in_game_message": {
            "name": "already_in_game_message",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.confirm_new_invitation": {
            "name": "confirm_new_invitation",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "opponent": []
            }
        },
        "GameAdapter.play_with_computer_help": {
            "name": "play_with_computer_help",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.alert_new_invitation": {
            "name": "alert_new_invitation",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.confirm_invitation_accepted": {
            "name": "confirm_invitation_accepted",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.confirm_invitation_declined": {
            "name": "confirm_invitation_declined",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.send_message": {
            "name": "send_message",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "to": [],
                "content": [],
                "is_private": [],
                "subject": []
            }
        },
        "GameAdapter.send_reply": {
            "name": "send_reply",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "original_message": [],
                "content": []
            }
        },
        "GameAdapter.usage": {
            "name": "usage",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.initialize": {
            "name": "initialize",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "GameAdapter.handle_message": {
            "name": "handle_message",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "GameAdapter.is_user_in_game": {
            "name": "is_user_in_game",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": []
            }
        },
        "GameAdapter.command_start_game_with": {
            "name": "command_start_game_with",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_start_game": {
            "name": "command_start_game",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_accept": {
            "name": "command_accept",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.create_game_lobby": {
            "name": "create_game_lobby",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "users": []
            }
        },
        "GameAdapter.command_decline": {
            "name": "command_decline",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_quit": {
            "name": "command_quit",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_join": {
            "name": "command_join",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_play": {
            "name": "command_play",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.command_leaderboard": {
            "name": "command_leaderboard",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "sender": [],
                "content": []
            }
        },
        "GameAdapter.get_sorted_player_statistics": {
            "name": "get_sorted_player_statistics",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.send_invite": {
            "name": "send_invite",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "user_email": [],
                "message": []
            }
        },
        "GameAdapter.cancel_game": {
            "name": "cancel_game",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "reason": []
            }
        },
        "GameAdapter.start_game_if_ready": {
            "name": "start_game_if_ready",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.start_game": {
            "name": "start_game",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.get_formatted_game_object": {
            "name": "get_formatted_game_object",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.join_game": {
            "name": "join_game",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "user_email": [],
                "message": []
            }
        },
        "GameAdapter.get_players": {
            "name": "get_players",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "parameter": []
            }
        },
        "GameAdapter.get_game_info": {
            "name": "get_game_info",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.get_user_by_name": {
            "name": "get_user_by_name",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GameAdapter.get_number_of_players": {
            "name": "get_number_of_players",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": []
            }
        },
        "GameAdapter.parse_message": {
            "name": "parse_message",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GameAdapter.change_game_subject": {
            "name": "change_game_subject",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "stream_name": [],
                "subject_name": [],
                "message": []
            }
        },
        "GameAdapter.set_invite_by_user": {
            "name": "set_invite_by_user",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": [],
                "is_accepted": [],
                "message": []
            }
        },
        "GameAdapter.add_user_to_cache": {
            "name": "add_user_to_cache",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GameAdapter.put_user_cache": {
            "name": "put_user_cache",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.get_user_cache": {
            "name": "get_user_cache",
            "location": 699,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.verify_users": {
            "name": "verify_users",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "users": [],
                "message": []
            }
        },
        "GameAdapter.get_game_instance_by_subject": {
            "name": "get_game_instance_by_subject",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "subject_name": [],
                "stream_name": []
            }
        },
        "GameAdapter.get_invite_in_subject": {
            "name": "get_invite_in_subject",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "subject_name": [],
                "stream_name": []
            }
        },
        "GameAdapter.is_game_in_subject": {
            "name": "is_game_in_subject",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "subject_name": [],
                "stream_name": []
            }
        },
        "GameAdapter.is_user_not_player": {
            "name": "is_user_not_player",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": [],
                "message": []
            }
        },
        "GameAdapter.generate_game_id": {
            "name": "generate_game_id",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameAdapter.broadcast": {
            "name": "broadcast",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "game_id": [],
                "content": [],
                "include_private": []
            }
        },
        "GameAdapter.get_username_by_email": {
            "name": "get_username_by_email",
            "location": 807,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": []
            }
        },
        "GameAdapter.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": []
            }
        },
        "GameAdapter.get_game_id_by_email": {
            "name": "get_game_id_by_email",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "user_email": []
            }
        },
        "GameAdapter.get_bot_username": {
            "name": "get_bot_username",
            "location": 825,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.__init__": {
            "name": "__init__",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "gameAdapter": [],
                "is_private": [],
                "subject": [],
                "game_id": [],
                "players": [],
                "stream": []
            }
        },
        "GameInstance.start": {
            "name": "start",
            "location": 862,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.change_subject": {
            "name": "change_subject",
            "location": 867,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "subject": []
            }
        },
        "GameInstance.get_player_text": {
            "name": "get_player_text",
            "location": 873,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.get_start_message": {
            "name": "get_start_message",
            "location": 879,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.handle_message": {
            "name": "handle_message",
            "location": 890,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "player_email": []
            }
        },
        "GameInstance.broadcast": {
            "name": "broadcast",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "GameInstance.check_draw": {
            "name": "check_draw",
            "location": 926,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.handle_current_player_command": {
            "name": "handle_current_player_command",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "GameInstance.make_move": {
            "name": "make_move",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "is_computer": []
            }
        },
        "GameInstance.is_turn_of": {
            "name": "is_turn_of",
            "location": 969,
            "return": [],
            "arguments": {
                "self": [],
                "player_email": []
            }
        },
        "GameInstance.same_player_turn": {
            "name": "same_player_turn",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "message": [],
                "is_computer": []
            }
        },
        "GameInstance.next_turn": {
            "name": "next_turn",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.broadcast_current_message": {
            "name": "broadcast_current_message",
            "location": 1019,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.parse_current_board": {
            "name": "parse_current_board",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInstance.end_game": {
            "name": "end_game",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": [],
                "winner": []
            }
        },
        "GameInstance.send_win_responses": {
            "name": "send_win_responses",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": [],
                "winner": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/lib.py": {
        "exit_gracefully": {
            "name": "exit_gracefully",
            "location": 25,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "get_bots_directory_path": {
            "name": "get_bots_directory_path",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "zulip_env_vars_are_present": {
            "name": "zulip_env_vars_are_present",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "use_storage": {
            "name": "use_storage",
            "location": 167,
            "return": [],
            "arguments": {
                "storage": [],
                "keys": []
            }
        },
        "extract_query_without_mention": {
            "name": "extract_query_without_mention",
            "location": 386,
            "return": [],
            "arguments": {
                "message": [],
                "client": []
            }
        },
        "is_private_message_but_not_group_pm": {
            "name": "is_private_message_but_not_group_pm",
            "location": 405,
            "return": [],
            "arguments": {
                "message_dict": [],
                "current_user": []
            }
        },
        "display_config_file_errors": {
            "name": "display_config_file_errors",
            "location": 424,
            "return": [],
            "arguments": {
                "error_msg": [],
                "config_file": []
            }
        },
        "prepare_message_handler": {
            "name": "prepare_message_handler",
            "location": 430,
            "return": [],
            "arguments": {
                "bot": [],
                "bot_handler": [],
                "bot_lib_module": []
            }
        },
        "run_message_handler_for_bot": {
            "name": "run_message_handler_for_bot",
            "location": 440,
            "return": [],
            "arguments": {
                "lib_module": [],
                "quiet": [],
                "config_file": [],
                "bot_config_file": [],
                "bot_name": [],
                "bot_source": []
            }
        },
        "RateLimit.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "message_limit": [],
                "interval_limit": []
            }
        },
        "RateLimit.is_legal": {
            "name": "is_legal",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RateLimit.show_error_and_exit": {
            "name": "show_error_and_exit",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotIdentity.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "email": []
            }
        },
        "BotStorage.put": {
            "name": "put",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BotStorage.get": {
            "name": "get",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BotStorage.contains": {
            "name": "contains",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CachedStorage.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "parent_storage": [],
                "init_data": []
            }
        },
        "CachedStorage.put": {
            "name": "put",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "CachedStorage.get": {
            "name": "get",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CachedStorage.flush": {
            "name": "flush",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedStorage.flush_one": {
            "name": "flush_one",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CachedStorage.contains": {
            "name": "contains",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "StateHandler.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "StateHandler.put": {
            "name": "put",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "StateHandler.get": {
            "name": "get",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "StateHandler.contains": {
            "name": "contains",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BotHandler.storage": {
            "name": "storage",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.identity": {
            "name": "identity",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotHandler.react": {
            "name": "react",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "emoji_name": []
            }
        },
        "BotHandler.send_message": {
            "name": "send_message",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotHandler.send_reply": {
            "name": "send_reply",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "widget_content": []
            }
        },
        "BotHandler.update_message": {
            "name": "update_message",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "bot_name": [],
                "optional": []
            }
        },
        "BotHandler.quit": {
            "name": "quit",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ExternalBotHandler.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "root_dir": [],
                "bot_details": [],
                "bot_config_file": [],
                "bot_config_parser": []
            }
        },
        "ExternalBotHandler.storage": {
            "name": "storage",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalBotHandler.identity": {
            "name": "identity",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExternalBotHandler.react": {
            "name": "react",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "emoji_name": []
            }
        },
        "ExternalBotHandler.send_message": {
            "name": "send_message",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ExternalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "widget_content": []
            }
        },
        "ExternalBotHandler.update_message": {
            "name": "update_message",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ExternalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "bot_name": [],
                "optional": []
            }
        },
        "ExternalBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "ExternalBotHandler.upload_file": {
            "name": "upload_file",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "ExternalBotHandler.open": {
            "name": "open",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "ExternalBotHandler.quit": {
            "name": "quit",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "run_message_handler_for_bot.handle_message": {
            "name": "handle_message",
            "location": 485,
            "return": [],
            "arguments": {
                "message": [],
                "flags": []
            }
        },
        "run_message_handler_for_bot.event_callback": {
            "name": "event_callback",
            "location": 511,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/provision.py": {
        "get_bot_paths": {
            "name": "get_bot_paths",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "provision_bot": {
            "name": "provision_bot",
            "location": 20,
            "return": [],
            "arguments": {
                "path_to_bot": [],
                "force": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 38,
            "return": [],
            "arguments": {
                "available_bots": []
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/request_test_lib.py": {
        "mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 11,
            "return": [],
            "arguments": {
                "http_data": []
            }
        },
        "mock_request_exception": {
            "name": "mock_request_exception",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "mock_http_conversation.get_response": {
            "name": "get_response",
            "location": 22,
            "return": [],
            "arguments": {
                "http_response": [],
                "http_headers": [],
                "is_raw_response": []
            }
        },
        "mock_http_conversation.assert_called_with_fields": {
            "name": "assert_called_with_fields",
            "location": 38,
            "return": [],
            "arguments": {
                "mock_result": [],
                "http_request": [],
                "fields": [],
                "meta": []
            }
        },
        "mock_request_exception.assert_mock_called": {
            "name": "assert_mock_called",
            "location": 97,
            "return": [],
            "arguments": {
                "mock_result": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/run.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "exit_gracefully_if_zulip_config_is_missing": {
            "name": "exit_gracefully_if_zulip_config_is_missing",
            "location": 64,
            "return": [],
            "arguments": {
                "config_file": []
            }
        },
        "exit_gracefully_if_bot_config_file_does_not_exist": {
            "name": "exit_gracefully_if_bot_config_file_does_not_exist",
            "location": 98,
            "return": [],
            "arguments": {
                "bot_config_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/simple_lib.py": {
        "SimpleStorage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleStorage.contains": {
            "name": "contains",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SimpleStorage.put": {
            "name": "put",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "SimpleStorage.get": {
            "name": "get",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MockMessageServer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessageServer.send": {
            "name": "send",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "MockMessageServer.add_reaction": {
            "name": "add_reaction",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "reaction_data": []
            }
        },
        "MockMessageServer.update": {
            "name": "update",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "MockMessageServer.upload_file": {
            "name": "upload_file",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TerminalBotHandler.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "bot_config_file": [],
                "message_server": []
            }
        },
        "TerminalBotHandler.storage": {
            "name": "storage",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TerminalBotHandler.identity": {
            "name": "identity",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TerminalBotHandler.react": {
            "name": "react",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "emoji_name": []
            }
        },
        "TerminalBotHandler.send_message": {
            "name": "send_message",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TerminalBotHandler.send_reply": {
            "name": "send_reply",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": []
            }
        },
        "TerminalBotHandler.update_message": {
            "name": "update_message",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "TerminalBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "TerminalBotHandler.upload_file": {
            "name": "upload_file",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TerminalBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "bot_name": [],
                "optional": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/test_file_utils.py": {
        "get_bot_message_handler": {
            "name": "get_bot_message_handler",
            "location": 17,
            "return": [],
            "arguments": {
                "bot_name": []
            }
        },
        "read_bot_fixture_data": {
            "name": "read_bot_fixture_data",
            "location": 26,
            "return": [],
            "arguments": {
                "bot_name": [],
                "test_name": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/test_lib.py": {
        "StubBotHandler.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.reset_transcript": {
            "name": "reset_transcript",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.identity": {
            "name": "identity",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.send_message": {
            "name": "send_message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StubBotHandler.send_reply": {
            "name": "send_reply",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "widget_content": []
            }
        },
        "StubBotHandler.react": {
            "name": "react",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "emoji_name": []
            }
        },
        "StubBotHandler.update_message": {
            "name": "update_message",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StubBotHandler.upload_file_from_path": {
            "name": "upload_file_from_path",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "StubBotHandler.upload_file": {
            "name": "upload_file",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "StubBotHandler.quit": {
            "name": "quit",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "StubBotHandler.get_config_info": {
            "name": "get_config_info",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "bot_name": [],
                "optional": []
            }
        },
        "StubBotHandler.unique_reply": {
            "name": "unique_reply",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.unique_response": {
            "name": "unique_response",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubBotHandler.ensure_unique_response": {
            "name": "ensure_unique_response",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "responses": []
            }
        },
        "DefaultTests.make_request_message": {
            "name": "make_request_message",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "DefaultTests.get_response": {
            "name": "get_response",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "DefaultTests.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultTests.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase._get_handlers": {
            "name": "_get_handlers",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.get_response": {
            "name": "get_response",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotTestCase.make_request_message": {
            "name": "make_request_message",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "BotTestCase.get_reply_dict": {
            "name": "get_reply_dict",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BotTestCase.verify_reply": {
            "name": "verify_reply",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        },
        "BotTestCase.verify_dialog": {
            "name": "verify_dialog",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "conversation": []
            }
        },
        "BotTestCase.validate_invalid_config": {
            "name": "validate_invalid_config",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "config_data": [],
                "error_regexp": []
            }
        },
        "BotTestCase.validate_valid_config": {
            "name": "validate_valid_config",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "config_data": []
            }
        },
        "BotTestCase.mock_http_conversation": {
            "name": "mock_http_conversation",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "test_name": []
            }
        },
        "BotTestCase.mock_request_exception": {
            "name": "mock_request_exception",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotTestCase.mock_config_info": {
            "name": "mock_config_info",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "config_info": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/baremetrics/baremetrics.py": {
        "BaremetricsHandler.initialize": {
            "name": "initialize",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "BaremetricsHandler.check_api_key": {
            "name": "check_api_key",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "BaremetricsHandler.usage": {
            "name": "usage",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaremetricsHandler.handle_message": {
            "name": "handle_message",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "BaremetricsHandler.generate_response": {
            "name": "generate_response",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "commands": []
            }
        },
        "BaremetricsHandler.get_account_info": {
            "name": "get_account_info",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaremetricsHandler.get_sources": {
            "name": "get_sources",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaremetricsHandler.get_plans": {
            "name": "get_plans",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "source_id": []
            }
        },
        "BaremetricsHandler.get_customers": {
            "name": "get_customers",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "source_id": []
            }
        },
        "BaremetricsHandler.get_subscriptions": {
            "name": "get_subscriptions",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "source_id": []
            }
        },
        "BaremetricsHandler.create_plan": {
            "name": "create_plan",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/baremetrics/test_baremetrics.py": {
        "TestBaremetricsBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_help_query": {
            "name": "test_help_query",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_list_commands_command": {
            "name": "test_list_commands_command",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_account_info_command": {
            "name": "test_account_info_command",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_list_sources_command": {
            "name": "test_list_sources_command",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_list_plans_command": {
            "name": "test_list_plans_command",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_list_customers_command": {
            "name": "test_list_customers_command",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_list_subscriptions_command": {
            "name": "test_list_subscriptions_command",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_exception_when_api_key_is_invalid": {
            "name": "test_exception_when_api_key_is_invalid",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_invalid_command": {
            "name": "test_invalid_command",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_missing_params": {
            "name": "test_missing_params",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_key_error": {
            "name": "test_key_error",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_create_plan_command": {
            "name": "test_create_plan_command",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_create_plan_error_command": {
            "name": "test_create_plan_error_command",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBaremetricsBot.test_create_plan_argnum_error_command": {
            "name": "test_create_plan_argnum_error_command",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/baremetrics/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/beeminder/beeminder.py": {
        "get_beeminder_response": {
            "name": "get_beeminder_response",
            "location": 20,
            "return": [],
            "arguments": {
                "message_content": [],
                "config_info": []
            }
        },
        "BeeminderHandler.initialize": {
            "name": "initialize",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "BeeminderHandler.usage": {
            "name": "usage",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeeminderHandler.handle_message": {
            "name": "handle_message",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/beeminder/test_beeminder.py": {
        "TestBeeminderBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_help_message": {
            "name": "test_help_message",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_message_with_daystamp_and_value": {
            "name": "test_message_with_daystamp_and_value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_message_with_value_and_comment": {
            "name": "test_message_with_value_and_comment",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_message_with_daystamp_and_value_and_comment": {
            "name": "test_message_with_daystamp_and_value_and_comment",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_syntax_error": {
            "name": "test_syntax_error",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_connection_error_when_handle_message": {
            "name": "test_connection_error_when_handle_message",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_invalid_when_handle_message": {
            "name": "test_invalid_when_handle_message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_error": {
            "name": "test_error",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_invalid_when_initialize": {
            "name": "test_invalid_when_initialize",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBeeminderBot.test_connection_error_during_initialize": {
            "name": "test_connection_error_during_initialize",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/beeminder/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/chessbot/chessbot.py": {
        "calculate_computer_move": {
            "name": "calculate_computer_move",
            "location": 368,
            "return": [],
            "arguments": {
                "board": [],
                "engine": []
            }
        },
        "make_draw_response": {
            "name": "make_draw_response",
            "location": 383,
            "return": [],
            "arguments": {
                "reason": []
            }
        },
        "make_loss_response": {
            "name": "make_loss_response",
            "location": 395,
            "return": [],
            "arguments": {
                "board": [],
                "reason": []
            }
        },
        "make_not_legal_response": {
            "name": "make_not_legal_response",
            "location": 413,
            "return": [],
            "arguments": {
                "board": [],
                "move_san": []
            }
        },
        "make_copied_wrong_response": {
            "name": "make_copied_wrong_response",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "make_start_reponse": {
            "name": "make_start_reponse",
            "location": 438,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "make_start_computer_reponse": {
            "name": "make_start_computer_reponse",
            "location": 458,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "make_move_reponse": {
            "name": "make_move_reponse",
            "location": 479,
            "return": [],
            "arguments": {
                "last_board": [],
                "new_board": [],
                "move": []
            }
        },
        "make_engine_failed_response": {
            "name": "make_engine_failed_response",
            "location": 509,
            "return": [],
            "arguments": {}
        },
        "make_footer": {
            "name": "make_footer",
            "location": 517,
            "return": [],
            "arguments": {}
        },
        "make_str": {
            "name": "make_str",
            "location": 529,
            "return": [],
            "arguments": {
                "board": [],
                "is_white_on_bottom": []
            }
        },
        "guide_with_numbers": {
            "name": "guide_with_numbers",
            "location": 554,
            "return": [],
            "arguments": {
                "board_str": []
            }
        },
        "replace_with_unicode": {
            "name": "replace_with_unicode",
            "location": 599,
            "return": [],
            "arguments": {
                "board_str": []
            }
        },
        "trim_whitespace_before_newline": {
            "name": "trim_whitespace_before_newline",
            "location": 629,
            "return": [],
            "arguments": {
                "str_to_trim": []
            }
        },
        "ChessHandler.usage": {
            "name": "usage",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChessHandler.initialize": {
            "name": "initialize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "ChessHandler.handle_message": {
            "name": "handle_message",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "ChessHandler.start": {
            "name": "start",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "ChessHandler.start_computer": {
            "name": "start_computer",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "is_white_user": []
            }
        },
        "ChessHandler.validate_board": {
            "name": "validate_board",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "fen": []
            }
        },
        "ChessHandler.validate_move": {
            "name": "validate_move",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_board": [],
                "move_san": [],
                "is_computer": []
            }
        },
        "ChessHandler.check_game_over": {
            "name": "check_game_over",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "new_board": []
            }
        },
        "ChessHandler.move": {
            "name": "move",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": [],
                "move_san": []
            }
        },
        "ChessHandler.move_computer": {
            "name": "move_computer",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": [],
                "move_san": []
            }
        },
        "ChessHandler.move_computer_first": {
            "name": "move_computer_first",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": []
            }
        },
        "ChessHandler.resign": {
            "name": "resign",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": [],
                "last_fen": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/chessbot/test_chessbot.py": {
        "TestChessBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestChessBot.test_main": {
            "name": "test_main",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/chessbot/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/connect_four/connect_four.py": {
        "ConnectFourMessageHandler.parse_board": {
            "name": "parse_board",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "ConnectFourMessageHandler.get_player_color": {
            "name": "get_player_color",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "turn": []
            }
        },
        "ConnectFourMessageHandler.alert_move_message": {
            "name": "alert_move_message",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "original_player": [],
                "move_info": []
            }
        },
        "ConnectFourMessageHandler.game_start_message": {
            "name": "game_start_message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectFourBotHandler.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/connect_four/controller.py": {
        "ConnectFourModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectFourModel.update_board": {
            "name": "update_board",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "ConnectFourModel.get_column": {
            "name": "get_column",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "col": []
            }
        },
        "ConnectFourModel.validate_move": {
            "name": "validate_move",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "column_number": []
            }
        },
        "ConnectFourModel.available_moves": {
            "name": "available_moves",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectFourModel.make_move": {
            "name": "make_move",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "move": [],
                "player_number": [],
                "is_computer": []
            }
        },
        "ConnectFourModel.determine_game_over": {
            "name": "determine_game_over",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "players": []
            }
        },
        "ConnectFourModel.determine_game_over.get_horizontal_wins": {
            "name": "get_horizontal_wins",
            "location": 71,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "ConnectFourModel.determine_game_over.get_vertical_wins": {
            "name": "get_vertical_wins",
            "location": 89,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "ConnectFourModel.determine_game_over.get_diagonal_wins": {
            "name": "get_diagonal_wins",
            "location": 107,
            "return": [],
            "arguments": {
                "board": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/connect_four/test_connect_four.py": {
        "TestConnectFourBot.make_request_message": {
            "name": "make_request_message",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "user": [],
                "user_name": []
            }
        },
        "TestConnectFourBot.verify_response": {
            "name": "verify_response",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "expected_response": [],
                "response_number": [],
                "user": []
            }
        },
        "TestConnectFourBot.help_message": {
            "name": "help_message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnectFourBot.test_static_responses": {
            "name": "test_static_responses",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnectFourBot.test_game_message_handler_responses": {
            "name": "test_game_message_handler_responses",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnectFourBot.test_connect_four_logic": {
            "name": "test_connect_four_logic",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnectFourBot.test_more_logic": {
            "name": "test_more_logic",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnectFourBot.test_connect_four_logic.confirmAvailableMoves": {
            "name": "confirmAvailableMoves",
            "location": 127,
            "return": [],
            "arguments": {
                "good_moves": [],
                "bad_moves": [],
                "board": []
            }
        },
        "TestConnectFourBot.test_connect_four_logic.confirmMove": {
            "name": "confirmMove",
            "location": 138,
            "return": [],
            "arguments": {
                "column_number": [],
                "token_number": [],
                "initial_board": [],
                "final_board": []
            }
        },
        "TestConnectFourBot.test_connect_four_logic.confirmGameOver": {
            "name": "confirmGameOver",
            "location": 149,
            "return": [],
            "arguments": {
                "board": [],
                "result": []
            }
        },
        "TestConnectFourBot.test_connect_four_logic.confirmWinStates": {
            "name": "confirmWinStates",
            "location": 155,
            "return": [],
            "arguments": {
                "array": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/connect_four/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/converter/converter.py": {
        "is_float": {
            "name": "is_float",
            "location": 11,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "round_to": {
            "name": "round_to",
            "location": 26,
            "return": [],
            "arguments": {
                "x": [],
                "digits": []
            }
        },
        "get_bot_converter_response": {
            "name": "get_bot_converter_response",
            "location": 56,
            "return": [],
            "arguments": {
                "message": [],
                "bot_handler": []
            }
        },
        "ConverterHandler.usage": {
            "name": "usage",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConverterHandler.handle_message": {
            "name": "handle_message",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/converter/test_converter.py": {
        "TestConverterBot.test_bot": {
            "name": "test_bot",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/converter/utils.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/converter/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/define/define.py": {
        "DefineHandler.usage": {
            "name": "usage",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefineHandler.handle_message": {
            "name": "handle_message",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "DefineHandler.get_bot_define_response": {
            "name": "get_bot_define_response",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "original_content": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/define/test_define.py": {
        "TestDefineBot.test_bot": {
            "name": "test_bot",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDefineBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/define/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dialogflow/dialogflow.py": {
        "get_bot_result": {
            "name": "get_bot_result",
            "location": 16,
            "return": [],
            "arguments": {
                "message_content": [],
                "config": [],
                "sender_id": []
            }
        },
        "DialogFlowHandler.initialize": {
            "name": "initialize",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "DialogFlowHandler.usage": {
            "name": "usage",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DialogFlowHandler.handle_message": {
            "name": "handle_message",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dialogflow/test_dialogflow.py": {
        "mock_dialogflow": {
            "name": "mock_dialogflow",
            "location": 28,
            "return": [],
            "arguments": {
                "test_name": [],
                "bot_name": []
            }
        },
        "MockHttplibRequest.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MockHttplibRequest.read": {
            "name": "read",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockTextRequest.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockTextRequest.getresponse": {
            "name": "getresponse",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot._test": {
            "name": "_test",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "test_name": [],
                "message": [],
                "response": []
            }
        },
        "TestDialogFlowBot.test_normal": {
            "name": "test_normal",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_403": {
            "name": "test_403",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_empty_response": {
            "name": "test_empty_response",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_exception": {
            "name": "test_exception",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_help": {
            "name": "test_help",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_alternate_response": {
            "name": "test_alternate_response",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDialogFlowBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dialogflow/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dropbox_share/dropbox_share.py": {
        "get_help": {
            "name": "get_help",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "get_usage_examples": {
            "name": "get_usage_examples",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "get_commands": {
            "name": "get_commands",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "dbx_command": {
            "name": "dbx_command",
            "location": 92,
            "return": [],
            "arguments": {
                "client": [],
                "cmd": []
            }
        },
        "syntax_help": {
            "name": "syntax_help",
            "location": 112,
            "return": [],
            "arguments": {
                "cmd_name": []
            }
        },
        "dbx_help": {
            "name": "dbx_help",
            "location": 123,
            "return": [],
            "arguments": {
                "client": [],
                "cmd_name": []
            }
        },
        "dbx_usage": {
            "name": "dbx_usage",
            "location": 127,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "dbx_mkdir": {
            "name": "dbx_mkdir",
            "location": 131,
            "return": [],
            "arguments": {
                "client": [],
                "fn": []
            }
        },
        "dbx_ls": {
            "name": "dbx_ls",
            "location": 145,
            "return": [],
            "arguments": {
                "client": [],
                "fn": []
            }
        },
        "dbx_rm": {
            "name": "dbx_rm",
            "location": 169,
            "return": [],
            "arguments": {
                "client": [],
                "fn": []
            }
        },
        "dbx_write": {
            "name": "dbx_write",
            "location": 183,
            "return": [],
            "arguments": {
                "client": [],
                "fn": [],
                "content": []
            }
        },
        "dbx_read": {
            "name": "dbx_read",
            "location": 195,
            "return": [],
            "arguments": {
                "client": [],
                "fn": []
            }
        },
        "dbx_search": {
            "name": "dbx_search",
            "location": 209,
            "return": [],
            "arguments": {
                "client": [],
                "query": [],
                "folder": [],
                "max_results": []
            }
        },
        "dbx_share": {
            "name": "dbx_share",
            "location": 243,
            "return": [],
            "arguments": {
                "client": [],
                "fn": []
            }
        },
        "DropboxHandler.initialize": {
            "name": "initialize",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "DropboxHandler.usage": {
            "name": "usage",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DropboxHandler.handle_message": {
            "name": "handle_message",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dropbox_share/test_dropbox_share.py": {
        "get_root_files_list": {
            "name": "get_root_files_list",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "get_folder_files_list": {
            "name": "get_folder_files_list",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "get_empty_files_list": {
            "name": "get_empty_files_list",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "create_file": {
            "name": "create_file",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "download_file": {
            "name": "download_file",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "search_files": {
            "name": "search_files",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "get_empty_search_result": {
            "name": "get_empty_search_result",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "get_shared_link": {
            "name": "get_shared_link",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "get_help": {
            "name": "get_help",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "TestDropboxBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_ls_root": {
            "name": "test_dbx_ls_root",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_ls_folder": {
            "name": "test_dbx_ls_folder",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_ls_empty": {
            "name": "test_dbx_ls_empty",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_ls_error": {
            "name": "test_dbx_ls_error",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_mkdir": {
            "name": "test_dbx_mkdir",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_mkdir_error": {
            "name": "test_dbx_mkdir_error",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_rm": {
            "name": "test_dbx_rm",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_rm_error": {
            "name": "test_dbx_rm_error",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_write": {
            "name": "test_dbx_write",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_write_error": {
            "name": "test_dbx_write_error",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_read": {
            "name": "test_dbx_read",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_read_error": {
            "name": "test_dbx_read_error",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_search": {
            "name": "test_dbx_search",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_search_empty": {
            "name": "test_dbx_search_empty",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_search_error": {
            "name": "test_dbx_search_error",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_share": {
            "name": "test_dbx_share",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_share_error": {
            "name": "test_dbx_share_error",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_help": {
            "name": "test_dbx_help",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_dbx_usage": {
            "name": "test_dbx_usage",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_invalid_commands": {
            "name": "test_invalid_commands",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDropboxBot.test_unkown_command": {
            "name": "test_unkown_command",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dropbox_share/test_util.py": {
        "MockFileMetadata.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "path_lower": []
            }
        },
        "MockListFolderResult.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "entries": [],
                "has_more": []
            }
        },
        "MockSearchMatch.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "MockSearchResult.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "matches": []
            }
        },
        "MockPathLinkMetadata.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "MockHttpResponse.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/dropbox_share/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/encrypt/encrypt.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 6,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "EncryptHandler.usage": {
            "name": "usage",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncryptHandler.handle_message": {
            "name": "handle_message",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "EncryptHandler.get_bot_encrypt_response": {
            "name": "get_bot_encrypt_response",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/encrypt/test_encrypt.py": {
        "TestEncryptBot.test_bot": {
            "name": "test_bot",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/encrypt/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/file_uploader/file_uploader.py": {
        "FileUploaderHandler.usage": {
            "name": "usage",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileUploaderHandler.handle_message": {
            "name": "handle_message",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/file_uploader/test_file_uploader.py": {
        "TestFileUploaderBot.test_file_not_found": {
            "name": "test_file_not_found",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "is_file": []
            }
        },
        "TestFileUploaderBot.test_file_upload_failed": {
            "name": "test_file_upload_failed",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "is_file": [],
                "resolve": []
            }
        },
        "TestFileUploaderBot.test_file_upload_success": {
            "name": "test_file_upload_success",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "is_file": [],
                "resolve": []
            }
        },
        "TestFileUploaderBot.test_help": {
            "name": "test_help",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/file_uploader/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/flock/flock.py": {
        "find_recipient_id": {
            "name": "find_recipient_id",
            "location": 19,
            "return": [],
            "arguments": {
                "users": [],
                "recipient_name": []
            }
        },
        "make_flock_request": {
            "name": "make_flock_request",
            "location": 28,
            "return": [],
            "arguments": {
                "url": [],
                "params": []
            }
        },
        "get_recipient_id": {
            "name": "get_recipient_id",
            "location": 42,
            "return": [],
            "arguments": {
                "recipient_name": [],
                "config": []
            }
        },
        "get_flock_response": {
            "name": "get_flock_response",
            "location": 60,
            "return": [],
            "arguments": {
                "content": [],
                "config": []
            }
        },
        "get_flock_bot_response": {
            "name": "get_flock_bot_response",
            "location": 84,
            "return": [],
            "arguments": {
                "content": [],
                "config": []
            }
        },
        "FlockHandler.initialize": {
            "name": "initialize",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FlockHandler.usage": {
            "name": "usage",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlockHandler.handle_message": {
            "name": "handle_message",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/flock/test_flock.py": {
        "TestFlockBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_help_message": {
            "name": "test_help_message",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_fetch_id_connection_error": {
            "name": "test_fetch_id_connection_error",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_response_connection_error": {
            "name": "test_response_connection_error",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_no_recipient_found": {
            "name": "test_no_recipient_found",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_found_invalid_recipient": {
            "name": "test_found_invalid_recipient",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlockBot.test_message_send_connection_error": {
            "name": "test_message_send_connection_error",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "get_recipient_id": []
            }
        },
        "TestFlockBot.test_message_send_success": {
            "name": "test_message_send_success",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "get_recipient_id": []
            }
        },
        "TestFlockBot.test_message_send_failed": {
            "name": "test_message_send_failed",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "get_recipient_id": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/flock/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/followup/followup.py": {
        "FollowupHandler.usage": {
            "name": "usage",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FollowupHandler.initialize": {
            "name": "initialize",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FollowupHandler.handle_message": {
            "name": "handle_message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "FollowupHandler.get_bot_followup_response": {
            "name": "get_bot_followup_response",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/followup/test_followup.py": {
        "TestFollowUpBot.test_followup_stream": {
            "name": "test_followup_stream",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_different_stream": {
            "name": "test_different_stream",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFollowUpBot.test_help_text": {
            "name": "test_help_text",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/followup/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/front/front.py": {
        "FrontHandler.usage": {
            "name": "usage",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrontHandler.initialize": {
            "name": "initialize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.help": {
            "name": "help",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.archive": {
            "name": "archive",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.delete": {
            "name": "delete",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.spam": {
            "name": "spam",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.restore": {
            "name": "restore",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.comment": {
            "name": "comment",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "FrontHandler.handle_message": {
            "name": "handle_message",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/front/test_front.py": {
        "TestFrontBot.make_request_message": {
            "name": "make_request_message",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TestFrontBot.test_bot_invalid_api_key": {
            "name": "test_bot_invalid_api_key",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_help": {
            "name": "test_help",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_archive": {
            "name": "test_archive",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_archive_error": {
            "name": "test_archive_error",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_delete": {
            "name": "test_delete",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_delete_error": {
            "name": "test_delete_error",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_spam": {
            "name": "test_spam",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_spam_error": {
            "name": "test_spam_error",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_restore": {
            "name": "test_restore",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_restore_error": {
            "name": "test_restore_error",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_comment": {
            "name": "test_comment",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot.test_comment_error": {
            "name": "test_comment_error",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBot._test_command_error": {
            "name": "_test_command_error",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "command_name": [],
                "command_arg": []
            }
        },
        "TestFrontBotWrongTopic.make_request_message": {
            "name": "make_request_message",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TestFrontBotWrongTopic.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFrontBotWrongTopic.test_no_conversation_id": {
            "name": "test_no_conversation_id",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/front/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_handler_bot/game_handler_bot.py": {
        "GameHandlerBotMessageHandler.parse_board": {
            "name": "parse_board",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameHandlerBotMessageHandler.get_player_color": {
            "name": "get_player_color",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "turn": []
            }
        },
        "GameHandlerBotMessageHandler.alert_move_message": {
            "name": "alert_move_message",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "original_player": [],
                "move_info": []
            }
        },
        "GameHandlerBotMessageHandler.game_start_message": {
            "name": "game_start_message",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockModel.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockModel.make_move": {
            "name": "make_move",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "move": [],
                "player": [],
                "is_computer": []
            }
        },
        "MockModel.determine_game_over": {
            "name": "determine_game_over",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "players": []
            }
        },
        "GameHandlerBotHandler.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_handler_bot/test_game_handler_bot.py": {
        "TestGameHandlerBot.make_request_message": {
            "name": "make_request_message",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "user": [],
                "user_name": [],
                "type": [],
                "stream": [],
                "subject": []
            }
        },
        "TestGameHandlerBot.verify_response": {
            "name": "verify_response",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "expected_response": [],
                "response_number": [],
                "bot": [],
                "user_name": [],
                "stream": [],
                "subject": [],
                "max_messages": []
            }
        },
        "TestGameHandlerBot.add_user_to_cache": {
            "name": "add_user_to_cache",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bot": []
            }
        },
        "TestGameHandlerBot.setup_game": {
            "name": "setup_game",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "bot": [],
                "players": [],
                "subject": [],
                "stream": []
            }
        },
        "TestGameHandlerBot.setup_computer_game": {
            "name": "setup_computer_game",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.help_message": {
            "name": "help_message",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_help_message": {
            "name": "test_help_message",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_exception_handling": {
            "name": "test_exception_handling",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_not_in_game_messages": {
            "name": "test_not_in_game_messages",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_start_game_with_name": {
            "name": "test_start_game_with_name",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_start_game_with_email": {
            "name": "test_start_game_with_email",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_join_game_and_start_in_stream": {
            "name": "test_join_game_and_start_in_stream",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_start_game_in_stream": {
            "name": "test_start_game_in_stream",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_start_invite_game_in_stream": {
            "name": "test_start_invite_game_in_stream",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_join_no_game": {
            "name": "test_join_no_game",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_accept_invitation": {
            "name": "test_accept_invitation",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_decline_invitation": {
            "name": "test_decline_invitation",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_quit_invite": {
            "name": "test_quit_invite",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_user_already_in_game_errors": {
            "name": "test_user_already_in_game_errors",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_register_command": {
            "name": "test_register_command",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_no_active_invite_errors": {
            "name": "test_no_active_invite_errors",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_wrong_number_of_players_message": {
            "name": "test_wrong_number_of_players_message",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_public_accept": {
            "name": "test_public_accept",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_start_game_with_computer": {
            "name": "test_start_game_with_computer",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_sent_by_bot": {
            "name": "test_sent_by_bot",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_forfeit": {
            "name": "test_forfeit",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_draw": {
            "name": "test_draw",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_normal_turns": {
            "name": "test_normal_turns",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_wrong_turn": {
            "name": "test_wrong_turn",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_private_message_error": {
            "name": "test_private_message_error",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_game_already_in_subject": {
            "name": "test_game_already_in_subject",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_unknown_user": {
            "name": "test_unknown_user",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_is_user_not_player": {
            "name": "test_is_user_not_player",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_move_help_message": {
            "name": "test_move_help_message",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_invalid_move_message": {
            "name": "test_invalid_move_message",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_get_game_id_by_email": {
            "name": "test_get_game_id_by_email",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_game_over_and_leaderboard": {
            "name": "test_game_over_and_leaderboard",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_current_turn_winner": {
            "name": "test_current_turn_winner",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_computer_turn": {
            "name": "test_computer_turn",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_computer_endgame_responses": {
            "name": "test_computer_endgame_responses",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_add_user_statistics": {
            "name": "test_add_user_statistics",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_get_players": {
            "name": "test_get_players",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_none_function_responses": {
            "name": "test_none_function_responses",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_get_game_info": {
            "name": "test_get_game_info",
            "location": 583,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_parse_message": {
            "name": "test_parse_message",
            "location": 605,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameHandlerBot.test_change_game_subject": {
            "name": "test_change_game_subject",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_handler_bot/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_of_fifteen/game_of_fifteen.py": {
        "GameOfFifteenModel.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameOfFifteenModel.get_coordinates": {
            "name": "get_coordinates",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameOfFifteenModel.determine_game_over": {
            "name": "determine_game_over",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "players": []
            }
        },
        "GameOfFifteenModel.won": {
            "name": "won",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameOfFifteenModel.validate_move": {
            "name": "validate_move",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "tile": []
            }
        },
        "GameOfFifteenModel.update_board": {
            "name": "update_board",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameOfFifteenModel.make_move": {
            "name": "make_move",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "move": [],
                "player_number": [],
                "computer_move": []
            }
        },
        "GameOfFifteenMessageHandler.parse_board": {
            "name": "parse_board",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "GameOfFifteenMessageHandler.alert_move_message": {
            "name": "alert_move_message",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "original_player": [],
                "move_info": []
            }
        },
        "GameOfFifteenMessageHandler.game_start_message": {
            "name": "game_start_message",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameOfFifteenBotHandler.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_of_fifteen/test_game_of_fifteen.py": {
        "TestGameOfFifteenBot.make_request_message": {
            "name": "make_request_message",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "user": [],
                "user_name": []
            }
        },
        "TestGameOfFifteenBot.verify_response": {
            "name": "verify_response",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "expected_response": [],
                "response_number": [],
                "user": []
            }
        },
        "TestGameOfFifteenBot.help_message": {
            "name": "help_message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfFifteenBot.test_static_responses": {
            "name": "test_static_responses",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfFifteenBot.test_game_message_handler_responses": {
            "name": "test_game_message_handler_responses",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfFifteenBot.test_game_of_fifteen_logic": {
            "name": "test_game_of_fifteen_logic",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfFifteenBot.test_invalid_moves": {
            "name": "test_invalid_moves",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameOfFifteenBot.test_game_of_fifteen_logic.confirmAvailableMoves": {
            "name": "confirmAvailableMoves",
            "location": 72,
            "return": [],
            "arguments": {
                "good_moves": [],
                "bad_moves": [],
                "board": []
            }
        },
        "TestGameOfFifteenBot.test_game_of_fifteen_logic.confirmMove": {
            "name": "confirmMove",
            "location": 82,
            "return": [],
            "arguments": {
                "tile": [],
                "token_number": [],
                "initial_board": [],
                "final_board": []
            }
        },
        "TestGameOfFifteenBot.test_game_of_fifteen_logic.confirmGameOver": {
            "name": "confirmGameOver",
            "location": 93,
            "return": [],
            "arguments": {
                "board": [],
                "result": []
            }
        },
        "TestGameOfFifteenBot.test_game_of_fifteen_logic.confirm_coordinates": {
            "name": "confirm_coordinates",
            "location": 99,
            "return": [],
            "arguments": {
                "board": [],
                "result": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/game_of_fifteen/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/giphy/giphy.py": {
        "get_url_gif_giphy": {
            "name": "get_url_gif_giphy",
            "location": 59,
            "return": [],
            "arguments": {
                "keyword": [],
                "api_key": []
            }
        },
        "get_bot_giphy_response": {
            "name": "get_bot_giphy_response",
            "location": 84,
            "return": [],
            "arguments": {
                "message": [],
                "bot_handler": [],
                "config_info": []
            }
        },
        "GiphyHandler.usage": {
            "name": "usage",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GiphyHandler.validate_config": {
            "name": "validate_config",
            "location": 31,
            "return": [],
            "arguments": {
                "config_info": []
            }
        },
        "GiphyHandler.initialize": {
            "name": "initialize",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "GiphyHandler.handle_message": {
            "name": "handle_message",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/giphy/test_giphy.py": {
        "TestGiphyBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_normal": {
            "name": "test_normal",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_no_result": {
            "name": "test_no_result",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_invalid_config": {
            "name": "test_invalid_config",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_connection_error_when_validate_config": {
            "name": "test_connection_error_when_validate_config",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_valid_config": {
            "name": "test_valid_config",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGiphyBot.test_connection_error_while_running": {
            "name": "test_connection_error_while_running",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/giphy/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/github_detail/github_detail.py": {
        "GithubHandler.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "GithubHandler.usage": {
            "name": "usage",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubHandler.format_message": {
            "name": "format_message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "details": []
            }
        },
        "GithubHandler.get_details_from_github": {
            "name": "get_details_from_github",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "repo": [],
                "number": []
            }
        },
        "GithubHandler.get_owner_and_repo": {
            "name": "get_owner_and_repo",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "issue_pr": []
            }
        },
        "GithubHandler.handle_message": {
            "name": "handle_message",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/github_detail/test_github_detail.py": {
        "TestGithubDetailBot.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_issue": {
            "name": "test_issue",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_pull_request": {
            "name": "test_pull_request",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_404": {
            "name": "test_404",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_exception": {
            "name": "test_exception",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_random_text": {
            "name": "test_random_text",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_help_text": {
            "name": "test_help_text",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_too_many_request": {
            "name": "test_too_many_request",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_owner_and_repo_not_specified": {
            "name": "test_owner_and_repo_not_specified",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_owner_and_repo_specified_in_config_file": {
            "name": "test_owner_and_repo_specified_in_config_file",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGithubDetailBot.test_owner_and_repo_specified_in_message": {
            "name": "test_owner_and_repo_specified_in_message",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/github_detail/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_search/google_search.py": {
        "google_search": {
            "name": "google_search",
            "location": 11,
            "return": [],
            "arguments": {
                "keywords": []
            }
        },
        "get_google_result": {
            "name": "get_google_result",
            "location": 40,
            "return": [],
            "arguments": {
                "search_keywords": []
            }
        },
        "GoogleSearchHandler.usage": {
            "name": "usage",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleSearchHandler.handle_message": {
            "name": "handle_message",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_search/test_google_search.py": {
        "TestGoogleSearchBot.test_normal": {
            "name": "test_normal",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_bot_help": {
            "name": "test_bot_help",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_bot_no_results": {
            "name": "test_bot_no_results",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_attribute_error": {
            "name": "test_attribute_error",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleSearchBot.test_ignore_links": {
            "name": "test_ignore_links",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_search/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_translate/google_translate.py": {
        "get_supported_languages": {
            "name": "get_supported_languages",
            "location": 52,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 65,
            "return": [],
            "arguments": {
                "text_to_translate": [],
                "key": [],
                "dest": [],
                "src": []
            }
        },
        "get_code_for_language": {
            "name": "get_code_for_language",
            "location": 75,
            "return": [],
            "arguments": {
                "language": [],
                "all_languages": []
            }
        },
        "get_translate_bot_response": {
            "name": "get_translate_bot_response",
            "location": 83,
            "return": [],
            "arguments": {
                "message_content": [],
                "config_file": [],
                "author": [],
                "all_languages": []
            }
        },
        "GoogleTranslateHandler.usage": {
            "name": "usage",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleTranslateHandler.initialize": {
            "name": "initialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "GoogleTranslateHandler.handle_message": {
            "name": "handle_message",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_translate/test_google_translate.py": {
        "TestGoogleTranslateBot._test": {
            "name": "_test",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "http_config_fixture": [],
                "http_fixture": []
            }
        },
        "TestGoogleTranslateBot.test_normal": {
            "name": "test_normal",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_source_language_not_found": {
            "name": "test_source_language_not_found",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_target_language_not_found": {
            "name": "test_target_language_not_found",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_403": {
            "name": "test_403",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_command": {
            "name": "test_help_command",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_too_many_args": {
            "name": "test_help_too_many_args",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_help_no_langs": {
            "name": "test_help_no_langs",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_quotation_in_text": {
            "name": "test_quotation_in_text",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_exception": {
            "name": "test_exception",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_invalid_api_key": {
            "name": "test_invalid_api_key",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_api_access_not_configured": {
            "name": "test_api_access_not_configured",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGoogleTranslateBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/google_translate/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/helloworld/helloworld.py": {
        "HelloWorldHandler.usage": {
            "name": "usage",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelloWorldHandler.handle_message": {
            "name": "handle_message",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/helloworld/test_helloworld.py": {
        "TestHelpBot.test_bot": {
            "name": "test_bot",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/helloworld/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/help/help.py": {
        "HelpHandler.usage": {
            "name": "usage",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpHandler.handle_message": {
            "name": "handle_message",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/help/test_help.py": {
        "TestHelpBot.test_bot": {
            "name": "test_bot",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/help/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/idonethis/idonethis.py": {
        "make_API_request": {
            "name": "make_API_request",
            "location": 33,
            "return": [],
            "arguments": {
                "endpoint": [],
                "method": [],
                "body": [],
                "params": []
            }
        },
        "api_noop": {
            "name": "api_noop",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "api_list_team": {
            "name": "api_list_team",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "api_show_team": {
            "name": "api_show_team",
            "location": 66,
            "return": [],
            "arguments": {
                "hash_id": []
            }
        },
        "api_show_users": {
            "name": "api_show_users",
            "location": 71,
            "return": [],
            "arguments": {
                "hash_id": []
            }
        },
        "api_list_entries": {
            "name": "api_list_entries",
            "location": 75,
            "return": [],
            "arguments": {
                "team_id": []
            }
        },
        "api_create_entry": {
            "name": "api_create_entry",
            "location": 82,
            "return": [],
            "arguments": {
                "body": [],
                "team_id": []
            }
        },
        "list_teams": {
            "name": "list_teams",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "get_team_hash": {
            "name": "get_team_hash",
            "location": 91,
            "return": [],
            "arguments": {
                "team_name": []
            }
        },
        "team_info": {
            "name": "team_info",
            "location": 98,
            "return": [],
            "arguments": {
                "team_name": []
            }
        },
        "entries_list": {
            "name": "entries_list",
            "location": 105,
            "return": [],
            "arguments": {
                "team_name": []
            }
        },
        "create_entry": {
            "name": "create_entry",
            "location": 127,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "TeamNotFoundException.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "team": []
            }
        },
        "UnknownCommandSyntax.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "detail": []
            }
        },
        "IDoneThisHandler.initialize": {
            "name": "initialize",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "IDoneThisHandler.usage": {
            "name": "usage",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IDoneThisHandler.handle_message": {
            "name": "handle_message",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "IDoneThisHandler.get_response": {
            "name": "get_response",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/idonethis/test_idonethis.py": {
        "TestIDoneThisBot.test_create_entry_default_team": {
            "name": "test_create_entry_default_team",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_create_entry_quoted_team": {
            "name": "test_create_entry_quoted_team",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_create_entry_single_word_team": {
            "name": "test_create_entry_single_word_team",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_bad_key": {
            "name": "test_bad_key",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_list_team": {
            "name": "test_list_team",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_show_team_no_team": {
            "name": "test_show_team_no_team",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_show_team": {
            "name": "test_show_team",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_entries_list": {
            "name": "test_entries_list",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIDoneThisBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/idonethis/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/incident/incident.py": {
        "start_new_incident": {
            "name": "start_new_incident",
            "location": 49,
            "return": [],
            "arguments": {
                "query": [],
                "message": [],
                "bot_handler": []
            }
        },
        "parse_answer": {
            "name": "parse_answer",
            "location": 63,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "generate_ticket_id": {
            "name": "generate_ticket_id",
            "location": 82,
            "return": [],
            "arguments": {
                "storage": []
            }
        },
        "format_incident_for_widget": {
            "name": "format_incident_for_widget",
            "location": 94,
            "return": [],
            "arguments": {
                "ticket_id": [],
                "incident": []
            }
        },
        "format_incident_for_markdown": {
            "name": "format_incident_for_markdown",
            "location": 126,
            "return": [],
            "arguments": {
                "ticket_id": [],
                "incident": []
            }
        },
        "IncidentHandler.usage": {
            "name": "usage",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncidentHandler.handle_message": {
            "name": "handle_message",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "format_incident_for_widget.get_choice": {
            "name": "get_choice",
            "location": 99,
            "return": [],
            "arguments": {
                "code": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/incident/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/incrementor/incrementor.py": {
        "IncrementorHandler.usage": {
            "name": "usage",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncrementorHandler.initialize": {
            "name": "initialize",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "IncrementorHandler.handle_message": {
            "name": "handle_message",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/incrementor/test_incrementor.py": {
        "TestIncrementorBot.test_bot": {
            "name": "test_bot",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIncrementorBot.test_bot_edit_timeout": {
            "name": "test_bot_edit_timeout",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/incrementor/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/jira/jira.py": {
        "make_jira_auth": {
            "name": "make_jira_auth",
            "location": 331,
            "return": [],
            "arguments": {
                "username": [],
                "password": []
            }
        },
        "make_create_json": {
            "name": "make_create_json",
            "location": 343,
            "return": [],
            "arguments": {
                "summary": [],
                "project_key": [],
                "type_name": [],
                "description": [],
                "assignee": [],
                "priority_name": [],
                "labels": [],
                "due_date": []
            }
        },
        "make_edit_json": {
            "name": "make_edit_json",
            "location": 388,
            "return": [],
            "arguments": {
                "summary": [],
                "project_key": [],
                "type_name": [],
                "description": [],
                "assignee": [],
                "priority_name": [],
                "labels": [],
                "due_date": []
            }
        },
        "check_is_editing_something": {
            "name": "check_is_editing_something",
            "location": 436,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "JiraHandler.usage": {
            "name": "usage",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraHandler.initialize": {
            "name": "initialize",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "JiraHandler.jql_search": {
            "name": "jql_search",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "jql_query": []
            }
        },
        "JiraHandler.handle_message": {
            "name": "handle_message",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/jira/test_jira.py": {
        "TestJiraBot._test_invalid_config": {
            "name": "_test_invalid_config",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "invalid_config": [],
                "error_message": []
            }
        },
        "TestJiraBot.test_config_without_username": {
            "name": "test_config_without_username",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_config_without_password": {
            "name": "test_config_without_password",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_config_without_domain": {
            "name": "test_config_without_domain",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_get": {
            "name": "test_get",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_get_error": {
            "name": "test_get_error",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_create": {
            "name": "test_create",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_create_error": {
            "name": "test_create_error",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_edit": {
            "name": "test_edit",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_edit_error": {
            "name": "test_edit_error",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_search": {
            "name": "test_search",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_jql": {
            "name": "test_jql",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_search_url": {
            "name": "test_search_url",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_search_scheme": {
            "name": "test_search_scheme",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_help": {
            "name": "test_help",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJiraBot.test_no_command": {
            "name": "test_no_command",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/jira/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/link_shortener/link_shortener.py": {
        "LinkShortenerHandler.usage": {
            "name": "usage",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkShortenerHandler.initialize": {
            "name": "initialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "LinkShortenerHandler.check_api_key": {
            "name": "check_api_key",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "LinkShortenerHandler.is_invalid_token_error": {
            "name": "is_invalid_token_error",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "response_json": []
            }
        },
        "LinkShortenerHandler.handle_message": {
            "name": "handle_message",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "LinkShortenerHandler.shorten_link": {
            "name": "shorten_link",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "long_url": []
            }
        },
        "LinkShortenerHandler.call_link_shorten_service": {
            "name": "call_link_shorten_service",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "long_url": []
            }
        },
        "LinkShortenerHandler.has_shorten_url": {
            "name": "has_shorten_url",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "response_json": []
            }
        },
        "LinkShortenerHandler.get_shorten_url": {
            "name": "get_shorten_url",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "response_json": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/link_shortener/test_link_shortener.py": {
        "TestLinkShortenerBot._test": {
            "name": "_test",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": []
            }
        },
        "TestLinkShortenerBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_normal": {
            "name": "test_normal",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_no_links": {
            "name": "test_no_links",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_help": {
            "name": "test_help",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLinkShortenerBot.test_exception_when_api_key_is_invalid": {
            "name": "test_exception_when_api_key_is_invalid",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/link_shortener/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/mention/mention.py": {
        "MentionHandler.initialize": {
            "name": "initialize",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "MentionHandler.check_access_token": {
            "name": "check_access_token",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "MentionHandler.usage": {
            "name": "usage",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MentionHandler.handle_message": {
            "name": "handle_message",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "MentionHandler.get_account_id": {
            "name": "get_account_id",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MentionHandler.get_alert_id": {
            "name": "get_alert_id",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": []
            }
        },
        "MentionHandler.get_mentions": {
            "name": "get_mentions",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "alert_id": []
            }
        },
        "MentionHandler.generate_response": {
            "name": "generate_response",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/mention/test_mention.py": {
        "TestMentionBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMentionBot.test_help_query": {
            "name": "test_help_query",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMentionBot.test_get_account_id": {
            "name": "test_get_account_id",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMentionBot.test_get_alert_id": {
            "name": "test_get_alert_id",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMentionBot.test_get_mentions": {
            "name": "test_get_mentions",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMentionBot.test_exception_when_api_key_is_invalid": {
            "name": "test_exception_when_api_key_is_invalid",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/mention/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/merels.py": {
        "Storage.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": []
            }
        },
        "Storage.put": {
            "name": "put",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": [],
                "value": []
            }
        },
        "Storage.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": []
            }
        },
        "MerelsModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "MerelsModel.determine_game_over": {
            "name": "determine_game_over",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "players": []
            }
        },
        "MerelsModel.contains_winning_move": {
            "name": "contains_winning_move",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "MerelsModel.make_move": {
            "name": "make_move",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "move": [],
                "player_number": [],
                "computer_move": []
            }
        },
        "MerelsMessageHandler.parse_board": {
            "name": "parse_board",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "MerelsMessageHandler.get_player_color": {
            "name": "get_player_color",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "turn": []
            }
        },
        "MerelsMessageHandler.alert_move_message": {
            "name": "alert_move_message",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "original_player": [],
                "move_info": []
            }
        },
        "MerelsMessageHandler.game_start_message": {
            "name": "game_start_message",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MerelsHandler.usage": {
            "name": "usage",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MerelsHandler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test_merels.py": {
        "TestMerelsBot.test_no_command": {
            "name": "test_no_command",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.test_static_responses": {
            "name": "test_static_responses",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.test_has_attributes": {
            "name": "test_has_attributes",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.test_parse_board": {
            "name": "test_parse_board",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.test_add_user_to_cache": {
            "name": "test_add_user_to_cache",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.test_setup_game": {
            "name": "test_setup_game",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot.add_user_to_cache": {
            "name": "add_user_to_cache",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bot": []
            }
        },
        "TestMerelsBot.setup_game": {
            "name": "setup_game",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot._get_game_handlers": {
            "name": "_get_game_handlers",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMerelsBot._test_parse_board": {
            "name": "_test_parse_board",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "expected_response": []
            }
        },
        "TestMerelsBot._test_determine_game_over": {
            "name": "_test_determine_game_over",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "players": [],
                "expected_response": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/constants.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/database.py": {
        "MerelsStorage.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": [],
                "storage": []
            }
        },
        "MerelsStorage.update_game": {
            "name": "update_game",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": [],
                "turn": [],
                "x_taken": [],
                "o_taken": [],
                "board": [],
                "hill_uid": [],
                "take_mode": []
            }
        },
        "MerelsStorage.remove_game": {
            "name": "remove_game",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": []
            }
        },
        "MerelsStorage.get_game_data": {
            "name": "get_game_data",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "topic_name": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/game.py": {
        "getInfo": {
            "name": "getInfo",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "getHelp": {
            "name": "getHelp",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "unknown_command": {
            "name": "unknown_command",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "beat": {
            "name": "beat",
            "location": 49,
            "return": [],
            "arguments": {
                "message": [],
                "topic_name": [],
                "merels_storage": []
            }
        },
        "check_take_mode": {
            "name": "check_take_mode",
            "location": 141,
            "return": [],
            "arguments": {
                "response": [],
                "topic_name": [],
                "merels_storage": []
            }
        },
        "check_any_moves": {
            "name": "check_any_moves",
            "location": 158,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "after_event_checkup": {
            "name": "after_event_checkup",
            "location": 173,
            "return": [],
            "arguments": {
                "response": [],
                "topic_name": [],
                "merels_storage": []
            }
        },
        "check_win": {
            "name": "check_win",
            "location": 187,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/game_data.py": {
        "GameData.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "game_data": []
            }
        },
        "GameData.__len__": {
            "name": "__len__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.construct": {
            "name": "construct",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.grid": {
            "name": "grid",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.get_x_piece_possessed_not_on_grid": {
            "name": "get_x_piece_possessed_not_on_grid",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.get_o_piece_possessed_not_on_grid": {
            "name": "get_o_piece_possessed_not_on_grid",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.get_phase": {
            "name": "get_phase",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.switch_turn": {
            "name": "switch_turn",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameData.toggle_take_mode": {
            "name": "toggle_take_mode",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/interface.py": {
        "draw_grid": {
            "name": "draw_grid",
            "location": 14,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "graph_grid": {
            "name": "graph_grid",
            "location": 23,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "construct_grid": {
            "name": "construct_grid",
            "location": 86,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "construct_board": {
            "name": "construct_board",
            "location": 104,
            "return": [],
            "arguments": {
                "grid": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/mechanics.py": {
        "is_in_grid": {
            "name": "is_in_grid",
            "location": 13,
            "return": [],
            "arguments": {
                "vertical_pos": [],
                "horizontal_pos": []
            }
        },
        "is_empty": {
            "name": "is_empty",
            "location": 27,
            "return": [],
            "arguments": {
                "vertical_pos": [],
                "horizontal_pos": [],
                "grid": []
            }
        },
        "is_jump": {
            "name": "is_jump",
            "location": 42,
            "return": [],
            "arguments": {
                "vpos_before": [],
                "hpos_before": [],
                "vpos_after": [],
                "hpos_after": []
            }
        },
        "get_hills_numbers": {
            "name": "get_hills_numbers",
            "location": 70,
            "return": [],
            "arguments": {
                "grid": []
            }
        },
        "move_man_legal": {
            "name": "move_man_legal",
            "location": 93,
            "return": [],
            "arguments": {
                "v1": [],
                "h1": [],
                "v2": [],
                "h2": [],
                "grid": []
            }
        },
        "put_man_legal": {
            "name": "put_man_legal",
            "location": 108,
            "return": [],
            "arguments": {
                "turn": [],
                "v": [],
                "h": [],
                "grid": []
            }
        },
        "take_man_legal": {
            "name": "take_man_legal",
            "location": 121,
            "return": [],
            "arguments": {
                "v": [],
                "h": [],
                "grid": []
            }
        },
        "is_legal_move": {
            "name": "is_legal_move",
            "location": 133,
            "return": [],
            "arguments": {
                "v1": [],
                "h1": [],
                "v2": [],
                "h2": [],
                "turn": [],
                "phase": [],
                "grid": []
            }
        },
        "is_own_piece": {
            "name": "is_own_piece",
            "location": 160,
            "return": [],
            "arguments": {
                "v": [],
                "h": [],
                "turn": [],
                "grid": []
            }
        },
        "is_legal_put": {
            "name": "is_legal_put",
            "location": 173,
            "return": [],
            "arguments": {
                "v": [],
                "h": [],
                "grid": [],
                "phase_number": []
            }
        },
        "is_legal_take": {
            "name": "is_legal_take",
            "location": 186,
            "return": [],
            "arguments": {
                "v": [],
                "h": [],
                "turn": [],
                "grid": [],
                "take_mode": []
            }
        },
        "get_piece": {
            "name": "get_piece",
            "location": 205,
            "return": [],
            "arguments": {
                "turn": [],
                "grid": []
            }
        },
        "who_won": {
            "name": "who_won",
            "location": 223,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "get_phase_number": {
            "name": "get_phase_number",
            "location": 245,
            "return": [],
            "arguments": {
                "grid": [],
                "turn": [],
                "x_pieces_possessed_not_on_grid": [],
                "o_pieces_possessed_not_on_grid": []
            }
        },
        "create_room": {
            "name": "create_room",
            "location": 270,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "display_game": {
            "name": "display_game",
            "location": 292,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "reset_game": {
            "name": "reset_game",
            "location": 321,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "move_man": {
            "name": "move_man",
            "location": 334,
            "return": [],
            "arguments": {
                "topic_name": [],
                "p1": [],
                "p2": [],
                "merels_storage": []
            }
        },
        "put_man": {
            "name": "put_man",
            "location": 374,
            "return": [],
            "arguments": {
                "topic_name": [],
                "v": [],
                "h": [],
                "merels_storage": []
            }
        },
        "take_man": {
            "name": "take_man",
            "location": 412,
            "return": [],
            "arguments": {
                "topic_name": [],
                "v": [],
                "h": [],
                "merels_storage": []
            }
        },
        "update_hill_uid": {
            "name": "update_hill_uid",
            "location": 456,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "update_change_turn": {
            "name": "update_change_turn",
            "location": 480,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "update_toggle_take_mode": {
            "name": "update_toggle_take_mode",
            "location": 504,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "get_take_status": {
            "name": "get_take_status",
            "location": 528,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "can_take_mode": {
            "name": "can_take_mode",
            "location": 542,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        },
        "check_moves": {
            "name": "check_moves",
            "location": 583,
            "return": [],
            "arguments": {
                "turn": [],
                "grid": []
            }
        },
        "can_make_any_move": {
            "name": "can_make_any_move",
            "location": 600,
            "return": [],
            "arguments": {
                "topic_name": [],
                "merels_storage": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/libraries/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/test_constants.py": {
        "CheckIntegrity.test_grid_layout_integrity": {
            "name": "test_grid_layout_integrity",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckIntegrity.test_relative_hills_integrity": {
            "name": "test_relative_hills_integrity",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/test_database.py": {
        "DatabaseTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTest.test_obtain_gamedata": {
            "name": "test_obtain_gamedata",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTest.test_obtain_nonexisting_gamedata": {
            "name": "test_obtain_nonexisting_gamedata",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTest.test_game_session": {
            "name": "test_game_session",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTest.test_remove_game": {
            "name": "test_remove_game",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/test_game.py": {
        "GameTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_command_when_no_game_created_output": {
            "name": "test_command_when_no_game_created_output",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_put_piece_output": {
            "name": "test_put_piece_output",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_not_possible_put_piece_output": {
            "name": "test_not_possible_put_piece_output",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_take_before_put_output": {
            "name": "test_take_before_put_output",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_move_piece_output": {
            "name": "test_move_piece_output",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_not_possible_move_piece_output": {
            "name": "test_not_possible_move_piece_output",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_cannot_make_any_move_output": {
            "name": "test_cannot_make_any_move_output",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_take_before_move_output": {
            "name": "test_take_before_move_output",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_unknown_command": {
            "name": "test_unknown_command",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_take_piece_output": {
            "name": "test_take_piece_output",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_not_possible_take_piece_output": {
            "name": "test_not_possible_take_piece_output",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_win_output": {
            "name": "test_win_output",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/test_interface.py": {
        "BoardLayoutTest.test_empty_layout_arrangement": {
            "name": "test_empty_layout_arrangement",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoardLayoutTest.test_full_layout_arragement": {
            "name": "test_full_layout_arragement",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoardLayoutTest.test_illegal_character_arrangement": {
            "name": "test_illegal_character_arrangement",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParsingTest.test_consistent_parse": {
            "name": "test_consistent_parse",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/test_mechanics.py": {
        "GridTest.test_out_of_grid": {
            "name": "test_out_of_grid",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_jump_and_grids": {
            "name": "test_jump_and_grids",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_jump_special_cases": {
            "name": "test_jump_special_cases",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_not_populated_move": {
            "name": "test_not_populated_move",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_legal_move": {
            "name": "test_legal_move",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_legal_put": {
            "name": "test_legal_put",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_legal_take": {
            "name": "test_legal_take",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_own_piece": {
            "name": "test_own_piece",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridTest.test_can_make_any_move": {
            "name": "test_can_make_any_move",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HillsTest.test_unchanged_hills": {
            "name": "test_unchanged_hills",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HillsTest.test_no_diagonal_hills": {
            "name": "test_no_diagonal_hills",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseTest.test_new_game_phase": {
            "name": "test_new_game_phase",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/merels/test/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/monkeytestit.py": {
        "MonkeyTestitBot.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonkeyTestitBot.usage": {
            "name": "usage",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonkeyTestitBot.initialize": {
            "name": "initialize",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "MonkeyTestitBot.handle_message": {
            "name": "handle_message",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/test_monkeytestit.py": {
        "TestMonkeyTestitBot.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMonkeyTestitBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMonkeyTestitBot.test_website_fail": {
            "name": "test_website_fail",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMonkeyTestitBot.test_website_success": {
            "name": "test_website_success",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/lib/extract.py": {
        "fetch": {
            "name": "fetch",
            "location": 11,
            "return": [],
            "arguments": {
                "options": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/lib/parse.py": {
        "execute": {
            "name": "execute",
            "location": 10,
            "return": [],
            "arguments": {
                "message": [],
                "apikey": []
            }
        },
        "failed": {
            "name": "failed",
            "location": 71,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/lib/report.py": {
        "compose": {
            "name": "compose",
            "location": 7,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "print_more_info_url": {
            "name": "print_more_info_url",
            "location": 41,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "print_test_id": {
            "name": "print_test_id",
            "location": 54,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "print_failures_checkers": {
            "name": "print_failures_checkers",
            "location": 63,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "get_enabled_checkers": {
            "name": "get_enabled_checkers",
            "location": 91,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "print_enabled_checkers": {
            "name": "print_enabled_checkers",
            "location": 108,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "print_status": {
            "name": "print_status",
            "location": 121,
            "return": [],
            "arguments": {
                "results": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/monkeytestit/lib/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/salesforce/salesforce.py": {
        "get_help_text": {
            "name": "get_help_text",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "format_result": {
            "name": "format_result",
            "location": 44,
            "return": [],
            "arguments": {
                "result": [],
                "exclude_keys": [],
                "force_keys": [],
                "rank_output": [],
                "show_all_keys": []
            }
        },
        "query_salesforce": {
            "name": "query_salesforce",
            "location": 76,
            "return": [],
            "arguments": {
                "arg": [],
                "salesforce": [],
                "command": []
            }
        },
        "get_salesforce_link_details": {
            "name": "get_salesforce_link_details",
            "location": 120,
            "return": [],
            "arguments": {
                "link": [],
                "sf": []
            }
        },
        "SalesforceHandler.usage": {
            "name": "usage",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SalesforceHandler.get_salesforce_response": {
            "name": "get_salesforce_response",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SalesforceHandler.initialize": {
            "name": "initialize",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "SalesforceHandler.handle_message": {
            "name": "handle_message",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/salesforce/test_salesforce.py": {
        "mock_salesforce_query": {
            "name": "mock_salesforce_query",
            "location": 11,
            "return": [],
            "arguments": {
                "test_name": [],
                "bot_name": []
            }
        },
        "mock_salesforce_auth": {
            "name": "mock_salesforce_auth",
            "location": 21,
            "return": [],
            "arguments": {
                "is_success": []
            }
        },
        "mock_salesforce_commands_types": {
            "name": "mock_salesforce_commands_types",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 66,
            "return": [],
            "arguments": {
                "arg": [],
                "sf": [],
                "command": []
            }
        },
        "TestSalesforceBot._test": {
            "name": "_test",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "test_name": [],
                "message": [],
                "response": [],
                "auth_success": []
            }
        },
        "TestSalesforceBot._test_initialize": {
            "name": "_test_initialize",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "auth_success": []
            }
        },
        "TestSalesforceBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_one_result": {
            "name": "test_one_result",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_multiple_results": {
            "name": "test_multiple_results",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_arg_show": {
            "name": "test_arg_show",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_no_results": {
            "name": "test_no_results",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_rank_and_force_keys": {
            "name": "test_rank_and_force_keys",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_limit_arg": {
            "name": "test_limit_arg",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_help": {
            "name": "test_help",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_bad_auth": {
            "name": "test_bad_auth",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_callback": {
            "name": "test_callback",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_link_normal": {
            "name": "test_link_normal",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_link_invalid": {
            "name": "test_link_invalid",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSalesforceBot.test_link_no_results": {
            "name": "test_link_no_results",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/salesforce/utils.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/salesforce/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/stack_overflow/stack_overflow.py": {
        "StackOverflowHandler.usage": {
            "name": "usage",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackOverflowHandler.handle_message": {
            "name": "handle_message",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "StackOverflowHandler.get_bot_stackoverflow_response": {
            "name": "get_bot_stackoverflow_response",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/stack_overflow/test_stack_overflow.py": {
        "TestStackoverflowBot.test_bot": {
            "name": "test_bot",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/stack_overflow/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/susi/susi.py": {
        "SusiHandler.usage": {
            "name": "usage",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SusiHandler.handle_message": {
            "name": "handle_message",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/susi/test_susi.py": {
        "TestSusiBot.test_help": {
            "name": "test_help",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSusiBot.test_issue": {
            "name": "test_issue",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/susi/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/tictactoe/test_tictactoe.py": {
        "TestTicTacToeBot.test_get_value": {
            "name": "test_get_value",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_get_value": {
            "name": "_test_get_value",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "position": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_determine_game_over_with_win": {
            "name": "test_determine_game_over_with_win",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_determine_game_over_with_win": {
            "name": "_test_determine_game_over_with_win",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "players": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_determine_game_over_with_draw": {
            "name": "test_determine_game_over_with_draw",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_determine_game_over_with_draw": {
            "name": "_test_determine_game_over_with_draw",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "players": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_board_is_full": {
            "name": "test_board_is_full",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_board_is_full": {
            "name": "_test_board_is_full",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_contains_winning_move": {
            "name": "test_contains_winning_move",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_contains_winning_move": {
            "name": "_test_contains_winning_move",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_get_locations_of_char": {
            "name": "test_get_locations_of_char",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_get_locations_of_char": {
            "name": "_test_get_locations_of_char",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_is_valid_move": {
            "name": "test_is_valid_move",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_is_valid_move": {
            "name": "_test_is_valid_move",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "move": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_player_color": {
            "name": "test_player_color",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_player_color": {
            "name": "_test_player_color",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "turn": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.test_static_responses": {
            "name": "test_static_responses",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot.test_has_attributes": {
            "name": "test_has_attributes",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot.test_parse_board": {
            "name": "test_parse_board",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._test_parse_board": {
            "name": "_test_parse_board",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "expected_response": []
            }
        },
        "TestTicTacToeBot.add_user_to_cache": {
            "name": "add_user_to_cache",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bot": []
            }
        },
        "TestTicTacToeBot.setup_game": {
            "name": "setup_game",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTicTacToeBot._get_game_handlers": {
            "name": "_get_game_handlers",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/tictactoe/tictactoe.py": {
        "coords_from_command": {
            "name": "coords_from_command",
            "location": 296,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "TicTacToeModel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TicTacToeModel.get_value": {
            "name": "get_value",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "position": []
            }
        },
        "TicTacToeModel.determine_game_over": {
            "name": "determine_game_over",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "players": []
            }
        },
        "TicTacToeModel.board_is_full": {
            "name": "board_is_full",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TicTacToeModel.contains_winning_move": {
            "name": "contains_winning_move",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TicTacToeModel.get_locations_of_char": {
            "name": "get_locations_of_char",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "char": []
            }
        },
        "TicTacToeModel.two_blanks": {
            "name": "two_blanks",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "triplet": [],
                "board": []
            }
        },
        "TicTacToeModel.computer_move": {
            "name": "computer_move",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "player_number": []
            }
        },
        "TicTacToeModel.is_valid_move": {
            "name": "is_valid_move",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "move": []
            }
        },
        "TicTacToeModel.make_move": {
            "name": "make_move",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "move": [],
                "player_number": [],
                "computer_move": []
            }
        },
        "TicTacToeMessageHandler.parse_row": {
            "name": "parse_row",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "row_num": []
            }
        },
        "TicTacToeMessageHandler.parse_board": {
            "name": "parse_board",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TicTacToeMessageHandler.get_player_color": {
            "name": "get_player_color",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "turn": []
            }
        },
        "TicTacToeMessageHandler.alert_move_message": {
            "name": "alert_move_message",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "original_player": [],
                "move_info": []
            }
        },
        "TicTacToeMessageHandler.game_start_message": {
            "name": "game_start_message",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ticTacToeHandler.usage": {
            "name": "usage",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ticTacToeHandler.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/tictactoe/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trello/test_trello.py": {
        "TestTrelloBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_bot_quit_with_invalid_config": {
            "name": "test_bot_quit_with_invalid_config",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_invalid_command": {
            "name": "test_invalid_command",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_list_commands_command": {
            "name": "test_list_commands_command",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_get_all_boards_command": {
            "name": "test_get_all_boards_command",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_get_all_cards_command": {
            "name": "test_get_all_cards_command",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_get_all_checklists_command": {
            "name": "test_get_all_checklists_command",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_get_all_lists_command": {
            "name": "test_get_all_lists_command",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_command_exceptions": {
            "name": "test_command_exceptions",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTrelloBot.test_command_invalid_arguments": {
            "name": "test_command_invalid_arguments",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trello/trello.py": {
        "TrelloHandler.initialize": {
            "name": "initialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "TrelloHandler.check_access_token": {
            "name": "check_access_token",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "TrelloHandler.usage": {
            "name": "usage",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrelloHandler.handle_message": {
            "name": "handle_message",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "TrelloHandler.get_all_supported_commands": {
            "name": "get_all_supported_commands",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrelloHandler.get_all_boards": {
            "name": "get_all_boards",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrelloHandler.get_board_descs": {
            "name": "get_board_descs",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "boards": []
            }
        },
        "TrelloHandler.get_all_cards": {
            "name": "get_all_cards",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TrelloHandler.get_all_checklists": {
            "name": "get_all_checklists",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TrelloHandler.get_all_lists": {
            "name": "get_all_lists",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trello/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trivia_quiz/test_trivia_quiz.py": {
        "TestTriviaQuizBot.get_test_quiz": {
            "name": "get_test_quiz",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot._test": {
            "name": "_test",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "fixture": []
            }
        },
        "TestTriviaQuizBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_bot_new_question": {
            "name": "test_bot_new_question",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_question_not_available": {
            "name": "test_question_not_available",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_fix_quotes": {
            "name": "test_fix_quotes",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_invalid_answer": {
            "name": "test_invalid_answer",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_invalid_quiz_id": {
            "name": "test_invalid_quiz_id",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_answers": {
            "name": "test_answers",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_update_quiz": {
            "name": "test_update_quiz",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_get_quiz_from_id": {
            "name": "test_get_quiz_from_id",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_handle_answer": {
            "name": "test_handle_answer",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTriviaQuizBot.test_handle_answer_three_failed_attempts": {
            "name": "test_handle_answer_three_failed_attempts",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trivia_quiz/trivia_quiz.py": {
        "get_quiz_from_id": {
            "name": "get_quiz_from_id",
            "location": 62,
            "return": [],
            "arguments": {
                "quiz_id": [],
                "bot_handler": []
            }
        },
        "start_new_quiz": {
            "name": "start_new_quiz",
            "location": 66,
            "return": [],
            "arguments": {
                "message": [],
                "bot_handler": []
            }
        },
        "parse_answer": {
            "name": "parse_answer",
            "location": 75,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "get_trivia_quiz": {
            "name": "get_trivia_quiz",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "get_trivia_payload": {
            "name": "get_trivia_payload",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "fix_quotes": {
            "name": "fix_quotes",
            "location": 111,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "get_quiz_from_payload": {
            "name": "get_quiz_from_payload",
            "location": 123,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "generate_quiz_id": {
            "name": "generate_quiz_id",
            "location": 144,
            "return": [],
            "arguments": {
                "storage": []
            }
        },
        "format_quiz_for_widget": {
            "name": "format_quiz_for_widget",
            "location": 156,
            "return": [],
            "arguments": {
                "quiz_id": [],
                "quiz": []
            }
        },
        "format_quiz_for_markdown": {
            "name": "format_quiz_for_markdown",
            "location": 190,
            "return": [],
            "arguments": {
                "quiz_id": [],
                "quiz": []
            }
        },
        "update_quiz": {
            "name": "update_quiz",
            "location": 214,
            "return": [],
            "arguments": {
                "quiz": [],
                "quiz_id": [],
                "bot_handler": []
            }
        },
        "build_response": {
            "name": "build_response",
            "location": 218,
            "return": [],
            "arguments": {
                "is_correct": [],
                "num_answers": []
            }
        },
        "handle_answer": {
            "name": "handle_answer",
            "location": 229,
            "return": [],
            "arguments": {
                "quiz": [],
                "option": [],
                "quiz_id": [],
                "bot_handler": [],
                "sender_name": []
            }
        },
        "TriviaQuizHandler.usage": {
            "name": "usage",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TriviaQuizHandler.handle_message": {
            "name": "handle_message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "format_quiz_for_widget.get_choice": {
            "name": "get_choice",
            "location": 163,
            "return": [],
            "arguments": {
                "letter": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/trivia_quiz/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/twitpost/test_twitpost.py": {
        "TestTwitpostBot.test_bot_usage": {
            "name": "test_bot_usage",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTwitpostBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTwitpostBot.test_help": {
            "name": "test_help",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTwitpostBot.test_tweet": {
            "name": "test_tweet",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "mockedarg": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/twitpost/twitpost.py": {
        "TwitpostBot.usage": {
            "name": "usage",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwitpostBot.initialize": {
            "name": "initialize",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "TwitpostBot.handle_message": {
            "name": "handle_message",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "TwitpostBot.post": {
            "name": "post",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/twitpost/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/virtual_fs/test_virtual_fs.py": {
        "TestVirtualFsBot.test_multiple_recipient_conversation": {
            "name": "test_multiple_recipient_conversation",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualFsBot.test_sample_conversation_help": {
            "name": "test_sample_conversation_help",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualFsBot.test_sample_conversation": {
            "name": "test_sample_conversation",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualFsBot.test_commands_1": {
            "name": "test_commands_1",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestVirtualFsBot.test_commands_2": {
            "name": "test_commands_2",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/virtual_fs/virtual_fs.py": {
        "get_help": {
            "name": "get_help",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "sample_conversation": {
            "name": "sample_conversation",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "get_commands": {
            "name": "get_commands",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "fs_command": {
            "name": "fs_command",
            "location": 139,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "cmd": []
            }
        },
        "syntax_help": {
            "name": "syntax_help",
            "location": 165,
            "return": [],
            "arguments": {
                "cmd_name": []
            }
        },
        "fs_new": {
            "name": "fs_new",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "fs_help": {
            "name": "fs_help",
            "location": 181,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "cmd_name": []
            }
        },
        "fs_mkdir": {
            "name": "fs_mkdir",
            "location": 185,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "fs_ls": {
            "name": "fs_ls",
            "location": 203,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "fs_pwd": {
            "name": "fs_pwd",
            "location": 222,
            "return": [],
            "arguments": {
                "fs": [],
                "user": []
            }
        },
        "fs_rm": {
            "name": "fs_rm",
            "location": 228,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "fs_rmdir": {
            "name": "fs_rmdir",
            "location": 246,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "fs_write": {
            "name": "fs_write",
            "location": 267,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": [],
                "content": []
            }
        },
        "fs_read": {
            "name": "fs_read",
            "location": 286,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "fs_cd": {
            "name": "fs_cd",
            "location": 300,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "fn": []
            }
        },
        "make_path": {
            "name": "make_path",
            "location": 314,
            "return": [],
            "arguments": {
                "fs": [],
                "user": [],
                "leaf": []
            }
        },
        "nice_path": {
            "name": "nice_path",
            "location": 328,
            "return": [],
            "arguments": {
                "fs": [],
                "path": []
            }
        },
        "get_directory": {
            "name": "get_directory",
            "location": 340,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "directory": {
            "name": "directory",
            "location": 348,
            "return": [],
            "arguments": {
                "fns": []
            }
        },
        "text_file": {
            "name": "text_file",
            "location": 352,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "is_directory": {
            "name": "is_directory",
            "location": 356,
            "return": [],
            "arguments": {
                "fs": [],
                "fn": []
            }
        },
        "VirtualFsHandler.usage": {
            "name": "usage",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VirtualFsHandler.handle_message": {
            "name": "handle_message",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/virtual_fs/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/weather/test_weather.py": {
        "TestWeatherBot._test": {
            "name": "_test",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "fixture": []
            }
        },
        "TestWeatherBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWeatherBot.test_bot": {
            "name": "test_bot",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/weather/weather.py": {
        "format_response": {
            "name": "format_response",
            "location": 56,
            "return": [],
            "arguments": {
                "text": [],
                "city": [],
                "response_pattern": []
            }
        },
        "to_celsius": {
            "name": "to_celsius",
            "location": 67,
            "return": [],
            "arguments": {
                "temp_kelvin": []
            }
        },
        "to_fahrenheit": {
            "name": "to_fahrenheit",
            "location": 71,
            "return": [],
            "arguments": {
                "temp_kelvin": []
            }
        },
        "WeatherHandler.initialize": {
            "name": "initialize",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "WeatherHandler.check_api_key": {
            "name": "check_api_key",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "WeatherHandler.usage": {
            "name": "usage",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeatherHandler.handle_message": {
            "name": "handle_message",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/weather/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/wikipedia/test_wikipedia.py": {
        "TestWikipediaBot.test_bot": {
            "name": "test_bot",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/wikipedia/wikipedia.py": {
        "WikipediaHandler.usage": {
            "name": "usage",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WikipediaHandler.handle_message": {
            "name": "handle_message",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "WikipediaHandler.get_bot_wiki_response": {
            "name": "get_bot_wiki_response",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/wikipedia/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/witai/test_witai.py": {
        "mock_handle": {
            "name": "mock_handle",
            "location": 38,
            "return": [],
            "arguments": {
                "res": []
            }
        },
        "TestWitaiBot.test_normal": {
            "name": "test_normal",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWitaiBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/witai/witai.py": {
        "get_handle": {
            "name": "get_handle",
            "location": 66,
            "return": [],
            "arguments": {
                "location": []
            }
        },
        "WitaiHandler.usage": {
            "name": "usage",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WitaiHandler.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "WitaiHandler.handle_message": {
            "name": "handle_message",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/witai/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/xkcd/test_xkcd.py": {
        "TestXkcdBot.test_latest_command": {
            "name": "test_latest_command",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_random_command": {
            "name": "test_random_command",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_numeric_comic_id_command_1": {
            "name": "test_numeric_comic_id_command_1",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestXkcdBot.test_invalid_comic_ids": {
            "name": "test_invalid_comic_ids",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "mock_logging_exception": []
            }
        },
        "TestXkcdBot.test_help_responses": {
            "name": "test_help_responses",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/xkcd/xkcd.py": {
        "get_xkcd_bot_response": {
            "name": "get_xkcd_bot_response",
            "location": 59,
            "return": [],
            "arguments": {
                "message": [],
                "quoted_name": []
            }
        },
        "fetch_xkcd_query": {
            "name": "fetch_xkcd_query",
            "location": 98,
            "return": [],
            "arguments": {
                "mode": [],
                "comic_id": []
            }
        },
        "XkcdHandler.usage": {
            "name": "usage",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XkcdHandler.handle_message": {
            "name": "handle_message",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/xkcd/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/yoda/test_yoda.py": {
        "TestYodaBot._test": {
            "name": "_test",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "response": [],
                "fixture": []
            }
        },
        "TestYodaBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYodaBot.test_bot": {
            "name": "test_bot",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/yoda/yoda.py": {
        "YodaSpeakHandler.initialize": {
            "name": "initialize",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "YodaSpeakHandler.usage": {
            "name": "usage",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YodaSpeakHandler.handle_message": {
            "name": "handle_message",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "YodaSpeakHandler.send_to_yoda_api": {
            "name": "send_to_yoda_api",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "YodaSpeakHandler.format_input": {
            "name": "format_input",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "original_content": []
            }
        },
        "YodaSpeakHandler.handle_input": {
            "name": "handle_input",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "YodaSpeakHandler.send_message": {
            "name": "send_message",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": [],
                "message": [],
                "stream": [],
                "subject": []
            }
        },
        "YodaSpeakHandler.is_help": {
            "name": "is_help",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "original_content": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/yoda/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/youtube/test_youtube.py": {
        "TestYoutubeBot.test_bot_responds_to_empty_message": {
            "name": "test_bot_responds_to_empty_message",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_single": {
            "name": "test_single",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_invalid_key": {
            "name": "test_invalid_key",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_unknown_error": {
            "name": "test_unknown_error",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_multiple": {
            "name": "test_multiple",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_noresult": {
            "name": "test_noresult",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_help": {
            "name": "test_help",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestYoutubeBot.test_connection_error": {
            "name": "test_connection_error",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/youtube/youtube.py": {
        "search_youtube": {
            "name": "search_youtube",
            "location": 57,
            "return": [],
            "arguments": {
                "query": [],
                "key": [],
                "region": [],
                "max_results": []
            }
        },
        "get_command_query": {
            "name": "get_command_query",
            "location": 86,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "get_bot_response": {
            "name": "get_bot_response",
            "location": 96,
            "return": [],
            "arguments": {
                "query": [],
                "command": [],
                "config_info": []
            }
        },
        "YoutubeHandler.usage": {
            "name": "usage",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YoutubeHandler.initialize": {
            "name": "initialize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "bot_handler": []
            }
        },
        "YoutubeHandler.handle_message": {
            "name": "handle_message",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/bots/youtube/__init__.py": {},
    "python-zulip-api-main/zulip_bots/zulip_bots/tests/test_finder.py": {
        "FinderTestCase.test_resolve_bot_path": {
            "name": "test_resolve_bot_path",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/tests/test_lib.py": {
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.get_profile": {
            "name": "get_profile",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeClient.update_storage": {
            "name": "update_storage",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "FakeClient.get_storage": {
            "name": "get_storage",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "FakeClient.send_message": {
            "name": "send_message",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "FakeClient.upload_file": {
            "name": "upload_file",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "FakeBotHandler.usage": {
            "name": "usage",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeBotHandler.handle_message": {
            "name": "handle_message",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "LibTest.test_basics": {
            "name": "test_basics",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_state_handler": {
            "name": "test_state_handler",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_state_handler_by_mock": {
            "name": "test_state_handler_by_mock",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_react": {
            "name": "test_react",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_send_reply": {
            "name": "test_send_reply",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_content_and_full_content": {
            "name": "test_content_and_full_content",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_run_message_handler_for_bot": {
            "name": "test_run_message_handler_for_bot",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_upload_file": {
            "name": "test_upload_file",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_upload_file_from_path": {
            "name": "test_upload_file_from_path",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_extract_query_without_mention": {
            "name": "test_extract_query_without_mention",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_is_private_message_but_not_group_pm": {
            "name": "test_is_private_message_but_not_group_pm",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest._create_client_and_handler_for_file_upload": {
            "name": "_create_client_and_handler_for_file_upload",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LibTest.test_run_message_handler_for_bot.call_on_each_event_mock": {
            "name": "call_on_each_event_mock",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "event_types": [],
                "narrow": []
            }
        },
        "LibTest.test_run_message_handler_for_bot.call_on_each_event_mock.test_message": {
            "name": "test_message",
            "location": 174,
            "return": [],
            "arguments": {
                "message": [],
                "flags": []
            }
        }
    },
    "python-zulip-api-main/zulip_bots/zulip_bots/tests/test_run.py": {
        "TestDefaultArguments.test_argument_parsing_with_bot_name": {
            "name": "test_argument_parsing_with_bot_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_argument_parsing_with_bot_path": {
            "name": "test_argument_parsing_with_bot_path",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_argument_parsing_with_zulip_bot_registry": {
            "name": "test_argument_parsing_with_zulip_bot_registry",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "mock_run_message_handler_for_bot": []
            }
        },
        "TestDefaultArguments.test_adding_bot_parent_dir_to_sys_path_when_bot_name_specified": {
            "name": "test_adding_bot_parent_dir_to_sys_path_when_bot_name_specified",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultArguments.test_adding_bot_parent_dir_to_sys_path_when_bot_path_specified": {
            "name": "test_adding_bot_parent_dir_to_sys_path_when_bot_path_specified",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "mock_os_path_isfile": []
            }
        },
        "TestDefaultArguments._test_adding_bot_parent_dir_to_sys_path": {
            "name": "_test_adding_bot_parent_dir_to_sys_path",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "bot_qualifier": [],
                "bot_dir_path": []
            }
        },
        "TestDefaultArguments.test_run_bot_by_module_name": {
            "name": "test_run_bot_by_module_name",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "mock_os_path_isfile": []
            }
        },
        "TestBotLib.test_extract_query_without_mention": {
            "name": "test_extract_query_without_mention",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBotLib.test_extract_query_without_mention.test_message": {
            "name": "test_message",
            "location": 135,
            "return": [],
            "arguments": {
                "name": [],
                "message": [],
                "expected_return": []
            }
        }
    },
    "python-zulip-api-main/zulip_botserver/setup.py": {},
    "python-zulip-api-main/zulip_botserver/tests/server_test_lib.py": {
        "BotServerTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTestCase.assert_bot_server_response": {
            "name": "assert_bot_server_response",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "mock_ExternalBotHandler": [],
                "available_bots": [],
                "bots_config": [],
                "bot_handlers": [],
                "event": [],
                "expected_response": [],
                "check_success": [],
                "third_party_bot_conf": []
            }
        }
    },
    "python-zulip-api-main/zulip_botserver/tests/test_server.py": {
        "BotServerTests.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_successful_request": {
            "name": "test_successful_request",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_successful_request_from_two_bots": {
            "name": "test_successful_request_from_two_bots",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_request_for_unkown_bot": {
            "name": "test_request_for_unkown_bot",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_wrong_bot_token": {
            "name": "test_wrong_bot_token",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_wrong_bot_credentials": {
            "name": "test_wrong_bot_credentials",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "mock_StateHandler": [],
                "mock_LoggingError": []
            }
        },
        "BotServerTests.test_argument_parsing_defaults": {
            "name": "test_argument_parsing_defaults",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_read_config_from_env_vars": {
            "name": "test_read_config_from_env_vars",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_read_config_file": {
            "name": "test_read_config_file",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_load_lib_modules": {
            "name": "test_load_lib_modules",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotServerTests.test_load_from_registry": {
            "name": "test_load_from_registry",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "mock_app": []
            }
        },
        "BotServerTests.MockMessageHandler.handle_message": {
            "name": "handle_message",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "bot_handler": []
            }
        },
        "BotServerTests.MockLibModule.handler_class": {
            "name": "handler_class",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-zulip-api-main/zulip_botserver/tests/__init__.py": {},
    "python-zulip-api-main/zulip_botserver/zulip_botserver/input_parameters.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip_botserver/zulip_botserver/server.py": {
        "read_config_section": {
            "name": "read_config_section",
            "location": 23,
            "return": [],
            "arguments": {
                "parser": [],
                "section": []
            }
        },
        "read_config_from_env_vars": {
            "name": "read_config_from_env_vars",
            "location": 33,
            "return": [],
            "arguments": {
                "bot_name": []
            }
        },
        "read_config_file": {
            "name": "read_config_file",
            "location": 65,
            "return": [],
            "arguments": {
                "config_file_path": [],
                "bot_name": []
            }
        },
        "parse_config_file": {
            "name": "parse_config_file",
            "location": 105,
            "return": [],
            "arguments": {
                "config_file_path": []
            }
        },
        "load_lib_modules": {
            "name": "load_lib_modules",
            "location": 114,
            "return": [],
            "arguments": {
                "available_bots": []
            }
        },
        "load_bot_handlers": {
            "name": "load_bot_handlers",
            "location": 139,
            "return": [],
            "arguments": {
                "available_bots": [],
                "bot_lib_modules": [],
                "bots_config": [],
                "third_party_bot_conf": []
            }
        },
        "init_message_handlers": {
            "name": "init_message_handlers",
            "location": 161,
            "return": [],
            "arguments": {
                "available_bots": [],
                "bots_lib_modules": [],
                "bot_handlers": []
            }
        },
        "handle_bot": {
            "name": "handle_bot",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 220,
            "return": [],
            "arguments": {}
        }
    },
    "python-zulip-api-main/zulip_botserver/zulip_botserver/__init__.py": {}
}
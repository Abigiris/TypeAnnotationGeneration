{
    "pytorch-crf-master/pycrf/eval.py": {
        "iob_to_spans": {
            "name": "iob_to_spans",
            "location": 14,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "sequence": [],
                "lut": [],
                "strict_iob2": []
            }
        },
        "iobes_to_spans": {
            "name": "iobes_to_spans",
            "location": 60,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "sequence": [],
                "lut": [],
                "strict_iob2": []
            }
        },
        "_detect_label_scheme": {
            "name": "_detect_label_scheme",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "labels": []
            }
        },
        "ModelStats.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels_itos": [],
                "epoch": [],
                "loss": []
            }
        },
        "ModelStats.score": {
            "name": "score",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelStats.__str__": {
            "name": "__str__",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelStats.reset": {
            "name": "reset",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelStats.update": {
            "name": "update",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gold_labels": [],
                "predicted": []
            }
        }
    },
    "pytorch-crf-master/pycrf/exceptions.py": {
        "LearnerInitializationError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing_args": [],
                "unknown_args": []
            }
        },
        "ArgParsingError.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "pytorch-crf-master/pycrf/label.py": {
        "label_data": {
            "name": "label_data",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [],
                "model": [],
                "device": []
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "pytorch-crf-master/pycrf/logging.py": {
        "_format_duration": {
            "name": "_format_duration",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": []
            }
        },
        "TrainLogger.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_examples": [],
                "log_interval": [],
                "verbose": [],
                "log_dir": [],
                "results_file": [],
                "log_weights": []
            }
        },
        "TrainLogger.scalar_summary": {
            "name": "scalar_summary",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "value": [],
                "step": []
            }
        },
        "TrainLogger.histo_summary": {
            "name": "histo_summary",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "values": [],
                "step": [],
                "bins": []
            }
        },
        "TrainLogger.start_epoch": {
            "name": "start_epoch",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": []
            }
        },
        "TrainLogger.end_epoch": {
            "name": "end_epoch",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainLogger.end_train": {
            "name": "end_train",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validation": []
            }
        },
        "TrainLogger.record": {
            "name": "record",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [],
                "iteration": []
            }
        },
        "TrainLogger.append_eval_stats": {
            "name": "append_eval_stats",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_stats": [],
                "validation": []
            }
        },
        "TrainLogger.update": {
            "name": "update",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": [],
                "iteration": [],
                "loss": [],
                "params": [],
                "lrs": []
            }
        },
        "LRFinderLogger.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "LRFinderLogger.__del__": {
            "name": "__del__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRFinderLogger.update": {
            "name": "update",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr": [],
                "loss": []
            }
        }
    },
    "pytorch-crf-master/pycrf/optim.py": {
        "CLOptim.lr": {
            "name": "lr",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "CLOptim.cl_opts": {
            "name": "cl_opts",
            "location": 29,
            "return": [],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "CLOptim.cl_init": {
            "name": "cl_init",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "params": [],
                "opts": []
            }
        },
        "CLOptim.iteration_update": {
            "name": "iteration_update",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "CLOptim.epoch_update": {
            "name": "epoch_update",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "CLOptim.epoch_prepare": {
            "name": "epoch_prepare",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_size": [],
                "batch_size": []
            }
        },
        "CLOptim.update_param_groups": {
            "name": "update_param_groups",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "opts": []
            }
        },
        "AdaGrad.cl_opts": {
            "name": "cl_opts",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "AdaGrad.cl_init": {
            "name": "cl_init",
            "location": 98,
            "return": [
                "_TAdaGrad@@AdaGrad@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAdaGrad]"
                ],
                "params": [],
                "opts": []
            }
        },
        "AdaDelta.cl_opts": {
            "name": "cl_opts",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "AdaDelta.cl_init": {
            "name": "cl_init",
            "location": 147,
            "return": [
                "_TAdaDelta@@AdaDelta@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAdaDelta]"
                ],
                "params": [],
                "opts": []
            }
        },
        "RMSProp.cl_opts": {
            "name": "cl_opts",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "RMSProp.cl_init": {
            "name": "cl_init",
            "location": 208,
            "return": [
                "_TRMSProp@@RMSProp@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TRMSProp]"
                ],
                "params": [],
                "opts": []
            }
        },
        "Adam.cl_opts": {
            "name": "cl_opts",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "Adam.cl_init": {
            "name": "cl_init",
            "location": 272,
            "return": [
                "_TAdam@@Adam@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TAdam]"
                ],
                "params": [],
                "opts": []
            }
        },
        "SparseAdam.cl_opts": {
            "name": "cl_opts",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "SparseAdam.cl_init": {
            "name": "cl_init",
            "location": 324,
            "return": [
                "_TSparseAdam@@SparseAdam@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSparseAdam]"
                ],
                "params": [],
                "opts": []
            }
        },
        "SGD.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "cycle_len": [],
                "cycle_mult": []
            }
        },
        "SGD.cl_opts": {
            "name": "cl_opts",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "SGD.cl_init": {
            "name": "cl_init",
            "location": 400,
            "return": [
                "_TSGD@@SGD@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSGD]"
                ],
                "params": [],
                "opts": []
            }
        },
        "SGD._cyclic_decay": {
            "name": "_cyclic_decay",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "SGD.iteration_update": {
            "name": "iteration_update",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "SGD.epoch_update": {
            "name": "epoch_update",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": []
            }
        },
        "SGD.epoch_prepare": {
            "name": "epoch_prepare",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_size": [],
                "batch_size": []
            }
        }
    },
    "pytorch-crf-master/pycrf/opts.py": {
        "help_opts": {
            "name": "help_opts",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "base_opts": {
            "name": "base_opts",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "label_opts": {
            "name": "label_opts",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "train_opts": {
            "name": "train_opts",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 185,
            "return": [
                "Tuple[(argparse.Namespace, ArgumentParser)]"
            ],
            "arguments": {
                "args": [],
                "options": []
            }
        },
        "parse_all": {
            "name": "parse_all",
            "location": 201,
            "return": [
                "Any"
            ],
            "arguments": {
                "args": [],
                "initial_opts": [],
                "parser": []
            }
        },
        "get_device": {
            "name": "get_device",
            "location": 213,
            "return": [
                "Any"
            ],
            "arguments": {
                "opts": []
            }
        },
        "ArgumentParser.error": {
            "name": "error",
            "location": 180,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "pytorch-crf-master/pycrf/train.py": {
        "_get_checkpoint_path": {
            "name": "_get_checkpoint_path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "epoch": []
            }
        },
        "save_checkpoint": {
            "name": "save_checkpoint",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "optimizer": [],
                "path": [],
                "epoch": []
            }
        },
        "load_checkpoint": {
            "name": "load_checkpoint",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "path": [],
                "epoch": [],
                "optimizer": []
            }
        },
        "save_model": {
            "name": "save_model",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "path": [],
                "epoch": []
            }
        },
        "main": {
            "name": "main",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Learner.reset_model": {
            "name": "reset_model",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.save_train_state": {
            "name": "save_train_state",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Learner.build": {
            "name": "build",
            "location": 177,
            "return": [
                "_TLearner@@Learner@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLearner]"
                ]
            }
        },
        "Learner.__getattr__": {
            "name": "__getattr__",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Learner.__setattr__": {
            "name": "__setattr__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Learner.fit_epoch": {
            "name": "fit_epoch",
            "location": 206,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "dataset": [],
                "epoch": [],
                "logger": [],
                "n": []
            }
        },
        "Learner.fit": {
            "name": "fit",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.find_lr": {
            "name": "find_lr",
            "location": 345,
            "return": [
                "Tuple[(Any, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "bounds": [],
                "iterations": [],
                "smoothing": []
            }
        }
    },
    "pytorch-crf-master/pycrf/utils.py": {
        "_parse_data_path": {
            "name": "_parse_data_path",
            "location": 6,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "path": [
                    "_T0@@"
                ]
            }
        },
        "in_ipynb": {
            "name": "in_ipynb",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "pytorch-crf-master/pycrf/__init__.py": {},
    "pytorch-crf-master/pycrf/io/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_test": []
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dataset.__iter__": {
            "name": "__iter__",
            "location": 27,
            "return": [
                "Generator[(Tuple[(nothing, nothing)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__bool__": {
            "name": "__bool__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.append": {
            "name": "append",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "tgt": [],
                "vocab": [],
                "device": [],
                "sent_context": []
            }
        },
        "Dataset.shuffle": {
            "name": "shuffle",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.read_file": {
            "name": "read_file",
            "location": 59,
            "return": [
                "Generator[(Tuple[(Any, Any, List[str], List[str])], Any, None)]"
            ],
            "arguments": {
                "fname": [],
                "vocab": [],
                "device": [],
                "sent_context": [],
                "test": []
            }
        },
        "Dataset.load_file": {
            "name": "load_file",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [],
                "vocab": [],
                "limit": [],
                "device": [],
                "sent_context": []
            }
        }
    },
    "pytorch-crf-master/pycrf/io/vectors.py": {
        "load_pretrained": {
            "name": "load_pretrained",
            "location": 8,
            "return": [
                "Tuple[(Any, Dict[(int, str)], Dict[(str, int)])]"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "pytorch-crf-master/pycrf/io/vocab.py": {
        "Vocab.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "words_stoi": [],
                "words_itos": [],
                "labels": [],
                "default_label": [],
                "default_context": [],
                "unk_term": [],
                "pad_char": [],
                "unk_char": []
            }
        },
        "Vocab.n_words": {
            "name": "n_words",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vocab.n_chars": {
            "name": "n_chars",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vocab.n_labels": {
            "name": "n_labels",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vocab.sent2tensor": {
            "name": "sent2tensor",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "sent": [],
                "device": [],
                "sent_context": [],
                "test": []
            }
        },
        "Vocab.labs2tensor": {
            "name": "labs2tensor",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "labs": [],
                "device": [],
                "test": []
            }
        }
    },
    "pytorch-crf-master/pycrf/io/__init__.py": {},
    "pytorch-crf-master/pycrf/modules/char_cnn.py": {
        "CharCNN.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_chars": [],
                "channels": [],
                "kernel_size": [],
                "embedding_size": [],
                "padding": [],
                "padding_idx": [],
                "dropout": []
            }
        },
        "CharCNN.forward": {
            "name": "forward",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "lengths": [],
                "indices": []
            }
        },
        "CharCNN.cl_opts": {
            "name": "cl_opts",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "CharCNN.cl_init": {
            "name": "cl_init",
            "location": 152,
            "return": [
                "_TCharCNN@@CharCNN@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCharCNN]"
                ],
                "opts": [],
                "vocab": []
            }
        }
    },
    "pytorch-crf-master/pycrf/modules/char_embedding.py": {
        "CharEmbedding.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_chars": [],
                "embedding_size": [],
                "dropout": [],
                "padding_idx": []
            }
        },
        "CharEmbedding.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "CharEmbedding.cl_opts": {
            "name": "cl_opts",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "group": []
            }
        }
    },
    "pytorch-crf-master/pycrf/modules/char_lstm.py": {
        "CharLSTM.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_chars": [],
                "hidden_size": [],
                "bidirectional": [],
                "embedding_size": [],
                "layers": [],
                "dropout": [],
                "padding_idx": []
            }
        },
        "CharLSTM.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "lengths": [],
                "indices": []
            }
        },
        "CharLSTM.cl_opts": {
            "name": "cl_opts",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "CharLSTM.cl_init": {
            "name": "cl_init",
            "location": 154,
            "return": [
                "_TCharLSTM@@CharLSTM@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCharLSTM]"
                ],
                "opts": [],
                "vocab": []
            }
        }
    },
    "pytorch-crf-master/pycrf/modules/crf.py": {
        "logsumexp": {
            "name": "logsumexp",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "dim": [],
                "keepdim": []
            }
        },
        "viterbi_decode": {
            "name": "viterbi_decode",
            "location": 54,
            "return": [
                "Tuple[(List[int], Any)]"
            ],
            "arguments": {
                "tag_sequence": [],
                "transition_matrix": [],
                "tag_observations": []
            }
        },
        "allowed_transitions": {
            "name": "allowed_transitions",
            "location": 147,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "constraint_type": [],
                "tokens": []
            }
        },
        "ConditionalRandomField.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_tags": [],
                "constraints": [],
                "include_start_end_transitions": []
            }
        },
        "ConditionalRandomField.reset_parameters": {
            "name": "reset_parameters",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalRandomField._input_likelihood": {
            "name": "_input_likelihood",
            "location": 294,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "mask": []
            }
        },
        "ConditionalRandomField._joint_likelihood": {
            "name": "_joint_likelihood",
            "location": 347,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "tags": [],
                "mask": []
            }
        },
        "ConditionalRandomField.forward": {
            "name": "forward",
            "location": 422,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "tags": [],
                "mask": []
            }
        },
        "ConditionalRandomField.viterbi_tags": {
            "name": "viterbi_tags",
            "location": 436,
            "return": [
                "List[Tuple[(List[int], Any)]]"
            ],
            "arguments": {
                "self": [],
                "logits": [],
                "mask": []
            }
        }
    },
    "pytorch-crf-master/pycrf/modules/lstm_crf.py": {
        "LSTMCRF.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [],
                "char_feats_layer": [],
                "crf": [],
                "pretrained_word_vecs": [],
                "sent_context_embedding": [],
                "hidden_dim": [],
                "layers": [],
                "dropout": [],
                "bidirectional": [],
                "freeze_embeddings": []
            }
        },
        "LSTMCRF.get_trainable_params": {
            "name": "get_trainable_params",
            "location": 154,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "lrs": []
            }
        },
        "LSTMCRF._feats": {
            "name": "_feats",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "words": [],
                "word_lengths": [],
                "word_indices": [],
                "word_idxs": [],
                "sent_context": []
            }
        },
        "LSTMCRF.predict": {
            "name": "predict",
            "location": 279,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "words": [],
                "word_lengths": [],
                "word_indices": [],
                "word_idxs": [],
                "sent_context": [],
                "lens": []
            }
        },
        "LSTMCRF.forward": {
            "name": "forward",
            "location": 332,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "words": [],
                "word_lengths": [],
                "word_indices": [],
                "word_idxs": [],
                "sent_context": [],
                "labs": [],
                "lens": []
            }
        },
        "LSTMCRF.cl_opts": {
            "name": "cl_opts",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [],
                "require": []
            }
        },
        "LSTMCRF.cl_init": {
            "name": "cl_init",
            "location": 418,
            "return": [
                "_TLSTMCRF@@LSTMCRF@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TLSTMCRF]"
                ],
                "opts": [],
                "vocab": [],
                "char_feats_layer": [],
                "word_vecs": []
            }
        }
    },
    "pytorch-crf-master/pycrf/modules/__init__.py": {},
    "pytorch-crf-master/pycrf/nn/utils.py": {
        "sequence_mask": {
            "name": "sequence_mask",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "lens": [],
                "max_len": []
            }
        },
        "pad": {
            "name": "pad",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "length": []
            }
        },
        "sort_and_pad": {
            "name": "sort_and_pad",
            "location": 48,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "tensors": [],
                "lengths": []
            }
        },
        "unsort": {
            "name": "unsort",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "indices": []
            }
        },
        "assert_equal": {
            "name": "assert_equal",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor_a": [],
                "tensor_b": []
            }
        }
    },
    "pytorch-crf-master/test/conftest.py": {
        "extract_vecs": {
            "name": "extract_vecs",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "dest": []
            }
        },
        "download_vecs": {
            "name": "download_vecs",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "glove": {
            "name": "glove",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "vocab_dataset": {
            "name": "vocab_dataset",
            "location": 66,
            "return": [],
            "arguments": {
                "glove": []
            }
        },
        "vocab": {
            "name": "vocab",
            "location": 74,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "dataset": {
            "name": "dataset",
            "location": 79,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "dataset_dev": {
            "name": "dataset_dev",
            "location": 84,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "crf": {
            "name": "crf",
            "location": 91,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "char_lstm": {
            "name": "char_lstm",
            "location": 96,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "char_cnn": {
            "name": "char_cnn",
            "location": 101,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "lstm_crf": {
            "name": "lstm_crf",
            "location": 106,
            "return": [],
            "arguments": {
                "vocab_dataset": [],
                "char_lstm": [],
                "crf": [],
                "glove": []
            }
        },
        "get_model_stats": {
            "name": "get_model_stats",
            "location": 111,
            "return": [],
            "arguments": {
                "vocab_dataset": []
            }
        },
        "get_model_stats._get_model_stats": {
            "name": "_get_model_stats",
            "location": 113,
            "return": [],
            "arguments": {
                "items": []
            }
        }
    },
    "pytorch-crf-master/test/test_char_cnn.py": {
        "test_forward": {
            "name": "test_forward",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "char_cnn": [],
                "vocab_dataset": []
            }
        }
    },
    "pytorch-crf-master/test/test_char_lstm.py": {
        "test_forward": {
            "name": "test_forward",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "char_lstm": [],
                "vocab_dataset": []
            }
        }
    },
    "pytorch-crf-master/test/test_dataset.py": {
        "test_size": {
            "name": "test_size",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "test_source": {
            "name": "test_source",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "test_target": {
            "name": "test_target",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": []
            }
        }
    },
    "pytorch-crf-master/test/test_eval.py": {
        "test_iob_to_spans": {
            "name": "test_iob_to_spans",
            "location": 49,
            "return": [],
            "arguments": {
                "vocab_dataset": [],
                "tags": [],
                "lab_itos": [],
                "chunks": []
            }
        },
        "test_iobes_to_spans": {
            "name": "test_iobes_to_spans",
            "location": 110,
            "return": [],
            "arguments": {
                "vocab_dataset": [],
                "tags": [],
                "lab_itos": [],
                "chunks": []
            }
        },
        "test_detect_label_scheme": {
            "name": "test_detect_label_scheme",
            "location": 129,
            "return": [],
            "arguments": {
                "labels": [],
                "check": []
            }
        },
        "test_detect_label_scheme_errors": {
            "name": "test_detect_label_scheme_errors",
            "location": 139,
            "return": [],
            "arguments": {
                "labels": []
            }
        },
        "test_eval_stats": {
            "name": "test_eval_stats",
            "location": 173,
            "return": [],
            "arguments": {
                "get_model_stats": [],
                "sentences": [],
                "f1": [],
                "precision": [],
                "recall": [],
                "accuracy": []
            }
        }
    },
    "pytorch-crf-master/test/test_lstm_crf.py": {
        "test_feats": {
            "name": "test_feats",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "lstm_crf": [],
                "vocab_dataset": []
            }
        },
        "test_predict": {
            "name": "test_predict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "lstm_crf": [],
                "vocab_dataset": []
            }
        },
        "test_forward": {
            "name": "test_forward",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "lstm_crf": [],
                "vocab_dataset": []
            }
        }
    },
    "pytorch-crf-master/test/test_sgd.py": {
        "test_cyclic_lr": {
            "name": "test_cyclic_lr",
            "location": 47,
            "return": [],
            "arguments": {
                "lstm_crf": [],
                "training_size": [],
                "batch_size": [],
                "epochs": [],
                "cycle_len": [],
                "cycle_mult": [],
                "checks": []
            }
        }
    },
    "pytorch-crf-master/test/test_utils.py": {
        "test_check_equal": {
            "name": "test_check_equal",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequence_mask": {
            "name": "test_sequence_mask",
            "location": 30,
            "return": [],
            "arguments": {
                "inp": [],
                "chk": [],
                "max_len": []
            }
        },
        "test_pad": {
            "name": "test_pad",
            "location": 67,
            "return": [],
            "arguments": {
                "inputs": [],
                "check": []
            }
        },
        "test_sort_and_pad": {
            "name": "test_sort_and_pad",
            "location": 84,
            "return": [],
            "arguments": {
                "inputs": [],
                "check": []
            }
        },
        "test_unsort": {
            "name": "test_unsort",
            "location": 104,
            "return": [],
            "arguments": {
                "inputs": [],
                "check": []
            }
        }
    },
    "pytorch-crf-master/test/test_vectors.py": {
        "test_load_pretrained": {
            "name": "test_load_pretrained",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "glove": []
            }
        }
    },
    "pytorch-crf-master/test/test_vocab.py": {
        "test_labels": {
            "name": "test_labels",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "vocab": []
            }
        },
        "test_chars": {
            "name": "test_chars",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "vocab": []
            }
        },
        "test_words": {
            "name": "test_words",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "vocab": []
            }
        },
        "test_sent2tensor": {
            "name": "test_sent2tensor",
            "location": 44,
            "return": [],
            "arguments": {
                "vocab": [],
                "sent": []
            }
        },
        "test_labs2tensor": {
            "name": "test_labs2tensor",
            "location": 78,
            "return": [],
            "arguments": {
                "vocab": [],
                "labs": [],
                "is_test": [],
                "check": []
            }
        }
    }
}
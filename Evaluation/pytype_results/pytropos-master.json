{
    "pytropos-master/conftest.py": {},
    "pytropos-master/pavement.py": {
        "print_passed": {
            "name": "print_passed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_failed": {
            "name": "print_failed",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_doc_make": {
            "name": "_doc_make",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "sdist": {
            "name": "sdist",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 102,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_all": {
            "name": "test_all",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 129,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "commit": {
            "name": "commit",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "doc_watch": {
            "name": "doc_watch",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "doc_open": {
            "name": "doc_open",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "get_tasks": {
            "name": "get_tasks",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "doc_html": {
            "name": "doc_html",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "doc_clean": {
            "name": "doc_clean",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "cwd.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newcwd": [
                    "str"
                ]
            }
        },
        "cwd.__enter__": {
            "name": "__enter__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "cwd.__exit__": {
            "name": "__exit__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[Type[BaseException]]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_paths": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.dispatch": {
            "name": "dispatch",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "doc_watch.RebuildDocsEventHandler.on_modified": {
            "name": "on_modified",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "pytropos-master/setup.py": {
        "get_project_files": {
            "name": "get_project_files",
            "location": 69,
            "return": [
                "List[bytes]"
            ],
            "arguments": {}
        },
        "is_git_project": {
            "name": "is_git_project",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "has_git": {
            "name": "has_git",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_git_project_files": {
            "name": "get_git_project_files",
            "location": 100,
            "return": [
                "List[bytes]"
            ],
            "arguments": {}
        },
        "git_ls_files": {
            "name": "git_ls_files",
            "location": 119,
            "return": [
                "Set[bytes]"
            ],
            "arguments": {}
        },
        "print_success_message": {
            "name": "print_success_message",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "print_failure_message": {
            "name": "print_failure_message",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_lint": {
            "name": "_lint",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "_test": {
            "name": "_test",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "pytest_args": [
                    "List[str]"
                ]
            }
        },
        "_test_all": {
            "name": "_test_all",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAllCommand.finalize_options": {
            "name": "finalize_options",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllCommand.run_tests": {
            "name": "run_tests",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytropos-master/docs/source/conf.py": {},
    "pytropos-master/pytropos/debug_print.py": {
        "dprint": {
            "name": "dprint",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/pytropos/main.py": {
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "List[str]"
                ]
            }
        },
        "run_pytropos": {
            "name": "run_pytropos",
            "location": 114,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "cursorline": [
                    "Optional[int]"
                ],
                "console": [
                    "bool"
                ],
                "pt_globals": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "run_transformed_type_checking_code": {
            "name": "run_transformed_type_checking_code",
            "location": 195,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "newast_comp": [
                    "types.CodeType"
                ],
                "pt_globals": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "entry_point": {
            "name": "entry_point",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PytroposConsole.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locals": [
                    "Optional[Dict[(str, Any)]]"
                ]
            }
        },
        "PytroposConsole.runsource": {
            "name": "runsource",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "symbol": [
                    "str"
                ]
            }
        },
        "PytroposConsole.__init__.print_console": {
            "name": "print_console",
            "location": 267,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "pytropos-master/pytropos/metadata.py": {},
    "pytropos-master/pytropos/__init__.py": {},
    "pytropos-master/pytropos/ast_transformer/miscelaneous.py": {
        "typed_ast3_to_ast": {
            "name": "typed_ast3_to_ast",
            "location": 22,
            "return": [
                "_ast.AST"
            ],
            "arguments": {
                "tree": [
                    "ast3.AST"
                ]
            }
        },
        "copy_ast3": {
            "name": "copy_ast3",
            "location": 37,
            "return": [
                "_ast.AST"
            ],
            "arguments": {
                "tree": [
                    "ast3.AST"
                ]
            }
        },
        "pprint_ast_expr": {
            "name": "pprint_ast_expr",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "exp": [
                    "Union[(_ast.AST, str, ast3.AST)]"
                ],
                "only_expr": [
                    "bool"
                ],
                "fix_missing_locations": [
                    "bool"
                ]
            }
        },
        "typed_ast3_to_ast.helper": {
            "name": "helper",
            "location": 23,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "copy_ast3.helper": {
            "name": "helper",
            "location": 38,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "pytropos-master/pytropos/ast_transformer/transformer.py": {
        "pos_as_tuple": {
            "name": "pos_as_tuple",
            "location": 51,
            "return": [
                "Optional[ast3.Tuple]"
            ],
            "arguments": {
                "node": [
                    "Union[(ast3.expr, ast3.stmt)]"
                ]
            }
        },
        "PytroposTransformer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "cursorline": [
                    "Optional[int]"
                ],
                "console": [
                    "bool"
                ]
            }
        },
        "PytroposTransformer._show_store_contents_expr": {
            "name": "_show_store_contents_expr",
            "location": 82,
            "return": [
                "ast3.Expr"
            ],
            "arguments": {
                "self": []
            }
        },
        "PytroposTransformer.visit": {
            "name": "visit",
            "location": 95,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.AST"
                ]
            }
        },
        "PytroposTransformer.isoncursor": {
            "name": "isoncursor",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.stmt"
                ]
            }
        },
        "PytroposTransformer.add_stmt_print_store": {
            "name": "add_stmt_print_store",
            "location": 137,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Union[(ast3.AST, List[ast3.AST])]]"
                ]
            }
        },
        "PytroposTransformer.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 146,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.AugAssign"
                ]
            }
        },
        "PytroposTransformer.visit_Num": {
            "name": "visit_Num",
            "location": 165,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Num"
                ]
            }
        },
        "PytroposTransformer.visit_Compare": {
            "name": "visit_Compare",
            "location": 184,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Compare"
                ]
            }
        },
        "PytroposTransformer.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 215,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.BinOp"
                ]
            }
        },
        "PytroposTransformer.visit_Assign": {
            "name": "visit_Assign",
            "location": 244,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Assign"
                ]
            }
        },
        "PytroposTransformer.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 250,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.AnnAssign"
                ]
            }
        },
        "PytroposTransformer.visit_Name": {
            "name": "visit_Name",
            "location": 290,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Name"
                ]
            }
        },
        "PytroposTransformer.visit_Module": {
            "name": "visit_Module",
            "location": 321,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Module"
                ]
            }
        },
        "PytroposTransformer.visit_If": {
            "name": "visit_If",
            "location": 351,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.If"
                ]
            }
        },
        "PytroposTransformer.visit_While": {
            "name": "visit_While",
            "location": 439,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.While"
                ]
            }
        },
        "PytroposTransformer.visit_NameConstant": {
            "name": "visit_NameConstant",
            "location": 509,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.NameConstant"
                ]
            }
        },
        "PytroposTransformer.visit_List": {
            "name": "visit_List",
            "location": 547,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.List"
                ]
            }
        },
        "PytroposTransformer.visit_Expr": {
            "name": "visit_Expr",
            "location": 569,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Expr"
                ]
            }
        },
        "PytroposTransformer.visit_Delete": {
            "name": "visit_Delete",
            "location": 586,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Delete"
                ]
            }
        },
        "PytroposTransformer.visit_Starred": {
            "name": "visit_Starred",
            "location": 591,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Starred"
                ]
            }
        },
        "PytroposTransformer.visit_keyword": {
            "name": "visit_keyword",
            "location": 596,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.keyword"
                ]
            }
        },
        "PytroposTransformer.visit_Call": {
            "name": "visit_Call",
            "location": 601,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Call"
                ]
            }
        },
        "PytroposTransformer.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 682,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Attribute"
                ]
            }
        },
        "PytroposTransformer.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 723,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Tuple"
                ]
            }
        },
        "PytroposTransformer.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 745,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Subscript"
                ]
            }
        },
        "PytroposTransformer.visit_Index": {
            "name": "visit_Index",
            "location": 770,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Index"
                ]
            }
        },
        "PytroposTransformer.visit_Import": {
            "name": "visit_Import",
            "location": 775,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.Import"
                ]
            }
        },
        "PytroposTransformer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 839,
            "return": [
                "Optional[Union[(ast3.AST, List[ast3.AST])]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "ast3.ImportFrom"
                ]
            }
        }
    },
    "pytropos-master/pytropos/ast_transformer/__init__.py": {},
    "pytropos-master/pytropos/hints/numpy.py": {
        "NdArray_.__getitem__": {
            "name": "__getitem__",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NdArray_.__delitem__": {
            "name": "__delitem__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NdArray_.__setitem__": {
            "name": "__setitem__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "other": []
            }
        }
    },
    "pytropos-master/pytropos/hints/__init__.py": {},
    "pytropos-master/pytropos/internals/abstract_domain.py": {
        "AbstractDomain.top": {
            "name": "top",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AbstractDomain.is_top": {
            "name": "is_top",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDomain.join": {
            "name": "join",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractDomain.widen_op": {
            "name": "widen_op",
            "location": 57,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractDomain.narrow_op": {
            "name": "narrow_op",
            "location": 61,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractDomain.__bool__": {
            "name": "__bool__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytropos-master/pytropos/internals/errors.py": {
        "_warning_to_str": {
            "name": "_warning_to_str",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "warn": [
                    "Tuple[(str, str, Optional[Tuple[(Optional[Tuple[(int, int)]], str)]])]"
                ]
            }
        },
        "TypeCheckLogger.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCheckLogger.new_warning": {
            "name": "new_warning",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err_code": [
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "TypeCheckLogger.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytropos-master/pytropos/internals/miscelaneous.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        },
        "Singleton.clean_sing": {
            "name": "clean_sing",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Singleton"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/__init__.py": {
        "loadBuiltinFuncs": {
            "name": "loadBuiltinFuncs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "store": []
            }
        }
    },
    "pytropos-master/pytropos/internals/builtin_funcs/functions.py": {
        "ShowStore.call": {
            "name": "call",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [],
                "args": [
                    "pytropos.internals.values.python_values.python_values.Args"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(builtins.int, builtins.int)]], str)]]"
                ]
            }
        },
        "function_type_int.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Optional[Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "function_type_int.abstract_repr": {
            "name": "abstract_repr",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "function_type_int.type_name": {
            "name": "type_name",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "function_type_int.top": {
            "name": "top",
            "location": 73,
            "return": [
                "_Tfunction_type_int"
            ],
            "arguments": {
                "cls": [
                    "Type[_Tfunction_type_int]"
                ]
            }
        },
        "function_type_int.is_top": {
            "name": "is_top",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "function_type_int.get_absvalue": {
            "name": "get_absvalue",
            "location": 81,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "function_type_int.get_attrs": {
            "name": "get_attrs",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "function_type_int.fun_call": {
            "name": "fun_call",
            "location": 88,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "store": [],
                "args": [
                    "pytropos.internals.values.python_values.python_values.Args"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(builtins.int, builtins.int)]], str)]]"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/builtin_funcs/__init__.py": {},
    "pytropos-master/pytropos/internals/control/execute.py": {
        "runIf": {
            "name": "runIf",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "store": [],
                "if_qst": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ],
                "if_": [
                    "Callable[([Any], Any)]"
                ],
                "else_": [
                    "Optional[Callable[([Any], Any)]]"
                ]
            }
        },
        "runWhile": {
            "name": "runWhile",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "store": [],
                "while_qst": [
                    "Callable[([Any], pytropos.internals.values.python_values.python_values.PythonValue)]"
                ],
                "while_": [
                    "Callable[([Any], Any)]"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/control/hints.py": {
        "annotation": {
            "name": "annotation",
            "location": 14,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "ann": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ],
                "expr": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/control/__init__.py": {},
    "pytropos-master/pytropos/internals/store/store.py": {
        "Store.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "store": []
            }
        },
        "Store.top": {
            "name": "top",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Store.is_top": {
            "name": "is_top",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.copy": {
            "name": "copy",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.items": {
            "name": "items",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.__getitem__": {
            "name": "__getitem__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "key_": []
            }
        },
        "Store.__setitem__": {
            "name": "__setitem__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key_": [],
                "value": []
            }
        },
        "Store.__delitem__": {
            "name": "__delitem__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "key_": []
            }
        },
        "Store.__contains__": {
            "name": "__contains__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Store.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.join": {
            "name": "join",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Store.widen_op": {
            "name": "widen_op",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Store.importStar": {
            "name": "importStar",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        }
    },
    "pytropos-master/pytropos/internals/store/__init__.py": {},
    "pytropos-master/pytropos/internals/values/abstract_value.py": {
        "AbstractValue.join": {
            "name": "join",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractValue.widen_op": {
            "name": "widen_op",
            "location": 23,
            "return": [
                "Tuple[(Any, bool)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractValue.type_name": {
            "name": "type_name",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.abstract_repr": {
            "name": "abstract_repr",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.fun_call": {
            "name": "fun_call",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "store": [],
                "args": [],
                "src_pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "AbstractValue.get_attrs": {
            "name": "get_attrs",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValue.get_subscripts": {
            "name": "get_subscripts",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "AbstractValue.call_getitem": {
            "name": "call_getitem",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "AbstractValue.call_setitem": {
            "name": "call_setitem",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "AbstractValue.op_OP": {
            "name": "op_OP",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "AbstractValue.op_bool": {
            "name": "op_bool",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "AbstractValue.__eq__": {
            "name": "__eq__",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pytropos-master/pytropos/internals/values/builtin_values.py": {
        "Int.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(builtins.NoneType, int)]"
                ]
            }
        },
        "Int.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.top": {
            "name": "top",
            "location": 54,
            "return": [
                "_TInt"
            ],
            "arguments": {
                "cls": [
                    "Type[_TInt]"
                ]
            }
        },
        "Int.is_top": {
            "name": "is_top",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.join": {
            "name": "join",
            "location": 63,
            "return": [
                "_TInt"
            ],
            "arguments": {
                "self": [
                    "_TInt"
                ],
                "other": [
                    "_TInt"
                ]
            }
        },
        "Int.type_name": {
            "name": "type_name",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int.abstract_repr": {
            "name": "abstract_repr",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Int.__getattribute__": {
            "name": "__getattribute__",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Int.__operate_int_to_int": {
            "name": "__operate_int_to_int",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Int.__operate_int_to_bool": {
            "name": "__operate_int_to_bool",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Int.__operate_int_to_int_shift": {
            "name": "__operate_int_to_int_shift",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Int.__operate_int_div": {
            "name": "__operate_int_div",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Int.op_bool": {
            "name": "op_bool",
            "location": 153,
            "return": [
                "Bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Union[(builtins.NoneType, Tuple[(Union[(builtins.NoneType, Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(builtins.NoneType, float)]"
                ]
            }
        },
        "Float.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.top": {
            "name": "top",
            "location": 178,
            "return": [
                "_TFloat"
            ],
            "arguments": {
                "cls": [
                    "Type[_TFloat]"
                ]
            }
        },
        "Float.is_top": {
            "name": "is_top",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.join": {
            "name": "join",
            "location": 187,
            "return": [
                "_TFloat"
            ],
            "arguments": {
                "self": [
                    "_TFloat"
                ],
                "other": [
                    "_TFloat"
                ]
            }
        },
        "Float.type_name": {
            "name": "type_name",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.abstract_repr": {
            "name": "abstract_repr",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.__eq__": {
            "name": "__eq__",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Float.__getattribute__": {
            "name": "__getattribute__",
            "location": 215,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Float.__operate_to_floats": {
            "name": "__operate_to_floats",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Float.__operate_to_bools": {
            "name": "__operate_to_bools",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Float.__operate_to_floats_div": {
            "name": "__operate_to_floats_div",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Float.__operate_to_any": {
            "name": "__operate_to_any",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": [],
                "pos": []
            }
        },
        "Float.op_bool": {
            "name": "op_bool",
            "location": 306,
            "return": [
                "Bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Union[(builtins.NoneType, Tuple[(Union[(builtins.NoneType, Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "Bool.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(builtins.NoneType, bool)]"
                ]
            }
        },
        "Bool.__repr__": {
            "name": "__repr__",
            "location": 330,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.top": {
            "name": "top",
            "location": 336,
            "return": [
                "_TBool"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBool]"
                ]
            }
        },
        "Bool.is_top": {
            "name": "is_top",
            "location": 342,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.join": {
            "name": "join",
            "location": 345,
            "return": [
                "_TBool"
            ],
            "arguments": {
                "self": [
                    "_TBool"
                ],
                "other": [
                    "_TBool"
                ]
            }
        },
        "Bool.type_name": {
            "name": "type_name",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bool.abstract_repr": {
            "name": "abstract_repr",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bool.__eq__": {
            "name": "__eq__",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bool.op_bool": {
            "name": "op_bool",
            "location": 370,
            "return": [
                "_TBool"
            ],
            "arguments": {
                "self": [
                    "_TBool"
                ],
                "pos": [
                    "Union[(builtins.NoneType, Tuple[(Union[(builtins.NoneType, Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "NoneType.__new__": {
            "name": "__new__",
            "location": 379,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNoneType]"
                ]
            }
        },
        "NoneType.__repr__": {
            "name": "__repr__",
            "location": 385,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [
                    "None"
                ]
            }
        },
        "NoneType.top": {
            "name": "top",
            "location": 389,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNoneType]"
                ]
            }
        },
        "NoneType.is_top": {
            "name": "is_top",
            "location": 393,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "None"
                ]
            }
        },
        "NoneType.join": {
            "name": "join",
            "location": 396,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [
                    "_TNoneType"
                ],
                "other": [
                    "builtins.NoneType"
                ]
            }
        },
        "NoneType.type_name": {
            "name": "type_name",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoneType.abstract_repr": {
            "name": "abstract_repr",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoneType.__eq__": {
            "name": "__eq__",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "None"
                ],
                "other": []
            }
        },
        "NoneType.__getattribute__": {
            "name": "__getattribute__",
            "location": 412,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "NoneType.__operate_ret_false": {
            "name": "__operate_ret_false",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "pos": []
            }
        },
        "NoneType.op_bool": {
            "name": "op_bool",
            "location": 433,
            "return": [
                "Bool"
            ],
            "arguments": {
                "self": [
                    "None"
                ],
                "pos": [
                    "Union[(builtins.NoneType, Tuple[(Union[(builtins.NoneType, Tuple[(int, int)])], str)])]"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/values/__init__.py": {
        "int": {
            "name": "int",
            "location": 23,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "val": [
                    "Union[(builtins.NoneType, builtins.int)]"
                ]
            }
        },
        "float": {
            "name": "float",
            "location": 28,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "val": [
                    "Union[(builtins.NoneType, builtins.float)]"
                ]
            }
        },
        "bool": {
            "name": "bool",
            "location": 35,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "val": [
                    "Union[(builtins.NoneType, builtins.bool)]"
                ]
            }
        },
        "__createNonePV": {
            "name": "__createNonePV",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "list": {
            "name": "list",
            "location": 60,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "lst": [
                    "Union[(builtins.NoneType, builtins.list[pytropos.internals.values.python_values.python_values.PythonValue])]"
                ]
            }
        },
        "tuple": {
            "name": "tuple",
            "location": 65,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        },
        "__createNonePV.retNone": {
            "name": "retNone",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "pytropos-master/pytropos/internals/values/__main__.py": {},
    "pytropos-master/pytropos/internals/values/python_values/builtin_mutvalues.py": {
        "TupleOrList.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "Union[(builtins.NoneType, typing.List[pytropos.internals.values.python_values.python_values.PythonValue])]"
                ],
                "size": [
                    "Union[(builtins.NoneType, typing.Tuple[(int, float)])]"
                ],
                "children": [
                    "Union[(builtins.NoneType, Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "TupleOrList.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TupleOrList._elems": {
            "name": "_elems",
            "location": 57,
            "return": [
                "typing.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleOrList.top": {
            "name": "top",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TupleOrList.is_top": {
            "name": "is_top",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleOrList.copy_mut": {
            "name": "copy_mut",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mut_heap": [
                    "Dict[(int, pytropos.internals.values.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "TupleOrList.join_mut": {
            "name": "join_mut",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "mut_heap": [
                    "Dict[(typing.Tuple[(str, int)], typing.Tuple[(int, int, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "TupleOrList.convert_into_top": {
            "name": "convert_into_top",
            "location": 110,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "converted": [
                    "Set[int]"
                ]
            }
        },
        "TupleOrList.is_size_determined": {
            "name": "is_size_determined",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleOrList.check_index": {
            "name": "check_index",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "ival": [
                    "pytropos.internals.values.builtin_values.Int"
                ],
                "pos": [
                    "Union[(builtins.NoneType, typing.Tuple[(Union[(builtins.NoneType, typing.Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "TupleOrList.sorted_indices": {
            "name": "sorted_indices",
            "location": 156,
            "return": [
                "typing.List[typing.Tuple[(int, pytropos.internals.values.python_values.python_values.PythonValue)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleOrList.sorted_indices_ints": {
            "name": "sorted_indices_ints",
            "location": 163,
            "return": [
                "typing.List[pytropos.internals.values.builtin_values.Int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "Union[(builtins.NoneType, typing.List[pytropos.internals.values.python_values.python_values.PythonValue])]"
                ],
                "size": [
                    "Union[(builtins.NoneType, typing.Tuple[(int, int)])]"
                ],
                "children": [
                    "Union[(builtins.NoneType, Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "List.__repr__": {
            "name": "__repr__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.abstract_repr": {
            "name": "abstract_repr",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.type_name": {
            "name": "type_name",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.get_attrs": {
            "name": "get_attrs",
            "location": 219,
            "return": [
                "pytropos.internals.values.python_values.python_values.AttrsContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "List.get_subscripts": {
            "name": "get_subscripts",
            "location": 236,
            "return": [
                "pytropos.internals.values.python_values.python_values.SubscriptsContainer"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Union[(builtins.NoneType, typing.Tuple[(Union[(builtins.NoneType, typing.Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "List._method_append": {
            "name": "_method_append",
            "location": 241,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Union[(builtins.NoneType, typing.Tuple[(Union[(builtins.NoneType, typing.Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "Tuple.__repr__": {
            "name": "__repr__",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.abstract_repr": {
            "name": "abstract_repr",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tuple.type_name": {
            "name": "type_name",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tuple.get_attrs": {
            "name": "get_attrs",
            "location": 286,
            "return": [
                "pytropos.internals.values.python_values.python_values.AttrsContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.get_subscripts": {
            "name": "get_subscripts",
            "location": 291,
            "return": [
                "pytropos.internals.values.python_values.python_values.SubscriptsContainer"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Union[(builtins.NoneType, typing.Tuple[(Union[(builtins.NoneType, typing.Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "Tuple.fromList": {
            "name": "fromList",
            "location": 297,
            "return": [
                "Tuple"
            ],
            "arguments": {
                "lst": [
                    "List"
                ]
            }
        },
        "SubscriptsTupleOrListContainer.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "torl": [
                    "TupleOrList"
                ],
                "read_only": [
                    "Union[(builtins.NoneType, bool)]"
                ],
                "pos": [
                    "Union[(builtins.NoneType, typing.Tuple[(Union[(builtins.NoneType, typing.Tuple[(int, int)])], str)])]"
                ]
            }
        },
        "SubscriptsTupleOrListContainer.__getitem__": {
            "name": "__getitem__",
            "location": 316,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ]
            }
        },
        "SubscriptsTupleOrListContainer.__delitem__": {
            "name": "__delitem__",
            "location": 336,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ]
            }
        },
        "SubscriptsTupleOrListContainer.__setitem__": {
            "name": "__setitem__",
            "location": 380,
            "return": [
                "builtins.NoneType"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ],
                "val": [
                    "pytropos.internals.values.python_values.python_values.PythonValue"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/values/python_values/objects_ids.py": {
        "new_id": {
            "name": "new_id",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/pytropos/internals/values/python_values/python_values.py": {
        "PythonValue.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "Union[(PT, pytropos.internals.values.abstract_value.AbstractValue)]"
                ]
            }
        },
        "PythonValue.top": {
            "name": "top",
            "location": 37,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[_TPythonValue]"
                ]
            }
        },
        "PythonValue.is_top": {
            "name": "is_top",
            "location": 43,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.join": {
            "name": "join",
            "location": 47,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "other": [
                    "_TPythonValue"
                ]
            }
        },
        "PythonValue.widen_op": {
            "name": "widen_op",
            "location": 58,
            "return": [
                "Tuple[(PythonValue, builtins.bool)]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PythonValue"
                ]
            }
        },
        "PythonValue.is_mut": {
            "name": "is_mut",
            "location": 85,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.mut_id": {
            "name": "mut_id",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.copy_mut": {
            "name": "copy_mut",
            "location": 95,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "mut_heap": [
                    "Dict[(int, _TPythonValue)]"
                ]
            }
        },
        "PythonValue.convert_into_top": {
            "name": "convert_into_top",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converted": [
                    "Set[int]"
                ]
            }
        },
        "PythonValue.new_vals_to_top": {
            "name": "new_vals_to_top",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, PythonValue)])]"
                ],
                "side": [
                    "str"
                ]
            }
        },
        "PythonValue.join_mut": {
            "name": "join_mut",
            "location": 125,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "other": [
                    "_TPythonValue"
                ],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, _TPythonValue)])]"
                ]
            }
        },
        "PythonValue.__eq__": {
            "name": "__eq__",
            "location": 180,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PythonValue.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.call": {
            "name": "call",
            "location": 209,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "store": [],
                "args": [
                    "Args"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "PythonValue.attr": {
            "name": "attr",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.subs": {
            "name": "subs",
            "location": 249,
            "return": [
                "SubscriptsContainer"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "PythonValue.__getattr__": {
            "name": "__getattr__",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PythonValue.__op_in_abstractvalue_overwritten": {
            "name": "__op_in_abstractvalue_overwritten",
            "location": 274,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "PythonValue.operate": {
            "name": "operate",
            "location": 280,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "op": [
                    "str"
                ],
                "other": [
                    "_TPythonValue"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "PythonValue.bool": {
            "name": "bool",
            "location": 332,
            "return": [
                "_TPythonValue"
            ],
            "arguments": {
                "self": [
                    "_TPythonValue"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "PythonValue.type": {
            "name": "type",
            "location": 361,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonValue.__lt__": {
            "name": "__lt__",
            "location": 371,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "PythonValue"
                ]
            }
        },
        "AbstractMutVal.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "Optional[Dict[(Any, PythonValue)]]"
                ]
            }
        },
        "AbstractMutVal.mut_id": {
            "name": "mut_id",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractMutVal.__eq__": {
            "name": "__eq__",
            "location": 417,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractMutVal.convert_into_top": {
            "name": "convert_into_top",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converted": [
                    "Set[int]"
                ]
            }
        },
        "AbstractMutVal.new_vals_to_top": {
            "name": "new_vals_to_top",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, PythonValue)])]"
                ],
                "side": [
                    "str"
                ]
            }
        },
        "AbstractMutVal.copy_mut": {
            "name": "copy_mut",
            "location": 475,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mut_heap": [
                    "Dict[(int, PythonValue)]"
                ]
            }
        },
        "AbstractMutVal.join": {
            "name": "join",
            "location": 493,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AbstractMutVal.join_mut": {
            "name": "join_mut",
            "location": 504,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, PythonValue)])]"
                ]
            }
        },
        "AbstractMutVal.get_attrs": {
            "name": "get_attrs",
            "location": 564,
            "return": [
                "AttrsContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Args.__init__": {
            "name": "__init__",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vals": [
                    "Tuple[(PythonValue, ...)]"
                ],
                "args": [
                    "Optional[PythonValue]"
                ],
                "kargs": [
                    "Optional[Dict[(str, PythonValue)]]"
                ]
            }
        },
        "AttrsContainer.__getitem__": {
            "name": "__getitem__",
            "location": 586,
            "return": [
                "PythonValue"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsContainer.__delitem__": {
            "name": "__delitem__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsContainer.__setitem__": {
            "name": "__setitem__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ],
                "val": [
                    "PythonValue"
                ]
            }
        },
        "AttrsMutContainer.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str"
                ],
                "children": [
                    "Dict[(Any, PythonValue)]"
                ],
                "non_mut_attrs": [
                    "Optional[Dict[(Any, Callable[([], PythonValue)])]]"
                ],
                "read_only": [
                    "bool"
                ]
            }
        },
        "AttrsMutContainer.__getitem__": {
            "name": "__getitem__",
            "location": 621,
            "return": [
                "PythonValue"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsMutContainer.__setitem__": {
            "name": "__setitem__",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ],
                "val": [
                    "PythonValue"
                ]
            }
        },
        "AttrsMutContainer.__delitem__": {
            "name": "__delitem__",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsTopContainer.__getitem__": {
            "name": "__getitem__",
            "location": 678,
            "return": [
                "PythonValue"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsTopContainer.__delitem__": {
            "name": "__delitem__",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ]
            }
        },
        "AttrsTopContainer.__setitem__": {
            "name": "__setitem__",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "Union[(str, Tuple[(str, Tuple[(Optional[Tuple[(int, int)]], str)])])]"
                ],
                "val": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsContainer.__getitem__": {
            "name": "__getitem__",
            "location": 691,
            "return": [
                "PythonValue"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsContainer.__delitem__": {
            "name": "__delitem__",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsContainer.__setitem__": {
            "name": "__setitem__",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ],
                "val": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsTopContainer.__getitem__": {
            "name": "__getitem__",
            "location": 706,
            "return": [
                "PythonValue"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsTopContainer.__delitem__": {
            "name": "__delitem__",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ]
            }
        },
        "SubscriptsTopContainer.__setitem__": {
            "name": "__setitem__",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "PythonValue"
                ],
                "val": [
                    "PythonValue"
                ]
            }
        }
    },
    "pytropos-master/pytropos/internals/values/python_values/wrappers.py": {
        "check_fun_args_kargs": {
            "name": "check_fun_args_kargs",
            "location": 29,
            "return": [
                "Optional[Dict[(str, pytropos.internals.values.python_values.python_values.PythonValue)]]"
            ],
            "arguments": {
                "fun_name": [
                    "str"
                ],
                "args": [
                    "pytropos.internals.values.python_values.python_values.Args"
                ],
                "self_args": [
                    "List[Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])]]"
                ],
                "self_kargs": [
                    "Dict[(str, Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])])]"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "name_of_types": {
            "name": "name_of_types",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "types": [
                    "Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])]"
                ]
            }
        },
        "BuiltinFun.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]"
                ],
                "fun": [
                    "Optional[Callable[(..., pytropos.internals.values.python_values.python_values.PythonValue)]]"
                ],
                "fun_self": [
                    "Optional[pytropos.internals.values.abstract_value.AbstractValue]"
                ],
                "args": [
                    "Optional[List[Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])]]]"
                ],
                "kargs": [
                    "Optional[Dict[(str, Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])])]]"
                ],
                "children": [
                    "Optional[Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "BuiltinFun.__repr__": {
            "name": "__repr__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinFun.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BuiltinFun.fun_call": {
            "name": "fun_call",
            "location": 174,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "store": [],
                "args": [
                    "pytropos.internals.values.python_values.python_values.Args"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "BuiltinFun.top": {
            "name": "top",
            "location": 194,
            "return": [
                "_TBuiltinFun"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBuiltinFun]"
                ]
            }
        },
        "BuiltinFun.is_top": {
            "name": "is_top",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinFun.copy_mut": {
            "name": "copy_mut",
            "location": 202,
            "return": [
                "_TBuiltinFun"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinFun"
                ],
                "mut_heap": [
                    "Dict[(int, pytropos.internals.values.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "BuiltinFun.get_attrs": {
            "name": "get_attrs",
            "location": 214,
            "return": [
                "pytropos.internals.values.python_values.python_values.AttrsContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinFun.join_mut": {
            "name": "join_mut",
            "location": 219,
            "return": [
                "_TBuiltinFun"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinFun"
                ],
                "other": [
                    "_TBuiltinFun"
                ],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "BuiltinFun.type_name": {
            "name": "type_name",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinFun.abstract_repr": {
            "name": "abstract_repr",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "klass_name": [
                    "Optional[str]"
                ],
                "klass": [
                    "Optional[Type[pytropos.internals.values.python_values.python_values.AbstractMutVal]]"
                ],
                "args": [
                    "Optional[List[Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])]]]"
                ],
                "kargs": [
                    "Optional[Dict[(str, Union[(Tuple[(Type[pytropos.internals.values.abstract_value.AbstractValue], ...)], Type[pytropos.internals.values.abstract_value.AbstractValue])])]]"
                ],
                "children": [
                    "Optional[Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "BuiltinClass.__repr__": {
            "name": "__repr__",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.__eq__": {
            "name": "__eq__",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BuiltinClass.class_top": {
            "name": "class_top",
            "location": 303,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.top": {
            "name": "top",
            "location": 311,
            "return": [
                "_TBuiltinClass"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBuiltinClass]"
                ]
            }
        },
        "BuiltinClass.is_top": {
            "name": "is_top",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.type_name": {
            "name": "type_name",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.abstract_repr": {
            "name": "abstract_repr",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.copy_mut": {
            "name": "copy_mut",
            "location": 332,
            "return": [
                "_TBuiltinClass"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinClass"
                ],
                "mut_heap": [
                    "Dict[(int, pytropos.internals.values.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "BuiltinClass.join_mut": {
            "name": "join_mut",
            "location": 346,
            "return": [
                "_TBuiltinClass"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinClass"
                ],
                "other": [
                    "_TBuiltinClass"
                ],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "BuiltinClass.get_attrs": {
            "name": "get_attrs",
            "location": 364,
            "return": [
                "pytropos.internals.values.python_values.python_values.AttrsContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinClass.fun_call": {
            "name": "fun_call",
            "location": 369,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "store": [],
                "args": [
                    "pytropos.internals.values.python_values.python_values.Args"
                ],
                "pos": [
                    "Optional[Tuple[(Optional[Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "BuiltinModule.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mod_name": [
                    "Optional[str]"
                ],
                "funcs": [
                    "Optional[Dict[(str, pytropos.internals.values.abstract_value.AbstractValue)]]"
                ],
                "read_only": [
                    "bool"
                ],
                "children": [
                    "Optional[Dict[(Any, pytropos.internals.values.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "BuiltinModule.__repr__": {
            "name": "__repr__",
            "location": 404,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinModule.__eq__": {
            "name": "__eq__",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BuiltinModule.top": {
            "name": "top",
            "location": 423,
            "return": [
                "_TBuiltinModule"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBuiltinModule]"
                ]
            }
        },
        "BuiltinModule.is_top": {
            "name": "is_top",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinModule.copy_mut": {
            "name": "copy_mut",
            "location": 431,
            "return": [
                "_TBuiltinModule"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinModule"
                ],
                "mut_heap": [
                    "Dict[(int, pytropos.internals.values.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "BuiltinModule.join_mut": {
            "name": "join_mut",
            "location": 442,
            "return": [
                "_TBuiltinModule"
            ],
            "arguments": {
                "self": [
                    "_TBuiltinModule"
                ],
                "other": [
                    "_TBuiltinModule"
                ],
                "mut_heap": [
                    "Dict[(Tuple[(str, int)], Tuple[(int, int, pytropos.internals.values.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "BuiltinModule.abstract_repr": {
            "name": "abstract_repr",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinModule.type_name": {
            "name": "type_name",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltinType.get_absvalue": {
            "name": "get_absvalue",
            "location": 472,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytropos-master/pytropos/internals/values/python_values/__init__.py": {},
    "pytropos-master/pytropos/libs_checking/numpy.py": {
        "__dims_from_Tuple": {
            "name": "__dims_from_Tuple",
            "location": 507,
            "return": [
                "typing.List[pv.builtin_values.Int]"
            ],
            "arguments": {
                "tpl": [
                    "pv.python_values.builtin_mutvalues.Tuple"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "_broadcast": {
            "name": "_broadcast",
            "location": 532,
            "return": [
                "Optional[pv.python_values.builtin_mutvalues.Tuple]"
            ],
            "arguments": {
                "left": [
                    "pv.python_values.builtin_mutvalues.Tuple"
                ],
                "right": [
                    "pv.python_values.builtin_mutvalues.Tuple"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "getshape_list": {
            "name": "getshape_list",
            "location": 568,
            "return": [
                "pv.python_values.builtin_mutvalues.Tuple"
            ],
            "arguments": {
                "lst": [
                    "Union[(pv.python_values.builtin_mutvalues.List, pv.python_values.builtin_mutvalues.Tuple)]"
                ]
            }
        },
        "getshape": {
            "name": "getshape",
            "location": 657,
            "return": [
                "Optional[pv.python_values.builtin_mutvalues.Tuple]"
            ],
            "arguments": {
                "absval": [
                    "pv.abstract_value.AbstractValue"
                ]
            }
        },
        "array_from_AbstractValue": {
            "name": "array_from_AbstractValue",
            "location": 672,
            "return": [
                "Optional[NdArray]"
            ],
            "arguments": {
                "absval": [
                    "pv.abstract_value.AbstractValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "_function_zeros": {
            "name": "_function_zeros",
            "location": 683,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "val": [
                    "pv.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "_function_array": {
            "name": "_function_array",
            "location": 687,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "val": [
                    "pv.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "function_from_method_array": {
            "name": "function_from_method_array",
            "location": 704,
            "return": [
                "Callable[(..., pv.python_values.python_values.PythonValue)]"
            ],
            "arguments": {
                "method": [
                    "Callable[(..., pv.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "NdArrayAnnotation.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "Optional[NdArray]"
                ],
                "children": [
                    "Optional[Dict[(Any, pv.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "NdArrayAnnotation.abstract_repr": {
            "name": "abstract_repr",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NdArrayAnnotation.type_name": {
            "name": "type_name",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NdArrayAnnotation.top": {
            "name": "top",
            "location": 72,
            "return": [
                "_TNdArrayAnnotation"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNdArrayAnnotation]"
                ]
            }
        },
        "NdArrayAnnotation.is_top": {
            "name": "is_top",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArrayAnnotation.copy_mut": {
            "name": "copy_mut",
            "location": 78,
            "return": [
                "_TNdArrayAnnotation"
            ],
            "arguments": {
                "self": [
                    "_TNdArrayAnnotation"
                ],
                "mut_heap": [
                    "Dict[(int, pv.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "NdArrayAnnotation.join_mut": {
            "name": "join_mut",
            "location": 87,
            "return": [
                "_TNdArrayAnnotation"
            ],
            "arguments": {
                "self": [
                    "_TNdArrayAnnotation"
                ],
                "other": [
                    "_TNdArrayAnnotation"
                ],
                "mut_heap": [
                    "Dict[(typing.Tuple[(str, int)], typing.Tuple[(int, int, pv.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "NdArrayAnnotation.get_subscripts": {
            "name": "get_subscripts",
            "location": 98,
            "return": [
                "pv.python_values.python_values.SubscriptsContainer"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "NdArrayAnnotation.get_absvalue": {
            "name": "get_absvalue",
            "location": 101,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArrayAnnotation.get_attrs": {
            "name": "get_attrs",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptsNdArrayAnnContainer.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "SubscriptsNdArrayAnnContainer.__getitem__": {
            "name": "__getitem__",
            "location": 115,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pv.python_values.python_values.PythonValue"
                ]
            }
        },
        "SubscriptsNdArrayAnnContainer.__delitem__": {
            "name": "__delitem__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "pv.python_values.python_values.PythonValue"
                ]
            }
        },
        "SubscriptsNdArrayAnnContainer.__setitem__": {
            "name": "__setitem__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_": [
                    "pv.python_values.python_values.PythonValue"
                ],
                "val": [
                    "pv.python_values.python_values.PythonValue"
                ]
            }
        },
        "NdArray.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "Optional[Union[(pv.python_values.builtin_mutvalues.Tuple, pv.python_values.python_values.PythonValue)]]"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ],
                "children": [
                    "Optional[Dict[(Any, pv.python_values.python_values.PythonValue)]]"
                ]
            }
        },
        "NdArray._check_tuple_all_ints": {
            "name": "_check_tuple_all_ints",
            "location": 200,
            "return": [
                "pv.python_values.builtin_mutvalues.Tuple"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "pv.python_values.builtin_mutvalues.Tuple"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "NdArray.__repr__": {
            "name": "__repr__",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray.__eq__": {
            "name": "__eq__",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NdArray.top": {
            "name": "top",
            "location": 233,
            "return": [
                "_TNdArray"
            ],
            "arguments": {
                "cls": [
                    "Type[_TNdArray]"
                ]
            }
        },
        "NdArray.is_top": {
            "name": "is_top",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray.copy_mut": {
            "name": "copy_mut",
            "location": 241,
            "return": [
                "_TNdArray"
            ],
            "arguments": {
                "self": [
                    "_TNdArray"
                ],
                "mut_heap": [
                    "Dict[(int, pv.python_values.python_values.PythonValue)]"
                ]
            }
        },
        "NdArray.join_mut": {
            "name": "join_mut",
            "location": 248,
            "return": [
                "_TNdArray"
            ],
            "arguments": {
                "self": [
                    "_TNdArray"
                ],
                "other": [
                    "_TNdArray"
                ],
                "mut_heap": [
                    "Dict[(typing.Tuple[(str, int)], typing.Tuple[(int, int, pv.python_values.python_values.PythonValue)])]"
                ]
            }
        },
        "NdArray.abstract_repr": {
            "name": "abstract_repr",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NdArray.type_name": {
            "name": "type_name",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NdArray.get_attrs": {
            "name": "get_attrs",
            "location": 268,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray.shape": {
            "name": "shape",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NdArray.__getattribute__": {
            "name": "__getattribute__",
            "location": 296,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "NdArray.op_OP_Any": {
            "name": "op_OP_Any",
            "location": 307,
            "return": [
                "Optional[NdArray]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "pv.abstract_value.AbstractValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "NdArray.op_OP": {
            "name": "op_OP",
            "location": 321,
            "return": [
                "_TNdArray"
            ],
            "arguments": {
                "self": [
                    "_TNdArray"
                ],
                "other": [
                    "_TNdArray"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "NdArray._attr_shape": {
            "name": "_attr_shape",
            "location": 333,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray._attr_ndim": {
            "name": "_attr_ndim",
            "location": 340,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray._attr_size": {
            "name": "_attr_size",
            "location": 352,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray._attr_pv_top": {
            "name": "_attr_pv_top",
            "location": 368,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray._attr_T": {
            "name": "_attr_T",
            "location": 371,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": []
            }
        },
        "NdArray._method_dot": {
            "name": "_method_dot",
            "location": 383,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "pv.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "NdArray._method_astype": {
            "name": "_method_astype",
            "location": 502,
            "return": [
                "pv.python_values.python_values.PythonValue"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "pv.python_values.python_values.PythonValue"
                ],
                "pos": [
                    "Optional[typing.Tuple[(Optional[typing.Tuple[(int, int)]], str)]]"
                ]
            }
        },
        "function_from_method_array.fun": {
            "name": "fun",
            "location": 716,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "pytropos-master/pytropos/libs_checking/__init__.py": {},
    "pytropos-master/tests/common_strategies.py": {},
    "pytropos-master/tests/test_control.py": {
        "TestIf.test_running_if_with_booltop_is_the_same_as_joining": {
            "name": "test_running_if_with_booltop_is_the_same_as_joining",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestIf.test_running_if_with_booltop_is_the_same_as_joining_noelse": {
            "name": "test_running_if_with_booltop_is_the_same_as_joining_noelse",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestWhile.test_running_simple_loop": {
            "name": "test_running_simple_loop",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "TestIf.test_running_if_with_booltop_is_the_same_as_joining.if_": {
            "name": "if_",
            "location": 32,
            "return": [],
            "arguments": {
                "st": []
            }
        },
        "TestIf.test_running_if_with_booltop_is_the_same_as_joining.else_": {
            "name": "else_",
            "location": 37,
            "return": [],
            "arguments": {
                "st": []
            }
        },
        "TestIf.test_running_if_with_booltop_is_the_same_as_joining_noelse.if_": {
            "name": "if_",
            "location": 68,
            "return": [],
            "arguments": {
                "st": []
            }
        },
        "TestWhile.test_running_simple_loop.while_qst": {
            "name": "while_qst",
            "location": 104,
            "return": [],
            "arguments": {
                "st": []
            }
        },
        "TestWhile.test_running_simple_loop.while_": {
            "name": "while_",
            "location": 107,
            "return": [],
            "arguments": {
                "st": []
            }
        }
    },
    "pytropos-master/tests/test_main.py": {
        "TestMain.test_help": {
            "name": "test_help",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "helparg": [],
                "capsys": []
            }
        },
        "TestMain.test_version": {
            "name": "test_version",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "versionarg": [],
                "capsys": []
            }
        },
        "TestMain._find_output_file_and_store": {
            "name": "_find_output_file_and_store",
            "location": 61,
            "return": [
                "Tuple[(str, int, Optional[Dict[(str, pytropos.internals.values.python_values.python_values.PythonValue)]])]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "TestMain.test_fail_and_success_in_examples": {
            "name": "test_fail_and_success_in_examples",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [],
                "capsys": []
            }
        }
    },
    "pytropos-master/tests/test_values.py": {
        "check_float_equality": {
            "name": "check_float_equality",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "f1": [
                    "float"
                ],
                "f2": [
                    "float"
                ]
            }
        },
        "TestInts.test_int_preserved": {
            "name": "test_int_preserved",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestInts.test_op_int": {
            "name": "test_op_int",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestInts.test_int_ops": {
            "name": "test_int_ops",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestInts.test_div_int": {
            "name": "test_div_int",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestInts.test_error_pos_is_correctly_passed_to_warning": {
            "name": "test_error_pos_is_correctly_passed_to_warning",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "src_pos": []
            }
        },
        "TestFloats.test_float_preserved": {
            "name": "test_float_preserved",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "TestFloats.test_op_float": {
            "name": "test_op_float",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestFloats.test_error_pos_is_correctly_passed_to_warning": {
            "name": "test_error_pos_is_correctly_passed_to_warning",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "src_pos": []
            }
        },
        "TestBools.test_bool_preserved": {
            "name": "test_bool_preserved",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_topness_of_none": {
            "name": "test_topness_of_none",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPythonValue.test_anything_operated_with_top_is_top": {
            "name": "test_anything_operated_with_top_is_top",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestPythonValue.test_float_and_ints_comform_to_baseline_python": {
            "name": "test_float_and_ints_comform_to_baseline_python",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_float_and_ints_comform_to_baseline_python_divs": {
            "name": "test_float_and_ints_comform_to_baseline_python_divs",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_float_from_operating_int_with_float": {
            "name": "test_float_from_operating_int_with_float",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_none_affects_everything": {
            "name": "test_none_affects_everything",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_op_bools_and_ints": {
            "name": "test_op_bools_and_ints",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_shifts_with_some_values": {
            "name": "test_shifts_with_some_values",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestPythonValue.test_bool_returns_always_a_Bool": {
            "name": "test_bool_returns_always_a_Bool",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestPythonValue.test_join_to_top_is_always_top": {
            "name": "test_join_to_top_is_always_top",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestPythonValue.test_join_between_same_types_results_in_same_value": {
            "name": "test_join_between_same_types_results_in_same_value",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "val1": [],
                "val2": []
            }
        }
    },
    "pytropos-master/tests/__init__.py": {},
    "pytropos-master/tests/inputs/future-features/19-list-subscript-nonsupported.py": {},
    "pytropos-master/tests/inputs/future-features/56-non-handled-multiple-assignment.py": {},
    "pytropos-master/tests/inputs/future-features/61-function-as-an-object.py": {
        "f": {
            "name": "f",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/future-features/62-for-loop-construct.py": {},
    "pytropos-master/tests/inputs/future-features/63-for-loop-construct-caveat.py": {},
    "pytropos-master/tests/inputs/future-features/64-failures-accessing-to-attribute.py": {
        "b": {
            "name": "b",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.b": {
            "name": "b",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/future-features/65-all-numeric-ops.py": {},
    "pytropos-master/tests/inputs/future-features/66-augassign-all-numeric-ops.py": {},
    "pytropos-master/tests/inputs/future-features/67-all-bool-ops.py": {},
    "pytropos-master/tests/inputs/future-features/68-all-unary-ops.py": {},
    "pytropos-master/tests/inputs/future-features/69-all-cmp-ops.py": {},
    "pytropos-master/tests/inputs/future-features/70-multiple-cmps.py": {},
    "pytropos-master/tests/inputs/future-features/71-classes-with-primitives.py": {
        "A.__add__": {
            "name": "__add__",
            "location": 2,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "s": [
                    "A"
                ],
                "o": []
            }
        },
        "A.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "A"
                ],
                "val": []
            }
        }
    },
    "pytropos-master/tests/inputs/future-features/73-implementation-details-on-operators.py": {
        "A.__add__": {
            "name": "__add__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "A"
                ],
                "o": []
            }
        }
    },
    "pytropos-master/tests/inputs/future-features/74-insane-iterators.py": {
        "f": {
            "name": "f",
            "location": 1,
            "return": [
                "Generator[(int, Any, None)]"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/future-features/75-numpy-subscript-access.py": {},
    "pytropos-master/tests/inputs/future-features/77-append-method-wrapped-everytime-is-obtained.py": {
        "A.fun": {
            "name": "fun",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytropos-master/tests/inputs/future-features/88-type-hints-multiple.py": {
        "what": {
            "name": "what",
            "location": 1,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "what.f": {
            "name": "f",
            "location": 3,
            "return": [],
            "arguments": {
                "val": []
            }
        }
    },
    "pytropos-master/tests/inputs/if-branching/02-if-test.py": {},
    "pytropos-master/tests/inputs/if-branching/03-if-test.py": {},
    "pytropos-master/tests/inputs/if-branching/04-if-test.py": {},
    "pytropos-master/tests/inputs/if-branching/15-builtin-functions-join.py": {},
    "pytropos-master/tests/inputs/if-branching/17-mergin-with-nonexistent.py": {},
    "pytropos-master/tests/inputs/if-branching/18-join-with-function.py": {},
    "pytropos-master/tests/inputs/if-branching/27-join-to-top-mut.py": {},
    "pytropos-master/tests/inputs/if-branching/28-join-to-top-mut.py": {},
    "pytropos-master/tests/inputs/if-branching/29-join-to-top-mut.py": {},
    "pytropos-master/tests/inputs/if-branching/50-joining-arrays.py": {},
    "pytropos-master/tests/inputs/if-branching/57-joining-lists.py": {},
    "pytropos-master/tests/inputs/if-branching/58-joining-lists.py": {},
    "pytropos-master/tests/inputs/if-branching/83-joining_two_lists_losing_all_info.py": {},
    "pytropos-master/tests/inputs/if-branching/84-joining_two_lists_deleting_a_lot.py": {},
    "pytropos-master/tests/inputs/if-branching/85-joining_two_lists_deleting_a_lot.py": {},
    "pytropos-master/tests/inputs/if-branching/91-joining-bad-ref-to-list-into-toplist.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/02-if-test-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/03-if-test-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/04-if-test-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/15-builtin-functions-join-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/17-mergin-with-nonexistent-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/18-join-with-function-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/27-join-to-top-mut-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/28-join-to-top-mut-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/29-join-to-top-mut-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/50-joining-arrays-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/if-branching/outputs/57-joining-lists-store.py": {},
    "pytropos-master/tests/inputs/if-branching/outputs/58-joining-lists-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/10-list-test.py": {},
    "pytropos-master/tests/inputs/lists-tuples/11-list-test.py": {},
    "pytropos-master/tests/inputs/lists-tuples/12-list-test.py": {},
    "pytropos-master/tests/inputs/lists-tuples/20-list-subscript.py": {},
    "pytropos-master/tests/inputs/lists-tuples/21-list-index-outofrange.py": {},
    "pytropos-master/tests/inputs/lists-tuples/22-list-index-bad.py": {},
    "pytropos-master/tests/inputs/lists-tuples/23-list-index-bad.py": {},
    "pytropos-master/tests/inputs/lists-tuples/24-list-index-bad.py": {},
    "pytropos-master/tests/inputs/lists-tuples/25-list-index-bad.py": {},
    "pytropos-master/tests/inputs/lists-tuples/26-list-destruction.py": {},
    "pytropos-master/tests/inputs/lists-tuples/30-list-complex-insertion.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/10-list-test-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/11-list-test-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/12-list-test-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/20-list-subscript-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/21-list-index-outofrange-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/22-list-index-bad-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/23-list-index-bad-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/25-list-index-bad-store.py": {},
    "pytropos-master/tests/inputs/lists-tuples/outputs/26-list-destruction-store.py": {},
    "pytropos-master/tests/inputs/loops/05-while-test.py": {},
    "pytropos-master/tests/inputs/loops/06-while-test.py": {},
    "pytropos-master/tests/inputs/loops/07-while-test.py": {},
    "pytropos-master/tests/inputs/loops/08-while-test.py": {},
    "pytropos-master/tests/inputs/loops/09-while-test.py": {},
    "pytropos-master/tests/inputs/loops/34-module-in-loop.py": {},
    "pytropos-master/tests/inputs/loops/35-list-in-loop.py": {},
    "pytropos-master/tests/inputs/loops/51-arrays-in-loop.py": {},
    "pytropos-master/tests/inputs/loops/59-widen-op-in-lists.py": {},
    "pytropos-master/tests/inputs/loops/60-while-inside-if.py": {},
    "pytropos-master/tests/inputs/loops/92-list-loop-with-joining-inside.py": {},
    "pytropos-master/tests/inputs/loops/outputs/05-while-test-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/06-while-test-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/07-while-test-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/08-while-test-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/09-while-test-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/34-module-in-loop-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/35-list-in-loop-store.py": {},
    "pytropos-master/tests/inputs/loops/outputs/51-arrays-in-loop-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/loops/outputs/60-while-inside-if-store.py": {},
    "pytropos-master/tests/inputs/misc/01-zero-division-fail.py": {},
    "pytropos-master/tests/inputs/misc/13-call-fail.py": {},
    "pytropos-master/tests/inputs/misc/14-attribute-access.py": {},
    "pytropos-master/tests/inputs/misc/47-import-from-star.py": {},
    "pytropos-master/tests/inputs/misc/72-access-to-attrs-int.py": {},
    "pytropos-master/tests/inputs/misc/79-unicode-variable-names.py": {},
    "pytropos-master/tests/inputs/misc/81-builtin-funcs.py": {},
    "pytropos-master/tests/inputs/misc/outputs/01-zero-division-fail-store.py": {},
    "pytropos-master/tests/inputs/misc/outputs/13-call-fail-store.py": {},
    "pytropos-master/tests/inputs/misc/outputs/14-attribute-access-store.py": {},
    "pytropos-master/tests/inputs/misc/outputs/47-import-from-star-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/16-join-numpy.py": {},
    "pytropos-master/tests/inputs/numpy-lib/31-numpy-changing-shape.py": {},
    "pytropos-master/tests/inputs/numpy-lib/32-numpy-not-valid-index.py": {},
    "pytropos-master/tests/inputs/numpy-lib/33-numpy-join-initialising-w-list.py": {},
    "pytropos-master/tests/inputs/numpy-lib/36-numpy-from-list.py": {},
    "pytropos-master/tests/inputs/numpy-lib/37-numpy-from-list-with-for.py": {},
    "pytropos-master/tests/inputs/numpy-lib/38-example-from-readme.py": {},
    "pytropos-master/tests/inputs/numpy-lib/39-using-numpy-array.py": {},
    "pytropos-master/tests/inputs/numpy-lib/40-using-numpy-array.py": {},
    "pytropos-master/tests/inputs/numpy-lib/41-using-numpy-array-caveats.py": {},
    "pytropos-master/tests/inputs/numpy-lib/42-numpy-array-addition.py": {},
    "pytropos-master/tests/inputs/numpy-lib/43-numpy-broadcasting.py": {},
    "pytropos-master/tests/inputs/numpy-lib/44-numpy-arange.py": {},
    "pytropos-master/tests/inputs/numpy-lib/45-np_ndims.py": {},
    "pytropos-master/tests/inputs/numpy-lib/46-numpy-typehints.py": {},
    "pytropos-master/tests/inputs/numpy-lib/49-numpy-dot.py": {},
    "pytropos-master/tests/inputs/numpy-lib/52-np-functions-that-dont-modify-array.py": {},
    "pytropos-master/tests/inputs/numpy-lib/53-size-attribute-numpy.py": {},
    "pytropos-master/tests/inputs/numpy-lib/54-some-numpy-ufuncs.py": {},
    "pytropos-master/tests/inputs/numpy-lib/55-numpy-T.py": {},
    "pytropos-master/tests/inputs/numpy-lib/76-numpy-hints-readme-example.py": {},
    "pytropos-master/tests/inputs/numpy-lib/78-reshaping-none.py": {},
    "pytropos-master/tests/inputs/numpy-lib/80-numpy-float-as-dim.py": {},
    "pytropos-master/tests/inputs/numpy-lib/82-numpy-hints-overwriting.py": {},
    "pytropos-master/tests/inputs/numpy-lib/86-numpy-float-as-dim.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/16-join-numpy-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/31-numpy-changing-shape-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/32-numpy-not-valid-index-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/33-numpy-join-initialising-w-list-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/36-numpy-from-list-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/38-example-from-readme-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/39-using-numpy-array-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/40-using-numpy-array-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/41-using-numpy-array-caveats-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/42-numpy-array-addition-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/43-numpy-broadcasting-store.py": {
        "to_pv_Tuple": {
            "name": "to_pv_Tuple",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/45-np_ndims-store.py": {},
    "pytropos-master/tests/inputs/numpy-lib/outputs/46-numpy-typehints-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/49-numpy-dot-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/52-np-functions-that-dont-modify-array-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/53-size-attribute-numpy-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/54-some-numpy-ufuncs-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        },
        "list_int": {
            "name": "list_int",
            "location": 13,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/55-numpy-T-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/numpy-lib/outputs/76-numpy-hints-readme-example-store.py": {
        "ndarray_": {
            "name": "ndarray_",
            "location": 10,
            "return": [
                "pytropos.internals.values.python_values.python_values.PythonValue"
            ],
            "arguments": {}
        }
    },
    "pytropos-master/tests/inputs/type-hints/48-type-hints-input-and-regular-int.py": {},
    "pytropos-master/tests/inputs/type-hints/87-type-hints-floats.py": {},
    "pytropos-master/tests/inputs/type-hints/89-type-hints-multiple.py": {},
    "pytropos-master/tests/inputs/type-hints/90-primitive-value-as-type-hint-failure.py": {},
    "pytropos-master/tests/inputs/type-hints/outputs/48-type-hints-input-and-regular-int-store.py": {},
    "pytropos-master/tests/inputs-external/ml-course-unal-assign1.py": {
        "E": {
            "name": "E",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "X": [],
                "PX": []
            }
        }
    },
    "pytropos-master/tests/inputs-external/ml-course-unal-probability_in_numpy.py": {},
    "pytropos-master/tests/inputs-external/from_numpy_docs/np_add.py": {},
    "pytropos-master/tests/inputs-external/from_numpy_docs/np_append.py": {},
    "pytropos-master/tests/inputs-external/from_numpy_docs/np_astype.py": {},
    "pytropos-master/tests/inputs-external/from_numpy_docs/np_concatenate.py": {}
}
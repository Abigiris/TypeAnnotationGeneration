{
    "qlu-scheduler-master/schedule_github_projects.py": {
        "schedule_projects": {
            "name": "schedule_projects",
            "location": 32,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "org": [],
                "projects": [],
                "milestone_start_dates": [],
                "phantom_user_count": []
            }
        },
        "perform_montecarlo": {
            "name": "perform_montecarlo",
            "location": 43,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "org": [],
                "projects": [],
                "milestone_start_dates": [],
                "phantom_user_count": [],
                "montecarlo_trials": [],
                "percentile": []
            }
        }
    },
    "qlu-scheduler-master/setup.py": {},
    "qlu-scheduler-master/qlu/core.py": {
        "AssigneeWorkDateIterator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "holiday_calendar": [],
                "workdays": [],
                "personal_holidays": [],
                "start_date": []
            }
        },
        "AssigneeWorkDateIterator.__iter__": {
            "name": "__iter__",
            "location": 111,
            "return": [
                "_TAssigneeWorkDateIterator@@AssigneeWorkDateIterator@@"
            ],
            "arguments": {
                "self": [
                    "_TAssigneeWorkDateIterator@@AssigneeWorkDateIterator@@"
                ]
            }
        },
        "AssigneeWorkDateIterator.__next__": {
            "name": "__next__",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluTask.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "absolute_priority": [],
                "estimates": [],
                "assignee": [],
                "project_id": [],
                "milestone_id": [],
                "depends_on": []
            }
        },
        "QluTask.start_date": {
            "name": "start_date",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QluTask.end_date": {
            "name": "end_date",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QluTask.is_scheduled": {
            "name": "is_scheduled",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QluTask.get_scheduled_dates": {
            "name": "get_scheduled_dates",
            "location": 170,
            "return": [
                "Generator[(nothing, Any, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluTask.__iter__": {
            "name": "__iter__",
            "location": 176,
            "return": [
                "_TQluTask@@QluTask@@"
            ],
            "arguments": {
                "self": [
                    "_TQluTask@@QluTask@@"
                ]
            }
        },
        "QluTask.__next__": {
            "name": "__next__",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluTask.__getitem__": {
            "name": "__getitem__",
            "location": 188,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "QluTask.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluTask.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluSchedule.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduled_tasks": [],
                "assignee_tasks": []
            }
        },
        "QluSchedule.milestone_tasks": {
            "name": "milestone_tasks",
            "location": 215,
            "return": [
                "Generator[(Tuple[(nothing, list)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluSchedule.tasks": {
            "name": "tasks",
            "location": 229,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "assignee": []
            }
        },
        "QluSchedule.assignees": {
            "name": "assignees",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QluSchedule.final_task": {
            "name": "final_task",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "assignee": []
            }
        },
        "QluSchedule.final_date": {
            "name": "final_date",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "assignee": []
            }
        },
        "QluTaskScheduler.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "milestones": [],
                "holiday_calendar": [],
                "assignee_workdays": [],
                "assignee_personal_holidays": [],
                "start_date": []
            }
        },
        "QluTaskScheduler.montecarlo": {
            "name": "montecarlo",
            "location": 299,
            "return": [
                "Tuple[(collections.defaultdict, Dict[(Any, datetime.datetime)])]"
            ],
            "arguments": {
                "self": [],
                "tasks": [],
                "trials": [],
                "q": []
            }
        },
        "QluTaskScheduler._check_milestones": {
            "name": "_check_milestones",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_keyed_tasks": []
            }
        },
        "QluTaskScheduler._prepare_assignee_workday_iterators": {
            "name": "_prepare_assignee_workday_iterators",
            "location": 337,
            "return": [
                "Dict[(Any, AssigneeWorkDateIterator)]"
            ],
            "arguments": {
                "self": [],
                "unique_assignees": []
            }
        },
        "QluTaskScheduler._prepare_task_dependency_graph": {
            "name": "_prepare_task_dependency_graph",
            "location": 380,
            "return": [
                "List[set]"
            ],
            "arguments": {
                "self": [],
                "dependant_tasks": []
            }
        },
        "QluTaskScheduler._schedule_tasks": {
            "name": "_schedule_tasks",
            "location": 402,
            "return": [
                "Tuple[(_T0, collections.defaultdict[(nothing, Any)])]"
            ],
            "arguments": {
                "self": [],
                "id_keyed_tasks": [
                    "_T0@@"
                ],
                "dependency_graph": [],
                "unique_assignees": [],
                "is_montecarlo": []
            }
        },
        "QluTaskScheduler.schedule": {
            "name": "schedule",
            "location": 486,
            "return": [
                "QluSchedule"
            ],
            "arguments": {
                "self": [],
                "tasks": [],
                "is_montecarlo": []
            }
        }
    },
    "qlu-scheduler-master/qlu/utilities.py": {
        "AssigneeChooser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignees": [],
                "distribution": [],
                "dargs": [],
                "dkwargs": []
            }
        },
        "AssigneeChooser.choice": {
            "name": "choice",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhantomUserAssignmentManager.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "phantom_user_count": []
            }
        },
        "PhantomUserAssignmentManager.get_phantom_usernames": {
            "name": "get_phantom_usernames",
            "location": 58,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user_count": [],
                "usesrname_prefix": []
            }
        },
        "PhantomUserAssignmentManager.assign": {
            "name": "assign",
            "location": 75,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "tasks": [],
                "distribution_func": [],
                "dargs": [],
                "dkwargs": []
            }
        }
    },
    "qlu-scheduler-master/qlu/__init__.py": {},
    "qlu-scheduler-master/qlu/adapters/github.py": {
        "GithubOrganizationProjectsAdaptor.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organization": [],
                "projects": [],
                "milestone_start_dates": [],
                "holiday_calendar": [],
                "personal_holidays": [],
                "phantom_user_count": [],
                "start_date": [],
                "milestone_start_date_now": []
            }
        },
        "GithubOrganizationProjectsAdaptor._collect_tasks": {
            "name": "_collect_tasks",
            "location": 78,
            "return": [
                "List[qlu.core.QluTask]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubOrganizationProjectsAdaptor._collect_milestones": {
            "name": "_collect_milestones",
            "location": 174,
            "return": [
                "dict_values[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubOrganizationProjectsAdaptor.generate_task_scheduler": {
            "name": "generate_task_scheduler",
            "location": 182,
            "return": [
                "qlu.core.QluSchedule"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qlu-scheduler-master/qlu/adapters/__init__.py": {},
    "qlu-scheduler-master/tests/test_assigneeworkdateiterator.py": {
        "test_assigneeworkdateiterator_default": {
            "name": "test_assigneeworkdateiterator_default",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assigneeworkdateiterator_singleworkday": {
            "name": "test_assigneeworkdateiterator_singleworkday",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assigneeworkdateiterator_invalid_workday_value": {
            "name": "test_assigneeworkdateiterator_invalid_workday_value",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assigneeworkdateiterator_with_personal_holidays": {
            "name": "test_assigneeworkdateiterator_with_personal_holidays",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assigneeworkdateiterator_with_personal_holidays_workday_overlap": {
            "name": "test_assigneeworkdateiterator_with_personal_holidays_workday_overlap",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qlu-scheduler-master/tests/test_core_qlutask.py": {
        "QluTaskTestCase.test_get_scheduled_dates": {
            "name": "test_get_scheduled_dates",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qlu-scheduler-master/tests/test_scheduler.py": {
        "test_qlutask_instantiation": {
            "name": "test_qlutask_instantiation",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scheduler": {
            "name": "test_scheduler",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiproject_scheduler": {
            "name": "test_multiproject_scheduler",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scheduler_montecarlo": {
            "name": "test_scheduler_montecarlo",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phantomuserassignementmanager_assignee_generation": {
            "name": "test_phantomuserassignementmanager_assignee_generation",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phantomuserassignmentmanager_task_assignment": {
            "name": "test_phantomuserassignmentmanager_task_assignment",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assigneechooser_default": {
            "name": "test_assigneechooser_default",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phantom_user_assignment": {
            "name": "test_phantom_user_assignment",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qlu-scheduler-master/tests/__init__.py": {}
}
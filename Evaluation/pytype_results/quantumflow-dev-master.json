{
    "quantumflow-dev-master/setup.py": {},
    "quantumflow-dev-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "do_edits": {
            "name": "do_edits",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/circuit_compilation.py": {},
    "quantumflow-dev-master/examples/circuit_identities.py": {
        "identities": {
            "name": "identities",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "_print_circuit_identity": {
            "name": "_print_circuit_identity",
            "location": 586,
            "return": [],
            "arguments": {
                "name": [],
                "circ0": [],
                "circ1": [],
                "min_col_width": [],
                "col_sep": [],
                "left_margin": []
            }
        },
        "_check_circuit_identities": {
            "name": "_check_circuit_identities",
            "location": 614,
            "return": [],
            "arguments": {
                "circuit_identities": []
            }
        },
        "identities.cphase_to_zz": {
            "name": "cphase_to_zz",
            "location": 443,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "identities.cphase00_to_zz": {
            "name": "cphase00_to_zz",
            "location": 449,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "identities.cphase01_to_zz": {
            "name": "cphase01_to_zz",
            "location": 457,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "identities.cphase10_to_zz": {
            "name": "cphase10_to_zz",
            "location": 463,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/examples/circuit_visulizations.py": {},
    "quantumflow-dev-master/examples/cswap_decomposition.py": {},
    "quantumflow-dev-master/examples/examples_test.py": {
        "test_prepare_w4_main": {
            "name": "test_prepare_w4_main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_w16_main": {
            "name": "test_prepare_w16_main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_cswap_decomposition": {
            "name": "test_prepare_cswap_decomposition",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_swap_test_main": {
            "name": "test_swap_test_main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_circuit_identities_main": {
            "name": "test_circuit_identities_main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gate_translate_identities_main": {
            "name": "test_gate_translate_identities_main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/gate_translations.py": {
        "_check_circuit_translations": {
            "name": "_check_circuit_translations",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "_print_circuit_identity": {
            "name": "_print_circuit_identity",
            "location": 48,
            "return": [],
            "arguments": {
                "name": [],
                "circ0": [],
                "circ1": [],
                "min_col_width": [],
                "col_sep": [],
                "left_margin": []
            }
        }
    },
    "quantumflow-dev-master/examples/gops.py": {
        "benchmark_circuit": {
            "name": "benchmark_circuit",
            "location": 14,
            "return": [],
            "arguments": {
                "N": [],
                "gate_nb": [],
                "gate": []
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/state_prep_w16.py": {
        "prepare_w16": {
            "name": "prepare_w16",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "w16_circuit": {
            "name": "w16_circuit",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/state_prep_w4.py": {
        "prepare_w4": {
            "name": "prepare_w4",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/swaptest.py": {
        "swap_test": {
            "name": "swap_test",
            "location": 16,
            "return": [],
            "arguments": {
                "ket": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/examples/weyl.py": {
        "sandwich_decompositions": {
            "name": "sandwich_decompositions",
            "location": 85,
            "return": [],
            "arguments": {
                "coords0": [],
                "coords1": [],
                "samples": []
            }
        },
        "display_weyl": {
            "name": "display_weyl",
            "location": 103,
            "return": [],
            "arguments": {
                "decomps": []
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 185,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/about.py": {},
    "quantumflow-dev-master/quantumflow/channels.py": {
        "join_channels": {
            "name": "join_channels",
            "location": 235,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "chan0": [
                    "quantumflow.ops.Channel"
                ],
                "chan1": [
                    "quantumflow.ops.Channel"
                ]
            }
        },
        "channel_to_kraus": {
            "name": "channel_to_kraus",
            "location": 243,
            "return": [
                "Kraus"
            ],
            "arguments": {
                "chan": [
                    "quantumflow.ops.Channel"
                ]
            }
        },
        "kraus_iscomplete": {
            "name": "kraus_iscomplete",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "kraus": [
                    "Kraus"
                ]
            }
        },
        "random_channel": {
            "name": "random_channel",
            "location": 289,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "qubits": [],
                "rank": [
                    "int"
                ],
                "unital": [
                    "bool"
                ]
            }
        },
        "Kraus.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operators": [
                    "Sequence[quantumflow.ops.Gate]"
                ],
                "weights": [
                    "Sequence[float]"
                ]
            }
        },
        "Kraus.asgate": {
            "name": "asgate",
            "location": 97,
            "return": [
                "quantumflow.ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraus.aschannel": {
            "name": "aschannel",
            "location": 104,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraus.run": {
            "name": "run",
            "location": 117,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Kraus.evolve": {
            "name": "evolve",
            "location": 127,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "Kraus.qubits": {
            "name": "qubits",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Kraus.H": {
            "name": "H",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitaryMixture.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operators": [
                    "Sequence[quantumflow.ops.Gate]"
                ],
                "weights": [
                    "Sequence[float]"
                ]
            }
        },
        "UnitaryMixture.asgate": {
            "name": "asgate",
            "location": 182,
            "return": [
                "quantumflow.ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitaryMixture.run": {
            "name": "run",
            "location": 188,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Depolarizing.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "float"
                ],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "Damping.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "float"
                ],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "Dephasing.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "float"
                ],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        }
    },
    "quantumflow-dev-master/quantumflow/channels_test.py": {
        "test_transpose_map": {
            "name": "test_transpose_map",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_random_density": {
            "name": "test_random_density",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_density": {
            "name": "test_density",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_state_to_density": {
            "name": "test_state_to_density",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_purity": {
            "name": "test_purity",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_stdkraus_creation": {
            "name": "test_stdkraus_creation",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "test_stdchannels_creation": {
            "name": "test_stdchannels_creation",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_channel_chi": {
            "name": "test_channel_chi",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_channle_choi": {
            "name": "test_channle_choi",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_sample_coin": {
            "name": "test_sample_coin",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_sample_bell": {
            "name": "test_sample_bell",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_biased_coin": {
            "name": "test_biased_coin",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_measurement": {
            "name": "test_measurement",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_qaoa": {
            "name": "test_qaoa",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_amplitude_damping": {
            "name": "test_amplitude_damping",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_depolarizing": {
            "name": "test_depolarizing",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_kruas_qubits": {
            "name": "test_kruas_qubits",
            "location": 234,
            "return": [],
            "arguments": {}
        },
        "test_kraus_evolve": {
            "name": "test_kraus_evolve",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "test_kraus_run": {
            "name": "test_kraus_run",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_channel_adjoint": {
            "name": "test_channel_adjoint",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "test_kraus_qubits": {
            "name": "test_kraus_qubits",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "test_chan_qubits": {
            "name": "test_chan_qubits",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "test_chan_permute": {
            "name": "test_chan_permute",
            "location": 309,
            "return": [],
            "arguments": {}
        },
        "test_channel_errors": {
            "name": "test_channel_errors",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_kraus_errors": {
            "name": "test_kraus_errors",
            "location": 341,
            "return": [],
            "arguments": {}
        },
        "test_kraus_complete": {
            "name": "test_kraus_complete",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_askraus": {
            "name": "test_askraus",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "test_channel_trace": {
            "name": "test_channel_trace",
            "location": 377,
            "return": [],
            "arguments": {}
        },
        "test_channel_join": {
            "name": "test_channel_join",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_create_channel": {
            "name": "test_create_channel",
            "location": 389,
            "return": [],
            "arguments": {}
        },
        "test_random_channel": {
            "name": "test_random_channel",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "test_askraus._roundtrip": {
            "name": "_roundtrip",
            "location": 361,
            "return": [],
            "arguments": {
                "kraus": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/circuits.py": {
        "count_operations": {
            "name": "count_operations",
            "location": 266,
            "return": [
                "Dict[(Type[quantumflow.ops.Operation], int)]"
            ],
            "arguments": {
                "elements": [
                    "Iterable[quantumflow.ops.Operation]"
                ]
            }
        },
        "map_gate": {
            "name": "map_gate",
            "location": 277,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "args": [
                    "Sequence"
                ]
            }
        },
        "control_circuit": {
            "name": "control_circuit",
            "location": 296,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "controls": [],
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "zyz_circuit": {
            "name": "zyz_circuit",
            "location": 329,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "t0": [],
                "t1": [],
                "t2": [],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "euler_circuit": {
            "name": "euler_circuit",
            "location": 334,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "t0": [],
                "t1": [],
                "t2": [],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ],
                "euler": [
                    "str"
                ]
            }
        },
        "phase_estimation_circuit": {
            "name": "phase_estimation_circuit",
            "location": 364,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "outputs": []
            }
        },
        "addition_circuit": {
            "name": "addition_circuit",
            "location": 405,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "addend0": [],
                "addend1": [],
                "carry": []
            }
        },
        "ghz_circuit": {
            "name": "ghz_circuit",
            "location": 458,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "graph_circuit_params": {
            "name": "graph_circuit_params",
            "location": 471,
            "return": [
                "Sequence[float]"
            ],
            "arguments": {
                "topology": [],
                "steps": [
                    "int"
                ],
                "init_bias": [
                    "float"
                ],
                "init_scale": [
                    "float"
                ]
            }
        },
        "graph_circuit": {
            "name": "graph_circuit",
            "location": 483,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "topology": [],
                "steps": [
                    "int"
                ],
                "params": [
                    "Sequence[float]"
                ]
            }
        },
        "graph_state_circuit": {
            "name": "graph_state_circuit",
            "location": 548,
            "return": [
                "Circuit"
            ],
            "arguments": {
                "topology": []
            }
        },
        "Circuit.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.__getitem__": {
            "name": "__getitem__",
            "location": 123,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "key": [
                    "slice"
                ]
            }
        },
        "Circuit.__len__": {
            "name": "__len__",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.add": {
            "name": "add",
            "location": 131,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "other": [
                    "Iterable[quantumflow.ops.Operation]"
                ]
            }
        },
        "Circuit.__add__": {
            "name": "__add__",
            "location": 135,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "other": [
                    "_TCircuit"
                ]
            }
        },
        "Circuit.__iadd__": {
            "name": "__iadd__",
            "location": 138,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "other": [
                    "Iterable"
                ]
            }
        },
        "Circuit.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [
                "Iterator[quantumflow.ops.Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.flat": {
            "name": "flat",
            "location": 146,
            "return": [
                "Iterator[quantumflow.ops.Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.size": {
            "name": "size",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.on": {
            "name": "on",
            "location": 160,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ]
            }
        },
        "Circuit.rewire": {
            "name": "rewire",
            "location": 167,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "Circuit.run": {
            "name": "run",
            "location": 172,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Circuit.evolve": {
            "name": "evolve",
            "location": 186,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "Circuit.asgate": {
            "name": "asgate",
            "location": 195,
            "return": [
                "quantumflow.ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.aschannel": {
            "name": "aschannel",
            "location": 203,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.H": {
            "name": "H",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Circuit.__str__": {
            "name": "__str__",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.resolve": {
            "name": "resolve",
            "location": 224,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "Circuit.params": {
            "name": "params",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Circuit.param": {
            "name": "param",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Circuit.specialize": {
            "name": "specialize",
            "location": 236,
            "return": [
                "_TCircuit"
            ],
            "arguments": {
                "self": [
                    "_TCircuit"
                ]
            }
        },
        "Circuit.decompose": {
            "name": "decompose",
            "location": 241,
            "return": [
                "Iterator[quantumflow.ops.Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit._repr_png_": {
            "name": "_repr_png_",
            "location": 246,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit._repr_html_": {
            "name": "_repr_html_",
            "location": 255,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "addition_circuit._maj": {
            "name": "_maj",
            "location": 423,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "addition_circuit._uma": {
            "name": "_uma",
            "location": 431,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "graph_circuit.tx_layer": {
            "name": "tx_layer",
            "location": 506,
            "return": [],
            "arguments": {
                "topology": [],
                "layer_params": []
            }
        },
        "graph_circuit.tz_layer": {
            "name": "tz_layer",
            "location": 512,
            "return": [],
            "arguments": {
                "topology": [],
                "layer_params": []
            }
        },
        "graph_circuit.zz_layer": {
            "name": "zz_layer",
            "location": 518,
            "return": [],
            "arguments": {
                "topology": [],
                "layer_params": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/circuits_test.py": {
        "true_ket": {
            "name": "true_ket",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_qaoa_circuit": {
            "name": "test_qaoa_circuit",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_qaoa_circuit_turns": {
            "name": "test_qaoa_circuit_turns",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_circuit_wires": {
            "name": "test_circuit_wires",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_implicit_state": {
            "name": "test_implicit_state",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_elements": {
            "name": "test_elements",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_ccnot_circuit_evolve": {
            "name": "test_ccnot_circuit_evolve",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "test_circuit_aschannel": {
            "name": "test_circuit_aschannel",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_control_circuit": {
            "name": "test_control_circuit",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_phase_estimation_circuit_1": {
            "name": "test_phase_estimation_circuit_1",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_phase_estimation_circuit_2": {
            "name": "test_phase_estimation_circuit_2",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_phase_estimation_circuit_3": {
            "name": "test_phase_estimation_circuit_3",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_addition_circuit": {
            "name": "test_addition_circuit",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "test_ghz_circuit": {
            "name": "test_ghz_circuit",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_map_gate": {
            "name": "test_map_gate",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_count_operations": {
            "name": "test_count_operations",
            "location": 325,
            "return": [],
            "arguments": {}
        },
        "test_graph_circuit": {
            "name": "test_graph_circuit",
            "location": 338,
            "return": [],
            "arguments": {}
        },
        "test_graph_state_circuit": {
            "name": "test_graph_state_circuit",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_circuit_params": {
            "name": "test_circuit_params",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "test_circuit_qubits": {
            "name": "test_circuit_qubits",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_circuit_flat": {
            "name": "test_circuit_flat",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_circuit_flat_lists": {
            "name": "test_circuit_flat_lists",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "test_circuit_order": {
            "name": "test_circuit_order",
            "location": 395,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/config.py": {
        "about": {
            "name": "about",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "TextIO"
                ]
            }
        }
    },
    "quantumflow-dev-master/quantumflow/config_test.py": {
        "test_version": {
            "name": "test_version",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_about": {
            "name": "test_about",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_about_main": {
            "name": "test_about_main",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_copyright": {
            "name": "test_copyright",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/dagcircuit.py": {
        "In.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "In.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "In.__hash__": {
            "name": "__hash__",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Out.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q0": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "Out.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Out.__hash__": {
            "name": "__hash__",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Iterable[quantumflow.ops.Operation]"
                ]
            }
        },
        "DAGCircuit.append": {
            "name": "append",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "quantumflow.ops.Operation"
                ]
            }
        },
        "DAGCircuit.qubits": {
            "name": "qubits",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.qubit_nb": {
            "name": "qubit_nb",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.on": {
            "name": "on",
            "location": 115,
            "return": [
                "_TDAGCircuit"
            ],
            "arguments": {
                "self": [
                    "_TDAGCircuit"
                ]
            }
        },
        "DAGCircuit.rewire": {
            "name": "rewire",
            "location": 118,
            "return": [
                "_TDAGCircuit"
            ],
            "arguments": {
                "self": [
                    "_TDAGCircuit"
                ],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "DAGCircuit.H": {
            "name": "H",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.run": {
            "name": "run",
            "location": 125,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "DAGCircuit.evolve": {
            "name": "evolve",
            "location": 130,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "DAGCircuit.asgate": {
            "name": "asgate",
            "location": 135,
            "return": [
                "quantumflow.ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.aschannel": {
            "name": "aschannel",
            "location": 160,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.depth": {
            "name": "depth",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "local": [
                    "bool"
                ]
            }
        },
        "DAGCircuit.size": {
            "name": "size",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.component_nb": {
            "name": "component_nb",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.components": {
            "name": "components",
            "location": 191,
            "return": [
                "List[DAGCircuit]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.moments": {
            "name": "moments",
            "location": 197,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.layers": {
            "name": "layers",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.__iter__": {
            "name": "__iter__",
            "location": 242,
            "return": [
                "Iterator[quantumflow.ops.Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.next_element": {
            "name": "next_element",
            "location": 249,
            "return": [
                "quantumflow.ops.Operation"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "quantumflow.ops.Operation"
                ],
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "DAGCircuit.prev_element": {
            "name": "prev_element",
            "location": 256,
            "return": [
                "quantumflow.ops.Operation"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "quantumflow.ops.Operation"
                ],
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "DAGCircuit.next_edges": {
            "name": "next_edges",
            "location": 262,
            "return": [
                "List[Tuple[(Any, Any, quantumflow.qubits.Qubit)]]"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "quantumflow.ops.Operation"
                ]
            }
        },
        "DAGCircuit.prev_edges": {
            "name": "prev_edges",
            "location": 271,
            "return": [
                "List[Tuple[(Any, Any, quantumflow.qubits.Qubit)]]"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "quantumflow.ops.Operation"
                ]
            }
        },
        "DAGCircuit.__str__": {
            "name": "__str__",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.depth.remove_local": {
            "name": "remove_local",
            "location": 173,
            "return": [],
            "arguments": {
                "dagc": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/dagcircuit_test.py": {
        "_test_circ": {
            "name": "_test_circ",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "_true_ket": {
            "name": "_true_ket",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_ascircuit": {
            "name": "test_ascircuit",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_asgate": {
            "name": "test_asgate",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_evolve": {
            "name": "test_evolve",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_aschannel": {
            "name": "test_aschannel",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_depth": {
            "name": "test_depth",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_moments": {
            "name": "test_moments",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_components": {
            "name": "test_components",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_next_prev": {
            "name": "test_next_prev",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_on": {
            "name": "test_on",
            "location": 205,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/decompositions.py": {
        "bloch_decomposition": {
            "name": "bloch_decomposition",
            "location": 61,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "zyz_decomposition": {
            "name": "zyz_decomposition",
            "location": 95,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "euler_decomposition": {
            "name": "euler_decomposition",
            "location": 145,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "euler": [
                    "str"
                ]
            }
        },
        "kronecker_decomposition": {
            "name": "kronecker_decomposition",
            "location": 173,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "euler": [
                    "str"
                ]
            }
        },
        "canonical_coords": {
            "name": "canonical_coords",
            "location": 212,
            "return": [
                "Sequence[float]"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "canonical_decomposition": {
            "name": "canonical_decomposition",
            "location": 222,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "euler": [
                    "str"
                ]
            }
        },
        "_orthogonal_diagonalization": {
            "name": "_orthogonal_diagonalization",
            "location": 325,
            "return": [
                "Tuple[(np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "M": [
                    "np.ndarray"
                ]
            }
        },
        "_lambdas_to_coords": {
            "name": "_lambdas_to_coords",
            "location": 381,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "lambdas": [
                    "np.ndarray"
                ]
            }
        },
        "_constrain_to_weyl": {
            "name": "_constrain_to_weyl",
            "location": 415,
            "return": [
                "Tuple[(np.ndarray, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "lambdas": [
                    "np.ndarray"
                ]
            }
        },
        "_in_weyl": {
            "name": "_in_weyl",
            "location": 434,
            "return": [
                "bool"
            ],
            "arguments": {
                "tx": [
                    "float"
                ],
                "ty": [
                    "float"
                ],
                "tz": [
                    "float"
                ]
            }
        },
        "cnot_decomposition": {
            "name": "cnot_decomposition",
            "location": 440,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "b_decomposition": {
            "name": "b_decomposition",
            "location": 460,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "convert_can_to_weyl": {
            "name": "convert_can_to_weyl",
            "location": 518,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [],
                "euler": [
                    "str"
                ]
            }
        },
        "quantum_shannon_decomposition": {
            "name": "quantum_shannon_decomposition",
            "location": 689,
            "return": [
                "quantumflow.circuits.Circuit"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ],
                "euler": [
                    "str"
                ]
            }
        },
        "convert_can_to_weyl.tx_minus_1": {
            "name": "tx_minus_1",
            "location": 547,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.ty_minus_1": {
            "name": "ty_minus_1",
            "location": 553,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.tz_minus_1": {
            "name": "tz_minus_1",
            "location": 559,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.flip_tx_ty": {
            "name": "flip_tx_ty",
            "location": 565,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.flip_tx_tz": {
            "name": "flip_tx_tz",
            "location": 569,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.flip_ty_tz": {
            "name": "flip_ty_tz",
            "location": 573,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.swap_tx_ty": {
            "name": "swap_tx_ty",
            "location": 577,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.swap_tx_tz": {
            "name": "swap_tx_tz",
            "location": 583,
            "return": [],
            "arguments": {}
        },
        "convert_can_to_weyl.swap_ty_tz": {
            "name": "swap_ty_tz",
            "location": 589,
            "return": [],
            "arguments": {}
        },
        "quantum_shannon_decomposition.qs_deke": {
            "name": "qs_deke",
            "location": 712,
            "return": [],
            "arguments": {
                "gate": [],
                "euler": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/decompositions_test.py": {
        "test_bloch_decomposition": {
            "name": "test_bloch_decomposition",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_bloch_decomp_errors": {
            "name": "test_bloch_decomp_errors",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_zyz_decomp_errors": {
            "name": "test_zyz_decomp_errors",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_zyz_decomposition": {
            "name": "test_zyz_decomposition",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_euler_decomposition": {
            "name": "test_euler_decomposition",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_kronecker_decomposition": {
            "name": "test_kronecker_decomposition",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_kronecker_decomp_errors": {
            "name": "test_kronecker_decomp_errors",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_canonical_decomposition": {
            "name": "test_canonical_decomposition",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_canonical_decomp_sandwich": {
            "name": "test_canonical_decomp_sandwich",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_canonical_decomp_random": {
            "name": "test_canonical_decomp_random",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "test_canonical_decomp_errors": {
            "name": "test_canonical_decomp_errors",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_decomp_stdgates": {
            "name": "test_decomp_stdgates",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_decomp_sqrtswap_sandwich": {
            "name": "test_decomp_sqrtswap_sandwich",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "test_orthogonal_diagonalization": {
            "name": "test_orthogonal_diagonalization",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_eigcs_errors": {
            "name": "test_eigcs_errors",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "test_b_decomposition": {
            "name": "test_b_decomposition",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "test_cnot_decomposition": {
            "name": "test_cnot_decomposition",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_convert_can_to_weyl": {
            "name": "test_convert_can_to_weyl",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_quantum_shannon_decomposition": {
            "name": "test_quantum_shannon_decomposition",
            "location": 279,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/deprecated.py": {
        "join_gates": {
            "name": "join_gates",
            "location": 28,
            "return": [],
            "arguments": {
                "gate0": [],
                "gate1": []
            }
        },
        "conditional_gate": {
            "name": "conditional_gate",
            "location": 37,
            "return": [],
            "arguments": {
                "control": [],
                "gate0": [],
                "gate1": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/deprecated_test.py": {
        "test_conditional_gate": {
            "name": "test_conditional_gate",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/future.py": {
        "cached_property": {
            "name": "cached_property",
            "location": 24,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "cached_property.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [],
            "arguments": {
                "instance": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/future_test.py": {
        "test_cached_property": {
            "name": "test_cached_property",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cached_property.Thing.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_cached_property.Thing.plus1": {
            "name": "plus1",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.Thing.plus2": {
            "name": "plus2",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/gates.py": {
        "merge_diagonal_gates": {
            "name": "merge_diagonal_gates",
            "location": 518,
            "return": [
                "DiagonalGate"
            ],
            "arguments": {
                "gate0": [
                    "DiagonalGate"
                ],
                "gate1": [
                    "DiagonalGate"
                ]
            }
        },
        "IdentityGate.hamiltonian": {
            "name": "hamiltonian",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityGate.tensor": {
            "name": "tensor",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityGate.__pow__": {
            "name": "__pow__",
            "location": 128,
            "return": [
                "_TIdentityGate"
            ],
            "arguments": {
                "self": [
                    "_TIdentityGate"
                ],
                "t": []
            }
        },
        "IdentityGate.H": {
            "name": "H",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdentityGate._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 135,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.run": {
            "name": "run",
            "location": 157,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "CompositeGate.evolve": {
            "name": "evolve",
            "location": 160,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "CompositeGate.aschannel": {
            "name": "aschannel",
            "location": 163,
            "return": [
                "quantumflow.ops.Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.tensor": {
            "name": "tensor",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.H": {
            "name": "H",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.on": {
            "name": "on",
            "location": 179,
            "return": [
                "_TCompositeGate"
            ],
            "arguments": {
                "self": [
                    "_TCompositeGate"
                ]
            }
        },
        "CompositeGate.rewire": {
            "name": "rewire",
            "location": 182,
            "return": [
                "_TCompositeGate"
            ],
            "arguments": {
                "self": [
                    "_TCompositeGate"
                ],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "CompositeGate.params": {
            "name": "params",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompositeGate.param": {
            "name": "param",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ControlGate.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "quantumflow.ops.Gate"
                ],
                "controls": [],
                "axes": [
                    "str"
                ]
            }
        },
        "ControlGate.control_qubits": {
            "name": "control_qubits",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.target_qubits": {
            "name": "target_qubits",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.control_qubit_nb": {
            "name": "control_qubit_nb",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.target_qubit_nb": {
            "name": "target_qubit_nb",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.hamiltonian": {
            "name": "hamiltonian",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.tensor": {
            "name": "tensor",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.resolve": {
            "name": "resolve",
            "location": 276,
            "return": [
                "_TControlGate"
            ],
            "arguments": {
                "self": [
                    "_TControlGate"
                ],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "ControlGate._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 280,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlGate.__str__": {
            "name": "__str__",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiSwapGate.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits_in": [],
                "qubits_out": []
            }
        },
        "MultiSwapGate.from_gates": {
            "name": "from_gates",
            "location": 320,
            "return": [
                "_TMultiSwapGate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TMultiSwapGate]"
                ],
                "gates": [
                    "Iterable[quantumflow.ops.Operation]"
                ]
            }
        },
        "MultiSwapGate.H": {
            "name": "H",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSwapGate.run": {
            "name": "run",
            "location": 350,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "MultiSwapGate.evolve": {
            "name": "evolve",
            "location": 362,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "MultiSwapGate.tensor": {
            "name": "tensor",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReversalGate.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "CircularShiftGate.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": [],
                "shift": [
                    "int"
                ]
            }
        },
        "QFTGate.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "QFTGate.H": {
            "name": "H",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QFTGate.tensor": {
            "name": "tensor",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvQFTGate.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "InvQFTGate.H": {
            "name": "H",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvQFTGate.tensor": {
            "name": "tensor",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PauliGate.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "quantumflow.paulialgebra.Pauli"
                ],
                "alpha": []
            }
        },
        "PauliGate.__str__": {
            "name": "__str__",
            "location": 476,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PauliGate.H": {
            "name": "H",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PauliGate.__pow__": {
            "name": "__pow__",
            "location": 483,
            "return": [
                "_TPauliGate"
            ],
            "arguments": {
                "self": [
                    "_TPauliGate"
                ],
                "t": []
            }
        },
        "PauliGate.hamiltonian": {
            "name": "hamiltonian",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PauliGate.resolve": {
            "name": "resolve",
            "location": 490,
            "return": [
                "_TPauliGate"
            ],
            "arguments": {
                "self": [
                    "_TPauliGate"
                ],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "PauliGate.decompose": {
            "name": "decompose",
            "location": 496,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "topology": []
            }
        },
        "PauliGate.tensor": {
            "name": "tensor",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiagonalGate.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "diag_hamiltonian": [
                    "Union[(np.ndarray, Sequence)]"
                ],
                "qubits": []
            }
        },
        "DiagonalGate.from_gate": {
            "name": "from_gate",
            "location": 582,
            "return": [
                "_TDiagonalGate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDiagonalGate]"
                ],
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "DiagonalGate.permute": {
            "name": "permute",
            "location": 603,
            "return": [
                "_TDiagonalGate"
            ],
            "arguments": {
                "self": [
                    "_TDiagonalGate"
                ],
                "qubits": []
            }
        },
        "DiagonalGate.tensor": {
            "name": "tensor",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiagonalGate.tensor_diagonal": {
            "name": "tensor_diagonal",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiagonalGate.H": {
            "name": "H",
            "location": 621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiagonalGate.__pow__": {
            "name": "__pow__",
            "location": 624,
            "return": [
                "_TDiagonalGate"
            ],
            "arguments": {
                "self": [
                    "_TDiagonalGate"
                ],
                "e": []
            }
        },
        "MultiplexedGate.__init__": {
            "name": "__init__",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gates": [
                    "Sequence[quantumflow.ops.Gate]"
                ],
                "controls": []
            }
        },
        "MultiplexedGate.tensor": {
            "name": "tensor",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedGate.H": {
            "name": "H",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedGate.__pow__": {
            "name": "__pow__",
            "location": 670,
            "return": [
                "_TMultiplexedGate"
            ],
            "arguments": {
                "self": [
                    "_TMultiplexedGate"
                ],
                "e": []
            }
        },
        "MultiplexedGate.resolve": {
            "name": "resolve",
            "location": 677,
            "return": [
                "_TMultiplexedGate"
            ],
            "arguments": {
                "self": [
                    "_TMultiplexedGate"
                ],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "ConditionalGate.__init__": {
            "name": "__init__",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "quantumflow.ops.Gate"
                ],
                "B": [
                    "quantumflow.ops.Gate"
                ],
                "control_qubit": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "MultiplexedRzGate.__init__": {
            "name": "__init__",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thetas": [
                    "Sequence"
                ],
                "controls": [],
                "target": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "MultiplexedRzGate.tensor": {
            "name": "tensor",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedRzGate.tensor_diagonal": {
            "name": "tensor_diagonal",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedRzGate.H": {
            "name": "H",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedRzGate.__pow__": {
            "name": "__pow__",
            "location": 731,
            "return": [
                "_TMultiplexedRzGate"
            ],
            "arguments": {
                "self": [
                    "_TMultiplexedRzGate"
                ],
                "e": []
            }
        },
        "MultiplexedRyGate.__init__": {
            "name": "__init__",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thetas": [
                    "Sequence"
                ],
                "controls": [],
                "target": [
                    "quantumflow.qubits.Qubit"
                ]
            }
        },
        "MultiplexedRyGate.H": {
            "name": "H",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiplexedRyGate.__pow__": {
            "name": "__pow__",
            "location": 755,
            "return": [
                "_TMultiplexedRyGate"
            ],
            "arguments": {
                "self": [
                    "_TMultiplexedRyGate"
                ],
                "e": []
            }
        },
        "RandomGate.__init__": {
            "name": "__init__",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "DiagonalGate.from_gate.is_diagonal_gate": {
            "name": "is_diagonal_gate",
            "location": 587,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/gatesets.py": {},
    "quantumflow-dev-master/quantumflow/gates_test.py": {
        "test_IdentityGate": {
            "name": "test_IdentityGate",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_qftgate": {
            "name": "test_qftgate",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_multiswapgate": {
            "name": "test_multiswapgate",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "test_reversequbits": {
            "name": "test_reversequbits",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_rotatequbits": {
            "name": "test_rotatequbits",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_PauliGate": {
            "name": "test_PauliGate",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_PauliIdentity": {
            "name": "test_PauliIdentity",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_PauliGate_more": {
            "name": "test_PauliGate_more",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "test_PauliGate_resolve": {
            "name": "test_PauliGate_resolve",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "test_PauliGate_pow": {
            "name": "test_PauliGate_pow",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_DiagonalGate": {
            "name": "test_DiagonalGate",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_DiagonalGate_from_gate": {
            "name": "test_DiagonalGate_from_gate",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "test_DiagonalGate_permute": {
            "name": "test_DiagonalGate_permute",
            "location": 278,
            "return": [],
            "arguments": {}
        },
        "test_merge_diagonal_gates": {
            "name": "test_merge_diagonal_gates",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "test_merge_diagonal_gates_symbolic": {
            "name": "test_merge_diagonal_gates_symbolic",
            "location": 307,
            "return": [],
            "arguments": {}
        },
        "test_DiagonalGate_decomposition_count": {
            "name": "test_DiagonalGate_decomposition_count",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "test_MultiplexedRzGate": {
            "name": "test_MultiplexedRzGate",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_MultiplexedRzGate_str": {
            "name": "test_MultiplexedRzGate_str",
            "location": 400,
            "return": [],
            "arguments": {}
        },
        "test_MultiplexedRyGate": {
            "name": "test_MultiplexedRyGate",
            "location": 407,
            "return": [],
            "arguments": {}
        },
        "test_MultiplexedGate": {
            "name": "test_MultiplexedGate",
            "location": 436,
            "return": [],
            "arguments": {}
        },
        "test_MultiplexedGate_resolve": {
            "name": "test_MultiplexedGate_resolve",
            "location": 463,
            "return": [],
            "arguments": {}
        },
        "test_ConditionalGate": {
            "name": "test_ConditionalGate",
            "location": 479,
            "return": [],
            "arguments": {}
        },
        "test_ControlGate": {
            "name": "test_ControlGate",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "test_ControlGate_resolve": {
            "name": "test_ControlGate_resolve",
            "location": 527,
            "return": [],
            "arguments": {}
        },
        "test_ControlGate_axes": {
            "name": "test_ControlGate_axes",
            "location": 535,
            "return": [],
            "arguments": {}
        },
        "test_ControlGate_diagram": {
            "name": "test_ControlGate_diagram",
            "location": 570,
            "return": [],
            "arguments": {}
        },
        "test_RandomGate_inverse": {
            "name": "test_RandomGate_inverse",
            "location": 580,
            "return": [],
            "arguments": {}
        },
        "test_CompositeGate": {
            "name": "test_CompositeGate",
            "location": 590,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/gradients.py": {
        "expectation_gradients": {
            "name": "expectation_gradients",
            "location": 84,
            "return": [],
            "arguments": {
                "ket0": [],
                "circ": [],
                "hermitian": [],
                "dfunc": []
            }
        },
        "state_fidelity_gradients": {
            "name": "state_fidelity_gradients",
            "location": 137,
            "return": [],
            "arguments": {
                "ket0": [],
                "ket1": [],
                "circ": []
            }
        },
        "state_angle_gradients": {
            "name": "state_angle_gradients",
            "location": 181,
            "return": [],
            "arguments": {
                "ket0": [],
                "ket1": [],
                "circ": []
            }
        },
        "parameter_shift_circuits": {
            "name": "parameter_shift_circuits",
            "location": 202,
            "return": [],
            "arguments": {
                "circ": [],
                "index": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/gradients_test.py": {
        "test_gradients": {
            "name": "test_gradients",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_gradients_func": {
            "name": "test_gradients_func",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_gradient_errors": {
            "name": "test_gradient_errors",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_parameter_shift_circuits": {
            "name": "test_parameter_shift_circuits",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/info.py": {
        "fubini_study_angle": {
            "name": "fubini_study_angle",
            "location": 116,
            "return": [
                "float"
            ],
            "arguments": {
                "vec0": [],
                "vec1": []
            }
        },
        "fubini_study_fidelity": {
            "name": "fubini_study_fidelity",
            "location": 132,
            "return": [
                "float"
            ],
            "arguments": {
                "vec0": [],
                "vec1": []
            }
        },
        "fubini_study_close": {
            "name": "fubini_study_close",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "vec0": [],
                "vec1": [],
                "atol": [
                    "float"
                ]
            }
        },
        "state_fidelity": {
            "name": "state_fidelity",
            "location": 160,
            "return": [
                "float"
            ],
            "arguments": {
                "ket0": [
                    "quantumflow.states.State"
                ],
                "ket1": [
                    "quantumflow.states.State"
                ]
            }
        },
        "state_angle": {
            "name": "state_angle",
            "location": 167,
            "return": [
                "float"
            ],
            "arguments": {
                "ket0": [
                    "quantumflow.states.State"
                ],
                "ket1": [
                    "quantumflow.states.State"
                ]
            }
        },
        "states_close": {
            "name": "states_close",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "ket0": [
                    "quantumflow.states.State"
                ],
                "ket1": [
                    "quantumflow.states.State"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "purity": {
            "name": "purity",
            "location": 189,
            "return": [
                "float"
            ],
            "arguments": {
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "fidelity": {
            "name": "fidelity",
            "location": 206,
            "return": [
                "float"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "bures_distance": {
            "name": "bures_distance",
            "location": 219,
            "return": [
                "float"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "bures_angle": {
            "name": "bures_angle",
            "location": 228,
            "return": [
                "float"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "density_angle": {
            "name": "density_angle",
            "location": 233,
            "return": [
                "float"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "densities_close": {
            "name": "densities_close",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "entropy": {
            "name": "entropy",
            "location": 248,
            "return": [
                "float"
            ],
            "arguments": {
                "rho": [
                    "quantumflow.states.Density"
                ],
                "base": [
                    "float"
                ]
            }
        },
        "mutual_info": {
            "name": "mutual_info",
            "location": 267,
            "return": [
                "float"
            ],
            "arguments": {
                "rho": [
                    "quantumflow.states.Density"
                ],
                "qubits0": [],
                "qubits1": [],
                "base": [
                    "float"
                ]
            }
        },
        "trace_distance": {
            "name": "trace_distance",
            "location": 296,
            "return": [
                "float"
            ],
            "arguments": {
                "rho0": [
                    "quantumflow.states.Density"
                ],
                "rho1": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "gate_angle": {
            "name": "gate_angle",
            "location": 309,
            "return": [
                "float"
            ],
            "arguments": {
                "gate0": [
                    "quantumflow.ops.Gate"
                ],
                "gate1": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "gates_close": {
            "name": "gates_close",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate0": [
                    "quantumflow.ops.Gate"
                ],
                "gate1": [
                    "quantumflow.ops.Gate"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "gates_phase_close": {
            "name": "gates_phase_close",
            "location": 326,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate0": [
                    "quantumflow.ops.Gate"
                ],
                "gate1": [
                    "quantumflow.ops.Gate"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "gates_commute": {
            "name": "gates_commute",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate0": [
                    "quantumflow.ops.Gate"
                ],
                "gate1": [
                    "quantumflow.ops.Gate"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "almost_unitary": {
            "name": "almost_unitary",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "almost_identity": {
            "name": "almost_identity",
            "location": 351,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "almost_hermitian": {
            "name": "almost_hermitian",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "gate": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "circuits_close": {
            "name": "circuits_close",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "circ0": [
                    "quantumflow.circuits.Circuit"
                ],
                "circ1": [
                    "quantumflow.circuits.Circuit"
                ],
                "atol": [
                    "float"
                ],
                "reps": [
                    "int"
                ]
            }
        },
        "channel_angle": {
            "name": "channel_angle",
            "location": 386,
            "return": [
                "float"
            ],
            "arguments": {
                "chan0": [
                    "quantumflow.ops.Channel"
                ],
                "chan1": [
                    "quantumflow.ops.Channel"
                ]
            }
        },
        "channels_close": {
            "name": "channels_close",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "chan0": [
                    "quantumflow.ops.Channel"
                ],
                "chan1": [
                    "quantumflow.ops.Channel"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "average_gate_fidelity": {
            "name": "average_gate_fidelity",
            "location": 402,
            "return": [
                "float"
            ],
            "arguments": {
                "kraus": [
                    "quantumflow.channels.Kraus"
                ],
                "target": [
                    "quantumflow.ops.Gate"
                ]
            }
        },
        "almost_unital": {
            "name": "almost_unital",
            "location": 428,
            "return": [
                "bool"
            ],
            "arguments": {
                "chan": [
                    "quantumflow.ops.Channel"
                ]
            }
        }
    },
    "quantumflow-dev-master/quantumflow/info_test.py": {
        "test_fubini_study_angle": {
            "name": "test_fubini_study_angle",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_fubini_study_angle_states": {
            "name": "test_fubini_study_angle_states",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_state_angle": {
            "name": "test_state_angle",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_density_angle": {
            "name": "test_density_angle",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_gate_angle": {
            "name": "test_gate_angle",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_gates_commute": {
            "name": "test_gates_commute",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_channel_angle": {
            "name": "test_channel_angle",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_fidelity": {
            "name": "test_fidelity",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_purity": {
            "name": "test_purity",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_bures_distance": {
            "name": "test_bures_distance",
            "location": 148,
            "return": [],
            "arguments": {
                "repeat": []
            }
        },
        "test_bures_angle": {
            "name": "test_bures_angle",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_entropy": {
            "name": "test_entropy",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_mutual_info": {
            "name": "test_mutual_info",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_trace_distance": {
            "name": "test_trace_distance",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "test_average_gate_fidelity": {
            "name": "test_average_gate_fidelity",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_circuits_close": {
            "name": "test_circuits_close",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_gates_phase_close": {
            "name": "test_gates_phase_close",
            "location": 235,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/ops.py": {
        "Operation.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Operation.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubits": [],
                "params": [
                    "Sequence"
                ]
            }
        },
        "Operation.__iter__": {
            "name": "__iter__",
            "location": 148,
            "return": [
                "Iterator[Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.name": {
            "name": "name",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.qubits": {
            "name": "qubits",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.qubit_nb": {
            "name": "qubit_nb",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.on": {
            "name": "on",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.rewire": {
            "name": "rewire",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "Operation.qubit_indices": {
            "name": "qubit_indices",
            "location": 179,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "Operation.params": {
            "name": "params",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.param": {
            "name": "param",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Operation.float_param": {
            "name": "float_param",
            "location": 209,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "Operation.resolve": {
            "name": "resolve",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "Operation.asgate": {
            "name": "asgate",
            "location": 230,
            "return": [
                "Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.aschannel": {
            "name": "aschannel",
            "location": 239,
            "return": [
                "Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.H": {
            "name": "H",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.tensor": {
            "name": "tensor",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.tensor_diagonal": {
            "name": "tensor_diagonal",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operation.run": {
            "name": "run",
            "location": 276,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Operation.evolve": {
            "name": "evolve",
            "location": 280,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "Operation.__lt__": {
            "name": "__lt__",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Operation.specialize": {
            "name": "specialize",
            "location": 290,
            "return": [
                "_TOperation"
            ],
            "arguments": {
                "self": [
                    "_TOperation"
                ]
            }
        },
        "Operation.decompose": {
            "name": "decompose",
            "location": 298,
            "return": [
                "Iterator[Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation._repr_png_": {
            "name": "_repr_png_",
            "location": 306,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation._repr_html_": {
            "name": "_repr_html_",
            "location": 312,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 318,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Gate.hamiltonian": {
            "name": "hamiltonian",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gate.asgate": {
            "name": "asgate",
            "location": 403,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.aschannel": {
            "name": "aschannel",
            "location": 406,
            "return": [
                "Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.__pow__": {
            "name": "__pow__",
            "location": 418,
            "return": [
                "_TGate"
            ],
            "arguments": {
                "self": [
                    "_TGate"
                ],
                "t": [
                    "float"
                ]
            }
        },
        "Gate.permute": {
            "name": "permute",
            "location": 423,
            "return": [
                "_TGate"
            ],
            "arguments": {
                "self": [
                    "_TGate"
                ],
                "qubits": []
            }
        },
        "Gate.asoperator": {
            "name": "asoperator",
            "location": 433,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.tensor": {
            "name": "tensor",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gate.tensor_diagonal": {
            "name": "tensor_diagonal",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gate.su": {
            "name": "su",
            "location": 450,
            "return": [
                "UnitaryGate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.H": {
            "name": "H",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Gate.__matmul__": {
            "name": "__matmul__",
            "location": 461,
            "return": [
                "_TGate"
            ],
            "arguments": {
                "self": [
                    "_TGate"
                ],
                "other": [
                    "_TGate"
                ]
            }
        },
        "Gate.run": {
            "name": "run",
            "location": 478,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Gate.evolve": {
            "name": "evolve",
            "location": 498,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "Gate.specialize": {
            "name": "specialize",
            "location": 504,
            "return": [
                "_TGate"
            ],
            "arguments": {
                "self": [
                    "_TGate"
                ]
            }
        },
        "Gate.__str__": {
            "name": "__str__",
            "location": 507,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.decompose": {
            "name": "decompose",
            "location": 526,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitaryGate.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": []
            }
        },
        "UnitaryGate.from_gate": {
            "name": "from_gate",
            "location": 569,
            "return": [
                "_TUnitaryGate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUnitaryGate]"
                ],
                "gate": [
                    "Gate"
                ]
            }
        },
        "UnitaryGate.from_hamiltonian": {
            "name": "from_hamiltonian",
            "location": 573,
            "return": [
                "_TUnitaryGate"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUnitaryGate]"
                ],
                "hamiltonian": [
                    "quantumflow.paulialgebra.Pauli"
                ],
                "qubits": []
            }
        },
        "UnitaryGate.tensor": {
            "name": "tensor",
            "location": 580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "params": [
                    "Sequence"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Channel.tensor": {
            "name": "tensor",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.name": {
            "name": "name",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.permute": {
            "name": "permute",
            "location": 622,
            "return": [
                "_TChannel"
            ],
            "arguments": {
                "self": [
                    "_TChannel"
                ],
                "qubits": []
            }
        },
        "Channel.H": {
            "name": "H",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.sharp": {
            "name": "sharp",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.choi": {
            "name": "choi",
            "location": 660,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.from_choi": {
            "name": "from_choi",
            "location": 669,
            "return": [
                "_TChannel"
            ],
            "arguments": {
                "cls": [
                    "Type[_TChannel]"
                ],
                "tensor": [],
                "qubits": []
            }
        },
        "Channel.chi": {
            "name": "chi",
            "location": 675,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.run": {
            "name": "run",
            "location": 681,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Channel.evolve": {
            "name": "evolve",
            "location": 684,
            "return": [
                "quantumflow.states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "quantumflow.states.Density"
                ]
            }
        },
        "Channel.asgate": {
            "name": "asgate",
            "location": 696,
            "return": [
                "Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.aschannel": {
            "name": "aschannel",
            "location": 699,
            "return": [
                "_TChannel"
            ],
            "arguments": {
                "self": [
                    "_TChannel"
                ]
            }
        },
        "Channel.__matmul__": {
            "name": "__matmul__",
            "location": 702,
            "return": [
                "_TChannel"
            ],
            "arguments": {
                "self": [
                    "_TChannel"
                ],
                "other": [
                    "_TChannel"
                ]
            }
        },
        "Channel.trace": {
            "name": "trace",
            "location": 726,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.__str__._param_format": {
            "name": "_param_format",
            "location": 508,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/ops_test.py": {
        "test_operation_incommensurate_qubits": {
            "name": "test_operation_incommensurate_qubits",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_gate_mul": {
            "name": "test_gate_mul",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_gate_permute": {
            "name": "test_gate_permute",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_gates_evolve": {
            "name": "test_gates_evolve",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_gate_H": {
            "name": "test_gate_H",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_su": {
            "name": "test_su",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_interchangeable": {
            "name": "test_interchangeable",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_gate_symbolic_params": {
            "name": "test_gate_symbolic_params",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_gate_rewire": {
            "name": "test_gate_rewire",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_join_gates": {
            "name": "test_join_gates",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_unitary_exceptions": {
            "name": "test_unitary_exceptions",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_unitary_from_gate": {
            "name": "test_unitary_from_gate",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_gate_decompose": {
            "name": "test_gate_decompose",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_registration": {
            "name": "test_registration",
            "location": 170,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/paulialgebra.py": {
        "sX": {
            "name": "sX",
            "location": 363,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ],
                "coefficient": []
            }
        },
        "sY": {
            "name": "sY",
            "location": 368,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ],
                "coefficient": []
            }
        },
        "sZ": {
            "name": "sZ",
            "location": 373,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ],
                "coefficient": []
            }
        },
        "sI": {
            "name": "sI",
            "location": 378,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ],
                "coefficient": []
            }
        },
        "pauli_sum": {
            "name": "pauli_sum",
            "location": 384,
            "return": [
                "Pauli"
            ],
            "arguments": {}
        },
        "pauli_product": {
            "name": "pauli_product",
            "location": 397,
            "return": [
                "Pauli"
            ],
            "arguments": {}
        },
        "pauli_pow": {
            "name": "pauli_pow",
            "location": 436,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "pauli": [
                    "Pauli"
                ],
                "exponent": [
                    "int"
                ]
            }
        },
        "paulis_close": {
            "name": "paulis_close",
            "location": 465,
            "return": [
                "bool"
            ],
            "arguments": {
                "pauli0": [
                    "Pauli"
                ],
                "pauli1": [
                    "Pauli"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "paulis_commute": {
            "name": "paulis_commute",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "element0": [
                    "Pauli"
                ],
                "element1": [
                    "Pauli"
                ]
            }
        },
        "pauli_commuting_sets": {
            "name": "pauli_commuting_sets",
            "location": 501,
            "return": [
                "Tuple[(Pauli, ...)]"
            ],
            "arguments": {
                "element": [
                    "Pauli"
                ]
            }
        },
        "pauli_decompose_hermitian": {
            "name": "pauli_decompose_hermitian",
            "location": 528,
            "return": [
                "Pauli"
            ],
            "arguments": {
                "matrix": [
                    "np.ndarray"
                ],
                "qubits": []
            }
        },
        "Pauli.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.term": {
            "name": "term",
            "location": 143,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPauli]"
                ],
                "qubits": [],
                "ops": [
                    "str"
                ],
                "coefficient": []
            }
        },
        "Pauli.sigma": {
            "name": "sigma",
            "location": 153,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPauli]"
                ],
                "qubit": [
                    "quantumflow.qubits.Qubit"
                ],
                "operator": [
                    "str"
                ],
                "coefficient": []
            }
        },
        "Pauli.scalar": {
            "name": "scalar",
            "location": 163,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPauli]"
                ],
                "coefficient": []
            }
        },
        "Pauli.is_scalar": {
            "name": "is_scalar",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.identity": {
            "name": "identity",
            "location": 179,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPauli]"
                ]
            }
        },
        "Pauli.is_identity": {
            "name": "is_identity",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.zero": {
            "name": "zero",
            "location": 193,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "cls": [
                    "Type[_TPauli]"
                ]
            }
        },
        "Pauli.is_zero": {
            "name": "is_zero",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__repr__": {
            "name": "__repr__",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__str__": {
            "name": "__str__",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__iter__": {
            "name": "__iter__",
            "location": 235,
            "return": [
                "Iterator[Tuple[(Any, str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__len__": {
            "name": "__len__",
            "location": 238,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__add__": {
            "name": "__add__",
            "location": 241,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__radd__": {
            "name": "__radd__",
            "location": 246,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__mul__": {
            "name": "__mul__",
            "location": 249,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__rmul__": {
            "name": "__rmul__",
            "location": 256,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__truediv__": {
            "name": "__truediv__",
            "location": 259,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__sub__": {
            "name": "__sub__",
            "location": 262,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__rsub__": {
            "name": "__rsub__",
            "location": 265,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "other": []
            }
        },
        "Pauli.__neg__": {
            "name": "__neg__",
            "location": 268,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ]
            }
        },
        "Pauli.__pos__": {
            "name": "__pos__",
            "location": 271,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ]
            }
        },
        "Pauli.__pow__": {
            "name": "__pow__",
            "location": 274,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "exponent": [
                    "int"
                ]
            }
        },
        "Pauli.__lt__": {
            "name": "__lt__",
            "location": 280,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pauli.__le__": {
            "name": "__le__",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pauli.__gt__": {
            "name": "__gt__",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pauli.__ge__": {
            "name": "__ge__",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pauli.__eq__": {
            "name": "__eq__",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pauli.__hash__": {
            "name": "__hash__",
            "location": 305,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.asoperator": {
            "name": "asoperator",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "Pauli.run": {
            "name": "run",
            "location": 331,
            "return": [
                "quantumflow.states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "quantumflow.states.State"
                ]
            }
        },
        "Pauli.on": {
            "name": "on",
            "location": 345,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ]
            }
        },
        "Pauli.rewire": {
            "name": "rewire",
            "location": 351,
            "return": [
                "_TPauli"
            ],
            "arguments": {
                "self": [
                    "_TPauli"
                ],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "paulis_commute._coincident_parity": {
            "name": "_coincident_parity",
            "location": 481,
            "return": [],
            "arguments": {
                "term0": [],
                "term1": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/paulialgebra_test.py": {
        "test_term": {
            "name": "test_term",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_pauli_str": {
            "name": "test_pauli_str",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_pauli_sigma": {
            "name": "test_pauli_sigma",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_sigmas": {
            "name": "test_sigmas",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_sum": {
            "name": "test_sum",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_sub": {
            "name": "test_sub",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_cmp": {
            "name": "test_cmp",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_hash": {
            "name": "test_hash",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_product": {
            "name": "test_product",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_scalar": {
            "name": "test_scalar",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_zero": {
            "name": "test_zero",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_merge_sum": {
            "name": "test_merge_sum",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_simplify": {
            "name": "test_simplify",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_dont_simplify": {
            "name": "test_dont_simplify",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_zero_term": {
            "name": "test_zero_term",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_neg": {
            "name": "test_neg",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "test_paulisum_iteration": {
            "name": "test_paulisum_iteration",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_check_commutation": {
            "name": "test_check_commutation",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_commuting_sets": {
            "name": "test_commuting_sets",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_get_qubits": {
            "name": "test_get_qubits",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_check_commutation_rigorous": {
            "name": "test_check_commutation_rigorous",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_isclose": {
            "name": "test_isclose",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_pauli_decompose_hermitian": {
            "name": "test_pauli_decompose_hermitian",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "test_pauli_rewire": {
            "name": "test_pauli_rewire",
            "location": 347,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/qubits.py": {
        "sorted_qubits": {
            "name": "sorted_qubits",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "qbs": []
            }
        },
        "Qubit.__lt__": {
            "name": "__lt__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Qubit.__hash__": {
            "name": "__hash__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/states.py": {
        "zero_state": {
            "name": "zero_state",
            "location": 305,
            "return": [
                "State"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "w_state": {
            "name": "w_state",
            "location": 313,
            "return": [
                "State"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "ghz_state": {
            "name": "ghz_state",
            "location": 324,
            "return": [
                "State"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "random_state": {
            "name": "random_state",
            "location": 333,
            "return": [
                "State"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "join_states": {
            "name": "join_states",
            "location": 343,
            "return": [
                "State"
            ],
            "arguments": {
                "ket0": [
                    "State"
                ],
                "ket1": [
                    "State"
                ]
            }
        },
        "print_state": {
            "name": "print_state",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "file": [
                    "TextIO"
                ]
            }
        },
        "print_probabilities": {
            "name": "print_probabilities",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "State"
                ],
                "ndigits": [
                    "int"
                ],
                "file": [
                    "TextIO"
                ]
            }
        },
        "mixed_density": {
            "name": "mixed_density",
            "location": 427,
            "return": [
                "Density"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "random_density": {
            "name": "random_density",
            "location": 434,
            "return": [
                "Density"
            ],
            "arguments": {
                "qubits": [],
                "rank": [
                    "int"
                ],
                "ensemble": [
                    "str"
                ]
            }
        },
        "random_density_hs": {
            "name": "random_density_hs",
            "location": 463,
            "return": [
                "Density"
            ],
            "arguments": {
                "qubits": [],
                "rank": [
                    "int"
                ]
            }
        },
        "random_density_bures": {
            "name": "random_density_bures",
            "location": 488,
            "return": [
                "Density"
            ],
            "arguments": {
                "qubits": [],
                "rank": [
                    "int"
                ]
            }
        },
        "join_densities": {
            "name": "join_densities",
            "location": 512,
            "return": [
                "Density"
            ],
            "arguments": {
                "rho0": [
                    "Density"
                ],
                "rho1": [
                    "Density"
                ]
            }
        },
        "_qubits_count_tuple": {
            "name": "_qubits_count_tuple",
            "location": 520,
            "return": [
                "Tuple[(int, Any)]"
            ],
            "arguments": {
                "qubits": []
            }
        },
        "QuantumState.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "memory": [
                    "Mapping"
                ]
            }
        },
        "QuantumState.tensor": {
            "name": "tensor",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.qubits": {
            "name": "qubits",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.qubit_nb": {
            "name": "qubit_nb",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.replace": {
            "name": "replace",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.store": {
            "name": "store",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.on": {
            "name": "on",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumState.rewire": {
            "name": "rewire",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "Dict[(quantumflow.qubits.Qubit, quantumflow.qubits.Qubit)]"
                ]
            }
        },
        "QuantumState.permute": {
            "name": "permute",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "QuantumState.qubit_indices": {
            "name": "qubit_indices",
            "location": 160,
            "return": [
                "Tuple[(int, ...)]"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "QuantumState.norm": {
            "name": "norm",
            "location": 168,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "memory": [
                    "Mapping"
                ]
            }
        },
        "State.normalize": {
            "name": "normalize",
            "location": 202,
            "return": [
                "_TState"
            ],
            "arguments": {
                "self": [
                    "_TState"
                ]
            }
        },
        "State.probabilities": {
            "name": "probabilities",
            "location": 207,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.sample": {
            "name": "sample",
            "location": 215,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "trials": [
                    "int"
                ]
            }
        },
        "State.expectation": {
            "name": "expectation",
            "location": 225,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "diag_hermitian": [],
                "trials": [
                    "int"
                ]
            }
        },
        "State.measure": {
            "name": "measure",
            "location": 244,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.asdensity": {
            "name": "asdensity",
            "location": 256,
            "return": [
                "Density"
            ],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Density.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "memory": [
                    "Mapping"
                ]
            }
        },
        "Density.trace": {
            "name": "trace",
            "location": 401,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Density.normalize": {
            "name": "normalize",
            "location": 405,
            "return": [
                "_TDensity"
            ],
            "arguments": {
                "self": [
                    "_TDensity"
                ]
            }
        },
        "Density.probabilities": {
            "name": "probabilities",
            "location": 411,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Density.asoperator": {
            "name": "asoperator",
            "location": 416,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Density.asdensity": {
            "name": "asdensity",
            "location": 420,
            "return": [
                "_TDensity"
            ],
            "arguments": {
                "self": [
                    "_TDensity"
                ],
                "qubits": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/states_test.py": {
        "test_zeros": {
            "name": "test_zeros",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_w_state": {
            "name": "test_w_state",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_ghz_state": {
            "name": "test_ghz_state",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_random_state": {
            "name": "test_random_state",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_state_bits": {
            "name": "test_state_bits",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_state_labels": {
            "name": "test_state_labels",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_probability": {
            "name": "test_probability",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_states_close": {
            "name": "test_states_close",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_print_state": {
            "name": "test_print_state",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_print_probabilities": {
            "name": "test_print_probabilities",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_measure": {
            "name": "test_measure",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_sample": {
            "name": "test_sample",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_expectation": {
            "name": "test_expectation",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_random_density": {
            "name": "test_random_density",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "test_density": {
            "name": "test_density",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_state_to_density": {
            "name": "test_state_to_density",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_density_trace": {
            "name": "test_density_trace",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_mixed_density": {
            "name": "test_mixed_density",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "test_join_densities": {
            "name": "test_join_densities",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_memory": {
            "name": "test_memory",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "test_density_memory": {
            "name": "test_density_memory",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_join_states": {
            "name": "test_join_states",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_expectation_again": {
            "name": "test_expectation_again",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_error": {
            "name": "test_error",
            "location": 296,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdops.py": {
        "Moment.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.__getitem__": {
            "name": "__getitem__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Moment.__len__": {
            "name": "__len__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.run": {
            "name": "run",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Moment.evolve": {
            "name": "evolve",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Moment.asgate": {
            "name": "asgate",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.aschannel": {
            "name": "aschannel",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.H": {
            "name": "H",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.on": {
            "name": "on",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.rewire": {
            "name": "rewire",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "Moment.params": {
            "name": "params",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moment.param": {
            "name": "param",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Measure.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "qubit": [],
                "cbit": []
            }
        },
        "Measure.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measure.run": {
            "name": "run",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Measure.evolve": {
            "name": "evolve",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Measure._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reset.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reset.run": {
            "name": "run",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Reset.evolve": {
            "name": "evolve",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Reset.asgate": {
            "name": "asgate",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reset.aschannel": {
            "name": "aschannel",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reset.__str__": {
            "name": "__str__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reset._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Initialize.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Initialize.tensor": {
            "name": "tensor",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Initialize.run": {
            "name": "run",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Initialize.evolve": {
            "name": "evolve",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Barrier.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Barrier.H": {
            "name": "H",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Barrier.run": {
            "name": "run",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Barrier.evolve": {
            "name": "evolve",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Barrier.__str__": {
            "name": "__str__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Barrier._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Projection.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "states": []
            }
        },
        "Projection.run": {
            "name": "run",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Projection.H": {
            "name": "H",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "qubits": []
            }
        },
        "Store.run": {
            "name": "run",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Store.evolve": {
            "name": "evolve",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "elem": [],
                "key": [],
                "value": []
            }
        },
        "If.run": {
            "name": "run",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "If.evolve": {
            "name": "evolve",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Display.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "action": [],
                "qubits": []
            }
        },
        "Display.run": {
            "name": "run",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Display.evolve": {
            "name": "evolve",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "StateDisplay.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "qubits": []
            }
        },
        "ProbabilityDisplay.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "qubits": []
            }
        },
        "DensityDisplay.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "qubits": []
            }
        },
        "Simulator.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 424,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Simulator.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "circ": []
            }
        },
        "Simulator.qubits": {
            "name": "qubits",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulator.tensor": {
            "name": "tensor",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simulator.run": {
            "name": "run",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "QFSimulator.run": {
            "name": "run",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "QFSimulator.evolve": {
            "name": "evolve",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Project0.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Project0.tensor": {
            "name": "tensor",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project0._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Project1.tensor": {
            "name": "tensor",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Project1._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdops_test.py": {
        "test_moment": {
            "name": "test_moment",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_moment_params": {
            "name": "test_moment_params",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_measure": {
            "name": "test_measure",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_barrier": {
            "name": "test_barrier",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_if": {
            "name": "test_if",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_display_state": {
            "name": "test_display_state",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_display_probabilities": {
            "name": "test_display_probabilities",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_density_display": {
            "name": "test_density_display",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "test_initialize": {
            "name": "test_initialize",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_simulator": {
            "name": "test_simulator",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "test_projectors": {
            "name": "test_projectors",
            "location": 201,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/tensors.py": {
        "asqutensor": {
            "name": "asqutensor",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "array": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 49,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "tensor": [],
                "rank": [
                    "int"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "perm": [
                    "Sequence[int]"
                ]
            }
        },
        "conj_transpose": {
            "name": "conj_transpose",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "permute": {
            "name": "permute",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "perm": [
                    "Sequence[int]"
                ]
            }
        },
        "inner": {
            "name": "inner",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor0": [],
                "tensor1": []
            }
        },
        "outer": {
            "name": "outer",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor0": [],
                "tensor1": [],
                "rank": [
                    "int"
                ]
            }
        },
        "trace": {
            "name": "trace",
            "location": 115,
            "return": [
                "float"
            ],
            "arguments": {
                "tensor": [],
                "rank": [
                    "int"
                ]
            }
        },
        "norm": {
            "name": "norm",
            "location": 131,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "diag": {
            "name": "diag",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "partial_trace": {
            "name": "partial_trace",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "indices": [
                    "Sequence[int]"
                ],
                "rank": [
                    "int"
                ]
            }
        },
        "tensormul": {
            "name": "tensormul",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor0": [],
                "tensor1": [],
                "indices": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "tensormul_diagonal": {
            "name": "tensormul_diagonal",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor0_diagonal": [],
                "tensor1": [],
                "indices": [
                    "Tuple[(int, ...)]"
                ]
            }
        }
    },
    "quantumflow-dev-master/quantumflow/tensors_test.py": {
        "test_asqutensor": {
            "name": "test_asqutensor",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_asqutensor_flatten": {
            "name": "test_asqutensor_flatten",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_inner_product": {
            "name": "test_inner_product",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/transform.py": {
        "compile_circuit": {
            "name": "compile_circuit",
            "location": 37,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "find_pattern": {
            "name": "find_pattern",
            "location": 77,
            "return": [],
            "arguments": {
                "dagc": [],
                "gateset1": [],
                "gateset2": []
            }
        },
        "remove_element": {
            "name": "remove_element",
            "location": 95,
            "return": [],
            "arguments": {
                "dagc": [],
                "elem": []
            }
        },
        "remove_identites": {
            "name": "remove_identites",
            "location": 105,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "merge_hadamards": {
            "name": "merge_hadamards",
            "location": 112,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "merge_tx": {
            "name": "merge_tx",
            "location": 119,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "merge_ty": {
            "name": "merge_ty",
            "location": 124,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "merge_tz": {
            "name": "merge_tz",
            "location": 129,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "_merge_turns": {
            "name": "_merge_turns",
            "location": 134,
            "return": [],
            "arguments": {
                "dagc": [],
                "gate_class": []
            }
        },
        "retrogress_tz": {
            "name": "retrogress_tz",
            "location": 149,
            "return": [],
            "arguments": {
                "dagc": []
            }
        },
        "convert_HZH": {
            "name": "convert_HZH",
            "location": 172,
            "return": [],
            "arguments": {
                "dagc": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/transform_test.py": {
        "test_compile": {
            "name": "test_compile",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_merge": {
            "name": "test_merge",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/transpile.py": {
        "transpile": {
            "name": "transpile",
            "location": 32,
            "return": [],
            "arguments": {
                "circuit": [],
                "output_format": []
            }
        },
        "_transpile_from": {
            "name": "_transpile_from",
            "location": 81,
            "return": [],
            "arguments": {
                "circuit": []
            }
        },
        "_guess_format": {
            "name": "_guess_format",
            "location": 121,
            "return": [],
            "arguments": {
                "circuit": []
            }
        },
        "_transpile_to": {
            "name": "_transpile_to",
            "location": 148,
            "return": [],
            "arguments": {
                "circuit": [],
                "output_format": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/transpile_test.py": {
        "test_guess_format": {
            "name": "test_guess_format",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_transpile": {
            "name": "test_transpile",
            "location": 61,
            "return": [],
            "arguments": {
                "circuit_format": []
            }
        },
        "test_transpile_translate": {
            "name": "test_transpile_translate",
            "location": 71,
            "return": [],
            "arguments": {
                "circuit_format": []
            }
        },
        "test_transpile_quirk": {
            "name": "test_transpile_quirk",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_transpile_accross": {
            "name": "test_transpile_accross",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_transpile_errors": {
            "name": "test_transpile_errors",
            "location": 101,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/utils.py": {
        "deprecated": {
            "name": "deprecated",
            "location": 56,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "multi_slice": {
            "name": "multi_slice",
            "location": 78,
            "return": [
                "tuple"
            ],
            "arguments": {
                "axes": [
                    "Sequence"
                ],
                "items": [
                    "Sequence"
                ],
                "axes_nb": [
                    "int"
                ]
            }
        },
        "invert_map": {
            "name": "invert_map",
            "location": 93,
            "return": [
                "dict"
            ],
            "arguments": {
                "mapping": [
                    "dict"
                ],
                "one_to_one": [
                    "bool"
                ]
            }
        },
        "almost_integer": {
            "name": "almost_integer",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "complex"
                ],
                "atol": [
                    "float"
                ]
            }
        },
        "bitlist_to_int": {
            "name": "bitlist_to_int",
            "location": 168,
            "return": [
                "int"
            ],
            "arguments": {
                "bitlist": [
                    "Sequence[int]"
                ]
            }
        },
        "int_to_bitlist": {
            "name": "int_to_bitlist",
            "location": 183,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "pad": [
                    "int"
                ]
            }
        },
        "rationalize": {
            "name": "rationalize",
            "location": 231,
            "return": [
                "fractions.Fraction"
            ],
            "arguments": {
                "flt": [
                    "float"
                ],
                "denominators": [
                    "Set[int]"
                ]
            }
        },
        "complex_ginibre_ensemble": {
            "name": "complex_ginibre_ensemble",
            "location": 252,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "size": [
                    "Tuple[(int, ...)]"
                ]
            }
        },
        "unitary_ensemble": {
            "name": "unitary_ensemble",
            "location": 264,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "dim": [
                    "int"
                ]
            }
        },
        "from_graph6": {
            "name": "from_graph6",
            "location": 280,
            "return": [
                "Any"
            ],
            "arguments": {
                "graph6": [
                    "str"
                ]
            }
        },
        "to_graph6": {
            "name": "to_graph6",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "graph": []
            }
        },
        "spanning_tree_count": {
            "name": "spanning_tree_count",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "graph": []
            }
        },
        "octagonal_tiling_graph": {
            "name": "octagonal_tiling_graph",
            "location": 302,
            "return": [
                "Any"
            ],
            "arguments": {
                "M": [
                    "int"
                ],
                "N": [
                    "int"
                ]
            }
        },
        "truncated_grid_2d_graph": {
            "name": "truncated_grid_2d_graph",
            "location": 339,
            "return": [
                "Any"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        },
        "deprecated._new_func": {
            "name": "_new_func",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "FrozenDict.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [
                "ValueType"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KeyType"
                ]
            }
        },
        "FrozenDict.__contains__": {
            "name": "__contains__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "object"
                ]
            }
        },
        "FrozenDict.copy": {
            "name": "copy",
            "location": 132,
            "return": [
                "FrozenDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.update": {
            "name": "update",
            "location": 135,
            "return": [
                "FrozenDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__iter__": {
            "name": "__iter__",
            "location": 141,
            "return": [
                "Iterator[KeyType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__len__": {
            "name": "__len__",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict.__hash__": {
            "name": "__hash__",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/utils_test.py": {
        "test_deprecated": {
            "name": "test_deprecated",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invert_dict": {
            "name": "test_invert_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frozen_dict": {
            "name": "test_frozen_dict",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frozen_dict_generic": {
            "name": "test_frozen_dict_generic",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bitlist_to_int": {
            "name": "test_bitlist_to_int",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_to_bitlist": {
            "name": "test_int_to_bitlist",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rationalize": {
            "name": "test_rationalize",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_graph6": {
            "name": "test_graph6",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spanning_tree_count": {
            "name": "test_spanning_tree_count",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_octagonal_tiling_graph": {
            "name": "test_octagonal_tiling_graph",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_truncated_grid_2d_graph": {
            "name": "test_truncated_grid_2d_graph",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multi_slice": {
            "name": "test_multi_slice",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_almost_integer": {
            "name": "test_almost_integer",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deprecated.Something.some_thing": {
            "name": "some_thing",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/var.py": {
        "is_symbolic": {
            "name": "is_symbolic",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "isclose": {
            "name": "isclose",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "atol": [
                    "float"
                ],
                "rtol": [
                    "float"
                ]
            }
        },
        "almost_zero": {
            "name": "almost_zero",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "atol": [
                    "float"
                ]
            }
        },
        "asfloat": {
            "name": "asfloat",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [],
                "subs": [
                    "Mapping[(str, float)]"
                ]
            }
        },
        "asexpression": {
            "name": "asexpression",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "flt": [
                    "float"
                ]
            }
        },
        "arccos": {
            "name": "arccos",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "arcsin": {
            "name": "arcsin",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "arctan": {
            "name": "arctan",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "arctan2": {
            "name": "arctan2",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "x1": [],
                "x2": []
            }
        },
        "cos": {
            "name": "cos",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "exp": {
            "name": "exp",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sign": {
            "name": "sign",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sin": {
            "name": "sin",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 146,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "tan": {
            "name": "tan",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/var_test.py": {
        "test_scalar_functions": {
            "name": "test_scalar_functions",
            "location": 15,
            "return": [],
            "arguments": {
                "funcname": []
            }
        },
        "test_scalar_arctan2": {
            "name": "test_scalar_arctan2",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_almost_zero": {
            "name": "test_almost_zero",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_isclose": {
            "name": "test_isclose",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_asexpression": {
            "name": "test_asexpression",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/visualization.py": {
        "circuit_to_latex": {
            "name": "circuit_to_latex",
            "location": 137,
            "return": [],
            "arguments": {
                "circ": [],
                "qubits": [],
                "document": [],
                "package": [],
                "options": [],
                "scale": [],
                "qubit_labels": [],
                "left_labels": [],
                "right_labels": []
            }
        },
        "latex_to_image": {
            "name": "latex_to_image",
            "location": 465,
            "return": [],
            "arguments": {
                "latex": []
            }
        },
        "circuit_to_image": {
            "name": "circuit_to_image",
            "location": 510,
            "return": [],
            "arguments": {
                "circ": [],
                "qubits": []
            }
        },
        "circuit_to_diagram": {
            "name": "circuit_to_diagram",
            "location": 531,
            "return": [],
            "arguments": {
                "circ": [],
                "qubits": [],
                "use_unicode": [],
                "transpose": [],
                "qubit_labels": []
            }
        },
        "_display_layers": {
            "name": "_display_layers",
            "location": 648,
            "return": [],
            "arguments": {
                "circ": [],
                "qubits": []
            }
        },
        "_round_sympy_expr": {
            "name": "_round_sympy_expr",
            "location": 695,
            "return": [],
            "arguments": {
                "expr": [],
                "num_digits": []
            }
        },
        "_pretty": {
            "name": "_pretty",
            "location": 703,
            "return": [],
            "arguments": {
                "obj": [],
                "format": []
            }
        },
        "_box_char_transpose": {
            "name": "_box_char_transpose",
            "location": 742,
            "return": [],
            "arguments": {
                "chars": []
            }
        },
        "_unicode_to_ascii": {
            "name": "_unicode_to_ascii",
            "location": 762,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "print_gate": {
            "name": "print_gate",
            "location": 766,
            "return": [],
            "arguments": {
                "gate": [],
                "ndigits": [],
                "file": []
            }
        },
        "NoWire._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "circuit_to_diagram.qpad": {
            "name": "qpad",
            "location": 555,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "circuit_to_diagram.draw_line": {
            "name": "draw_line",
            "location": 564,
            "return": [],
            "arguments": {
                "code": [],
                "i0": [],
                "i1": [],
                "left_pad": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/visualization_test.py": {
        "test_circuit_to_latex": {
            "name": "test_circuit_to_latex",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_latex_error": {
            "name": "test_circuit_to_latex_error",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_visualize_circuit": {
            "name": "test_visualize_circuit",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_circuit_diagram": {
            "name": "test_circuit_diagram",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "test_stdgates_latex_to_image": {
            "name": "test_stdgates_latex_to_image",
            "location": 157,
            "return": [],
            "arguments": {
                "gatename": []
            }
        },
        "test_circuit_to_diagram_stdgates": {
            "name": "test_circuit_to_diagram_stdgates",
            "location": 171,
            "return": [],
            "arguments": {
                "gatename": []
            }
        },
        "test_latex_to_image": {
            "name": "test_latex_to_image",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_diagram": {
            "name": "test_circuit_to_diagram",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_repr_png_": {
            "name": "test_repr_png_",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "test_repr_html_": {
            "name": "test_repr_html_",
            "location": 391,
            "return": [],
            "arguments": {}
        },
        "test_gate2_to_diagrams": {
            "name": "test_gate2_to_diagrams",
            "location": 397,
            "return": [],
            "arguments": {}
        },
        "test_gate3_to_diagrams": {
            "name": "test_gate3_to_diagrams",
            "location": 438,
            "return": [],
            "arguments": {}
        },
        "test_ControlGate_to_latex": {
            "name": "test_ControlGate_to_latex",
            "location": 465,
            "return": [],
            "arguments": {}
        },
        "test_latex_labels": {
            "name": "test_latex_labels",
            "location": 474,
            "return": [],
            "arguments": {}
        },
        "test_print_gate": {
            "name": "test_print_gate",
            "location": 488,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xbraket.py": {
        "braket_to_circuit": {
            "name": "braket_to_circuit",
            "location": 84,
            "return": [],
            "arguments": {
                "bkcircuit": []
            }
        },
        "circuit_to_braket": {
            "name": "circuit_to_braket",
            "location": 126,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "translate_to_braket": {
            "name": "translate_to_braket",
            "location": 165,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "BraketSimulator.run": {
            "name": "run",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xbraket_test.py": {
        "test_braket_to_circuit": {
            "name": "test_braket_to_circuit",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_qiskit": {
            "name": "test_circuit_to_qiskit",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_braketsimulator": {
            "name": "test_braketsimulator",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xcirq.py": {
        "from_cirq_qubit": {
            "name": "from_cirq_qubit",
            "location": 111,
            "return": [],
            "arguments": {
                "qb": []
            }
        },
        "to_cirq_qubit": {
            "name": "to_cirq_qubit",
            "location": 131,
            "return": [],
            "arguments": {
                "qubit": []
            }
        },
        "cirq_to_circuit": {
            "name": "cirq_to_circuit",
            "location": 154,
            "return": [],
            "arguments": {
                "cqc": []
            }
        },
        "circuit_to_cirq": {
            "name": "circuit_to_cirq",
            "location": 228,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "translate_to_cirq": {
            "name": "translate_to_cirq",
            "location": 294,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "CirqSimulator.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "circ": []
            }
        },
        "CirqSimulator.run": {
            "name": "run",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xcirq_test.py": {
        "test_from_cirq_qubit": {
            "name": "test_from_cirq_qubit",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_to_cirq_qubit": {
            "name": "test_to_cirq_qubit",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_cirq_to_circuit": {
            "name": "test_cirq_to_circuit",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "version_to_versioninfo": {
            "name": "version_to_versioninfo",
            "location": 126,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "test_cirq_to_circuit_0_7": {
            "name": "test_cirq_to_circuit_0_7",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "test_cirq_to_circuit2": {
            "name": "test_cirq_to_circuit2",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_circ": {
            "name": "test_circuit_to_circ",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_circ_exception": {
            "name": "test_circuit_to_circ_exception",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_circ_translate": {
            "name": "test_circuit_to_circ_translate",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_cirq_simulator": {
            "name": "test_cirq_simulator",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_cirq_unitary": {
            "name": "test_circuit_to_cirq_unitary",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_cirq_to_circuit2.basic_circuit": {
            "name": "basic_circuit",
            "location": 167,
            "return": [],
            "arguments": {
                "meas": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xforest.py": {
        "circuit_to_pyquil": {
            "name": "circuit_to_pyquil",
            "location": 71,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "pyquil_to_circuit": {
            "name": "pyquil_to_circuit",
            "location": 96,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "translate_to_pyquil": {
            "name": "translate_to_pyquil",
            "location": 130,
            "return": [],
            "arguments": {
                "circ": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xforest_test.py": {
        "test_circuit_to_pyquil": {
            "name": "test_circuit_to_pyquil",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_pyquil_translate": {
            "name": "test_circuit_to_pyquil_translate",
            "location": 48,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xqiskit.py": {
        "qiskit_to_circuit": {
            "name": "qiskit_to_circuit",
            "location": 124,
            "return": [],
            "arguments": {
                "qkcircuit": []
            }
        },
        "circuit_to_qiskit": {
            "name": "circuit_to_qiskit",
            "location": 152,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "translate_to_qiskit": {
            "name": "translate_to_qiskit",
            "location": 199,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "circuit_to_qasm": {
            "name": "circuit_to_qasm",
            "location": 208,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "qasm_to_circuit": {
            "name": "qasm_to_circuit",
            "location": 213,
            "return": [],
            "arguments": {
                "qasm_str": []
            }
        },
        "QiskitSimulator.run": {
            "name": "run",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xqiskit_test.py": {
        "test_qiskit_to_circuit": {
            "name": "test_qiskit_to_circuit",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_qiskit_if": {
            "name": "test_qiskit_if",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_qiskit": {
            "name": "test_circuit_to_qiskit",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_qiskitsimulator": {
            "name": "test_qiskitsimulator",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_qasm": {
            "name": "test_circuit_to_qasm",
            "location": 172,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xqsim.py": {
        "translate_circuit_to_qsim": {
            "name": "translate_circuit_to_qsim",
            "location": 66,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "QSimSimulator.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "circ": [],
                "translate": []
            }
        },
        "QSimSimulator.run": {
            "name": "run",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xqsim_test.py": {
        "test_qsim_simulator": {
            "name": "test_qsim_simulator",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_qsim_translate": {
            "name": "test_qsim_translate",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xquirk.py": {
        "circuit_to_quirk": {
            "name": "circuit_to_quirk",
            "location": 83,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "quirk_url": {
            "name": "quirk_url",
            "location": 131,
            "return": [],
            "arguments": {
                "quirk": [],
                "base_url": [],
                "escape": []
            }
        },
        "open_quirk_webserver": {
            "name": "open_quirk_webserver",
            "location": 142,
            "return": [],
            "arguments": {
                "circ": []
            }
        },
        "translate_to_quirk": {
            "name": "translate_to_quirk",
            "location": 151,
            "return": [],
            "arguments": {
                "circ": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xquirk_test.py": {
        "test_circuit_to_quirk": {
            "name": "test_circuit_to_quirk",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_fail": {
            "name": "test_fail",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_url_escape": {
            "name": "test_url_escape",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_translate_to_quirk": {
            "name": "test_translate_to_quirk",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_circuit_to_quirk_translate": {
            "name": "test_circuit_to_quirk_translate",
            "location": 92,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/xqutip.py": {
        "qutip_to_circuit": {
            "name": "qutip_to_circuit",
            "location": 154,
            "return": [],
            "arguments": {
                "qubitcircuit": []
            }
        },
        "circuit_to_qutip": {
            "name": "circuit_to_qutip",
            "location": 186,
            "return": [],
            "arguments": {
                "circ": [],
                "translate": []
            }
        },
        "translate_to_qutip": {
            "name": "translate_to_qutip",
            "location": 234,
            "return": [],
            "arguments": {
                "circ": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/xqutip_test.py": {
        "test_circuit_to_qutip": {
            "name": "test_circuit_to_qutip",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_translate_to_qutip": {
            "name": "test_translate_to_qutip",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/__init__.py": {},
    "quantumflow-dev-master/quantumflow/stdgates/stdgates.py": {
        "StdGate.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "StdGate.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdGate._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 124,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "StdCtrlGate.control_qubits": {
            "name": "control_qubits",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.target_qubits": {
            "name": "target_qubits",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.control_qubit_nb": {
            "name": "control_qubit_nb",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.target_qubit_nb": {
            "name": "target_qubit_nb",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.target": {
            "name": "target",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.hamiltonian": {
            "name": "hamiltonian",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.tensor": {
            "name": "tensor",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdCtrlGate.resolve": {
            "name": "resolve",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "subs": []
            }
        },
        "StdCtrlGate._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_1q.py": {
        "_specialize_gate": {
            "name": "_specialize_gate",
            "location": 50,
            "return": [],
            "arguments": {
                "gate": [],
                "periods": [],
                "opts": []
            }
        },
        "I.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "I.hamiltonian": {
            "name": "hamiltonian",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "I.tensor": {
            "name": "tensor",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "I.H": {
            "name": "H",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "I.__pow__": {
            "name": "__pow__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "I.run": {
            "name": "run",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "I.evolve": {
            "name": "evolve",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "Ph.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "phi": [],
                "q0": []
            }
        },
        "Ph.hamiltonian": {
            "name": "hamiltonian",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ph.tensor": {
            "name": "tensor",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ph.H": {
            "name": "H",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ph.__pow__": {
            "name": "__pow__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Ph.run": {
            "name": "run",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Ph.evolve": {
            "name": "evolve",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "rho": []
            }
        },
        "X.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "X.hamiltonian": {
            "name": "hamiltonian",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "X.tensor": {
            "name": "tensor",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "X.H": {
            "name": "H",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "X.__pow__": {
            "name": "__pow__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "X.run": {
            "name": "run",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Y.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Y.hamiltonian": {
            "name": "hamiltonian",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Y.tensor": {
            "name": "tensor",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Y.H": {
            "name": "H",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Y.__pow__": {
            "name": "__pow__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Y.run": {
            "name": "run",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Z.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Z.hamiltonian": {
            "name": "hamiltonian",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Z.tensor": {
            "name": "tensor",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Z.H": {
            "name": "H",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Z.__pow__": {
            "name": "__pow__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Z.run": {
            "name": "run",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "H.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "H.hamiltonian": {
            "name": "hamiltonian",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H.tensor": {
            "name": "tensor",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H.H": {
            "name": "H",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H.__pow__": {
            "name": "__pow__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "H.run": {
            "name": "run",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "S.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "S.hamiltonian": {
            "name": "hamiltonian",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S.tensor": {
            "name": "tensor",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S.H": {
            "name": "H",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S.__pow__": {
            "name": "__pow__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "S.run": {
            "name": "run",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "T.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "T.hamiltonian": {
            "name": "hamiltonian",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.tensor": {
            "name": "tensor",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.H": {
            "name": "H",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.__pow__": {
            "name": "__pow__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "T.run": {
            "name": "run",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "PhaseShift.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "PhaseShift.hamiltonian": {
            "name": "hamiltonian",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseShift.tensor": {
            "name": "tensor",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseShift.H": {
            "name": "H",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseShift.__pow__": {
            "name": "__pow__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "PhaseShift.run": {
            "name": "run",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "PhaseShift.specialize": {
            "name": "specialize",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhaseShift._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rx.__init__": {
            "name": "__init__",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "Rx.hamiltonian": {
            "name": "hamiltonian",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rx.tensor": {
            "name": "tensor",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rx.H": {
            "name": "H",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rx.__pow__": {
            "name": "__pow__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Rx.specialize": {
            "name": "specialize",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ry.__init__": {
            "name": "__init__",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "Ry.hamiltonian": {
            "name": "hamiltonian",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ry.tensor": {
            "name": "tensor",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ry.H": {
            "name": "H",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ry.__pow__": {
            "name": "__pow__",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Ry.specialize": {
            "name": "specialize",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rz.__init__": {
            "name": "__init__",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "Rz.hamiltonian": {
            "name": "hamiltonian",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rz.tensor": {
            "name": "tensor",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rz.H": {
            "name": "H",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rz.__pow__": {
            "name": "__pow__",
            "location": 596,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Rz.run": {
            "name": "run",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Rz.specialize": {
            "name": "specialize",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.__init__": {
            "name": "__init__",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "S_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.tensor": {
            "name": "tensor",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.H": {
            "name": "H",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.__pow__": {
            "name": "__pow__",
            "location": 646,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "S_H.run": {
            "name": "run",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "T_H.__init__": {
            "name": "__init__",
            "location": 666,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "T_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_H.tensor": {
            "name": "tensor",
            "location": 675,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_H.H": {
            "name": "H",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_H.__pow__": {
            "name": "__pow__",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "T_H.run": {
            "name": "run",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Rn.__init__": {
            "name": "__init__",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "nx": [],
                "ny": [],
                "nz": [],
                "q0": []
            }
        },
        "Rn.hamiltonian": {
            "name": "hamiltonian",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rn.tensor": {
            "name": "tensor",
            "location": 725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rn.H": {
            "name": "H",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rn.__pow__": {
            "name": "__pow__",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "XPow.__init__": {
            "name": "__init__",
            "location": 764,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "XPow.hamiltonian": {
            "name": "hamiltonian",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XPow.tensor": {
            "name": "tensor",
            "location": 774,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XPow.H": {
            "name": "H",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XPow.__pow__": {
            "name": "__pow__",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "XPow.specialize": {
            "name": "specialize",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YPow.__init__": {
            "name": "__init__",
            "location": 811,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "YPow.hamiltonian": {
            "name": "hamiltonian",
            "location": 815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YPow.tensor": {
            "name": "tensor",
            "location": 821,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YPow.H": {
            "name": "H",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YPow.__pow__": {
            "name": "__pow__",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "YPow.specialize": {
            "name": "specialize",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPow.__init__": {
            "name": "__init__",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "ZPow.hamiltonian": {
            "name": "hamiltonian",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPow.tensor": {
            "name": "tensor",
            "location": 866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPow.H": {
            "name": "H",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPow.__pow__": {
            "name": "__pow__",
            "location": 879,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "ZPow.run": {
            "name": "run",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "ZPow.specialize": {
            "name": "specialize",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPow.__init__": {
            "name": "__init__",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "HPow.hamiltonian": {
            "name": "hamiltonian",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPow.tensor": {
            "name": "tensor",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPow.H": {
            "name": "H",
            "location": 938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPow.__pow__": {
            "name": "__pow__",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "HPow.specialize": {
            "name": "specialize",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V.__init__": {
            "name": "__init__",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "V.hamiltonian": {
            "name": "hamiltonian",
            "location": 961,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V.tensor": {
            "name": "tensor",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V.H": {
            "name": "H",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V.__pow__": {
            "name": "__pow__",
            "location": 973,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "V_H.__init__": {
            "name": "__init__",
            "location": 985,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "V_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 989,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V_H.tensor": {
            "name": "tensor",
            "location": 994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V_H.H": {
            "name": "H",
            "location": 998,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "V_H.__pow__": {
            "name": "__pow__",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtY.__init__": {
            "name": "__init__",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "SqrtY.hamiltonian": {
            "name": "hamiltonian",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY.tensor": {
            "name": "tensor",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY.H": {
            "name": "H",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY.__pow__": {
            "name": "__pow__",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtY_H.__init__": {
            "name": "__init__",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "SqrtY_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY_H.tensor": {
            "name": "tensor",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY_H.H": {
            "name": "H",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtY_H.__pow__": {
            "name": "__pow__",
            "location": 1057,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_1q_test.py": {
        "test_XPow": {
            "name": "test_XPow",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_rn": {
            "name": "test_rn",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_parametric_Z": {
            "name": "test_parametric_Z",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_hadamard": {
            "name": "test_hadamard",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_rotation_gates": {
            "name": "test_rotation_gates",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_phaseshift": {
            "name": "test_phaseshift",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_tz_specialize": {
            "name": "test_tz_specialize",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_specialize_1q": {
            "name": "test_specialize_1q",
            "location": 89,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_2q.py": {
        "A.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "phi": [],
                "q0": [],
                "q1": []
            }
        },
        "A.tensor": {
            "name": "tensor",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.H": {
            "name": "H",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "B.hamiltonian": {
            "name": "hamiltonian",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.tensor": {
            "name": "tensor",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.H": {
            "name": "H",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__pow__": {
            "name": "__pow__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Barenco.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "phi": [],
                "alpha": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "Barenco.tensor": {
            "name": "tensor",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Barenco.H": {
            "name": "H",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Barenco._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Can.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "tx": [],
                "ty": [],
                "tz": [],
                "q0": [],
                "q1": []
            }
        },
        "Can.hamiltonian": {
            "name": "hamiltonian",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Can.tensor": {
            "name": "tensor",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Can.H": {
            "name": "H",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Can.__pow__": {
            "name": "__pow__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Can.specialize": {
            "name": "specialize",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CH.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CH.H": {
            "name": "H",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNot.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CNot.H": {
            "name": "H",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNot.__pow__": {
            "name": "__pow__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CNot.run": {
            "name": "run",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "CNot._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNotPow.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "CNotPow.H": {
            "name": "H",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNotPow.__pow__": {
            "name": "__pow__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "CNotPow.specialize": {
            "name": "specialize",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossResonance.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "b": [],
                "c": [],
                "q0": [],
                "q1": []
            }
        },
        "CrossResonance.hamiltonian": {
            "name": "hamiltonian",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossResonance.tensor": {
            "name": "tensor",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossResonance.H": {
            "name": "H",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossResonance.__pow__": {
            "name": "__pow__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CrossResonance._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CS.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CS.__pow__": {
            "name": "__pow__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CT.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CT.__pow__": {
            "name": "__pow__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CY.__init__": {
            "name": "__init__",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CY.H": {
            "name": "H",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CY.__pow__": {
            "name": "__pow__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "CYPow.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "CYPow.H": {
            "name": "H",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CYPow.__pow__": {
            "name": "__pow__",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "CV.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CV.H": {
            "name": "H",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CV.__pow__": {
            "name": "__pow__",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CV_H.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CV_H.H": {
            "name": "H",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CV_H.__pow__": {
            "name": "__pow__",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CZ.__init__": {
            "name": "__init__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CZ.H": {
            "name": "H",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CZ.__pow__": {
            "name": "__pow__",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CZ.run": {
            "name": "run",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "CZ._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CZPow.__init__": {
            "name": "__init__",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "CZPow.H": {
            "name": "H",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CZPow.__pow__": {
            "name": "__pow__",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ECP.__init__": {
            "name": "__init__",
            "location": 634,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "ECP.hamiltonian": {
            "name": "hamiltonian",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECP.tensor": {
            "name": "tensor",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECP.H": {
            "name": "H",
            "location": 646,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECP.__pow__": {
            "name": "__pow__",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Exch.__init__": {
            "name": "__init__",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "Exch.hamiltonian": {
            "name": "hamiltonian",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exch.tensor": {
            "name": "tensor",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exch.H": {
            "name": "H",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exch.__pow__": {
            "name": "__pow__",
            "location": 681,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Exch.specialize": {
            "name": "specialize",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Givens.__init__": {
            "name": "__init__",
            "location": 722,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "Givens.hamiltonian": {
            "name": "hamiltonian",
            "location": 726,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Givens.tensor": {
            "name": "tensor",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Givens.H": {
            "name": "H",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Givens.__pow__": {
            "name": "__pow__",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "ISwap.__init__": {
            "name": "__init__",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "ISwap.hamiltonian": {
            "name": "hamiltonian",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISwap.tensor": {
            "name": "tensor",
            "location": 775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISwap.run": {
            "name": "run",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "ISwap.H": {
            "name": "H",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISwap.__pow__": {
            "name": "__pow__",
            "location": 793,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtISwap.__init__": {
            "name": "__init__",
            "location": 808,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "SqrtISwap.hamiltonian": {
            "name": "hamiltonian",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap.tensor": {
            "name": "tensor",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap.H": {
            "name": "H",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap.__pow__": {
            "name": "__pow__",
            "location": 823,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtISwap_H.__init__": {
            "name": "__init__",
            "location": 838,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "SqrtISwap_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap_H.tensor": {
            "name": "tensor",
            "location": 846,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap_H.H": {
            "name": "H",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtISwap_H.__pow__": {
            "name": "__pow__",
            "location": 853,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtSwap.__init__": {
            "name": "__init__",
            "location": 868,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "SqrtSwap.hamiltonian": {
            "name": "hamiltonian",
            "location": 872,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap.tensor": {
            "name": "tensor",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap.H": {
            "name": "H",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap.__pow__": {
            "name": "__pow__",
            "location": 883,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "SqrtSwap_H.__init__": {
            "name": "__init__",
            "location": 899,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "SqrtSwap_H.hamiltonian": {
            "name": "hamiltonian",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap_H.tensor": {
            "name": "tensor",
            "location": 907,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap_H.H": {
            "name": "H",
            "location": 911,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqrtSwap_H.__pow__": {
            "name": "__pow__",
            "location": 914,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Swap.__init__": {
            "name": "__init__",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "Swap.hamiltonian": {
            "name": "hamiltonian",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Swap.tensor": {
            "name": "tensor",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Swap.H": {
            "name": "H",
            "location": 951,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Swap.__pow__": {
            "name": "__pow__",
            "location": 955,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Swap.run": {
            "name": "run",
            "location": 958,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Swap._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "W.__init__": {
            "name": "__init__",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "W.tensor": {
            "name": "tensor",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "W.H": {
            "name": "H",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX.__init__": {
            "name": "__init__",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "XX.hamiltonian": {
            "name": "hamiltonian",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX.tensor": {
            "name": "tensor",
            "location": 1048,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX.H": {
            "name": "H",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX.__pow__": {
            "name": "__pow__",
            "location": 1062,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "XX.specialize": {
            "name": "specialize",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XY.__init__": {
            "name": "__init__",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "XY.hamiltonian": {
            "name": "hamiltonian",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XY.tensor": {
            "name": "tensor",
            "location": 1096,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XY.H": {
            "name": "H",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XY.__pow__": {
            "name": "__pow__",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "XY._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 1108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY.__init__": {
            "name": "__init__",
            "location": 1123,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "YY.hamiltonian": {
            "name": "hamiltonian",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY.tensor": {
            "name": "tensor",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY.H": {
            "name": "H",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY.__pow__": {
            "name": "__pow__",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "YY.specialize": {
            "name": "specialize",
            "location": 1151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 1159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ.__init__": {
            "name": "__init__",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "ZZ.hamiltonian": {
            "name": "hamiltonian",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ.tensor": {
            "name": "tensor",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ.H": {
            "name": "H",
            "location": 1201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ.__pow__": {
            "name": "__pow__",
            "location": 1204,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "ZZ.specialize": {
            "name": "specialize",
            "location": 1208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_2q_test.py": {
        "test_XY": {
            "name": "test_XY",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_CV": {
            "name": "test_CV",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_CH": {
            "name": "test_CH",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_cnot_reverse": {
            "name": "test_cnot_reverse",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_xy": {
            "name": "test_xy",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_cv": {
            "name": "test_cv",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_CNotPow": {
            "name": "test_CNotPow",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_specialize_2q": {
            "name": "test_specialize_2q",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_3q.py": {
        "CCiX.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CCiX.hamiltonian": {
            "name": "hamiltonian",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCiX.tensor": {
            "name": "tensor",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCiX._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCNot.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CCNot.H": {
            "name": "H",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCNot.__pow__": {
            "name": "__pow__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CCNot.run": {
            "name": "run",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "CCXPow.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CCXPow.H": {
            "name": "H",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCXPow.__pow__": {
            "name": "__pow__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "CCZ.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CCZ.H": {
            "name": "H",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CCZ.run": {
            "name": "run",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "CCZ._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CISwap.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CSwap.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CSwap.H": {
            "name": "H",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSwap.run": {
            "name": "run",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "ket": []
            }
        },
        "Deutsch.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "Deutsch.tensor": {
            "name": "tensor",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deutsch._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Margolus.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "Margolus.hamiltonian": {
            "name": "hamiltonian",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Margolus.tensor": {
            "name": "tensor",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Margolus.H": {
            "name": "H",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_3q_test.py": {
        "test_ccnot": {
            "name": "test_ccnot",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_cswap": {
            "name": "test_cswap",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_ccz": {
            "name": "test_ccz",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_deutsch": {
            "name": "test_deutsch",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_cirq.py": {
        "PhasedX.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "q0": []
            }
        },
        "PhasedX.tensor": {
            "name": "tensor",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedX.H": {
            "name": "H",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedX.__pow__": {
            "name": "__pow__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "PhasedX.specialize": {
            "name": "specialize",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedXPow.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "t": [],
                "q0": []
            }
        },
        "PhasedXPow.tensor": {
            "name": "tensor",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedXPow.H": {
            "name": "H",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedXPow.__pow__": {
            "name": "__pow__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "PhasedXPow.specialize": {
            "name": "specialize",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PhasedXPow._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSim.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "phi": [],
                "q0": [],
                "q1": []
            }
        },
        "FSim.tensor": {
            "name": "tensor",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSim.H": {
            "name": "H",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSim.__pow__": {
            "name": "__pow__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "FSwap.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "FSwap.hamiltonian": {
            "name": "hamiltonian",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwap.tensor": {
            "name": "tensor",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwap.H": {
            "name": "H",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwap.__pow__": {
            "name": "__pow__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "FSwap._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwapPow.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "FSwapPow.hamiltonian": {
            "name": "hamiltonian",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwapPow.tensor": {
            "name": "tensor",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwapPow.H": {
            "name": "H",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FSwapPow.__pow__": {
            "name": "__pow__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "FSwapPow._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sycamore.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "Sycamore.tensor": {
            "name": "tensor",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sycamore.H": {
            "name": "H",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sycamore.__pow__": {
            "name": "__pow__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_cirq_test.py": {
        "test_FSim": {
            "name": "test_FSim",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_PhasedX": {
            "name": "test_PhasedX",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_forest.py": {
        "CPhase.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPhase.hamiltonian": {
            "name": "hamiltonian",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase.tensor": {
            "name": "tensor",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase.H": {
            "name": "H",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase.__pow__": {
            "name": "__pow__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CPhase._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase00.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPhase00.hamiltonian": {
            "name": "hamiltonian",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase00.tensor": {
            "name": "tensor",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase00.H": {
            "name": "H",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase00.__pow__": {
            "name": "__pow__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CPhase00._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase01.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPhase01.hamiltonian": {
            "name": "hamiltonian",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase01.tensor": {
            "name": "tensor",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase01.H": {
            "name": "H",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase01.__pow__": {
            "name": "__pow__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CPhase01._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase10.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPhase10.hamiltonian": {
            "name": "hamiltonian",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase10.tensor": {
            "name": "tensor",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase10.H": {
            "name": "H",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPhase10.__pow__": {
            "name": "__pow__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CPhase10._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PSwap.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "PSwap.tensor": {
            "name": "tensor",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PSwap.H": {
            "name": "H",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_forest_test.py": {
        "test_CPhase_gates": {
            "name": "test_CPhase_gates",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_CPhase_pow": {
            "name": "test_CPhase_pow",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_pswap": {
            "name": "test_pswap",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_qasm.py": {
        "U3.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "phi": [],
                "lam": [],
                "q0": []
            }
        },
        "U3.tensor": {
            "name": "tensor",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "U3.H": {
            "name": "H",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "U2.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "phi": [],
                "lam": [],
                "q0": []
            }
        },
        "U2.tensor": {
            "name": "tensor",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "U2.H": {
            "name": "H",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CU3.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "phi": [],
                "lam": [],
                "q0": [],
                "q1": []
            }
        },
        "CU3.tensor": {
            "name": "tensor",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CU3.H": {
            "name": "H",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CU3._diagram_labels_": {
            "name": "_diagram_labels_",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CRx.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CRx.H": {
            "name": "H",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CRx.__pow__": {
            "name": "__pow__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CRy.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CRy.H": {
            "name": "H",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CRy.__pow__": {
            "name": "__pow__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CRz.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CRz.H": {
            "name": "H",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CRz.__pow__": {
            "name": "__pow__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Rxx.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "Rxx.tensor": {
            "name": "tensor",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rxx.H": {
            "name": "H",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rxx.__pow__": {
            "name": "__pow__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Ryy.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "Ryy.tensor": {
            "name": "tensor",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ryy.H": {
            "name": "H",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ryy.__pow__": {
            "name": "__pow__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Rzz.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "Rzz.tensor": {
            "name": "tensor",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rzz.H": {
            "name": "H",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rzz.__pow__": {
            "name": "__pow__",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_qasm_test.py": {
        "test_U3": {
            "name": "test_U3",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_cu1": {
            "name": "test_cu1",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_CU3": {
            "name": "test_CU3",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_CRZ": {
            "name": "test_CRZ",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_RZZ": {
            "name": "test_RZZ",
            "location": 77,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/stdgates_test.py": {
        "_randomize_gate": {
            "name": "_randomize_gate",
            "location": 18,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_str": {
            "name": "test_str",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_stdgates_repr": {
            "name": "test_stdgates_repr",
            "location": 57,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_stdgates": {
            "name": "test_stdgates",
            "location": 67,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "_tensor_structure": {
            "name": "_tensor_structure",
            "location": 94,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "test_tensor_properties": {
            "name": "test_tensor_properties",
            "location": 124,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_hamiltonians": {
            "name": "test_hamiltonians",
            "location": 148,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_symbolic": {
            "name": "test_symbolic",
            "location": 162,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_decompose": {
            "name": "test_decompose",
            "location": 182,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_gate_run": {
            "name": "test_gate_run",
            "location": 190,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_gate_evolve": {
            "name": "test_gate_evolve",
            "location": 202,
            "return": [],
            "arguments": {
                "gatet": []
            }
        },
        "test_diagram_labels": {
            "name": "test_diagram_labels",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_StdCtrlGate_tensor_structure": {
            "name": "test_StdCtrlGate_tensor_structure",
            "location": 222,
            "return": [],
            "arguments": {
                "gatetype": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/stdgates/__init__.py": {},
    "quantumflow-dev-master/quantumflow/translate/translate_gates.py": {
        "translate_IdentityGate_to_I": {
            "name": "translate_IdentityGate_to_I",
            "location": 48,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_MultiSwapGate_to_swap_network": {
            "name": "translate_MultiSwapGate_to_swap_network",
            "location": 55,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ReversalGate_to_swap_network": {
            "name": "translate_ReversalGate_to_swap_network",
            "location": 68,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_QFTGate": {
            "name": "translate_QFTGate",
            "location": 79,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_InvQFTGate": {
            "name": "translate_InvQFTGate",
            "location": 92,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_PauliGate": {
            "name": "translate_PauliGate",
            "location": 99,
            "return": [],
            "arguments": {
                "gate": [],
                "topology": []
            }
        },
        "translate_DiagonalGate": {
            "name": "translate_DiagonalGate",
            "location": 178,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_MultiplexedRzGate": {
            "name": "translate_MultiplexedRzGate",
            "location": 200,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_MultiplexedRyGate": {
            "name": "translate_MultiplexedRyGate",
            "location": 263,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/translate/translate_stdgates_1q.py": {
        "translate_x_to_tx": {
            "name": "translate_x_to_tx",
            "location": 44,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_y_to_ty": {
            "name": "translate_y_to_ty",
            "location": 51,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_z_to_tz": {
            "name": "translate_z_to_tz",
            "location": 58,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_s_to_tz": {
            "name": "translate_s_to_tz",
            "location": 65,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_t_to_tz": {
            "name": "translate_t_to_tz",
            "location": 72,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_invs_to_tz": {
            "name": "translate_invs_to_tz",
            "location": 79,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_invt_to_tz": {
            "name": "translate_invt_to_tz",
            "location": 86,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rx_to_tx": {
            "name": "translate_rx_to_tx",
            "location": 93,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ry_to_ty": {
            "name": "translate_ry_to_ty",
            "location": 102,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rz_to_tz": {
            "name": "translate_rz_to_tz",
            "location": 111,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rn_to_rz_ry": {
            "name": "translate_rn_to_rz_ry",
            "location": 120,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_phase_to_rz": {
            "name": "translate_phase_to_rz",
            "location": 140,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrty_to_ty": {
            "name": "translate_sqrty_to_ty",
            "location": 148,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrty_h_to_ty": {
            "name": "translate_sqrty_h_to_ty",
            "location": 155,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tx_to_rx": {
            "name": "translate_tx_to_rx",
            "location": 162,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ty_to_ry": {
            "name": "translate_ty_to_ry",
            "location": 170,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tz_to_rz": {
            "name": "translate_tz_to_rz",
            "location": 178,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ty_to_xzx": {
            "name": "translate_ty_to_xzx",
            "location": 186,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tx_to_zyz": {
            "name": "translate_tx_to_zyz",
            "location": 196,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tz_to_xyx": {
            "name": "translate_tz_to_xyx",
            "location": 206,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_phased_x_to_zxz": {
            "name": "translate_phased_x_to_zxz",
            "location": 216,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_phased_tx_to_zxz": {
            "name": "translate_phased_tx_to_zxz",
            "location": 226,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_v_to_tx": {
            "name": "translate_v_to_tx",
            "location": 236,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_invv_to_tx": {
            "name": "translate_invv_to_tx",
            "location": 243,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_th_to_tx": {
            "name": "translate_th_to_tx",
            "location": 250,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ty_to_zxz": {
            "name": "translate_ty_to_zxz",
            "location": 265,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tx_to_zxzxz": {
            "name": "translate_tx_to_zxzxz",
            "location": 275,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_hadamard_to_zxz": {
            "name": "translate_hadamard_to_zxz",
            "location": 292,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_u3_to_zyz": {
            "name": "translate_u3_to_zyz",
            "location": 301,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_u2_to_zyz": {
            "name": "translate_u2_to_zyz",
            "location": 311,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_tx_to_hzh": {
            "name": "translate_tx_to_hzh",
            "location": 321,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/translate/translate_stdgates_2q.py": {
        "translate_b_to_can": {
            "name": "translate_b_to_can",
            "location": 80,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_barenco_to_xx": {
            "name": "translate_barenco_to_xx",
            "location": 91,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_can_to_cnot": {
            "name": "translate_can_to_cnot",
            "location": 116,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_can_to_xx_yy_zz": {
            "name": "translate_can_to_xx_yy_zz",
            "location": 166,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ch_to_cpt": {
            "name": "translate_ch_to_cpt",
            "location": 180,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cnot_to_cz": {
            "name": "translate_cnot_to_cz",
            "location": 204,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cnot_to_sqrtiswap": {
            "name": "translate_cnot_to_sqrtiswap",
            "location": 213,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cnot_to_sqrtswap": {
            "name": "translate_cnot_to_sqrtswap",
            "location": 231,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cnot_to_xx": {
            "name": "translate_cnot_to_xx",
            "location": 246,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cy_to_cnot": {
            "name": "translate_cy_to_cnot",
            "location": 260,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cypow_to_cxpow": {
            "name": "translate_cypow_to_cxpow",
            "location": 269,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cphase_to_zz": {
            "name": "translate_cphase_to_zz",
            "location": 279,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cphase00_to_cphase": {
            "name": "translate_cphase00_to_cphase",
            "location": 289,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cphase01_to_cphase": {
            "name": "translate_cphase01_to_cphase",
            "location": 301,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cphase10_to_cphase": {
            "name": "translate_cphase10_to_cphase",
            "location": 311,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cross_resonance_to_xx": {
            "name": "translate_cross_resonance_to_xx",
            "location": 321,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_crx_to_cnotpow": {
            "name": "translate_crx_to_cnotpow",
            "location": 357,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cry_to_cypow": {
            "name": "translate_cry_to_cypow",
            "location": 367,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_crz_to_czpow": {
            "name": "translate_crz_to_czpow",
            "location": 377,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_crz_to_cnot": {
            "name": "translate_crz_to_cnot",
            "location": 387,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cnotpow_to_zz": {
            "name": "translate_cnotpow_to_zz",
            "location": 403,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cz_to_zz": {
            "name": "translate_cz_to_zz",
            "location": 422,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_czpow_to_zz": {
            "name": "translate_czpow_to_zz",
            "location": 431,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_czpow_to_cphase": {
            "name": "translate_czpow_to_cphase",
            "location": 441,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cphase_to_czpow": {
            "name": "translate_cphase_to_czpow",
            "location": 448,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cu3_to_cnot": {
            "name": "translate_cu3_to_cnot",
            "location": 460,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cv_to_cpt": {
            "name": "translate_cv_to_cpt",
            "location": 476,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cvh_to_cpt": {
            "name": "translate_cvh_to_cpt",
            "location": 498,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ecp_to_can": {
            "name": "translate_ecp_to_can",
            "location": 520,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ecp_to_sqrtiswap": {
            "name": "translate_ecp_to_sqrtiswap",
            "location": 526,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_exch_to_can": {
            "name": "translate_exch_to_can",
            "location": 545,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_exch_to_xy_zz": {
            "name": "translate_exch_to_xy_zz",
            "location": 553,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_fsim_to_xy_cz": {
            "name": "translate_fsim_to_xy_cz",
            "location": 562,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_fswap": {
            "name": "translate_fswap",
            "location": 572,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_fswappow": {
            "name": "translate_fswappow",
            "location": 580,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_givens_to_xy": {
            "name": "translate_givens_to_xy",
            "location": 590,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_iswap_to_can": {
            "name": "translate_iswap_to_can",
            "location": 603,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_iswap_to_swap_cz": {
            "name": "translate_iswap_to_swap_cz",
            "location": 612,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_iswap_to_sqrtiswap": {
            "name": "translate_iswap_to_sqrtiswap",
            "location": 622,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_iswap_to_xy": {
            "name": "translate_iswap_to_xy",
            "location": 630,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_pswap_to_canonical": {
            "name": "translate_pswap_to_canonical",
            "location": 637,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rxx_to_xx": {
            "name": "translate_rxx_to_xx",
            "location": 649,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ryy_to_yy": {
            "name": "translate_ryy_to_yy",
            "location": 657,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rzz_to_zz": {
            "name": "translate_rzz_to_zz",
            "location": 665,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_rzz_to_cnot": {
            "name": "translate_rzz_to_cnot",
            "location": 673,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrtiswap_to_sqrtiswap_h": {
            "name": "translate_sqrtiswap_to_sqrtiswap_h",
            "location": 683,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrtiswap_h_to_can": {
            "name": "translate_sqrtiswap_h_to_can",
            "location": 694,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrtiswap_h_to_sqrtiswap": {
            "name": "translate_sqrtiswap_h_to_sqrtiswap",
            "location": 700,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrtswap_to_can": {
            "name": "translate_sqrtswap_to_can",
            "location": 711,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sqrtswap_h_to_can": {
            "name": "translate_sqrtswap_h_to_can",
            "location": 717,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_swap_to_cnot": {
            "name": "translate_swap_to_cnot",
            "location": 723,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_swap_to_ecp_sqrtiswap": {
            "name": "translate_swap_to_ecp_sqrtiswap",
            "location": 732,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_swap_to_iswap_cz": {
            "name": "translate_swap_to_iswap_cz",
            "location": 756,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_sycamore_to_fsim": {
            "name": "translate_sycamore_to_fsim",
            "location": 766,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_syc_to_can": {
            "name": "translate_syc_to_can",
            "location": 772,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_syc_to_cphase": {
            "name": "translate_syc_to_cphase",
            "location": 781,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_w_to_ecp": {
            "name": "translate_w_to_ecp",
            "location": 791,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_w_to_cnot": {
            "name": "translate_w_to_cnot",
            "location": 809,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_w_to_ch_cnot": {
            "name": "translate_w_to_ch_cnot",
            "location": 828,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_xx_to_can": {
            "name": "translate_xx_to_can",
            "location": 841,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_xx_to_zz": {
            "name": "translate_xx_to_zz",
            "location": 849,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_xy_to_can": {
            "name": "translate_xy_to_can",
            "location": 861,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_xy_to_sqrtiswap": {
            "name": "translate_xy_to_sqrtiswap",
            "location": 869,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_yy_to_can": {
            "name": "translate_yy_to_can",
            "location": 889,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_yy_to_zz": {
            "name": "translate_yy_to_zz",
            "location": 897,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_zz_to_can": {
            "name": "translate_zz_to_can",
            "location": 909,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_zz_to_cnot": {
            "name": "translate_zz_to_cnot",
            "location": 917,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_zz_to_xx": {
            "name": "translate_zz_to_xx",
            "location": 927,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_zz_to_yy": {
            "name": "translate_zz_to_yy",
            "location": 939,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_CS_to_CZPow": {
            "name": "translate_CS_to_CZPow",
            "location": 951,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_CT_to_CZPow": {
            "name": "translate_CT_to_CZPow",
            "location": 957,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_a_to_cnot": {
            "name": "translate_a_to_cnot",
            "location": 963,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_a_to_can": {
            "name": "translate_a_to_can",
            "location": 981,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/translate/translate_stdgates_3q.py": {
        "translate_ccix_to_cnot": {
            "name": "translate_ccix_to_cnot",
            "location": 38,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccix_to_cnot_adjacent": {
            "name": "translate_ccix_to_cnot_adjacent",
            "location": 69,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccnot_to_ccz": {
            "name": "translate_ccnot_to_ccz",
            "location": 103,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccnot_to_cnot": {
            "name": "translate_ccnot_to_cnot",
            "location": 122,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccnot_to_cnot_AMMR": {
            "name": "translate_ccnot_to_cnot_AMMR",
            "location": 156,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccnot_to_cv": {
            "name": "translate_ccnot_to_cv",
            "location": 197,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccxpow_to_cnotpow": {
            "name": "translate_ccxpow_to_cnotpow",
            "location": 224,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccz_to_adjacent_cnot": {
            "name": "translate_ccz_to_adjacent_cnot",
            "location": 236,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ccz_to_ccnot": {
            "name": "translate_ccz_to_ccnot",
            "location": 276,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_ciswap_to_ccix": {
            "name": "translate_ciswap_to_ccix",
            "location": 295,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cswap_to_ccnot": {
            "name": "translate_cswap_to_ccnot",
            "location": 304,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cswap_to_cnot": {
            "name": "translate_cswap_to_cnot",
            "location": 313,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_cswap_inside_to_cnot": {
            "name": "translate_cswap_inside_to_cnot",
            "location": 354,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_deutsch_to_barenco": {
            "name": "translate_deutsch_to_barenco",
            "location": 397,
            "return": [],
            "arguments": {
                "gate": []
            }
        },
        "translate_margolus_to_cnot": {
            "name": "translate_margolus_to_cnot",
            "location": 414,
            "return": [],
            "arguments": {
                "gate": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/translate/translate_test.py": {
        "test_stdgate_translators": {
            "name": "test_stdgate_translators",
            "location": 25,
            "return": [],
            "arguments": {
                "trans": []
            }
        },
        "test_std_gate_translators_symbolic": {
            "name": "test_std_gate_translators_symbolic",
            "location": 50,
            "return": [],
            "arguments": {
                "trans": []
            }
        },
        "test_translate": {
            "name": "test_translate",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_circuit_translate_targets": {
            "name": "test_circuit_translate_targets",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_can_to_cnot": {
            "name": "test_can_to_cnot",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_decompose_to_terminal_2q_gate": {
            "name": "test_decompose_to_terminal_2q_gate",
            "location": 115,
            "return": [],
            "arguments": {
                "term_gate": []
            }
        },
        "test_circuit_translate_exception": {
            "name": "test_circuit_translate_exception",
            "location": 134,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-dev-master/quantumflow/translate/translations.py": {
        "register_translation": {
            "name": "register_translation",
            "location": 26,
            "return": [],
            "arguments": {
                "translation": []
            }
        },
        "translation_source_gate": {
            "name": "translation_source_gate",
            "location": 37,
            "return": [],
            "arguments": {
                "trans": []
            }
        },
        "translation_target_gates": {
            "name": "translation_target_gates",
            "location": 41,
            "return": [],
            "arguments": {
                "trans": []
            }
        },
        "select_translations": {
            "name": "select_translations",
            "location": 56,
            "return": [],
            "arguments": {
                "target_gates": [],
                "translations": []
            }
        },
        "circuit_translate": {
            "name": "circuit_translate",
            "location": 116,
            "return": [],
            "arguments": {
                "circ": [],
                "translators": [],
                "targets": [],
                "recurse": []
            }
        }
    },
    "quantumflow-dev-master/quantumflow/translate/__init__.py": {}
}
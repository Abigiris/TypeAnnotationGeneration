{
    "query-service-master/app.py": {
        "root": {
            "name": "root",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "serve_health_check": {
            "name": "serve_health_check",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "serve_version": {
            "name": "serve_version",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "receive_bundle_event": {
            "name": "receive_bundle_event",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "bundle_event_handler": {
            "name": "bundle_event_handler",
            "location": 58,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "async_query_handler": {
            "name": "async_query_handler",
            "location": 65,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "query-service-master/dcpquery/exceptions.py": {},
    "query-service-master/dcpquery/formatting.py": {
        "format_query_results": {
            "name": "format_query_results",
            "location": 1,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "query_results": [],
                "column_names": []
            }
        }
    },
    "query-service-master/dcpquery/utils.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "secret_name": []
            }
        },
        "post_to_slack": {
            "name": "post_to_slack",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "slack_url": []
            }
        }
    },
    "query-service-master/dcpquery/webhooks.py": {
        "update_webhooks": {
            "name": "update_webhooks",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [],
                "replica": [],
                "callback_url": []
            }
        }
    },
    "query-service-master/dcpquery/_config.py": {
        "DCPQueryConfig.webhook_keys": {
            "name": "webhook_keys",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.reset_db_timeout_seconds": {
            "name": "reset_db_timeout_seconds",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": []
            }
        },
        "DCPQueryConfig.reset_db_session": {
            "name": "reset_db_session",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.db": {
            "name": "db",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.db_url": {
            "name": "db_url",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.db_session": {
            "name": "db_session",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.configure_logging": {
            "name": "configure_logging",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.dss_client": {
            "name": "dss_client",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DCPQueryConfig.alembic_config": {
            "name": "alembic_config",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/dcpquery/__init__.py": {},
    "query-service-master/dcpquery/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/000000000000_init_db.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/132698d15453_metadata_schema_version.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/51a8fb96ea24_create_rules.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/7597ca0971e5_create_db_functions.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/88bab7754636_add_uniq_constraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/9fa7918d332b_rename_processes_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/b56789b3d784_create_indices.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/d11b97864836_create_project_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/e2b45add6f68_rename_bundle_and_file_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/e5a3141a178d_replace_views_with_matviews.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/alembic/versions/f86d2cea09a9_create_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/api/query.py": {
        "post": {
            "name": "post",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "body": []
            }
        }
    },
    "query-service-master/dcpquery/api/query_job.py": {
        "create_async_query_job": {
            "name": "create_async_query_job",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "query": [],
                "params": []
            }
        },
        "post": {
            "name": "post",
            "location": 19,
            "return": [
                "Tuple[(Dict[(str, Any)], Any)]"
            ],
            "arguments": {
                "body": []
            }
        }
    },
    "query-service-master/dcpquery/api/query_jobs.py": {
        "get": {
            "name": "get",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "job_id": [],
                "redirect_when_waiting": [],
                "redirect_when_done": []
            }
        },
        "set_job_status": {
            "name": "set_job_status",
            "location": 43,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "job_id": [],
                "status": [],
                "error": [],
                "result_location": []
            }
        },
        "set_job_result": {
            "name": "set_job_result",
            "location": 51,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "job_id": [],
                "query": [],
                "params": [],
                "result": [],
                "error": []
            }
        },
        "process_async_query": {
            "name": "process_async_query",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "event_record": []
            }
        }
    },
    "query-service-master/dcpquery/api/__init__.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ChaliceWithConnexion.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "swagger_spec_path": []
            }
        },
        "ChaliceWithConnexion.render_internal_error": {
            "name": "render_internal_error",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ChaliceWithConnexion.create_connexion_app": {
            "name": "create_connexion_app",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceWithConnexion.dispatch": {
            "name": "dispatch",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceWithRequestLogging._get_view_function_response": {
            "name": "_get_view_function_response",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "view_function": [],
                "function_args": []
            }
        },
        "ChaliceWithGzipBinaryResponses.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceWithGzipBinaryResponses._get_view_function_response": {
            "name": "_get_view_function_response",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "view_function": [],
                "function_args": []
            }
        }
    },
    "query-service-master/dcpquery/api/files/bundle.py": {
        "get": {
            "name": "get",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "file_uuid": [],
                "check_events": []
            }
        }
    },
    "query-service-master/dcpquery/api/files/schema_type.py": {
        "get": {
            "name": "get",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "schema_type": [],
                "version": []
            }
        },
        "get_file_fqids_for_schema_type_version": {
            "name": "get_file_fqids_for_schema_type_version",
            "location": 24,
            "return": [
                "list"
            ],
            "arguments": {
                "schema_type": [],
                "major": [],
                "minor": []
            }
        }
    },
    "query-service-master/dcpquery/api/files/__init__.py": {},
    "query-service-master/dcpquery/db/materialized_views.py": {
        "update_bundles_materialized_view": {
            "name": "update_bundles_materialized_view",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update_files_materialized_view": {
            "name": "update_files_materialized_view",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_dcp_schema_type_materialized_views": {
            "name": "create_dcp_schema_type_materialized_views",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "matviews": []
            }
        },
        "create_materialized_view_tables": {
            "name": "create_materialized_view_tables",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/db/__init__.py": {
        "drop_db": {
            "name": "drop_db",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": []
            }
        },
        "init_db": {
            "name": "init_db",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "dry_run": []
            }
        },
        "migrate_db": {
            "name": "migrate_db",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_query": {
            "name": "run_query",
            "location": 48,
            "return": [
                "Generator[(sqlalchemy.engine.row.Row, Any, None)]"
            ],
            "arguments": {
                "query": [],
                "params": [],
                "rows_per_page": []
            }
        },
        "commit_to_db": {
            "name": "commit_to_db",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            }
        }
    },
    "query-service-master/dcpquery/db/__main__.py": {
        "print_alembic_help": {
            "name": "print_alembic_help",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "query-service-master/dcpquery/db/models/__init__.py": {
        "DCPQueryModelHelper.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bundle.delete_bundles": {
            "name": "delete_bundles",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "bundle_fqids": []
            }
        },
        "Bundle.select_bundle": {
            "name": "select_bundle",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "bundle_fqid": []
            }
        },
        "DCPMetadataSchemaType.get_schema_type": {
            "name": "get_schema_type",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "schema_type_name": []
            }
        },
        "Project.delete_many": {
            "name": "delete_many",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "project_fqids": []
            }
        },
        "Project.select_one": {
            "name": "select_one",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "project_fqid": []
            }
        },
        "File.select_file": {
            "name": "select_file",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "file_fqid": []
            }
        },
        "File.select_files_for_uuid": {
            "name": "select_files_for_uuid",
            "location": 103,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "file_uuid": []
            }
        },
        "File.delete_files": {
            "name": "delete_files",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "file_fqids": []
            }
        },
        "ProjectFileLink.select_links_for_file_fqids": {
            "name": "select_links_for_file_fqids",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "file_fqids": []
            }
        },
        "ProjectFileLink.delete_links_for_files": {
            "name": "delete_links_for_files",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "file_fqids": []
            }
        },
        "ProjectFileLink.select_links_for_project_fqids": {
            "name": "select_links_for_project_fqids",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "project_fqids": []
            }
        },
        "BundleFileLink.delete_links_for_bundles": {
            "name": "delete_links_for_bundles",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "bundle_fqids": []
            }
        },
        "BundleFileLink.delete_links_for_files": {
            "name": "delete_links_for_files",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "file_fqids": []
            }
        },
        "BundleFileLink.select_links_for_bundle_fqids": {
            "name": "select_links_for_bundle_fqids",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "bundle_fqids": []
            }
        },
        "BundleFileLink.select_links_for_file_fqids": {
            "name": "select_links_for_file_fqids",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "file_fqids": []
            }
        },
        "Process.list_all_child_processes": {
            "name": "list_all_child_processes",
            "location": 196,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "process_uuid": []
            }
        },
        "Process.list_all_parent_processes": {
            "name": "list_all_parent_processes",
            "location": 201,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "process_uuid": []
            }
        },
        "Process.list_direct_child_processes": {
            "name": "list_direct_child_processes",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "process_uuid": []
            }
        },
        "Process.list_direct_parent_processes": {
            "name": "list_direct_parent_processes",
            "location": 211,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "process_uuid": []
            }
        },
        "ProcessFileLink.get_most_recent_file": {
            "name": "get_most_recent_file",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/dcpquery/dss_subscription_event_handling/__init__.py": {
        "drop_one_bundle": {
            "name": "drop_one_bundle",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle_uuid": [],
                "bundle_version": []
            }
        },
        "delete_files_and_bundle_file_links_for_bundle_deletion": {
            "name": "delete_files_and_bundle_file_links_for_bundle_deletion",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle_fqid": []
            }
        },
        "delete_projects_and_project_file_links_for_file_deletion": {
            "name": "delete_projects_and_project_file_links_for_file_deletion",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "file_fqids": []
            }
        },
        "process_bundle_event": {
            "name": "process_bundle_event",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "dss_event": []
            }
        }
    },
    "query-service-master/dcpquery/etl/load.py": {
        "get_file_extension": {
            "name": "get_file_extension",
            "location": 60,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "load_links": {
            "name": "load_links",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "links": [],
                "bundle_uuid": []
            }
        },
        "format_process_info": {
            "name": "format_process_info",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "link": []
            }
        },
        "create_process_file_links": {
            "name": "create_process_file_links",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "process": []
            }
        },
        "BundleLoader.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleLoader.register_dcp_metadata_schema_type": {
            "name": "register_dcp_metadata_schema_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_type": []
            }
        },
        "BundleLoader.load_bundle": {
            "name": "load_bundle",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle": [],
                "extractor": [],
                "transformer": []
            }
        }
    },
    "query-service-master/dcpquery/etl/transform.py": {
        "transform_bundle": {
            "name": "transform_bundle",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {
                "bundle_uuid": [],
                "bundle_version": [],
                "bundle_path": [],
                "bundle_manifest_path": [],
                "extractor": []
            }
        }
    },
    "query-service-master/dcpquery/etl/__init__.py": {
        "update_process_join_table": {
            "name": "update_process_join_table",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dcpquery_etl_finalizer": {
            "name": "dcpquery_etl_finalizer",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "extractor": []
            }
        },
        "etl_one_bundle": {
            "name": "etl_one_bundle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle_uuid": [],
                "bundle_version": []
            }
        }
    },
    "query-service-master/docs/conf.py": {},
    "query-service-master/scripts/build_chalice_tf_config.py": {},
    "query-service-master/scripts/status.py": {},
    "query-service-master/scripts/trace.py": {
        "get_logs_commands": {
            "name": "get_logs_commands",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_apigateway_id": {
            "name": "get_apigateway_id",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "query-service-master/tests/__init__.py": {
        "load_fixture": {
            "name": "load_fixture",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "fixture_file": []
            }
        },
        "write_fixtures_to_db": {
            "name": "write_fixtures_to_db",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "eventually": {
            "name": "eventually",
            "location": 54,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "timeout": [],
                "interval": [],
                "errors": []
            }
        },
        "clear_views": {
            "name": "clear_views",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": []
            }
        },
        "truncate_tables": {
            "name": "truncate_tables",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cursor": []
            }
        },
        "eventually.decorate": {
            "name": "decorate",
            "location": 63,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "eventually.decorate.call": {
            "name": "call",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "query-service-master/tests/integration/test_endpoints.py": {
        "TestQueryService.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_health_check": {
            "name": "test_health_check",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_query": {
            "name": "test_query",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_create_async_query": {
            "name": "test_create_async_query",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_get_job_status": {
            "name": "test_get_job_status",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_get_job_status_for_uncreated_job": {
            "name": "test_get_job_status_for_uncreated_job",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_get_bundle_fqids_for_file_endpoint": {
            "name": "test_get_bundle_fqids_for_file_endpoint",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_get_file_fqids_for_schema_type_endpoint": {
            "name": "test_get_file_fqids_for_schema_type_endpoint",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueryService.test_get_job_status.get_job_result": {
            "name": "get_job_result",
            "location": 63,
            "return": [],
            "arguments": {
                "job_id": []
            }
        }
    },
    "query-service-master/tests/integration/__init__.py": {},
    "query-service-master/tests/migration/test_migrations.py": {
        "TestAllMigrations.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllMigrations.get_revisions": {
            "name": "get_revisions",
            "location": 15,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestAllMigrations.test_migrations": {
            "name": "test_migrations",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/migration/__init__.py": {},
    "query-service-master/tests/scale/test_scale.py": {
        "TestRequestScale.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threads": [],
                "scale": [],
                "stage": []
            }
        },
        "TestRequestScale._make_query": {
            "name": "_make_query",
            "location": 54,
            "return": [
                "Tuple[(requests.models.Response, int)]"
            ],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "TestRequestScale._get_file_uuids": {
            "name": "_get_file_uuids",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestScale._create_graph_traversal_query": {
            "name": "_create_graph_traversal_query",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_uuid": []
            }
        },
        "TestRequestScale.test_basic_queries_run_sequentially": {
            "name": "test_basic_queries_run_sequentially",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestScale.test_basic_queries_run_in_parallel": {
            "name": "test_basic_queries_run_in_parallel",
            "location": 109,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestScale.test_async_queries_run_in_parallel": {
            "name": "test_async_queries_run_in_parallel",
            "location": 137,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestScale.test_graph_traversal_queries_run_in_parallel": {
            "name": "test_graph_traversal_queries_run_in_parallel",
            "location": 165,
            "return": [
                "Tuple[(int, int, int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/scale/__init__.py": {},
    "query-service-master/tests/unit/test_bundle_updates.py": {
        "BundleUpdateEvents.test_drop_one_bundle_handles_deletion": {
            "name": "test_drop_one_bundle_handles_deletion",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleUpdateEvents.test_process_bundle_event_handles_deletions": {
            "name": "test_process_bundle_event_handles_deletions",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "mock_bundle_drop": []
            }
        },
        "BundleDeletion.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleDeletion.test_bundle_deletion_cascades_to_files": {
            "name": "test_bundle_deletion_cascades_to_files",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleDeletion.test_bundle_deletion_cascades_to_projects": {
            "name": "test_bundle_deletion_cascades_to_projects",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BundleDeletion.test_bundle_deletion_and_cascade_is_version_specific": {
            "name": "test_bundle_deletion_and_cascade_is_version_specific",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_create_async_query.py": {
        "TestCreateAsyncQuery.test_process_async_query_keeps_job_status_updated": {
            "name": "test_process_async_query_keeps_job_status_updated",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "set_job_status": []
            }
        },
        "TestCreateAsyncQuery.test_process_async_query_with_invalid_query": {
            "name": "test_process_async_query_with_invalid_query",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "set_job_status": []
            }
        },
        "TestCreateAsyncQuery.test_create_async_query_calls_process_async_func_with_correct_args": {
            "name": "test_create_async_query_calls_process_async_func_with_correct_args",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "sqs": [],
                "set_job_status": []
            }
        }
    },
    "query-service-master/tests/unit/test_database.py": {
        "TestReadOnlyTransactions.test_read_only_returns_column_names": {
            "name": "test_read_only_returns_column_names",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBRules.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestDBRules.tearDownClass": {
            "name": "tearDownClass",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestDBRules.test_file_table_rule": {
            "name": "test_file_table_rule",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBRules.test_bundle_table_rule": {
            "name": "test_bundle_table_rule",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBRules.test_process_table_rule": {
            "name": "test_process_table_rule",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBRules.test_process_file_link_table_rule": {
            "name": "test_process_file_link_table_rule",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBRules.test_bundle_file_link_table_rule": {
            "name": "test_bundle_file_link_table_rule",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseUtils.test_db_cli": {
            "name": "test_db_cli",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseUtils.test_alembic_config": {
            "name": "test_alembic_config",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseUtils.test_init_db": {
            "name": "test_init_db",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseUtils.test_drop_db": {
            "name": "test_drop_db",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBManager.create_upsert_rules_in_db": {
            "name": "create_upsert_rules_in_db",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDBManager.create_recursive_functions_in_db": {
            "name": "create_recursive_functions_in_db",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_endpoints.py": {
        "manage_query_timeout": {
            "name": "manage_query_timeout",
            "location": 192,
            "return": [],
            "arguments": {
                "timeout_seconds": []
            }
        },
        "TestEndpoints.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_healthcheck_endpoint": {
            "name": "test_healthcheck_endpoint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_query_endpoint": {
            "name": "test_query_endpoint",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_query_endpoint_with_params": {
            "name": "test_query_endpoint_with_params",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_query_endpoint_redirects_timeouts": {
            "name": "test_query_endpoint_redirects_timeouts",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_query_endpoint_redirects_too_large_responses": {
            "name": "test_query_endpoint_redirects_too_large_responses",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_webhook_endpoint": {
            "name": "test_webhook_endpoint",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "mock_sqs_queue": []
            }
        },
        "TestEndpoints.test_create_async_query_endpoint": {
            "name": "test_create_async_query_endpoint",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "mock_job_status": [],
                "mock_uuid": [],
                "mock_sqs_client": []
            }
        },
        "TestEndpoints.test_get_async_query_status_when_job_doesnt_exist": {
            "name": "test_get_async_query_status_when_job_doesnt_exist",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "mock_job_status": []
            }
        },
        "TestEndpoints.test_get_async_query_status_when_job_is_not_complete": {
            "name": "test_get_async_query_status_when_job_is_not_complete",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "mock_job_status": []
            }
        },
        "TestEndpoints.test_get_async_query_status_when_job_is_complete": {
            "name": "test_get_async_query_status_when_job_is_complete",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "mock_s3": [],
                "mock_job_status": []
            }
        },
        "TestEndpoints.test_get_file_fqids_for_schema_type_version": {
            "name": "test_get_file_fqids_for_schema_type_version",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_get_bundle_fqids_for_file_endpoint": {
            "name": "test_get_bundle_fqids_for_file_endpoint",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_get_bundle_fqids_for_file_that_doesnt_exist": {
            "name": "test_get_bundle_fqids_for_file_that_doesnt_exist",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_get_file_fqids_for_schema_type_that_doesnt_exist": {
            "name": "test_get_file_fqids_for_schema_type_that_doesnt_exist",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoints.test_get_file_fqids_for_schema_type_endpoint": {
            "name": "test_get_file_fqids_for_schema_type_endpoint",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_etl.py": {
        "TestETLHelpers.test_links_ignore_unknown_format": {
            "name": "test_links_ignore_unknown_format",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "TestETLHelpers.test_etl_one_bundle_calls_load_transform_and_commit": {
            "name": "test_etl_one_bundle_calls_load_transform_and_commit",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "mock_extractor": [],
                "mock_config": [],
                "mock_loader": [],
                "mock_transform_bundle": [],
                "mock_os": []
            }
        }
    },
    "query-service-master/tests/unit/test_extractor.py": {
        "MockHTTPClient.get": {
            "name": "get",
            "location": 25,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": []
            }
        },
        "MockDSSClient.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "swagger_url": []
            }
        },
        "TestExtractor.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.tearDown": {
            "name": "tearDown",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_bundle_event_handling": {
            "name": "test_bundle_event_handling",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDSSClient.MockDSSMethod.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "es_query": [],
                "replica": []
            }
        },
        "MockDSSClient.MockDSSMethod.iterate": {
            "name": "iterate",
            "location": 43,
            "return": [
                "Generator[(Dict[(str, str)], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "es_query": [],
                "replica": [],
                "per_page": []
            }
        },
        "MockDSSClient.MockDSSMethod.paginate": {
            "name": "paginate",
            "location": 47,
            "return": [
                "Generator[(Dict[(str, List[Dict[(str, str)]])], Any, None)]"
            ],
            "arguments": {
                "self": [],
                "es_query": [],
                "replica": [],
                "per_page": []
            }
        }
    },
    "query-service-master/tests/unit/test_loader.py": {
        "TestPostgresLoader.test_prepare_database": {
            "name": "test_prepare_database",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPostgresLoader.test_insert_into_database": {
            "name": "test_insert_into_database",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPostgresLoader.test_create_processes_calls_insert_correct_number_times": {
            "name": "test_create_processes_calls_insert_correct_number_times",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "mock_process_file_link": [],
                "mock_add_all": []
            }
        }
    },
    "query-service-master/tests/unit/test_load_data.py": {
        "TestLoadData.test_query_service_load_data": {
            "name": "test_query_service_load_data",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "mock_etl": []
            }
        },
        "TestLoadData.test_extract_transform_load": {
            "name": "test_extract_transform_load",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "mock_transform": []
            }
        }
    },
    "query-service-master/tests/unit/test_transform.py": {
        "TestTransform.test_construct_documents": {
            "name": "test_construct_documents",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransform.test_construct_documents_handles_empty_bundle": {
            "name": "test_construct_documents_handles_empty_bundle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransform.test_format_process_info_correctly_formats_link_object": {
            "name": "test_format_process_info_correctly_formats_link_object",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransform.test_get_file_extension": {
            "name": "test_get_file_extension",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_view_tables.py": {
        "TestViewTables.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestViewTables.test_db_views_exist_for_each_schema_type": {
            "name": "test_db_views_exist_for_each_schema_type",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewTables.test_biomaterial_view_table_contains_all_biomaterial_files": {
            "name": "test_biomaterial_view_table_contains_all_biomaterial_files",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewTables.test_bundle_view_table_only_contains_latest_version": {
            "name": "test_bundle_view_table_only_contains_latest_version",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewTables.test_file_view_table_only_contains_latest_version": {
            "name": "test_file_view_table_only_contains_latest_version",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewTables.test_bundles_table_contains_latest_version_of_all_bundles": {
            "name": "test_bundles_table_contains_latest_version_of_all_bundles",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewTables.test_file_table_contains_latest_version_of_all_files": {
            "name": "test_file_table_contains_latest_version_of_all_files",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/__init__.py": {
        "DCPQueryUnitTest.setUpClass": {
            "name": "setUpClass",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ChaliceTestHarness.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaliceTestHarness.__getattr__": {
            "name": "__getattr__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "ChaliceTestHarness.request": {
            "name": "request",
            "location": 30,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "headers": [],
                "data": [],
                "method": []
            }
        },
        "TestChaliceApp.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChaliceApp.test_root_route": {
            "name": "test_root_route",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_orm/test_bundles_and_bundle_file_links.py": {
        "TestBundles.test_select_bundle": {
            "name": "test_select_bundle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundles.test_delete_bundles_deletes_list_of_bundles": {
            "name": "test_delete_bundles_deletes_list_of_bundles",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleFileLinks.test_select_bundle_file_link": {
            "name": "test_select_bundle_file_link",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleFileLinks.test_select_links_by_file_fqids": {
            "name": "test_select_links_by_file_fqids",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleFileLinks.test_delete_links_for_bundle": {
            "name": "test_delete_links_for_bundle",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleFileLinks.test_delete_links_for_file": {
            "name": "test_delete_links_for_file",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBundleFileLinks.test_select_links_by_bundle_fqids": {
            "name": "test_select_links_by_bundle_fqids",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_orm/test_files.py": {
        "TestFiles.test_select_file": {
            "name": "test_select_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiles.test_delete_files": {
            "name": "test_delete_files",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiles.test_select_files_for_uuid": {
            "name": "test_select_files_for_uuid",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiles.test_select_files_for_non_existent_uuid": {
            "name": "test_select_files_for_non_existent_uuid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_orm/test_processes.py": {
        "TestProcesses.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProcesses.test_get_all_parents": {
            "name": "test_get_all_parents",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcesses.test_get_all_children": {
            "name": "test_get_all_children",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_orm/test_projects_and_project_file_links.py": {
        "TestProjects.setUpClass": {
            "name": "setUpClass",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProjects.test_insert_select_project": {
            "name": "test_insert_select_project",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjects.test_delete_many": {
            "name": "test_delete_many",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectFileLinks.setUpClass": {
            "name": "setUpClass",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestProjectFileLinks.test_insert_select_project_file_links": {
            "name": "test_insert_select_project_file_links",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectFileLinks.test_select_links_for_file_fqids": {
            "name": "test_select_links_for_file_fqids",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectFileLinks.test_delete_links_for_files": {
            "name": "test_delete_links_for_files",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectFileLinks.test_select_links_for_project_fqids": {
            "name": "test_select_links_for_project_fqids",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "query-service-master/tests/unit/test_orm/__init__.py": {}
}
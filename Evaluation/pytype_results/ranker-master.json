{
    "ranker-master/setup.py": {},
    "ranker-master/docs/conf.py": {},
    "ranker-master/league_ranker/__init__.py": {
        "calc_positions": {
            "name": "calc_positions",
            "location": 29,
            "return": [
                "Dict[(RankedPosition, Set[TZone])]"
            ],
            "arguments": {
                "zpoints": [
                    "Mapping[(TZone, TGamePoints)]"
                ],
                "dsq_list": [
                    "Container[TZone]"
                ]
            }
        },
        "_points_for_position": {
            "name": "_points_for_position",
            "location": 89,
            "return": [
                "LeaguePoints"
            ],
            "arguments": {
                "position": [
                    "RankedPosition"
                ],
                "winner_points": [
                    "LeaguePoints"
                ],
                "num_tied": [
                    "int"
                ]
            }
        },
        "calc_ranked_points": {
            "name": "calc_ranked_points",
            "location": 138,
            "return": [
                "Dict[(TZone, LeaguePoints)]"
            ],
            "arguments": {
                "pos_map": [
                    "Mapping[(RankedPosition, Collection[TZone])]"
                ],
                "dsq_list": [
                    "Sequence[TZone]"
                ],
                "num_zones": [
                    "int"
                ]
            }
        },
        "get_ranked_points": {
            "name": "get_ranked_points",
            "location": 237,
            "return": [
                "Dict[(TZone, LeaguePoints)]"
            ],
            "arguments": {
                "zpoints": [
                    "Mapping[(TZone, TGamePoints)]"
                ],
                "dsq": [
                    "Sequence[TZone]"
                ],
                "num_zones": [
                    "int"
                ]
            }
        },
        "_demo": {
            "name": "_demo",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ranker-master/tests/test_ranks.py": {
        "to_ranks": {
            "name": "to_ranks",
            "location": 8,
            "return": [
                "Mapping[(ranker.RankedPosition, Collection[TZone])]"
            ],
            "arguments": {
                "pos_map": [
                    "Mapping[(int, Collection[TZone])]"
                ]
            }
        },
        "PositionsTests.test_negative_points": {
            "name": "test_negative_points",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_non_integer_points": {
            "name": "test_non_integer_points",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_simple": {
            "name": "test_simple",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_simple_no_dsq": {
            "name": "test_simple_no_dsq",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_two_teams": {
            "name": "test_two_teams",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_tie": {
            "name": "test_tie",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_tie_no_dsq": {
            "name": "test_tie_no_dsq",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_dsq": {
            "name": "test_dsq",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionsTests.test_dsq_tie": {
            "name": "test_dsq_tie",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_reject_too_may_teams": {
            "name": "test_reject_too_may_teams",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_simple": {
            "name": "test_simple",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_simple_spare_zone": {
            "name": "test_simple_spare_zone",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_simple_no_dsq": {
            "name": "test_simple_no_dsq",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_two_teams": {
            "name": "test_two_teams",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_two_teams_two_spare_zones": {
            "name": "test_two_teams_two_spare_zones",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_tie": {
            "name": "test_tie",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_tie_no_dsq": {
            "name": "test_tie_no_dsq",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_dsq_tie": {
            "name": "test_dsq_tie",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_dsq_tie_one_spare_zone": {
            "name": "test_dsq_tie_one_spare_zone",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_detects_position_overlap_single_tie": {
            "name": "test_detects_position_overlap_single_tie",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_detects_higher_position_overlap_double_tie_higher": {
            "name": "test_detects_higher_position_overlap_double_tie_higher",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankedPointsTests.test_detects_lower_position_overlap_double_tie": {
            "name": "test_detects_lower_position_overlap_double_tie",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ranker-master/tests/__init__.py": {}
}
{
    "rebase-helper-main/rebase-helper.py": {},
    "rebase-helper-main/setup.py": {
        "get_rpm_distribution": {
            "name": "get_rpm_distribution",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 45,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_readme": {
            "name": "get_readme",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "SDistCommand.initialize_options": {
            "name": "initialize_options",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SDistCommand.make_distribution": {
            "name": "make_distribution",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/containers/integration.py": {
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FTPServer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [],
                "root": [],
                "report_size": []
            }
        },
        "FTPServer.serve": {
            "name": "serve",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [],
                "cert": [],
                "root": [],
                "report_size": []
            }
        },
        "HTTPServer.serve": {
            "name": "serve",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServer.__init__.RequestHandler.do_GET": {
            "name": "do_GET",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPServer.__init__.RequestHandler.do_POST": {
            "name": "do_POST",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPServer.__init__.RequestHandler.do_POST.dechunk": {
            "name": "dechunk",
            "location": 58,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "HTTPServer.__init__.RequestHandler.do_POST.verify_hash": {
            "name": "verify_hash",
            "location": 74,
            "return": [],
            "arguments": {
                "f": [],
                "hashtype": [],
                "hsh": []
            }
        }
    },
    "rebase-helper-main/docs/conf.py": {},
    "rebase-helper-main/docs/ext/autoargs.py": {
        "setup": {
            "name": "setup",
            "location": 393,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": []
            }
        },
        "AutoArgsDirective._get_program_name": {
            "name": "_get_program_name",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "parser": []
            }
        },
        "AutoArgsDirective._decorate_references": {
            "name": "_decorate_references",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "AutoArgsDirective._format_synopsis": {
            "name": "_format_synopsis",
            "location": 60,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "synopsis": []
            }
        },
        "AutoArgsDirective._get_delimiter": {
            "name": "_get_delimiter",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "fmt": [],
                "action": []
            }
        },
        "AutoArgsDirective._get_option_group": {
            "name": "_get_option_group",
            "location": 101,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cls": [],
                "fmt": [],
                "action": []
            }
        },
        "AutoArgsDirective._build_option_description": {
            "name": "_build_option_description",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fmt": [],
                "action": [],
                "custom_content": []
            }
        },
        "AutoArgsDirective._build_option_index": {
            "name": "_build_option_index",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "progname": [],
                "ids": [],
                "names": [],
                "synopses": []
            }
        },
        "AutoArgsDirective._build_option": {
            "name": "_build_option",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "action": [],
                "custom_content": []
            }
        },
        "AutoArgsDirective._build_program_synopsis": {
            "name": "_build_program_synopsis",
            "location": 211,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AutoArgsDirective._build_program_description": {
            "name": "_build_program_description",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AutoArgsDirective._build_program_options": {
            "name": "_build_program_options",
            "location": 264,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "custom_content": []
            }
        },
        "AutoArgsDirective._get_custom_content": {
            "name": "_get_custom_content",
            "location": 291,
            "return": [
                "Tuple[(Dict[(Optional[str], dict)], Dict[(str, dict)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoArgsDirective._construct_main_sections": {
            "name": "_construct_main_sections",
            "location": 324,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AutoArgsDirective._get_parser": {
            "name": "_get_parser",
            "location": 355,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoArgsDirective.run": {
            "name": "run",
            "location": 380,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoArgsDirective._format_synopsis.len_plain": {
            "name": "len_plain",
            "location": 67,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "AutoArgsDirective._build_option.get_id": {
            "name": "get_id",
            "location": 183,
            "return": [],
            "arguments": {
                "progname": [],
                "name": []
            }
        }
    },
    "rebase-helper-main/docs/ext/custom_man_builder.py": {
        "setup": {
            "name": "setup",
            "location": 112,
            "return": [
                "dict"
            ],
            "arguments": {
                "app": []
            }
        },
        "CustomManPageTranslator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": []
            }
        },
        "CustomManPageTranslator._format_option": {
            "name": "_format_option",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "CustomManPageTranslator.visit_desc_signature": {
            "name": "visit_desc_signature",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.depart_desc_signature": {
            "name": "depart_desc_signature",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.visit_desc_name": {
            "name": "visit_desc_name",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.visit_desc_addname": {
            "name": "visit_desc_addname",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.visit_reference": {
            "name": "visit_reference",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.visit_literal": {
            "name": "visit_literal",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.depart_literal": {
            "name": "depart_literal",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageTranslator.visit_manpage": {
            "name": "visit_manpage",
            "location": 88,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "CustomManPageBuilder.init": {
            "name": "init",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomManPageTranslator._format_option.get_font": {
            "name": "get_font",
            "location": 23,
            "return": [],
            "arguments": {
                "token": []
            }
        }
    },
    "rebase-helper-main/docs/ext/__init__.py": {},
    "rebase-helper-main/rebasehelper/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli_conf": [],
                "start_dir": [],
                "execution_dir": [],
                "results_dir": [],
                "create_logs": []
            }
        },
        "Application.__del__": {
            "name": "__del__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.setup": {
            "name": "setup",
            "location": 128,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "cli_conf": []
            }
        },
        "Application._prepare_spec_objects": {
            "name": "_prepare_spec_objects",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._sanitize_sources": {
            "name": "_sanitize_sources",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._initialize_data": {
            "name": "_initialize_data",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._find_spec_file": {
            "name": "_find_spec_file",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._delete_old_builds": {
            "name": "_delete_old_builds",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._delete_old_results_dir": {
            "name": "_delete_old_results_dir",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._delete_new_results_dir": {
            "name": "_delete_new_results_dir",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._delete_workspace_dir": {
            "name": "_delete_workspace_dir",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._check_workspace_dir": {
            "name": "_check_workspace_dir",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._check_results_dir": {
            "name": "_check_results_dir",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "results_dir": []
            }
        },
        "Application.extract_archive": {
            "name": "extract_archive",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "archive_path": [],
                "destination": []
            }
        },
        "Application.extract_sources": {
            "name": "extract_sources",
            "location": 358,
            "return": [
                "Any"
            ],
            "arguments": {
                "archive_path": [],
                "destination": []
            }
        },
        "Application.prepare_sources": {
            "name": "prepare_sources",
            "location": 380,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.patch_sources": {
            "name": "patch_sources",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": []
            }
        },
        "Application.generate_patch": {
            "name": "generate_patch",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._update_gitignore": {
            "name": "_update_gitignore",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "sources": [],
                "rebased_sources_dir": []
            }
        },
        "Application._prepare_rebased_repository": {
            "name": "_prepare_rebased_repository",
            "location": 489,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._sanitize_build_dict": {
            "name": "_sanitize_build_dict",
            "location": 520,
            "return": [
                "dict"
            ],
            "arguments": {
                "build_dict": []
            }
        },
        "Application.build_source_packages": {
            "name": "build_source_packages",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.build_binary_packages": {
            "name": "build_binary_packages",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.run_package_checkers": {
            "name": "run_package_checkers",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_dir": []
            }
        },
        "Application.get_new_build_logs": {
            "name": "get_new_build_logs",
            "location": 699,
            "return": [
                "Dict[(str, Dict[(str, None)])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.print_summary": {
            "name": "print_summary",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "Application.print_task_info": {
            "name": "print_task_info",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "builder": []
            }
        },
        "Application.apply_changes": {
            "name": "apply_changes",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.prepare_next_run": {
            "name": "prepare_next_run",
            "location": 749,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "results_dir": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 777,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._update_gitignore.match": {
            "name": "match",
            "location": 478,
            "return": [],
            "arguments": {
                "source": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/archive.py": {
        "register_archive_type": {
            "name": "register_archive_type",
            "location": 45,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "archive": [
                    "_T0@@"
                ]
            }
        },
        "ArchiveTypeBase.match": {
            "name": "match",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "ArchiveTypeBase.open": {
            "name": "open",
            "location": 64,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "ArchiveTypeBase.extract": {
            "name": "extract",
            "location": 72,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "TarXzArchiveType.open": {
            "name": "open",
            "location": 87,
            "return": [
                "tarfile.TarFile"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "TarXzArchiveType.extract": {
            "name": "extract",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "TarBz2ArchiveType.open": {
            "name": "open",
            "location": 100,
            "return": [
                "Union[(bz2.BZ2File, tarfile.TarFile)]"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "TarBz2ArchiveType.extract": {
            "name": "extract",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "TarGzArchiveType.open": {
            "name": "open",
            "location": 128,
            "return": [
                "tarfile.TarFile"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "TarGzArchiveType.extract": {
            "name": "extract",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "ZipArchiveType.match": {
            "name": "match",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "ZipArchiveType.open": {
            "name": "open",
            "location": 160,
            "return": [
                "zipfile.ZipFile"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "ZipArchiveType.extract": {
            "name": "extract",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "GemArchiveType.open": {
            "name": "open",
            "location": 186,
            "return": [
                "GemArchiveType.GemArchive"
            ],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "GemArchiveType.extract": {
            "name": "extract",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "archive": [],
                "filename": [],
                "path": []
            }
        },
        "Archive.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Archive.extract_archive": {
            "name": "extract_archive",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Archive.get_supported_archives": {
            "name": "get_supported_archives",
            "location": 229,
            "return": [
                "dict_keys[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GemArchiveType.GemArchive.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "GemArchiveType.GemArchive.extract": {
            "name": "extract",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "GemArchiveType.GemArchive.close": {
            "name": "close",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/argument_parser.py": {
        "SilentArgumentParser.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SilentArgumentParser.error": {
            "name": "error",
            "location": 35,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "CustomHelpFormatter._expand_help": {
            "name": "_expand_help",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "CustomAction.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "switch": [],
                "counter": [],
                "append": [],
                "actual_default": [],
                "dest": [],
                "default": [],
                "nargs": [],
                "const": [],
                "required": [],
                "type": [],
                "metavar": [],
                "help": [],
                "choices": []
            }
        },
        "CustomAction.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": []
            }
        },
        "CustomArgumentParser._check_value": {
            "name": "_check_value",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [],
                "value": []
            }
        },
        "CustomArgumentParser.error": {
            "name": "error",
            "location": 113,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/cli.py": {
        "CLI.build_parser": {
            "name": "build_parser",
            "location": 52,
            "return": [
                "rebasehelper.argument_parser.CustomArgumentParser"
            ],
            "arguments": {
                "available_choices_only": []
            }
        },
        "CLI.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "CLI.__getattr__": {
            "name": "__getattr__",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CliHelper.convert_macros_to_dict": {
            "name": "convert_macros_to_dict",
            "location": 108,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": [],
                "macros_list": []
            }
        },
        "CliHelper.run": {
            "name": "run",
            "location": 132,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/completion.py": {
        "replace_placeholders": {
            "name": "replace_placeholders",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": []
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Completion.extensions": {
            "name": "extensions",
            "location": 36,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "Completion.options": {
            "name": "options",
            "location": 41,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "Completion.dump": {
            "name": "dump",
            "location": 65,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Completion.options.get_delimiter": {
            "name": "get_delimiter",
            "location": 42,
            "return": [],
            "arguments": {
                "parser": [],
                "action": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": []
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Config.get_config_path": {
            "name": "get_config_path",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "config_file": []
            }
        },
        "Config.get_config": {
            "name": "get_config",
            "location": 50,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.merge": {
            "name": "merge",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cli": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/constants.py": {},
    "rebase-helper-main/rebasehelper/exceptions.py": {
        "RebaseHelperError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RebaseHelperError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourcePackageBuildError.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryPackageBuildError.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/logger.py": {
        "CustomLogger.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "level": []
            }
        },
        "CustomLogger.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "ColorizingStreamHandler.set_terminal_background": {
            "name": "set_terminal_background",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "background": []
            }
        },
        "ColorizingStreamHandler.emit": {
            "name": "emit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "MemoryHandler.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryHandler.shouldFlush": {
            "name": "shouldFlush",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "MemoryHandler.replay_into": {
            "name": "replay_into",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "LoggerHelper.setup_memory_handler": {
            "name": "setup_memory_handler",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LoggerHelper.remove_memory_handler": {
            "name": "remove_memory_handler",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LoggerHelper.add_stream_handler": {
            "name": "add_stream_handler",
            "location": 158,
            "return": [
                "ColorizingStreamHandler"
            ],
            "arguments": {
                "logger": [],
                "level": [],
                "formatter": []
            }
        },
        "LoggerHelper.add_file_handler": {
            "name": "add_file_handler",
            "location": 180,
            "return": [
                "Optional[logging.FileHandler]"
            ],
            "arguments": {
                "logger": [],
                "path": [],
                "formatter": [],
                "level": []
            }
        },
        "LoggerHelper.create_file_handlers": {
            "name": "create_file_handlers",
            "location": 208,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "LoggerHelper.create_stream_handlers": {
            "name": "create_stream_handlers",
            "location": 246,
            "return": [
                "Tuple[(ColorizingStreamHandler, ColorizingStreamHandler)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LoggerHelper.remove_file_handlers": {
            "name": "remove_file_handlers",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "handlers": []
            }
        },
        "CustomLogger.__getattr__.log": {
            "name": "log",
            "location": 59,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/options.py": {
        "traverse_options": {
            "name": "traverse_options",
            "location": 286,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "options": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/patcher.py": {
        "Patcher.decorate_patch_name": {
            "name": "decorate_patch_name",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "patch_name": []
            }
        },
        "Patcher.insert_patch_name": {
            "name": "insert_patch_name",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "message": [],
                "patch_name": []
            }
        },
        "Patcher.extract_patch_name": {
            "name": "extract_patch_name",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "message": []
            }
        },
        "Patcher.strip_patch_name": {
            "name": "strip_patch_name",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "diff": [],
                "patch_name": []
            }
        },
        "Patcher.apply_patch": {
            "name": "apply_patch",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "repo": [],
                "patch_object": []
            }
        },
        "Patcher._git_rebase": {
            "name": "_git_rebase",
            "location": 138,
            "return": [
                "Dict[(str, List[nothing])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Patcher.apply_old_patches": {
            "name": "apply_old_patches",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "source_dir": []
            }
        },
        "Patcher.init_git": {
            "name": "init_git",
            "location": 341,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "directory": []
            }
        },
        "Patcher.patch": {
            "name": "patch",
            "location": 372,
            "return": [
                "Dict[(str, list)]"
            ],
            "arguments": {
                "cls": [],
                "old_dir": [],
                "new_dir": [],
                "rest_sources": [],
                "patches": []
            }
        },
        "Patcher.apply_patch.sanitize": {
            "name": "sanitize",
            "location": 88,
            "return": [],
            "arguments": {
                "patch_filename": []
            }
        },
        "Patcher._git_rebase.compare_commits": {
            "name": "compare_commits",
            "location": 140,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/results_store.py": {
        "ResultsStore.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.clear": {
            "name": "clear",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.set_results": {
            "name": "set_results",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_type": [],
                "data_dict": []
            }
        },
        "ResultsStore.set_info_text": {
            "name": "set_info_text",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "data": []
            }
        },
        "ResultsStore.set_patches_results": {
            "name": "set_patches_results",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_dict": []
            }
        },
        "ResultsStore.set_checker_output": {
            "name": "set_checker_output",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "data": []
            }
        },
        "ResultsStore.set_build_log_hooks_result": {
            "name": "set_build_log_hooks_result",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "data": []
            }
        },
        "ResultsStore.set_build_data": {
            "name": "set_build_data",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [],
                "data": []
            }
        },
        "ResultsStore.set_changes_patch": {
            "name": "set_changes_patch",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "data": []
            }
        },
        "ResultsStore.set_result_message": {
            "name": "set_result_message",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "data": []
            }
        },
        "ResultsStore.get_all": {
            "name": "get_all",
            "location": 87,
            "return": [
                "Dict[(Any, dict)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_build": {
            "name": "get_build",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "ResultsStore.get_old_build": {
            "name": "get_old_build",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_new_build": {
            "name": "get_new_build",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_patches": {
            "name": "get_patches",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_checkers": {
            "name": "get_checkers",
            "location": 106,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_build_log_hooks": {
            "name": "get_build_log_hooks",
            "location": 109,
            "return": [
                "Dict[(nothing, nothing)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_summary_info": {
            "name": "get_summary_info",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_changes_patch": {
            "name": "get_changes_patch",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsStore.get_result_message": {
            "name": "get_result_message",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/sample_config.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "SampleConfig.generate": {
            "name": "generate",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/specfile.py": {
        "get_rebase_name": {
            "name": "get_rebase_name",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "dir_name": [],
                "name": []
            }
        },
        "saves": {
            "name": "saves",
            "location": 106,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "PatchList._get_index_list": {
            "name": "_get_index_list",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PatchList.__getitem__": {
            "name": "__getitem__",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PatchObject.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "index": [],
                "strip": []
            }
        },
        "PatchObject.get_patch_name": {
            "name": "get_patch_name",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "saves.wrapper": {
            "name": "wrapper",
            "location": 108,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "SpecFile.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "sources_location": [],
                "predefined_macros": [],
                "lookaside_cache_preset": [],
                "keep_comments": []
            }
        },
        "SpecFile.__del__": {
            "name": "__del__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.download_remote_sources": {
            "name": "download_remote_sources",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.update": {
            "name": "update",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._update_data": {
            "name": "_update_data",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.tag": {
            "name": "tag",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "section": []
            }
        },
        "SpecFile.get_raw_tag_value": {
            "name": "get_raw_tag_value",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tag_name": [],
                "section": []
            }
        },
        "SpecFile.set_raw_tag_value": {
            "name": "set_raw_tag_value",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": [],
                "value": [],
                "section": []
            }
        },
        "SpecFile._identify_main_source": {
            "name": "_identify_main_source",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "spec": []
            }
        },
        "SpecFile._get_spec_sources_list": {
            "name": "_get_spec_sources_list",
            "location": 246,
            "return": [
                "list"
            ],
            "arguments": {
                "spec_object": []
            }
        },
        "SpecFile.get_sources": {
            "name": "get_sources",
            "location": 263,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_archive": {
            "name": "get_archive",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._get_raw_source_string": {
            "name": "_get_raw_source_string",
            "location": 276,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "source_num": []
            }
        },
        "SpecFile.get_main_source": {
            "name": "get_main_source",
            "location": 282,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._get_initial_patches": {
            "name": "_get_initial_patches",
            "location": 290,
            "return": [
                "Dict[(str, List[PatchObject])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._get_patch_strip_options": {
            "name": "_get_patch_strip_options",
            "location": 320,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "patches": []
            }
        },
        "SpecFile.get_patches": {
            "name": "get_patches",
            "location": 349,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_applied_patches": {
            "name": "get_applied_patches",
            "location": 357,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_not_used_patches": {
            "name": "get_not_used_patches",
            "location": 365,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.process_patch_macros": {
            "name": "process_patch_macros",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment_out": [],
                "remove": [],
                "annotate": [],
                "note": []
            }
        },
        "SpecFile.update_paths_to_sources_and_patches": {
            "name": "update_paths_to_sources_and_patches",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.write_updated_patches": {
            "name": "write_updated_patches",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patches": [],
                "disable_inapplicable": []
            }
        },
        "SpecFile.get_NVR": {
            "name": "get_NVR",
            "location": 509,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_version": {
            "name": "get_version",
            "location": 512,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_release": {
            "name": "get_release",
            "location": 516,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.parse_release": {
            "name": "parse_release",
            "location": 524,
            "return": [
                "Tuple[(bool, int, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.set_version": {
            "name": "set_version",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [],
                "preserve_macros": []
            }
        },
        "SpecFile.set_release": {
            "name": "set_release",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "release": [],
                "preserve_macros": []
            }
        },
        "SpecFile.set_release_number": {
            "name": "set_release_number",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "release": []
            }
        },
        "SpecFile.set_extra_version": {
            "name": "set_extra_version",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra_version": [],
                "version_changed": []
            }
        },
        "SpecFile.set_tag": {
            "name": "set_tag",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [],
                "value": [],
                "preserve_macros": []
            }
        },
        "SpecFile.extract_version_from_archive_name": {
            "name": "extract_version_from_archive_name",
            "location": 861,
            "return": [
                "Any"
            ],
            "arguments": {
                "archive_path": [],
                "main_source": []
            }
        },
        "SpecFile.split_version_string": {
            "name": "split_version_string",
            "location": 898,
            "return": [
                "Tuple[(Any, Optional[str])]"
            ],
            "arguments": {
                "version_string": [],
                "current_version": []
            }
        },
        "SpecFile.get_prep_section": {
            "name": "get_prep_section",
            "location": 931,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_subpackage_name": {
            "name": "get_subpackage_name",
            "location": 954,
            "return": [
                "Any"
            ],
            "arguments": {
                "files_section": []
            }
        },
        "SpecFile.get_main_files_section": {
            "name": "get_main_files_section",
            "location": 968,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._read_spec_content": {
            "name": "_read_spec_content",
            "location": 984,
            "return": [
                "rebasehelper.spec_content.SpecContent"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile._write_spec_content": {
            "name": "_write_spec_content",
            "location": 1001,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.copy": {
            "name": "copy",
            "location": 1010,
            "return": [
                "_TSpecFile@@SpecFile@@"
            ],
            "arguments": {
                "self": [
                    "_TSpecFile@@SpecFile@@"
                ],
                "new_path": []
            }
        },
        "SpecFile.reload": {
            "name": "reload",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.save": {
            "name": "save",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.is_test_suite_enabled": {
            "name": "is_test_suite_enabled",
            "location": 1040,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.update_changelog": {
            "name": "update_changelog",
            "location": 1058,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "changelog_entry": []
            }
        },
        "SpecFile.get_new_log": {
            "name": "get_new_log",
            "location": 1072,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "changelog_entry": []
            }
        },
        "SpecFile._get_setup_parser": {
            "name": "_get_setup_parser",
            "location": 1110,
            "return": [
                "rebasehelper.argument_parser.SilentArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.get_setup_dirname": {
            "name": "get_setup_dirname",
            "location": 1130,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecFile.update_setup_dirname": {
            "name": "update_setup_dirname",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "SpecFile.find_archive_target_in_prep": {
            "name": "find_archive_target_in_prep",
            "location": 1232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "archive": []
            }
        },
        "SpecFile._update_data.guess_category": {
            "name": "guess_category",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "SpecFile.write_updated_patches.is_comment": {
            "name": "is_comment",
            "location": 440,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "SpecFile.write_updated_patches.is_empty": {
            "name": "is_empty",
            "location": 446,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "SpecFile.set_tag._get_macro_value": {
            "name": "_get_macro_value",
            "location": 606,
            "return": [],
            "arguments": {
                "macro": []
            }
        },
        "SpecFile.set_tag._redefine_macro": {
            "name": "_redefine_macro",
            "location": 613,
            "return": [],
            "arguments": {
                "macro": [],
                "value": []
            }
        },
        "SpecFile.set_tag._find_macros": {
            "name": "_find_macros",
            "location": 626,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SpecFile.set_tag._expand_macros": {
            "name": "_expand_macros",
            "location": 641,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SpecFile.set_tag._tokenize": {
            "name": "_tokenize",
            "location": 662,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SpecFile.set_tag._sync_macros": {
            "name": "_sync_macros",
            "location": 751,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SpecFile.set_tag._process_value": {
            "name": "_process_value",
            "location": 760,
            "return": [],
            "arguments": {
                "curval": [],
                "newval": []
            }
        },
        "SpecFile.get_prep_section.unmatched_quotation": {
            "name": "unmatched_quotation",
            "location": 933,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SpecFile.set_tag._tokenize.parse": {
            "name": "parse",
            "location": 664,
            "return": [],
            "arguments": {
                "inp": []
            }
        },
        "SpecFile.set_tag._tokenize.traverse": {
            "name": "traverse",
            "location": 729,
            "return": [],
            "arguments": {
                "tree": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/spec_content.py": {
        "SpecContent.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SpecContent.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecContent.__getitem__": {
            "name": "__getitem__",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "SpecContent.get_comment_span": {
            "name": "get_comment_span",
            "location": 97,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "cls": [],
                "line": [],
                "section": []
            }
        },
        "SpecContent.section": {
            "name": "section",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SpecContent.replace_section": {
            "name": "replace_section",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "content": []
            }
        },
        "SpecContent._split_sections": {
            "name": "_split_sections",
            "location": 150,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "cls": [],
                "content": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tags.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section_index": [],
                "section_name": [],
                "line": [],
                "name": [],
                "value_span": [],
                "valid": [],
                "index": []
            }
        },
        "Tag.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tags.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_content": [],
                "parsed_content": []
            }
        },
        "Tags.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Tags.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tags._map_sections_to_parsed": {
            "name": "_map_sections_to_parsed",
            "location": 78,
            "return": [
                "Dict[(int, int)]"
            ],
            "arguments": {
                "cls": [],
                "raw_content": [],
                "parsed_content": []
            }
        },
        "Tags._parse": {
            "name": "_parse",
            "location": 98,
            "return": [
                "Tuple[Tag]"
            ],
            "arguments": {
                "cls": [],
                "raw_content": [],
                "parsed_content": []
            }
        },
        "Tags._sanitize_tag": {
            "name": "_sanitize_tag",
            "location": 121,
            "return": [
                "Tuple[(Any, Optional[int], Union[(int, _T1)], Union[(int, _T2)])]"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "next_source_index": [
                    "_T1@@"
                ],
                "next_patch_index": [
                    "_T2@@"
                ]
            }
        },
        "Tags._parse_package_tags": {
            "name": "_parse_package_tags",
            "location": 140,
            "return": [
                "Tuple[(List[Tag], Union[(int, _T4)], Union[(int, _T5)])]"
            ],
            "arguments": {
                "cls": [],
                "section": [],
                "section_content": [],
                "parsed": [],
                "section_index": [],
                "next_source_index": [
                    "_T4@@"
                ],
                "next_patch_index": [
                    "_T5@@"
                ]
            }
        },
        "Tags._parse_list_tags": {
            "name": "_parse_list_tags",
            "location": 192,
            "return": [
                "Tuple[(List[Tag], Union[(int, _T4)], Union[(int, _T5)])]"
            ],
            "arguments": {
                "cls": [],
                "section": [],
                "section_content": [],
                "parsed": [],
                "section_index": [],
                "next_source_index": [
                    "_T4@@"
                ],
                "next_patch_index": [
                    "_T5@@"
                ]
            }
        },
        "Tags._filter": {
            "name": "_filter",
            "location": 217,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "tags": [],
                "section_index": [],
                "section_name": [],
                "name": [],
                "valid": []
            }
        },
        "Tags.filter": {
            "name": "filter",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "section_index": [],
                "section_name": [],
                "name": [],
                "valid": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/temporary_environment.py": {
        "TemporaryEnvironment.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exit_callback": []
            }
        },
        "TemporaryEnvironment.__enter__": {
            "name": "__enter__",
            "location": 50,
            "return": [
                "_TTemporaryEnvironment@@TemporaryEnvironment@@"
            ],
            "arguments": {
                "self": [
                    "_TTemporaryEnvironment@@TemporaryEnvironment@@"
                ]
            }
        },
        "TemporaryEnvironment.__exit__": {
            "name": "__exit__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEnvironment.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEnvironment.path": {
            "name": "path",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEnvironment.env": {
            "name": "env",
            "location": 79,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/types.py": {},
    "rebase-helper-main/rebasehelper/__init__.py": {},
    "rebase-helper-main/rebasehelper/helpers/bugzilla_helper.py": {
        "BugzillaHelper.get_bugzilla_component": {
            "name": "get_bugzilla_component",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "bugzilla_id": []
            }
        },
        "BugzillaHelper.get_version_from_comments": {
            "name": "get_version_from_comments",
            "location": 78,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [],
                "bugzilla_id": []
            }
        },
        "BugzillaHelper.clone_repository": {
            "name": "clone_repository",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "component": [],
                "bugzilla_id": []
            }
        },
        "BugzillaHelper.prepare_rebase_repository": {
            "name": "prepare_rebase_repository",
            "location": 134,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "bugzilla_id": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/console_helper.py": {
        "ConsoleHelper.should_use_colors": {
            "name": "should_use_colors",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "conf": []
            }
        },
        "ConsoleHelper.cprint": {
            "name": "cprint",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "message": [],
                "fg": [],
                "bg": [],
                "style": []
            }
        },
        "ConsoleHelper.parse_rgb_device_specification": {
            "name": "parse_rgb_device_specification",
            "location": 92,
            "return": [
                "Tuple[(Optional[Tuple[(int, ...)]], Optional[int])]"
            ],
            "arguments": {
                "specification": []
            }
        },
        "ConsoleHelper.color_is_light": {
            "name": "color_is_light",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "rgb": [],
                "bit_width": []
            }
        },
        "ConsoleHelper.detect_background": {
            "name": "detect_background",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ConsoleHelper.exchange_control_sequence": {
            "name": "exchange_control_sequence",
            "location": 143,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "query": [],
                "timeout": []
            }
        },
        "ConsoleHelper.Capturer.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": [],
                "stderr": []
            }
        },
        "ConsoleHelper.Capturer.__enter__": {
            "name": "__enter__",
            "location": 203,
            "return": [
                "ConsoleHelper.Capturer"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleHelper.Capturer.__exit__": {
            "name": "__exit__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/copr_helper.py": {
        "CoprHelper.get_client": {
            "name": "get_client",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CoprHelper.create_project": {
            "name": "create_project",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "project": [],
                "chroots": [],
                "description": [],
                "instructions": [],
                "permanent": [],
                "hide": []
            }
        },
        "CoprHelper.build": {
            "name": "build",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "project": [],
                "srpm": []
            }
        },
        "CoprHelper.get_build_url": {
            "name": "get_build_url",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "build_id": []
            }
        },
        "CoprHelper.get_build_status": {
            "name": "get_build_status",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "build_id": []
            }
        },
        "CoprHelper.watch_build": {
            "name": "watch_build",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "build_id": []
            }
        },
        "CoprHelper.download_build": {
            "name": "download_build",
            "location": 132,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "build_id": [],
                "destination": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/download_helper.py": {
        "DownloadHelper.progress": {
            "name": "progress",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "download_total": [],
                "downloaded": [],
                "start_time": [],
                "show_size": []
            }
        },
        "DownloadHelper.request": {
            "name": "request",
            "location": 95,
            "return": [
                "Optional[requests.models.Response]"
            ],
            "arguments": {
                "url": []
            }
        },
        "DownloadHelper.download_file": {
            "name": "download_file",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "destination_path": [],
                "blocksize": []
            }
        },
        "DownloadHelper.progress.format_time": {
            "name": "format_time",
            "location": 62,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "DownloadHelper.progress.format_size": {
            "name": "format_size",
            "location": 67,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DownloadHelper.request.FTPAdapter.send": {
            "name": "send",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "stream": [],
                "timeout": [],
                "verify": [],
                "cert": [],
                "proxies": []
            }
        },
        "DownloadHelper.request.FTPAdapter.close": {
            "name": "close",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/git_helper.py": {
        "GitHelper.get_user": {
            "name": "get_user",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GitHelper.get_email": {
            "name": "get_email",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "GitHelper.run_mergetool": {
            "name": "run_mergetool",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "repo": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/input_helper.py": {
        "InputHelper.strtobool": {
            "name": "strtobool",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": []
            }
        },
        "InputHelper.get_message": {
            "name": "get_message",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "message": [],
                "default_yes": [],
                "any_input": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/koji_helper.py": {
        "KojiHelper.create_session": {
            "name": "create_session",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "login": [],
                "profile": []
            }
        },
        "KojiHelper.upload_srpm": {
            "name": "upload_srpm",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "srpm": []
            }
        },
        "KojiHelper.get_task_url": {
            "name": "get_task_url",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "task_id": []
            }
        },
        "KojiHelper.display_task_results": {
            "name": "display_task_results",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "tasks": []
            }
        },
        "KojiHelper.watch_koji_tasks": {
            "name": "watch_koji_tasks",
            "location": 149,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "tasklist": []
            }
        },
        "KojiHelper.download_task_results": {
            "name": "download_task_results",
            "location": 223,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "tasklist": [],
                "destination": []
            }
        },
        "KojiHelper.get_latest_build": {
            "name": "get_latest_build",
            "location": 284,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "package": []
            }
        },
        "KojiHelper.get_build": {
            "name": "get_build",
            "location": 302,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "package": [],
                "version": []
            }
        },
        "KojiHelper.download_build": {
            "name": "download_build",
            "location": 322,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "build_id": [],
                "destination": [],
                "arches": []
            }
        },
        "KojiHelper.get_old_build_info": {
            "name": "get_old_build_info",
            "location": 363,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "package_name": [],
                "package_version": []
            }
        },
        "KojiHelper.upload_srpm.progress": {
            "name": "progress",
            "location": 106,
            "return": [],
            "arguments": {
                "uploaded": [],
                "total": [],
                "chunksize": [],
                "t1": [],
                "t2": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/lookaside_cache_helper.py": {
        "LookasideCacheHelper._read_config": {
            "name": "_read_config",
            "location": 56,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "cls": [],
                "tool": []
            }
        },
        "LookasideCacheHelper._read_sources": {
            "name": "_read_sources",
            "location": 62,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "cls": [],
                "basepath": []
            }
        },
        "LookasideCacheHelper._write_sources": {
            "name": "_write_sources",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "basepath": [],
                "sources": []
            }
        },
        "LookasideCacheHelper._hash": {
            "name": "_hash",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "filename": [],
                "hashtype": []
            }
        },
        "LookasideCacheHelper._download_source": {
            "name": "_download_source",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "package": [],
                "filename": [],
                "hashtype": [],
                "hsh": [],
                "target": []
            }
        },
        "LookasideCacheHelper.download": {
            "name": "download",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "tool": [],
                "basepath": [],
                "package": [],
                "target_dir": []
            }
        },
        "LookasideCacheHelper._upload_source": {
            "name": "_upload_source",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "package": [],
                "source_dir": [],
                "filename": [],
                "hashtype": [],
                "hsh": []
            }
        },
        "LookasideCacheHelper.update_sources": {
            "name": "update_sources",
            "location": 230,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "tool": [],
                "basepath": [],
                "package": [],
                "old_sources": [],
                "new_sources": [],
                "upload": [],
                "source_dir": []
            }
        },
        "LookasideCacheHelper._upload_source.post": {
            "name": "post",
            "location": 181,
            "return": [],
            "arguments": {
                "check_only": []
            }
        },
        "LookasideCacheHelper._upload_source.ChunkedData.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "check_only": [],
                "chunksize": []
            }
        },
        "LookasideCacheHelper._upload_source.ChunkedData.__iter__": {
            "name": "__iter__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookasideCacheHelper._upload_source.FakeProgress.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "check_only": [],
                "interval": []
            }
        },
        "LookasideCacheHelper._upload_source.FakeProgress.run": {
            "name": "run",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookasideCacheHelper._upload_source.FakeProgress.stop": {
            "name": "stop",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookasideCacheHelper._upload_source.post._post": {
            "name": "_post",
            "location": 182,
            "return": [],
            "arguments": {
                "url": [],
                "data": [],
                "headers": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/macro_helper.py": {
        "MacroHelper.expand": {
            "name": "expand",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "s": [],
                "default": [],
                "suppress_errors": []
            }
        },
        "MacroHelper.purge_macro": {
            "name": "purge_macro",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "macro": []
            }
        },
        "MacroHelper.expand_macros": {
            "name": "expand_macros",
            "location": 73,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "macros": [
                    "_T0@@"
                ]
            }
        },
        "MacroHelper.substitute_path_with_macros": {
            "name": "substitute_path_with_macros",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "path": [],
                "macros": []
            }
        },
        "MacroHelper.dump": {
            "name": "dump",
            "location": 107,
            "return": [
                "List[dict]"
            ],
            "arguments": {}
        },
        "MacroHelper.filter": {
            "name": "filter",
            "location": 172,
            "return": [
                "list"
            ],
            "arguments": {
                "macros": []
            }
        },
        "MacroHelper.dump.add_macro": {
            "name": "add_macro",
            "location": 133,
            "return": [],
            "arguments": {
                "properties": []
            }
        },
        "MacroHelper.filter._test": {
            "name": "_test",
            "location": 183,
            "return": [],
            "arguments": {
                "macro": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/path_helper.py": {
        "PathHelper.find_first_dir_with_file": {
            "name": "find_first_dir_with_file",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "top_path": [],
                "pattern": []
            }
        },
        "PathHelper.find_first_file": {
            "name": "find_first_file",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "top_path": [],
                "pattern": [],
                "recursion_level": []
            }
        },
        "PathHelper.find_all_files": {
            "name": "find_all_files",
            "location": 78,
            "return": [
                "list"
            ],
            "arguments": {
                "top_path": [],
                "pattern": []
            }
        },
        "PathHelper.find_all_files_current_dir": {
            "name": "find_all_files_current_dir",
            "location": 98,
            "return": [
                "list"
            ],
            "arguments": {
                "top_path": [],
                "pattern": []
            }
        },
        "PathHelper.get_temp_dir": {
            "name": "get_temp_dir",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "PathHelper.file_available": {
            "name": "file_available",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/process_helper.py": {
        "ProcessHelper.run_subprocess": {
            "name": "run_subprocess",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "cmd": [],
                "input_file": [],
                "output_file": [],
                "ignore_stderr": []
            }
        },
        "ProcessHelper.run_subprocess_cwd": {
            "name": "run_subprocess_cwd",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [],
                "cwd": [],
                "input_file": [],
                "output_file": [],
                "ignore_stderr": [],
                "shell": []
            }
        },
        "ProcessHelper.run_subprocess_env": {
            "name": "run_subprocess_env",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [],
                "env": [],
                "input_file": [],
                "output_file": [],
                "ignore_stderr": [],
                "shell": []
            }
        },
        "ProcessHelper.run_subprocess_cwd_env": {
            "name": "run_subprocess_cwd_env",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "cmd": [],
                "cwd": [],
                "env": [],
                "input_file": [],
                "output_file": [],
                "ignore_stderr": [],
                "shell": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/rpm_helper.py": {
        "RpmHeader.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hdr": []
            }
        },
        "RpmHeader.__getattr__": {
            "name": "__getattr__",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RpmHelper.is_package_installed": {
            "name": "is_package_installed",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "pkg_name": []
            }
        },
        "RpmHelper.all_packages_installed": {
            "name": "all_packages_installed",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "pkg_names": []
            }
        },
        "RpmHelper.install_build_dependencies": {
            "name": "install_build_dependencies",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "spec_path": [],
                "assume_yes": []
            }
        },
        "RpmHelper.get_header_from_rpm": {
            "name": "get_header_from_rpm",
            "location": 117,
            "return": [
                "RpmHeader"
            ],
            "arguments": {
                "rpm_name": []
            }
        },
        "RpmHelper.get_arches": {
            "name": "get_arches",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "RpmHelper.split_nevra": {
            "name": "split_nevra",
            "location": 145,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "RpmHelper.parse_spec": {
            "name": "parse_spec",
            "location": 173,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "flags": []
            }
        },
        "RpmHelper.get_rpm_spec": {
            "name": "get_rpm_spec",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "sourcedir": [],
                "predefined_macros": []
            }
        },
        "RpmHeader.__getattr__.decode": {
            "name": "decode",
            "location": 49,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/helpers/__init__.py": {},
    "rebase-helper-main/rebasehelper/plugins/plugin.py": {},
    "rebase-helper-main/rebasehelper/plugins/plugin_collection.py": {
        "PluginCollection.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entrypoint": [],
                "manager": []
            }
        },
        "PluginCollection.get_all_plugins": {
            "name": "get_all_plugins",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginCollection.get_supported_plugins": {
            "name": "get_supported_plugins",
            "location": 43,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginCollection.get_default_plugins": {
            "name": "get_default_plugins",
            "location": 46,
            "return": [
                "Optional[Union[(str, List[str])]]"
            ],
            "arguments": {
                "self": [],
                "return_one": []
            }
        },
        "PluginCollection.get_plugin": {
            "name": "get_plugin",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tool": []
            }
        },
        "PluginCollection.get_options": {
            "name": "get_options",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/plugin_loader.py": {
        "PluginLoader.load": {
            "name": "load",
            "location": 34,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "entrypoint": [],
                "manager": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/plugin_manager.py": {
        "PluginManager.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.get_options": {
            "name": "get_options",
            "location": 64,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginManager.__getattr__": {
            "name": "__getattr__",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PluginManager.__init__.convert_class_name": {
            "name": "convert_class_name",
            "location": 52,
            "return": [],
            "arguments": {
                "class_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/__init__.py": {},
    "rebase-helper-main/rebasehelper/plugins/build_log_hooks/files.py": {
        "Files.format": {
            "name": "format",
            "location": 89,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Files.merge_two_results": {
            "name": "merge_two_results",
            "location": 105,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "old": [
                    "_T0@@"
                ],
                "new": []
            }
        },
        "Files._parse_build_log": {
            "name": "_parse_build_log",
            "location": 124,
            "return": [
                "Tuple[(Optional[str], Optional[List[str]])]"
            ],
            "arguments": {
                "cls": [],
                "log_path": [],
                "nvr": []
            }
        },
        "Files._get_best_matching_files_section": {
            "name": "_get_best_matching_files_section",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "rebase_spec_file": [],
                "file": []
            }
        },
        "Files._sanitize_path": {
            "name": "_sanitize_path",
            "location": 219,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "cls": [],
                "path": [
                    "_T0@@"
                ]
            }
        },
        "Files._correct_missing_files": {
            "name": "_correct_missing_files",
            "location": 229,
            "return": [
                "collections.defaultdict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "rebase_spec_file": [],
                "files": []
            }
        },
        "Files._get_line_directives": {
            "name": "_get_line_directives",
            "location": 261,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "cls": [],
                "split_line": []
            }
        },
        "Files._correct_one_section": {
            "name": "_correct_one_section",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "subpackage": [],
                "sec_name": [],
                "sec_content": [],
                "files": [],
                "result": []
            }
        },
        "Files._correct_deleted_files": {
            "name": "_correct_deleted_files",
            "location": 356,
            "return": [
                "Dict[(str, Union[(Dict[(str, List[str])], List[str], _T1)])]"
            ],
            "arguments": {
                "cls": [],
                "rebase_spec_file": [],
                "files": [
                    "_T1@@"
                ]
            }
        },
        "Files.run": {
            "name": "run",
            "location": 387,
            "return": [
                "Tuple[(Union[(Dict[(str, Any)], collections.defaultdict[(str, Any)])], bool)]"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_log_hooks/__init__.py": {
        "BaseBuildLogHook.format": {
            "name": "format",
            "location": 44,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "BaseBuildLogHook.run": {
            "name": "run",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": [],
                "results_dir": []
            }
        },
        "BaseBuildLogHook.merge_two_results": {
            "name": "merge_two_results",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "old": [],
                "new": []
            }
        },
        "BuildLogHookCollection.run": {
            "name": "run",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "spec_file": [],
                "rebase_spec_file": [],
                "non_interactive": [],
                "force_build_log_hooks": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/__init__.py": {
        "get_mock_logfile_path": {
            "name": "get_mock_logfile_path",
            "location": 40,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "ret": [],
                "results_dir": [],
                "tmp_path": []
            }
        },
        "check_mock_privileges": {
            "name": "check_mock_privileges",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "BuildTemporaryEnvironment.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [],
                "patches": [],
                "spec": [],
                "results_dir": []
            }
        },
        "BuildTemporaryEnvironment.__enter__": {
            "name": "__enter__",
            "location": 95,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildTemporaryEnvironment._create_directory_structure": {
            "name": "_create_directory_structure",
            "location": 116,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildTemporaryEnvironment._build_env_exit_callback": {
            "name": "_build_env_exit_callback",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_dir": []
            }
        },
        "RpmbuildTemporaryEnvironment._create_directory_structure": {
            "name": "_create_directory_structure",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTemporaryEnvironment._create_directory_structure": {
            "name": "_create_directory_structure",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/rpm/copr_.py": {
        "Copr._build_rpms": {
            "name": "_build_rpms",
            "location": 74,
            "return": [
                "Tuple[(Optional[list], Optional[list], Any)]"
            ],
            "arguments": {
                "cls": [],
                "srpm": [],
                "name": []
            }
        },
        "Copr.build": {
            "name": "build",
            "location": 98,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": [],
                "srpm": []
            }
        },
        "Copr.get_task_info": {
            "name": "get_task_info",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "build_dict": []
            }
        },
        "Copr.get_detached_task": {
            "name": "get_detached_task",
            "location": 121,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "task_id": [],
                "results_dir": []
            }
        },
        "Copr.wait_for_task": {
            "name": "wait_for_task",
            "location": 135,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "build_dict": [],
                "task_id": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/rpm/koji_.py": {
        "Koji._verify_tasks": {
            "name": "_verify_tasks",
            "location": 65,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "task_dict": []
            }
        },
        "Koji._scratch_build": {
            "name": "_scratch_build",
            "location": 92,
            "return": [
                "Tuple[(Optional[list], Optional[list], Any)]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": [],
                "srpm": []
            }
        },
        "Koji.wait_for_task": {
            "name": "wait_for_task",
            "location": 110,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "build_dict": [],
                "task_id": [],
                "results_dir": []
            }
        },
        "Koji.get_task_info": {
            "name": "get_task_info",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "build_dict": []
            }
        },
        "Koji.get_detached_task": {
            "name": "get_detached_task",
            "location": 126,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "task_id": [],
                "results_dir": []
            }
        },
        "Koji.build": {
            "name": "build",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": [],
                "srpm": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/rpm/mock.py": {
        "Mock._build_rpm": {
            "name": "_build_rpm",
            "location": 51,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "srpm": [],
                "results_dir": [],
                "rpm_results_dir": [],
                "root": [],
                "arch": [],
                "builder_options": []
            }
        },
        "Mock.build": {
            "name": "build",
            "location": 93,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": [],
                "srpm": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/rpm/rpmbuild.py": {
        "Rpmbuild._build_rpm": {
            "name": "_build_rpm",
            "location": 52,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "cls": [],
                "srpm": [],
                "workdir": [],
                "results_dir": [],
                "rpm_results_dir": [],
                "builder_options": []
            }
        },
        "Rpmbuild.prepare": {
            "name": "prepare",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "conf": []
            }
        },
        "Rpmbuild.build": {
            "name": "build",
            "location": 102,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": [],
                "srpm": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/rpm/__init__.py": {
        "BuildToolBase.prepare": {
            "name": "prepare",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "conf": []
            }
        },
        "BuildToolBase.build": {
            "name": "build",
            "location": 56,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": [],
                "srpm": []
            }
        },
        "BuildToolBase.wait_for_task": {
            "name": "wait_for_task",
            "location": 75,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "build_dict": [],
                "task_id": [],
                "results_dir": []
            }
        },
        "BuildToolBase.get_task_info": {
            "name": "get_task_info",
            "location": 89,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "build_dict": []
            }
        },
        "BuildToolBase.get_detached_task": {
            "name": "get_detached_task",
            "location": 99,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "task_id": [],
                "results_dir": []
            }
        },
        "BuildToolBase.get_builder_options": {
            "name": "get_builder_options",
            "location": 112,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/srpm/mock.py": {
        "Mock._build_srpm": {
            "name": "_build_srpm",
            "location": 45,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "workdir": [],
                "results_dir": [],
                "srpm_results_dir": [],
                "srpm_builder_options": []
            }
        },
        "Mock.build": {
            "name": "build",
            "location": 100,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/srpm/rpmbuild.py": {
        "Rpmbuild._build_srpm": {
            "name": "_build_srpm",
            "location": 47,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "workdir": [],
                "results_dir": [],
                "srpm_results_dir": [],
                "srpm_builder_options": []
            }
        },
        "Rpmbuild.build": {
            "name": "build",
            "location": 87,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/build_tools/srpm/__init__.py": {
        "SRPMBuildToolBase.get_srpm_builder_options": {
            "name": "get_srpm_builder_options",
            "location": 42,
            "return": [
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "SRPMBuildToolBase.build": {
            "name": "build",
            "location": 49,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/abipkgdiff.py": {
        "AbiPkgDiff.is_available": {
            "name": "is_available",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AbiPkgDiff._get_packages_for_abipkgdiff": {
            "name": "_get_packages_for_abipkgdiff",
            "location": 69,
            "return": [
                "Tuple[(Optional[list], Optional[list])]"
            ],
            "arguments": {
                "cls": [],
                "input_structure": []
            }
        },
        "AbiPkgDiff._find_debuginfo": {
            "name": "_find_debuginfo",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "debug": [],
                "pkg": []
            }
        },
        "AbiPkgDiff.run_check": {
            "name": "run_check",
            "location": 94,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "AbiPkgDiff.parse_abi_logs": {
            "name": "parse_abi_logs",
            "location": 143,
            "return": [
                "Dict[(Any, Dict[(str, Dict[(str, Dict[(Union[(int, str)], Dict[(str, Union[(int, str)])])])])])]"
            ],
            "arguments": {
                "cls": [],
                "ret_codes": []
            }
        },
        "AbiPkgDiff.format": {
            "name": "format",
            "location": 212,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "AbiPkgDiff.get_important_changes": {
            "name": "get_important_changes",
            "location": 242,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "checker_output": []
            }
        },
        "AbiPkgDiff.parse_abi_logs.parse_changes": {
            "name": "parse_changes",
            "location": 170,
            "return": [],
            "arguments": {
                "lines": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/csmock.py": {
        "CsMock.is_available": {
            "name": "is_available",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "CsMock.run_check": {
            "name": "run_check",
            "location": 51,
            "return": [
                "Dict[(str, Union[(list, str)])]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "CsMock.format": {
            "name": "format",
            "location": 78,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/licensecheck.py": {
        "LicenseCheck.is_available": {
            "name": "is_available",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LicenseCheck.get_license_changes": {
            "name": "get_license_changes",
            "location": 58,
            "return": [
                "Tuple[(Dict[(str, Dict[(str, List[str])])], List[str], List[str])]"
            ],
            "arguments": {
                "cls": [],
                "old_dir": [],
                "new_dir": []
            }
        },
        "LicenseCheck.run_check": {
            "name": "run_check",
            "location": 149,
            "return": [
                "Dict[(str, Union[(bool, str, Dict[(str, Union[(str, Dict[(str, List[str])])])], List[str])])]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "LicenseCheck.output_to_report_file": {
            "name": "output_to_report_file",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "changes": [],
                "report_file_path": []
            }
        },
        "LicenseCheck.format": {
            "name": "format",
            "location": 188,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "LicenseCheck.get_important_changes": {
            "name": "get_important_changes",
            "location": 216,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [],
                "checker_output": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/pkgdiff.py": {
        "PkgDiff.is_available": {
            "name": "is_available",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PkgDiff._get_rpm_info": {
            "name": "_get_rpm_info",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "packages": []
            }
        },
        "PkgDiff._create_xml": {
            "name": "_create_xml",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "input_structure": []
            }
        },
        "PkgDiff._remove_not_changed_files": {
            "name": "_remove_not_changed_files",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "PkgDiff.fill_dictionary": {
            "name": "fill_dictionary",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "result_dir": [],
                "old_version": [],
                "new_version": []
            }
        },
        "PkgDiff._update_changed_moved": {
            "name": "_update_changed_moved",
            "location": 147,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "PkgDiff._remove_not_checked_files": {
            "name": "_remove_not_checked_files",
            "location": 157,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "results_dict": []
            }
        },
        "PkgDiff.process_xml_results": {
            "name": "process_xml_results",
            "location": 175,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "result_dir": [],
                "old_version": [],
                "new_version": []
            }
        },
        "PkgDiff.run_check": {
            "name": "run_check",
            "location": 205,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "PkgDiff.format": {
            "name": "format",
            "location": 256,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/rpmdiff.py": {
        "RpmDiff.is_available": {
            "name": "is_available",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "RpmDiff._get_rpms": {
            "name": "_get_rpms",
            "location": 60,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "rpm_list": []
            }
        },
        "RpmDiff._unpack_rpm": {
            "name": "_unpack_rpm",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "rpm_name": []
            }
        },
        "RpmDiff._analyze_logs": {
            "name": "_analyze_logs",
            "location": 71,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "cls": [],
                "output": [],
                "results_dict": [
                    "_T1@@"
                ]
            }
        },
        "RpmDiff.update_added_removed": {
            "name": "update_added_removed",
            "location": 92,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "results_dict": [
                    "_T0@@"
                ]
            }
        },
        "RpmDiff.run_check": {
            "name": "run_check",
            "location": 109,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, int)])])]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "RpmDiff.format": {
            "name": "format",
            "location": 167,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/rpminspect.py": {
        "Rpminspect.is_available": {
            "name": "is_available",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Rpminspect.format": {
            "name": "format",
            "location": 83,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Rpminspect.get_important_changes": {
            "name": "get_important_changes",
            "location": 97,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "checker_output": []
            }
        },
        "Rpminspect.process_data": {
            "name": "process_data",
            "location": 103,
            "return": [
                "Dict[(Any, int)]"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Rpminspect.run_rpminspect": {
            "name": "run_rpminspect",
            "location": 112,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "cls": [],
                "checker_dir": [],
                "old_pkg": [],
                "new_pkg": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/rpminspect_rpm.py": {
        "RpminspectRpm.run_check": {
            "name": "run_check",
            "location": 46,
            "return": [
                "Dict[(str, Union[(dict, str, List[str])])]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/rpminspect_srpm.py": {
        "RpminspectSrpm.run_check": {
            "name": "run_check",
            "location": 46,
            "return": [
                "Dict[(str, Union[(dict, str, List[str])])]"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/sonamecheck.py": {
        "SonameCheck.is_available": {
            "name": "is_available",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SonameCheck._get_sonames": {
            "name": "_get_sonames",
            "location": 52,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": [],
                "provides": []
            }
        },
        "SonameCheck.run_check": {
            "name": "run_check",
            "location": 62,
            "return": [
                "dict"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "SonameCheck.format": {
            "name": "format",
            "location": 92,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "SonameCheck.get_important_changes": {
            "name": "get_important_changes",
            "location": 110,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "checker_output": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/checkers/__init__.py": {
        "BaseChecker.prepare_results_dir": {
            "name": "prepare_results_dir",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseChecker.get_checker_output_dir_short": {
            "name": "get_checker_output_dir_short",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseChecker.is_available": {
            "name": "is_available",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseChecker.run_check": {
            "name": "run_check",
            "location": 79,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "results_dir": []
            }
        },
        "BaseChecker.format": {
            "name": "format",
            "location": 84,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "BaseChecker.get_category": {
            "name": "get_category",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseChecker.get_underlined_title": {
            "name": "get_underlined_title",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "text": [],
                "separator": []
            }
        },
        "BaseChecker.get_important_changes": {
            "name": "get_important_changes",
            "location": 97,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "cls": [],
                "checker_output": []
            }
        },
        "CheckerCollection.run": {
            "name": "run",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_dir": [],
                "checker_name": []
            }
        },
        "CheckerCollection.get_supported_plugins": {
            "name": "get_supported_plugins",
            "location": 147,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckerCollection.get_default_plugins": {
            "name": "get_default_plugins",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "return_one": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/output_tools/json_.py": {
        "JSON.print_summary": {
            "name": "print_summary",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "report_path": [],
                "results": []
            }
        },
        "JSON.run": {
            "name": "run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "logs": [],
                "app": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/output_tools/text.py": {
        "Text.print_success_message": {
            "name": "print_success_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "results": []
            }
        },
        "Text.print_changes_patch": {
            "name": "print_changes_patch",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "results": []
            }
        },
        "Text.print_message_and_separator": {
            "name": "print_message_and_separator",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "message": [],
                "separator": []
            }
        },
        "Text.print_patches": {
            "name": "print_patches",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "patches": []
            }
        },
        "Text.print_rpms_and_logs": {
            "name": "print_rpms_and_logs",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "rpms": [],
                "version": []
            }
        },
        "Text.print_build_logs": {
            "name": "print_build_logs",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "rpms": [],
                "dirpath": []
            }
        },
        "Text.print_summary": {
            "name": "print_summary",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "report_path": [],
                "results": []
            }
        },
        "Text.print_checkers_text_output": {
            "name": "print_checkers_text_output",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "checkers_results": []
            }
        },
        "Text.print_build_log_hooks_result": {
            "name": "print_build_log_hooks_result",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "build_log_hooks_result": []
            }
        },
        "Text.run": {
            "name": "run",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "logs": [],
                "app": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/output_tools/__init__.py": {
        "BaseOutputTool.get_report_path": {
            "name": "get_report_path",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "app": []
            }
        },
        "BaseOutputTool.prepend_results_dir_name": {
            "name": "prepend_results_dir_name",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "app": []
            }
        },
        "BaseOutputTool.print_cli_summary": {
            "name": "print_cli_summary",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "app": []
            }
        },
        "BaseOutputTool.print_important_checkers_output": {
            "name": "print_important_checkers_output",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseOutputTool.print_report_file_path": {
            "name": "print_report_file_path",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "app": []
            }
        },
        "BaseOutputTool.print_patches_cli": {
            "name": "print_patches_cli",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseOutputTool.print_patches_section_cli": {
            "name": "print_patches_section_cli",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "logger_method": [],
                "patch_type": []
            }
        },
        "BaseOutputTool.run": {
            "name": "run",
            "location": 165,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "logs": [],
                "app": []
            }
        },
        "OutputToolCollection.run": {
            "name": "run",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tool": [],
                "logs": [],
                "app": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/commit_hash_updater.py": {
        "CommitHashUpdater._get_commit_hash_from_github": {
            "name": "_get_commit_hash_from_github",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "spec_file": []
            }
        },
        "CommitHashUpdater._get_commit_hash": {
            "name": "_get_commit_hash",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "spec_file": []
            }
        },
        "CommitHashUpdater.run": {
            "name": "run",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/escape_macros.py": {
        "EscapeMacros.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/paths_to_rpm_macros.py": {
        "PathsToRPMMacros.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/pypi_url_fix.py": {
        "PyPIURLFix.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        },
        "PyPIURLFix._transform_url": {
            "name": "_transform_url",
            "location": 63,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0@@"
                ]
            }
        },
        "PyPIURLFix._transform_sources_url": {
            "name": "_transform_sources_url",
            "location": 69,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "_T0@@"
                ]
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/replace_old_version.py": {
        "ReplaceOldVersion._create_possible_replacements": {
            "name": "_create_possible_replacements",
            "location": 66,
            "return": [
                "List[Tuple[(Pattern[str], str)]]"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": [],
                "use_macro": []
            }
        },
        "ReplaceOldVersion.run": {
            "name": "run",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/ruby_helper.py": {
        "RubyHelper._get_instructions": {
            "name": "_get_instructions",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [],
                "comments": [],
                "old_version": [],
                "new_version": []
            }
        },
        "RubyHelper._build_source_from_instructions": {
            "name": "_build_source_from_instructions",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "instructions": [],
                "source": [],
                "logfile": []
            }
        },
        "RubyHelper.run": {
            "name": "run",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/typo_fix.py": {
        "TypoFix.run": {
            "name": "run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/spec_hooks/__init__.py": {
        "BaseSpecHook.run": {
            "name": "run",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        },
        "SpecHookCollection.run": {
            "name": "run",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_file": [],
                "rebase_spec_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/anitya.py": {
        "Anitya._get_version_using_distro_api": {
            "name": "_get_version_using_distro_api",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "Anitya._get_version_using_pattern_api": {
            "name": "_get_version_using_pattern_api",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "Anitya.run": {
            "name": "run",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/cpan.py": {
        "CPAN._get_version": {
            "name": "_get_version",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "CPAN.run": {
            "name": "run",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/hackage.py": {
        "Hackage._get_version": {
            "name": "_get_version",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "Hackage.run": {
            "name": "run",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/npmjs.py": {
        "NPMJS._get_version": {
            "name": "_get_version",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "NPMJS.run": {
            "name": "run",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/pypi.py": {
        "PyPI._get_version": {
            "name": "_get_version",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "PyPI.run": {
            "name": "run",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/rubygems.py": {
        "RubyGems._get_version": {
            "name": "_get_version",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "RubyGems.run": {
            "name": "run",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/plugins/versioneers/__init__.py": {
        "BaseVersioneer.run": {
            "name": "run",
            "location": 43,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "package_name": []
            }
        },
        "VersioneerCollection.run": {
            "name": "run",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "versioneer": [],
                "package_name": [],
                "category": [],
                "versioneer_blacklist": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/conftest.py": {
        "workdir": {
            "name": "workdir",
            "location": 44,
            "return": [],
            "arguments": {
                "request": [],
                "tmpdir_factory": []
            }
        },
        "spec_object": {
            "name": "spec_object",
            "location": 54,
            "return": [],
            "arguments": {
                "workdir": []
            }
        },
        "mocked_spec_object": {
            "name": "mocked_spec_object",
            "location": 60,
            "return": [],
            "arguments": {
                "spec_attributes": []
            }
        },
        "mocked_spec_object_copy": {
            "name": "mocked_spec_object_copy",
            "location": 84,
            "return": [],
            "arguments": {
                "mocked_spec_object": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "items": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_application.py": {
        "TestApplication.make_config": {
            "name": "make_config",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestApplication.app": {
            "name": "app",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "make_config": []
            }
        },
        "TestApplication.test_application_sources": {
            "name": "test_application_sources",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workdir": [],
                "app": []
            }
        },
        "TestApplication.test_setup": {
            "name": "test_setup",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_config": []
            }
        },
        "TestApplication.test_update_gitignore": {
            "name": "test_update_gitignore",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": [],
                "gitignore": [],
                "sources": [],
                "result": []
            }
        },
        "TestApplication.make_config.wrapper": {
            "name": "wrapper",
            "location": 65,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_archive.py": {
        "TestArchive.extracted_archive": {
            "name": "extracted_archive",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "archive": [],
                "workdir": []
            }
        },
        "TestArchive.test_archive": {
            "name": "test_archive",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "extracted_archive": []
            }
        },
        "TestArchive.test_invalid_archive": {
            "name": "test_invalid_archive",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "archive": [],
                "workdir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_cli.py": {
        "TestCLI.test_cli_unit": {
            "name": "test_cli_unit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_config.py": {
        "TestConfig.config_file": {
            "name": "config_file",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "config_args": []
            }
        },
        "TestConfig.test_get_config": {
            "name": "test_get_config",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "config_args": [],
                "config_file": []
            }
        },
        "TestConfig.test_merge": {
            "name": "test_merge",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "cli_args": [],
                "merged": [],
                "config_file": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_patcher.py": {
        "TestPatcher.rebased_sources": {
            "name": "rebased_sources",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestPatcher.old_sources": {
            "name": "old_sources",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestPatcher.new_sources": {
            "name": "new_sources",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestPatcher.old_repo": {
            "name": "old_repo",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "old_sources": []
            }
        },
        "TestPatcher.new_repo": {
            "name": "new_repo",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "new_sources": []
            }
        },
        "TestPatcher.test__git_rebase": {
            "name": "test__git_rebase",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "rebased_sources": [],
                "old_sources": [],
                "new_sources": [],
                "old_repo": [],
                "new_repo": [],
                "favor_on_conflict": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_results_store.py": {
        "TestResultsStore.results_store": {
            "name": "results_store",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestResultsStore.test_base_output_info": {
            "name": "test_base_output_info",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_store": []
            }
        },
        "TestResultsStore.test_base_output_patches": {
            "name": "test_base_output_patches",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_store": []
            }
        },
        "TestResultsStore.test_base_output_builds_old": {
            "name": "test_base_output_builds_old",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_store": []
            }
        },
        "TestResultsStore.test_base_output_builds_new": {
            "name": "test_base_output_builds_new",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_store": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_specfile.py": {
        "rpm_cleanup": {
            "name": "rpm_cleanup",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "TestSpecFile.test_get_release": {
            "name": "test_get_release",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_release": {
            "name": "test_set_release",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_version": {
            "name": "test_set_version",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test__get_raw_source_string": {
            "name": "test__get_raw_source_string",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": [],
                "sources": []
            }
        },
        "TestSpecFile.test_old_tarball": {
            "name": "test_old_tarball",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_get_sources": {
            "name": "test_get_sources",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workdir": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_get_patches": {
            "name": "test_get_patches",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workdir": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_split_version_string": {
            "name": "test_split_version_string",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpecFile.test_extract_version_from_archive_name": {
            "name": "test_extract_version_from_archive_name",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpecFile.test_get_main_files_section": {
            "name": "test_get_main_files_section",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": [],
                "main_files": []
            }
        },
        "TestSpecFile.test_is_test_suite_enabled": {
            "name": "test_is_test_suite_enabled",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": [],
                "is_enabled": []
            }
        },
        "TestSpecFile.test_set_extra_version": {
            "name": "test_set_extra_version",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_update_setup_dirname": {
            "name": "test_update_setup_dirname",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        },
        "TestSpecFile.test_find_archive_target_in_prep": {
            "name": "test_find_archive_target_in_prep",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_write_updated_patches": {
            "name": "test_write_updated_patches",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": [],
                "kwargs": [],
                "expected_content": []
            }
        },
        "TestSpecFile.test_update_paths_to_sources_and_patches": {
            "name": "test_update_paths_to_sources_and_patches",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        },
        "TestSpecFile.test_tags": {
            "name": "test_tags",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_tag": {
            "name": "test_set_tag",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": [],
                "preserve_macros": [],
                "tag": [],
                "value": [],
                "lines": [],
                "lines_preserve": []
            }
        },
        "TestSpecFile.test_get_new_log_with_non_c_locale": {
            "name": "test_get_new_log_with_non_c_locale",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_spec_content.py": {
        "TestSpecContent.spec_content": {
            "name": "spec_content",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpecContent.test_string_representation": {
            "name": "test_string_representation",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_content": []
            }
        },
        "TestSpecContent.test_get_comment_span": {
            "name": "test_get_comment_span",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "section": [],
                "expected": []
            }
        },
        "TestSpecContent.test_section": {
            "name": "test_section",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "spec_content": [],
                "section": [],
                "expected": []
            }
        },
        "TestSpecContent.test_replace_section": {
            "name": "test_replace_section",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_content": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_tags.py": {
        "TestTags.tags": {
            "name": "tags",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_tags": {
            "name": "test_tags",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "TestTags.test_filter": {
            "name": "test_filter",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/test_temporary_environment.py": {
        "TestTemporaryEnvironment.test_with_statement": {
            "name": "test_with_statement",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporaryEnvironment.test_with_statement_exception": {
            "name": "test_with_statement_exception",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporaryEnvironment.test_with_statement_callback": {
            "name": "test_with_statement_callback",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporaryEnvironment.test_with_statement_callback_exception": {
            "name": "test_with_statement_callback_exception",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporaryEnvironment.test_with_statement_callback.callback": {
            "name": "callback",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "TestTemporaryEnvironment.test_with_statement_callback_exception.callback": {
            "name": "callback",
            "location": 84,
            "return": [],
            "arguments": {}
        }
    },
    "rebase-helper-main/rebasehelper/tests/__init__.py": {},
    "rebase-helper-main/rebasehelper/tests/functional/conftest.py": {
        "make_artifacts_report": {
            "name": "make_artifacts_report",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "pytest_runtest_makereport": {
            "name": "pytest_runtest_makereport",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "rebase-helper-main/rebasehelper/tests/functional/test_rebase.py": {
        "initialized_git_repo": {
            "name": "initialized_git_repo",
            "location": 42,
            "return": [],
            "arguments": {
                "workdir": []
            }
        },
        "TestRebase.test_rebase": {
            "name": "test_rebase",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "buildtool": [],
                "favor_on_conflict": []
            }
        },
        "TestRebase.test_files_build_log_hook": {
            "name": "test_files_build_log_hook",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "buildtool": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/functional/__init__.py": {},
    "rebase-helper-main/rebasehelper/tests/helpers/test_console_helper.py": {
        "TestConsoleHelper.test_capture_output": {
            "name": "test_capture_output",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsoleHelper.test_parse_rgb_device_specification": {
            "name": "test_parse_rgb_device_specification",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "specification": [],
                "expected_rgb": [],
                "expected_bit_width": []
            }
        },
        "TestConsoleHelper.test_color_is_light": {
            "name": "test_color_is_light",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "rgb_tuple": [],
                "bit_width": [],
                "expected_result": []
            }
        },
        "TestConsoleHelper.test_capture_output.write": {
            "name": "write",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_download_helper.py": {
        "TestDownloadHelper.test_keyboard_interrupt_situation": {
            "name": "test_keyboard_interrupt_situation",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestDownloadHelper.test_progress": {
            "name": "test_progress",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "total": [],
                "downloaded": [],
                "output": [],
                "monkeypatch": []
            }
        },
        "TestDownloadHelper.test_download_existing_file": {
            "name": "test_download_existing_file",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "content": []
            }
        },
        "TestDownloadHelper.test_download_non_existing_file": {
            "name": "test_download_non_existing_file",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestDownloadHelper.test_keyboard_interrupt_situation.interrupter": {
            "name": "interrupter",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_git_helper.py": {
        "TestGitHelper.write_config_file": {
            "name": "write_config_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [],
                "name": [],
                "email": []
            }
        },
        "TestGitHelper.test_get_user_and_email": {
            "name": "test_get_user_and_email",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "workdir": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_input_helper.py": {
        "TestInputHelper.test_get_message": {
            "name": "test_get_message",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "capsys": [],
                "suffix": [],
                "answer": [],
                "kwargs": [],
                "expected_input": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_lookaside_cache_helper.py": {
        "TestLookasideCacheHelper.test_download": {
            "name": "test_download",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "filename": [],
                "hashtype": [],
                "hsh": []
            }
        },
        "TestLookasideCacheHelper.test_upload": {
            "name": "test_upload",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "hashtype": [],
                "hsh": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_macro_helper.py": {
        "TestMacroHelper.test_get_macros": {
            "name": "test_get_macros",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_path_helper.py": {
        "TestPathHelper.filelist": {
            "name": "filelist",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPathHelper.TestFindFirstDirWithFile.test_find_file": {
            "name": "test_find_file",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstDirWithFile.test_find_ffile": {
            "name": "test_find_ffile",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstDirWithFile.test_find_pythoon": {
            "name": "test_find_pythoon",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstFile.test_find_file": {
            "name": "test_find_file",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstFile.test_find_ffile": {
            "name": "test_find_ffile",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstFile.test_find_pythoon": {
            "name": "test_find_pythoon",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstFile.test_find_with_recursion": {
            "name": "test_find_with_recursion",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        },
        "TestPathHelper.TestFindFirstFile.test_find_without_recursion": {
            "name": "test_find_without_recursion",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filelist": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_process_helper.py": {
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd": {
            "name": "test_simple_cmd",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_redirected_output_path": {
            "name": "test_simple_cmd_with_redirected_output_path",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_redirected_output_fileobject": {
            "name": "test_simple_cmd_with_redirected_output_fileobject",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_input_path_and_redirected_output_path": {
            "name": "test_simple_cmd_with_input_path_and_redirected_output_path",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_input_fileobject_and_redirected_output_path": {
            "name": "test_simple_cmd_with_input_fileobject_and_redirected_output_path",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_input_path_and_redirected_output_fileobject": {
            "name": "test_simple_cmd_with_input_path_and_redirected_output_fileobject",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocess.test_simple_cmd_with_input_fileobject_and_redirected_output_fileobject": {
            "name": "test_simple_cmd_with_input_fileobject_and_redirected_output_fileobject",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocessCwd.test_simple_cmd_changed_work_dir": {
            "name": "test_simple_cmd_changed_work_dir",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocessCwd.test_simple_cmd_changed_work_dir_with_redirected_output": {
            "name": "test_simple_cmd_changed_work_dir_with_redirected_output",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocessCwdEnv.test_setting_new_env": {
            "name": "test_setting_new_env",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessHelper.TestRunSubprocessCwdEnv.test_setting_existing_env": {
            "name": "test_setting_existing_env",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/test_rpm_helper.py": {
        "TestRpmHelper.test_is_package_installed_existing": {
            "name": "test_is_package_installed_existing",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRpmHelper.test_is_package_installed_non_existing": {
            "name": "test_is_package_installed_non_existing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRpmHelper.test_all_packages_installed_existing": {
            "name": "test_all_packages_installed_existing",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRpmHelper.test_all_packages_installed_one_non_existing": {
            "name": "test_all_packages_installed_one_non_existing",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRpmHelper.test_split_nevra": {
            "name": "test_split_nevra",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "nevra": [],
                "name": [],
                "epoch": [],
                "version": [],
                "release": [],
                "arch": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/helpers/__init__.py": {},
    "rebase-helper-main/rebasehelper/tests/plugins/test_checkers.py": {
        "TestPkgDiff.get_data": {
            "name": "get_data",
            "location": 37,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPkgDiff.test_fill_dictionary": {
            "name": "test_fill_dictionary",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPkgDiff.test_process_xml": {
            "name": "test_process_xml",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/plugins/test_output_tools.py": {
        "TestOutputTool.results_file_path": {
            "name": "results_file_path",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestOutputTool.results_store": {
            "name": "results_store",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestOutputTool.get_expected_text_output": {
            "name": "get_expected_text_output",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestOutputTool.get_expected_json_output": {
            "name": "get_expected_json_output",
            "location": 136,
            "return": [
                "Dict[(str, Dict[(str, Union[(str, Dict[(str, Union[(str, Dict[(str, List[Union[(int, str)]])], List[str])])], List[str])])])]"
            ],
            "arguments": {}
        },
        "TestOutputTool.test_text_output_tool": {
            "name": "test_text_output_tool",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_file_path": [],
                "results_store": []
            }
        },
        "TestOutputTool.test_json_output_tool": {
            "name": "test_json_output_tool",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_file_path": [],
                "results_store": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/plugins/test_spec_hooks.py": {
        "TestSpecHook.test_typo_fix_spec_hook": {
            "name": "test_typo_fix_spec_hook",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        },
        "TestSpecHook.test_paths_to_rpm_macros_spec_hook": {
            "name": "test_paths_to_rpm_macros_spec_hook",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        },
        "TestSpecHook.test_escape_macros_spec_hook": {
            "name": "test_escape_macros_spec_hook",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        },
        "TestSpecHook.test_replace_old_version_spec_hook": {
            "name": "test_replace_old_version_spec_hook",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": [],
                "mocked_spec_object_copy": [],
                "replace_with_macro": []
            }
        },
        "TestSpecHook.test_pypi_to_python_hosted_url_trans": {
            "name": "test_pypi_to_python_hosted_url_trans",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "mocked_spec_object": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/plugins/test_versioneers.py": {
        "TestVersioneer.test_anitya_versioneer": {
            "name": "test_anitya_versioneer",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "min_version": []
            }
        },
        "TestVersioneer.test_pypi_versioneer": {
            "name": "test_pypi_versioneer",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "min_version": []
            }
        },
        "TestVersioneer.test_npmjs_versioneer": {
            "name": "test_npmjs_versioneer",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "min_version": []
            }
        },
        "TestVersioneer.test_cpan_versioneer": {
            "name": "test_cpan_versioneer",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "min_version": []
            }
        },
        "TestVersioneer.test_hackage_versioneer": {
            "name": "test_hackage_versioneer",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "package": [],
                "min_version": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/plugins/__init__.py": {},
    "rebase-helper-main/rebasehelper/tests/public_api/test_specfile.py": {
        "TestSpecFile.test_constructor": {
            "name": "test_constructor",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "workdir": []
            }
        },
        "TestSpecFile.test_update_changelog": {
            "name": "test_update_changelog",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_version": {
            "name": "test_set_version",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_get_version": {
            "name": "test_get_version",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_release_number": {
            "name": "test_set_release_number",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_release": {
            "name": "test_set_release",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_get_sources": {
            "name": "test_get_sources",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_tag": {
            "name": "test_tag",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_set_tag": {
            "name": "test_set_tag",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_save": {
            "name": "test_save",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_udpate": {
            "name": "test_udpate",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecFile.test_process_patch_macros": {
            "name": "test_process_patch_macros",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/public_api/test_spec_content.py": {
        "TestSpecContent.test_section": {
            "name": "test_section",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecContent.test_sections": {
            "name": "test_sections",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        },
        "TestSpecContent.test_replace_section": {
            "name": "test_replace_section",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/public_api/test_tags.py": {
        "TestTags.test_contructor": {
            "name": "test_contructor",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTags.test_filter": {
            "name": "test_filter",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "spec_object": []
            }
        }
    },
    "rebase-helper-main/rebasehelper/tests/public_api/__init__.py": {}
}